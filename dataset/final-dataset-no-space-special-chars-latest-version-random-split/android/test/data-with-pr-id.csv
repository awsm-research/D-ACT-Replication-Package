PR_ID,filename,method_idx_x,codebase,codebase-hash,initial,initial-hash,codebase-signature,init-signature,total_patchsets,method_idx,approved,approved-hash,approved-signature,row-num-right,init-ver-len,app-ver-len
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,37.0,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }",39402fa2effd00e68e1907d83dbba1430a63147c,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }",f71d4de94584b2312041618dcc7e1942c02bd954,testInterfaceCountersUdp4(),testInterfaceCountersUdp4(),15,56,"public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1000, false); }",2518b2aae78e5d629d74c8360c9499221264a13b,testInterfaceCountersUdp4(),381478,145,135
184792,sched_src_com_android_sched_marker_LocalMarkerManager.java,3.0,"@java.lang.Override public void addMarker(@javax.annotation.Nonnull com.android.sched.marker.Marker marker) { assert isValidMarker(marker.getClass()) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; if ((markers) == null) { markers = new java.util.concurrent.ConcurrentHashMap<java.lang.Class<? extends com.android.sched.marker.Marker>, com.android.sched.marker.Marker>(); } assert (markers.get(marker.getClass())) == null : (""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' already exists""; markers.put(marker.getClass(), marker); }",3e0b0c2f0e60ff865d6b351189ec7b3f9ad76b44,"@java.lang.Override public void addMarker(@javax.annotation.Nonnull com.android.sched.marker.Marker marker) { assert isValidMarker(marker.getClass()) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; if ((markers) == null) { synchronized(this) { if ((markers) == null) { markers = new java.util.concurrent.ConcurrentHashMap<java.lang.Class<? extends com.android.sched.marker.Marker>, com.android.sched.marker.Marker>(); } } } assert (markers.get(marker.getClass())) == null : (""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' already exists""; markers.put(marker.getClass(), marker); }",f52a2e052d11519c58e2b5ebbd1f8b183c3e0667,addMarker(com.android.sched.marker.Marker),addMarker(com.android.sched.marker.Marker),4,3,"@java.lang.Override public void addMarker(@javax.annotation.Nonnull com.android.sched.marker.Marker marker) { synchronized(lock) { assert isValidMarker(marker.getClass()) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; if ((markers) == null) { markers = new java.util.HashMap<java.lang.Class<? extends com.android.sched.marker.Marker>, com.android.sched.marker.Marker>(); } assert (markers.get(marker.getClass())) == null : (""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' already exists""; markers.put(marker.getClass(), marker); } }",74a4e7084235103e6ce5e0f2e302a0cbceceb4a6,addMarker(com.android.sched.marker.Marker),323956,204,190
325319,src_com_android_bluetooth_opp_BluetoothOppManager.java,8.0,"public void saveSendingFileInfo(java.lang.String mimeType, java.lang.String uriString, boolean isHandover) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = false; mMimeTypeOfSendingFile = mimeType; mUriOfSendingFile = uriString; mIsHandoverInitiated = isHandover; android.net.Uri uri = android.net.Uri.parse(uriString); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType)); storeApplicationData(); } }",72306ab81f31732e21d2a89a94aa2eec83b45702,"public void saveSendingFileInfo(java.lang.String mimeType, java.lang.String uriString, boolean isHandover) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = false; mMimeTypeOfSendingFile = mimeType; mIsHandoverInitiated = isHandover; android.net.Uri uri = android.net.Uri.parse(uriString); com.android.bluetooth.opp.BluetoothOppSendFileInfo sendFileInfo = com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType); uri = com.android.bluetooth.opp.BluetoothOppUtility.generateUri(uri, sendFileInfo); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, sendFileInfo); mUriOfSendingFile = uri.toString(); storeApplicationData(); } }",576adfda70f96e4725699acd17e2fd38579458e3,"saveSendingFileInfo(java.lang.String,java.lang.String,boolean)","saveSendingFileInfo(java.lang.String,java.lang.String,boolean)",10,2,"public void saveSendingFileInfo(java.lang.String mimeType, java.lang.String uriString, boolean isHandover, boolean fromExternal) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = false; mMimeTypeOfSendingFile = mimeType; mIsHandoverInitiated = isHandover; android.net.Uri uri = android.net.Uri.parse(uriString); com.android.bluetooth.opp.BluetoothOppSendFileInfo sendFileInfo = com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType, fromExternal); uri = com.android.bluetooth.opp.BluetoothOppUtility.generateUri(uri, sendFileInfo); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, sendFileInfo); mUriOfSendingFile = uri.toString(); storeApplicationData(); } }",9d7ef7169e116e7a530d035e271e607a12d6b270,"saveSendingFileInfo(java.lang.String,java.lang.String,boolean,boolean)",252896,182,189
378312,src_com_android_settings_wifi_WpsDialog.java,11.0,"@java.lang.Override public void onRestoreInstanceState(android.os.Bundle savedInstanceState) { if (savedInstanceState != null) { super.onRestoreInstanceState(savedInstanceState); com.android.settings.wifi.WpsDialog.DialogState dialogState = mDialogState.valueOf(savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_STATE)); java.lang.String msg = savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_MSG_STRING); updateDialog(dialogState, msg); } }",eabd0994062f4b2bb6f54c01e1bcb45706140ffa,"@java.lang.Override public void onRestoreInstanceState(android.os.Bundle savedInstanceState) { if (savedInstanceState != null) { super.onRestoreInstanceState(savedInstanceState); com.android.settings.wifi.WpsDialog.DialogState dialogState = mDialogState.valueOf(savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_STATE)); java.lang.String msg = savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_MSG_STRING); updateDialog(dialogState, msg); if (dialogState == (com.android.settings.wifi.WpsDialog.DialogState.WPS_START)) { android.net.wifi.WpsInfo wpsConfig = new android.net.wifi.WpsInfo(); wpsConfig.setup = mWpsSetup; mWifiManager.startWps(wpsConfig, mWpsListener); } } }",90016be1d8c1e079d1dc5c585d11475a4ea5251b,onRestoreInstanceState(android.os.Bundle),onRestoreInstanceState(android.os.Bundle),2,11,"@java.lang.Override public void onRestoreInstanceState(android.os.Bundle savedInstanceState) { if (savedInstanceState != null) { super.onRestoreInstanceState(savedInstanceState); com.android.settings.wifi.WpsDialog.DialogState dialogState = mDialogState.valueOf(savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_STATE)); java.lang.String msg = savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_MSG_STRING); updateDialog(dialogState, msg); if (dialogState == (com.android.settings.wifi.WpsDialog.DialogState.WPS_START)) { startWps(); } } }",bf66ab1b3f9829ebdb2bf20a463e8acf9e509c87,onRestoreInstanceState(android.os.Bundle),280163,202,153
583630,src_com_android_bips_LocalPrintJob.java,3.0,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId())) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""onPrinterFound() "" + (printer.name)) + "" state="") + (mState))); mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this::handleCapabilities); mPrintService.getDiscovery().stop(this); } }",46025bb6c38343f1135df87451ef058a2d7c7e01,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (!(printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId()))) return; if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""onPrinterFound() "" + (printer.name)) + "" state="") + (mState))); if (com.android.bips.p2p.P2pUtils.isP2p(printer)) { mConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, printer, this); return; } if ((com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, printer)) && ((mConnection) == null)) { mConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, printer, this); } if ((mDiscovery) != null) mDiscovery.stop(); mState = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this::handleCapabilities); }",0bf69c200a12df93c5b51ef2b1cd68be0481e0df,onPrinterFound(com.android.bips.discovery.DiscoveredPrinter),onPrinterFound(com.android.bips.discovery.DiscoveredPrinter),4,5,"@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { return; } if (!(printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId()))) { return; } if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""onPrinterFound() "" + (printer.name)) + "" state="") + (mState))); if (com.android.bips.p2p.P2pUtils.isP2p(printer)) { mConnection = new com.android.bips.p2p.P2pPrinterConnection(mPrintService, printer, this); return; } if ((com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, printer)) && ((mConnection) == null)) { mConnection = new com.android.bips.p2p.P2pPrinterConnection(mPrintService, printer, this); } mPrintService.getDiscovery().stop(this); mState = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this); }",0be4a558d47d6920631d555dd3e6d9735a6727e2,onPrinterFound(com.android.bips.discovery.DiscoveredPrinter),33316,326,319
141086,jack_src_com_android_jack_Options.java,33.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@javax.annotation.CheckForNull public java.io.File getWorkingDirectory() { return workingDirectory; },ad5f9416ea63d0547c7e8fe6bf0155554d75126d,,getWorkingDirectory(),3,16,"public java.util.List<java.io.File> getProguardFlagsFileFromWorkingDir() { java.util.List<java.io.File> proguardFlagsFileFromWorkingDir = new java.util.ArrayList<java.io.File>(proguardFlagsFiles.size()); for (java.io.File proguardFlagsFile : proguardFlagsFiles) { if (((workingDirectory) != null) && (!(proguardFlagsFile.isAbsolute()))) { proguardFlagsFileFromWorkingDir.add(new java.io.File(workingDirectory, proguardFlagsFile.getPath())); } else { proguardFlagsFileFromWorkingDir.add(proguardFlagsFile); } } return proguardFlagsFileFromWorkingDir; }",d44421b04f3d7139588a11808dabdd30c4e68715,getProguardFlagsFileFromWorkingDir(),267316,21,153
34990,lint_libs_lint_checks_tests_src_com_android_tools_lint_checks_ApiDetectorTest.java,7.0,"public void testXmlApi1() throws java.lang.Exception { assertEquals((""colors.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n"" + ((((((""layout.xml:15: Error: View requires API level 11 (current min is 1): <CalendarView>\n"" + ""layout.xml:21: Error: View requires API level 14 (current min is 1): <GridLayout>\n"") + ""layout.xml:22: Error: @android:attr/actionBarSplitStyle requires API level 14 (current min is 1)\n"") + ""layout.xml:23: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n"") + ""layout.xml:4: Error: \""match_parent\"" requires API level 8 (current min is 1), use \""fill_parent\"" instead\n"") + ""layout.xml:9: Error: View requires API level 5 (current min is 1): <QuickContactBadge>\n"") + ""themes.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)"")), lintProject(""apicheck/minsdk1.xml=>AndroidManifest.xml"", ""apicheck/layout.xml=>res/layout/layout.xml"", ""apicheck/themes.xml=>res/values/themes.xml"", ""apicheck/themes.xml=>res/color/colors.xml"")); }",a47ff29fca7b5bde5c86e6e94ffa692a0747e15e,"public void testXmlApi1() throws java.lang.Exception { assertEquals((""colors.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n"" + ((((((""layout.xml:15: Error: View requires API level 11 (current min is 1): <CalendarView>\n"" + ""layout.xml:21: Error: View requires API level 14 (current min is 1): <GridLayout>\n"") + ""layout.xml:22: Error: @android:attr/actionBarSplitStyle requires API level 14 (current min is 1)\n"") + ""layout.xml:23: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n"") + ""layout.xml:4: Error: \""match_parent\"" requires target API level 8 (current target is 1), use \""fill_parent\"" instead\n"") + ""layout.xml:9: Error: View requires API level 5 (current min is 1): <QuickContactBadge>\n"") + ""themes.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)"")), lintProject(""apicheck/minsdk1.xml=>AndroidManifest.xml"", ""apicheck/layout.xml=>res/layout/layout.xml"", ""apicheck/themes.xml=>res/values/themes.xml"", ""apicheck/themes.xml=>res/color/colors.xml"")); }",517c247c0f5cd58671cb61b8f53df4e1620c881f,testXmlApi1(),testXmlApi1(),2,7,"public void testXmlApi1() throws java.lang.Exception { assertEquals((""colors.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n"" + (((((""layout.xml:15: Error: View requires API level 11 (current min is 1): <CalendarView>\n"" + ""layout.xml:21: Error: View requires API level 14 (current min is 1): <GridLayout>\n"") + ""layout.xml:22: Error: @android:attr/actionBarSplitStyle requires API level 14 (current min is 1)\n"") + ""layout.xml:23: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n"") + ""layout.xml:9: Error: View requires API level 5 (current min is 1): <QuickContactBadge>\n"") + ""themes.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)"")), lintProject(""apicheck/minsdk1.xml=>AndroidManifest.xml"", ""apicheck/layout.xml=>res/layout/layout.xml"", ""apicheck/themes.xml=>res/values/themes.xml"", ""apicheck/themes.xml=>res/color/colors.xml"")); }",ab104b6e48eceb62ec0bdd015f57cdafa77b5ccf,testXmlApi1(),151521,335,298
558960,src_java_com_android_internal_telephony_uicc_UiccCard.java,18.0,"public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { mCi.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE, response)); }",8deb8e70ff3c6582a0e38c9ba8997374def12225,"public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { mCi.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE, response)); } else { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, response); } } }",ddeb98b5866e4eb28548ac4c93140ee71b1f0951,"iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String,android.os.Message)","iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String,android.os.Message)",8,10,"@java.lang.Deprecated public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, response); } else { loge(""iccTransmitApduLogicalChannel Failed!""); } }",7c06aee065fbd42ab7c146478762e8b6f4b4d290,"iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String,android.os.Message)",47931,191,110
268831,service_java_com_android_server_wifi_hotspot2_PasspointEventHandler.java,10.0,"private static java.lang.String escapeString(java.lang.String s, boolean utf8) { boolean asciiOnly = true; for (int n = 0; n < (s.length()); n++) { char ch = s.charAt(n); if (ch > 127) { asciiOnly = false; break; } } if (asciiOnly) { return ('""' + s) + '""'; } else { byte[] octets = s.getBytes((utf8 ? java.nio.charset.StandardCharsets.UTF_8 : java.nio.charset.StandardCharsets.ISO_8859_1)); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (byte octet : octets) { sb.append(java.lang.String.format(""%02x"", (octet & (com.android.server.wifi.anqp.Constants.BYTE_MASK)))); } return sb.toString(); } }",0441f98e938f00e93e0212c4fde0d99127bb682f,"public void notifyIconDone(long bssid, com.android.server.wifi.hotspot2.IconEvent iconEvent) throws java.io.IOException { java.lang.String filename = null; byte[] data = null; if (iconEvent != null) { data = retrieveIcon(iconEvent); filename = iconEvent.getFileName(); } mCallbacks.onIconResponse(bssid, filename, data); }",181aca49381c9d659a2806a4ae01f852183376f3,"escapeString(java.lang.String,boolean)","notifyIconDone(long,com.android.server.wifi.hotspot2.IconEvent)",6,3,"public void notifyIconDone(long bssid, com.android.server.wifi.hotspot2.IconEvent iconEvent) { java.lang.String filename = null; byte[] data = null; if (iconEvent != null) { try { data = retrieveIcon(iconEvent); filename = iconEvent.getFileName(); } catch (java.io.IOException ioe) { android.util.Log.e(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), (((""Failed to retrieve icon: "" + (ioe.toString())) + "": "") + (iconEvent.getFileName()))); } } mCallbacks.onIconResponse(bssid, filename, data); }",d48e5b5ce64e487678fd64ff7770069e6cf74fb8,"notifyIconDone(long,com.android.server.wifi.hotspot2.IconEvent)",252707,88,151
436855,jack_src_com_android_jack_analysis_tracer_Tracer.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean isDefaultMethod(com.android.jack.ir.ast.JMethod jMethod) { assert jMethod != null; assert (jMethod.getEnclosingType()) instanceof com.android.jack.ir.ast.JDefinedInterface; return (!(jMethod.isAbstract())) && (!(jMethod.isStatic())); },7522906a3ba751715df3dc28a4b919b120bc0504,,isDefaultMethod(com.android.jack.ir.ast.JMethod),4,12,private boolean isDefaultMethod(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod jMethod) { assert jMethod != null; assert (jMethod.getEnclosingType()) instanceof com.android.jack.ir.ast.JDefinedInterface; return (!(jMethod.isAbstract())) && (!(jMethod.isStatic())); },2629424c3a52c7e285491bc648d88e36a27e4414,isDefaultMethod(com.android.jack.ir.ast.JMethod),277092,66,71
89697,build-system_builder_src_main_java_com_android_builder_sdk_DefaultSdkLoader.java,,,,"public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation, @com.android.annotations.Nullable java.io.File ndkLocation) { if (((com.android.builder.sdk.DefaultSdkLoader.sLoader) != null) && ((!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation))) || (!(com.google.common.base.Objects.equal(ndkLocation, com.android.builder.sdk.DefaultSdkLoader.sLoader.mNdkLocation))))) { throw new java.lang.IllegalStateException(""Already created an SDK Loader with different SDK Path""); } return com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation, ndkLocation); }",b5748c54e1ee526015738a1ac7486659f448cce8,,"getLoader(java.io.File,java.io.File)",5,2,"public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation) { if (((com.android.builder.sdk.DefaultSdkLoader.sLoader) != null) && (!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation)))) { throw new java.lang.IllegalStateException(""Already created an SDK Loader with different SDK Path""); } return com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation); }",138258175b034359d82ad9f269d4a100a1347b01,getLoader(java.io.File),206493,194,133
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,25.0,"void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { try { postAndWaitForRunnable(() -> { pw.println((""Network Requested: "" + (mNetworkRequested))); if (isTrackingInterface()) { pw.println((""Tracking interface: "" + (mIface))); pw.increaseIndent(); pw.println((""MAC address: "" + (mHwAddr))); pw.println((""Link state: "" + (mLinkUp ? ""up"" : ""down""))); pw.decreaseIndent(); } else { pw.println(""Not tracking any interface""); } pw.println(); pw.println((""NetworkInfo: "" + (mNetworkInfo))); pw.println((""LinkProperties: "" + (mLinkProperties))); pw.println((""NetworkAgent: "" + (mNetworkAgent))); if ((mIpManager) != null) { pw.println(""IpManager:""); pw.increaseIndent(); mIpManager.dump(fd, pw, args); pw.decreaseIndent(); } }); } catch (java.lang.InterruptedException e) { throw new java.lang.IllegalStateException(""dump() interrupted""); } }",8de045915c796dd68f840825900d1271154cc95b,"void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { pw.println(getClass().getSimpleName()); pw.println(""Tracking interfaces:""); pw.increaseIndent(); for (java.lang.String iface : mTrackingInterfaces.keySet()) { pw.println(((iface + "":"") + (mTrackingInterfaces.get(iface)))); } pw.decreaseIndent(); }",2be0d978eec3950edc35accc6eb7bd221aa95609,"dump(java.io.FileDescriptor,com.android.internal.util.IndentingPrintWriter,java.lang.String[])","dump(java.io.FileDescriptor,com.android.internal.util.IndentingPrintWriter,java.lang.String[])",7,26,"void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { super.dump(fd, pw, args); pw.println(getClass().getSimpleName()); pw.println(""Tracking interfaces:""); pw.increaseIndent(); for (java.lang.String iface : mTrackingInterfaces.keySet()) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState ifaceState = mTrackingInterfaces.get(iface); pw.println(((iface + "":"") + ifaceState)); pw.increaseIndent(); ifaceState.mIpClient.dump(fd, pw, args); pw.decreaseIndent(); } pw.decreaseIndent(); }",7d3209bfd75198ff2688a11dd9f3aca3bd06fb5c,"dump(java.io.FileDescriptor,com.android.internal.util.IndentingPrintWriter,java.lang.String[])",177934,96,154
559360,core_java_android_net_IpSecTransform.java,11.0,"private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; startKeepalive(mContext); android.util.Log.d(android.net.IpSecTransform.TAG, (""Added Transform with Id "" + (mResourceId))); mCloseGuard.open(""build""); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }",49f8887d3e71f7caf663b8ea442313952624bed9,"private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, (""Added Transform with Id "" + (mResourceId))); mCloseGuard.open(""build""); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }",0e0e436e6df2dc8802364c88f79c9d5f5b28a5f9,activate(),activate(),9,13,"private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, (""Added Transform with Id "" + (mResourceId))); mCloseGuard.open(""build""); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }",f2ec1f2f53520d038d00189a8782357ecceae27c,activate(),140272,168,166
325465,tzdata_update2_src_test_libcore_tzdata_update2_TimeZoneBundleInstallerTest.java,13.0,"public void testInstall_withWorkingDir() throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir(); assertTrue(workingDir.mkdir()); libcore.tzdata.update2.TimeZoneBundleInstallerTest.createFile(new java.io.File(workingDir, ""myFile""), new byte[]{ 'a' }); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, ""001""); assertTrue(installer.install(bundle.getBytes())); assertBundleInstalled(bundle); }",1ca93af3087744b4b1401dcd927826dac8f98cb9,"public void testInstall_withWorkingDir() throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir(); assertTrue(workingDir.mkdir()); libcore.tzdata.update2.TimeZoneBundleInstallerTest.createFile(new java.io.File(workingDir, ""myFile""), new byte[]{ 'a' }); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, ""001""); assertEquals(TimeZoneBundleInstaller.INSTALL_SUCCESS, installer.installWithErrorCode(bundle.getBytes())); assertBundleInstalled(bundle); }",199e56677360ce07034adbd74da1a97609584595,testInstall_withWorkingDir(),testInstall_withWorkingDir(),3,11,"public void testInstall_withWorkingDir() throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir(); assertTrue(workingDir.mkdir()); libcore.tzdata.update2.TimeZoneBundleInstallerTest.createFile(new java.io.File(workingDir, ""myFile""), new byte[]{ 'a' }); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, 1); assertEquals(TimeZoneBundleInstaller.INSTALL_SUCCESS, installer.installWithErrorCode(bundle.getBytes())); assertBundleInstalled(bundle); }",c5d0932d40f0ad7255b5a6b31c12cc8f5a028e1c,testInstall_withWorkingDir(),402056,164,162
15762,ddms_libs_ddmlib_src_com_android_ddmlib_DeviceMonitor.java,33.0,"private boolean sendDeviceListMonitoringRequest() throws java.io.IOException { byte[] request = com.android.ddmlib.AdbHelper.formAdbRequest(""host:track-devices""); if ((com.android.ddmlib.AdbHelper.write(mMainAdbConnection, request)) == false) { com.android.ddmlib.Log.e(""DeviceMonitor"", ""Sending Tracking request failed!""); mMainAdbConnection.close(); throw new java.io.IOException(""Sending Tracking request failed!""); } com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(mMainAdbConnection, false); if ((resp.ioSuccess) == false) { com.android.ddmlib.Log.e(""DeviceMonitor"", ""Failed to read the adb response!""); mMainAdbConnection.close(); throw new java.io.IOException(""Failed to read the adb response!""); } if ((resp.okay) == false) { com.android.ddmlib.Log.e(""DeviceMonitor"", (""adb refused request: "" + (resp.message))); } return resp.okay; }",7fa90877c9b3811b01916a670a1d8311ec376cda,"private boolean sendDeviceListMonitoringRequest() throws com.android.ddmlib.TimeoutException, java.io.IOException { byte[] request = com.android.ddmlib.AdbHelper.formAdbRequest(""host:track-devices""); try { com.android.ddmlib.AdbHelper.write(mMainAdbConnection, request); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(mMainAdbConnection, false); if ((resp.ioSuccess) == false) { com.android.ddmlib.Log.e(""DeviceMonitor"", ""Failed to read the adb response!""); mMainAdbConnection.close(); throw new java.io.IOException(""Failed to read the adb response!""); } if ((resp.okay) == false) { com.android.ddmlib.Log.e(""DeviceMonitor"", (""adb refused request: "" + (resp.message))); } return resp.okay; } catch (java.io.IOException e) { com.android.ddmlib.Log.e(""DeviceMonitor"", ""Sending Tracking request failed!""); mMainAdbConnection.close(); throw e; } }",313ef91385376f8756871cf69686b8e5cb9387f9,sendDeviceListMonitoringRequest(),sendDeviceListMonitoringRequest(),3,33,"private boolean sendDeviceListMonitoringRequest() throws com.android.ddmlib.TimeoutException, java.io.IOException { byte[] request = com.android.ddmlib.AdbHelper.formAdbRequest(""host:track-devices""); try { com.android.ddmlib.AdbHelper.write(mMainAdbConnection, request); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(mMainAdbConnection, false); if ((resp.okay) == false) { com.android.ddmlib.Log.e(""DeviceMonitor"", (""adb refused request: "" + (resp.message))); } return resp.okay; } catch (java.io.IOException e) { com.android.ddmlib.Log.e(""DeviceMonitor"", ""Sending Tracking request failed!""); mMainAdbConnection.close(); throw e; } }",49b920a60dcba2d35ff870eca8af0a63c22977bb,sendDeviceListMonitoringRequest(),83741,271,212
269312,service_java_com_android_server_wifi_WifiNetworkSelector.java,,,,"@android.annotation.Nullable public android.net.wifi.WifiConfiguration selectNetwork(java.util.List<com.android.server.wifi.ScanDetail> scanDetails, boolean connected, boolean disconnected, boolean untrustedNetworkAllowed) { mConnectableNetworks.clear(); if ((scanDetails.size()) == 0) { localLog(""Empty connectivity scan result""); return null; } if ((mCurrentNetwork) == null) { mCurrentNetwork = mWifiConfigManager.getConfiguredNetwork(mWifiInfo.getNetworkId()); } if ((mCurrentBssid) == null) { mCurrentBssid = mWifiInfo.getBSSID(); } if (!(isNetworkSelectionNeeded(scanDetails, connected, disconnected))) { return null; } updateSavedNetworkSelectionStatus(); updateBssidBlacklist(); java.util.List<com.android.server.wifi.ScanDetail> filteredScanDetails = filterScanResults(scanDetails); if ((filteredScanDetails.size()) == 0) { return null; } updateNetworkScoreCache(filteredScanDetails); android.net.wifi.WifiConfiguration selectedNetwork = null; for (com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator registeredEvaluator : mEvaluators) { if (registeredEvaluator != null) { selectedNetwork = registeredEvaluator.evaluateNetworks(scanDetails, mCurrentNetwork, mCurrentBssid, connected, untrustedNetworkAllowed, mNetworkScoreCache, mConnectableNetworks); if (selectedNetwork != null) { break; } } } if (selectedNetwork != null) { mCurrentNetwork = selectedNetwork; mCurrentBssid = selectedNetwork.getNetworkSelectionStatus().getCandidate().BSSID; mLastNetworkSelectionTimeStamp = mClock.getElapsedSinceBootMillis(); } return selectedNetwork; }",35a81ba642422244488209c555c5848bcdc5a2e5,,"selectNetwork(java.util.List,boolean,boolean,boolean)",13,18,"@android.annotation.Nullable public android.net.wifi.WifiConfiguration selectNetwork(java.util.List<com.android.server.wifi.ScanDetail> scanDetails, boolean connected, boolean disconnected, boolean untrustedNetworkAllowed) { mConnectableNetworks.clear(); if ((scanDetails.size()) == 0) { localLog(""Empty connectivity scan result""); return null; } if ((mCurrentNetwork) == null) { mCurrentNetwork = mWifiConfigManager.getConfiguredNetwork(mWifiInfo.getNetworkId()); } mCurrentBssid = mWifiInfo.getBSSID(); if (!(isNetworkSelectionNeeded(scanDetails, connected, disconnected))) { return null; } for (com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator registeredEvaluator : mEvaluators) { if (registeredEvaluator != null) { registeredEvaluator.update(scanDetails); } } updateBssidBlacklist(); java.util.List<com.android.server.wifi.ScanDetail> filteredScanDetails = filterScanResults(scanDetails); if ((filteredScanDetails.size()) == 0) { return null; } android.net.wifi.WifiConfiguration selectedNetwork = null; for (com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator registeredEvaluator : mEvaluators) { if (registeredEvaluator != null) { selectedNetwork = registeredEvaluator.evaluateNetworks(scanDetails, mCurrentNetwork, mCurrentBssid, connected, untrustedNetworkAllowed, mConnectableNetworks); if (selectedNetwork != null) { break; } } } if (selectedNetwork != null) { mCurrentNetwork = selectedNetwork; mCurrentBssid = selectedNetwork.getNetworkSelectionStatus().getCandidate().BSSID; mLastNetworkSelectionTimeStamp = mClock.getElapsedSinceBootMillis(); } return selectedNetwork; }",e7a6d017e7c56d2faea1bcd44de675ff878b63cc,"selectNetwork(java.util.List,boolean,boolean,boolean)",347336,379,388
650339,tests_tests_net_src_android_net_cts_ConnectivityManagerTest.java,48.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getWifiMeteredStatus(java.lang.String ssid) throws java.lang.Exception { final java.lang.String command = ""cmd netpolicy list wifi-networks""; final java.lang.String policyString = runShellCommand(mInstrumentation, command); final java.util.regex.Matcher m = java.util.regex.Pattern.compile(((""^"" + ssid) + "";(true|false|none)$""), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES))).matcher(policyString); if (!(m.find())) { throw new java.lang.RuntimeException(""Unexpected format from cmd netpolicy""); } return m.group(1); }",9eb28677a82bf6860cb31e8d3a07887bb5a8eef4,,getWifiMeteredStatus(java.lang.String),8,23,"private java.lang.String getWifiMeteredStatus(java.lang.String ssid) throws java.lang.Exception { final java.lang.String command = ""cmd netpolicy list wifi-networks""; final java.lang.String policyString = runShellCommand(mInstrumentation, command); final java.util.regex.Matcher m = java.util.regex.Pattern.compile(((""^"" + ssid) + "";(true|false|none)$""), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES))).matcher(policyString); if (!(m.find())) { fail(""Unexpected format from cmd netpolicy""); } return m.group(1); }",4800b7cba8034752d448442d30c86c41964a820e,getWifiMeteredStatus(java.lang.String),491173,168,162
343503,service_java_com_android_server_wifi_WifiVendorHal.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean registerStaIfaceCallback() { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return false; try { kilroy(); android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.registerEventCallback(mIWifiStaIfaceEventCallback); return (status.code) == (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS); } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return false; } } },9081b430fe48230cf5588e421132725546ce4361,,registerStaIfaceCallback(),3,14,private boolean registerStaIfaceCallback() { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if (((mIWifiStaIface) == null) || ((mIWifiStaIfaceEventCallback) == null)) return false; try { kilroy(); android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.registerEventCallback(mIWifiStaIfaceEventCallback); return (status.code) == (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS); } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return false; } } },0439a01f1f454ca22081f8a21566245908983c7e,registerStaIfaceCallback(),460474,138,153
92757,luni_src_main_java_java_nio_DirectByteBuffer.java,49.0,"private void checkNotFreed() { if (freed) { throw new java.lang.IllegalStateException(""buffer was freed""); } }",af7e3385f896c352a99326068ab0a956ae37a23a,"private void checkNotFreed() { if (!(block.isValid())) { throw new java.lang.IllegalStateException(""buffer was freed""); } }",778302ed0fa3772f46ddf944a5707b0053782c94,checkNotFreed(),checkNotFreed(),3,49,"private void checkNotFreed() { if (block.isFreed()) { throw new java.lang.IllegalStateException(""buffer was freed""); } }",9b49f09cdfc6002830962ef2d1018b979162e273,checkNotFreed(),35259,30,32
161167,build-system_gradle-core_src_main_groovy_com_android_build_gradle_tasks_PackageSplitAbi.java,8.0,"@org.gradle.api.tasks.TaskAction protected void doFullTaskAction() { final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(""resources-${getOutputBaseName()}-(.*).ap_""); com.android.build.gradle.tasks.List<java.lang.String> unprocessedSplits = new com.android.build.gradle.tasks.ArrayList(splits); for (com.android.build.gradle.tasks.File file : inputFiles) { java.util.regex.Matcher matcher = pattern.matcher(file.getName()); if ((matcher.matches()) && (isAbiSplit(file.getName()))) { java.lang.String apkName = getApkName(matcher.group(1)); com.android.build.gradle.tasks.File outFile = new com.android.build.gradle.tasks.File(getOutputDirectory(), apkName); getBuilder().packageApk(file.absolutePath, null, null, com.google.common.collect.ImmutableList.of(), null, getJniFolders(), getMergingFolder(), com.google.common.collect.ImmutableSet.of(matcher.group(1)), getJniDebuggable(), getSigningConfig(), getPackagingOptions(), getPackagingOptionsFilter(), outFile.absolutePath); unprocessedSplits.remove(matcher.group(1)); } } if (!(unprocessedSplits.isEmpty())) { java.lang.String message = java.lang.String.format(""Could not find resource package for %1$s"", com.google.common.base.Joiner.on(',').join(unprocessedSplits)); logger.error(message); throw new java.lang.IllegalStateException(message); } }",56a6a9ed90947b183f4b2fc0bc128c6f2d514e03,"@org.gradle.api.tasks.TaskAction protected void doFullTaskAction() throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SigningException, com.android.ide.common.signing.KeytoolException, java.io.FileNotFoundException { final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(((""resources-"" + (getOutputBaseName())) + ""-(.*).ap_"")); java.util.List<java.lang.String> unprocessedSplits = com.google.common.collect.Lists.newArrayList(splits); for (java.io.File file : inputFiles) { java.util.regex.Matcher matcher = pattern.matcher(file.getName()); if ((matcher.matches()) && (isAbiSplit(file.getName()))) { java.lang.String apkName = getApkName(matcher.group(1)); java.io.File outFile = new java.io.File(getOutputDirectory(), apkName); getBuilder().packageApk(file.getAbsolutePath(), null, com.google.common.collect.ImmutableList.<java.io.File>of(), com.google.common.collect.ImmutableList.<java.io.File>of(), null, getJniFolders(), getMergingFolder(), com.google.common.collect.ImmutableSet.of(matcher.group(1)), isJniDebuggable(), getSigningConfig(), getPackagingOptions(), getPackagingOptionsFilter(), outFile.getAbsolutePath()); unprocessedSplits.remove(matcher.group(1)); } } if (!(unprocessedSplits.isEmpty())) { java.lang.String message = ""Could not find resource package for "" + (com.google.common.base.Joiner.on("","").join(unprocessedSplits)); getLogger().error(message); throw new java.lang.IllegalStateException(message); } }",61d9937da542f4a231692b90722f7fb671ba625e,doFullTaskAction(),doFullTaskAction(),2,10,"@org.gradle.api.tasks.TaskAction protected void doFullTaskAction() throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SigningException, com.android.ide.common.signing.KeytoolException, java.io.FileNotFoundException { final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(((""resources-"" + (getOutputBaseName())) + ""-(.*).ap_"")); java.util.List<java.lang.String> unprocessedSplits = com.google.common.collect.Lists.newArrayList(splits); for (java.io.File file : inputFiles) { java.util.regex.Matcher matcher = pattern.matcher(file.getName()); if ((matcher.matches()) && (isAbiSplit(file.getName()))) { java.lang.String apkName = getApkName(matcher.group(1)); java.io.File outFile = new java.io.File(getOutputDirectory(), apkName); getBuilder().packageApk(file.getAbsolutePath(), null, com.google.common.collect.ImmutableList.<java.io.File>of(), com.google.common.collect.ImmutableList.<java.io.File>of(), null, getJniFolders(), getMergingFolder(), com.google.common.collect.ImmutableSet.of(matcher.group(1)), isJniDebuggable(), getSigningConfig(), getPackagingOptions(), getPackagingOptionsFilter(), outFile.getAbsolutePath()); unprocessedSplits.remove(matcher.group(1)); } } if (!(unprocessedSplits.isEmpty())) { java.lang.String message = ""Could not find resource package for "" + (com.google.common.base.Joiner.on(',').join(unprocessedSplits)); getLogger().error(message); throw new java.lang.IllegalStateException(message); } }",2549df410a8bcad84b415c919b67d3c2860f46f1,doFullTaskAction(),184787,413,413
203176,src_com_android_bluetooth_btservice_AdapterService.java,128.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private dumpJava(java.io.FileDescriptor fd, com.android.bluetooth.btservice.Printwriter writer, java.lang.String[] args) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog log = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(log); } writer.write(log.toString()); writer.flush(); }",3d7f0f3f575aa4ed29cfb5afba5fc93b1add1152,,"dumpJava(java.io.FileDescriptor,com.android.bluetooth.btservice.Printwriter,java.lang.String[])",7,180,"private void dumpJava(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog log = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(log); } try { java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd); protoOut.write(log.toByteArray()); protoOut.close(); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } }",ecfa810b35ef49f2fecaae7b2f0b05db0a23ec69,dumpJava(java.io.FileDescriptor),175374,106,133
343029,dx_src_com_android_dx_dex_code_MultiCstInsn.java,,,,"public void setIndex(int i, int index) { if (index < 0) { throw new java.lang.IllegalArgumentException(""index < 0""); } if ((this.index[i]) != (com.android.dx.dex.code.MultiCstInsn.NOT_SET)) { throw new java.lang.RuntimeException(""index already set""); } this.index[i] = index; }",a37932fe5e0dbaaffc8ef131107625b1665ef9ce,,"setIndex(int,int)",8,2,"public void setIndex(int position, int index) { if (index < 0) { throw new java.lang.IllegalArgumentException(""index < 0""); } if (hasIndex(position)) { throw new java.lang.IllegalStateException(""index already set""); } this.index[position] = index; }",41a69874e143e61a3779467cb45866a1552ea494,"setIndex(int,int)",417091,86,64
504314,ojluni_src_main_java_java_lang_invoke_VarHandle.java,44.0,public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { unsupported(); return false; },72993d34f04fa6c98472bceeba11e3e371ac5b00,public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { return accessInfo.isAccessModeSupported(accessMode); },5e60dba7a436a43314de50fa68b9b3537a42cbcd,isAccessModeSupported(java.lang.invoke.VarHandle$AccessMode),isAccessModeSupported(java.lang.invoke.VarHandle$AccessMode),10,43,public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { final int testBit = 1 << (accessMode.ordinal()); return ((accessModesBitMask) & testBit) == testBit; },9b6b0458f219e22202a17952cfdce798232538af,isAccessModeSupported(java.lang.invoke.VarHandle$AccessMode),257636,36,54
369032,src_java_com_android_internal_telephony_uicc_UiccCardApplication.java,37.0,"private int parsePinPukErrorResult(android.os.AsyncResult ar) { int[] result = ((int[]) (ar.result)); if (result == null) { return -1; } else { int length = result.length; int attemptsRemaining = -1; if (length > 0) { attemptsRemaining = result[0]; } log((""parsePinPukErrorResult: attemptsRemaining="" + attemptsRemaining)); return attemptsRemaining; } }",2185e408aff54fd772f492912a0ba59a197b1065,"private int parsePinPukErrorResult(android.os.AsyncResult ar) { java.lang.Integer result = ((java.lang.Integer) (ar.result)); if (result == null) { return -1; } else { int attemptsRemaining = result; log((""parsePinPukErrorResult: attemptsRemaining="" + attemptsRemaining)); return attemptsRemaining; } }",04a2de1c189bdbc347b4d4656456d16f02abfdaa,parsePinPukErrorResult(android.os.AsyncResult),parsePinPukErrorResult(android.os.AsyncResult),5,37,"private int parsePinPukErrorResult(android.os.AsyncResult ar) { int[] result = ((int[]) (ar.result)); if (result == null) { return -1; } else { int length = result.length; int attemptsRemaining = -1; if (length > 0) { attemptsRemaining = result[0]; } log((""parsePinPukErrorResult: attemptsRemaining="" + attemptsRemaining)); return attemptsRemaining; } }",2185e408aff54fd772f492912a0ba59a197b1065,parsePinPukErrorResult(android.os.AsyncResult),189129,78,90
195862,test_031-class-attributes_src_ClassAttrs.java,10.0,"public static java.lang.String getSignatureAttribute(java.lang.Object obj) { java.lang.reflect.Method method; try { java.lang.Class c = java.lang.Class.forName(""libcore.reflect.AnnotationAccess""); method = c.getDeclaredMethod(""getSignature"", java.lang.reflect.AnnotatedElement.class); method.setAccessible(true); } catch (java.lang.Exception ex) { ex.printStackTrace(); return ""<unknown>""; } try { return ((java.lang.String) (method.invoke(null, obj))); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } }",c97fd8c2c2dbd1caacb7d3c3dd7bf1d8fda13f1b,"public static java.lang.String getSignatureAttribute(java.lang.Object obj) { java.lang.reflect.Method method; try { java.lang.Class c = java.lang.Class.forName(""libcore.reflect.AnnotationAccess""); method = c.getDeclaredMethod(""getSignature"", java.lang.reflect.AnnotatedElement.class); method.setAccessible(true); } catch (java.lang.Exception ex) { ex.printStackTrace(java.lang.System.out); return ""<unknown>""; } try { return ((java.lang.String) (method.invoke(null, obj))); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } }",298317a89613f0c2ce625a142c804502ac2c0b80,getSignatureAttribute(java.lang.Object),getSignatureAttribute(java.lang.Object),3,10,"public static java.lang.String getSignatureAttribute(java.lang.Object obj) { java.lang.reflect.Method method; try { java.lang.Class<?> c = obj.getClass(); if ((c == (java.lang.reflect.Method.class)) || (c == (java.lang.reflect.Constructor.class))) { c = java.lang.reflect.Executable.class; } method = c.getDeclaredMethod(""getSignatureAttribute""); method.setAccessible(true); } catch (java.lang.Exception ex) { ex.printStackTrace(java.lang.System.out); return ""<unknown>""; } try { return ((java.lang.String) (method.invoke(obj))); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } }",789885baab4dfc7104079630f211b8003fe54ea1,getSignatureAttribute(java.lang.Object),228199,174,197
175623,sched_src_com_android_sched_util_print_JsonFormatterPovider.java,,,,"@java.lang.Override public boolean print(java.io.PrintStream printer, java.lang.String value) { printer.print(((""\"""" + (value.replace(""\"""", ""\\\""""))) + ""\"""")); return true; }",9b5d2a20b7c9088bf90c66f2c348013f679fc649,,"print(java.io.PrintStream,java.lang.String)",3,2,"@java.lang.Override public boolean print(@javax.annotation.Nonnull java.io.PrintStream printer, @javax.annotation.Nonnull java.lang.String value) { printer.print(((""\"""" + (value.replace(""\"""", ""\\\""""))) + ""\"""")); return true; }",2378997a86422906e72eb28534eec4d87721facf,"print(java.io.PrintStream,java.lang.String)",18558,49,60
329566,src_java_com_android_ims_ImsManager.java,89.0,"@java.lang.Override public void binderDied() { mImsService = null; mUt = null; mConfig = null; mEcbm = null; mMultiEndpoint = null; if ((mContext) != null) { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_SERVICE_DOWN); intent.putExtra(com.android.ims.ImsManager.EXTRA_PHONE_ID, mPhoneId); mContext.sendBroadcast(new android.content.Intent(intent)); } }",1ef48cc21d9a2d7f80ba680bb13953cce95c716a,"@java.lang.Override public void binderDied() { mImsServiceProxy = null; mUt = null; mConfig = null; mEcbm = null; mMultiEndpoint = null; if ((mContext) != null) { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_SERVICE_DOWN); intent.putExtra(com.android.ims.ImsManager.EXTRA_PHONE_ID, mPhoneId); mContext.sendBroadcast(new android.content.Intent(intent)); } }",9afcd6b62c5f2031a4d55f78597a7f9670590e39,binderDied(),binderDied(),9,45,"@java.lang.Override public void binderDied() { mImsServiceProxy = null; mUt = null; mConfig = null; mEcbm = null; mMultiEndpoint = null; if (((mContext) != null) && (!(isDynamicBinding()))) { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_SERVICE_DOWN); intent.putExtra(com.android.ims.ImsManager.EXTRA_PHONE_ID, mPhoneId); mContext.sendBroadcast(new android.content.Intent(intent)); } }",37336906bb936f19762c77a5c5be2f73bbb31d9d,binderDied(),178105,127,132
18735,tools_vm-tests_src_dot_junit_opcodes_iget_wide_Test_iget_wide.java,15.0,"public void testVFE7() { try { java.lang.Class.forName(""dot.junit.opcodes.iget_wide.d.T_iget_wide_12""); fail(""expected a verification exception""); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }",3a991dcb9ad42f2f4f20bf28be89fbd2bb514673,"public void testVFE7() { try { dot.junit.opcodes.iget_wide.d.T_iget_wide_12 t = new dot.junit.opcodes.iget_wide.d.T_iget_wide_12(); t.run(); fail(""expected a IllegalAccessError exception""); } catch (java.lang.IllegalAccessError e) { } }",efa388ae24f333d2c7c067035e41e7a047c22c49,testVFE7(),testVFE7(),2,15,"public void testVFE7() { try { new dot.junit.opcodes.iget_wide.d.T_iget_wide_12().run(); fail(""expected a IllegalAccessError exception""); } catch (java.lang.IllegalAccessError e) { } }",87c6b8f693de960a5625e2e78612c75d8446e203,testVFE7(),456399,88,59
253791,luni_src_main_java_libcore_io_Posix.java,105.0,"public native void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws android.system.ErrnoException, java.net.SocketException;",3352f4b874da3105cf30fc6cfb2c20b8c5cdd2b4,"public native void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws java.net.SocketException, libcore.io.ErrnoException;",45dccbef080515a41b5eb145ef91748396fb998c,"bind(java.io.FileDescriptor,java.net.InetAddress,int)","bind(java.io.FileDescriptor,java.net.InetAddress,int)",8,103,"public native void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws android.system.ErrnoException, java.net.SocketException;",3352f4b874da3105cf30fc6cfb2c20b8c5cdd2b4,"bind(java.io.FileDescriptor,java.net.InetAddress,int)",494549,39,38
47522,luni_src_main_java_libcore_icu_NativeDecimalFormat.java,27.0,"public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object object) { if (!(object instanceof java.lang.Number)) { throw new java.lang.IllegalArgumentException(); } java.lang.Number number = ((java.lang.Number) (object)); libcore.icu.NativeDecimalFormat.FieldPositionIterator fpIter = new libcore.icu.NativeDecimalFormat.FieldPositionIterator(); java.lang.String text; if ((number instanceof java.math.BigInteger) || (number instanceof java.math.BigDecimal)) { text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDigitList(this.address, number.toString(), fpIter)); } else if ((number instanceof java.lang.Double) || (number instanceof java.lang.Float)) { double dv = number.doubleValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDouble(this.address, dv, fpIter)); } else { long lv = number.longValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatLong(this.address, lv, fpIter)); } java.text.AttributedString as = new java.text.AttributedString(text); while (fpIter.next()) { java.text.Format.Field field = fpIter.field(); as.addAttribute(field, field, fpIter.start(), fpIter.limit()); } return as.getIterator(); }",d7917f9acce0e6737ce315732afdf53a90cdbd57,"public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object object) { if (!(object instanceof java.lang.Number)) { throw new java.lang.IllegalArgumentException((""object not a Number: "" + (object.getClass()))); } java.lang.Number number = ((java.lang.Number) (object)); libcore.icu.NativeDecimalFormat.FieldPositionIterator fpIter = new libcore.icu.NativeDecimalFormat.FieldPositionIterator(); java.lang.String text; if ((number instanceof java.math.BigInteger) || (number instanceof java.math.BigDecimal)) { text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDigitList(this.address, number.toString(), fpIter)); } else if ((number instanceof java.lang.Double) || (number instanceof java.lang.Float)) { double dv = number.doubleValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDouble(this.address, dv, fpIter)); } else { long lv = number.longValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatLong(this.address, lv, fpIter)); } java.text.AttributedString as = new java.text.AttributedString(text); while (fpIter.next()) { java.text.Format.Field field = fpIter.field(); as.addAttribute(field, field, fpIter.start(), fpIter.limit()); } return as.getIterator(); }",40ca45b4ba736233a70a9673aae01aac6e9d2d81,formatToCharacterIterator(java.lang.Object),formatToCharacterIterator(java.lang.Object),2,27,"public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object object) { if (object == null) { throw new java.lang.NullPointerException(""object == null""); } if (!(object instanceof java.lang.Number)) { throw new java.lang.IllegalArgumentException((""object not a Number: "" + (object.getClass()))); } java.lang.Number number = ((java.lang.Number) (object)); libcore.icu.NativeDecimalFormat.FieldPositionIterator fpIter = new libcore.icu.NativeDecimalFormat.FieldPositionIterator(); java.lang.String text; if ((number instanceof java.math.BigInteger) || (number instanceof java.math.BigDecimal)) { text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDigitList(this.address, number.toString(), fpIter)); } else if ((number instanceof java.lang.Double) || (number instanceof java.lang.Float)) { double dv = number.doubleValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDouble(this.address, dv, fpIter)); } else { long lv = number.longValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatLong(this.address, lv, fpIter)); } java.text.AttributedString as = new java.text.AttributedString(text); while (fpIter.next()) { java.text.Format.Field field = fpIter.field(); as.addAttribute(field, field, fpIter.start(), fpIter.limit()); } return as.getIterator(); }",91431aab486fea93d08059c344ad015ce0c95857,formatToCharacterIterator(java.lang.Object),501344,339,360
346697,service_java_com_android_server_wifi_WifiNative.java,261.0,"public android.net.wifi.IApInterface setupDriverForSoftApMode() { android.net.wifi.IApInterface apInterface = mWificondControl.setupDriverForSoftApMode(); if (!(startHal(false))) { android.util.Log.e(com.android.server.wifi.WifiNative.TAG, ""Failed to start HAL for AP mode""); } return apInterface; }",847e87f450a9bfe46f6cca421307a7b79bfc8254,"public android.net.wifi.IApInterface setupDriverForSoftApMode() { if (!(startHal(false))) { android.util.Log.e(com.android.server.wifi.WifiNative.TAG, ""Failed to start HAL for AP mode""); return null; } return mWificondControl.setupDriverForSoftApMode(); }",83e93b7da845d0a9dbde412dc43b191704daa3d6,setupDriverForSoftApMode(),setupDriverForSoftApMode(),9,162,"public android.net.wifi.IApInterface setupForSoftApMode() { if (!(startHal(false))) { android.util.Log.e(com.android.server.wifi.WifiNative.TAG, ""Failed to start HAL for AP mode""); } return mWificondControl.setupDriverForSoftApMode(); }",1c488af5e9f7b33b26c2e8ac96f4e13104577583,setupForSoftApMode(),217996,78,74
79721,graphics_java_android_graphics_Canvas.java,1.0,"private static native void native_drawRect(int nativeCanvas, android.graphics.RectF rect, int paint);",ae5d3a5755dce64f5d99d966ae6f9f4f4e2114eb,"private static native void native_drawRect(long nativeCanvas, android.graphics.RectF rect, long paint);",e07f15f82483daa9f8d47ff7130232dd30eeb240,"native_drawRect(int,android.graphics.RectF,int)","native_drawRect(long,android.graphics.RectF,long)",6,37,"private static native void native_drawRect(long nativeCanvas, android.graphics.RectF rect, long nativePaint);",6819c84f7cba43c1620c1a453979b25bd8cfb2a4,"native_drawRect(long,android.graphics.RectF,long)",35576,23,24
318403,services_core_java_com_android_server_pm_DefaultPermissionGrantPolicy.java,34.0,"private void grantDefaultPermissionExceptions(int userId) { synchronized(mService.mPackages) { mHandler.removeMessages(com.android.server.pm.DefaultPermissionGrantPolicy.MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS); if ((mGrantExceptions) == null) { mGrantExceptions = readDefaultPermissionExceptionsLPw(); } java.util.Set<java.lang.String> permissions = null; final int exceptionCount = mGrantExceptions.size(); for (int i = 0; i < exceptionCount; i++) { java.lang.String packageName = mGrantExceptions.keyAt(i); android.content.pm.PackageParser.Package pkg = getSystemPackageLPr(packageName); java.util.List<com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant> permissionGrants = mGrantExceptions.valueAt(i); final int permissionGrantCount = permissionGrants.size(); for (int j = 0; j < permissionGrantCount; j++) { com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant permissionGrant = permissionGrants.get(j); if (permissions == null) { permissions = new android.util.ArraySet(); } else { permissions.clear(); } permissions.add(permissionGrant.name); grantRuntimePermissionsLPw(pkg, permissions, false, permissionGrant.fixed, userId); } } } }",6f238e8b02d66778fad61cb768c6227324b7e3c6,"private void grantDefaultPermissionExceptions(int userId) { synchronized(mService.mPackages) { mHandler.removeMessages(com.android.server.pm.DefaultPermissionGrantPolicy.MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS); if ((mGrantExceptions) == null) { mGrantExceptions = readDefaultPermissionExceptionsLPw(); } java.util.Set<java.lang.String> permissions = null; final int exceptionCount = mGrantExceptions.size(); for (int i = 0; i < exceptionCount; i++) { java.lang.String packageName = mGrantExceptions.keyAt(i); android.content.pm.PackageParser.Package pkg = getSystemPackageLPr(packageName); java.util.List<com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant> permissionGrants = mGrantExceptions.valueAt(i); final int permissionGrantCount = permissionGrants.size(); for (int j = 0; j < permissionGrantCount; j++) { com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant permissionGrant = permissionGrants.get(j); if (permissions == null) { permissions = new android.util.ArraySet(); } else { permissions.clear(); } permissions.add(permissionGrant.name); grantRuntimePermissionsLPw(pkg, permissions, permissionGrant.fixed, false, userId); } } } }",d4557e5a4cdc4701631d14f774c972b61ec3f630,grantDefaultPermissionExceptions(int),grantDefaultPermissionExceptions(int),15,34,"private void grantDefaultPermissionExceptions(int userId) { synchronized(mService.mPackages) { mHandler.removeMessages(com.android.server.pm.DefaultPermissionGrantPolicy.MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS); if ((mGrantExceptions) == null) { mGrantExceptions = readDefaultPermissionExceptionsLPw(); } java.util.Set<java.lang.String> permissions = null; final int exceptionCount = mGrantExceptions.size(); for (int i = 0; i < exceptionCount; i++) { java.lang.String packageName = mGrantExceptions.keyAt(i); android.content.pm.PackageParser.Package pkg = getSystemPackageLPr(packageName); java.util.List<com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant> permissionGrants = mGrantExceptions.valueAt(i); final int permissionGrantCount = permissionGrants.size(); for (int j = 0; j < permissionGrantCount; j++) { com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant permissionGrant = permissionGrants.get(j); if (permissions == null) { permissions = new android.util.ArraySet(); } else { permissions.clear(); } permissions.add(permissionGrant.name); grantRuntimePermissionsLPw(pkg, permissions, permissionGrant.fixed, userId); } } } }",9819ce0517f98d614487b5f2f2f88a7d7dc7e77e,grantDefaultPermissionExceptions(int),349739,303,301
92261,testSrc_com_google_gct_idea_appengine_validation_EndpointImplicitUsageProviderTest.java,,,,public void testUnusedHighlighting_EndpointClass() { doTest(); },23dfa8afdaecf80826a922dca8368eec808a2220,,testUnusedHighlighting_EndpointClass(),3,3,public void testUnusedHighlighting_ClassWithApiClass() { doTest(); },79435f03a4f5c0e120263a45f73ac96954d151a6,testUnusedHighlighting_ClassWithApiClass(),383887,15,17
175623,sched_src_com_android_sched_util_log_StatisticOnlyTracer.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void end() { if ((eventCount.decrementAndGet()) == 0) { try { com.android.sched.util.log.StatisticOnlyTracer.enable.set(java.lang.Boolean.FALSE); com.android.sched.util.print.DataModelListAdapter<com.android.sched.util.log.stats.Statistic> report = new com.android.sched.util.print.DataModelListAdapter<com.android.sched.util.log.stats.Statistic>(new com.android.sched.util.print.DataModelListAdapter.Converter<com.android.sched.util.log.stats.Statistic>() { @java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.log.StatisticModel apply(com.android.sched.util.log.stats.Statistic data) { return new com.android.sched.util.log.StatisticModel(data); } }); for (final com.android.sched.util.log.stats.Statistic statistic : statisticsById.values()) { if (statistic.isEnabled()) { report.add(statistic); } } java.io.PrintStream stream = com.android.sched.util.config.ThreadConfig.get(com.android.sched.util.log.StatisticOnlyTracer.STREAM).getPrintStream(); com.android.sched.util.print.Printer printer = com.android.sched.util.config.ThreadConfig.get(com.android.sched.util.log.StatisticOnlyTracer.PRINTER).create(stream).addResourceBundles(java.util.ResourceBundle.getBundle(com.android.sched.util.log.stats.Statistic.class.getCanonicalName()), java.util.ResourceBundle.getBundle(com.android.sched.util.log.StatisticOnlyTracer.class.getCanonicalName())); try { printer.print(report); } finally { stream.close(); } } finally { com.android.sched.util.log.StatisticOnlyTracer.enable.set(java.lang.Boolean.TRUE); } } }",ed4ab56b915efe0580db39b32d315d104e186c30,,end(),3,8,"@java.lang.Override public void end() { if ((eventCount.decrementAndGet()) == 0) { try { com.android.sched.util.log.StatisticOnlyTracer.enable.set(java.lang.Boolean.FALSE); com.android.sched.util.print.DataModelListAdapter<com.android.sched.util.log.stats.Statistic> report = new com.android.sched.util.print.DataModelListAdapter<com.android.sched.util.log.stats.Statistic>(new com.android.sched.util.print.DataModelListAdapter.Converter<com.android.sched.util.log.stats.Statistic>() { @java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.log.StatisticModel apply(@javax.annotation.Nonnull com.android.sched.util.log.stats.Statistic data) { return new com.android.sched.util.log.StatisticModel(data); } }); for (final com.android.sched.util.log.stats.Statistic statistic : statisticsById.values()) { if (statistic.isEnabled()) { report.add(statistic); } } java.io.PrintStream stream = com.android.sched.util.config.ThreadConfig.get(com.android.sched.util.log.StatisticOnlyTracer.STREAM).getPrintStream(); com.android.sched.util.print.Printer printer = com.android.sched.util.config.ThreadConfig.get(com.android.sched.util.log.StatisticOnlyTracer.PRINTER).create(stream).addResourceBundles(java.util.ResourceBundle.getBundle(com.android.sched.util.log.stats.Statistic.class.getCanonicalName()), java.util.ResourceBundle.getBundle(com.android.sched.util.log.StatisticOnlyTracer.class.getCanonicalName())); try { printer.print(report); } finally { stream.close(); } } finally { com.android.sched.util.log.StatisticOnlyTracer.enable.set(java.lang.Boolean.TRUE); } } }",a8986593c36d1b1c11a48726f13e9bf0a8cc5237,end(),18531,439,444
204826,jack-tests_tests_com_android_jack_java8_LambdaTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull private void run(@javax.annotation.Nonnull java.lang.String mainClass, @javax.annotation.Nonnull java.io.File[] dexFiles) throws java.lang.Exception { java.util.List<com.android.jack.test.runner.RuntimeRunner> runnerList = com.android.jack.test.toolchain.AbstractTestTools.listRuntimeTestRunners(null); for (com.android.jack.test.runner.RuntimeRunner runner : runnerList) { junit.framework.Assert.assertEquals(0, runner.runJUnit(new java.lang.String[0], AbstractTestTools.JUNIT_RUNNER_NAME, new java.lang.String[]{ mainClass }, dexFiles)); } }",d4abacd75184b1133c35d272edda13ce1ab0bc65,,"run(java.lang.String,java.io.File[])",8,27,"private void run(@javax.annotation.Nonnull java.lang.String mainClass, @javax.annotation.Nonnull java.io.File[] dexFiles) throws java.lang.Exception { java.util.List<com.android.jack.test.runner.RuntimeRunner> runnerList = com.android.jack.test.toolchain.AbstractTestTools.listRuntimeTestRunners(null); for (com.android.jack.test.runner.RuntimeRunner runner : runnerList) { junit.framework.Assert.assertEquals(0, runner.runJUnit(new java.lang.String[0], AbstractTestTools.JUNIT_RUNNER_NAME, new java.lang.String[]{ mainClass }, dexFiles)); } }",be8ce83a939dc99a547deda591ec3d5e127e2186,"run(java.lang.String,java.io.File[])",22870,159,153
349774,telephony_java_android_telephony_SignalStrength.java,5.0,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mTdScdmaRscp)) + "" "") + (isGsm ? ""gsm|lte"" : ""cdma""); }",214b75813a9ddc4185b647481b98d0566c838c2b,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteOffset)) + "" "") + (mTdScdmaRscp)) + "" "") + (isGsm ? ""gsm|lte"" : ""cdma""); }",bd22dcd216e8569ad206912a50b88d581b4aa5fc,toString(),toString(),11,5,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (isGsm ? ""gsm|lte"" : ""cdma""); }",970c816cfb0cc49976bc3c48d9dfccf61330d134,toString(),301315,240,243
178851,jack_src_com_android_jack_shrob_obfuscation_annotation_ParameterLineNumberRemover.java,,,,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod t) throws java.lang.Exception { for (com.android.jack.ir.ast.JParameter param : t.getParams()) { com.android.jack.ir.sourceinfo.SourceInfo info = param.getSourceInfo(); if (info != (com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN)) { param.setSourceInfo(sourceInfoFactory.create(SourceInfo.UNKNOWN_COLUMN_NUMBER, SourceInfo.UNKNOWN_COLUMN_NUMBER, SourceInfo.UNKNOWN_LINE_NUMBER, SourceInfo.UNKNOWN_LINE_NUMBER, info.getFileName())); } } }",64e9aaa7a3e38a7cd707259d0f442dc10d394cc7,,run(com.android.jack.ir.ast.JMethod),11,0,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { com.android.jack.shrob.obfuscation.annotation.ParameterLineNumberRemover.Visitor visitor = new com.android.jack.shrob.obfuscation.annotation.ParameterLineNumberRemover.Visitor(com.android.jack.Jack.getSession().getSourceInfoFactory()); visitor.accept(method); },74696ff6937ff6568fb1064bcfa9360bd442f11f,run(com.android.jack.ir.ast.JMethod),311863,159,101
420522,dx_src_com_android_dx_io_instructions_InvokePolymorphicRangeDecodedInstruction.java,,,,"@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction withProtoIndex(int newIndex, int newProtoIndex) { return new com.android.dx.io.instructions.InvokePolymorphicRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), a, registerCount, newProtoIndex); }",354398dd52a059efb3a4d326496ab075fa0bd75b,,"withProtoIndex(int,int)",4,3,"@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction withProtoIndex(int newIndex, int newProtoIndex) { return new com.android.dx.io.instructions.InvokePolymorphicRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), c, registerCount, newProtoIndex); }",fb8aa260aa8c0fa287af701269856f62127a3e16,"withProtoIndex(int,int)",305745,76,76
141510,sched_src_com_android_sched_util_config_id_MessageDigestPropertyId.java,5.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.config.MessageDigestFactory parseString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) { return new com.android.sched.util.config.MessageDigestFactory(codec.parseString(context, string)); }",b81cd0e8d5131f780e86fba5bb26ab17cc8962c4,@java.lang.Override @javax.annotation.Nonnull protected com.android.sched.util.config.MessageDigestFactory convert(java.security.Provider.Service service) { return new com.android.sched.util.config.MessageDigestFactory(service); },8bcf1dc97bf2bf829c82855ef52d9360366548a5,"parseString(com.android.sched.util.codec.CodecContext,java.lang.String)",convert(java.security.Provider$Service),3,3,@java.lang.Override @javax.annotation.Nonnull protected com.android.sched.util.config.MessageDigestFactory convert(@javax.annotation.Nonnull java.security.Provider.Service service) { return new com.android.sched.util.config.MessageDigestFactory(service); },d4e08141dada4f2f4302e9be28975447651cdb21,convert(java.security.Provider$Service),432016,55,60
309003,hostsidetests_services_windowmanager_src_android_wm_cts_CrossAppDragAndDropTests.java,19.0,"public void testCancelSoon() throws java.lang.Exception { doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, null); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }",4b801dc6ded592bf115407fb260a06b884f34ccf,"public void testCancelSoon() throws java.lang.Exception { if (!(supportsMultiWindow())) { return; } doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, null); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }",eff0cba8d9032b60793ce18e1678cd16e2fe1826,testCancelSoon(),testCancelSoon(),13,18,"public void testCancelSoon() throws java.lang.Exception { doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, null); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }",4b801dc6ded592bf115407fb260a06b884f34ccf,testCancelSoon(),55459,155,145
298803,service_java_com_android_server_wifi_util_InformationElementUtil.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String keyManagementToString(int akm) { switch (akm) { case ScanResult.KeyManagement.NONE : return ""None""; case ScanResult.KeyManagement.PSK : return ""PSK""; case ScanResult.KeyManagement.EAP : return ""EAP""; case ScanResult.KeyManagement.FT_EAP : return ""FT/EAP""; case ScanResult.KeyManagement.FT_PSK : return ""FT/PSK""; case ScanResult.KeyManagement.EAP_SHA256 : return ""EAP-SHA256""; case ScanResult.KeyManagement.PSK_SHA256 : return ""PSK-SHA256""; default : return ""?""; } }",5f258f8552b946dacae590a7400d640b9f46c4d1,,keyManagementToString(int),6,7,"private java.lang.String keyManagementToString(int akm) { switch (akm) { case android.net.wifi.ScanResult.KEY_MGMT_NONE : return ""None""; case android.net.wifi.ScanResult.KEY_MGMT_PSK : return ""PSK""; case android.net.wifi.ScanResult.KEY_MGMT_EAP : return ""EAP""; case android.net.wifi.ScanResult.KEY_MGMT_FT_EAP : return ""FT/EAP""; case android.net.wifi.ScanResult.KEY_MGMT_FT_PSK : return ""FT/PSK""; case android.net.wifi.ScanResult.KEY_MGMT_EAP_SHA256 : return ""EAP-SHA256""; case android.net.wifi.ScanResult.KEY_MGMT_PSK_SHA256 : return ""PSK-SHA256""; default : return ""?""; } }",af3cce9b886f8f7293428f12f961e4d3d6198275,keyManagementToString(int),417665,146,202
144781,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_scope_VariantOutputScope.java,,,,public com.android.build.gradle.internal.variant.BaseVariantOutputData getVariantOutputData() { return variantOutputData; },27f9c1d6ea26c7247101a47c55aa20a5ace8af47,,getVariantOutputData(),6,3,@com.android.annotations.NonNull public com.android.build.gradle.internal.variant.BaseVariantOutputData getVariantOutputData() { return variantOutputData; },c6e8077344087dd337e0e1bf4e9dd014febc3899,getVariantOutputData(),337609,29,37
237621,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,29.0,@org.junit.Test public void retroLambdaDefaultMethodsTest002() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_002); },27b7b218d55de713b02fc606294d443752c34233,@org.junit.Test @java.lang.Runtime public void retroLambdaDefaultMethodsTest002() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_002); },cd9f2362fdd34cf092340f8605015d220f7cb7d1,retroLambdaDefaultMethodsTest002(),retroLambdaDefaultMethodsTest002(),11,29,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void retroLambdaDefaultMethodsTest002() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_002); },1a4bb6bbbd040dafd011295f6a7fabf5aa1d7d30,retroLambdaDefaultMethodsTest002(),273880,43,51
186130,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,24.0,"@org.junit.Test public void retroLambdaDefaultMethodsTest019() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_019).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",a390476678f2917855b72d0fc665875478637aaa,"@org.junit.Test public void retroLambdaDefaultMethodsTest019() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_019).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",b2b469b55550765c80199d6b91fd441b9ecfe67e,retroLambdaDefaultMethodsTest019(),retroLambdaDefaultMethodsTest019(),7,24,@org.junit.Test public void retroLambdaDefaultMethodsTest019() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_019).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },6786e1f196577b361f13cb6adb33112662168bf3,retroLambdaDefaultMethodsTest019(),466310,91,65
379459,telephony_java_android_telephony_TelephonyManager.java,97.0,"public java.lang.String getDeviceSoftwareVersion(int slotIndex) { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) return null; try { return telephony.getDeviceSoftwareVersionForSlot(slotIndex, getOpPackageName()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }",ffa63cad53d730be4874ab527aa9c4069f6a3acc,"public java.lang.String getDeviceSoftwareVersion(int slotId) { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) return null; try { return telephony.getDeviceSoftwareVersionForSlot(slotId, getOpPackageName()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }",92d0b3ab0a92ad9f422238e36914863ed0d22433,getDeviceSoftwareVersion(int),getDeviceSoftwareVersion(int),4,104,"public java.lang.String getDeviceSoftwareVersion(int slotIndex) { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) return null; try { return telephony.getDeviceSoftwareVersionForSlot(slotIndex, getOpPackageName()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }",ffa63cad53d730be4874ab527aa9c4069f6a3acc,getDeviceSoftwareVersion(int),442483,98,98
598075,hostsidetests_jvmti_attaching_host_src_android_jvmti_cts_JvmtiAttachingHostTest.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testJvmtiAgentAppInternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String setAgentAppCmd = ((""cmd activity set-agent-app "" + pkg) + "" "") + (android.jvmti.cts.JvmtiAttachingHostTest.AGENT); java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply != null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed running set-agent-app"", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed agent-app attaching"", e); } }); }",307df963b61e6fac712168c203e8f3ea978750c6,,testJvmtiAgentAppInternal(),2,1,"public void testJvmtiAgentAppInternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String setAgentAppCmd = ((""cmd activity set-agent-app "" + pkg) + "" "") + (android.jvmti.cts.JvmtiAttachingHostTest.AGENT); device.executeShellCommand(setAgentAppCmd); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed running set-agent-app"", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed agent-app attaching"", e); } }); }",714e3e43eb775f6b5fd8e87c53d2ff89e9bf5571,testJvmtiAgentAppInternal(),444611,272,243
580423,luni_src_main_java_libcore_io_BlockGuardOs.java,55.0,"@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, inOffset, byteCount); }",007ea01df44b0934eeb58ebc610dcbf2e5d13021,"@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong offset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, offset, byteCount); }",c2c71c8c534b7c7e326e0fba6ac7f77c3b92e80c,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)","sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)",3,47,"@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.Int64Ref offset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, offset, byteCount); }",831d6e89d82ebdf372a856770a35893ad0e899ef,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.system.Int64Ref,long)",381056,87,87
53694,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLRSAKeyFactory.java,2.0,"@java.lang.Override protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec instanceof java.security.spec.RSAPublicKeySpec) { java.security.spec.RSAPublicKeySpec rsaKeySpec = ((java.security.spec.RSAPublicKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.X509EncodedKeySpec) { java.security.spec.X509EncodedKeySpec x509KeySpec = ((java.security.spec.X509EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PUBKEY(x509KeySpec.getEncoded())); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException((""Must use RSAPublicKeySpec or X509EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",f9e0a8ef42025e6fe63954cd48e10b36cbb529d6,"@java.lang.Override protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException(""keySpec == null""); } if (keySpec instanceof java.security.spec.RSAPublicKeySpec) { java.security.spec.RSAPublicKeySpec rsaKeySpec = ((java.security.spec.RSAPublicKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.X509EncodedKeySpec) { java.security.spec.X509EncodedKeySpec x509KeySpec = ((java.security.spec.X509EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PUBKEY(x509KeySpec.getEncoded())); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException((""Must use RSAPublicKeySpec or X509EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",44dc3c5e584a7e58bc3247b7d1a2e21f4dd7b150,engineGeneratePublic(java.security.spec.KeySpec),engineGeneratePublic(java.security.spec.KeySpec),3,2,"@java.lang.Override protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException(""keySpec == null""); } if (keySpec instanceof java.security.spec.RSAPublicKeySpec) { return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(((java.security.spec.RSAPublicKeySpec) (keySpec))); } else if (keySpec instanceof java.security.spec.X509EncodedKeySpec) { return org.apache.harmony.xnet.provider.jsse.OpenSSLKey.getPublicKey(((java.security.spec.X509EncodedKeySpec) (keySpec)), NativeCrypto.EVP_PKEY_RSA); } throw new java.security.spec.InvalidKeySpecException((""Must use RSAPublicKeySpec or X509EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",9d91a33791ce9fd40267e20aeefbca32ac582c90,engineGeneratePublic(java.security.spec.KeySpec),30514,331,211
355298,services_core_java_com_android_server_notification_NotificationUsageStats.java,42.0,void increment(int imp) { imp = (imp < 0) ? 0 : imp > (com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES) ? com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES : imp; (mCount[imp])++; },b6d71ab9d0e1076d41e852ee5104c24558185e24,void increment(int imp) { imp = (imp < 0) ? 0 : imp > ((com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES) - 1) ? (com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES) - 1 : imp; (mCount[imp])++; },74bbf34ef08315630993f7842a9c99dddf6bac74,increment(int),increment(int),3,42,"void increment(int imp) { imp = java.lang.Math.max(0, java.lang.Math.min(imp, ((mCount.length) - 1))); (mCount[imp])++; }",461a839f53d01cc6c6f59c642f6dda412761592f,increment(int),356190,88,47
103652,sdkmanager_sdkuilib_src_main_java_com_android_sdkuilib_internal_widgets_AvdCreationPresenter.java,,,,"private static java.lang.String getNexusLabel(com.android.sdklib.devices.Device d) { java.lang.String name = d.getName(); com.android.sdklib.devices.Screen screen = d.getDefaultHardware().getScreen(); float length = ((float) (screen.getDiagonalLength())); return java.lang.String.format(java.util.Locale.US, ""%1$s (%3$s\"", %2$s)"", name, com.android.sdkuilib.internal.widgets.AvdCreationPresenter.getResolutionString(d), java.lang.Float.toString(length)); }",5ab54610cd2624c958e0c73839ac1417e012f24e,,getNexusLabel(com.android.sdklib.devices.Device),2,46,"private static java.lang.String getNexusLabel(com.android.sdklib.devices.Device d) { @java.lang.SuppressWarnings(""deprecation"") java.lang.String name = d.getName(); com.android.sdklib.devices.Screen screen = d.getDefaultHardware().getScreen(); float length = ((float) (screen.getDiagonalLength())); return java.lang.String.format(java.util.Locale.US, ""%1$s (%3$s\"", %2$s)"", name, com.android.sdkuilib.internal.widgets.AvdCreationPresenter.getResolutionString(d), java.lang.Float.toString(length)); }",d99447913a8fcdb776c32a1a43393b6617d45b34,getNexusLabel(com.android.sdklib.devices.Device),67121,143,152
636341,src_com_android_se_Terminal.java,5.0,private synchronized void initializeAccessControl() { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } mAccessControlEnforcer.initialize(true); } },4e8fd254bce16202167a7e334b3386e9045005e5,"private synchronized void initializeAccessControl() throws java.io.IOException, java.util.MissingResourceException { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } try { mAccessControlEnforcer.initialize(); } catch (java.io.IOException e) { mAccessControlEnforcer = null; throw e; } catch (java.util.MissingResourceException e) { mAccessControlEnforcer = null; throw e; } } }",46f3a1539c0de6303c9d84f393c498cea814a722,initializeAccessControl(),initializeAccessControl(),3,5,"private synchronized void initializeAccessControl() throws java.io.IOException, java.util.MissingResourceException { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } try { mAccessControlEnforcer.initialize(); } catch (java.io.IOException | java.util.MissingResourceException e) { mAccessControlEnforcer = null; throw e; } } }",42f4c27f774a5dc5f8b72aa2b8e4d5d85ab1fd06,initializeAccessControl(),492484,108,94
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,40.0,"public void test_empty_NaN() throws java.lang.Exception { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(); dfs.setNaN(""""); java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setDecimalFormatSymbols(dfs); df.format(java.lang.Double.NaN); }",7b615c5f9c1caa6fd5075d9ac2653391060f478d,"public void testSetNan_emptyString() throws java.lang.Exception { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(); dfs.setNaN(""""); java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setDecimalFormatSymbols(dfs); df.format(java.lang.Double.NaN); }",6854c379e87b124adea7f132883f71ae50ebbfd2,test_empty_NaN(),testSetNan_emptyString(),2,47,"public void test_setNan_emptyString() throws java.lang.Exception { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(); dfs.setNaN(""""); java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setDecimalFormatSymbols(dfs); df.format(java.lang.Double.NaN); }",c050bd13543b16bec6460e4299f1d7800fe96212,test_setNan_emptyString(),84430,74,75
243440,test_458-checker-instruction-simplification_src_Main.java,64.0,public static int floatConditionNotEqualOne(float f) { return (f > 42.0F) == true ? 13 : 54; },f63893bca8f17989960313ab216f9188789a7e90,public static int floatConditionNotEqualOne(float f) { if (Main.doThrow) { throw new java.lang.Error(); } return (f > 42.0F) == true ? 13 : 54; },18691c87c4e994d0ed6578f2067db81317ffba4c,floatConditionNotEqualOne(float),floatConditionNotEqualOne(float),3,58,public static int $noinline$floatConditionNotEqualOne(float f) { if (Main.doThrow) { throw new java.lang.Error(); } return (f > 42.0F) == true ? 13 : 54; },7c46551b41c68bfc89a98bb7de97ffe69b16acb5,$noinline$floatConditionNotEqualOne(float),118244,47,52
91995,luni_src_main_java_libcore_io_ForwardingOs.java,25.0,"public int waitpid(int pid, libcore.util.MutableInt status, int options) throws libcore.io.ErrnoException { return os.waitpid(pid, status, options); }",3355a8544d2a0b55001e61b4b34e5cde383cb99c,"public int waitpid(int pid, android.util.MutableInt status, int options) throws android.os.ErrnoException { return os.waitpid(pid, status, options); }",7d66c9d936091d9ab1c57db50e22a324a969dd66,"waitpid(int,libcore.util.MutableInt,int)","waitpid(int,android.util.MutableInt,int)",3,37,"public int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException { return os.waitpid(pid, status, options); }",5461ec80a8ff4977a8f7e3a273c0686449d3b7d9,"waitpid(int,android.util.MutableInt,int)",170456,41,41
176110,jack_src_com_android_jack_shrob_spec_KeepModifier.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setAllowObfuscation() { modifier |= com.android.jack.shrob.spec.KeepModifier.ALLOW_OBFUSCATION; },f26bc089b1a0491e6b60df6a3fa1358c6d35deac,,setAllowObfuscation(),5,0,@javax.annotation.Nonnull public com.android.jack.shrob.spec.KeepModifier setAllowObfuscation() { modifier |= com.android.jack.shrob.spec.KeepModifier.ALLOW_OBFUSCATION; return this; },6460716a5591b7d646b38c150fbbaa814bc4fb21,setAllowObfuscation(),298822,33,55
558960,src_java_com_android_internal_telephony_uicc_UiccCard.java,44.0,"public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageManager, packageName); }",601a16a3334a745c20ef5276b97a803e8ea05037,"public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageManager, packageName); } else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPrivilegeStatus(packageManager, packageName); } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } } }",1b89711ac7217a56b89e5543ee77eb1983988e38,"getCarrierPrivilegeStatus(android.content.pm.PackageManager,java.lang.String)","getCarrierPrivilegeStatus(android.content.pm.PackageManager,java.lang.String)",8,30,"@java.lang.Deprecated public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPrivilegeStatus(packageManager, packageName); } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } }",5fa9fae18110aafa8402b73272cdc04eb403334a,"getCarrierPrivilegeStatus(android.content.pm.PackageManager,java.lang.String)",47913,190,90
91995,luni_src_main_java_libcore_io_Posix.java,117.0,"private native int preadBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int bufferOffset, int byteCount, long offset) throws java.io.InterruptedIOException, libcore.io.ErrnoException;",8ae39386339049542c943538272f2d24946dc9e2,"private native int preadBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int bufferOffset, int byteCount, long offset) throws android.os.ErrnoException, java.io.InterruptedIOException;",91ac0b2d8c06a03afe522d357b815f612170ae29,"preadBytes(java.io.FileDescriptor,java.lang.Object,int,int,long)","preadBytes(java.io.FileDescriptor,java.lang.Object,int,int,long)",3,117,"private native int preadBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int bufferOffset, int byteCount, long offset) throws android.system.ErrnoException, java.io.InterruptedIOException;",c8e4c33b082888cfac908bcd5cecc2c9ab8f5ca7,"preadBytes(java.io.FileDescriptor,java.lang.Object,int,int,long)",169831,47,47
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void runWorkingMobileUsbTethering(android.net.NetworkState upstreamState) { when(mConnectivityManager.isTetheringSupported()).thenReturn(true); when(mUpstreamNetworkMonitor.selectPreferredUpstreamType(any())).thenReturn(upstreamState); mTethering.startTethering(com.android.server.connectivity.TETHERING_USB, null, false); mLooper.dispatchAll(); verify(mUsbManager, times(1)).setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); mTethering.interfaceStatusChanged(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, true); sendUsbBroadcast(true, true, true); mLooper.dispatchAll(); mTetheringDependencies.getUpstreamNetworkMonitorMasterSM().sendMessage(Tethering.TetherMasterSM.EVENT_UPSTREAM_CALLBACK, UpstreamNetworkMonitor.EVENT_ON_AVAILABLE, 0, upstreamState); verify(mUpstreamNetworkMonitor, times(1)).selectPreferredUpstreamType(any()); verify(mUpstreamNetworkMonitor, times(1)).setCurrentUpstream(upstreamState.network); }",39c3e79e427073e5c4389d5e5d41ab978e93a785,,runWorkingMobileUsbTethering(android.net.NetworkState),10,45,"private void runUsbTethering(android.net.NetworkState upstreamState) { prepareUsbTethering(upstreamState); sendUsbBroadcast(true, true, true); mLooper.dispatchAll(); }",fe49fb22644bfc1e1a0c38124d430603210554cb,runUsbTethering(android.net.NetworkState),251113,252,45
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,76.0,"@org.junit.Test public void cmpl_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(CMPL_DOUBLE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",3c76c25f9298e045214f5a9357bffbdfe8a3b93a,"@org.junit.Test public void cmpl_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(CMPL_DOUBLE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",1a46884d65feeb3f90b01c7c18a05d6b2fa3a670,cmpl_double(),cmpl_double(),4,76,"@org.junit.Test public void cmpl_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(CMPL_DOUBLE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",518262b694305a7e108d3eb8ac525b0785a15aa5,cmpl_double(),418830,111,109
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,29.0,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",48743e17bb6e6663360c92a7cd93a99fa4240ed8,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",2c5a5c73b355896d64128275a0306340439e9500,testAesCbcHmacMd5Udp6(),testAesCbcHmacMd5Udp6(),9,29,"public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",4746bb5d4e4a17a7da63c6d9e84ad9f1971654e8,testAesCbcHmacMd5Udp6(),1893,213,213
175765,luni_src_main_java_java_math_BigInt.java,22.0,"static java.math.BigInt modulus(java.math.BigInt a, java.math.BigInt m) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_nnmod(r.bignum, a.bignum, m.bignum); return r; }",f92605f92932260f8ba273cc00c2a53c6d6a894a,"static java.math.BigInt modulus(java.math.BigInt a, java.math.BigInt m) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_nnmod(r.nativePtr, a.nativePtr, m.nativePtr); return r; }",342fd9545bcc64bd13dae87e5a6d03c52bf675bc,"modulus(java.math.BigInt,java.math.BigInt)","modulus(java.math.BigInt,java.math.BigInt)",10,21,"static java.math.BigInt modulus(java.math.BigInt a, java.math.BigInt m) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_nnmod(r.bignum, a.bignum, m.bignum); return r; }",f92605f92932260f8ba273cc00c2a53c6d6a894a,"modulus(java.math.BigInt,java.math.BigInt)",337185,72,72
128670,src_com_android_nfc_cardemulation_RegisteredNfcFServicesCache.java,,,,"private boolean isNfcid2AlreadyRegistered(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.UserServices userServices, java.lang.String nfcid2) { for (android.nfc.cardemulation.NfcFServiceInfo anotherService : userServices.services.values()) { if (anotherService.getNfcid2().equals(nfcid2)) { return true; } } return false; }",4cffbd7fa3047ffa37b731ea28277ef894bbd6e0,,"isNfcid2AlreadyRegistered(com.android.nfc.cardemulation.RegisteredNfcFServicesCache$UserServices,java.lang.String)",10,2,public void onNfcDisabled() { synchronized(mLock) { mActivated = false; } },ca907da24eed929b27b283754d2583c8eed5c691,onNfcDisabled(),148763,95,21
80962,src_java_com_android_internal_telephony_cat_CatService.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void updateIccAvailability() { com.android.internal.telephony.uicc.IccCardStatus.CardState newState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; if (null == (mUiccController)) { return; } com.android.internal.telephony.uicc.UiccCard newCard = mUiccController.getUiccCard(); if (newCard != null) { newState = newCard.getCardState(); } com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = newState; com.android.internal.telephony.cat.CatLog.d(this, ((((""New Card State = "" + newState) + "" "") + ""Old Card State = "") + oldState)); if ((oldState == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT)) && (newState != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT))) { broadcastCardStateAndIccRefreshResp(newState, null); } else if ((oldState != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT)) && (newState == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT))) { mCmdIf.reportStkServiceIsRunning(null); } }",6a2f395b9a1bda8aad1a1314c321496d51303890,,updateIccAvailability(),2,16,"void updateIccAvailability() { if (null == (mUiccController)) { return; } com.android.internal.telephony.uicc.IccCardStatus.CardState newState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; com.android.internal.telephony.uicc.UiccCard newCard = mUiccController.getUiccCard(); if (newCard != null) { newState = newCard.getCardState(); } com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = newState; com.android.internal.telephony.cat.CatLog.d(this, ((((""New Card State = "" + newState) + "" "") + ""Old Card State = "") + oldState)); if ((oldState == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT)) && (newState != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT))) { broadcastCardStateAndIccRefreshResp(newState, null); } else if ((oldState != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT)) && (newState == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT))) { mCmdIf.reportStkServiceIsRunning(null); } }",681ff213b77ac5a55e48bb58b03aacfeb53f3311,updateIccAvailability(),179193,346,346
215600,ojluni_src_main_java_java_util_Hashtable.java,10.0,"private void reconstitutionPut(java.util.Hashtable.HashtableEntry<K, V>[] tab, K key, V value) throws java.io.StreamCorruptedException { if (value == null) { throw new java.io.StreamCorruptedException(); } int hash = hash(key); int index = (hash & 2147483647) % (tab.length); for (java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; e != null; e = e.next) { if (((e.hash) == hash) && (e.key.equals(key))) { throw new java.io.StreamCorruptedException(); } } java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; tab[index] = new java.util.Hashtable.HashtableEntry<>(hash, key, value, e); (count)++; }",76eb1fe1f858db49d1e52c48ff999510bbb24d65,"private void reconstitutionPut(java.util.Hashtable.HashtableEntry<K, V>[] tab, K key, V value) throws java.io.StreamCorruptedException { if (value == null) { throw new java.io.StreamCorruptedException(); } int hash = sun.misc.Hashing.singleWordWangJenkinsHash(key); int index = (hash & 2147483647) % (tab.length); for (java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; e != null; e = e.next) { if (((e.hash) == hash) && (e.key.equals(key))) { throw new java.io.StreamCorruptedException(); } } java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; tab[index] = new java.util.Hashtable.HashtableEntry<>(hash, key, value, e); (count)++; }",05fc28883d9b5d794ee5b8477f591640bec8e621,"reconstitutionPut(java.util.Hashtable$HashtableEntry[],java.lang.Object,java.lang.Object)","reconstitutionPut(java.util.Hashtable$HashtableEntry[],java.lang.Object,java.lang.Object)",4,12,"private void reconstitutionPut(java.util.Hashtable.HashtableEntry<K, V>[] tab, K key, V value) throws java.io.StreamCorruptedException { if (value == null) { throw new java.io.StreamCorruptedException(); } int hash = java.util.Hashtable.hash(key); int index = (hash & 2147483647) % (tab.length); for (java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; e != null; e = e.next) { if (((e.hash) == hash) && (e.key.equals(key))) { throw new java.io.StreamCorruptedException(); } } java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; tab[index] = new java.util.Hashtable.HashtableEntry<>(hash, key, value, e); (count)++; }",5a14dd574081798b1ac1d93e784be55a25dfc7de,"reconstitutionPut(java.util.Hashtable$HashtableEntry[],java.lang.Object,java.lang.Object)",177967,202,196
279041,dx_src_com_android_jack_dx_dex_code_form_Form45cc.java,6.0,"@java.lang.Override public java.lang.String insnCommentString(com.android.jack.dx.dex.code.DalvInsn insn, boolean noteIndices) { if (noteIndices) { java.lang.StringBuilder sb = new java.lang.StringBuilder(20); sb.append(insnCommentCstWithIndex(((com.android.jack.dx.dex.code.DualCstInsn) (insn)).getFirstConstant(), ((com.android.jack.dx.dex.code.DualCstInsn) (insn)).getFirstIndex())); sb.append("", ""); sb.append(insnCommentCstWithIndex(((com.android.jack.dx.dex.code.DualCstInsn) (insn)).getSecondConstant(), ((com.android.jack.dx.dex.code.DualCstInsn) (insn)).getSecondIndex())); return sb.toString(); } else { return """"; } }",41ef0f784d38e5fec3d1d9fd08e5736ecb92c74e,"@java.lang.Override public java.lang.String insnCommentString(com.android.jack.dx.dex.code.DalvInsn insn, boolean noteIndices) { if (noteIndices) { return cstComment(((com.android.jack.dx.dex.code.DualCstInsn) (insn))); } else { return """"; } }",00ca9a65bb6ad167fbb5b6f28286814f50a351e9,"insnCommentString(com.android.jack.dx.dex.code.DalvInsn,boolean)","insnCommentString(com.android.jack.dx.dex.code.DalvInsn,boolean)",5,6,"@java.lang.Override @javax.annotation.Nonnull public java.lang.String insnCommentString(@javax.annotation.Nonnull com.android.jack.dx.dex.code.DalvInsn insn, boolean noteIndices) { if (noteIndices) { return cstComment(((com.android.jack.dx.dex.code.DualCstInsn) (insn))); } else { return """"; } }",3dc0cf92104b76aa4fc49fc0da5c49d1b4a2a26f,"insnCommentString(com.android.jack.dx.dex.code.DalvInsn,boolean)",171531,81,92
155011,jill_src_com_android_jill_Jill.java,0.0,"public static void process(@javax.annotation.Nonnull com.android.jill.Options options) { java.io.File binaryFile = options.getBinaryFile(); com.android.jill.frontend.java.JavaTransformer jt = new com.android.jill.frontend.java.JavaTransformer(com.android.jill.Jill.getVersion().getVersion(), options); if (binaryFile.isFile()) { if (com.android.jill.utils.FileUtils.isJavaBinaryFile(binaryFile)) { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); javaBinaryFiles.add(binaryFile); jt.transform(javaBinaryFiles); } else if (com.android.jill.utils.FileUtils.isJarFile(binaryFile)) { try { jt.transform(new java.util.jar.JarFile(binaryFile)); } catch (java.io.IOException e) { throw new com.android.jill.JillException((""Fails to create jar file "" + (binaryFile.getName())), e); } } else { throw new com.android.jill.JillException((""Unsupported file type: "" + (binaryFile.getName()))); } } else { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); com.android.jill.utils.FileUtils.getJavaBinaryFiles(binaryFile, javaBinaryFiles); jt.transform(javaBinaryFiles); } }",ae07a40acb5b48979be5d37c85b975ba0380684d,"public static void process(@javax.annotation.Nonnull com.android.jill.Options options) { java.io.File binaryFile = options.getBinaryFile(); com.android.jill.frontend.java.JavaTransformer jt = new com.android.jill.frontend.java.JavaTransformer(com.android.jill.Jill.getVersion().getVersionName(), options); if (binaryFile.isFile()) { if (com.android.jill.utils.FileUtils.isJavaBinaryFile(binaryFile)) { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); javaBinaryFiles.add(binaryFile); jt.transform(javaBinaryFiles); } else if (com.android.jill.utils.FileUtils.isJarFile(binaryFile)) { try { jt.transform(new java.util.jar.JarFile(binaryFile)); } catch (java.io.IOException e) { throw new com.android.jill.JillException((""Fails to create jar file "" + (binaryFile.getName())), e); } } else { throw new com.android.jill.JillException((""Unsupported file type: "" + (binaryFile.getName()))); } } else { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); com.android.jill.utils.FileUtils.getJavaBinaryFiles(binaryFile, javaBinaryFiles); jt.transform(javaBinaryFiles); } }",175c13f2e0b5da4d316695ce059adba56864ea8c,process(com.android.jill.Options),process(com.android.jill.Options),6,0,"public static void process(@javax.annotation.Nonnull com.android.jill.Options options) { java.io.File binaryFile = options.getBinaryFile(); com.android.jill.frontend.java.JavaTransformer jt = new com.android.jill.frontend.java.JavaTransformer(com.android.jill.Jill.getVersion().getVersion(), options); if (binaryFile.isFile()) { if (com.android.jill.utils.FileUtils.isJavaBinaryFile(binaryFile)) { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); javaBinaryFiles.add(binaryFile); jt.transform(javaBinaryFiles); } else if (com.android.jill.utils.FileUtils.isJarFile(binaryFile)) { try { jt.transform(new java.util.jar.JarFile(binaryFile)); } catch (java.io.IOException e) { throw new com.android.jill.JillException((""Fails to create jar file "" + (binaryFile.getName())), e); } } else { throw new com.android.jill.JillException((""Unsupported file type: "" + (binaryFile.getName()))); } } else { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); com.android.jill.utils.FileUtils.getJavaBinaryFiles(binaryFile, javaBinaryFiles); jt.transform(javaBinaryFiles); } }",ae07a40acb5b48979be5d37c85b975ba0380684d,process(com.android.jill.Options),325530,352,351
465279,core_java_android_bluetooth_le_AdvertisingSet.java,2.0,void setAdvertiserId(int advertiserId) { this.advertiserId = advertiserId; },ce759bb27b62144c730e694845a6969f76e86520,void setAdvertiserId(int advertiserId) { this.mAdvertiserId = advertiserId; },06fd39a4e6a200f88046c8b18a5bddf7631ae3d7,setAdvertiserId(int),setAdvertiserId(int),9,2,void setAdvertiserId(int advertiserId) { mAdvertiserId = advertiserId; },060608fe762ad78726ef439ce7b8269b20cb7e7f,setAdvertiserId(int),2183,26,24
354498,services_core_java_com_android_server_connectivity_tethering_TetherInterfaceStateMachine.java,5.0,"@java.lang.Override public void enter() { if (!(configureIfaceIp(true))) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR; transitionTo(mInitialState); return; } try { mNMService.tetherInterface(mIfaceName); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, (""Error Tethering: "" + (e.toString()))); mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR; transitionTo(mInitialState); return; } if (!(mIPv6TetherSvc.start())) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, ""Failed to start IPv6TetheringInterfaceServices""); } if (com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG) android.util.Log.d(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, (""Tethered "" + (mIfaceName))); mTetherController.notifyInterfaceStateChange(mIfaceName, this, IControlsTethering.STATE_TETHERED, mLastError); }",489eba26283e965031464719ebe2166651910a2e,"@java.lang.Override public void enter() { if (com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG) android.util.Log.d(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, (((""Tethering: "" + (mIfaceName)) + "", mode: "") + (mMode.description))); if (!(configureIfaceIp(true))) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR; transitionTo(mInitialState); return; } try { mNMService.tetherInterface(mIfaceName); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, (""Error Tethering: "" + (e.toString()))); mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR; transitionTo(mInitialState); return; } if (!(mIPv6TetherSvc.start())) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, ""Failed to start IPv6TetheringInterfaceServices""); } if (com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG) android.util.Log.d(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, (""Tethered "" + (mIfaceName))); mTetherController.notifyInterfaceStateChange(mIfaceName, this, IControlsTethering.STATE_TETHERED, mLastError); }",8ba84823cce9fccbad27a0865b48dc1c1568e81f,enter(),enter(),14,11,"@java.lang.Override public void enter() { if (!(configureIfaceIp(true))) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR; transitionTo(mInitialState); return; } try { mNMService.tetherInterface(mIfaceName); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, (""Error Tethering: "" + (e.toString()))); mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR; transitionTo(mInitialState); return; } if (!(mIPv6TetherSvc.start())) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, ""Failed to start IPv6TetheringInterfaceServices""); } }",10446a679975a39e9e5af46b542aecc4df75d149,enter(),125140,386,210
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,48.0,"public void test_isGroupingUsed() { assertFalse(new java.text.DecimalFormat(""####.##"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""######.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""000000.000000"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""######.000000"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""000000.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("" ###.###"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""$#####.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""$$####.######"").isGroupingUsed()); assertTrue(new java.text.DecimalFormat(""###,####"").isGroupingUsed()); }",6b00275e00ec0043e409108c82712560ca7ade01,"public void testIsGroupingUsed() { assertFalse(new java.text.DecimalFormat(""####.##"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""######.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""000000.000000"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""######.000000"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""000000.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("" ###.###"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""$#####.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""$$####.######"").isGroupingUsed()); assertTrue(new java.text.DecimalFormat(""###,####"").isGroupingUsed()); }",40d8b8b23622d89a1398bdb16293d9334a847745,test_isGroupingUsed(),testIsGroupingUsed(),2,50,"public void test_isGroupingUsed() { assertFalse(new java.text.DecimalFormat(""####.##"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""######.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""000000.000000"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""######.000000"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""000000.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("" ###.###"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""$#####.######"").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(""$$####.######"").isGroupingUsed()); assertTrue(new java.text.DecimalFormat(""###,####"").isGroupingUsed()); }",6b00275e00ec0043e409108c82712560ca7ade01,test_isGroupingUsed(),84376,180,181
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,38.0,"@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_34).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",dea3ea2f0da9e7c2b6008ff906ef749fba723dd5,"@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_34).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",96f4898a4f849071bf338a5fb9f61855924d434b,testClassImplementsTwoInterfacesWithSameDefenderMethod(),testClassImplementsTwoInterfacesWithSameDefenderMethod(),7,38,@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_34).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },412a7b5f6d0362be0ad632572de66d4b7274e16c,testClassImplementsTwoInterfacesWithSameDefenderMethod(),466251,92,66
307012,dx_src_com_android_dx_command_dexer_Main.java,7.0,public static void main(java.lang.String[] argArray) throws java.io.IOException { com.android.dx.command.dexer.Main.Arguments arguments = new com.android.dx.command.dexer.Main.Arguments(); arguments.parse(argArray); int result = com.android.dx.command.dexer.Main.run(arguments); if (result != 0) { java.lang.System.exit(result); } },6f611a415712a9fd018688fa0843369f6aa6a5c2,"public static void main(java.lang.String[] argArray) throws java.io.IOException { com.android.dx.command.dexer.DxContext context = new com.android.dx.command.dexer.DxContext(); com.android.dx.command.dexer.Main.Arguments arguments = new com.android.dx.command.dexer.Main.Arguments(); arguments.parse(argArray, context); int result = new com.android.dx.command.dexer.Main(context).run(arguments); if (result != 0) { java.lang.System.exit(result); } }",7d80161afb261c98050c03816b59622c78d182c1,main(java.lang.String[]),main(java.lang.String[]),5,9,"public static void main(java.lang.String[] argArray) throws java.io.IOException { com.android.dx.command.dexer.DxContext context = new com.android.dx.command.dexer.DxContext(); com.android.dx.command.dexer.Main.Arguments arguments = new com.android.dx.command.dexer.Main.Arguments(); arguments.parse(argArray, context); int result = new com.android.dx.command.dexer.Main(context).runDx(arguments); if (result != 0) { java.lang.System.exit(result); } }",a9c750e47fda0732a61cf4c8eb1fe6e5f2307172,main(java.lang.String[]),234824,135,137
285003,tools_ahat_src_heapdump_Site.java,2.0,java.util.List<com.android.ahat.Site> getChildren() { return new java.util.ArrayList<com.android.ahat.Site>(mChildren.values()); },02deb89bd693aec6cc728fb474912257f32c984b,public java.util.List<com.android.ahat.heapdump.Site> getChildren() { return new java.util.ArrayList<com.android.ahat.heapdump.Site>(mChildren.values()); },70fbe9de97a91acd7b0ce459c4a5e73aa8b8fbc8,getChildren(),getChildren(),7,11,public java.lang.String getFilename() { return mFilename; },9d990831e402c31e9d53162566046f5fbaccecf2,getFilename(),183477,50,15
410599,tests_net_java_com_android_server_connectivity_tethering_OffloadControllerTest.java,3.0,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getPackageName()).thenReturn(""OffloadControllerTest""); when(mContext.getContentResolver()).thenReturn(mContentResolver); }",36ec9161aee462982561228b0689f162901887da,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getPackageName()).thenReturn(""OffloadControllerTest""); when(mContext.getApplicationInfo()).thenReturn(mApplicationInfo); when(mContext.getContentResolver()).thenReturn(mContentResolver); }",bed0a4747172b2e556b60e4dbffd3d4cb466d8af,setUp(),setUp(),3,3,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mContext.getApplicationInfo()).thenReturn(mApplicationInfo); when(mContext.getPackageName()).thenReturn(""OffloadControllerTest""); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getContentResolver()).thenReturn(mContentResolver); }",75c13968308043d2304ab87f35eefe297458b0b5,setUp(),333468,110,110
18910,eclipse_plugins_com.android.ide.eclipse.tests_unittests_com_android_ide_eclipse_adt_internal_editors_layout_gre_NodeFactoryTest.java,0.0,"public final void testCreateDup() { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor(""xml"", ""com.example.MyJavaClass""); com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode(ved); com.android.layoutlib.api.ViewInfo lvi = new com.android.layoutlib.api.ViewInfo(""name"", uiv, 10, 12, 110, 120); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo(lvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m.create(cvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m.create(cvi); assertSame(proxy2, proxy1); }",8a8b27651d62085395150f5675dadcb3c756b435,"public final void testCreateDup() { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor(""xml"", ""com.example.MyJavaClass""); com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode(ved); com.android.layoutlib.api.ViewInfo lvi = new com.android.layoutlib.api.ViewInfo(""name"", uiv, 10, 12, 110, 120, null, null); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo(lvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m.create(cvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m.create(cvi); assertSame(proxy2, proxy1); }",78c95ca0c6bf0f29ee89ef6394e9456fea51398b,testCreateDup(),testCreateDup(),5,0,"public final void testCreateDup() { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor(""xml"", ""com.example.MyJavaClass""); com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode(ved); com.android.layoutlib.api.ViewInfo lvi = new com.android.layoutlib.api.ViewInfo(""name"", uiv, 10, 12, 110, 120); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo(lvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m.create(cvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m.create(cvi); assertSame(proxy2, proxy1); }",8a8b27651d62085395150f5675dadcb3c756b435,testCreateDup(),198417,300,296
236368,tools_apksigner_core_src_com_android_apksigner_core_internal_apk_v1_V1SchemeSigner.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public org.bouncycastle.asn1.x509.AlgorithmIdentifier findEncryptionAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier id) { id = mDefault.findEncryptionAlgorithm(id); org.bouncycastle.asn1.ASN1ObjectIdentifier oid = id.getAlgorithm(); if (X9ObjectIdentifiers.id_dsa_with_sha1.equals(oid)) { return com.android.apksigner.core.internal.apk.v1.V1SchemeSigner.SignerInfoSignatureAlgorithmFinder.DSA; } return id; },3c30858402049f8dc294839296db992239224d5c,,findEncryptionAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier),2,10,@java.lang.Override public org.bouncycastle.asn1.x509.AlgorithmIdentifier findEncryptionAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier id) { id = mDefault.findEncryptionAlgorithm(id); if (id != null) { org.bouncycastle.asn1.ASN1ObjectIdentifier oid = id.getAlgorithm(); if (X9ObjectIdentifiers.id_dsa_with_sha1.equals(oid)) { return com.android.apksigner.core.internal.apk.v1.V1SchemeSigner.SignerInfoSignatureAlgorithmFinder.DSA; } } return id; },870045c8f3bce301b48c0750b100d8ad091791c2,findEncryptionAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier),20947,119,127
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,11.0,"@java.lang.Override public void rename(java.lang.String oldPath, java.lang.String newPath) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.rename(oldPath, newPath); }",ee715257be988fd792c3ad7e18be22e2135601b9,"@java.lang.Override public void rename(java.lang.String oldPath, java.lang.String newPath) throws android.os.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.rename(oldPath, newPath); }",3fd47b2f34a55b86f31b181f6918ee78a66df1b3,"rename(java.lang.String,java.lang.String)","rename(java.lang.String,java.lang.String)",3,11,"@java.lang.Override public void rename(java.lang.String oldPath, java.lang.String newPath) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.rename(oldPath, newPath); }",597a0d1b3507358f9c4c3f530fcf88543e75f8e7,"rename(java.lang.String,java.lang.String)",170358,63,63
601741,src_com_android_bluetooth_pbap_BluetoothPbapService.java,10.0,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""stop()""); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Avoid unregister when receiver it is not registered""); return true; } try { unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Unable to unregister pbap receiver"", e); } return true; }",d66cb8c64a1a27cbba50d75248d39a8b15e8a998,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""stop()""); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Avoid unregister when receiver it is not registered""); return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }",c71254e8ed9b17ba6f2f1b3c773c4b7e18230e6d,stop(),stop(),9,10,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""stop()""); } com.android.bluetooth.pbap.BluetoothPbapService.setBluetoothPbapService(null); if ((mSessionStatusHandler) != null) { mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); } if ((mHandlerThread) != null) { mHandlerThread.quitSafely(); } if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Avoid unregister when receiver it is not registered""); return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }",b0468c3271c90ef52c3979d911ae2744a5fe3c99,stop(),383546,179,228
613398,telephony_java_android_telephony_TelephonyManager.java,207.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isVolteAvailable(int subId) { try { return getITelephony().isVolteAvailable(subId); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } },258f0dc797b9fc0f0edebd0a6e3448a5bef7982b,,isVolteAvailable(int),4,127,"private java.lang.String getNaiBySubscriberId(int subId) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; java.lang.String nai = info.getNaiForSubscriber(subId, mContext.getOpPackageName()); if (android.util.Log.isLoggable(android.telephony.TelephonyManager.TAG, Log.VERBOSE)) { android.telephony.Rlog.v(android.telephony.TelephonyManager.TAG, (""Nai = "" + nai)); } return nai; } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }",4dd5dd4259449d570bcd9bb2a89f3e7edbbc3ce3,getNaiBySubscriberId(int),475964,53,159
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,28.0,"private boolean fz(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s, int seed, int[] size) { final int inputLen = size[0]; int[] inputArray = createInputArrayInt(inputLen, (seed + 0)); inputArray[new java.util.Random((seed + 1)).nextInt(inputLen)] = 0; final long javaTimeStart = java.lang.System.currentTimeMillis(); final int javaResult = fz(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createSized(RS, com.android.rs.test.Element.I32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final int rsResult = s.reduce_fz(inputAllocation).get(); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = (inputArray[rsResult]) == 0; java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success) status += "" "" + (com.android.rs.test.UT_reduce.timing.string(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation)); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((((""fz: java input["" + javaResult) + ""] == "") + (inputArray[javaResult])) + "", rs input["") + rsResult) + ""] == "") + (inputArray[javaResult])) + "": "") + status)); inputAllocation.destroy(); return success; }",4a6fb8e3043b603b694c6f6cc0cf99eb5f1ab696,"private boolean fz(android.renderscript.RenderScript RS, com.android.rs.test.ScriptC_reduce s, int seed, int[] size) { final int inputLen = size[0]; int[] inputArray = createInputArrayInt(inputLen, (seed + 0)); inputArray[new java.util.Random((seed + 1)).nextInt(inputLen)] = 0; final long javaTimeStart = java.lang.System.currentTimeMillis(); final int javaRslt = fz(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); android.renderscript.Allocation inputAllocation = android.renderscript.Allocation.createSized(RS, android.renderscript.Element.I32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final int rsRslt = s.reduce_fz(inputAllocation).get(); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = (inputArray[rsRslt]) == 0; java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success) status += "" "" + (com.android.rs.test.UT_reduce.timing.string(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation)); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((((""fz: java input["" + javaRslt) + ""] == "") + (inputArray[javaRslt])) + "", rs input["") + rsRslt) + ""] == "") + (inputArray[javaRslt])) + "": "") + status)); inputAllocation.destroy(); return success; }",82123b15cea3a2b152c9c31e141827de27c56de1,"fz(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_reduce,int,int[])","fz(android.renderscript.RenderScript,com.android.rs.test.ScriptC_reduce,int,int[])",7,24,"private boolean fz(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s, int seed, int[] size) { final int inputLen = size[0]; int[] inputArray = createInputArrayInt(inputLen, (seed + 0)); inputArray[new java.util.Random((seed + 1)).nextInt(inputLen)] = 0; final long javaTimeStart = java.lang.System.currentTimeMillis(); final int javaResult = fz(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createSized(RS, com.android.rs.test.Element.I32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final int rsResult = s.reduce_fz(inputAllocation).get(); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = (inputArray[rsResult]) == 0; java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success) status += "" "" + (com.android.rs.test.UT_reduce.timing.string(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation)); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((((""fz: java input["" + javaResult) + ""] == "") + (inputArray[javaResult])) + "", rs input["") + rsResult) + ""] == "") + (inputArray[javaResult])) + "": "") + status)); inputAllocation.destroy(); return success; }",4a6fb8e3043b603b694c6f6cc0cf99eb5f1ab696,"fz(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_reduce,int,int[])",379423,443,441
81416,tests_tests_renderscript_src_android_renderscript_cts_TestRound.java,,,,"private void checkRoundFloat4() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testRoundFloat4(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRoundFloat4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testRoundFloat4(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRoundFloat4: "" + (e.toString()))); } }",5d380199afd9b2c14bdc7a3bec44ea4c3743c1d1,,checkRoundFloat4(),9,0,"private void checkRoundFloat4Float4() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -2260197704037316092L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testRoundFloat4Float4(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRoundFloat4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testRoundFloat4Float4(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRoundFloat4Float4: "" + (e.toString()))); } }",ac5de4098a5b462d44b11da36419d1f69c066673,checkRoundFloat4Float4(),142445,298,276
162651,ddmlib_src_main_java_com_android_ddmlib_Device.java,24.0,"@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }",671c30463e8bf39268b81dc36581a200349e6a7b,"@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }",d7a0c8012471d5d160764862daa562781bbeb782,"executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver,int)","executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver,int)",4,24,"@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }",671c30463e8bf39268b81dc36581a200349e6a7b,"executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver,int)",353162,137,130
579565,src_java_com_android_internal_telephony_RIL.java,63.0,"@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { java.util.ArrayList<java.lang.Integer> mapping = new java.util.ArrayList<>(); for (int slot : physicalSlots) { mapping.add(new java.lang.Integer(slot)); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSimSlotsMapping(rr.mSerial, mapping); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setLogicalToPhysicalSlotMapping"", e); } } } }",faf7b5c05fcc7cc565cc869bd1c06003e5bc8478,"@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RILConstants.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { java.util.ArrayList<java.lang.Integer> mapping = new java.util.ArrayList<>(); for (int slot : physicalSlots) { mapping.add(new java.lang.Integer(slot)); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSimSlotsMapping(rr.mSerial, mapping); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setLogicalToPhysicalSlotMapping"", e); } } } }",cc489d4f557a4a4ed6f9571be2ea95fc32b375dd,"setLogicalToPhysicalSlotMapping(int[],android.os.Message)","setLogicalToPhysicalSlotMapping(int[],android.os.Message)",3,63,"@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { java.util.ArrayList<java.lang.Integer> mapping = new java.util.ArrayList<>(); for (int slot : physicalSlots) { mapping.add(new java.lang.Integer(slot)); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSimSlotsMapping(rr.mSerial, mapping); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setLogicalToPhysicalSlotMapping"", e); } } } }",faf7b5c05fcc7cc565cc869bd1c06003e5bc8478,"setLogicalToPhysicalSlotMapping(int[],android.os.Message)",89277,380,376
174892,jack-tests_tests_com_android_jack_java8_GwtTest.java,,,,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testMultipleDefaults_fromInterfaces_left() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_47).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",91ba0aba0922c0596cb7cb505e20e5bb09032649,,testMultipleDefaults_fromInterfaces_left(),7,19,"@org.junit.Test public void testMultipleDefaults_fromInterfaces_left() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_47).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",5d82ef17a67af06bfc78365ce6bc3ce09db6c6d1,testMultipleDefaults_fromInterfaces_left(),261355,108,95
319807,tests_src_com_android_networkrecommendation_WifiNotificationControllerTest.java,5.0,"@org.junit.Test public void verifyNotificationDisplayed() throws java.lang.Exception { com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); setOpenAccessPoint(); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.SCANNING); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); when(mContext.getResources()).thenReturn(mock(android.content.res.Resources.class)); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mNotificationManager).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); verify(mNotificationManager, never()).cancelAsUser(any(java.lang.String.class), anyInt(), any(android.os.UserHandle.class)); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.CONNECTED); verify(mNotificationManager).cancelAsUser(any(java.lang.String.class), anyInt(), any(android.os.UserHandle.class)); }",0d9cf834c0ad8351fabfd6c4cd9792c94923640b,"@org.junit.Test public void verifyNotificationDisplayedWhenNetworkRecommended() throws java.lang.Exception { com.android.networkrecommendation.Util.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.Util.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); setOpenAccessPoints(3); when(mScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(android.net.RecommendationResult.createConnectRecommendation(createFakeConfig())); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.Util.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.SCANNING); com.android.networkrecommendation.Util.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mWifiNotificationHelper).createMainNotification(any(android.net.wifi.WifiConfiguration.class)); verify(mNotificationManager).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); verify(mNotificationManager, never()).cancelAsUser(any(java.lang.String.class), anyInt(), any(android.os.UserHandle.class)); }",bc7b925ee9f51f837d79dbcc0998f5b09b8402df,verifyNotificationDisplayed(),verifyNotificationDisplayedWhenNetworkRecommended(),6,2,"@org.junit.Test public void verifyNotificationDisplayedWhenNetworkRecommended() throws java.lang.Exception { com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); setOpenAccessPoints(3); when(mScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(android.net.RecommendationResult.createConnectRecommendation(createFakeConfig())); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.SCANNING); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mWifiNotificationHelper).createMainNotification(any(android.net.wifi.WifiConfiguration.class), any(android.graphics.Bitmap.class)); verify(mNotificationManager).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); verify(mNotificationManager, never()).cancelAsUser(any(java.lang.String.class), anyInt(), any(android.os.UserHandle.class)); }",d6320adaf44f6d6fd002a39e00e45e7fa77fb231,verifyNotificationDisplayedWhenNetworkRecommended(),489915,452,469
53163,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_NativeCrypto.java,212.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static native long d2i_X509(byte[] encoding);,d1f7547beb5cfee7490449f642d0dd433fd1db0d,,d2i_X509(byte[]),2,207,public static native long d2i_X509(byte[] encoded);,1a788291babd364927d6dabe5bb860e7632a0073,d2i_X509(byte[]),233525,16,16
23171,core_tests_coretests_src_android_content_pm_PackageManagerTests.java,150.0,"@android.test.suitebuilder.annotation.LargeTest public void testFlagIExistingE() { int iFlags = PackageManager.INSTALL_EXTERNAL; int rFlags = (PackageManager.INSTALL_INTERNAL) | (PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource(""install.apk"", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource(""install.apk"", R.raw.install, rFlags, true, false, (-1), (-1)); }",3fb41cf3e7e9ee6bbbb145b9599edafb216eb505,"@android.test.suitebuilder.annotation.LargeTest public void testFlagIExistingE() { int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; int rFlags = (android.content.pm.PackageManager.INSTALL_INTERNAL) | (android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource(""install.apk"", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource(""install.apk"", R.raw.install, rFlags, true, false, (-1), (-1)); }",38507fa96729e5287301481e6f5442f1ca7b0c7c,testFlagIExistingE(),testFlagIExistingE(),3,150,"@android.test.suitebuilder.annotation.LargeTest public void testFlagIExistingE() { if (android.os.Environment.isExternalStorageEmulated()) { return; } int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; int rFlags = (android.content.pm.PackageManager.INSTALL_INTERNAL) | (android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource(""install.apk"", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource(""install.apk"", R.raw.install, rFlags, true, false, (-1), (-1)); }",b6fdad046cf0bb2779ffc307d481ff015c102984,testFlagIExistingE(),232226,127,144
22268,monkeyrunner_src_com_android_monkeyrunner_easy_EasyMonkeyDevice.java,,,,"private com.android.monkeyrunner.easy.By getSelector(org.python.core.ArgParser ap, int i) { return ((com.android.monkeyrunner.easy.By) (ap.getPyObject(0).__tojava__(com.android.monkeyrunner.easy.By.class))); }",0ecc40504afdd122b6e1a96e0dfcf2fa2c4227ef,,"getSelector(org.python.core.ArgParser,int)",8,0,"private com.android.monkeyrunner.easy.By getSelector(org.python.core.ArgParser ap, int i) { return ((com.android.monkeyrunner.easy.By) (ap.getPyObject(i).__tojava__(com.android.monkeyrunner.easy.By.class))); }",04ca156d9ef756da6a9923beafcb76f9793629a8,"getSelector(org.python.core.ArgParser,int)",81306,69,71
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,,@org.junit.Test public void testRecoverFromZipCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) { java.lang.Thread.sleep(1000); tamperAllExctractedZips(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); },e4de3c20c9a166079939a31f2a255510532abf70,,testRecoverFromZipCorruptionStressTest(),7,15,@org.junit.Test public void testRecoverFromZipCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 80; i++) { java.lang.Thread.sleep(1000); tamperAllExtractedZips(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); },d7ab34dddf72127a027bc5adbdb1ce575d858e48,testRecoverFromZipCorruptionStressTest(),443218,126,125
21802,tests_tests_text_src_android_text_method_cts_DateTimeKeyListenerTest.java,0.0,"public void testDateTimeKeyListener() { final android.text.method.DateTimeKeyListener dateTimeKeyListener = android.text.method.DateTimeKeyListener.getInstance(); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(dateTimeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("""", mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); assertEquals(""1"", mTextView.getText().toString()); mInstrumentation.sendStringSync(""2""); assertEquals(""12"", mTextView.getText().toString()); mInstrumentation.sendStringSync(""a""); assertEquals(""12a"", mTextView.getText().toString()); int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(DateTimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(""12a"", mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals(""12a"", mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); assertEquals(""12a"", mTextView.getText().toString()); }",9cb315bf4038631f0ce7fe43229074dd1932468a,"public void testDateTimeKeyListener() { final android.text.method.DateTimeKeyListener dateTimeKeyListener = android.text.method.DateTimeKeyListener.getInstance(); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(dateTimeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("""", mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); assertEquals(""1"", mTextView.getText().toString()); mInstrumentation.sendStringSync(""2""); assertEquals(""12"", mTextView.getText().toString()); int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(DateTimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(""12"", mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals(""12"", mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); assertEquals(""12"", mTextView.getText().toString()); }",22085cbbafb5b99a1b15ed480ac65bbd4762b41b,testDateTimeKeyListener(),testDateTimeKeyListener(),2,0,"public void testDateTimeKeyListener() { final android.text.method.DateTimeKeyListener dateTimeKeyListener = android.text.method.DateTimeKeyListener.getInstance(); java.lang.String expectedText = """"; mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(dateTimeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals(expectedText, mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); expectedText += ""1""; assertEquals(expectedText, mTextView.getText().toString()); mInstrumentation.sendStringSync(""2""); expectedText += ""2""; assertEquals(expectedText, mTextView.getText().toString()); android.view.KeyCharacterMap kcm = android.view.KeyCharacterMap.load(KeyCharacterMap.BUILT_IN_KEYBOARD); if ('a' == (kcm.getMatch(KeyEvent.KEYCODE_A, DateTimeKeyListener.CHARACTERS))) { expectedText += ""a""; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_A); assertEquals(expectedText, mTextView.getText().toString()); } if ('p' == (kcm.getMatch(KeyEvent.KEYCODE_P, DateTimeKeyListener.CHARACTERS))) { expectedText += ""p""; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_P); assertEquals(expectedText, mTextView.getText().toString()); } if ('m' == (kcm.getMatch(KeyEvent.KEYCODE_M, DateTimeKeyListener.CHARACTERS))) { expectedText += ""m""; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_M); assertEquals(expectedText, mTextView.getText().toString()); } int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(DateTimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(expectedText, mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals(expectedText, mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); assertEquals(expectedText, mTextView.getText().toString()); }",abec243e46975f8c36ae9cba4bf8461d2dd9a0a2,testDateTimeKeyListener(),444808,243,485
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testAuthenticateServer() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF3802A0009000""); when(mMockTm.getDeviceId()).thenReturn(""987654321012345""); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.authenticateServer(""A1B2C3-X4Y5Z6"", com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).build()); assertEquals(""BF3802A000"", result.toHex()); verifyStoreData(channel, (""BF382D"" + ((((((((""A000"" + ""A100"") + ""A200"") + ""A300"") + ""A023"") + ""800D4131423243332D583459355A36"") + ""A112800489674523"") + ""A100"") + ""82088967452301214305""))); }",3c0d47cc30a28786b9fca085a69cfbc5bbe0f504,,testAuthenticateServer(),8,31,"@org.junit.Test public void testAuthenticateServer() { int channel = mockLogicalChannelResponses(""BF3802A0009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.authenticateServer(""A1B2C3-X4Y5Z6"", com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(160).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(161).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(162).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(163).build().toBytes(), resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); assertEquals(""BF3802A000"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, (""BF382D"" + ((((((((""A000"" + ""A100"") + ""A200"") + ""A300"") + ""A023"") + ""800D4131423243332D583459355A36"") + ""A112800489674523"") + ""A100"") + ""82088967452301214305""))); }",4535850d1ca85816e41c304156cbfa2837cd85be,testAuthenticateServer(),396873,337,352
114591,luni_src_main_java_java_lang_Math.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static void setRandomSeed(long seed) { java.lang.Math.INSTANCE.setSeed(seed); },ea6590b8a2a6dd30f461ee4f460c8374e5e51122,,setRandomSeed(long),4,44,public static void setRandomSeedInternal(long seed) { java.lang.Math.INSTANCE.setSeed(seed); },9044743e84f012aba9b88a1f2925b760fdc6b795,setRandomSeedInternal(long),453754,25,26
122734,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_charset_CharsetTest.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testForName_withProviderWithRecursiveCall() throws java.lang.Exception { libcore.java.nio.charset.FakeCharsetProvider.setDelegate(new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProviderWithRecursiveCall()); try { java.nio.charset.Charset.forName(""poop""); } catch (java.nio.charset.UnsupportedCharsetException expected) { } finally { libcore.java.nio.charset.FakeCharsetProvider.clearDelegate(); } }",1018117e336878a6d3a39aa556f5a269da004d6c,,testForName_withProviderWithRecursiveCall(),5,42,"public void testForName_withProviderWithRecursiveCall() throws java.lang.Exception { libcore.java.nio.charset.SettableCharsetProvider.setDelegate(new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProviderWithRecursiveCall()); try { java.nio.charset.Charset.forName(""poop""); fail(); } catch (java.nio.charset.UnsupportedCharsetException expected) { } finally { libcore.java.nio.charset.SettableCharsetProvider.clearDelegate(); } }",aa44c96597de8945eb932ba7091ba35e8b3ba011,testForName_withProviderWithRecursiveCall(),21450,113,117
107813,jack_src_com_android_jack_ir_ast_JArrayType.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isValidParent(@javax.annotation.CheckForNull com.android.jack.ir.ast.JNode parent) { throw new java.lang.AssertionError(); },ce6eef2e43584bc8ac420cff4ce8354467f3ded8,,isValidParent(com.android.jack.ir.ast.JNode),6,7,@java.lang.Override public void checkValidity() { throw new java.lang.AssertionError(); },33f79a60011db2c14163e13531f593ece51f9bf6,checkValidity(),100703,40,21
71600,tools_tradefed-host_src_com_android_cts_tradefed_testtype_GeeTest.java,1.0,"private boolean installTest() throws com.android.tradefed.device.DeviceNotAvailableException { if (!(createRemoteDir(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))) { com.android.tradefed.log.LogUtil.CLog.e((""Could not create directory for native tests: "" + (com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))); return false; } java.io.File nativeExe = new java.io.File(mCtsBuild.getTestCasesDir(), mExeName); if (!(nativeExe.exists())) { com.android.tradefed.log.LogUtil.CLog.e((""Native test not found: "" + nativeExe)); return false; } java.io.File devicePath = new java.io.File(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY, mExeName); if (!(mDevice.pushFile(nativeExe, devicePath.toString()))) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to push native test to device""); return false; } return true; }",8426f59a8ade5167e18964ed9b7097c977c75ab4,"private boolean installTest() throws com.android.tradefed.device.DeviceNotAvailableException { if (!(createRemoteDir(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))) { com.android.tradefed.log.LogUtil.CLog.e((""Could not create directory for native tests: "" + (com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))); return false; } java.io.File nativeExe = new java.io.File(mCtsBuild.getTestCasesDir(), mExeName); if (!(nativeExe.exists())) { com.android.tradefed.log.LogUtil.CLog.e((""Native test not found: "" + nativeExe)); return false; } java.lang.String devicePath = ((com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY) + ""/"") + (mExeName); if (!(mDevice.pushFile(nativeExe, devicePath))) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to push native test to device""); return false; } return true; }",14878b11d1b50c17aef63960009e5eac6c7b056e,installTest(),installTest(),4,1,"private boolean installTest() throws com.android.tradefed.device.DeviceNotAvailableException { if (!(createRemoteDir(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))) { com.android.tradefed.log.LogUtil.CLog.e((""Could not create directory for native tests: "" + (com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))); return false; } java.io.File nativeExe = new java.io.File(mCtsBuild.getTestCasesDir(), mExeName); if (!(nativeExe.exists())) { com.android.tradefed.log.LogUtil.CLog.e((""Native test not found: "" + nativeExe)); return false; } java.lang.String devicePath = ((com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY) + (com.android.cts.tradefed.testtype.GeeTest.ANDROID_PATH_SEPARATOR)) + (mExeName); if (!(mDevice.pushFile(nativeExe, devicePath))) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to push native test to device""); return false; } return true; }",fabfde81e38a9f5ba455584d2421e51472064586,installTest(),425874,275,298
367154,src_com_android_bluetooth_avrcp_AddressedMediaPlayer.java,14.0,"void getTotalNumOfItems(byte[] bdaddr, byte scope, com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (""getTotalNumOfItems scope = "" + scope)); java.util.List<android.media.session.MediaSession.QueueItem> mNowPlayingItems = mNowPlayingListManager.getNowPlayingList(); if (mNowPlayingItems != null) { mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, mNowPlayingItems.size()); } else if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""mediaController is null""); mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_INTERNAL_ERR, 0, 0); } else { mNowPlayingItems = mediaController.getQueue(); if (mNowPlayingItems == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""mNowPlayingItems is null""); mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_INV_ITEM, 0, 0); } else { mNowPlayingListManager.setNowPlayingList(mediaController.getQueue()); mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, mNowPlayingItems.size()); } } }",fdc8b7498ec18ba3b220c8c7aa084f9c7c1510a0,"void getTotalNumOfItems(byte[] bdaddr, com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""getTotalNumOfItems""); java.util.List<android.media.session.MediaSession.QueueItem> items = mNowPlayingList; if (items != null) { mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, items.size()); return; } if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""mediaController = null, sending no available players response""); mMediaInterface.getItemAttrRsp(bdaddr, AvrcpConstants.RSP_NO_AVBL_PLAY, null); return; } items = mediaController.getQueue(); if (items == null) { mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, 1); } mNowPlayingList = items; mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, items.size()); }",4ee13fb92ec9ea77fce61d3601d1deb01e7c9e78,"getTotalNumOfItems(byte[],byte,com.android.bluetooth.avrcp.MediaController)","getTotalNumOfItems(byte[],com.android.bluetooth.avrcp.MediaController)",10,13,"void getTotalNumOfItems(byte[] bdaddr, com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""getTotalNumOfItems""); java.util.List<android.media.session.MediaSession.QueueItem> items = mNowPlayingList; if (items != null) { mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, items.size()); return; } if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""mediaController = null, sending no available players response""); mMediaInterface.getItemAttrRsp(bdaddr, AvrcpConstants.RSP_NO_AVBL_PLAY, null); return; } items = mediaController.getQueue(); if (items == null) { int count = ((mediaController.getMetadata()) != null) ? 1 : 0; mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, count); } mNowPlayingList = items; mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, items.size()); }",96a912264cd26ceca3523cadd1c528cf59a1a459,"getTotalNumOfItems(byte[],com.android.bluetooth.avrcp.MediaController)",157248,295,314
93566,harmony-tests_src_test_java_org_apache_harmony_tests_internal_net_www_protocol_file_FileURLConnectionTest.java,3.0,"public void testGetContentType() throws java.io.IOException { assertEquals(""application/rtf"", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType(""test.rtf"")); assertEquals(""text/plain"", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType(""test.java"")); assertEquals(""application/msword"", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType(""test.doc"")); assertEquals(""text/html"", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType(""test.htx"")); assertEquals(""application/xml"", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType(""test.xml"")); assertEquals(""text/plain"", tests.api.internal.net.www.protocol.file.FileURLConnectionTest.getContentType(""."")); }",b90553ac5dab87595eded2a0b127fe49c29f9e35,"public void testGetContentType() throws java.io.IOException { assertEquals(""text/rtf"", getContentType(""test.rtf"")); assertEquals(""application/msword"", getContentType(""test.doc"")); assertEquals(""content/unknown"", getContentType(""test.htx"")); assertEquals(""text/xml"", getContentType(""test.xml"")); assertEquals(""text/plain"", new libcore.net.url.FileURLConnection(new java.net.URL(""file:///"")).getContentType()); }",e9c7cc87165151962820110924d3143d8cba0d97,testGetContentType(),testGetContentType(),3,2,"public void testGetContentType() throws java.io.IOException { assertEquals(""text/rtf"", getContentType(""test.rtf"")); assertEquals(""application/msword"", getContentType(""test.doc"")); assertEquals(""text/html"", getContentType(""test.htx"")); assertEquals(""text/xml"", getContentType(""test.xml"")); assertEquals(""text/html"", new libcore.net.url.FileURLConnection(new java.net.URL(""file:///"")).getContentType()); }",bd2083cfdbcb939e8867d92b72e64caa44853c44,testGetContentType(),392203,98,98
505551,src_com_android_bluetooth_hid_HidDevService.java,6.0,"synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.TAG, (((""reportError(): device="" + device) + "" error="") + error)); if (!(checkDevice(device))) { return false; } return reportErrorNative(error); }",0d7e5024cc78fde852b2b606eab2da54b1da38ed,"synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, (((""reportError(): device="" + device) + "" error="") + error)); if (!(checkDevice(device))) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG, ""reportError: host device not match""); return false; } return reportErrorNative(error); }",d35b50ee657258f3ad92181c74303743d7c0e424,"reportError(android.bluetooth.BluetoothDevice,byte)","reportError(android.bluetooth.BluetoothDevice,byte)",9,6,"synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, (((""reportError(): device="" + device) + "" error="") + error)); } if (!(checkDevice(device))) { return false; } return reportErrorNative(error); }",d812680607cd39afa0bce043ce0e231b8ed36ddd,"reportError(android.bluetooth.BluetoothDevice,byte)",47784,130,99
21247,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_ui_ResourceChooser.java,1.0,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mProjectButton.getSelection()) { setListElements(mProjectResources.getResources(mResourceType)); } },60cffb7dd3b1d98a995071d1c8e5fc9e3b52b811,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mProjectButton.getSelection()) { setListElements(mProjectResources.getResources(mResourceType)); mNewButton.setEnabled(true); } },45d395d4f10849cabb092ba4dbf50690b49815f5,widgetSelected(org.eclipse.swt.events.SelectionEvent),widgetSelected(org.eclipse.swt.events.SelectionEvent),3,1,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mProjectButton.getSelection()) { setupResourceList(); mNewButton.setEnabled(true); } },0c39b91119200535523094ce3baec9a4ddc9b32b,widgetSelected(org.eclipse.swt.events.SelectionEvent),177808,62,53
510369,src_main_java_com_android_apksig_internal_apk_v2_V2SchemeVerifier.java,21.0,"private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.v2.V2SchemeVerifier.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, result); if (!(result.containsErrors())) { result.verified = true; } }",1c638ff1fae89b75cca72c6ee3a8d926725b16e6,"private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd, int maxSdkVersion, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, maxSdkVersion, result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.v2.V2SchemeVerifier.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, maxSdkVersion, result); if (!(result.containsErrors())) { result.verified = true; } }",c004b88d5122c103c8d9496eb9326e60beed9df6,"verify(com.android.apksig.util.DataSource,java.nio.ByteBuffer,com.android.apksig.util.DataSource,java.nio.ByteBuffer,com.android.apksig.internal.apk.v2.V2SchemeVerifier$Result)","verify(com.android.apksig.util.DataSource,java.nio.ByteBuffer,com.android.apksig.util.DataSource,java.nio.ByteBuffer,int,com.android.apksig.internal.apk.v2.V2SchemeVerifier$Result)",9,9,"private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws com.android.apksig.internal.apk.v2.V2SchemeVerifier.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, minSdkVersion, maxSdkVersion, result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.v2.V2SchemeVerifier.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, result); if (!(result.containsErrors())) { result.verified = true; } }",f174575b9502e2857196e307dc295256536eae76,"verify(com.android.apksig.util.DataSource,java.nio.ByteBuffer,com.android.apksig.util.DataSource,java.nio.ByteBuffer,int,int,com.android.apksig.internal.apk.v2.V2SchemeVerifier$Result)",274332,241,266
110621,sdklib_src_main_java_com_android_sdklib_devices_Hardware.java,2.0,@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (!(o instanceof com.android.sdklib.devices.Hardware)) { return false; } com.android.sdklib.devices.Hardware hw = ((com.android.sdklib.devices.Hardware) (o)); return ((((((((((((((((mScreen.equals(hw.getScreen())) && (mNetworking.equals(hw.getNetworking()))) && (mSensors.equals(hw.getSensors()))) && ((mMic) == (hw.hasMic()))) && (mCameras.equals(hw.getCameras()))) && ((mKeyboard) == (hw.getKeyboard()))) && ((mNav) == (hw.getNav()))) && (mRam.equals(hw.getRam()))) && ((mButtons) == (hw.getButtonType()))) && (mInternalStorage.equals(hw.getInternalStorage()))) && (mRemovableStorage.equals(hw.getRemovableStorage()))) && (mCpu.equals(hw.getCpu()))) && (mGpu.equals(hw.getGpu()))) && (mAbis.equals(hw.getSupportedAbis()))) && (mUiModes.equals(hw.getSupportedUiModes()))) && ((mPluggedIn) == (hw.getChargeType()))) && ((((mSkinFile) != null) && (mSkinFile.equals(hw.getSkinFile()))) || (((mSkinFile) == null) && ((hw.getSkinFile()) == null))); },4656f447d0a081474d44a24bb8cde6d5c4b1844f,@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (!(o instanceof com.android.sdklib.devices.Hardware)) { return false; } com.android.sdklib.devices.Hardware hw = ((com.android.sdklib.devices.Hardware) (o)); return ((((((((((((((((mScreen.equals(hw.getScreen())) && (mNetworking.equals(hw.getNetworking()))) && (mSensors.equals(hw.getSensors()))) && ((mMic) == (hw.hasMic()))) && (mCameras.equals(hw.getCameras()))) && ((mKeyboard) == (hw.getKeyboard()))) && ((mNav) == (hw.getNav()))) && (mRam.equals(hw.getRam()))) && ((mButtons) == (hw.getButtonType()))) && (mInternalStorage.equals(hw.getInternalStorage()))) && (mRemovableStorage.equals(hw.getRemovableStorage()))) && (mCpu.equals(hw.getCpu()))) && (mGpu.equals(hw.getGpu()))) && (mAbis.equals(hw.getSupportedAbis()))) && (mUiModes.equals(hw.getSupportedUiModes()))) && ((mPluggedIn) == (hw.getChargeType()))) && ((((mSkinPath) != null) && (mSkinPath.equals(hw.getSkinPath()))) || (((mSkinPath) == null) && ((hw.getSkinPath()) == null))); },1b97a35b8a6b89b9e8f1f078b17929096c2fed6a,equals(java.lang.Object),equals(java.lang.Object),4,2,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (!(o instanceof com.android.sdklib.devices.Hardware)) { return false; } com.android.sdklib.devices.Hardware hw = ((com.android.sdklib.devices.Hardware) (o)); return ((((((((((((((((mScreen.equals(hw.getScreen())) && (mNetworking.equals(hw.getNetworking()))) && (mSensors.equals(hw.getSensors()))) && ((mMic) == (hw.hasMic()))) && (mCameras.equals(hw.getCameras()))) && ((mKeyboard) == (hw.getKeyboard()))) && ((mNav) == (hw.getNav()))) && (mRam.equals(hw.getRam()))) && ((mButtons) == (hw.getButtonType()))) && (mInternalStorage.equals(hw.getInternalStorage()))) && (mRemovableStorage.equals(hw.getRemovableStorage()))) && (mCpu.equals(hw.getCpu()))) && (mGpu.equals(hw.getGpu()))) && (mAbis.equals(hw.getSupportedAbis()))) && (mUiModes.equals(hw.getSupportedUiModes()))) && ((mPluggedIn) == (hw.getChargeType()))) && (com.google.common.base.Objects.equal(mSkinFile, hw.getSkinFile())); }",419e54f1044a6e9abb238e8852957c3a51305806,equals(java.lang.Object),519285,352,332
510195,test_959-invoke-polymorphic-accessors_src_Main.java,45.0,"public static void assertActualAndExpectedMatch(boolean actual, boolean expected) throws java.lang.AssertionError { if (actual != expected) { throw new java.lang.AssertionError(((((""Actual != Expected ("" + actual) + "" != "") + expected) + "")"")); } }",95ce9b671e9055e06e5e6215d1318ba5bc0a0ef7,"public static void assertEqual(boolean actual, boolean expected) throws java.lang.AssertionError { if (actual != expected) { throw new java.lang.AssertionError(((((""Actual != Expected ("" + actual) + "" != "") + expected) + "")"")); } }",7343d116decd4495ba28e8402be0089280868233,"assertActualAndExpectedMatch(boolean,boolean)","assertEqual(boolean,boolean)",3,53,"public static void assertEquals(boolean actual, boolean expected) throws java.lang.AssertionError { if (actual != expected) { throw new java.lang.AssertionError(((((""Actual != Expected ("" + actual) + "" != "") + expected) + "")"")); } }",ccd2ce697dcf745eb848435a3a88cef70e14f249,"assertEquals(boolean,boolean)",228911,58,57
501781,services_core_java_com_android_server_connectivity_NetdEventListenerService.java,18.0,"private static <T> void flushProtos(java.util.List<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> out, android.util.SparseArray<T> in, java.util.function.Function<T, com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> mapper) { for (int i = 0; i < (in.size()); i++) { out.add(mapper.apply(in.valueAt(i))); } in.clear(); }",9228e2ef98fd49d7b5f088100e12854d5ecee584,private long normalizeSnapshotTime(long timeMs) { return (timeMs / (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS)) * (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS); },5880a59d11c18fabe8d798d728120e5fbd0bb643,"flushProtos(java.util.List,android.util.SparseArray,java.util.function.Function)",normalizeSnapshotTime(long),13,16,private static long projectSnapshotTime(long timeMs) { return (timeMs / (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS)) * (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS); },e1c406a42d23095af10468920302fd779e2b6eb1,projectSnapshotTime(long),397656,65,66
51412,ddmlib_src_main_java_com_android_ddmlib_logcat_LogCatMessage.java,,,,public java.lang.String getTid() { return mTid; },6992a3e5070c30352d6f89c2cfebbf901f8e57d1,,getTid(),6,4,@com.android.annotations.NonNull public java.lang.String getTid() { return mTid; },ac7604ffb29084931a0a23ce39d99158d87ae315,getTid(),474555,17,25
331764,core_java_android_net_ConnectivityManager.java,93.0,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType) { return sendRequestForNetwork(need, callback, getHandler(), timeoutMs, action, legacyType); }",536dcd097ff3954fe61ea7e90a575399f474de39,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.os.Handler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException(""null NetworkCallback""); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException(""null NetworkCapabilities""); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }",20ad16fd2edcd27f74b88625203d96ca22238556,"sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int)","sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.os.Handler)",12,65,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException(""null NetworkCallback""); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException(""null NetworkCapabilities""); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }",d866d3a892da7f31c1d43824ad9ebc8acad77b17,"sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)",272874,274,277
428745,test_079-phantom_src_Bitmap.java,6.0,"static void freeNativeStorage(int nativeDataPtr) { java.lang.System.out.println((""freeNativeStorage: "" + nativeDataPtr)); }",35f1bc7e112d08143ef30867e908b15d16f878bf,"static void freeNativeStorage(int nativeDataPtr) { java.lang.System.out.println((""freeNativeStorage: "" + nativeDataPtr)); Main.freeNativeStoragePrinted = true; }",eeff78b9f55dcde33a3bed9650904f1e91cc8e11,freeNativeStorage(int),freeNativeStorage(int),4,6,"static void freeNativeStorage(int nativeDataPtr, java.util.concurrent.CountDownLatch freeSignal) { java.lang.System.out.println((""freeNativeStorage: "" + nativeDataPtr)); freeSignal.countDown(); }",15033cd3ec73700d6d24ff2b69891a6d966bf85c,"freeNativeStorage(int,java.util.concurrent.CountDownLatch)",262324,43,49
90461,build-system_builder_src_main_java_com_android_builder_internal_compiler_PreDexCache.java,17.0,"private synchronized com.android.utils.Pair<com.android.builder.internal.compiler.PreDexCache.Item, java.lang.Boolean> getItem(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo) throws java.io.IOException { com.android.builder.internal.compiler.PreDexCache.Key itemKey = com.android.builder.internal.compiler.PreDexCache.Key.of(inputFile, buildToolInfo.getRevision()); com.android.builder.internal.compiler.PreDexCache.Item item = mMap.get(itemKey); boolean newItem = item == null; if (item == null) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, outFile, com.google.common.io.Files.hash(inputFile, com.google.common.hash.Hashing.sha1()), new java.util.concurrent.CountDownLatch(1)); mMap.put(itemKey, item); } return com.android.utils.Pair.of(item, newItem); }",55698a7f6553d46846cb96e0c71454725ff0d705,"private synchronized com.android.utils.Pair<com.android.builder.internal.compiler.PreDexCache.Item, java.lang.Boolean> getItem(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo) throws java.io.IOException { com.android.builder.internal.compiler.PreDexCache.Key itemKey = com.android.builder.internal.compiler.PreDexCache.Key.of(inputFile, buildToolInfo.getRevision()); com.android.builder.internal.compiler.PreDexCache.Item item = mMap.get(itemKey); boolean newItem = false; if (item == null) { com.android.builder.internal.compiler.PreDexCache.StoredItem storedItem = mStoredItems.get(itemKey); if (storedItem != null) { java.io.File dexFile = storedItem.getOutputFile(); if ((dexFile.isFile()) && (storedItem.getSourceHash().equals(com.google.common.io.Files.hash(inputFile, com.google.common.hash.Hashing.sha1())))) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, dexFile, new java.util.concurrent.CountDownLatch(1)); item.getLatch().countDown(); } } if (item == null) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, outFile, new java.util.concurrent.CountDownLatch(1)); newItem = true; } mMap.put(itemKey, item); } return com.android.utils.Pair.of(item, newItem); }",aad7aaed24a92ef5a3f0070529cf125acc2db484,"getItem(java.io.File,java.io.File,com.android.sdklib.BuildToolInfo)","getItem(java.io.File,java.io.File,com.android.sdklib.BuildToolInfo)",4,15,"private synchronized com.android.utils.Pair<com.android.builder.internal.compiler.PreDexCache.Item, java.lang.Boolean> getItem(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo, @com.android.annotations.NonNull com.android.builder.DexOptions dexOptions) throws java.io.IOException { com.android.builder.internal.compiler.PreDexCache.Key itemKey = com.android.builder.internal.compiler.PreDexCache.Key.of(inputFile, buildToolInfo.getRevision(), dexOptions.getJumboMode()); com.android.builder.internal.compiler.PreDexCache.Item item = mMap.get(itemKey); boolean newItem = false; if (item == null) { com.android.builder.internal.compiler.PreDexCache.StoredItem storedItem = mStoredItems.get(itemKey); if (storedItem != null) { java.io.File dexFile = storedItem.getOutputFile(); if ((dexFile.isFile()) && (storedItem.getSourceHash().equals(com.google.common.io.Files.hash(inputFile, com.google.common.hash.Hashing.sha1())))) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, dexFile, new java.util.concurrent.CountDownLatch(0)); } } if (item == null) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, outFile, new java.util.concurrent.CountDownLatch(1)); newItem = true; } mMap.put(itemKey, item); } return com.android.utils.Pair.of(item, newItem); }",02b162c229f6998c6b99c642a973a609ea983503,"getItem(java.io.File,java.io.File,com.android.sdklib.BuildToolInfo,com.android.builder.DexOptions)",132328,389,412
299296,luni_src_test_java_dalvik_system_BlockGuardTest.java,12.0,"public void testFileInputStream() throws java.lang.Exception { java.io.File f = new java.io.File(""/proc/version""); recorder.clear(); java.io.FileInputStream fis = new java.io.FileInputStream(f); recorder.expectAndClear(""onReadFromDisk""); fis.read(new byte[4], 0, 4); recorder.expectAndClear(""onReadFromDisk""); fis.read(); recorder.expectAndClear(""onReadFromDisk""); fis.skip(1); recorder.expectAndClear(""onReadFromDisk""); fis.close(); }",a36dafdfb44c53f270bb3ff7c5721eaa2d971ba4,"public void testFileInputStream() throws java.lang.Exception { java.io.File f = new java.io.File(""/dev/zero""); recorder.clear(); java.io.FileInputStream fis = new java.io.FileInputStream(f); recorder.expectAndClear(""onReadFromDisk""); fis.read(new byte[4], 0, 4); recorder.expectAndClear(""onReadFromDisk""); fis.read(); recorder.expectAndClear(""onReadFromDisk""); fis.skip(1); recorder.expectAndClear(""onReadFromDisk""); fis.close(); }",e8f22e49301fc295d0d100fd62c639cc48c33145,testFileInputStream(),testFileInputStream(),5,12,"public void testFileInputStream() throws java.lang.Exception { java.io.File tmpFile = java.io.File.createTempFile(""inputFile"", "".txt""); try (java.io.FileOutputStream fos = new java.io.FileOutputStream(tmpFile)) { fos.write(""01234567890"".getBytes()); } try { recorder.clear(); java.io.FileInputStream fis = new java.io.FileInputStream(tmpFile); recorder.expectAndClear(""onReadFromDisk""); fis.read(new byte[4], 0, 4); recorder.expectAndClear(""onReadFromDisk""); fis.read(); recorder.expectAndClear(""onReadFromDisk""); fis.skip(1); recorder.expectAndClear(""onReadFromDisk""); fis.close(); } finally { tmpFile.delete(); } }",5333bf9faaaca76d9cfe3433932189b2a825fbdf,testFileInputStream(),471540,117,163
290982,luni_src_test_java_libcore_javax_net_ssl_SSLSocketTest.java,51.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.math.BigInteger getPrivateExponent() { return delegate.getPrivateExponent(); },cee54ea8871a163c58daa47a18adc5ecf132dd8f,,getPrivateExponent(),6,22,@java.lang.Override public java.security.spec.ECParameterSpec getParams() { return delegate.getParams(); },3774dacef66132ee318dd64b7394c393dd5fcaf9,getParams(),449266,24,25
202487,tests_tests_hardware_src_android_hardware_cts_helpers_TestSensorManager.java,3.0,"public void unregisterListener() { if ((mTestSensorEventListener) == null) { android.util.Log.w(android.hardware.cts.helpers.TestSensorManager.LOG_TAG, ""No listener registered, returning.""); return; } mSensorManager.unregisterListener(mTestSensorEventListener, mEnvironment.getSensor()); mTestSensorEventListener.assertEventsReceivedInHandler(); mTestSensorEventListener = null; }",76d018c948c9caaec178c7b990d0a465db98cfa7,"public void unregisterListener() { if ((mTestSensorEventListener) == null) { android.util.Log.w(android.hardware.cts.helpers.TestSensorManager.LOG_TAG, ""No listener registered, returning.""); return; } mTestSensorEventListener.onTestStopped(); mSensorManager.unregisterListener(mTestSensorEventListener, mEnvironment.getSensor()); mTestSensorEventListener.assertEventsReceivedInHandler(); mTestSensorEventListener = null; }",0a2706e50ef4357d7c741739afda019c14d04bce,unregisterListener(),unregisterListener(),3,3,"public void unregisterListener() { if ((mTestSensorEventListener) == null) { android.util.Log.w(android.hardware.cts.helpers.TestSensorManager.LOG_TAG, ""No listener registered, returning.""); return; } mSensorManager.unregisterListener(mTestSensorEventListener, mEnvironment.getSensor()); mTestSensorEventListener.assertEventsReceivedInHandler(); mTestSensorEventListener = null; }",76d018c948c9caaec178c7b990d0a465db98cfa7,unregisterListener(),383773,99,90
82673,ddmlib_src_main_java_com_android_ddmlib_EmulatorConsole.java,8.0,"public static synchronized com.android.ddmlib.EmulatorConsole getConsole(com.android.ddmlib.IDevice d) { java.lang.Integer port = com.android.ddmlib.EmulatorConsole.getEmulatorPort(d.getSerialNumber()); if (port == null) { return null; } com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.sEmulators.get(port); if (console != null) { if (!(console.ping())) { com.android.ddmlib.EmulatorConsole.RemoveConsole(console.mPort); console = null; } } if (console == null) { console = new com.android.ddmlib.EmulatorConsole(port); if (console.start()) { com.android.ddmlib.EmulatorConsole.sEmulators.put(port, console); } else { console = null; } } return console; }",1eb9eae9c7e5023c99b5b7f7d12ac581b731e1d1,public static com.android.ddmlib.EmulatorConsole getConsole(com.android.ddmlib.IDevice d) { java.lang.Integer port = com.android.ddmlib.EmulatorConsole.getEmulatorPort(d.getSerialNumber()); if (port == null) { return null; } com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.retrieveConsole(port); if (!(console.checkConnection())) { com.android.ddmlib.EmulatorConsole.removeConsole(console.mPort); console = null; } return console; },f9f5777a5fb889ecf0ad3deb81605a6d3db6d037,getConsole(com.android.ddmlib.IDevice),getConsole(com.android.ddmlib.IDevice),3,8,"@com.android.annotations.Nullable public static com.android.ddmlib.EmulatorConsole getConsole(com.android.ddmlib.IDevice d) { java.lang.Integer port = com.android.ddmlib.EmulatorConsole.getEmulatorPort(d.getSerialNumber()); if (port == null) { com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, (""Failed to find emulator port from serial: "" + (d.getSerialNumber()))); return null; } com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.retrieveConsole(port); if (!(console.checkConnection())) { com.android.ddmlib.EmulatorConsole.removeConsole(console.mPort); console = null; } return console; }",15797df49b9f19760b12d6e5afd02586a10dd419,getConsole(com.android.ddmlib.IDevice),8713,131,184
640059,src_com_android_bluetooth_newavrcp_helpers_Util.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: MediaItem: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = item.getMediaId(); return ret; }",ae0616479602e04d03866d370edbbb19793b3dbf,,toMetadata(android.media.browse.MediaBrowser.MediaItem),4,0,"public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.d(com.android.bluetooth.avrcp.Util.TAG, (""toMetadata: MediaItem: ContainsKey: "" + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = item.getMediaId(); return ret; }",4b75a24e4d9ea589d2e5c238e1ac47d0da032ea2,toMetadata(android.media.browse.MediaBrowser.MediaItem),303007,199,199
113821,src_com_google_gct_idea_git_CloneGCPDialog.java,,,,"@java.lang.SuppressWarnings(""ConstantConditions"") @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { if ((myDefaultDirectoryName.equals(myDirectoryName.getText())) || ((myDirectoryName.getText().length()) == 0)) { java.lang.String projectDescription = myRepositoryURL.getProjectDescription(); if (((myRepositoryURL) != null) && (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(projectDescription)))) { myDefaultDirectoryName = projectDescription.replaceAll(WizardConstants.INVALID_FILENAME_CHARS, """"); myDefaultDirectoryName = myDefaultDirectoryName.replaceAll(""\\s"", """"); } else { myDefaultDirectoryName = """"; } myDirectoryName.setText(myDefaultDirectoryName); } updateButtons(); }",629926caac6dc90429f19805727c6620d0647746,,textChanged(javax.swing.event.DocumentEvent),6,10,"@java.lang.SuppressWarnings(""ConstantConditions"") @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { if ((myDefaultDirectoryName.equals(myDirectoryName.getText())) || ((myDirectoryName.getText().length()) == 0)) { java.lang.String projectDescription = myRepositoryURL.getProjectDescription(); if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(projectDescription))) { myDefaultDirectoryName = projectDescription.replaceAll(WizardConstants.INVALID_FILENAME_CHARS, """"); myDefaultDirectoryName = myDefaultDirectoryName.replaceAll(""\\s"", """"); } else { myDefaultDirectoryName = """"; } myDirectoryName.setText(myDefaultDirectoryName); } updateButtons(); }",d5432f360f77dbe56054dc9bb88390f2de39b255,textChanged(javax.swing.event.DocumentEvent),516017,175,166
81416,tests_tests_renderscript_src_android_renderscript_cts_TestCopysign.java,,,,"private void checkCopysignFloat4Float4() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testCopysignFloat4Float4(inX, out); verifyResultsCopysignFloat4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCopysignFloat4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testCopysignFloat4Float4(inX, out); verifyResultsCopysignFloat4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCopysignFloat4Float4: "" + (e.toString()))); } }",cfaf387e93e4892930970df3df286d036dc7161d,,checkCopysignFloat4Float4(),9,2,"private void checkCopysignFloat4Float4Float4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -623095077886861252L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -623095077886861252L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testCopysignFloat4Float4Float4(inX, out); verifyResultsCopysignFloat4Float4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCopysignFloat4Float4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testCopysignFloat4Float4Float4(inX, out); verifyResultsCopysignFloat4Float4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCopysignFloat4Float4Float4: "" + (e.toString()))); } }",79fe62111edba4aee889dcfc0cc75652e438e11c,checkCopysignFloat4Float4Float4(),142792,450,396
152861,perflib_src_test_java_com_android_tools_perflib_heap_analysis_DominatorsTest.java,6.0,"public void testSampleHprof() throws java.lang.Exception { java.io.File file = new java.io.File(java.lang.ClassLoader.getSystemResource(""dialer.android-hprof"").getFile()); mSnapshot = new com.android.tools.perflib.heap.analysis.HprofParser(new com.android.tools.perflib.heap.io.MemoryMappedFileBuffer(file)).parse(); mSnapshot.computeDominators(); assertEquals(42911, mSnapshot.getReachableInstances().size()); com.android.tools.perflib.heap.analysis.Instance instance = mSnapshot.findReference(-1326579808); assertEquals(Snapshot.SENTINEL_ROOT, instance.getImmediateDominator()); int appIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap(""app"")); int zygoteIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap(""zygote"")); com.android.tools.perflib.heap.analysis.ClassObj htmlParser = mSnapshot.findClass(""android.text.Html$HtmlParser""); assertEquals(116492, htmlParser.getRetainedSize(zygoteIndex)); assertEquals(0, htmlParser.getRetainedSize(appIndex)); com.android.tools.perflib.heap.analysis.ClassObj activityThread = mSnapshot.findClass(""android.app.ActivityThread""); assertEquals(813, activityThread.getRetainedSize(zygoteIndex)); assertEquals(576, activityThread.getRetainedSize(appIndex)); }",4cc967ca042095fa9f1f8550820f41597b45043b,"public void testSampleHprof() throws java.lang.Exception { java.io.File file = new java.io.File(java.lang.ClassLoader.getSystemResource(""dialer.android-hprof"").getFile()); mSnapshot = new com.android.tools.perflib.heap.analysis.HprofParser(new com.android.tools.perflib.heap.io.MemoryMappedFileBuffer(file)).parse(); mSnapshot.computeDominators(); assertEquals(42911, mSnapshot.getReachableInstances().size()); com.android.tools.perflib.heap.analysis.Instance instance = mSnapshot.findInstance(-1326579808); assertEquals(Snapshot.SENTINEL_ROOT, instance.getImmediateDominator()); int appIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap(""app"")); int zygoteIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap(""zygote"")); com.android.tools.perflib.heap.analysis.ClassObj htmlParser = mSnapshot.findClass(""android.text.Html$HtmlParser""); assertEquals(116492, htmlParser.getRetainedSize(zygoteIndex)); assertEquals(0, htmlParser.getRetainedSize(appIndex)); com.android.tools.perflib.heap.analysis.ClassObj activityThread = mSnapshot.findClass(""android.app.ActivityThread""); assertEquals(813, activityThread.getRetainedSize(zygoteIndex)); assertEquals(576, activityThread.getRetainedSize(appIndex)); }",6f2741583daa64a39a0b7e69fd63c0d7a1f67ac9,testSampleHprof(),testSampleHprof(),6,7,"public void testSampleHprof() throws java.lang.Exception { java.io.File file = new java.io.File(java.lang.ClassLoader.getSystemResource(""dialer.android-hprof"").getFile()); mSnapshot = new com.android.tools.perflib.heap.analysis.HprofParser(new com.android.tools.perflib.heap.io.MemoryMappedFileBuffer(file)).parse(); mSnapshot.computeDominators(); java.util.Set<com.android.tools.perflib.heap.analysis.Instance> topologicalSet = new java.util.HashSet<com.android.tools.perflib.heap.analysis.Instance>(mSnapshot.getTopologicalOrdering()); assertEquals(topologicalSet.size(), mSnapshot.getTopologicalOrdering().size()); long totalInstanceCount = 0; for (com.android.tools.perflib.heap.analysis.Heap heap : mSnapshot.getHeaps()) { totalInstanceCount += heap.getInstances().size(); totalInstanceCount += heap.getClasses().size(); } assertEquals(43687, totalInstanceCount); assertEquals(42571, mSnapshot.getReachableInstances().size()); com.android.tools.perflib.heap.analysis.Instance instance = mSnapshot.findInstance(-1326579808); assertEquals(Snapshot.SENTINEL_ROOT, instance.getImmediateDominator()); int appIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap(""app"")); int zygoteIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap(""zygote"")); com.android.tools.perflib.heap.analysis.ClassObj htmlParser = mSnapshot.findClass(""android.text.Html$HtmlParser""); assertEquals(116492, htmlParser.getRetainedSize(zygoteIndex)); assertEquals(0, htmlParser.getRetainedSize(appIndex)); com.android.tools.perflib.heap.analysis.ClassObj activityThread = mSnapshot.findClass(""android.app.ActivityThread""); assertEquals(853, activityThread.getRetainedSize(zygoteIndex)); assertEquals(576, activityThread.getRetainedSize(appIndex)); }",9a4d6ad537c4423cc67fff9c18f75d85123d23d9,testSampleHprof(),375544,327,467
128670,src_com_android_nfc_cardemulation_CardEmulationManager.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onNfcFServicesUpdated(int userId, java.util.List<android.nfc.cardemulation.NfcFServiceInfo> services) { mT3tIdentifiersCache.onServicesUpdated(userId, services); mPreferredNfcFServices.onServicesUpdated(); }",567434a85d8966ae68fc57e732a8eba7568d8894,,"onNfcFServicesUpdated(int,java.util.List)",10,7,"@java.lang.Override public void onNfcFServicesUpdated(int userId, java.util.List<android.nfc.cardemulation.NfcFServiceInfo> services) { mT3tIdentifiersCache.onServicesUpdated(userId, services); mEnabledNfcFServices.onServicesUpdated(); }",c952e26fe4342e155dda885b71a6a2f02ede2ce5,"onNfcFServicesUpdated(int,java.util.List)",148612,69,69
89651,services_java_com_android_server_pm_PackageManagerService.java,134.0,"private android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String packageName, int flags, int userId) { if (!(com.android.server.pm.PackageManagerService.sUserManager.exists(userId))) return null; com.android.server.pm.PackageSetting ps = mSettings.mPackages.get(packageName); if (ps != null) { android.content.pm.PackageParser.Package pkg = ps.pkg; if (pkg == null) { if ((flags & (android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES)) == 0) { return null; } pkg = new android.content.pm.PackageParser.Package(packageName); pkg.applicationInfo.packageName = packageName; pkg.applicationInfo.flags = (ps.pkgFlags) | (android.content.pm.ApplicationInfo.FLAG_IS_DATA_ONLY); pkg.applicationInfo.publicSourceDir = ps.resourcePathString; pkg.applicationInfo.sourceDir = ps.codePathString; pkg.applicationInfo.dataDir = getDataPathForPackage(packageName, 0).getPath(); pkg.applicationInfo.nativeLibraryDir = ps.nativeLibraryPathString; } return generatePackageInfo(pkg, flags, userId); } return null; }",e0d59ad0507d194f23c73c0be30725c6194273de,"private android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String packageName, int flags, int userId) { if (!(com.android.server.pm.PackageManagerService.sUserManager.exists(userId))) return null; com.android.server.pm.PackageSetting ps = mSettings.mPackages.get(packageName); if (ps != null) { android.content.pm.PackageParser.Package pkg = ps.pkg; if (pkg == null) { if ((flags & (android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES)) == 0) { return null; } pkg = new android.content.pm.PackageParser.Package(packageName); pkg.applicationInfo.packageName = packageName; pkg.applicationInfo.flags = (ps.pkgFlags) | (android.content.pm.ApplicationInfo.FLAG_IS_DATA_ONLY); pkg.applicationInfo.publicSourceDir = ps.resourcePathString; pkg.applicationInfo.sourceDir = ps.codePathString; pkg.applicationInfo.dataDir = getDataPathForPackage(packageName, 0).getPath(); pkg.applicationInfo.nativeLibraryDir = ps.nativeLibraryPathString; pkg.applicationInfo.requiredCpuAbiSupport = ps.requiredCpuAbiString; } return generatePackageInfo(pkg, flags, userId); } return null; }",b1696c9ff50ba3fd8fdb728dde3344db369dc310,"generatePackageInfoFromSettingsLPw(java.lang.String,int,int)","generatePackageInfoFromSettingsLPw(java.lang.String,int,int)",4,134,"private android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String packageName, int flags, int userId) { if (!(com.android.server.pm.PackageManagerService.sUserManager.exists(userId))) return null; com.android.server.pm.PackageSetting ps = mSettings.mPackages.get(packageName); if (ps != null) { android.content.pm.PackageParser.Package pkg = ps.pkg; if (pkg == null) { if ((flags & (android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES)) == 0) { return null; } pkg = new android.content.pm.PackageParser.Package(packageName); pkg.applicationInfo.packageName = packageName; pkg.applicationInfo.flags = (ps.pkgFlags) | (android.content.pm.ApplicationInfo.FLAG_IS_DATA_ONLY); pkg.applicationInfo.publicSourceDir = ps.resourcePathString; pkg.applicationInfo.sourceDir = ps.codePathString; pkg.applicationInfo.dataDir = getDataPathForPackage(packageName, 0).getPath(); pkg.applicationInfo.nativeLibraryDir = ps.nativeLibraryPathString; pkg.applicationInfo.requiredCpuAbi = ps.requiredCpuAbiString; } return generatePackageInfo(pkg, flags, userId); } return null; }",d15a74bb4fe3a329753ce5e251eff84f06d95581,"generatePackageInfoFromSettingsLPw(java.lang.String,int,int)",412016,289,288
129220,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_app_JavaGradleModule.java,,,,"@java.lang.Override public java.lang.String getBuildGradleContent() { java.util.List<? extends com.android.build.gradle.integration.common.fixture.app.GradleModule> projectDeps = getProjectDeps(); java.lang.String content = ""apply plugin: \'java\'\n"" + (""\n"" + ""dependencies {\n""); for (com.android.build.gradle.integration.common.fixture.app.GradleModule dep : projectDeps) { content += ("" compile project('"" + (dep.getPath())) + ""\')\n""; } content += ""}\n""; return content; }",ed0ce5c394c1d718b397e71b398bb10aa710d423,,getBuildGradleContent(),8,0,"@com.android.annotations.NonNull @java.lang.Override public java.lang.String getBuildGradleContent() { return ""apply plugin: \'java\'\n""; }",e22fff150d7b482ef0b0c00ee53bedada76fec02,getBuildGradleContent(),14667,142,40
540316,src_com_android_bluetooth_a2dp_A2dpService.java,45.0,"public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""Remote does not have A2dp Sink UUID""); return false; } int connectionState = mStateMachine.getConnectionState(device); if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(A2dpStateMachine.CONNECT, device); return true; }",be0e60935b4885620c73d67dda1a581af4f5f1cb,"public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""Remote does not have A2DP Sink UUID""); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } int connectionState = smConnect.getConnectionState(); if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } for (com.android.bluetooth.a2dp.A2dpStateMachine smDisconnect : mStateMachines.values()) { if (!(smDisconnect.getDevice().equals(device))) { smDisconnect.sendMessage(A2dpStateMachine.DISCONNECT); } } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",07cd2f34f3a8a692b2d4b54a7f59081c8f474c19,connect(android.bluetooth.BluetoothDevice),connect(android.bluetooth.BluetoothDevice),9,57,"public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : Remote does not have A2DP Sink UUID"")); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",63137f35692794ada487fb1b705859e488d77190,connect(android.bluetooth.BluetoothDevice),280214,480,386
123694,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_StackFrame_GetValues002Test.java,,,,public java.lang.String getTestName() { return testName; },98c2738520ab55dc521a967e4d94b045f0288c98,,getTestName(),8,7,"public void testGetValues010_Array() { long classID = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = getStaticFieldValue(classID, ""ARRAY_PARAM_VALUE""); org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester(""breakpointArray"", StackTrace002Debuggee.ARRAY_SIGNAL); org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod(""runBreakpointArray""); methodInfo.addVariable(""param"", expectedValue); runStackFrameTest(tester); }",11d68c6f170521d153541b5e6115284314562b2f,testGetValues010_Array(),215699,16,176
328338,telephony_java_android_telephony_TelephonyManager.java,112.0,"public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int subId, java.lang.String AID) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) return telephony.iccOpenLogicalChannel(subId, AID); } catch (android.os.RemoteException ex) { } catch (java.lang.NullPointerException ex) { } return null; }",70708c4158f3d6c00443da7c7c8b56d8c3aa3e93,"public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int subId, java.lang.String AID, byte p2) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) return telephony.iccOpenLogicalChannel(subId, AID, p2); } catch (android.os.RemoteException ex) { } catch (java.lang.NullPointerException ex) { } return null; }",cda148c8f8d2f2aa9e46e10716937e001742af90,"iccOpenLogicalChannel(int,java.lang.String)","iccOpenLogicalChannel(int,java.lang.String,byte)",8,69,"public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int subId, java.lang.String AID, int p2) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) return telephony.iccOpenLogicalChannel(subId, AID, p2); } catch (android.os.RemoteException ex) { } catch (java.lang.NullPointerException ex) { } return null; }",feed703f224742a2dcfd293b3ca8eeb3716e38f0,"iccOpenLogicalChannel(int,java.lang.String,int)",162728,110,110
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,18.0,"@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } return res; }",e99dd1f8df9824fbf00863894121c2181be63a63,"@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } if (res == 0) { res = java.lang.Integer.compare(defaultNetwork, another.defaultNetwork); } return res; }",4e5ce67a7a0dc9b3432571c35074025a2a3e93e5,compareTo(com.android.server.net.NetworkStatsCollection$Key),compareTo(com.android.server.net.NetworkStatsCollection$Key),6,16,"@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } return res; }",e99dd1f8df9824fbf00863894121c2181be63a63,compareTo(com.android.server.net.NetworkStatsCollection$Key),53396,158,133
92758,luni_src_main_java_java_nio_DirectByteBuffer.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void allowAccess(boolean allow) { block.allowAccess(allow); },5af7a5461ea58cd1549c86454b27339a7fbffccf,,allowAccess(boolean),6,50,@java.lang.Override public void setAccessible(boolean accessible) { block.setAccessible(accessible); },bc05a124bdb41743ed49315fc26202c56d69f7e7,setAccessible(boolean),44983,23,22
91995,luni_src_main_java_libcore_io_ForwardingOs.java,28.0,public void seteuid(int euid) throws libcore.io.ErrnoException { os.seteuid(euid); },c6e2706dc78cc09daae77767d9f9ba8100e24f0b,public void seteuid(int euid) throws android.os.ErrnoException { os.seteuid(euid); },7b719c28d67baee64f422fb98a114f0603adb434,seteuid(int),seteuid(int),3,26,public void seteuid(int euid) throws android.system.ErrnoException { os.seteuid(euid); },c3c65f3ac1442e2c36f8c212066fccbf73a80a44,seteuid(int),170516,29,29
143138,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dependency_DependencyChecker.java,0.0,@com.android.annotations.NonNull public java.util.List<java.lang.Integer> getFoundAndroidApis() { return foundAndroidApis; },a5af99ad0412e221dcd5ccb855b2cb52d819d036,@com.android.annotations.NonNull public java.util.List<java.lang.Integer> getLegacyApiLevels() { return legacyApiLevels; },d6cf79371c22be7d79c4b521909408e3fbcc8079,getFoundAndroidApis(),getLegacyApiLevels(),4,1,"@com.android.annotations.NonNull public java.util.Map<org.gradle.api.artifacts.ModuleVersionIdentifier, java.lang.Integer> getLegacyApiLevels() { return legacyApiLevels; }",9e4e53f19ddc4bc1a5c4d9902aee74a43f1a5aab,getLegacyApiLevels(),58279,33,46
23690,chimpchat_src_com_android_chimpchat_ChimpChat.java,2.0,"public static com.android.chimpchat.core.IChimpBackend createBackendByName(java.lang.String backendName) { if (""adb"".equals(backendName)) { return new com.android.chimpchat.adb.AdbBackend(); } else if (""stub"".equals(backendName)) { return new com.android.chimpchat.stub.StubBackend(); } else { return null; } }",0eee95881cb6b3ff32920bb230a3566f46f1fd29,"public com.android.chimpchat.core.IChimpBackend createBackendByName(java.lang.String backendName) { if (""adb"".equals(backendName)) { java.lang.String location = options.get(""adbLocation""); if (location == null) { return new com.android.chimpchat.adb.AdbBackend(); } else { return new com.android.chimpchat.adb.AdbBackend(location); } } else if (""stub"".equals(backendName)) { return new com.android.chimpchat.stub.StubBackend(); } else { return null; } }",03c619d4d8d86c2f7f04b798719976601b940068,createBackendByName(java.lang.String),createBackendByName(java.lang.String),7,3,"private static com.android.chimpchat.core.IChimpBackend createBackendByName(java.lang.String backendName) { if (""adb"".equals(backendName)) { if ((com.android.chimpchat.ChimpChat.sAdbLocation) == null) { return new com.android.chimpchat.adb.AdbBackend(); } else { return new com.android.chimpchat.adb.AdbBackend(com.android.chimpchat.ChimpChat.sAdbLocation); } } else { return null; } }",72c9da1b681283b719f2acd4421f34d892e8c7ab,createBackendByName(java.lang.String),265742,136,126
281492,tests_wifitests_src_com_android_server_wifi_WifiStateMachinePrimeTest.java,8.0,"@org.junit.Test public void testWificondNullWhenSwitchingToApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); }",60a9198e7ffc2611cb0fe935bb4e69f8118bdf2c,"@org.junit.Test public void testWificondNullWhenSwitchingToApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(null); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); }",ca3cf1f888c29f37926898140ccc873c98c3c850,testWificondNullWhenSwitchingToApMode(),testWificondNullWhenSwitchingToApMode(),12,8,"@org.junit.Test public void testWificondNullWhenSwitchingToApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(null); mLooper.dispatchAll(); assertEquals(com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING, mWifiStateMachinePrime.getCurrentMode()); }",b8e4fce969a4a2373ca9cece4b5c79f00c89467e,testWificondNullWhenSwitchingToApMode(),252791,97,94
524744,services_tests_servicestests_src_com_android_server_pm_dex_DexoptUtilsTest.java,,,,"@org.junit.Test public void testSplitChainNoSplitDependencies() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, true, false); java.lang.String[] sharedLibrary = new java.lang.String[]{ ""a.dex"", ""b.dex"" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals(""PCL[a.dex:b.dex]"", contexts[0]); assertEquals(""DLC[];PCL[a.dex:b.dex:base.dex]"", contexts[1]); assertEquals(""DLC[];PCL[a.dex:b.dex:base.dex]"", contexts[2]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[3]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[4]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[5]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[6]); }",64efc2ed51861417b2bc381f10f95c82700937d2,,testSplitChainNoSplitDependencies(),2,7,"@org.junit.Test public void testSplitChainNoSplitDependencies() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, true, false); java.lang.String[] sharedLibrary = new java.lang.String[]{ ""a.dex"", ""b.dex"" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals(""PCL[a.dex:b.dex]"", contexts[0]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[1]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[2]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[3]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[4]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[5]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[6]); }",81eac7ce5e26f19d34c6a6f1f074f5a7da56faf1,testSplitChainNoSplitDependencies(),275510,282,282
81416,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,,,,"public static void computeRsqrt(android.renderscript.cts.TestRsqrt.ArgumentsFloatFloat args) { args.ulf = 2; args.ulfRelaxed = 2; args.out = ((float) (java.lang.Math.pow(args.in, (-0.5)))); }",90ec5699aeb6226d8123054d16714dd3409f7236,,computeRsqrt(android.renderscript.cts.TestRsqrt$ArgumentsFloatFloat),9,52,"public static void computeRsqrt(android.renderscript.cts.TestRsqrt.ArgumentsFloatFloat args) { args.ulf = 2; args.ulfRelaxed = 2; args.out = ((float) (java.lang.StrictMath.pow(args.in, (-0.5)))); }",7d80d82d2d6a28e80440b644e57e061e3cf5db9f,computeRsqrt(android.renderscript.cts.TestRsqrt$ArgumentsFloatFloat),142502,66,67
21452,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_PkgWindow2.java,,,,public void open() { org.eclipse.swt.widgets.Display display = org.eclipse.swt.widgets.Display.getDefault(); createContents(); postCreate(); mshell.open(); mshell.layout(); while (!(mshell.isDisposed())) { if (!(display.readAndDispatch())) { display.sleep(); } } },8346afab03e72e3eefaf339ab54454501a12a31b,,open(),6,10,public void onPageSelected() { if (mPackages.isEmpty()) { loadPackages(); } },5c01d9b8bdef5f3787680d5735f6e8afdb246ad8,onPageSelected(),440026,66,20
82300,luni_src_main_java_java_lang_System.java,46.0,"public static java.lang.String getProperty(java.lang.String name, java.lang.String defaultValue) { java.lang.System.checkPropertyName(name); return java.lang.System.getProperties().getProperty(name, defaultValue); }",229d472d6230f66fa145e186f5c5be73eef90ed3,"public static java.lang.String getProperty(java.lang.String name, java.lang.String defaultValue) { java.lang.System.checkPropertyName(name); return java.lang.System.getUserModifiableProperties().getProperty(name, defaultValue); }",74cfc70ec0e10baf06e1be8110065ddcdd61577e,"getProperty(java.lang.String,java.lang.String)","getProperty(java.lang.String,java.lang.String)",3,44,"public static java.lang.String getProperty(java.lang.String name, java.lang.String defaultValue) { java.lang.System.checkPropertyName(name); return java.lang.System.systemProperties.getProperty(name, defaultValue); }",609970f5fae9ab7c528bd8c1c3a14aaa81d0fb6d,"getProperty(java.lang.String,java.lang.String)",178712,54,52
167681,dx_src_com_android_dx_merge_DexMerger.java,70.0,"public final void mergeUnsorted() { getSection(contentsOut).off = out.getPosition(); java.util.List<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue> all = new java.util.ArrayList<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue>(); all.addAll(readUnsortedValues(dexA, aIndexMap)); all.addAll(readUnsortedValues(dexB, bIndexMap)); java.util.Collections.sort(all); int outCount = 0; for (int i = 0; i < (all.size());) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e1 = all.get((i++)); updateIndex(e1.offset, getIndexMap(e1.source), e1.index, (outCount - 1)); while ((i < (all.size())) && ((e1.compareTo(all.get(i))) == 0)) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e2 = all.get((i++)); updateIndex(e2.offset, getIndexMap(e2.source), e2.index, (outCount - 1)); } write(e1.value); outCount++; } getSection(contentsOut).size = outCount; }",68f34bcfd460ede07ae04ec8d649a4931e76c390,"public final void mergeUnsorted() { getSection(contentsOut).off = out.getPosition(); java.util.List<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue> all = new java.util.ArrayList<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue>(); for (int i = 0; i < (dexes.length); i++) { all.addAll(readUnsortedValues(dexes[i], indexMaps[i])); } java.util.Collections.sort(all); int outCount = 0; for (int i = 0; i < (all.size());) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e1 = all.get((i++)); updateIndex(e1.offset, getIndexMap(e1.source), e1.index, (outCount - 1)); while ((i < (all.size())) && ((e1.compareTo(all.get(i))) == 0)) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e2 = all.get((i++)); updateIndex(e2.offset, getIndexMap(e2.source), e2.index, (outCount - 1)); } write(e1.value); outCount++; } getSection(contentsOut).size = outCount; }",c0e13a6868ee66e1515b7011cd936efff5390cbd,mergeUnsorted(),mergeUnsorted(),8,69,"public final void mergeUnsorted() { getSection(contentsOut).off = out.getPosition(); java.util.List<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue> all = new java.util.ArrayList<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue>(); for (int i = 0; i < (dexes.length); i++) { all.addAll(readUnsortedValues(dexes[i], indexMaps[i])); } java.util.Collections.sort(all); int outCount = 0; for (int i = 0; i < (all.size());) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e1 = all.get((i++)); updateIndex(e1.offset, e1.indexMap, e1.index, (outCount - 1)); while ((i < (all.size())) && ((e1.compareTo(all.get(i))) == 0)) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e2 = all.get((i++)); updateIndex(e2.offset, e2.indexMap, e2.index, (outCount - 1)); } write(e1.value); outCount++; } getSection(contentsOut).size = outCount; }",9a32939c21d0191e4c43acf8ae131dc2dd6b8dd2,mergeUnsorted(),11470,298,292
179694,tools_ahat_src_ObjectsHandler.java,0.0,"@java.lang.Override public void handle(com.android.ahat.Doc doc, com.android.ahat.Query query) throws java.io.IOException { int stackId = query.getInt(""stack"", 0); int depth = query.getInt(""depth"", 0); java.lang.String className = query.get(""class"", null); java.lang.String heapName = query.get(""heap"", null); com.android.ahat.Site site = mSnapshot.getSite(stackId, depth); java.util.List<com.android.tools.perflib.heap.Instance> insts = new java.util.ArrayList<com.android.tools.perflib.heap.Instance>(); for (com.android.tools.perflib.heap.Instance inst : site.getObjects()) { if (((heapName == null) || (inst.getHeap().getName().equals(heapName))) && ((className == null) || (com.android.ahat.AhatSnapshot.getClassName(inst.getClassObj()).equals(className)))) { insts.add(inst); } } java.util.Collections.sort(insts, com.android.ahat.Sort.defaultInstanceCompare(mSnapshot)); doc.title(""Objects""); doc.table(new com.android.ahat.Column(""Size"", Column.Align.RIGHT), new com.android.ahat.Column(""Heap""), new com.android.ahat.Column(""Object"")); for (com.android.tools.perflib.heap.Instance inst : insts) { doc.row(com.android.ahat.DocString.format(""%,d"", inst.getSize()), com.android.ahat.DocString.text(inst.getHeap().getName()), com.android.ahat.Value.render(inst)); } doc.end(); }",aaae9ec03f46c09e34dc58e3409770927790c663,"@java.lang.Override public void handle(com.android.ahat.Doc doc, com.android.ahat.Query query) throws java.io.IOException { int stackId = query.getInt(""stack"", 0); int depth = query.getInt(""depth"", 0); java.lang.String className = query.get(""class"", null); java.lang.String heapName = query.get(""heap"", null); com.android.ahat.Site site = mSnapshot.getSite(stackId, depth); java.util.List<com.android.tools.perflib.heap.Instance> insts = new java.util.ArrayList<com.android.tools.perflib.heap.Instance>(); for (com.android.tools.perflib.heap.Instance inst : site.getObjects()) { if (((heapName == null) || (inst.getHeap().getName().equals(heapName))) && ((className == null) || (com.android.ahat.AhatSnapshot.getClassName(inst.getClassObj()).equals(className)))) { insts.add(inst); } } java.util.Collections.sort(insts, com.android.ahat.Sort.defaultInstanceCompare(mSnapshot)); doc.title(""Objects""); doc.table(new com.android.ahat.Column(""Size"", Column.Align.RIGHT), new com.android.ahat.Column(""Heap""), new com.android.ahat.Column(""Object"")); com.android.ahat.LimitSelector selector = new com.android.ahat.LimitSelector(query, com.android.ahat.ObjectsHandler.OBJECTS_ID, insts.size()); int limit = selector.getSelectedLimit(); java.util.Iterator<com.android.tools.perflib.heap.Instance> iter = insts.iterator(); for (int i = 0; (i < limit) && (iter.hasNext()); i++) { com.android.tools.perflib.heap.Instance inst = iter.next(); doc.row(com.android.ahat.DocString.format(""%,d"", inst.getSize()), com.android.ahat.DocString.text(inst.getHeap().getName()), com.android.ahat.Value.render(inst)); } doc.end(); selector.render(doc); }",fa62afcf1617230d5817571b24e6b226c774fb62,"handle(com.android.ahat.Doc,com.android.ahat.Query)","handle(com.android.ahat.Doc,com.android.ahat.Query)",4,0,"@java.lang.Override public void handle(com.android.ahat.Doc doc, com.android.ahat.Query query) throws java.io.IOException { int stackId = query.getInt(""stack"", 0); int depth = query.getInt(""depth"", 0); java.lang.String className = query.get(""class"", null); java.lang.String heapName = query.get(""heap"", null); com.android.ahat.Site site = mSnapshot.getSite(stackId, depth); java.util.List<com.android.tools.perflib.heap.Instance> insts = new java.util.ArrayList<com.android.tools.perflib.heap.Instance>(); for (com.android.tools.perflib.heap.Instance inst : site.getObjects()) { if (((heapName == null) || (inst.getHeap().getName().equals(heapName))) && ((className == null) || (com.android.ahat.AhatSnapshot.getClassName(inst.getClassObj()).equals(className)))) { insts.add(inst); } } java.util.Collections.sort(insts, com.android.ahat.Sort.defaultInstanceCompare(mSnapshot)); doc.title(""Objects""); doc.table(new com.android.ahat.Column(""Size"", Column.Align.RIGHT), new com.android.ahat.Column(""Heap""), new com.android.ahat.Column(""Object"")); com.android.ahat.SubsetSelector<com.android.tools.perflib.heap.Instance> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectsHandler.OBJECTS_ID, insts); for (com.android.tools.perflib.heap.Instance inst : selector.selected()) { doc.row(com.android.ahat.DocString.format(""%,d"", inst.getSize()), com.android.ahat.DocString.text(inst.getHeap().getName()), com.android.ahat.Value.render(inst)); } doc.end(); selector.render(doc); }",e4cb6d5c4f5db95dde6d86151d707657abc0a686,"handle(com.android.ahat.Doc,com.android.ahat.Query)",263291,502,464
564862,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerConfigChangeTests.java,1.0,"private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { final java.lang.String logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }",e198b25f0b86b453dc0fa11b9a11378cb64887dc,"private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { java.lang.String logSeparator = clearLogcat(); launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(activityName, logSeparator); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }",c15ace0b1dbfb497b10b83927786057cc488e854,"testChangeFontScale(java.lang.String,boolean)","testChangeFontScale(java.lang.String,boolean)",4,1,"private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { setFontScale(1.0F); java.lang.String logSeparator = clearLogcat(); launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getActivityDensityDpi(activityName, logSeparator); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }",7d62dd4b0829f82b040816f6d44a8d22279b6a8b,"testChangeFontScale(java.lang.String,boolean)",421799,266,249
113971,build-system_gradle_src_test_groovy_com_android_build_gradle_internal_test_fixture_GradleTestProject.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.build.gradle.internal.test.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { projectDir = new java.io.File(com.android.build.gradle.internal.test.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); return this; }",20eb4afb5c6854e06afa8953366b8cf06556daeb,,fromSample(java.lang.String),5,1,"public com.android.test.common.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { projectDir = new java.io.File(com.android.test.common.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); return this; }",25e222da14487a99725f7cb8cd52eb7e04530957,fromSample(java.lang.String),464111,82,74
616426,src_com_android_bluetooth_a2dp_A2dpService.java,57.0,"public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : Remote does not have A2DP Sink UUID"")); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",c06258dfa7997ebbddbca218e0ae357d56196d37,"public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : PRIORITY_OFF"")); return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : Remote does not have A2DP Sink UUID"")); return false; } synchronized(mStateMachines) { if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : too many connected devices"")); return false; } com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",53dca68bd859ad825292a77d3c1a91cebd6e26b7,connect(android.bluetooth.BluetoothDevice),connect(android.bluetooth.BluetoothDevice),4,57,"public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""connect(): "" + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : PRIORITY_OFF"")); return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : Remote does not have A2DP Sink UUID"")); return false; } synchronized(mStateMachines) { if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : too many connected devices"")); return false; } com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Cannot connect to "" + device) + "" : no state machine"")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }",53474fedec0fabd89cbb33622c4080568013f4a0,connect(android.bluetooth.BluetoothDevice),345266,413,414
318743,luni_src_test_java_libcore_java_net_FtpURLConnectionTest.java,,,,"public void testConnectOverProxy_explicit_http_uses_direct_connection() throws java.lang.Exception { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); try { java.net.Proxy proxy = countingProxy.asProxy(); sun.net.www.protocol.ftp.FtpURLConnection connection = ((sun.net.www.protocol.ftp.FtpURLConnection) (fileUrl.openConnection(proxy))); libcore.java.net.FtpURLConnectionTest.assertContents(connection.getInputStream()); } finally { int numConnections = countingProxy.shutdownAndGetConnectionCount(); assertEquals(0, numConnections); } }",7bccd17d43fb7b4eb8faf86a23c71a5a61e45f25,,testConnectOverProxy_explicit_http_uses_direct_connection(),7,16,"public void testConnectOverProxy_explicit_http_uses_direct_connection() throws java.lang.Exception { byte[] fileContents = ""abcdef 1234567890"".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); final int numConnections; try { java.net.Proxy proxy = countingProxy.asProxy(); java.net.URLConnection connection = fileUrl.openConnection(proxy); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, connection.getInputStream()); } finally { numConnections = countingProxy.shutdownAndGetConnectionCount(); } assertEquals(0, numConnections); }",dbdb95493ecaa9f52dbd0314efb0d4737c6e8d0b,testConnectOverProxy_explicit_http_uses_direct_connection(),327404,150,187
114478,sched_src_com_android_sched_vfs_OutputZipRootVDir.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override @javax.annotation.Nonnull public java.lang.String getName() { return zipFile.getName(); },f78b961adf9fa1d5523048a76dd3667e035b6a3f,,getName(),13,4,@javax.annotation.Nonnull java.util.zip.ZipOutputStream getZipOutputStream() { return zos; },1893bc44f2de9ae7da13a46806d0bc3c5d846941,getZipOutputStream(),313134,28,23
90452,src_main_java_org_conscrypt_OpenSSLBIOSource.java,,,,@java.lang.Override public synchronized void reset() throws java.io.IOException { source.reset(); },761bd231de963f585d859443a9f7d848ef004a23,,reset(),11,7,@java.lang.Override public void reset() throws java.io.IOException { source.reset(); },7d335f3c76cf7470b78ab999e21f92ce1e3a712b,reset(),131319,23,22
606338,core_java_android_net_NetworkCapabilities.java,40.0,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((equalsNetCapabilities(that)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); },6dd59d9a440b11f0ce43c43ee9dd406da9ee34ea,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return ((((((equalsNetCapabilities(that)) && (equalsUnwantedNetCapabilities(that))) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); },6b1af60cea40e8dacaf67fab5396ec9960bbf945,equals(java.lang.Object),equals(java.lang.Object),14,64,"private static void checkValidCapability(@android.net.NetworkCapabilities.NetCapability int capability) { com.android.internal.util.Preconditions.checkArgument(android.net.NetworkCapabilities.isValidCapability(capability), ((""NetworkCapability "" + capability) + ""out of range"")); }",fe9206dbd3ae2041e1783229de924bb7024f4893,checkValidCapability(int),372216,124,60
155834,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_NdkComponentModelPlugin.java,11.0,"@org.gradle.model.Mutate public void storeNativeBinariesInAndroidBinary(org.gradle.platform.base.BinaryContainer binaries, org.gradle.platform.base.ComponentSpecContainer specs, @org.gradle.model.Path(""android.ndk"") com.android.build.gradle.managed.NdkConfig ndkConfig) { if (!(ndkConfig.getModuleName().isEmpty())) { final org.gradle.nativeplatform.NativeLibrarySpec library = specs.withType(org.gradle.nativeplatform.NativeLibrarySpec.class).get(ndkConfig.getModuleName()); binaries.withType(com.android.build.gradle.model.DefaultAndroidBinary.class, new org.gradle.api.Action<com.android.build.gradle.model.DefaultAndroidBinary>() { @java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); } }); } }",5933dcc11fe168726d19741351ad2ca6439b682f,"@org.gradle.model.Mutate public void configureNativeBinary(org.gradle.platform.base.BinaryContainer binaries, org.gradle.platform.base.ComponentSpecContainer specs, @org.gradle.model.Path(""android.ndk"") com.android.build.gradle.managed.NdkConfig ndkConfig, @org.gradle.model.Path(""buildDir"") final java.io.File buildDir, final com.android.build.gradle.internal.NdkHandler ndkHandler) { if (!(ndkConfig.getModuleName().isEmpty())) { final org.gradle.nativeplatform.NativeLibrarySpec library = specs.withType(org.gradle.nativeplatform.NativeLibrarySpec.class).get(ndkConfig.getModuleName()); binaries.withType(com.android.build.gradle.model.DefaultAndroidBinary.class, new org.gradle.api.Action<com.android.build.gradle.model.DefaultAndroidBinary>() { @java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); for (org.gradle.nativeplatform.SharedLibraryBinarySpec nativeBin : nativeBinaries) { com.android.build.gradle.ndk.internal.NdkConfiguration.configureBinary(nativeBin, buildDir, binary.getMergedNdkConfig(), ndkHandler); } } }); } }",ba2d22de20eb451985eb50a1120dcc816d167f63,"storeNativeBinariesInAndroidBinary(org.gradle.platform.base.BinaryContainer,org.gradle.platform.base.ComponentSpecContainer,com.android.build.gradle.managed.NdkConfig)","configureNativeBinary(org.gradle.platform.base.BinaryContainer,org.gradle.platform.base.ComponentSpecContainer,com.android.build.gradle.managed.NdkConfig,java.io.File,com.android.build.gradle.internal.NdkHandler)",5,13,"@org.gradle.model.Mutate public void configureNativeBinary(org.gradle.platform.base.BinaryContainer binaries, org.gradle.platform.base.ComponentSpecContainer specs, @org.gradle.model.Path(""android.ndk"") final com.android.build.gradle.managed.NdkConfig ndkConfig, @org.gradle.model.Path(""buildDir"") final java.io.File buildDir, final com.android.build.gradle.internal.NdkHandler ndkHandler) { if (!(ndkConfig.getModuleName().isEmpty())) { final org.gradle.nativeplatform.NativeLibrarySpec library = specs.withType(org.gradle.nativeplatform.NativeLibrarySpec.class).get(ndkConfig.getModuleName()); binaries.withType(com.android.build.gradle.model.DefaultAndroidBinary.class, new org.gradle.api.Action<com.android.build.gradle.model.DefaultAndroidBinary>() { @java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { binary.computeMergedNdk(ndkConfig, binary.getProductFlavors(), binary.getBuildType()); java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); for (org.gradle.nativeplatform.SharedLibraryBinarySpec nativeBin : nativeBinaries) { com.android.build.gradle.ndk.internal.NdkConfiguration.configureBinary(nativeBin, buildDir, binary.getMergedNdkConfig(), ndkHandler); } } }); } }",21f5bd7fce70c41853995a3ec38d0e21dd70dd4c,"configureNativeBinary(org.gradle.platform.base.BinaryContainer,org.gradle.platform.base.ComponentSpecContainer,com.android.build.gradle.managed.NdkConfig,java.io.File,com.android.build.gradle.internal.NdkHandler)",84146,359,381
346952,service_java_com_android_server_wifi_SupplicantStaIfaceHal.java,12.0,"public boolean startWpsRegistrar(java.lang.String bssidStr, java.lang.String pin) { return startWpsRegistrar(com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssidStr), pin); }",2644343f14c4ed06942f592c7234b84cb8f53d25,"public boolean startWpsRegistrar(java.lang.String bssidStr, java.lang.String pin) { if ((!(android.text.TextUtils.isEmpty(bssidStr))) || (!(android.text.TextUtils.isEmpty(pin)))) return false; return startWpsRegistrar(com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssidStr), pin); }",5e529308c18ed026492881cfe304bea184f9f6a1,"startWpsRegistrar(java.lang.String,java.lang.String)","startWpsRegistrar(java.lang.String,java.lang.String)",3,12,"public boolean startWpsRegistrar(java.lang.String bssidStr, java.lang.String pin) { if ((android.text.TextUtils.isEmpty(bssidStr)) || (android.text.TextUtils.isEmpty(pin))) return false; return startWpsRegistrar(com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssidStr), pin); }",c84b4d71b50a28a8bbfbca12c553e14576d64432,"startWpsRegistrar(java.lang.String,java.lang.String)",286422,88,87
394652,packages_CaptivePortalLogin_src_com_android_captiveportallogin_CaptivePortalLoginActivity.java,12.0,"private void testForCaptivePortal() { new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(mUrl))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); if ((mUserAgent) != null) { urlConnection.setRequestProperty(""User-Agent"", mUserAgent); } java.lang.String requestHeader = urlConnection.getRequestProperties().toString(); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, (((((((""probe at "" + (mUrl)) + "" ret="") + httpResponseCode) + "" request="") + requestHeader) + "" headers="") + (urlConnection.getHeaderFields()))); } } catch (java.io.IOException e) { } finally { if (urlConnection != null) urlConnection.disconnect(); } if (httpResponseCode == 204) { done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result.DISMISSED); } } }).start(); }",9717595e349534e03697902b70093f2fcd6bee15,"private void testForCaptivePortal() { if (com.android.captiveportallogin.CaptivePortalLoginActivity.NO_AUTOCLOSE) { return; } new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(mUrl))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); if ((mUserAgent) != null) { urlConnection.setRequestProperty(""User-Agent"", mUserAgent); } java.lang.String requestHeader = urlConnection.getRequestProperties().toString(); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, (((((((""probe at "" + (mUrl)) + "" ret="") + httpResponseCode) + "" request="") + requestHeader) + "" headers="") + (urlConnection.getHeaderFields()))); } } catch (java.io.IOException e) { } finally { if (urlConnection != null) urlConnection.disconnect(); } if (httpResponseCode == 204) { done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result.DISMISSED); } } }).start(); }",40393367f673e99312ca4782f7a40349027da0c5,testForCaptivePortal(),testForCaptivePortal(),3,12,"private void testForCaptivePortal() { new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(mUrl))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); if ((mUserAgent) != null) { urlConnection.setRequestProperty(""User-Agent"", mUserAgent); } java.lang.String requestHeader = urlConnection.getRequestProperties().toString(); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, (((((((""probe at "" + (mUrl)) + "" ret="") + httpResponseCode) + "" request="") + requestHeader) + "" headers="") + (urlConnection.getHeaderFields()))); } } catch (java.io.IOException e) { } finally { if (urlConnection != null) urlConnection.disconnect(); } if (httpResponseCode == 204) { done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result.DISMISSED); } } }).start(); }",9717595e349534e03697902b70093f2fcd6bee15,testForCaptivePortal(),331652,377,352
156541,tests_tests_renderscript_src_android_renderscript_cts_ImageProcessingTest.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"int blend() { float r = ((dstR) * (srcA)) + ((1 - (dstA)) * (srcR)); float g = ((dstG) * (srcA)) + ((1 - (dstA)) * (srcG)); float b = ((dstB) * (srcA)) + ((1 - (dstA)) * (srcB)); float a = srcA; return pack(a, r, g, b); }",17616f9d0e17a35bf6d106345d6e5ae5250355b9,,blend(),7,15,"@java.lang.Override int blend() { float r = ((dstR) * (srcA)) + ((1 - (dstA)) * (srcR)); float g = ((dstG) * (srcA)) + ((1 - (dstA)) * (srcG)); float b = ((dstB) * (srcA)) + ((1 - (dstA)) * (srcB)); float a = srcA; return pack(a, r, g, b); }",ce614947dd2078991d4fbcc726fd7d421b6debca,blend(),368422,105,111
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,14.0,"@org.junit.Test public void neg_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEG_FLOAT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",f8de91841582b5bc1cfa24271d7420d4546bed21,"@org.junit.Test public void neg_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEG_FLOAT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",5d808ae84ec5ef3b3165d57e5d198f75d47a1505,neg_float(),neg_float(),4,14,"@org.junit.Test public void neg_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEG_FLOAT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",36f068a53608dad2a517acf73f03b6d189f438c2,neg_float(),418861,111,109
289103,sched_src_com_android_sched_vfs_CachedDirectFS.java,40.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean areStreamsClosed() { boolean streamsClosed = true; synchronized(openedStreams) { for (com.android.sched.util.stream.QueryableStream streams : openedStreams) { streamsClosed &= streams.isClosed(); } } return streamsClosed; },b70148a9f9eeea20c186fa08a18f95f6bd96eaad,,areStreamsClosed(),3,12,"private boolean areStreamsClosed() { boolean allClosed = true; synchronized(openedStreams) { for (com.android.sched.vfs.CachedDirectFS.TrackedStream stream : openedStreams) { if (!(stream.isClosed())) { com.android.sched.vfs.CachedDirectFS.logger.log(java.util.logging.Level.SEVERE, ""Stream from {0} hasn't been closed"", stream.getLocation().getDescription()); allClosed &= false; } } } return allClosed; }",1ad72491cf6f97f052a7c971f23dd85ca0e522c4,areStreamsClosed(),337740,56,106
490589,telephony_java_android_telephony_CellIdentityLte.java,0.0,@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityLte)) { return false; } android.telephony.CellIdentityLte o = ((android.telephony.CellIdentityLte) (other)); return ((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mCi) == (o.mCi))) && ((mPci) == (o.mPci))) && ((mTac) == (o.mTac))) && ((mEarfcn) == (o.mEarfcn)); },770b8160aaee2cda017e8edd926a6ed7ec283bac,@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityLte)) { return false; } android.telephony.CellIdentityLte o = ((android.telephony.CellIdentityLte) (other)); return ((((((((mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mCi) == (o.mCi))) && ((mPci) == (o.mPci))) && ((mTac) == (o.mTac))) && ((mEarfcn) == (o.mEarfcn))) && (mAlphaLong.equals(o.mAlphaLong))) && (mAlphaShort.equals(o.mAlphaShort)); },96e25c5568d1aa111111573d3f2f1af6b80cd643,equals(java.lang.Object),equals(java.lang.Object),25,0,"@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityLte)) { return false; } android.telephony.CellIdentityLte o = ((android.telephony.CellIdentityLte) (other)); return ((((((((mCi) == (o.mCi)) && ((mPci) == (o.mPci))) && ((mTac) == (o.mTac))) && ((mEarfcn) == (o.mEarfcn))) && (android.text.TextUtils.equals(mMccStr, o.mMccStr))) && (android.text.TextUtils.equals(mMncStr, o.mMncStr))) && (android.text.TextUtils.equals(mAlphaLong, o.mAlphaLong))) && (android.text.TextUtils.equals(mAlphaShort, o.mAlphaShort)); }",30fcad8f56bc9a580065a602021db59d5fa5a47b,equals(java.lang.Object),74148,197,223
324140,services_core_java_com_android_server_NetworkManagementService.java,17.0,"private void notifyInterfaceLinkStateChanged(java.lang.String iface, boolean up) { final int length = mObservers.beginBroadcast(); try { for (int i = 0; i < length; i++) { try { mObservers.getBroadcastItem(i).interfaceLinkStateChanged(iface, up); } catch (android.os.RemoteException | java.lang.RuntimeException e) { } } } finally { mObservers.finishBroadcast(); } }",39ba57380ac85cd3cbcd2ec94e7c3f2cb17193cd,"private void notifyInterfaceLinkStateChanged(java.lang.String iface, boolean up) { invokeForAllObservers(new com.android.server.NetworkManagementService.CallbackInvocation() { @java.lang.Override public void call(android.net.INetworkManagementEventObserver o) throws android.os.RemoteException { o.interfaceLinkStateChanged(iface, up); } }); }",0640fe60023ac482e82344c420b928234b06a88a,"notifyInterfaceLinkStateChanged(java.lang.String,boolean)","notifyInterfaceLinkStateChanged(java.lang.String,boolean)",3,17,"private void notifyInterfaceLinkStateChanged(java.lang.String iface, boolean up) { invokeForAllObservers(( o) -> o.interfaceLinkStateChanged(iface, up)); }",61962b8d1d2c603bc67fb8fb95c8ce2cff823506,"notifyInterfaceLinkStateChanged(java.lang.String,boolean)",137090,80,39
18522,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_layout_BaseView.java,,,,"public java.lang.String prettyName(java.lang.String name) { if ((name != null) && ((name.length()) > 0)) { name = (java.lang.Character.toUpperCase(name.charAt(0))) + (name.substring(1).replace('_', ' ')); } return name; }",9295a9f78a73770d73ddec2ca4a7ffbebc30f523,,prettyName(java.lang.String),4,24,"public static java.lang.String prettyName(java.lang.String name) { if ((name != null) && ((name.length()) > 0)) { name = (java.lang.Character.toUpperCase(name.charAt(0))) + (name.substring(1).replace('_', ' ')); } return name; }",f4f8f46ac80dff9e57022e4f5b09913e96cfb8f0,prettyName(java.lang.String),72630,69,70
69360,support_src_test_java_libcore_javax_net_ssl_SSLDefaultConfigurationAsserts.java,,,,"public static void assertSSLSocketFactory(javax.net.ssl.SSLSocketFactory sslSocketFactory) { libcore.java.security.StandardNames.assertDefaultCipherSuites(sslSocketFactory.getDefaultCipherSuites()); libcore.java.security.StandardNames.assertSupportedCipherSuites(sslSocketFactory.getSupportedCipherSuites()); libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertContainsAll(""Unsupported default cipher suites"", sslSocketFactory.getSupportedCipherSuites(), sslSocketFactory.getDefaultCipherSuites()); javax.net.ssl.SSLSocket sslSocket; try { sslSocket = ((javax.net.ssl.SSLSocket) (sslSocketFactory.createSocket())); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLSocket(sslSocket); }",b6121892a6a5e9ef6966364ddd75a6528f21df09,,assertSSLSocketFactory(javax.net.ssl.SSLSocketFactory),3,5,"public static void assertSSLSocketFactory(javax.net.ssl.SSLSocketFactory sslSocketFactory) throws java.io.IOException { libcore.java.security.StandardNames.assertDefaultCipherSuites(sslSocketFactory.getDefaultCipherSuites()); libcore.java.security.StandardNames.assertSupportedCipherSuites(sslSocketFactory.getSupportedCipherSuites()); libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertContainsAll(""Unsupported default cipher suites"", sslSocketFactory.getSupportedCipherSuites(), sslSocketFactory.getDefaultCipherSuites()); libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLSocket(((javax.net.ssl.SSLSocket) (sslSocketFactory.createSocket()))); }",d8529681047cdab50afb9fb302f92d03c7fafebd,assertSSLSocketFactory(javax.net.ssl.SSLSocketFactory),337851,165,129
616958,core_java_com_android_internal_os_ZygoteInit.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static final java.lang.Runnable childZygoteInit(int targetSdkVersion, java.lang.String[] argv, java.lang.ClassLoader classLoader) { final com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }",e9f2c4eb95a01b83d180145424482791a34fa156,,"childZygoteInit(int,java.lang.String[],java.lang.ClassLoader)",5,3,"static final java.lang.Runnable childZygoteInit(int targetSdkVersion, java.lang.String[] argv, java.lang.ClassLoader classLoader) { com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }",d72609ba35266a5684a9d3f6ee7d552115f52306,"childZygoteInit(int,java.lang.String[],java.lang.ClassLoader)",472844,95,93
487344,src_com_android_bluetooth_avrcp_Avrcp.java,106.0,"@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ""onQueueChanged: received null queue""); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, (""onQueueChanged: NowPlaying list changed, Queue Size = "" + (queue.size()))); mHandler.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }",a24141522efe2e7f4b63d8e1f71a984e2a041a22,"@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ""onQueueChanged: received null queue""); return; } final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ""mHandler is already null""); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, (""onQueueChanged: NowPlaying list changed, Queue Size = "" + (queue.size()))); handler.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }",f530cc377df56d4ba47133d7fdc9d956b46e0665,onQueueChanged(java.util.List),onQueueChanged(java.util.List),15,105,"@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ""onQueueChanged: received null queue""); return; } final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ""onQueueChanged: mHandler is already null""); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, (""onQueueChanged: NowPlaying list changed, Queue Size = "" + (queue.size()))); handler.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }",2abe51f6eca40886c7e910231eb1c9caf94a1488,onQueueChanged(java.util.List),66917,237,240
325360,src_java_com_android_internal_telephony_sip_SipPhone.java,85.0,"@java.lang.Override public void hangup() throws com.android.internal.telephony.CallStateException { synchronized(com.android.internal.telephony.sip.SipPhone.class) { if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) log((((((""hangup: conn="" + (mPeer.getUriString())) + "": "") + (mState)) + "": on phone "") + (getPhone().getPhoneName()))); if (!(mState.isAlive())) return; try { android.net.sip.SipAudioCall sipAudioCall = mSipAudioCall; if (sipAudioCall != null) { sipAudioCall.setListener(null); sipAudioCall.endCall(); } } catch (android.net.sip.SipException e) { throw new com.android.internal.telephony.CallStateException((""hangup(): "" + e)); } finally { mAdapter.onCallEnded((((mState) == (Call.State.INCOMING)) || ((mState) == (Call.State.WAITING)) ? android.telephony.DisconnectCause.INCOMING_REJECTED : android.telephony.DisconnectCause.LOCAL)); } } }",82017636ce8caca72eff4c517c4705b154e2d069,"@java.lang.Override public void hangup() throws com.android.internal.telephony.CallStateException { synchronized(com.android.internal.telephony.sip.SipPhone.class) { if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) { if (com.android.internal.telephony.sip.SipPhone.DBG_BUILD) { log((((((""hangup: conn="" + (mPeer.getUriString())) + "": "") + (mState)) + "": on phone "") + (getPhone().getPhoneName()))); } else { log((((""hangup: "" + (mState)) + "": on phone "") + (getPhone().getPhoneName()))); } } if (!(mState.isAlive())) return; try { android.net.sip.SipAudioCall sipAudioCall = mSipAudioCall; if (sipAudioCall != null) { sipAudioCall.setListener(null); sipAudioCall.endCall(); } } catch (android.net.sip.SipException e) { throw new com.android.internal.telephony.CallStateException((""hangup(): "" + e)); } finally { mAdapter.onCallEnded((((mState) == (Call.State.INCOMING)) || ((mState) == (Call.State.WAITING)) ? android.telephony.DisconnectCause.INCOMING_REJECTED : android.telephony.DisconnectCause.LOCAL)); } } }",a50e2a364b63e7a981716d5c8f1192e12670c27b,hangup(),hangup(),3,85,"@java.lang.Override public void hangup() throws com.android.internal.telephony.CallStateException { synchronized(com.android.internal.telephony.sip.SipPhone.class) { if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) { log((((((""hangup: conn="" + (com.android.internal.telephony.sip.SipPhone.hidePii(mPeer.getUriString()))) + "": "") + (mState)) + "": on phone "") + (getPhone().getPhoneName()))); } if (!(mState.isAlive())) return; try { android.net.sip.SipAudioCall sipAudioCall = mSipAudioCall; if (sipAudioCall != null) { sipAudioCall.setListener(null); sipAudioCall.endCall(); } } catch (android.net.sip.SipException e) { throw new com.android.internal.telephony.CallStateException((""hangup(): "" + e)); } finally { mAdapter.onCallEnded((((mState) == (Call.State.INCOMING)) || ((mState) == (Call.State.WAITING)) ? android.telephony.DisconnectCause.INCOMING_REJECTED : android.telephony.DisconnectCause.LOCAL)); } } }",cf02b56ae38bc8dcd5d3eb1404cd74c41ebb477c,hangup(),138531,322,286
411019,src_com_android_bluetooth_sap_SapRilReceiver.java,11.0,public void resetSapProxy() { synchronized(mSapProxyLock) { mSapProxy = null; } },34732099774908f28112a103d66d84bdada3cea1,public void resetSapProxy() { synchronized(mSapProxyLock) { releaseSapProxy(); mSapProxy = null; } },9f126ab537e240bcb4b0586b5784bb2f1edf2f3b,resetSapProxy(),resetSapProxy(),5,21,"public void resetSapProxy() { synchronized(mSapProxyLock) { if (com.android.bluetooth.sap.SapRilReceiver.DEBUG) android.util.Log.d(com.android.bluetooth.sap.SapRilReceiver.TAG, (""resetSapProxy :"" + (mSapProxy))); try { if ((mSapProxy) != null) { mSapProxy.unlinkToDeath(mSapProxyDeathRecipient); } } catch (android.os.RemoteException | java.lang.RuntimeException e) { android.util.Log.e(com.android.bluetooth.sap.SapRilReceiver.TAG, (""resetSapProxy: exception: "" + e)); } mSapProxy = null; } }",3558e22942b1af9bcb943d79eee4cdf9a8be61de,resetSapProxy(),29779,31,174
88592,build-system_manifest-merger_src_main_java_com_android_manifmerger_PreValidator.java,5.0,"private static boolean checkKeyPresence(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { com.android.manifmerger.ManifestModel.NodeKeyResolver nodeKeyResolver = xmlElement.getType().getNodeKeyResolver(); if (((nodeKeyResolver.getKeyAttributeName()) != null) && (com.google.common.base.Strings.isNullOrEmpty(xmlElement.getKey()))) { mergingReport.addError(java.lang.String.format(""Missing '%1$s' attribute on element %2$s at %3$s"", nodeKeyResolver.getKeyAttributeName(), xmlElement.getId(), xmlElement.printPosition())); return false; } return true; }",ea0cac9069f4e264509746a1e5c68a293745ea39,"private static boolean checkKeyPresence(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { com.android.manifmerger.ManifestModel.NodeKeyResolver nodeKeyResolver = xmlElement.getType().getNodeKeyResolver(); com.google.common.collect.ImmutableList<java.lang.String> keyAttributesNames = nodeKeyResolver.getKeyAttributesNames(); if (((keyAttributesNames.size()) > 0) && (com.google.common.base.Strings.isNullOrEmpty(xmlElement.getKey()))) { java.lang.String message = ((keyAttributesNames.size()) > 1) ? java.lang.String.format(""Missing one of '%1$s' key attribute on element %2$s at %3$s"", com.google.common.base.Joiner.on(',').join(keyAttributesNames), xmlElement.getId(), xmlElement.printPosition()) : java.lang.String.format(""Missing '%1$s' key attribute on element %2$s at %3$s"", keyAttributesNames.get(0), xmlElement.getId(), xmlElement.printPosition()); mergingReport.addError(message); return false; } return true; }",edcc9ae0b7c7cdbf2b491fc36bca9e2e0ab3c59e,"checkKeyPresence(com.android.manifmerger.MergingReport$Builder,com.android.manifmerger.XmlElement)","checkKeyPresence(com.android.manifmerger.MergingReport$Builder,com.android.manifmerger.XmlElement)",5,5,"private static boolean checkKeyPresence(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { com.android.manifmerger.ManifestModel.NodeKeyResolver nodeKeyResolver = xmlElement.getType().getNodeKeyResolver(); com.google.common.collect.ImmutableList<java.lang.String> keyAttributesNames = nodeKeyResolver.getKeyAttributesNames(); if (((keyAttributesNames.size()) > 0) && (com.google.common.base.Strings.isNullOrEmpty(xmlElement.getKey()))) { java.lang.String message = ((keyAttributesNames.size()) > 1) ? java.lang.String.format(""Missing one of the key attributes '%1$s' on element %2$s at %3$s"", com.google.common.base.Joiner.on(',').join(keyAttributesNames), xmlElement.getId(), xmlElement.printPosition()) : java.lang.String.format(""Missing '%1$s' key attribute on element %2$s at %3$s"", keyAttributesNames.get(0), xmlElement.getId(), xmlElement.printPosition()); mergingReport.addError(message); return false; } return true; }",f24ba34e98a978244647213b1060ccc2a3a1929a,"checkKeyPresence(com.android.manifmerger.MergingReport$Builder,com.android.manifmerger.XmlElement)",386430,266,267
143181,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_tasks_DependencyReportTask.java,,,,public void setRenderer(com.android.build.gradle.internal.AndroidAsciiReportRenderer renderer) { this.mRenderer = renderer; },f4c399be48a0813859509bc36ccb628bcd639a84,,setRenderer(com.android.build.gradle.internal.AndroidAsciiReportRenderer),8,6,public void setRenderer(@com.android.annotations.NonNull com.android.build.gradle.internal.AndroidAsciiReportRenderer renderer) { this.renderer = renderer; },88b8163a1bc5e7fb24056bb8eb302111182f8a4c,setRenderer(com.android.build.gradle.internal.AndroidAsciiReportRenderer),512549,30,36
38215,lint_libs_lint_checks_src_com_android_tools_lint_checks_TypoDetector.java,,,,"private void visit(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node) { if ((node.getNodeType()) == (org.w3c.dom.Node.TEXT_NODE)) { java.lang.String text = node.getNodeValue(); check(context, node, text); } else { org.w3c.dom.NodeList children = node.getChildNodes(); for (int i = 0, n = children.getLength(); i < n; i++) { visit(context, children.item(i)); } } }",1ccf1b8b0b5f1a7ec09e5f7929098c4468cfb4ed,,"visit(com.android.tools.lint.detector.api.XmlContext,org.w3c.dom.Node)",3,2,"private void visit(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node) { if ((node.getNodeType()) == (org.w3c.dom.Node.TEXT_NODE)) { check(context, node, node.getTextContent()); } else { org.w3c.dom.NodeList children = node.getChildNodes(); for (int i = 0, n = children.getLength(); i < n; i++) { visit(context, children.item(i)); } } }",94d9e94b7b1ce375d18a3ab98146e7979092c5d0,"visit(com.android.tools.lint.detector.api.XmlContext,org.w3c.dom.Node)",411549,127,118
102887,jack_src_com_android_jack_shrob_shrink_StructurePrinter.java,0.0,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession t) throws java.lang.Exception { try { com.android.jack.shrob.shrink.StructurePrinter.Visitor visitor = new com.android.jack.shrob.shrink.StructurePrinter.Visitor(); visitor.accept(t.getTypesToEmit()); } finally { stream.close(); } },d5bc0d3497ec1a137243f353837d5a65f15b2249,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession t) throws java.lang.Exception { try { com.android.jack.ir.ConditionnalStructurePrinter visitor = new com.android.jack.ir.ConditionnalStructurePrinter(stream); visitor.accept(t.getTypesToEmit()); } finally { stream.close(); } },9d5022acd2b6e352ddcb4d4a6ca7b0b063e29562,run(com.android.jack.ir.ast.JSession),run(com.android.jack.ir.ast.JSession),6,0,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession t) throws java.lang.Exception { try { com.android.jack.util.StructurePrinter visitor = new com.android.jack.util.StructurePrinter(stream); visitor.accept(t.getTypesToEmit()); } finally { stream.close(); } },5e2e895fb9afc32645ef86844c9fe881ef299579,run(com.android.jack.ir.ast.JSession),103991,88,84
216245,src_com_android_bluetooth_btservice_AdapterService.java,134.0,"public boolean setPasskey(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] passkey) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setPasskey() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPasskey(device, accept, len, passkey); }",9d511bb164fb685531f73c7c70e87f2bb1559570,"public boolean setPasskey(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] passkey) { if (!(com.android.bluetooth.Utils.checkCallerAllowManagedProfiles(mService))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setPasskey() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPasskey(device, accept, len, passkey); }",0a8319f5a9bea51a511c1bf5ea0416d248a742e0,"setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])","setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])",4,133,"public boolean setPasskey(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] passkey) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setPasskey() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPasskey(device, accept, len, passkey); }",9d511bb164fb685531f73c7c70e87f2bb1559570,"setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])",248347,126,120
111075,updater_src_com_intellij_updater_Patch.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void write(java.io.OutputStream out) throws java.io.IOException { @java.lang.SuppressWarnings(""IOResourceOpenedButNotSafelyClosed"") java.io.DataOutputStream dataOut = new java.io.DataOutputStream(out); try { dataOut.writeBoolean(isBinary); dataOut.writeBoolean(isStrict); dataOut.writeUTF(myOldBuild); dataOut.writeUTF(myNewBuild); dataOut.writeInt(myActions.size()); for (com.intellij.updater.PatchAction each : myActions) { int key; java.lang.Class clazz = each.getClass(); if (clazz == (com.intellij.updater.CreateAction.class)) { key = com.intellij.updater.Patch.CREATE_ACTION_KEY; } else if (clazz == (com.intellij.updater.UpdateAction.class)) { key = com.intellij.updater.Patch.UPDATE_ACTION_KEY; } else if (clazz == (com.intellij.updater.UpdateZipAction.class)) { key = com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY; } else if (clazz == (com.intellij.updater.DeleteAction.class)) { key = com.intellij.updater.Patch.DELETE_ACTION_KEY; } else if (clazz == (com.intellij.updater.ValidateAction.class)) { key = com.intellij.updater.Patch.VALIDATE_ACTION_KEY; } else { throw new java.lang.RuntimeException((""Unknown action "" + each)); } dataOut.writeInt(key); each.write(dataOut); } } finally { dataOut.flush(); } }",c794c5c04890d8ba15d3a257f924b59357a0af22,,write(java.io.OutputStream),7,15,"public void write(java.io.OutputStream out) throws java.io.IOException { @java.lang.SuppressWarnings(""IOResourceOpenedButNotSafelyClosed"") java.io.DataOutputStream dataOut = new java.io.DataOutputStream(out); try { dataOut.writeUTF(myOldBuild); dataOut.writeUTF(myNewBuild); dataOut.writeBoolean(myIsBinary); dataOut.writeBoolean(myIsStrict); dataOut.writeInt(myActions.size()); for (com.intellij.updater.PatchAction each : myActions) { int key; java.lang.Class clazz = each.getClass(); if (clazz == (com.intellij.updater.CreateAction.class)) { key = com.intellij.updater.Patch.CREATE_ACTION_KEY; } else if (clazz == (com.intellij.updater.UpdateAction.class)) { key = com.intellij.updater.Patch.UPDATE_ACTION_KEY; } else if (clazz == (com.intellij.updater.UpdateZipAction.class)) { key = com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY; } else if (clazz == (com.intellij.updater.DeleteAction.class)) { key = com.intellij.updater.Patch.DELETE_ACTION_KEY; } else if (clazz == (com.intellij.updater.ValidateAction.class)) { key = com.intellij.updater.Patch.VALIDATE_ACTION_KEY; } else { throw new java.lang.RuntimeException((""Unknown action "" + each)); } dataOut.writeInt(key); each.write(dataOut); } } finally { dataOut.flush(); } }",74d3f75327d7628c66400044b46c798ae0bdcc54,write(java.io.OutputStream),121074,360,362
82651,src_com_google_gct_idea_appengine_wizard_NewAppEngineModuleAction.java,4.0,"@java.lang.Override public void run() { java.lang.Module module = com.intellij.openapi.module.ModuleManager.getInstance(project).findModuleByName(dialog.getModuleName()); com.intellij.facet.FacetManager facetManager = com.intellij.facet.FacetManager.getInstance(module); com.intellij.facet.ModifiableFacetModel model = facetManager.createModifiableModel(); try { com.intellij.facet.Facet facet = facetManager.createFacet(com.google.gct.idea.appengine.facet.AppEngineGradleFacet.getFacetType(), AppEngineGradleFacet.NAME, null); model.addFacet(facet); } finally { model.commit(); } }",4e2b129bb57a3a853b26384ad84a715370ad4331,"@java.lang.Override public void run() { java.lang.Module module = com.intellij.openapi.module.ModuleManager.getInstance(project).findModuleByName(dialog.getModuleName()); final com.intellij.execution.RunManagerEx runManager = com.intellij.execution.RunManagerEx.getInstanceEx(project); final com.intellij.execution.RunnerAndConfigurationSettings settings = runManager.createRunConfiguration(module.getName(), com.google.gct.idea.appengine.run.AppEngineRunConfigurationType.getInstance().getFactory()); final com.google.gct.idea.appengine.run.AppEngineRunConfiguration configuration = ((com.google.gct.idea.appengine.run.AppEngineRunConfiguration) (settings.getConfiguration())); configuration.setModule(module); configuration.setWarPath(new java.io.File(moduleRoot, ""build/exploded-app"").getAbsolutePath()); configuration.setSdkPath(new java.io.File(java.lang.System.getProperty(""user.home""), ""/.gradle/appengine-sdk/appengine-java-sdk-1.8.7"").getAbsolutePath()); configuration.setServerPort(""8080""); runManager.addConfiguration(settings, false); com.intellij.facet.FacetManager facetManager = com.intellij.facet.FacetManager.getInstance(module); com.intellij.facet.ModifiableFacetModel model = facetManager.createModifiableModel(); }",e8346d5eef62cac178bbc2dd1341101e51d52e78,run(),run(),3,4,"@java.lang.Override public void run() { java.lang.Module module = com.intellij.openapi.module.ModuleManager.getInstance(project).findModuleByName(dialog.getModuleName()); final com.intellij.execution.RunManagerEx runManager = com.intellij.execution.RunManagerEx.getInstanceEx(project); final com.intellij.execution.RunnerAndConfigurationSettings settings = runManager.createRunConfiguration(module.getName(), com.google.gct.idea.appengine.run.AppEngineRunConfigurationType.getInstance().getFactory()); final com.google.gct.idea.appengine.run.AppEngineRunConfiguration configuration = ((com.google.gct.idea.appengine.run.AppEngineRunConfiguration) (settings.getConfiguration())); configuration.setModule(module); configuration.setWarPath(new java.io.File(moduleRoot, ""build/exploded-app"").getAbsolutePath()); configuration.setSdkPath(new java.io.File(java.lang.System.getProperty(""user.home""), ""/.gradle/appengine-sdk/appengine-java-sdk-1.8.9"").getAbsolutePath()); configuration.setServerPort(""8080""); runManager.addConfiguration(settings, false); }",d87527e12e92cf8eb61f9da182a5cd74285d1270,run(),355627,299,257
79501,packages_SystemUI_src_com_android_systemui_statusbar_phone_NavigationBarView.java,19.0,"public void reorient() { final int rot = mDisplay.getRotation(); for (int i = 0; i < 4; i++) { mRotatedViews[i].setVisibility(View.GONE); } mCurrentView = mRotatedViews[rot]; mCurrentView.setVisibility(View.VISIBLE); mDeadZone = ((com.android.systemui.statusbar.policy.DeadZone) (mCurrentView.findViewById(R.id.deadzone))); mBarTransitions.init(mVertical); setDisabledFlags(mDisabledFlags, true); setMenuVisibility(mShowMenu, true); if (com.android.systemui.statusbar.phone.NavigationBarView.DEBUG) { android.util.Log.d(com.android.systemui.statusbar.phone.NavigationBarView.TAG, (""reorient(): rot="" + (mDisplay.getRotation()))); } setNavigationIconHints(mNavigationIconHints, true); }",0bb45f2df3d9500a2402f2b4deb38cdb38cd3aff,"public void reorient() { final int rot = mDisplay.getRotation(); for (int i = 0; i < 4; i++) { mRotatedViews[i].setVisibility(View.GONE); } mCurrentView = mRotatedViews[rot]; mCurrentView.setVisibility(View.VISIBLE); mDeadZone = ((com.android.systemui.statusbar.policy.DeadZone) (mCurrentView.findViewById(R.id.deadzone))); mBarTransitions.init(mVertical); setDisabledFlags(mDisabledFlags, true); setMenuVisibility(mShowMenu, true); if (com.android.systemui.statusbar.phone.NavigationBarView.DEBUG) { android.util.Log.d(com.android.systemui.statusbar.phone.NavigationBarView.TAG, (""reorient(): rot="" + (mDisplay.getRotation()))); } if ((mDelegateHelper) != null) { mDelegateHelper.setSwapXY(((mContext.getResources().getConfiguration().orientation) == (android.content.res.Configuration.ORIENTATION_LANDSCAPE))); } setNavigationIconHints(mNavigationIconHints, true); }",f5bfbf34b33a288b4880abef54e71a9192af75a1,reorient(),reorient(),2,19,"public void reorient() { final int rot = mDisplay.getRotation(); for (int i = 0; i < 4; i++) { mRotatedViews[i].setVisibility(View.GONE); } mCurrentView = mRotatedViews[rot]; mCurrentView.setVisibility(View.VISIBLE); mDeadZone = ((com.android.systemui.statusbar.policy.DeadZone) (mCurrentView.findViewById(R.id.deadzone))); mBarTransitions.init(mVertical); setDisabledFlags(mDisabledFlags, true); setMenuVisibility(mShowMenu, true); if (com.android.systemui.statusbar.phone.NavigationBarView.DEBUG) { android.util.Log.d(com.android.systemui.statusbar.phone.NavigationBarView.TAG, (""reorient(): rot="" + (mDisplay.getRotation()))); } if ((mDelegateHelper) != null) { mDelegateHelper.setSwapXY((!(mVertical))); } setNavigationIconHints(mNavigationIconHints, true); }",826f7d05f1020edb1a9a07198a9b80ff6993915f,reorient(),211211,253,233
184371,core_java_android_security_net_config_DirectoryCertificateSource.java,,,,"private java.security.cert.X509Certificate findCert(javax.security.auth.x500.X500Principal subj, android.security.net.config.DirectoryCertificateSource.CertSelector selector) { java.lang.String hash = getHash(subj); for (int index = 0; true; index++) { java.lang.String fileName = (hash + ""."") + index; if (isCaRemoved(fileName)) { continue; } if (!(new java.io.File(mCaDir, fileName).exists())) { break; } java.security.cert.X509Certificate cert = readCertificate(fileName); if (selector.match(cert)) { return cert; } } return null; }",3d4816813a0539f870689a4027c67c0b62a08ee5,,"findCert(javax.security.auth.x500.X500Principal,android.security.net.config.DirectoryCertificateSource$CertSelector)",4,5,"private java.security.cert.X509Certificate findCert(javax.security.auth.x500.X500Principal subj, android.security.net.config.DirectoryCertificateSource.CertSelector selector) { java.lang.String hash = getHash(subj); for (int index = 0; index >= 0; index++) { java.lang.String fileName = (hash + ""."") + index; if (!(new java.io.File(mDir, fileName).exists())) { break; } if (isCertMarkedAsRemoved(fileName)) { continue; } java.security.cert.X509Certificate cert = readCertificate(fileName); if (!(subj.equals(cert.getSubjectX500Principal()))) { continue; } if (selector.match(cert)) { return cert; } } return null; }",996302af9259f5be392f9ab13afce5ff09010814,"findCert(javax.security.auth.x500.X500Principal,android.security.net.config.DirectoryCertificateSource$CertSelector)",339600,153,171
293986,telecomm_java_android_telecom_ConnectionService.java,71.0,"@java.lang.Override public void answer(java.lang.String callId) { mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ANSWER, callId).sendToTarget(); }",caa642d34b7847bdf729bb7abffdf077564094fe,"@java.lang.Override public void answer(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_ANSWER); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ANSWER, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",816efca4092d6b366d66ffa164dd805c7e6fb862,answer(java.lang.String),"answer(java.lang.String,android.telecom.Logging.Session$Info)",8,60,"@java.lang.Override public void answer(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_ANSWER); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ANSWER, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",7e371c27d2b6768a71670036f7b753a02aea18df,"answer(java.lang.String,android.telecom.Logging.Session$Info)",425165,152,151
577277,services_core_java_com_android_server_connectivity_Vpn.java,21.0,@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mVpnUsers = null; mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } },455ae9eef4660266565ce9f91993eacd5e04b592,@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mNetworkCapabilities.setAllowedUids(null); mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } },12bb2ebbfd5bcf8c10752be32f36a1d172d397a2,interfaceRemoved(java.lang.String),interfaceRemoved(java.lang.String),13,20,@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mNetworkCapabilities.setUids(null); mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } },65b10e2f94342ea518b2f9261a2d81855271dbd1,interfaceRemoved(java.lang.String),122974,139,138
48571,builder_src_main_java_com_android_builder_BuildType.java,4.0,"@java.lang.Override public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""debugJniBuild"", mDebugJniBuild).add(""debugSigned"", mDebugSigned).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).omitNullValues().toString(); }",f9fc361e21944d1404c3f770990a332b1813e676,"@java.lang.Override public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""debugJniBuild"", mDebugJniBuild).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).add(""signingKeystore"", mSigningKeystore).toString(); }",5624c6a26301b580e1775722902fb97a7267518c,toString(),toString(),4,4,"@java.lang.Override public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""debugJniBuild"", mDebugJniBuild).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).add(""keystore"", mKeystore).toString(); }",9029e3cb85ccdfd927b6f2917fdc046871803d95,toString(),462923,117,114
534821,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,,,,"@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_StackAudioDisconnecting() { setUpAudioOnState(); reset(mHeadsetStateMachine); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_DISCONNECTING, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioDisconnecting.class)); verify(mHeadsetService, never()).sendBroadcastAsUser(any(android.content.Intent.class), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }",9e549abbbf2c6648e4afc1a68026a59e020db4a1,,testStateTransition_AudioOnToAudioDisconnecting_StackAudioDisconnecting(),28,39,"@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_StackAudioDisconnecting() { int numBroadcastsSent = setUpAudioOnState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_DISCONNECTING, mTestDevice)); verify(mHeadsetService, after(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS).times(numBroadcastsSent)).sendBroadcastAsUser(any(android.content.Intent.class), eq(UserHandle.ALL), eq(HeadsetService.BLUETOOTH_PERM)); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.AudioDisconnecting.class)); }",62aded0ddc9571465e898e035c2bf4bee9ceea8c,testStateTransition_AudioOnToAudioDisconnecting_StackAudioDisconnecting(),71060,190,211
319492,tests_src_com_android_networkrecommendation_WifiWakeupControllerTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void wifiNotEnabled_wifiApStateIsNotDisabled() { when(mWifiManager.getConfiguredNetworks()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION, com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION_EXTERNAL)); when(mWifiManager.getScanResults()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)); mWifiWakeupController.mContentObserver.onChange(true); com.android.networkrecommendation.Util.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_DISABLED); com.android.networkrecommendation.Util.sendWifiApStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_AP_STATE_ENABLED); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); verifyZeroInteractions(mWifiWakeupNetworkSelector); verify(mWifiManager, never()).setWifiEnabled(true); }",f2e5ed073ccc21138edeae38fafa70c87f0531cc,,wifiNotEnabled_wifiApStateIsNotDisabled(),5,2,"@org.junit.Test public void wifiNotEnabled_wifiApStateIsNotDisabled() { when(mWifiManager.getConfiguredNetworks()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION, com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION_EXTERNAL)); when(mWifiManager.getScanResults()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)); mWifiWakeupController.mContentObserver.onChange(true); com.android.networkrecommendation.TestUtil.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_DISABLED); com.android.networkrecommendation.TestUtil.sendWifiApStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_AP_STATE_ENABLED); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verifyZeroInteractions(mWifiWakeupNetworkSelector); verify(mWifiManager, never()).setWifiEnabled(true); }",23394d303262d78f420dc81b200923c216ea66c9,wifiNotEnabled_wifiApStateIsNotDisabled(),19762,291,295
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,13.0,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",f998488f07502908a4e912a3a1a948da76fa5d4c,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",82c7116393a3f69053694653bc62d215f8e2dc95,testAesCbcHmacSha1Udp4(),testAesCbcHmacSha1Udp4(),9,15,"public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",bb24bd85ae8f98a540e084d3bfc83fb348f96aa5,testAesCbcHmacSha1Udp4(),1862,213,213
133561,build-system_builder_src_test_java_com_android_builder_png_NinePatchAaptProcessorTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected void setPngCruncher(@com.android.annotations.NonNull com.android.ide.common.internal.PngCruncher pngCruncher) { this.mPngCruncher = pngCruncher; },62355283536d1c3d7624fc34ba24b134324d6059,,setPngCruncher(com.android.ide.common.internal.PngCruncher),5,3,"@org.junit.Test public void run() throws com.android.ide.common.internal.PngException, java.io.IOException { java.io.File outFile = com.android.builder.png.NinePatchAaptProcessorTestUtils.crunchFile(com.android.builder.png.NinePatchAaptProcessorTest.sCruncherKey.get(), mFile, com.android.builder.png.NinePatchAaptProcessorTest.sCruncher); com.android.builder.png.NinePatchAaptProcessorTest.mSourceAndCrunchedFiles.put(mFile, outFile); }",61c87a8a57b202d47ac6cfe2e0cddb284c66fcb3,run(),231601,54,140
131660,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull private com.android.jack.test.toolchain.JackBasedToolchain getToolchain(boolean isApiTest) { if (isApiTest) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JackCliToolchain.class); return com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class, excludeList); } else { return com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); } }",a58791b5178c64a8318653f689918989adc42729,,getToolchain(boolean),11,18,"@javax.annotation.Nonnull private com.android.jack.test.toolchain.JackBasedToolchain getToolchain(boolean isApiTest) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.LegacyJillToolchain.class); if (isApiTest) { excludeList.add(com.android.jack.test.toolchain.JackCliToolchain.class); } return com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class, excludeList); }",64ae7785f586b15f57e604bf54969f62538fce15,getToolchain(boolean),181561,201,186
154157,jack-tests_src_com_android_jack_test_toolchain_JackBasedToolchain.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@javax.annotation.Nonnull com.android.jack.test.toolchain.JackBasedToolchain addMetaDir(@javax.annotation.Nonnull java.io.File metaDir) { metaImport.add(metaDir); return this; },9a52d7b489144dff52bdc6950ae436ed9818f3f6,,addMetaDir(java.io.File),4,6,@javax.annotation.Nonnull public com.android.jack.test.toolchain.JackBasedToolchain addMetaDir(@javax.annotation.Nonnull java.io.File metaDir) { metaImport.add(metaDir); return this; },2c38ea28096dd33751e1aed783878faf18e82b2a,addMetaDir(java.io.File),521590,50,51
16740,tests_core_runner_src_android_test_InstrumentationCtsTestRunner.java,6.0,@java.lang.Override java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> getBuilderRequirements() { java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> builderRequirements = super.getBuilderRequirements(); com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> brokenTestPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.BrokenTest.class)); builderRequirements.add(brokenTestPredicate); if (!(singleTest)) { com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> sideEffectPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.SideEffect.class)); builderRequirements.add(sideEffectPredicate); } return builderRequirements; },f1a808d8bd39dc236dd10b327ed4cf526d8ff6ff,"@java.lang.Override java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> getBuilderRequirements() { java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> builderRequirements = super.getBuilderRequirements(); com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> brokenTestPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.BrokenTest.class)); builderRequirements.add(brokenTestPredicate); com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> featurePredicate = new com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>() { public boolean apply(android.test.suitebuilder.TestMethod t) { java.util.Set<java.lang.String> requiredFeatures = new java.util.HashSet<java.lang.String>(); if ((t.getAnnotation(android.annotation.cts.RequiredFeature.class)) != null) { android.annotation.cts.RequiredFeature annotation = t.getAnnotation(android.annotation.cts.RequiredFeature.class); java.util.Collections.addAll(requiredFeatures, annotation.value()); } android.util.Log.e(android.test.InstrumentationCtsTestRunner.TAG, (((""Test method: "" + (t.getName())) + "" Required features: "") + requiredFeatures)); return true; } }; builderRequirements.add(featurePredicate); if (!(singleTest)) { com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> sideEffectPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.SideEffect.class)); builderRequirements.add(sideEffectPredicate); } return builderRequirements; }",4ad9fda9dfa7297fa549b5304c80e6e2e8d59cf6,getBuilderRequirements(),getBuilderRequirements(),10,3,@java.lang.Override java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> getBuilderRequirements() { java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> builderRequirements = super.getBuilderRequirements(); com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> brokenTestPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.BrokenTest.class)); builderRequirements.add(brokenTestPredicate); builderRequirements.add(getProfilePredicate(mProfile)); builderRequirements.add(getFeaturePredicate()); if (!(mSingleTest)) { com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> sideEffectPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.SideEffect.class)); builderRequirements.add(sideEffectPredicate); } return builderRequirements; },b0c452e4ff5d9c265f8984c765de1a7f2a80d1f1,getBuilderRequirements(),12315,425,233
129911,core_java_android_text_format_DateUtils.java,7.0,"public static java.lang.CharSequence getRelativeDateTimeString(android.content.Context c, long time, long minResolution, long transitionResolution, int flags) { android.content.res.Resources r = android.content.res.Resources.getSystem(); long now = java.lang.System.currentTimeMillis(); long duration = java.lang.Math.abs((now - time)); if (transitionResolution > (android.text.format.DateUtils.WEEK_IN_MILLIS)) { transitionResolution = android.text.format.DateUtils.WEEK_IN_MILLIS; } else if (transitionResolution < (android.text.format.DateUtils.DAY_IN_MILLIS)) { transitionResolution = android.text.format.DateUtils.DAY_IN_MILLIS; } java.lang.CharSequence timeClause = android.text.format.DateUtils.formatDateRange(c, time, time, android.text.format.DateUtils.FORMAT_SHOW_TIME); java.lang.String result; if (duration < transitionResolution) { java.lang.CharSequence relativeClause = android.text.format.DateUtils.getRelativeTimeSpanString(time, now, minResolution, flags); result = r.getString(com.android.internal.R.string.relative_time, relativeClause, timeClause); } else { java.lang.CharSequence dateClause = android.text.format.DateUtils.getRelativeTimeSpanString(c, time, false); result = r.getString(com.android.internal.R.string.date_time, dateClause, timeClause); } return result; }",3baf55ffe544819b8a9d0101c6f5f9619984a7f1,"public static java.lang.CharSequence getRelativeDateTimeString(android.content.Context c, long time, long minResolution, long transitionResolution, int flags) { if ((flags & (((android.text.format.DateUtils.FORMAT_SHOW_TIME) | (android.text.format.DateUtils.FORMAT_12HOUR)) | (android.text.format.DateUtils.FORMAT_24HOUR))) == (android.text.format.DateUtils.FORMAT_SHOW_TIME)) { flags |= (android.text.format.DateFormat.is24HourFormat(c)) ? android.text.format.DateUtils.FORMAT_24HOUR : android.text.format.DateUtils.FORMAT_12HOUR; } return libcore.icu.RelativeDateTimeFormatter.getRelativeDateTimeString(time, minResolution, transitionResolution, flags); }",3448f081e43ee47a9e6e81ce12ba323a22199d8b,"getRelativeDateTimeString(android.content.Context,long,long,long,int)","getRelativeDateTimeString(android.content.Context,long,long,long,int)",4,7,"public static java.lang.CharSequence getRelativeDateTimeString(android.content.Context c, long time, long minResolution, long transitionResolution, int flags) { if ((flags & (((android.text.format.DateUtils.FORMAT_SHOW_TIME) | (android.text.format.DateUtils.FORMAT_12HOUR)) | (android.text.format.DateUtils.FORMAT_24HOUR))) == (android.text.format.DateUtils.FORMAT_SHOW_TIME)) { flags |= (android.text.format.DateFormat.is24HourFormat(c)) ? android.text.format.DateUtils.FORMAT_24HOUR : android.text.format.DateUtils.FORMAT_12HOUR; } return libcore.icu.RelativeDateTimeFormatter.getRelativeDateTimeString(java.util.Locale.getDefault(), java.util.TimeZone.getDefault(), time, java.lang.System.currentTimeMillis(), minResolution, transitionResolution, flags); }",57470f09cb8308624f0bc8e50cc081deb9be0c8c,"getRelativeDateTimeString(android.content.Context,long,long,long,int)",324170,179,206
124160,sched_src_com_android_sched_vfs_MessageDigestFS.java,,,,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull com.android.sched.vfs.VPath path) { return null; }",4d1e98db6e00291ada160a72268647c5ea3883c6,,"getVFileLocation(com.android.sched.vfs.BaseVDir,com.android.sched.vfs.VPath)",5,7,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull com.android.sched.vfs.VPath path) { return vfs.getVFileLocation(parent, path); }",daff3b0427846956c40a30f846b525aef4105cd5,"getVFileLocation(com.android.sched.vfs.BaseVDir,com.android.sched.vfs.VPath)",215248,69,79
44490,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_DeviceManagerPage.java,,,,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0) { onRefresh(true); },dfadd00279c512f2d8295a9407ee6bf940a6e7cc,,widgetSelected(org.eclipse.swt.events.SelectionEvent),5,20,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0) { onRefresh(); },c0c2439eff8eef4cff1e3193f7c35ac9d1d77140,widgetSelected(org.eclipse.swt.events.SelectionEvent),481186,29,27
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append(""[ImsServiceInfo] name=""); res.append(name); res.append("", supportedFeatures=[ ""); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append(""(""); res.append(feature.first); res.append("",""); res.append(feature.second); res.append("") ""); } res.append(""], supportsEmergency=""); res.append(supportsEmergencyMmTel); return res.toString(); }",9dd09d444f6d1be995eccaa68db59abf2f29b283,,toString(),10,3,"@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append(""[ImsServiceInfo] name=""); res.append(name); res.append("", supportedFeatures=[ ""); for (android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair feature : mSupportedFeatures) { res.append(""(""); res.append(feature.slotId); res.append("",""); res.append(feature.featureType); res.append("") ""); } res.append(""], supportsEmergency=""); res.append(supportsEmergencyMmTel); return res.toString(); }",59ce12f161cc3f59732e23aef70d3ada143e547d,toString(),155979,151,152
221522,espresso_core_src_main_java_android_support_test_espresso_matcher_ViewMatchers.java,108.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static org.hamcrest.Matcher<android.view.View> thatFirstMatches(final org.hamcrest.Matcher<android.view.View> viewMatcher) { return new org.hamcrest.TypeSafeMatcher<android.view.View>() { private boolean matched; private android.view.View matchedView; @java.lang.Override protected boolean matchesSafely(android.view.View view) { if (matched) return (matchedView) == view; matched = viewMatcher.matches(view); if (matched) { matchedView = view; } return matched; } @java.lang.Override public void describeTo(org.hamcrest.Description description) { description.appendText(""that first matches ""); viewMatcher.describeTo(description); } }; }",7ae0b8678db7a5804b3f2ddc4c6a1e19e2539835,,thatFirstMatches(org.hamcrest.Matcher),4,84,"public static org.hamcrest.Matcher<android.view.View> thatMatchesFirst(final org.hamcrest.Matcher<android.view.View> viewMatcher) { return new org.hamcrest.TypeSafeMatcher<android.view.View>() { private boolean isFirstViewFound; private android.view.View matchedView; @java.lang.Override protected boolean matchesSafely(android.view.View view) { if (isFirstViewFound) { return (matchedView) == view; } isFirstViewFound = viewMatcher.matches(view); if (isFirstViewFound) { matchedView = view; } return isFirstViewFound; } @java.lang.Override public void describeTo(org.hamcrest.Description description) { description.appendText(""that matches first""); viewMatcher.describeTo(description); } }; }",7a0c77fd6f3516f33d1f8c6b779b2a47edd89cf0,thatMatchesFirst(org.hamcrest.Matcher),474237,161,175
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.nio.ByteBuffer write() { byte[] encodedLineage = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSigningCertificateLineage(mSigningLineage); int payloadSize = (4 + 4) + (encodedLineage.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.putInt(com.android.apksig.SigningCertificateLineage.MAGIC); result.putInt(mVersion); result.put(encodedLineage); return result; },3ae50642721ad1027d169c532d3a8ea5faefd772,,write(),7,1,"public void writeToFile(java.io.File file) throws java.io.IOException { if (file == null) { throw new java.lang.NullPointerException(""file == null""); } java.io.RandomAccessFile outputFile = new java.io.RandomAccessFile(file, ""rw""); writeToDataSink(new com.android.apksig.internal.util.RandomAccessFileDataSink(outputFile)); }",e00c32771a89c3613ec89636b02796191fba48c7,writeToFile(java.io.File),400300,131,82
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void workingMobileUsbTethering_DualStack() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }",2714d7f0eeb1f8994daf809ec30812af97a2becb,,workingMobileUsbTethering_DualStack(),10,5,"@org.junit.Test public void workingMobileUsbTethering_DualStack() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }",2d12772ebc4655062268fd48c7826963f3130074,workingMobileUsbTethering_DualStack(),251108,238,236
49623,ddmlib_src_main_java_com_android_ddmlib_HandleViewDebug.java,,,,"private static void sendJdwpPacket(com.android.ddmlib.Client client, int type, java.lang.String viewRoot, java.lang.String view, com.android.ddmlib.HandleViewDebug.ViewDumpHandler handler) throws java.io.IOException { int bufLen = 4 + ((viewRoot.length()) * 2); if (view != null) { bufLen += 4 + ((view.length()) * 2); } java.nio.ByteBuffer buf = allocBuffer(bufLen); com.android.ddmlib.JdwpPacket packet = new com.android.ddmlib.JdwpPacket(buf); java.nio.ByteBuffer chunkBuf = getChunkDataBuf(buf); chunkBuf.putInt(viewRoot.length()); putString(chunkBuf, viewRoot); if (view != null) { chunkBuf.putInt(view.length()); putString(chunkBuf, view); } finishChunkPacket(packet, type, chunkBuf.position()); if (handler != null) { client.sendAndConsume(packet, handler); } else { client.sendAndConsume(packet); } }",a536336c8391681e1812ceac7491f6d38b4e3a08,,"sendJdwpPacket(com.android.ddmlib.Client,int,java.lang.String,java.lang.String,com.android.ddmlib.HandleViewDebug$ViewDumpHandler)",6,2,"private static void sendViewOpPacket(@com.android.annotations.NonNull com.android.ddmlib.Client client, int op, @com.android.annotations.NonNull java.lang.String viewRoot, @com.android.annotations.NonNull java.lang.String view, @com.android.annotations.Nullable com.android.ddmlib.HandleViewDebug.ViewDumpHandler handler) throws java.io.IOException { int bufLen = (((4 + 4) + ((viewRoot.length()) * 2)) + 4) + ((view.length()) * 2); java.nio.ByteBuffer buf = allocBuffer(bufLen); com.android.ddmlib.JdwpPacket packet = new com.android.ddmlib.JdwpPacket(buf); java.nio.ByteBuffer chunkBuf = getChunkDataBuf(buf); chunkBuf.putInt(op); chunkBuf.putInt(viewRoot.length()); putString(chunkBuf, viewRoot); chunkBuf.putInt(view.length()); putString(chunkBuf, view); finishChunkPacket(packet, com.android.ddmlib.HandleViewDebug.CHUNK_VUOP, chunkBuf.position()); if (handler != null) { client.sendAndConsume(packet, handler); } else { client.sendAndConsume(packet); } }",bba6bc2c3db98377110cbac90c3b386362a93011,"sendViewOpPacket(com.android.ddmlib.Client,int,java.lang.String,java.lang.String,com.android.ddmlib.HandleViewDebug$ViewDumpHandler)",49851,244,283
349077,luni_src_test_java_libcore_java_util_LocaleTest.java,48.0,"public void test_getDisplayCountry_8870289() throws java.lang.Exception { assertEquals(""Hong Kong"", new java.util.Locale("""", ""HK"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Macau"", new java.util.Locale("""", ""MO"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Palestine"", new java.util.Locale("""", ""PS"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Cocos (Keeling) Islands"", new java.util.Locale("""", ""CC"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Congo (DRC)"", new java.util.Locale("""", ""CD"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Congo (Republic)"", new java.util.Locale("""", ""CG"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Falkland Islands (Islas Malvinas)"", new java.util.Locale("""", ""FK"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Macedonia (FYROM)"", new java.util.Locale("""", ""MK"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Myanmar (Burma)"", new java.util.Locale("""", ""MM"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Taiwan"", new java.util.Locale("""", ""TW"").getDisplayCountry(java.util.Locale.US)); }",fa6f41b007122f571be1fd4efe490457d23829cf,"public void test_getDisplayCountry_8870289() throws java.lang.Exception { assertEquals(""Hong Kong"", new java.util.Locale("""", ""HK"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Macau"", new java.util.Locale("""", ""MO"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Palestine"", new java.util.Locale("""", ""PS"").getDisplayCountry(java.util.Locale.US)); }",b1c9be50c9e803c565b4022d1fd1a7175bc6d543,test_getDisplayCountry_8870289(),test_getDisplayCountry_8870289(),3,48,"public void test_getDisplayCountry_8870289() throws java.lang.Exception { assertEquals(""Hong Kong"", new java.util.Locale("""", ""HK"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Macau"", new java.util.Locale("""", ""MO"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Palestine"", new java.util.Locale("""", ""PS"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Cocos (Keeling) Islands"", new java.util.Locale("""", ""CC"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Falkland Islands (Islas Malvinas)"", new java.util.Locale("""", ""FK"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Macedonia (FYROM)"", new java.util.Locale("""", ""MK"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Myanmar (Burma)"", new java.util.Locale("""", ""MM"").getDisplayCountry(java.util.Locale.US)); assertEquals(""Taiwan"", new java.util.Locale("""", ""TW"").getDisplayCountry(java.util.Locale.US)); }",0db842b57064c074bf33f3db054faaae43dfa59f,test_getDisplayCountry_8870289(),29453,102,267
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,56.0,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, com.android.rs.test.Float2 javaResult, com.android.rs.test.Float2 rsResult) { final boolean success = ((javaResult.x) == (rsResult.x)) && ((javaResult.y) == (rsResult.y)); java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success && (t != null)) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + "": java ("") + (javaResult.x)) + "", "") + (javaResult.y)) + "")"") + "", rs ("") + (rsResult.x)) + "", "") + (rsResult.y)) + "")"") + "": "") + status)); return success; }",0d87e484ebcd2543062907f5ab49c95fa1040cf8,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, android.renderscript.Float2 javaRslt, android.renderscript.Float2 rsRslt) { final boolean success = ((javaRslt.x) == (rsRslt.x)) && ((javaRslt.y) == (rsRslt.y)); java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success && (t != null)) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + "": java ("") + (javaRslt.x)) + "", "") + (javaRslt.y)) + "")"") + "", rs ("") + (rsRslt.x)) + "", "") + (rsRslt.y)) + "")"") + "": "") + status)); return success; }",95a415241bf204c6257eaf9410ea3a06bade9e11,"result(java.lang.String,com.android.rs.test.UT_reduce$timing,com.android.rs.test.Float2,com.android.rs.test.Float2)","result(java.lang.String,com.android.rs.test.UT_reduce$timing,android.renderscript.Float2,android.renderscript.Float2)",7,57,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, com.android.rs.test.Float2 javaResult, com.android.rs.test.Float2 rsResult) { final boolean success = ((javaResult.x) == (rsResult.x)) && ((javaResult.y) == (rsResult.y)); java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success && (t != null)) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + "": java ("") + (javaResult.x)) + "", "") + (javaResult.y)) + "")"") + "", rs ("") + (rsResult.x)) + "", "") + (rsResult.y)) + "")"") + "": "") + status)); return success; }",0d87e484ebcd2543062907f5ab49c95fa1040cf8,"result(java.lang.String,com.android.rs.test.UT_reduce$timing,com.android.rs.test.Float2,com.android.rs.test.Float2)",379401,241,227
243440,test_458-checker-instruction-simplification_src_Main.java,65.0,"public static java.lang.String floatToDoubleToIntPrint(float value) { double d = ((double) (value)); int i = ((int) (d)); return ((""d="" + d) + "", i="") + i; }",0f20a5fd536a6a09427c5210a988f02e3c9ee322,"public static java.lang.String floatToDoubleToIntPrint(float value) { if (Main.doThrow) { throw new java.lang.Error(); } double d = ((double) (value)); int i = ((int) (d)); return ((""d="" + d) + "", i="") + i; }",8f4c4d8a31b3dea722643c4017e4e15b34ddffdd,floatToDoubleToIntPrint(float),floatToDoubleToIntPrint(float),3,80,"public static java.lang.String $noinline$floatToDoubleToIntPrint(float value) { if (Main.doThrow) { throw new java.lang.Error(); } double d = ((double) (value)); int i = ((int) (d)); return ((""d="" + d) + "", i="") + i; }",ddf0333a94e8e30c38cc0ec638e7d7872e8156b1,$noinline$floatToDoubleToIntPrint(float),118205,73,78
92757,luni_src_test_java_libcore_java_nio_BufferTest.java,9.0,public void testFreed() { java.nio.ByteBuffer b = java.nio.ByteBuffer.allocateDirect(1); java.nio.NioUtils.freeDirectBuffer(b); assertFalse(b.isValid()); try { b.compact(); fail(); } catch (java.lang.IllegalStateException expected) { } try { b.duplicate(); fail(); } catch (java.lang.IllegalStateException expected) { } testFailForPutMethods(b); testFailForAsMethods(b); testFailForGetMethods(b); },a8f3ac083a6e70decf9a660c355869add7be2f37,"public void testFreed() { java.nio.ByteBuffer b1 = java.nio.ByteBuffer.allocateDirect(1); java.nio.ByteBuffer b2 = b1.duplicate(); java.nio.NioUtils.freeDirectBuffer(b1); for (java.nio.ByteBuffer b : new java.nio.ByteBuffer[]{ b1, b2 }) { assertFalse(b.isValid()); try { b.compact(); fail(); } catch (java.lang.IllegalStateException expected) { } try { b.duplicate(); fail(); } catch (java.lang.IllegalStateException expected) { } testFailForPutMethods(b); testFailForAsMethods(b); testFailForGetMethods(b); java.nio.NioUtils.freeDirectBuffer(b); } }",b760e8581bc4be4b934bc9e283b73ddcf6a4cb04,testFreed(),testFreed(),3,9,"public void testFreed() { java.nio.ByteBuffer b1 = java.nio.ByteBuffer.allocateDirect(1); java.nio.ByteBuffer b2 = b1.duplicate(); java.nio.NioUtils.freeDirectBuffer(b1); for (java.nio.ByteBuffer b : new java.nio.ByteBuffer[]{ b1, b2 }) { assertFalse(b.isAccessible()); try { b.compact(); fail(); } catch (java.lang.IllegalStateException expected) { } try { b.duplicate(); fail(); } catch (java.lang.IllegalStateException expected) { } testFailForPutMethods(b); testFailForAsMethods(b); testFailForGetMethods(b); java.nio.NioUtils.freeDirectBuffer(b); } }",5e2d63fdcb13bf9b314e1afe00d9c6f8b530a628,testFreed(),35131,158,158
276041,tests_tests_permission_src_android_permission_cts_FileSystemPermissionTest.java,51.0,"@android.test.suitebuilder.annotation.MediumTest public void testDeviceTreeCpuCurrent() throws java.lang.Exception { java.lang.String arch = java.lang.System.getProperty(""os.arch""); java.lang.String[] osVersion = java.lang.System.getProperty(""os.version"").split(""\\.""); if (((!(arch.contains(""arm""))) || ((java.lang.Integer.parseInt(osVersion[0])) < 2)) || (((java.lang.Integer.parseInt(osVersion[0])) == 3) && ((java.lang.Integer.parseInt(osVersion[1])) < 10))) return; final java.io.File f = new java.io.File(""/proc/device-tree/cpus""); if (!(f.exists())) return; java.lang.String[] dir = f.list(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File pathname, java.lang.String name) { return (pathname.isDirectory()) && (name.matches(""cpu@[0-9]+"")); } }); for (java.lang.String cpuDir : dir) { java.io.File fCpu = new java.io.File((cpuDir + ""/current"")); assertTrue(f.canRead()); } }",997fac0bb0130fab1f3d0d07198523d11bac04cc,"@android.test.suitebuilder.annotation.MediumTest public void testDeviceTreeCpuCurrent() throws java.lang.Exception { java.lang.String arch = java.lang.System.getProperty(""os.arch""); java.lang.String[] osVersion = java.lang.System.getProperty(""os.version"").split(""\\.""); if (((!(arch.contains(""arm""))) || ((java.lang.Integer.parseInt(osVersion[0])) < 2)) || (((java.lang.Integer.parseInt(osVersion[0])) == 3) && ((java.lang.Integer.parseInt(osVersion[1])) < 10))) return; final java.io.File f = new java.io.File(""/proc/device-tree/cpus""); if (!(f.exists())) return; java.lang.String[] dir = f.list(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File pathname, java.lang.String name) { return (pathname.isDirectory()) && (name.matches(""cpu@[0-9]+"")); } }); if (dir == null) return; for (java.lang.String cpuDir : dir) { java.io.File fCpu = new java.io.File((cpuDir + ""/current"")); assertTrue(f.canRead()); } }",739f1a5d9d8c86766da0cf03400aecdc658aa3e0,testDeviceTreeCpuCurrent(),testDeviceTreeCpuCurrent(),2,51,"@android.test.suitebuilder.annotation.MediumTest public void testDeviceTreeCpuCurrent() throws java.lang.Exception { java.lang.String arch = java.lang.System.getProperty(""os.arch""); java.lang.String[] osVersion = java.lang.System.getProperty(""os.version"").split(""\\.""); if (((!(arch.contains(""arm""))) || ((java.lang.Integer.parseInt(osVersion[0])) < 2)) || (((java.lang.Integer.parseInt(osVersion[0])) == 3) && ((java.lang.Integer.parseInt(osVersion[1])) < 10))) return; final java.io.File f = new java.io.File(""/proc/device-tree/cpus""); if (!(f.exists())) return; java.lang.String[] dir = f.list(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File pathname, java.lang.String name) { return (pathname.isDirectory()) && (name.matches(""cpu@[0-9]+"")); } }); if (dir == null) return; for (java.lang.String cpuDir : dir) { java.io.File fCpu = new java.io.File((cpuDir + ""/current"")); assertTrue(fCpu.canRead()); } }",0f793fc146ec4530845145d6b5a33c370749a15a,testDeviceTreeCpuCurrent(),302408,283,284
174017,src_compat_java_org_conscrypt_Platform.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static org.conscrypt.CloseGuard closeGuardGet() { if ((Build.VERSION.SDK_INT) < (Build.VERSION_CODES.ICE_CREAM_SANDWICH)) { return; } return org.conscrypt.CloseGuard.get(); },1d13101e7503cf9b779604dfe7773c3a635ea705,,closeGuardGet(),3,9,public static dalvik.system.CloseGuard closeGuardGet() { if ((Build.VERSION.SDK_INT) < 14) { return null; } return dalvik.system.CloseGuard.get(); },78dd0cc87acb2e5c7388719b531f45713d615500,closeGuardGet(),457872,62,45
207791,apps_CtsVerifier_src_com_android_cts_verifier_net_ConnectivityScreenOffTestActivity.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isLeanbackOnly() { android.content.pm.PackageManager pm = this.getPackageManager(); return (pm != null) && (pm.hasSystemFeature(""android.software.leanback_only"")); }",eb4085e1e78d72555331bde4a9408f92b3c2bbe6,,isLeanbackOnly(),4,19,private boolean isLeanback() { final android.content.pm.PackageManager pm = this.getPackageManager(); return (pm != null) && (pm.hasSystemFeature(PackageManager.FEATURE_LEANBACK)); },dfe9f4a781a290a1dd2cf2c7a8295fc72e835a65,isLeanback(),477711,47,46
531855,tests_net_java_android_net_MacAddressTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testIsLocallyAssignedAddress() { android.net.MacAddress[] localAddresses = new android.net.MacAddress[]{ new android.net.MacAddress(""06:00:00:00:00:00""), new android.net.MacAddress(""07:00:d3:56:8a:c4""), new android.net.MacAddress(""33:33:aa:bb:cc:dd"") }; android.net.MacAddress[] universallyAddresses = new android.net.MacAddress[]{ new android.net.MacAddress(""00:01:44:55:66:77""), new android.net.MacAddress(""08:00:22:33:44:55"") }; for (android.net.MacAddress mac : localAddresses) { java.lang.String msg = (mac.toString()) + "" expected to be a locally assigned address""; assertTrue(msg, mac.isLocallyAssigned()); } for (android.net.MacAddress mac : universallyAddresses) { java.lang.String msg = (mac.toString()) + "" expected not to be globally unique address""; assertFalse(msg, mac.isLocallyAssigned()); } }",4611559ab8aff68b8abe6681b347fa604c37dcdb,,testIsLocallyAssignedAddress(),3,1,"@org.junit.Test public void testIsLocallyAssignedAddress() { android.net.MacAddress[] localAddresses = new android.net.MacAddress[]{ new android.net.MacAddress(""06:00:00:00:00:00""), new android.net.MacAddress(""07:00:d3:56:8a:c4""), new android.net.MacAddress(""33:33:aa:bb:cc:dd"") }; android.net.MacAddress[] universalAddresses = new android.net.MacAddress[]{ new android.net.MacAddress(""00:01:44:55:66:77""), new android.net.MacAddress(""08:00:22:33:44:55"") }; for (android.net.MacAddress mac : localAddresses) { java.lang.String msg = (mac.toString()) + "" expected to be a locally assigned address""; assertTrue(msg, mac.isLocallyAssigned()); } for (android.net.MacAddress mac : universalAddresses) { java.lang.String msg = (mac.toString()) + "" expected not to be globally unique address""; assertFalse(msg, mac.isLocallyAssigned()); } }",cf0fafb337e97d94b5784b8e079a63186a6c7632,testIsLocallyAssignedAddress(),151369,250,248
534821,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,57.0,"private void processNoiceReductionEvent(int enable, android.bluetooth.BluetoothDevice device) { java.util.HashMap<java.lang.String, java.lang.Integer> audioParamNrec = mHeadsetAudioParam.get(device); if ((audioParamNrec != null) && (!(audioParamNrec.isEmpty()))) { if (enable == 1) { audioParamNrec.put(""NREC"", 1); } else { audioParamNrec.put(""NREC"", 0); } log((((""NREC value for device :"" + device) + "" is: "") + (audioParamNrec.get(""NREC"")))); } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ""processNoiceReductionEvent: audioParamNrec is null ""); } if ((((mActiveScoDevice) != null) && (mActiveScoDevice.equals(device))) && ((mAudioState) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { setAudioParameters(device); } }",ee96b12f70e04db34f7df0bc01090189c8558c16,"private void processNoiceReductionEvent(int enable, android.bluetooth.BluetoothDevice device) { if (!(mAudioParams.isEmpty())) { if (enable == 1) { mAudioParams.put(""NREC"", 1); } else { mAudioParams.put(""NREC"", 0); } log((((""NREC value for device :"" + device) + "" is: "") + (mAudioParams.get(""NREC"")))); } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ""processNoiceReductionEvent: audioParamNrec is null ""); } if ((((mCurrentDevice) != null) && (mCurrentDevice.equals(device))) && ((mAudioState) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { setAudioParameters(device); } }",1564a4e11d884cbd3732076d8a377955994d47ae,"processNoiceReductionEvent(int,android.bluetooth.BluetoothDevice)","processNoiceReductionEvent(int,android.bluetooth.BluetoothDevice)",28,78,"private void processNoiseReductionEvent(boolean enable, android.bluetooth.BluetoothDevice device) { if (!(mAudioParams.isEmpty())) { if (enable) { mAudioParams.put(""NREC"", 1); } else { mAudioParams.put(""NREC"", 0); } log((((""NREC value for device :"" + device) + "" is: "") + (mAudioParams.get(""NREC"")))); } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ""processNoiseReductionEvent: audioParamNrec is null ""); } if ((((mCurrentDevice) != null) && (mCurrentDevice.equals(device))) && ((getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { setAudioParameters(device); } }",71c3466d496a78618d415b82b5fcc7195728357d,"processNoiseReductionEvent(boolean,android.bluetooth.BluetoothDevice)",71016,182,179
281743,jack_src_com_android_jack_backend_dex_rop_RopHelper.java,1.0,"@javax.annotation.Nonnull public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall methodCall) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper.getCstType(methodCall.getReceiverType()); java.lang.String signatureWithoutName = com.android.jack.backend.dex.rop.RopHelper.getMethodSignatureWithoutName(methodCall); com.android.jack.dx.rop.cst.CstNat nat = new com.android.jack.dx.rop.cst.CstNat(new com.android.jack.dx.rop.cst.CstString(methodCall.getMethodName()), new com.android.jack.dx.rop.cst.CstString(signatureWithoutName)); com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef(definingClass, nat); return methodRef; }",5cb6dce2bd825458be4272c0e34bbd4efa9dffa1,"@javax.annotation.Nonnull public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef(@javax.annotation.Nonnull com.android.jack.ir.ast.JAbstractMethodCall methodCall) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper.getCstType(methodCall.getReceiverType()); java.lang.String signatureWithoutName = com.android.jack.backend.dex.rop.RopHelper.getMethodSignatureWithoutName(methodCall); com.android.jack.dx.rop.cst.CstNat nat = new com.android.jack.dx.rop.cst.CstNat(new com.android.jack.dx.rop.cst.CstString(methodCall.getMethodName()), new com.android.jack.dx.rop.cst.CstString(signatureWithoutName)); com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef(definingClass, nat); return methodRef; }",24257e62f203a60ecf845c23511be0174be67d41,createMethodRef(com.android.jack.ir.ast.JMethodCall),createMethodRef(com.android.jack.ir.ast.JAbstractMethodCall),9,5,"@javax.annotation.Nonnull public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall methodCall) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper.getCstType(methodCall.getReceiverType()); java.lang.String signatureWithoutName = com.android.jack.backend.dex.rop.RopHelper.getMethodSignatureWithoutName(methodCall); com.android.jack.dx.rop.cst.CstNat nat = new com.android.jack.dx.rop.cst.CstNat(new com.android.jack.dx.rop.cst.CstString(methodCall.getMethodName()), new com.android.jack.dx.rop.cst.CstString(signatureWithoutName)); com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef(definingClass, nat); return methodRef; }",5cb6dce2bd825458be4272c0e34bbd4efa9dffa1,createMethodRef(com.android.jack.ir.ast.JMethodCall),133336,272,271
15997,hierarchyviewer_src_com_android_hierarchyviewer_device_DeviceBridge.java,15.0,"public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewer.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { try { device.removeForward(localPort, Configuration.DEFAULT_SERVER_PORT); com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.remove(device); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e(""hierarchy"", (""Timeout removing port forwarding for "" + device)); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.e(""hierarchy"", java.lang.String.format(""Adb rejected remove-forward command for device %1$s: %2$s"", device, e.getMessage())); } catch (java.io.IOException e) { com.android.ddmlib.Log.e(""hierarchy"", java.lang.String.format(""Failed to remove forward for device %1$s: %2$s"", device, e.getMessage())); } } } }",233e805b8207d1d77c528cb431e89bfbdbcb1dca,"public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewer.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { device.removeForward(localPort, Configuration.DEFAULT_SERVER_PORT); com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.remove(device); } } }",0449ced8b64df2a0fc262230927ddcd101a780e8,removeDeviceForward(com.android.ddmlib.IDevice),removeDeviceForward(com.android.ddmlib.IDevice),4,15,"public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewer.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { try { device.removeForward(localPort, Configuration.DEFAULT_SERVER_PORT); com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.remove(device); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e(""hierarchy"", (""Timeout removing port forwarding for "" + device)); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.e(""hierarchy"", java.lang.String.format(""Adb rejected remove-forward command for device %1$s: %2$s"", device, e.getMessage())); } catch (java.io.IOException e) { com.android.ddmlib.Log.e(""hierarchy"", java.lang.String.format(""Failed to remove forward for device %1$s: %2$s"", device, e.getMessage())); } } } }",233e805b8207d1d77c528cb431e89bfbdbcb1dca,removeDeviceForward(com.android.ddmlib.IDevice),125299,116,280
35572,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_repository_packages_PreviewVersionPackage.java,,,,public com.android.sdklib.internal.repository.packages.PreviewVersion getPreviewVersion() { return mPreviewVersion; },0a79a4dd777b0a093723cd2688a7ce0ec647be79,,getPreviewVersion(),5,3,@java.lang.Override @com.android.annotations.NonNull public com.android.sdklib.internal.repository.packages.PreviewVersion getPreviewVersion() { return mPreviewVersion; },3960183c52b3a1585c88eeed54d408f0fcd14112,getPreviewVersion(),77282,27,41
147885,jack-tests_tests_com_android_jack_shrob_SeedTests.java,0.0,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, ""refsSeed""); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""seeds"", "".txt""); java.io.File refOutputSeeds = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, ("" -dontshrink -dontobfuscate -printseeds "" + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }",060f98d52638c870dcdcb5aa3cc74381e162944d,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, ""refsSeed""); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""seeds"", "".txt""); java.io.File refOutputSeeds = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, ("" -dontshrink -dontobfuscate -printseeds "" + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(candidateOutputSeeds, refOutputSeeds)); }",1dd8e46f2cf99d537b95484e196242d2adb073c7,"runTest(java.lang.String,java.lang.String,java.lang.String)","runTest(java.lang.String,java.lang.String,java.lang.String)",3,0,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, ""refsSeed""); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""seeds"", "".txt""); java.io.File refOutputSeeds = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, ("" -dontshrink -dontobfuscate -printseeds "" + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }",060f98d52638c870dcdcb5aa3cc74381e162944d,"runTest(java.lang.String,java.lang.String,java.lang.String)",92889,431,431
106766,jack_src_com_android_jack_ir_impl_CloneExpressionVisitor.java,34.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JArrayLiteral arrayLiteral) { java.util.List<com.android.jack.ir.ast.JLiteral> values = arrayLiteral.getValues(); java.util.List<com.android.jack.ir.ast.JLiteral> clonedValues = new java.util.ArrayList<com.android.jack.ir.ast.JLiteral>(values.size()); for (com.android.jack.ir.ast.JLiteral literal : values) { clonedValues.add(cloneExpression(literal)); } expression = new com.android.jack.ir.ast.JArrayLiteral(arrayLiteral.getSourceInfo(), clonedValues); return false; }",2275e689aa9881ed3e433cde3d84076b9bfeee68,,visit(com.android.jack.ir.ast.JArrayLiteral),2,14,"@java.lang.SuppressWarnings({ ""unchecked"" }) @java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JArrayLiteral arrayLiteral) { expression = new com.android.jack.ir.ast.JArrayLiteral(arrayLiteral.getSourceInfo(), ((java.util.ArrayList<com.android.jack.ir.ast.JLiteral>) ((java.lang.Object) (cloneExpressions(arrayLiteral.getValues()))))); return false; }",e05d4bb76fa1240640daf8aa15ef19d369769b87,visit(com.android.jack.ir.ast.JArrayLiteral),245480,166,111
81416,tests_tests_renderscript_src_android_renderscript_cts_TestStep.java,,,,"private void checkStepFloat3Float() { android.renderscript.Allocation inEdge = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inEdge, 35, 0.0F, 1.0F); android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloat3Float(inEdge, out); verifyResultsStepFloat3Float(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloat3Float: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloat3Float(inEdge, out); verifyResultsStepFloat3Float(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloat3Float: "" + (e.toString()))); } }",69d5d7839fab0b6ba2c0dbdbb4ebf2caaf978f7d,,checkStepFloat3Float(),9,5,"private void checkStepFloat3FloatFloat3() { android.renderscript.Allocation inEdge = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 7454407128371334920L); android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 7454407128371334920L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloat3FloatFloat3(inEdge, out); verifyResultsStepFloat3FloatFloat3(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloat3FloatFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloat3FloatFloat3(inEdge, out); verifyResultsStepFloat3FloatFloat3(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloat3FloatFloat3: "" + (e.toString()))); } }",d803b728cb8f85d9a636e0350612ed02e47c2743,checkStepFloat3FloatFloat3(),143514,431,380
91995,luni_src_main_java_android_os_Os.java,,,,"public static int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws android.os.ErrnoException, java.net.SocketException { return Libcore.os.sendto(fd, buffer, flags, inetAddress, port); }",06c962361a5aa7acf91fb795fc134faf194379e2,,"sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)",3,13,"public static int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws android.system.ErrnoException, java.net.SocketException { return Libcore.os.sendto(fd, buffer, flags, inetAddress, port); }",3092206d663012796a1403c554c8c4c7874e56fe,"sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)",170046,72,72
311386,hostsidetests_net_app_src_com_android_cts_net_hostside_AbstractRestrictBackgroundNetworkTestCase.java,51.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected boolean canUseMeteredNetwork() throws java.lang.Exception { if (mCm.isActiveNetworkMetered()) { return true; } final android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); assertNotNull(""Could not get active network"", info); return (info.getType()) == (android.net.ConnectivityManager.TYPE_WIFI); }",96d7fa6fd0fb504ae2fb9e01c2c2623387913472,,canUseMeteredNetwork(),3,3,protected boolean setUpActiveNetworkMeteringState() throws java.lang.Exception { return true; },415e2ae628b330d56ffe805c1ef830afd441636e,setUpActiveNetworkMeteringState(),135293,76,20
358197,src_com_android_bluetooth_avrcp_Avrcp.java,98.0,"private synchronized com.android.bluetooth.avrcp.MediaController getCurrentMediaController() { com.android.bluetooth.avrcp.MediaController mediaController = null; if (((mMediaPlayerInfoList) == null) || (mMediaPlayerInfoList.isEmpty())) { android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, "" No available players , sending response back ""); return mediaController; } if (!(isIdValid(mCurrAddrPlayerID))) { android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, ((((""CurrPlayerID is not yet set:"" + (mCurrAddrPlayerID)) + "", PlayerList length="") + (mMediaPlayerInfoList.size())) + "" , sending response back"")); return mediaController; } mediaController = mMediaPlayerInfoList.get(((mCurrAddrPlayerID) - 1)).getMediaController(); if (mediaController != null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, (""getCurrentMediaController: "" + (mediaController.getPackageName()))); } return mediaController; }",fde22a5dc5aae4884a8b9d997227bbf8c3061163,"private synchronized void initMediaPlayersInfoList() { mMediaPlayerInfoList.clear(); if ((mMediaSessionManager) == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, ""initMediaPlayersInfoList: no media session manager!""); return; } java.util.List<android.media.session.MediaController> controllers = mMediaSessionManager.getActiveSessions(null); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ((""initMediaPlayerInfoList: "" + (controllers.size())) + "" controllers"")); for (android.media.session.MediaController controller : controllers) { addMediaPlayerInfo(controller); } }",76ced6be92408c20cc904f1ff538328275a81ac5,getCurrentMediaController(),initMediaPlayersInfoList(),11,102,"private synchronized void initMediaPlayersInfoList() { mMediaPlayerInfoList.clear(); if ((mMediaSessionManager) == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, ""initMediaPlayersInfoList: no media session manager!""); return; } java.util.List<android.media.session.MediaController> controllers = mMediaSessionManager.getActiveSessions(null); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ((""initMediaPlayerInfoList: "" + (controllers.size())) + "" controllers"")); for (android.media.session.MediaController controller : controllers) { addMediaPlayerController(controller); } }",0b77e8210b1abec6505b9bbb011dff623df55294,initMediaPlayersInfoList(),389381,192,192
591424,telephony_java_android_telephony_ims_stub_ImsConfigImplBase.java,10.0,@java.lang.Override public boolean getVolteProvisioned() throws android.os.RemoteException { return false; },7f2ab947ffffb01a405736dad11bde9bf755fb50,@java.lang.Override public java.lang.String getConfigString(int item) throws android.os.RemoteException { return null; },f58b9022e44c89476bc5745771a7909cb7baf20e,getVolteProvisioned(),getConfigString(int),3,20,"@java.lang.Override public synchronized java.lang.String getConfigString(int item) throws android.os.RemoteException { if (mProvisionedIntValue.containsKey(item)) { return mProvisionedStringValue.get(item); } else { java.lang.String retVal = getImsConfigImpl().getConfigString(item); if (retVal != null) { updateCachedValue(item, retVal, false); } return retVal; } }",5c3b4eb641892e4b15414153aff7c290b524c30c,getConfigString(int),506822,30,93
98565,benchmarks_src_benchmarks_SystemArrayCopyBenchmark.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void timeSystemShortArrayCopy(int reps) { final int len = arrayLength; char[] src = new char[len]; char[] dst = new char[len]; for (int rep = 0; rep < reps; ++rep) { java.lang.System.arraycopy(src, 0, dst, 0, len); } }",43b5319e3d0a6f1ab9edac24aa4c47cc57f89c62,,timeSystemShortArrayCopy(int),7,3,"public void timeSystemShortArrayCopy(int reps) { final int len = arrayLength; short[] src = new short[len]; short[] dst = new short[len]; for (int rep = 0; rep < reps; ++rep) { java.lang.System.arraycopy(src, 0, dst, 0, len); } }",17ae4328709bce36ce6ec148f950d419b44db46b,timeSystemShortArrayCopy(int),451235,71,71
73670,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_channels_DatagramChannelTest.java,115.0,"protected void setUp() throws java.lang.Exception { super.setUp(); this.channel1 = java.nio.channels.DatagramChannel.open(); this.channel2 = java.nio.channels.DatagramChannel.open(); int[] ports = tests.support.Support_PortManager.getNextPortsForUDP(5); this.localAddr1 = new java.net.InetSocketAddress(""127.0.0.1"", ports[0]); this.localAddr2 = new java.net.InetSocketAddress(""127.0.0.1"", ports[1]); this.datagramSocket1 = new java.net.DatagramSocket(ports[2]); this.datagramSocket2 = new java.net.DatagramSocket(ports[3]); testPort = ports[4]; }",382bc0d02c941e72c4d89be4d97fc6bbb0fd1cd7,protected void setUp() throws java.lang.Exception { super.setUp(); channel1 = java.nio.channels.DatagramChannel.open(); channel2 = java.nio.channels.DatagramChannel.open(); channel1.socket().bind(null); channel2.socket().bind(null); channel1Address = ((java.net.InetSocketAddress) (channel1.socket().getLocalSocketAddress())); channel2Address = ((java.net.InetSocketAddress) (channel2.socket().getLocalSocketAddress())); this.datagramSocket1 = new java.net.DatagramSocket(0); datagramSocket1.setReuseAddress(true); this.datagramSocket2 = new java.net.DatagramSocket(0); datagramSocket2.setReuseAddress(true); datagramSocket1Address = ((java.net.InetSocketAddress) (datagramSocket1.getLocalSocketAddress())); datagramSocket2Address = ((java.net.InetSocketAddress) (datagramSocket2.getLocalSocketAddress())); },5595a07bb648c89a3a90a0cc8a7d455c00661f7b,setUp(),setUp(),2,113,"protected void setUp() throws java.lang.Exception { super.setUp(); channel1 = java.nio.channels.DatagramChannel.open(); channel2 = java.nio.channels.DatagramChannel.open(); channel1.socket().bind(new java.net.InetSocketAddress(LOOPBACK, 0)); channel2.socket().bind(new java.net.InetSocketAddress(LOOPBACK, 0)); channel1Address = ((java.net.InetSocketAddress) (channel1.socket().getLocalSocketAddress())); channel2Address = ((java.net.InetSocketAddress) (channel2.socket().getLocalSocketAddress())); this.datagramSocket1 = new java.net.DatagramSocket(0, LOOPBACK); this.datagramSocket2 = new java.net.DatagramSocket(0, LOOPBACK); datagramSocket1Address = ((java.net.InetSocketAddress) (datagramSocket1.getLocalSocketAddress())); datagramSocket2Address = ((java.net.InetSocketAddress) (datagramSocket2.getLocalSocketAddress())); }",a43977a114558adeb6a283732cd321e6843b2ce6,setUp(),95874,193,203
42195,builder_src_main_java_com_android_builder_VariantConfiguration.java,,,,"public void addProductFlavor(@com.android.annotations.NonNull com.android.builder.ProductFlavor productFlavor, @com.android.annotations.NonNull com.android.builder.SourceSet sourceSet) { if ((mFlavorConfigs) == null) { mFlavorConfigs = new java.util.ArrayList<com.android.builder.ProductFlavor>(); mFlavorSourceSets = new java.util.ArrayList<com.android.builder.SourceSet>(); } mFlavorConfigs.add(productFlavor); mFlavorSourceSets.add(sourceSet); mMergedFlavor = productFlavor.mergeOver(mMergedFlavor); }",30327f8d5c375e16af73592a277076a07dc24441,,"addProductFlavor(com.android.builder.ProductFlavor,com.android.builder.SourceSet)",4,6,"public void addProductFlavor(@com.android.annotations.NonNull com.android.builder.ProductFlavor productFlavor, @com.android.annotations.NonNull com.android.builder.SourceSet sourceSet) { mFlavorConfigs.add(productFlavor); mFlavorSourceSets.add(sourceSet); mMergedFlavor = productFlavor.mergeOver(mMergedFlavor); }",e77c41afdaa2fbb59aaeb503eb693721c317b0c3,"addProductFlavor(com.android.builder.ProductFlavor,com.android.builder.SourceSet)",478279,131,78
196553,luni_src_test_java_libcore_java_util_GregorianCalendarTest.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkOutsideDST(java.util.Calendar cal, java.lang.String description) { java.util.TimeZone timeZone = cal.getTimeZone(); checkOutsideDST(cal, description, timeZone.getRawOffset()); }",3e819169e67266ef18bbe4e65e58d7285467732b,,"checkOutsideDST(java.util.Calendar,java.lang.String)",2,11,"private void checkOutsideDst(java.util.Calendar cal, java.lang.String description) { java.util.TimeZone timeZone = cal.getTimeZone(); checkOutsideDst(cal, description, timeZone.getRawOffset()); }",db5765c4b7a1b3362aed53ce0f2de3ff557cf7b1,"checkOutsideDst(java.util.Calendar,java.lang.String)",388456,54,54
150175,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_model_NativeLibraryImpl.java,4.0,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((""NativeLibraryImpl{"" + ""name='"") + (name)) + '\'') + "", toolchainName='"") + (toolchainName)) + '\'') + "", cIncludeDirs="") + (cIncludeDirs)) + "", cppIncludeDirs="") + (cppIncludeDirs)) + "", cDefines="") + (cDefines)) + "", cppDefines="") + (cppDefines)) + "", cCompilerFlags="") + (cCompilerFlags)) + "", cppCompilerFlags="") + (cppCompilerFlags)) + '}'; }",46356610108f1d6dc86ddf5dc477202044412bd3,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((""NativeLibraryImpl{"" + ""name='"") + (name)) + '\'') + "", toolchainName='"") + (toolchainName)) + '\'') + "", cIncludeDirs="") + (cIncludeDirs)) + "", cppIncludeDirs="") + (cppIncludeDirs)) + "", cDefines="") + (cDefines)) + "", cppDefines="") + (cppDefines)) + "", cCompilerFlags="") + (cCompilerFlags)) + "", cppCompilerFlags="") + (cppCompilerFlags)) + "", solibSearchPaths="") + (solibSearchPaths)) + '}'; }",4003c22156d0eddbecbd3d602554b61a85f2ed93,toString(),toString(),5,4,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((""NativeLibraryImpl{"" + ""name='"") + (name)) + '\'') + "", toolchainName='"") + (toolchainName)) + '\'') + "", cIncludeDirs="") + (cIncludeDirs)) + "", cppIncludeDirs="") + (cppIncludeDirs)) + "", cDefines="") + (cDefines)) + "", cppDefines="") + (cppDefines)) + "", cCompilerFlags="") + (cCompilerFlags)) + "", cppCompilerFlags="") + (cppCompilerFlags)) + "", solibSearchPaths="") + (debuggableLibraryFolders)) + '}'; }",b9aea4677748378b20556733a5f73dbee909c5b2,toString(),296449,164,165
51710,src_com_android_settings_ApnSettings.java,0.0,"private void fillList() { java.lang.String where = (""numeric=\"""" + (android.os.SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, """"))) + ""\""""; android.database.Cursor cursor = getContentResolver().query(Telephony.Carriers.CONTENT_URI, new java.lang.String[]{ ""_id"", ""name"", ""apn"", ""type"" }, where, null, Telephony.Carriers.DEFAULT_SORT_ORDER); android.preference.PreferenceGroup apnList = ((android.preference.PreferenceGroup) (findPreference(""apn_list""))); apnList.removeAll(); java.util.ArrayList<android.preference.Preference> mmsApnList = new java.util.ArrayList<android.preference.Preference>(); mSelectedKey = getSelectedApnKey(); cursor.moveToFirst(); while (!(cursor.isAfterLast())) { java.lang.String name = cursor.getString(com.android.settings.ApnSettings.NAME_INDEX); java.lang.String apn = cursor.getString(com.android.settings.ApnSettings.APN_INDEX); java.lang.String key = cursor.getString(com.android.settings.ApnSettings.ID_INDEX); java.lang.String type = cursor.getString(com.android.settings.ApnSettings.TYPES_INDEX); com.android.settings.ApnPreference pref = new com.android.settings.ApnPreference(this); pref.setKey(key); pref.setTitle(name); pref.setSummary(apn); pref.setPersistent(false); pref.setOnPreferenceChangeListener(this); boolean selectable = (type == null) || (!(type.equals(""mms""))); pref.setSelectable(selectable); if (selectable) { if (((mSelectedKey) != null) && (mSelectedKey.equals(key))) { pref.setChecked(); } apnList.addPreference(pref); } else { mmsApnList.add(pref); } cursor.moveToNext(); } cursor.close(); for (android.preference.Preference preference : mmsApnList) { apnList.addPreference(preference); } }",6c92ef1a9688c256d8caee486908bafd25de8583,"private void fillList() { java.lang.String where = (""numeric=\"""" + (android.os.SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, """"))) + ""\""""; android.database.Cursor cursor = null; try { cursor = getContentResolver().query(Telephony.Carriers.CONTENT_URI, new java.lang.String[]{ ""_id"", ""name"", ""apn"", ""type"" }, where, null, Telephony.Carriers.DEFAULT_SORT_ORDER); } catch (android.database.SQLException e) { return; } android.preference.PreferenceGroup apnList = ((android.preference.PreferenceGroup) (findPreference(""apn_list""))); apnList.removeAll(); java.util.ArrayList<android.preference.Preference> mmsApnList = new java.util.ArrayList<android.preference.Preference>(); mSelectedKey = getSelectedApnKey(); cursor.moveToFirst(); while (!(cursor.isAfterLast())) { java.lang.String name = cursor.getString(com.android.settings.ApnSettings.NAME_INDEX); java.lang.String apn = cursor.getString(com.android.settings.ApnSettings.APN_INDEX); java.lang.String key = cursor.getString(com.android.settings.ApnSettings.ID_INDEX); java.lang.String type = cursor.getString(com.android.settings.ApnSettings.TYPES_INDEX); com.android.settings.ApnPreference pref = new com.android.settings.ApnPreference(this); pref.setKey(key); pref.setTitle(name); pref.setSummary(apn); pref.setPersistent(false); pref.setOnPreferenceChangeListener(this); boolean selectable = (type == null) || (!(type.equals(""mms""))); pref.setSelectable(selectable); if (selectable) { if (((mSelectedKey) != null) && (mSelectedKey.equals(key))) { pref.setChecked(); } apnList.addPreference(pref); } else { mmsApnList.add(pref); } cursor.moveToNext(); } cursor.close(); for (android.preference.Preference preference : mmsApnList) { apnList.addPreference(preference); } }",10ab2476c3a63ae981cb31276605bf80e3479ada,fillList(),fillList(),4,0,"private void fillList() { java.lang.String where = (""numeric=\"""" + (android.os.SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, """"))) + ""\""""; android.database.Cursor cursor = getContentResolver().query(Telephony.Carriers.CONTENT_URI, new java.lang.String[]{ ""_id"", ""name"", ""apn"", ""type"" }, where, null, Telephony.Carriers.DEFAULT_SORT_ORDER); if (cursor != null) { android.preference.PreferenceGroup apnList = ((android.preference.PreferenceGroup) (findPreference(""apn_list""))); apnList.removeAll(); java.util.ArrayList<android.preference.Preference> mmsApnList = new java.util.ArrayList<android.preference.Preference>(); mSelectedKey = getSelectedApnKey(); cursor.moveToFirst(); while (!(cursor.isAfterLast())) { java.lang.String name = cursor.getString(com.android.settings.ApnSettings.NAME_INDEX); java.lang.String apn = cursor.getString(com.android.settings.ApnSettings.APN_INDEX); java.lang.String key = cursor.getString(com.android.settings.ApnSettings.ID_INDEX); java.lang.String type = cursor.getString(com.android.settings.ApnSettings.TYPES_INDEX); com.android.settings.ApnPreference pref = new com.android.settings.ApnPreference(this); pref.setKey(key); pref.setTitle(name); pref.setSummary(apn); pref.setPersistent(false); pref.setOnPreferenceChangeListener(this); boolean selectable = (type == null) || (!(type.equals(""mms""))); pref.setSelectable(selectable); if (selectable) { if (((mSelectedKey) != null) && (mSelectedKey.equals(key))) { pref.setChecked(); } apnList.addPreference(pref); } else { mmsApnList.add(pref); } cursor.moveToNext(); } cursor.close(); for (android.preference.Preference preference : mmsApnList) { apnList.addPreference(preference); } } }",cdf4e384e632bbf927de9047a48633373cb7ce2a,fillList(),298364,501,489
93690,src_com_google_gct_idea_appengine_wizard_BackendModuleWizardStep.java,,,,public void loadDataFromTemplate() { if (myUpdating) return; myUpdating = true; try { java.lang.Object moduleName = myWizardState.get(NewAppEngineModuleAction.ATTR_MODULE_NAME); if (moduleName == null) { moduleName = myWizardState.get(NewProjectWizardState.ATTR_MODULE_NAME); } if (moduleName != null) { myModuleNameField.setText(moduleName.toString()); } java.lang.Object packageName = myWizardState.get(TemplateMetadata.ATTR_PACKAGE_NAME); if (packageName != null) { myPackageNameField.setText(packageName.toString()); } } finally { myUpdating = false; } },b869311f025d409a4c66924a3fe8eba5644b5f27,,loadDataFromTemplate(),3,8,public void loadDataFromTemplate() { if (myUpdating) { return; } myUpdating = true; try { java.lang.Object moduleName = myWizardState.get(NewAppEngineModuleAction.ATTR_MODULE_NAME); if (moduleName == null) { moduleName = myWizardState.get(NewProjectWizardState.ATTR_MODULE_NAME); } if (moduleName != null) { myModuleNameField.setText(moduleName.toString()); } java.lang.Object packageName = myWizardState.get(TemplateMetadata.ATTR_PACKAGE_NAME); if (packageName != null) { myPackageNameField.setText(packageName.toString()); } } finally { myUpdating = false; } },10c30444964e246cfdbd762f48944387bcaabec9,loadDataFromTemplate(),413166,143,145
334367,src_java_com_android_internal_telephony_RIL.java,121.0,"@java.lang.Override public void hangupWaitingOrBackground(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); mMetrics.writeRilHangup(mInstanceId, rr.mSerial, (-1)); send(rr); }",36bde910d23a61b451a8a9db2b22bf3669f74ac5,"public void hangupWaitingOrBackground(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.hangupWaitingOrBackground(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""hangupWaitingOrBackground"", e); } } }",523365952608828ab80cb0d25f4e414c30953f21,hangupWaitingOrBackground(android.os.Message),hangupWaitingOrBackground(android.os.Message),2,121,"@java.lang.Override public void hangupWaitingOrBackground(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.hangupWaitingOrBackground(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""hangupWaitingOrBackground"", e); } } }",f364cd202d40e8b982398434d1724d4f851ceba1,hangupWaitingOrBackground(android.os.Message),255148,205,211
140393,dx_src_com_android_jack_dx_rop_cst_CstString.java,16.0,"public static byte[] stringToUtf8Bytes(java.lang.String string) { int len = string.length(); byte[] bytes = new byte[len * 3]; int outAt = 0; for (int i = 0; i < len; i++) { char c = string.charAt(i); if ((c != 0) && (c < 128)) { bytes[outAt] = ((byte) (c)); outAt++; } else if (c < 2048) { bytes[outAt] = ((byte) (((c >> 6) & 31) | 192)); bytes[(outAt + 1)] = ((byte) ((c & 63) | 128)); outAt += 2; } else { bytes[outAt] = ((byte) (((c >> 12) & 15) | 224)); bytes[(outAt + 1)] = ((byte) (((c >> 6) & 63) | 128)); bytes[(outAt + 2)] = ((byte) ((c & 63) | 128)); outAt += 3; } } byte[] result = new byte[outAt]; java.lang.System.arraycopy(bytes, 0, result, 0, outAt); return result; }",fd1ee90bbbfa07da529a6f2a034577d8bc752476,"public static byte[] stringToUtf8Bytes(java.lang.String string, int utf8Len) { int len = string.length(); byte[] bytes = new byte[utf8Len]; int outAt = 0; for (int i = 0; i < len; i++) { char c = string.charAt(i); if ((c != 0) && (c < 128)) { bytes[(outAt++)] = ((byte) (c)); } else if (c < 2048) { bytes[(outAt++)] = ((byte) (((c >> 6) & 31) | 192)); bytes[(outAt++)] = ((byte) ((c & 63) | 128)); } else { bytes[(outAt++)] = ((byte) (((c >> 12) & 15) | 224)); bytes[(outAt++)] = ((byte) (((c >> 6) & 63) | 128)); bytes[(outAt++)] = ((byte) ((c & 63) | 128)); } } return bytes; }",3708b2d9b64d80f60d3d4117c6cafd457cdb0b42,stringToUtf8Bytes(java.lang.String),"stringToUtf8Bytes(java.lang.String,int)",3,12,"private static byte[] stringToUtf8Bytes(java.lang.String string, int utf8Len) { int len = string.length(); byte[] bytes = new byte[utf8Len]; int outAt = 0; for (int i = 0; i < len; i++) { char c = string.charAt(i); if ((c != 0) && (c < 128)) { bytes[(outAt++)] = ((byte) (c)); } else if (c < 2048) { bytes[(outAt++)] = ((byte) (((c >> 6) & 31) | 192)); bytes[(outAt++)] = ((byte) ((c & 63) | 128)); } else { bytes[(outAt++)] = ((byte) (((c >> 12) & 15) | 224)); bytes[(outAt++)] = ((byte) (((c >> 6) & 63) | 128)); bytes[(outAt++)] = ((byte) ((c & 63) | 128)); } } return bytes; }",f6766a3e3bb25c9dd4f7ba14e791e58b1a2632b2,"stringToUtf8Bytes(java.lang.String,int)",236307,231,231
22939,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_tasks_ProgressView.java,15.0,"public void logError(java.lang.String log) { synchronized(mLogText) { mLogText.append(""=> "").append(log); } }",99db5d1bc9321ab12449b316012b18b5e59ea37f,"public void logError(java.lang.String log) { if ((mLog) != null) { mLog.error(null, "" %1$s"", log); } else { synchronized(mLogText) { mLogText.append(""ERROR: "").append(log); } } }",adaa65aa846a2e986f304ed70936365c9254e027,logError(java.lang.String),logError(java.lang.String),5,16,"public void logError(java.lang.String log) { if (acceptLog(log)) { if ((mLog) != null) { mLog.error(null, "" %1$s"", log); } else { synchronized(mLogText) { mLogText.append(""ERROR: "").append(log); } } } }",8dfc88888ac4eed57d527a969b97e82f8c99ab5b,logError(java.lang.String),397676,65,74
233160,espresso_core-tests_src_androidTest_java_android_support_test_espresso_matcher_CursorMatchersTest.java,43.0,"public void testWrongNegativeColumnIndex() { try { android.support.test.espresso.matcher.CursorMatchers.withRowInt((-1), android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE_MATCHER).matches(cursor); fail(""Expected IllegalArgumentException""); } catch (java.lang.IllegalArgumentException iae) { } }",74989cec95e593da009189df7c2553ae369e9913,"@org.junit.Test public void wrongNegativeColumnIndex() { expectedException.expect(java.lang.IllegalArgumentException.class); android.support.test.espresso.matcher.CursorMatchers.withRowInt((-1), android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE_MATCHER).matches(cursor); fail(""Expected IllegalArgumentException""); }",a3fce3487238454dba37e9196909e7ca4d495370,testWrongNegativeColumnIndex(),wrongNegativeColumnIndex(),2,2,"@org.junit.Test public void wrongNegativeColumnIndex() { expectedException.expect(java.lang.IllegalArgumentException.class); android.support.test.espresso.matcher.CursorMatchers.withRowInt((-1), android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE_MATCHER).matches(cursor); }",335f34590ce1c679d41da8ec0fd861c7b008896e,wrongNegativeColumnIndex(),234273,79,73
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.SuiteReturnsCustomTest.class) @org.junit.Test public void testRunner_SuiteReturnsCustomTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure(""suite"", ((("""" + ""java.lang.IllegalStateException: Unknown suite() result: "") + (vogar.target.junit3.SuiteReturnsCustomTest.CustomTest.class.getName())) + ""\n"")).completedNormally(); }",135371b3b64067218819d897ce367139ba189bf6,,testRunner_SuiteReturnsCustomTest(),3,18,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.SuiteReturnsCustomTest.class) @org.junit.Test public void testRunner_SuiteReturnsCustomTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure(""suite"", ((("""" + ""java.lang.IllegalStateException: Unknown suite() result: "") + (vogar.target.junit3.SuiteReturnsCustomTest.CustomTest.class.getName())) + ""\n"")).completedNormally(); }",72c866bbbc6d504682c0e745365aa93c0192545e,testRunner_SuiteReturnsCustomTest(),130761,132,131
623701,src_java_com_android_internal_telephony_ImsSmsDispatcher.java,13.0,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case EVENT_GET_IMS_SERVICE : try { getImsService(); } catch (com.android.ims.ImsException e) { android.telephony.Rlog.e(com.android.internal.telephony.TAG, (""setListeners: "" + e)); retryGetImsService(); } break; default : super.handleMessage(msg); } }",87aba06b491dae224ea089faef2b3c51a2de3388,"@java.lang.Override public void connectionReady(com.android.ims.ImsManager manager) throws com.android.ims.ImsException { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, ""ImsManager: connection ready.""); setListeners(); mIsImsServiceUp = true; }",975d1be290408bc0bb8d5f0ac27a358a875d1e9e,handleMessage(android.os.Message),connectionReady(com.android.ims.ImsManager),3,6,"@java.lang.Override public void connectionReady(com.android.ims.ImsManager manager) throws com.android.ims.ImsException { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, ""ImsManager: connection ready.""); synchronized(mLock) { setListeners(); mIsImsServiceUp = true; } }",8f93c5d93b032ec5df89cbee2e051dbd92c863d6,connectionReady(com.android.ims.ImsManager),305822,81,88
38910,services_java_com_android_server_WallpaperManagerService.java,7.0,"com.android.server.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String name) { if (name == null) name = """"; try { if (!(com.android.server.WallpaperManagerService.WALLPAPER_DIR.exists())) { com.android.server.WallpaperManagerService.WALLPAPER_DIR.mkdir(); android.os.FileUtils.setPermissions(com.android.server.WallpaperManagerService.WALLPAPER_DIR.getPath(), (((android.os.FileUtils.S_IRWXU) | (android.os.FileUtils.S_IRWXG)) | (android.os.FileUtils.S_IXOTH)), (-1), (-1)); } com.android.server.ParcelFileDescriptor fd = com.android.server.ParcelFileDescriptor.open(com.android.server.WallpaperManagerService.WALLPAPER_FILE, ((MODE_CREATE) | (MODE_READ_WRITE))); mName = name; return fd; } catch (java.io.FileNotFoundException e) { android.util.Slog.w(com.android.server.WallpaperManagerService.TAG, ""Error setting wallpaper"", e); } return null; }",bb3a0e1de63c66e00a45cf41794a6f9e9882e973,"com.android.server.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String name) { if (name == null) name = """"; try { if (!(com.android.server.WallpaperManagerService.WALLPAPER_DIR.exists())) { com.android.server.WallpaperManagerService.WALLPAPER_DIR.mkdir(); android.os.FileUtils.setPermissions(com.android.server.WallpaperManagerService.WALLPAPER_DIR.getPath(), (((android.os.FileUtils.S_IRWXU) | (android.os.FileUtils.S_IRWXG)) | (android.os.FileUtils.S_IXOTH)), (-1), (-1)); } com.android.server.ParcelFileDescriptor fd = com.android.server.ParcelFileDescriptor.open(com.android.server.WallpaperManagerService.WALLPAPER_FILE, ((MODE_CREATE) | (MODE_READ_WRITE))); android.os.SELinux.restorecon(com.android.server.WallpaperManagerService.WALLPAPER_FILE.getPath()); mName = name; return fd; } catch (java.io.FileNotFoundException e) { android.util.Slog.w(com.android.server.WallpaperManagerService.TAG, ""Error setting wallpaper"", e); } return null; }",feaad643c1c3171f3d94c24d370552d72db68f83,updateWallpaperBitmapLocked(java.lang.String),updateWallpaperBitmapLocked(java.lang.String),6,31,"android.os.ParcelFileDescriptor.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String name, com.android.server.WallpaperManagerService.WallpaperData wallpaper) { if (name == null) name = """"; try { java.io.File dir = com.android.server.WallpaperManagerService.getWallpaperDir(wallpaper.userId); if (!(dir.exists())) { dir.mkdir(); android.os.FileUtils.setPermissions(dir.getPath(), (((android.os.FileUtils.S_IRWXU) | (android.os.FileUtils.S_IRWXG)) | (android.os.FileUtils.S_IXOTH)), (-1), (-1)); } java.io.File file = new java.io.File(dir, com.android.server.WallpaperManagerService.WALLPAPER); android.os.ParcelFileDescriptor.ParcelFileDescriptor fd = android.os.ParcelFileDescriptor.ParcelFileDescriptor.open(file, ((MODE_CREATE) | (MODE_READ_WRITE))); if (!(android.os.SELinux.restorecon(file))) { return null; } wallpaper.name = name; return fd; } catch (java.io.FileNotFoundException e) { android.util.Slog.w(com.android.server.WallpaperManagerService.TAG, ""Error setting wallpaper"", e); } return null; }",8d1430329016d776d30248d0b32e7baf5a7c6b23,"updateWallpaperBitmapLocked(java.lang.String,com.android.server.WallpaperManagerService$WallpaperData)",328607,288,294
591559,testapps_ImsTestService_src_com_android_phone_testapps_imstestapp_TestImsService.java,4.0,"@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, ""TestImsService: onCreate""); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }",e4747a0b333640ec1504168fe46da99df11271b1,"@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, ""TestImsService: onCreate""); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); mTestImsConfig = new com.android.phone.testapps.imstestapp.TestImsConfigImpl(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }",43da3e06a6c5020760cffe025158ad4dee5dbbdd,onCreate(),onCreate(),5,4,"@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, ""TestImsService: onCreate""); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); mTestImsConfig = com.android.phone.testapps.imstestapp.TestImsConfigImpl.getInstance(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }",cb59e44dd6066d68cfc998a18359eed06c7361cc,onCreate(),380118,186,187
155012,sched_src_com_android_sched_util_Version.java,,,,"@javax.annotation.Nonnull public static com.android.sched.util.Version getVersion(@javax.annotation.Nonnull java.lang.String appName, @javax.annotation.Nonnull java.lang.ClassLoader loader) throws com.android.sched.util.codec.ParsingException, java.io.IOException { java.lang.String resourceName = appName + (com.android.sched.util.Version.FILE_SUFFIX); java.io.InputStream resourceStream = loader.getResourceAsStream(resourceName); if (resourceStream == null) { throw new java.io.FileNotFoundException(resourceName); } return new com.android.sched.util.Version(resourceStream); }",17a6aebfa91d484ccbbd1e82cbceee8fc3061687,,"getVersion(java.lang.String,java.lang.ClassLoader)",14,5,"private void init(java.io.InputStream is) throws java.io.IOException { java.util.Properties prop = new java.util.Properties(); prop.load(is); long versionFileVersion = java.lang.Long.parseLong(prop.getProperty(""version-file.version.code"")); assert versionFileVersion >= 1; version = prop.getProperty(""version""); assert (version) != null; releaseName = prop.getProperty(""version.release.name""); assert (releaseName) != null; releaseCode = java.lang.Integer.parseInt(prop.getProperty(""version.release.code"")); subReleaseCode = java.lang.Integer.parseInt(prop.getProperty(""version.sub-release.code"")); subReleaseKind = com.android.sched.util.SubReleaseKind.valueOf(com.android.sched.util.SubReleaseKind.class, prop.getProperty(""version.sub-release.kind"")); buildId = prop.getProperty(""version.buildid""); if (((buildId) != null) && (buildId.isEmpty())) { buildId = null; } codeBase = prop.getProperty(""version.sha""); if (((codeBase) != null) && (codeBase.isEmpty())) { codeBase = null; } if (((codeBase) == null) || ((buildId) == null)) { subReleaseKind = SubReleaseKind.ENGINEERING; } }",1073a867f1f69f35a18b5d5ee1c0a6a984d1cc1b,init(java.io.InputStream),215294,139,293
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,5.0,@java.lang.Override public void interfaceRemoved(java.lang.String iface) { mHandler.post(() -> { if (stopTrackingInterface(iface)) { trackFirstAvailableInterface(); } }); },d623bfae2528ae0fc0b36fc6289dc7975e15dabe,boolean statisified(android.net.NetworkCapabilities capabilities) { return this.mCapabilities.satisfiedByImmutableNetworkCapabilities(capabilities); },95cdb9521054d3ea4ddeb230e9bb7be55c7a83c4,interfaceRemoved(java.lang.String),statisified(android.net.NetworkCapabilities),7,19,boolean statisified(android.net.NetworkCapabilities requestedCapabilities) { return requestedCapabilities.satisfiedByNetworkCapabilities(mCapabilities); },2c824519ba361f26795e0ed8bf31c5d37f478fb4,statisified(android.net.NetworkCapabilities),177938,29,28
253791,luni_src_main_java_libcore_io_Os.java,26.0,"public void mincore(long address, long byteCount, byte[] vector) throws android.system.ErrnoException;",57b65558e8660eab3fcb826b5187f764f796d3e9,"public void mincore(long address, long byteCount, byte[] vector) throws libcore.io.ErrnoException;",e50ec1feaa1fd935e40f0694ef2d0b281de338d7,"mincore(long,long,byte[])","mincore(long,long,byte[])",8,24,"public void mincore(long address, long byteCount, byte[] vector) throws android.system.ErrnoException;",57b65558e8660eab3fcb826b5187f764f796d3e9,"mincore(long,long,byte[])",494657,26,25
253791,luni_src_main_java_libcore_io_Os.java,46.0,"public int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException;",566f7c5223af917ee09a1c869d19840e69d99964,"public int waitpid(int pid, android.util.MutableInt status, int options) throws libcore.io.ErrnoException;",3d46fb6155b07d7ef07db3dcb0cfa53f537cdb6a,"waitpid(int,android.util.MutableInt,int)","waitpid(int,android.util.MutableInt,int)",8,44,"public int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException;",566f7c5223af917ee09a1c869d19840e69d99964,"waitpid(int,android.util.MutableInt,int)",494584,29,28
402363,src_java_com_android_internal_telephony_uicc_UiccCard.java,24.0,public boolean hasCarrierPrivilegeRules() { return ((mCarrierPrivilegeRules) != null) && (mCarrierPrivilegeRules.hasCarrierPrivilegeRules()); },e98b581a19634b11de88867b02b2c5009e820602,public boolean hasCarrierPrivilegeRules() { synchronized(mLock) { return ((mCarrierPrivilegeRules) != null) && (mCarrierPrivilegeRules.hasCarrierPrivilegeRules()); } },67714ed3f3cff388f33234c29ab6b0a76ee2918b,hasCarrierPrivilegeRules(),hasCarrierPrivilegeRules(),4,25,public boolean hasCarrierPrivilegeRules() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules != null) && (carrierPrivilegeRules.hasCarrierPrivilegeRules()); },e00ab676d5ce0c43df15f6974246abdfde21efbd,hasCarrierPrivilegeRules(),378748,39,59
123954,sched_src_com_android_sched_vfs_DeflateFS.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(com.android.sched.vfs.BaseVDir parent, java.lang.String name) { return vfs.getVFileLocation(parent, name); }",e4ea011d6cf74f3cd77ad9093e3d5c7289d93535,,"getVFileLocation(com.android.sched.vfs.BaseVDir,java.lang.String)",6,19,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) { return vfs.getVFileLocation(parent, name); }",7fa02bbf65e499f67c54278161f5914b57854af2,"getVFileLocation(com.android.sched.vfs.BaseVDir,java.lang.String)",516617,63,74
411100,services_core_java_com_android_server_connectivity_Tethering.java,62.0,"private void disableWifiIpServingLocked(int apState) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, (""Canceling WiFi tethering request - AP_STATE="" + apState)); for (int i = 0; i < (mTetherStates.size()); i++) { com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism = mTetherStates.valueAt(i).stateMachine; if ((tism.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { tism.sendMessage(TetherInterfaceStateMachine.CMD_TETHER_UNREQUESTED); break; } } mWifiTetherRequested = false; }",215f168e7bb38b7508ec3b6dd9fc0d43463a3843,"private void disableWifiIpServingLocked(java.lang.String ifname, int apState) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, (""Canceling WiFi tethering request - AP_STATE="" + apState)); boolean found = false; if (!(android.text.TextUtils.isEmpty(ifname))) { final com.android.server.connectivity.Tethering.TetherState ts = mTetherStates.get(ifname); if (ts != null) { ts.stateMachine.unwanted(); found = true; } } else { for (int i = 0; i < (mTetherStates.size()); i++) { com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism = mTetherStates.valueAt(i).stateMachine; if ((tism.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { tism.unwanted(); found = true; break; } } } if (!found) { mLog.log((""Error disabling Wi-Fi IP serving; referenced interface: "" + ifname)); } mWifiTetherRequested = false; }",16c38427662367ec101cdd0e207d9c872880712b,disableWifiIpServingLocked(int),"disableWifiIpServingLocked(java.lang.String,int)",4,5,"private void disableWifiIpServingLocked(java.lang.String ifname, int apState) { mLog.log((""Canceling WiFi tethering request - AP_STATE="" + apState)); mWifiTetherRequested = false; if (!(android.text.TextUtils.isEmpty(ifname))) { final com.android.server.connectivity.Tethering.TetherState ts = mTetherStates.get(ifname); if (ts != null) { ts.stateMachine.unwanted(); return; } } for (int i = 0; i < (mTetherStates.size()); i++) { com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism = mTetherStates.valueAt(i).stateMachine; if ((tism.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { tism.unwanted(); return; } } mLog.log((""Error disabling Wi-Fi IP serving; "" + (android.text.TextUtils.isEmpty(ifname) ? ""no interface name specified"" : ""specified interface: "" + ifname))); }",9941357edf6e62f002f58aea3aa5f9b00d7a20cb,"disableWifiIpServingLocked(java.lang.String,int)",36727,291,258
589594,src_main_java_com_android_apksig_SigningCertificateLineage.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void spawnDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateEncodingException { int flags = calculateDefaultFlags(); spawnDescendant(parent, flags, child, flags); }",ad87e00c9ac63b90cbde1f27606b02eb3baa1cb1,,"spawnDescendant(com.android.apksig.SigningCertificateLineage$SignerConfig,com.android.apksig.SigningCertificateLineage$SignerConfig)",7,27,"public com.android.apksig.SigningCertificateLineage spawnDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateEncodingException { if ((parent == null) || (child == null)) { throw new java.lang.NullPointerException(""can't add new descendant to lineage with null inputs""); } com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities = new com.android.apksig.SigningCertificateLineage.SignerCapabilities.Builder().build(); return spawnDescendant(parent, child, signerCapabilities); }",f0a4ec498b6706416cfbfc4176a8ae607d70fa7d,"spawnDescendant(com.android.apksig.SigningCertificateLineage$SignerConfig,com.android.apksig.SigningCertificateLineage$SignerConfig)",400298,89,167
527235,luni_src_main_java_libcore_io_Linux.java,139.0,"public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;",3862b83271382c3ab6207b54a7f3278cee50a574,"public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.SendfileOffset inOffset, long byteCount) throws android.system.ErrnoException;",1e53998b8de0141435b615030a35df97a0d29360,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)","sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.system.SendfileOffset,long)",13,35,"public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.Int64Ref inOffset, long byteCount) throws android.system.ErrnoException;",6978383ff9af5abff2d135e807442d238a27673c,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.system.Int64Ref,long)",15011,47,47
269973,luni_src_test_java_tests_security_cert_X509Certificate2Test.java,26.0,"public void testGetExtendedKeyUsage() throws java.lang.Exception { assertNull(new tests.security.cert.X509Certificate2Test.MyX509Certificate().getExtendedKeyUsage()); java.security.cert.X509Certificate cert = generateCert(tests.security.cert.X509Certificate2Test.CERT_CORRECT); java.util.List<java.lang.String> l = cert.getExtendedKeyUsage(); assertNotNull(l); try { l.clear(); } catch (java.lang.UnsupportedOperationException expected) { } try { l.add(""Test""); } catch (java.lang.UnsupportedOperationException expected) { } try { l.remove(0); } catch (java.lang.UnsupportedOperationException expected) { } }",cb0e35333b3aeadce09d0f86d8b6adf0d3f7d542,"public void testGetExtendedKeyUsage() throws java.lang.Exception { assertNull(new tests.security.cert.X509Certificate2Test.MyX509Certificate().getExtendedKeyUsage()); java.security.cert.X509Certificate cert = generateCert(tests.security.cert.X509Certificate2Test.CERT_CORRECT); java.util.List<java.lang.String> l = cert.getExtendedKeyUsage(); assertNotNull(l); try { l.clear(); fail(""Should have thrown""); } catch (java.lang.UnsupportedOperationException expected) { } try { l.add(""Test""); fail(""Should have thrown""); } catch (java.lang.UnsupportedOperationException expected) { } try { l.remove(0); fail(""Should have thrown""); } catch (java.lang.UnsupportedOperationException expected) { } }",b345fcfa7e38e4c09c6e8c7c284360eb9d76f00e,testGetExtendedKeyUsage(),testGetExtendedKeyUsage(),9,26,"public void testGetExtendedKeyUsage() throws java.lang.Exception { assertNull(new tests.security.cert.X509Certificate2Test.MyX509Certificate().getExtendedKeyUsage()); java.security.cert.X509Certificate cert = generateCert(tests.security.cert.X509Certificate2Test.CERT_CORRECT); java.util.List<java.lang.String> l = cert.getExtendedKeyUsage(); assertNotNull(l); try { l.clear(); fail(); } catch (java.lang.UnsupportedOperationException expected) { } try { l.add(""Test""); fail(); } catch (java.lang.UnsupportedOperationException expected) { } try { l.remove(0); fail(); } catch (java.lang.UnsupportedOperationException expected) { } }",9af493535b406d356a11f1f16c69ed2d51d8ceb5,testGetExtendedKeyUsage(),51308,171,159
319807,src_com_android_networkrecommendation_WifiNotificationController.java,3.0,"private synchronized void checkAndSetNotification(android.net.NetworkInfo networkInfo, java.util.List<android.net.wifi.ScanResult> scanResults) { if (!(mNotificationEnabled)) return; if ((mWifiState) != (android.net.wifi.WifiManager.WIFI_STATE_ENABLED)) return; android.net.NetworkInfo.State state = NetworkInfo.State.DISCONNECTED; if (networkInfo != null) { state = networkInfo.getState(); } if ((state == (NetworkInfo.State.DISCONNECTED)) || (state == (NetworkInfo.State.UNKNOWN))) { if (scanResults != null) { int numOpenNetworks = 0; for (int i = (scanResults.size()) - 1; i >= 0; i--) { android.net.wifi.ScanResult scanResult = scanResults.get(i); if (((scanResult.capabilities) != null) && (scanResult.capabilities.equals(""[ESS]""))) { numOpenNetworks++; } } if (numOpenNetworks > 0) { if ((++(mNumScansSinceNetworkStateChange)) >= (com.android.networkrecommendation.WifiNotificationController.NUM_SCANS_BEFORE_ACTUALLY_SCANNING)) { setNotificationVisible(true, numOpenNetworks, false, 0); } return; } } } setNotificationVisible(false, 0, false, 0); }",05088ff3d292b55e52df67016427519f3eb6576f,"private void checkAndSetNotification(android.net.NetworkInfo networkInfo, java.util.List<android.net.wifi.ScanResult> scanResults) { if (!(mNotificationEnabled)) return; if ((mWifiState) != (android.net.wifi.WifiManager.WIFI_STATE_ENABLED)) return; android.net.NetworkInfo.State state = NetworkInfo.State.DISCONNECTED; if (networkInfo != null) { state = networkInfo.getState(); } if ((state == (NetworkInfo.State.DISCONNECTED)) || (state == (NetworkInfo.State.UNKNOWN))) { android.net.RecommendationResult result = getOpenNetworkRecommendation(scanResults); if ((result != null) && ((result.getWifiConfiguration()) != null)) { mRecommendedNetwork = result.getWifiConfiguration(); if ((++(mNumScansSinceNetworkStateChange)) >= (com.android.networkrecommendation.WifiNotificationController.NUM_SCANS_BEFORE_ACTUALLY_SCANNING)) { displayNotification(); } return; } } removeNotification(); }",2af73eadfdac5029c441a5040a4360eecef0fcc4,"checkAndSetNotification(android.net.NetworkInfo,java.util.List)","checkAndSetNotification(android.net.NetworkInfo,java.util.List)",6,1,"private void checkAndSetNotification(android.net.NetworkInfo networkInfo, java.util.List<android.net.wifi.ScanResult> scanResults) { if (!(mNotificationEnabled)) return; if ((mWifiState) != (android.net.wifi.WifiManager.WIFI_STATE_ENABLED)) return; android.net.NetworkInfo.State state = NetworkInfo.State.DISCONNECTED; if (networkInfo != null) { state = networkInfo.getState(); } if ((state == (NetworkInfo.State.DISCONNECTED)) || (state == (NetworkInfo.State.UNKNOWN))) { android.net.RecommendationResult result = getOpenNetworkRecommendation(scanResults); if ((result != null) && ((result.getWifiConfiguration()) != null)) { mRecommendedNetwork = result.getWifiConfiguration(); mNotificationBadgeBitmap = mWifiNotificationHelper.createNotificationBadgeBitmap(mRecommendedNetwork, scanResults); if (((++(mNumScansSinceNetworkStateChange)) >= (com.android.networkrecommendation.WifiNotificationController.NUM_SCANS_BEFORE_ACTUALLY_SCANNING)) && ((mNotificationBadgeBitmap) != null)) { displayNotification(); } return; } } removeNotification(); }",ccc44a46c4260f799fd00a97506c9f5243b16043,"checkAndSetNotification(android.net.NetworkInfo,java.util.List)",489897,225,257
554885,src_com_android_phone_SubscriptionInfoHelper.java,2.0,public boolean hasSubId() { return (com.android.phone.SubscriptionInfoHelper.mSubId) != (com.android.phone.SubscriptionInfoHelper.NO_SUB_ID); },622af63a1fcf0019f3e50dea838e0ad1f55fc2d2,public boolean hasSubId() { return (com.android.phone.SubscriptionInfoHelper.sSubId) != (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID); },de73c26359bfdca52708719b280029b90d0e825e,hasSubId(),hasSubId(),3,2,public boolean hasSubId() { return (mSubId) != (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID); },b865a8a6a4b3446e4084ab848ac9a1eb25d4802a,hasSubId(),415615,39,29
111404,build-system_builder_src_main_java_com_android_builder_internal_packaging_Packager.java,1.0,"void addZipFile(java.io.File zipFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException(""APK is already sealed""); } java.io.FileInputStream fis = null; try { mLogger.verbose(""%s:"", zipFile); mNullFilter.reset(zipFile); fis = new java.io.FileInputStream(zipFile); mBuilder.writeZip(fis, mNullFilter); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e, ""Failed to add %s"", zipFile); } finally { try { com.google.common.io.Closeables.close(fis, true); } catch (java.io.IOException e) { } } }",a3b1bc2c0694a000b0feea6f8f880b7c46d63be2,"void addZipFile(java.io.File zipFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { addZipFile(zipFile, null); }",9610e8e90b78187e0c4d9306888f35eb0614ffef,addZipFile(java.io.File),addZipFile(java.io.File),4,1,"void addZipFile(java.io.File zipFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException(""APK is already sealed""); } java.io.FileInputStream fis = null; try { mLogger.verbose(""%s:"", zipFile); mNullFilter.reset(zipFile); fis = new java.io.FileInputStream(zipFile); mBuilder.writeZip(fis, mNullFilter); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e, ""Failed to add %s"", zipFile); } finally { try { com.google.common.io.Closeables.close(fis, true); } catch (java.io.IOException e) { } } }",a3b1bc2c0694a000b0feea6f8f880b7c46d63be2,addZipFile(java.io.File),211872,58,234
579565,src_java_com_android_internal_telephony_RIL.java,216.0,"@java.lang.Override public void iccCloseLogicalChannel(int channel, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_CLOSE_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" channel = "") + channel)); } try { radioProxy.iccCloseLogicalChannel(rr.mSerial, channel); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""iccCloseLogicalChannel"", e); } } }",fd5dc2040459b9fa0360284e3ed70dbb5d200f8a,"@java.lang.Override public void iccCloseLogicalChannel(int channel, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIM_CLOSE_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" channel = "") + channel)); } try { radioProxy.iccCloseLogicalChannel(rr.mSerial, channel); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""iccCloseLogicalChannel"", e); } } }",4d7d7880e3effb51d14a9315a6380714a64b2f79,"iccCloseLogicalChannel(int,android.os.Message)","iccCloseLogicalChannel(int,android.os.Message)",3,216,"@java.lang.Override public void iccCloseLogicalChannel(int channel, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_CLOSE_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" channel = "") + channel)); } try { radioProxy.iccCloseLogicalChannel(rr.mSerial, channel); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""iccCloseLogicalChannel"", e); } } }",fd5dc2040459b9fa0360284e3ed70dbb5d200f8a,"iccCloseLogicalChannel(int,android.os.Message)",89273,228,224
137996,sched_src_com_android_sched_vfs_VPath.java,14.0,"@javax.annotation.Nonnull public java.lang.String getPathElementAsString(char separator) { return path.toString().replace(this.separator, separator); }",d849966c253caf0de80e5298194317e1685d08f9,"@javax.annotation.Nonnull public java.lang.String getPathElementAsString(char separator) { return path.toString().replace(getSeparator(), separator); }",d15495a05a68aa9d7fba17ee1661e4c872842a5e,getPathElementAsString(char),getPathElementAsString(char),4,13,"@javax.annotation.Nonnull public java.lang.String getPathElementAsString(char separator) { return path.toString().replace(this.separator, separator); }",d849966c253caf0de80e5298194317e1685d08f9,getPathElementAsString(char),39670,33,34
91995,luni_src_main_java_libcore_io_ForwardingOs.java,30.0,"public void kill(int pid, int signal) throws libcore.io.ErrnoException { os.kill(pid, signal); }",1504aa622c2241753695be9d8367d2475bc644e0,"public void kill(int pid, int signal) throws android.os.ErrnoException { os.kill(pid, signal); }",61a707c7e04da2609975e0f90083a587aead028d,"kill(int,int)","kill(int,int)",3,29,"public void kill(int pid, int signal) throws android.system.ErrnoException { os.kill(pid, signal); }",8b01ccfc29d5e1ed2a94ddb783c3bbdcef59b6f6,"kill(int,int)",170506,28,28
120910,jack-tests_src_com_android_jack_test_toolchain_JackBasedToolchain.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override @javax.annotation.Nonnull public final java.lang.String getLibraryExtension() { return "".jack""; }",af9cf27e68ec729fb2deebf72b1c5bde9ab2e995,,getLibraryExtension(),2,10,"@java.lang.Override @javax.annotation.Nonnull public java.lang.String getLibraryExtension() { return "".jack""; }",808ea0846d10dd9c4cc88411df1a7cd529c64a9d,getLibraryExtension(),266657,30,29
53694,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLECKeyFactory.java,1.0,"@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec instanceof java.security.spec.ECPrivateKeySpec) { java.security.spec.ECPrivateKeySpec ecKeySpec = ((java.security.spec.ECPrivateKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(ecKeySpec); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { java.security.spec.PKCS8EncodedKeySpec pkcs8KeySpec = ((java.security.spec.PKCS8EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded())); return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException((""Must use ECPrivateKeySpec or PKCS8EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",313a9728b481ccb15b6af9d3f213e169fe349043,"@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException(""keySpec == null""); } if (keySpec instanceof java.security.spec.ECPrivateKeySpec) { java.security.spec.ECPrivateKeySpec ecKeySpec = ((java.security.spec.ECPrivateKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(ecKeySpec); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { java.security.spec.PKCS8EncodedKeySpec pkcs8KeySpec = ((java.security.spec.PKCS8EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded())); return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException((""Must use ECPrivateKeySpec or PKCS8EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",b3f3bf55523d1dcb225d67cbaa354eec0a2fc9f8,engineGeneratePrivate(java.security.spec.KeySpec),engineGeneratePrivate(java.security.spec.KeySpec),3,1,"@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException(""keySpec == null""); } if (keySpec instanceof java.security.spec.ECPrivateKeySpec) { return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(((java.security.spec.ECPrivateKeySpec) (keySpec))); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { return org.apache.harmony.xnet.provider.jsse.OpenSSLKey.getPrivateKey(((java.security.spec.PKCS8EncodedKeySpec) (keySpec)), NativeCrypto.EVP_PKEY_EC); } throw new java.security.spec.InvalidKeySpecException((""Must use ECPrivateKeySpec or PKCS8EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",a62fb860c76d5575032beb9c25fc445330d02950,engineGeneratePrivate(java.security.spec.KeySpec),30523,343,215
252478,java_tests_RsTest_src_com_android_rs_test_UT_convert.java,0.0,public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_convert s = new com.android.rs.test.ScriptC_convert(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_convert_test(); pRS.finish(); waitForMessage(); pRS.destroy(); },f40ddaf691d01ea91f313e4c174db50d43c4be8e,public void run() { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); com.android.rs.test.ScriptC_convert s = new com.android.rs.test.ScriptC_convert(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_convert_test(); pRS.finish(); waitForMessage(); pRS.destroy(); },1fff79694ebc20124c1b42b5753179672d71f68c,run(),run(),7,0,public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_convert s = new com.android.rs.test.ScriptC_convert(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_convert_test(); pRS.finish(); waitForMessage(); pRS.destroy(); },f40ddaf691d01ea91f313e4c174db50d43c4be8e,run(),379338,94,100
116621,jack_src_com_android_jack_analysis_dependency_file_FileDependenciesComputation.java,,,,@java.lang.Override public synchronized void run(com.android.jack.ir.ast.JDefinedClassOrInterface declaredType) throws java.lang.Exception { if (declaredType.isExternal()) { return; } com.android.jack.analysis.dependency.file.FileDependenciesComputation.Visitor v = new com.android.jack.analysis.dependency.file.FileDependenciesComputation.Visitor(declaredType); v.accept(declaredType); },15b6b3885c8be5bddd7ece70e88d6bc222e24d59,,run(com.android.jack.ir.ast.JDefinedClassOrInterface),9,0,"@java.lang.Override public synchronized void run(com.android.jack.ir.ast.JDefinedClassOrInterface declaredType) throws java.lang.Exception { if (declaredType.isExternal()) { return; } com.android.jack.Jack.getSession().getFileDependencies().addMappingBetweenJavaFileAndType(declaredType.getSourceInfo().getFileName(), declaredType); }",6184b5a25e0dc2ccab4fbb935be42bd079c617b1,run(com.android.jack.ir.ast.JDefinedClassOrInterface),156360,97,80
422719,tzdata_prototype_updater_src_libcore_tzdata_prototype_updater_RulesCheckReceiver.java,0.0,"private static java.io.File copyDataToLocalFile(android.content.Context context) { java.io.File extractedFile = new java.io.File(context.getFilesDir(), ""temp.zip""); android.os.ParcelFileDescriptor fileDescriptor; try { fileDescriptor = context.getContentResolver().openFileDescriptor(TimeZoneRulesDataContract.DATA_URI, ""r""); if (fileDescriptor == null) { throw new java.io.FileNotFoundException(""ContentProvider returned null""); } } catch (java.io.FileNotFoundException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, (""copyDataToLocalFile: Unable to open file descriptor"" + (android.provider.TimeZoneRulesDataContract.DATA_URI)), e); return null; } try (android.os.ParcelFileDescriptor pfd = fileDescriptor;java.io.InputStream fis = new java.io.FileInputStream(pfd.getFileDescriptor());java.io.FileOutputStream fos = new java.io.FileOutputStream(extractedFile, false)) { libcore.io.Streams.copy(fis, fos); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, (""Unable to create asset storage file: "" + extractedFile), e); return null; } return extractedFile; }",c7176e25a84f247768e369c11d65245a44e3b0a2,"private static java.io.File copyDataToLocalFile(android.content.Context context) { java.io.File localFile; try { localFile = java.io.File.createTempFile(""temp"", "".zip"", context.getFilesDir()); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ""Unable to create local storage file"", e); return null; } android.os.ParcelFileDescriptor inputFileDescriptor; try { inputFileDescriptor = context.getContentResolver().openFileDescriptor(TimeZoneRulesDataContract.DATA_URI, ""r""); if (inputFileDescriptor == null) { throw new java.io.FileNotFoundException(""ContentProvider returned null""); } } catch (java.io.FileNotFoundException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, (""copyDataToLocalFile: Unable to open file descriptor"" + (android.provider.TimeZoneRulesDataContract.DATA_URI)), e); return null; } try (android.os.ParcelFileDescriptor pfd = inputFileDescriptor;java.io.InputStream fis = new java.io.FileInputStream(pfd.getFileDescriptor(), false);java.io.FileOutputStream fos = new java.io.FileOutputStream(localFile, false)) { libcore.io.Streams.copy(fis, fos); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, (""Unable to create asset storage file: "" + localFile), e); return null; } return localFile; }",931b02ce75158c1693f1d18f522c07b37adadcc7,copyDataToLocalFile(android.content.Context),copyDataToLocalFile(android.content.Context),8,1,"private static java.io.File copyDataToLocalFile(android.content.Context context, android.os.ParcelFileDescriptor inputFileDescriptor) { try (android.os.ParcelFileDescriptor pfd = inputFileDescriptor) { java.io.File localFile; try { localFile = java.io.File.createTempFile(""temp"", "".zip"", context.getFilesDir()); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ""Unable to create local storage file"", e); return null; } java.io.InputStream fis = new java.io.FileInputStream(pfd.getFileDescriptor(), false); try (java.io.FileOutputStream fos = new java.io.FileOutputStream(localFile, false)) { libcore.io.Streams.copy(fis, fos); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, (""Unable to create asset storage file: "" + localFile), e); return null; } return localFile; } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ""Unable to close ParcelFileDescriptor"", e); return null; } }",037ca4f6672b204d24a858e214689018e608e4f9,"copyDataToLocalFile(android.content.Context,android.os.ParcelFileDescriptor)",323340,366,294
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,15.0,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",7f7f5f8b36f8ad97710bdeb7f3267b786b855ef2,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",d93d4fd0b0edf7aad02bcae088d47fa82fda567f,testAesCbcHmacSha512Tcp4UdpEncap(),testAesCbcHmacSha512Tcp4UdpEncap(),9,16,"public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",0bac0d97261f089fbb942272b73ddf3ff42fc904,testAesCbcHmacSha512Tcp4UdpEncap(),1909,216,216
90966,luni_src_test_java_libcore_java_nio_channels_FileIOInterruptTest.java,,,,private static native void mkfifo(java.lang.String path) throws libcore.io.ErrnoException;,2926967d1c2dfeae54bcf9254f993689f314aa33,,mkfifo(java.lang.String),7,6,"private void testChannelRead_exceptionWhenAlreadyClosed(libcore.java.nio.channels.FileIOInterruptTest.ChannelReader.Method method) throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoWriter fifoWriter = new libcore.java.nio.channels.FileIOInterruptTest.FifoWriter(fifoFile); fifoWriter.start(); java.io.FileInputStream fis = new java.io.FileInputStream(fifoFile); java.nio.channels.FileChannel fileInputChannel = fis.getChannel(); fileInputChannel.close(); java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocateDirect(10); try { if (method == (libcore.java.nio.channels.FileIOInterruptTest.ChannelReader.Method.READ)) { fileInputChannel.read(buffer); } else { java.nio.ByteBuffer buffer2 = java.nio.ByteBuffer.allocateDirect(10); fileInputChannel.read(new java.nio.ByteBuffer[]{ buffer, buffer2 }); } fail(); } catch (java.io.IOException expected) { assertSame(java.nio.channels.ClosedChannelException.class, expected.getClass()); } fifoWriter.tidyUp(); }",376d02c709c9b4da6947bb2b5bd5868a2ce0e9b3,testChannelRead_exceptionWhenAlreadyClosed(libcore.java.nio.channels.FileIOInterruptTest$ChannelReader$Method),329350,25,252
149186,sched_src_com_android_sched_vfs_MessageDigestFS.java,0.0,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return new com.android.sched.vfs.MessageDigestFS.MessageDigestVFile(this, vfs.createVFile(parent, name)); }",d3d4ec152bb46f121146f59889336715d214a319,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return new com.android.sched.vfs.MessageDigestFS.MessageDigestVFile(this, vfs.createVFile(parent.getWrappedDir(), name)); }",53bf726ca10d397ad7070e1326021c27007f6eae,"createVFile(com.android.sched.vfs.BaseVDir,java.lang.String)","createVFile(com.android.sched.vfs.MessageDigestFS$MessageDigestVDir,java.lang.String)",3,4,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return new com.android.sched.vfs.MessageDigestFS.MessageDigestVFile(this, parent.getWrappedDir().createVFile(name)); }",fbc1854ad41e48cb9d8b864fef100d8b745739b7,"createVFile(com.android.sched.vfs.MessageDigestFS$MessageDigestVDir,java.lang.String)",215896,114,111
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,,"public void testNativeUdpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }",8e289583b10aadcd2209f6f8bdf53b4681b70375,,testNativeUdpSocketPair(),15,2,"public void testNativeUdpSocketPair() throws java.lang.Exception { for (java.lang.String addr : android.net.cts.IpSecBaseTest.LOOPBACK_ADDRS) { java.net.InetAddress local = java.net.InetAddress.getByName(addr); try (android.net.IpSecTransform transform = buildDefaultTransform(local)) { android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, mISM, transform, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); } } }",1426652723e38c724e9b7d7dddc47ad4ceb5b72d,testNativeUdpSocketPair(),381460,121,159
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,29.0,"boolean okToConnect(android.bluetooth.BluetoothDevice device) { throw new java.lang.IllegalStateException(""Implement me""); }",6c6552b9c7ab96853de226929cacac1f2137c721,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : too many connected devices"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority) + "" bondState="") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority)); return false; } return true; }",83f0db06b746c4b7533a813cac2a124537025c9d,okToConnect(android.bluetooth.BluetoothDevice),okToConnect(android.bluetooth.BluetoothDevice),10,27,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority) + "" bondState="") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority)); return false; } return true; }",223a9d53c68491d3d72ea9e6be18cdbce01393a0,okToConnect(android.bluetooth.BluetoothDevice),152177,366,302
152477,jack-tests_src_com_android_jack_test_toolchain_JackApiV01IncrementalToolchain.java,,,,"private void touchSourceFile(java.io.File... sources) throws java.lang.Exception { java.util.List<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.io.File source : sources) { com.android.jack.test.toolchain.AbstractTestTools.getJavaFiles(source, files, false); } if ((files.size()) > 0) { java.io.File fileToTouch = files.get(((files.size()) / 2)); if (!(fileToTouch.setLastModified(java.lang.System.currentTimeMillis()))) { throw new java.lang.AssertionError(((""Could not touch file '"" + (fileToTouch.getPath())) + ""'"")); } } }",890b8fdc7f7297f1b833032d1210dfbb71fb41ff,,touchSourceFile(java.io.File[]),19,1,"private void touchSourceFile(@javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.io.File source : sources) { com.android.jack.test.toolchain.AbstractTestTools.getJavaFiles(source, files, false); } if ((files.size()) > 0) { java.io.File fileToTouch = files.get(((files.size()) / 2)); if (!(fileToTouch.setLastModified(java.lang.System.currentTimeMillis()))) { throw new java.lang.AssertionError(((""Could not touch file '"" + (fileToTouch.getPath())) + ""'"")); } } }",4e643ce2dca6e9547f1809bf87c1cf199f130199,touchSourceFile(java.io.File[]),454160,165,170
81416,tests_tests_renderscript_src_android_renderscript_cts_TestTgamma.java,,,,"private void checkTgammaFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testTgammaFloat3(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTgammaFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTgammaFloat3(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTgammaFloat3: "" + (e.toString()))); } }",5272f003027afffd63b8acb8af22cde285c8a36c,,checkTgammaFloat3(),9,1,"private void checkTgammaFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -1293314728412085568L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testTgammaFloat3Float3(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTgammaFloat3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTgammaFloat3Float3(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTgammaFloat3Float3: "" + (e.toString()))); } }",ecb25ce62659834f0a3a6064a3620189442f90cf,checkTgammaFloat3Float3(),143057,298,279
45366,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_welcome_WelcomeWizard.java,3.0,@java.lang.Override public void addPages() { mWelcomePage = new com.android.ide.eclipse.adt.internal.welcome.WelcomeWizardPage(); addPage(mWelcomePage); if (!(mStore.isPingOptIn())) { mUsagePage = new com.android.ide.eclipse.adt.internal.welcome.UsagePermissionPage(); addPage(mUsagePage); } },feda24b5cbed9f13e83d36ea28785a9f9fb379a3,@java.lang.Override public void addPages() { if (mShowWelcomePage) { mWelcomePage = new com.android.ide.eclipse.adt.internal.welcome.WelcomeWizardPage(); addPage(mWelcomePage); } if ((mShowUsagePage) && (!(mStore.isPingOptIn()))) { mUsagePage = new com.android.ide.eclipse.adt.internal.welcome.UsagePermissionPage(); addPage(mUsagePage); } },56cd88de4d4e8051c4516297492ccb69fc6f1852,addPages(),addPages(),2,3,@java.lang.Override public void addPages() { if (mShowWelcomePage) { mWelcomePage = new com.android.ide.eclipse.adt.internal.welcome.WelcomeWizardPage(); addPage(mWelcomePage); } if ((mShowUsagePage) && (!(mStore.hasPingId()))) { mUsagePage = new com.android.ide.eclipse.adt.internal.welcome.UsagePermissionPage(); addPage(mUsagePage); } },0adefe78f7afe2e652628a024e9d8ec600e1d73c,addPages(),192535,104,103
155834,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_NdkComponentModelPlugin.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void execute(com.android.build.gradle.managed.BuildType buildType) { com.android.build.gradle.internal.NdkConfigHelper.init(buildType.getNdk()); },2fd483cb217061d9d5706b369f0bc530418c0e7f,,execute(com.android.build.gradle.managed.BuildType),5,4,@java.lang.Override public void execute(com.android.build.gradle.managed.BuildType buildType) { com.android.build.gradle.internal.NdkOptionsHelper.init(buildType.getNdk()); },4ebadceb2b1d8dc7906d38a6a8500df4677e3ed5,execute(com.android.build.gradle.managed.BuildType),84148,50,50
207793,src_com_android_bluetooth_map_BluetoothMnsObexClient.java,5.0,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION : handleRegistration(msg.arg1, msg.arg2); break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SEND_EVENT : sendEventHandler(((byte[]) (msg.obj)), msg.arg1); break; default : break; } }",babe1773f06c9824df78f3cd9f47eeec36edb9aa,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION : if (com.android.bluetooth.map.BluetoothMnsObexClient.V) android.util.Log.v(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, (((""Reg masId: "" + (msg.arg1)) + "" notfStatus: "") + (msg.arg2))); if ((mMnsRecord) != null) { handleRegistration(msg.arg1, msg.arg2); } else { if (com.android.bluetooth.map.BluetoothMnsObexClient.D) android.util.Log.d(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, ""MNS SDP info not available yet - Cannot Connect.""); } break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SEND_EVENT : sendEventHandler(((byte[]) (msg.obj)), msg.arg1); break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SDP_SEARCH_REGISTRATION : notifyMnsSdpSearch(); mMnsLstRegRqst = new com.android.bluetooth.map.BluetoothMnsObexClient.MnsSdpSearchInfo(true, msg.arg1, msg.arg2); android.os.Message msgReg = mHandler.obtainMessage(com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION, msg.arg1, msg.arg2); if (com.android.bluetooth.map.BluetoothMnsObexClient.V) android.util.Log.v(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, (((""SearchReg masId: "" + (msg.arg1)) + "" notfStatus: "") + (msg.arg2))); mHandler.sendMessageDelayed(msgReg, MNS_SDP_SEARCH_DELAY); break; default : break; } }",f11eed1e3a5b022ac9dfc83f9c923af830a7a7c2,handleMessage(android.os.Message),handleMessage(android.os.Message),8,5,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION : if (com.android.bluetooth.map.BluetoothMnsObexClient.V) android.util.Log.v(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, (((""Reg masId: "" + (msg.arg1)) + "" notfStatus: "") + (msg.arg2))); if (isValidMnsRecord()) { handleRegistration(msg.arg1, msg.arg2); } else { if (com.android.bluetooth.map.BluetoothMnsObexClient.D) android.util.Log.d(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, ""MNS SDP info not available yet - Cannot Connect.""); } break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SEND_EVENT : sendEventHandler(((byte[]) (msg.obj)), msg.arg1); break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SDP_SEARCH_REGISTRATION : notifyMnsSdpSearch(); mMnsLstRegRqst = new com.android.bluetooth.map.BluetoothMnsObexClient.MnsSdpSearchInfo(true, msg.arg1, msg.arg2); android.os.Message msgReg = mHandler.obtainMessage(com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION, msg.arg1, msg.arg2); if (com.android.bluetooth.map.BluetoothMnsObexClient.V) android.util.Log.v(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, (((""SearchReg masId: "" + (msg.arg1)) + "" notfStatus: "") + (msg.arg2))); mHandler.sendMessageDelayed(msgReg, MNS_SDP_SEARCH_DELAY); break; default : break; } }",319eddba6cd3c3e18fca697a85b8b3a1a79c8536,handleMessage(android.os.Message),474648,479,475
531103,src_com_android_bluetooth_hfp_HeadsetNativeInterface.java,,,,"private void onVolumeChanged(int type, int volume, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VOLUME_CHANGED); event.valueInt = type; event.valueInt2 = volume; event.device = getDevice(address); sendMessageToService(event); }",32714fc0a5fffa581e91d3248d31e3ca8a43b361,,"onVolumeChanged(int,int,byte[])",10,41,"private void onVolumeChanged(int type, int volume, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VOLUME_CHANGED, type, volume, getDevice(address)); sendMessageToService(event); }",e4280a38631e77ee0b15b6ed31e53c91e499a8b8,"onVolumeChanged(int,int,byte[])",386035,91,76
229489,jack-coverage_src_com_android_jack_coverage_CodeCoveragePlugin.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.scheduler.ProductionSet getAddedProductions(@javax.annotation.Nonnull com.android.sched.util.config.Config config, @javax.annotation.Nonnull com.android.sched.scheduler.Scheduler scheduler) { com.android.sched.scheduler.ProductionSet set = scheduler.createProductionSet(); if (config.get(CodeCoverage.CODE_COVERVAGE).booleanValue()) { set.add(com.android.jack.coverage.CodeCoverageMetadataFile.class); } return set; }",b2bc8fcbd7b31c44fd1ea7fd45dfbc499728cad3,,"getAddedProductions(com.android.sched.util.config.Config,com.android.sched.scheduler.Scheduler)",5,3,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.scheduler.ProductionSet getProductions(@javax.annotation.Nonnull com.android.sched.util.config.Config config, @javax.annotation.Nonnull com.android.sched.scheduler.Scheduler scheduler) { com.android.sched.scheduler.ProductionSet set = scheduler.createProductionSet(); if (config.get(CodeCoverage.CODE_COVERVAGE).booleanValue()) { set.add(com.android.jack.coverage.CodeCoverageMetadataFile.class); } return set; }",b49c2579dba3308d1ff1d46f6732c41ca57de6ea,"getProductions(com.android.sched.util.config.Config,com.android.sched.scheduler.Scheduler)",282303,125,124
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,57.0,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",f011d737e38902def2e55e998b558dea13bf609f,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",2436f59d312e760aefd720516c87d11e0e1b8bee,testAesCbcHmacSha1Tcp4UdpEncap(),testAesCbcHmacSha1Tcp4UdpEncap(),9,66,"public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",1469fa3ce4907404d1b8af98836e0cbdfbeddacd,testAesCbcHmacSha1Tcp4UdpEncap(),1879,216,216
91712,build-system_builder_src_main_java_com_android_builder_DefaultBuildType.java,6.0,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""jniDebugBuild"", mJniDebugBuild).add(""renderscriptDebugBuild"", mRenderscriptDebugBuild).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).add(""signingConfig"", mSigningConfig).toString(); }",4987c2f4d919c5c4f094d391df22a269b978a364,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""instrumented"", mInstrumented).add(""jniDebugBuild"", mJniDebugBuild).add(""renderscriptDebugBuild"", mRenderscriptDebugBuild).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).add(""signingConfig"", mSigningConfig).toString(); }",af04e2939872509b2dae51bcf1c2162476be57cb,toString(),toString(),6,4,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""testCoverageEnabled"", mTestCoverageEnabled).add(""jniDebugBuild"", mJniDebugBuild).add(""renderscriptDebugBuild"", mRenderscriptDebugBuild).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).add(""signingConfig"", mSigningConfig).toString(); }",0f5a8c30633635f50fa0e0f9a5c228fbe7ac1a02,toString(),289557,160,163
105353,src_com_google_gct_idea_appengine_deploy_AppEngineUpdater.java,3.0,private void compileAndUpload() { final java.lang.Runnable startUploading = new java.lang.Runnable() { @java.lang.Override public void run() { com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { startUploadingProcess(); } }); } }; com.android.tools.idea.gradle.invoker.GradleInvoker.getInstance(myProject).compileJava(new java.lang.Module[]{ myModule }); startUploading.run(); },cdfb8bdfcb9effada273f7e8b48bbbdf53e6c40b,"private void compileAndUpload() { final java.lang.Runnable startUploading = new java.lang.Runnable() { @java.lang.Override public void run() { com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { startUploadingProcess(); } }); } }; final com.android.tools.idea.gradle.invoker.GradleInvoker invoker = com.android.tools.idea.gradle.invoker.GradleInvoker.getInstance(myProject); final com.android.tools.idea.gradle.invoker.GradleInvoker.AfterGradleInvocationTask deployAfter = new com.android.tools.idea.gradle.invoker.GradleInvoker.AfterGradleInvocationTask() { @java.lang.Override public void execute(@org.jetbrains.annotations.NotNull com.android.tools.idea.gradle.invoker.GradleInvocationResult result) { if (result.isBuildSuccessful()) { startUploading.run(); } invoker.removeAfterGradleInvocationTask(this); } }; invoker.addAfterGradleInvocationTask(deployAfter); invoker.assemble(new java.lang.Module[]{ myModule }, GradleInvoker.TestCompileType.NONE); }",7a5e3478c209f1c1628d81d25c682b9d8571746f,compileAndUpload(),compileAndUpload(),4,2,"private void compileAndUpload() { final java.lang.Runnable startUploading = new java.lang.Runnable() { @java.lang.Override public void run() { com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { startUploadingProcess(); } }); } }; final com.android.tools.idea.gradle.invoker.GradleInvoker invoker = com.android.tools.idea.gradle.invoker.GradleInvoker.getInstance(myProject); final com.android.tools.idea.gradle.invoker.GradleInvoker.AfterGradleInvocationTask deployAfter = new com.android.tools.idea.gradle.invoker.GradleInvoker.AfterGradleInvocationTask() { @java.lang.Override public void execute(@org.jetbrains.annotations.NotNull com.android.tools.idea.gradle.invoker.GradleInvocationResult result) { invoker.removeAfterGradleInvocationTask(this); if (result.isBuildSuccessful()) { startUploading.run(); } } }; invoker.addAfterGradleInvocationTask(deployAfter); invoker.assemble(new java.lang.Module[]{ myModule }, GradleInvoker.TestCompileType.NONE); }",7677225b9796cfb71e2a68180fcfb76beefdbc32,compileAndUpload(),111034,268,268
140434,jack_tests_com_android_jack_VersionTest.java,,,,@org.junit.Test public void testGetVersion() { com.android.jack.Version version = com.android.jack.Jack.getVersion(); assertNotNull(version); assertNotNull(version.getVersion()); assertNotNull(version.getVerboseVersion()); assertNotNull(version.getReleaseName()); assertTrue(((version.getReleaseCode()) > 0)); assertTrue(((version.getSubReleaseCode()) > 0)); if (((version.getBuildId()) == null) || ((version.getCodeBase()) == null)) { assertTrue(((version.getSubReleaseKind()) == (SubReleaseKind.ENGINEERING))); } },1a9cc3f9b953f8a7d0702881cb4ed8d3ca940406,,testGetVersion(),4,0,@org.junit.Test public void testVersion() { com.android.jack.Version version = com.android.jack.Jack.getVersion(); assertNotNull(version); assertNotNull(version.getVersion()); assertNotNull(version.getVerboseVersion()); assertNotNull(version.getReleaseName()); assertTrue(((version.getReleaseCode()) > 0)); assertTrue(((version.getSubReleaseCode()) > 0)); if (((version.getBuildId()) == null) || ((version.getCodeBase()) == null)) { assertTrue(((version.getSubReleaseKind()) == (SubReleaseKind.ENGINEERING))); } },0e46c27193f43227919696c87f3a04bf65478416,testVersion(),141229,122,121
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,64.0,"private void compare(java.lang.String testName, java.lang.String format, java.lang.String expected) { assertTrue(((((testName + "" got: "") + format) + "" expected: "") + expected), format.equals(expected)); }",b5644d352b02bf68af7bb9c61017e5714f929f61,"public void testFormatDouble_maximumFractionDigits() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###0.##"", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMaximumFractionDigits(3); assertEquals(3, df.getMaximumFractionDigits()); assertEquals(""1.235"", df.format(1.23456)); df.setMinimumFractionDigits(4); assertEquals(4, df.getMaximumFractionDigits()); assertEquals(""456.0000"", df.format(456)); df = new java.text.DecimalFormat(""##0.#""); df.setMaximumFractionDigits(30); assertEquals(""0"", df.format(0.0)); assertEquals(""-0"", df.format((-0.0))); assertEquals(""1"", df.format(1.0)); assertEquals(""-1"", df.format((-1.0))); }",f220390c9bf8fe6ae143311556207af553c2b698,"compare(java.lang.String,java.lang.String,java.lang.String)",testFormatDouble_maximumFractionDigits(),2,31,"public void test_formatDouble_maximumFractionDigits() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###0.##"", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMaximumFractionDigits(3); assertEquals(3, df.getMaximumFractionDigits()); assertEquals(""1.235"", df.format(1.23456)); df.setMinimumFractionDigits(4); assertEquals(4, df.getMaximumFractionDigits()); assertEquals(""456.0000"", df.format(456)); df = new java.text.DecimalFormat(""##0.#""); df.setMaximumFractionDigits(30); assertEquals(""0"", df.format(0.0)); assertEquals(""-0"", df.format((-0.0))); assertEquals(""1"", df.format(1.0)); assertEquals(""-1"", df.format((-1.0))); }",44a9b25cc7231708d46d8d9968cd35c6a5b74e4e,test_formatDouble_maximumFractionDigits(),84373,149,150
379932,core_java_android_net_nsd_NsdManager.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void fatal(java.lang.String msg) { android.util.Log.e(android.net.nsd.NsdManager.TAG, msg); throw new java.lang.RuntimeException(msg); }",df5ea9da636ebb19d655406e70b7af5d35b8bdb1,,fatal(java.lang.String),9,30,"private static void fatal(java.lang.String msg) { android.util.Log.e(android.net.nsd.NsdManager.TAG, msg); throw new java.lang.RuntimeException(msg); }",b7087a0f258c33eb189ea794cbbae803eaaeb378,fatal(java.lang.String),79032,46,47
343183,service_java_com_android_server_wifi_WifiNative.java,247.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public int hashCode() { int result = ((ssid) == null) ? 0 : ssid.hashCode(); result ^= (((int) (flags)) * 31) + (((int) (auth_bit_field)) >> 8); return result; },43387de0e8ce5e9842cda7f2983c410ff3eb7e96,,hashCode(),7,48,@java.lang.Override public int hashCode() { int result = ((ssid) == null) ? 0 : ssid.hashCode(); result ^= (((int) (flags)) * 31) + (((int) (auth_bit_field)) << 8); return result; },3bc5692f1f53aaa1d8942c2a5a0da75206abd5f7,hashCode(),449011,66,65
20840,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_build_nonjava_JavaGenerator.java,,,,java.util.List<org.eclipse.core.resources.IFile> isDependency(org.eclipse.core.resources.IFile file) { java.util.ArrayList<org.eclipse.core.resources.IFile> files = new java.util.ArrayList<org.eclipse.core.resources.IFile>(); for (com.android.ide.eclipse.adt.internal.build.nonjava.NonJavaFileBundle bundle : mFiles.values()) { if (bundle.dependsOn(file)) { files.add(bundle.getSourceFile()); } } return files; },8eca3bbb53cc54dc18fb6ae7d2edcb040f3bfe5c,,isDependency(org.eclipse.core.resources.IFile),4,12,java.util.List<org.eclipse.core.resources.IFile> isDependency(org.eclipse.core.resources.IFile file) { java.util.ArrayList<org.eclipse.core.resources.IFile> files = new java.util.ArrayList<org.eclipse.core.resources.IFile>(); for (com.android.ide.eclipse.adt.internal.build.NonJavaFileBundle bundle : mFiles.values()) { if (bundle.dependsOn(file)) { files.add(bundle.getSourceFile()); } } return files; },99c9839a47c3cba96da08cd20b7fe4ba0f589224,isDependency(org.eclipse.core.resources.IFile),479514,127,124
81416,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,,,,"public static void computeMax(android.renderscript.cts.TestMax.ArgumentsFloatFloatFloat args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((float) (java.lang.Math.max(args.in, args.in1))); }",d2ce0803c8059499fce8eed67e16673f86a3ae15,,computeMax(android.renderscript.cts.TestMax$ArgumentsFloatFloatFloat),9,15,"public static void computeMax(android.renderscript.cts.TestMax.ArgumentsShortShortShort args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((short) (java.lang.StrictMath.max(args.inV1, args.inV2))); }",86eb9307e90fe230ce6886253a3a824e9969c8db,computeMax(android.renderscript.cts.TestMax$ArgumentsShortShortShort),142487,65,68
111322,updater_src_com_intellij_updater_Patch.java,1.0,"public java.util.Map<java.lang.String, java.lang.Long> digestFiles(java.io.File dir, java.util.List<java.lang.String> ignoredFiles, com.intellij.updater.UpdaterUI ui) throws com.intellij.updater.OperationCancelledException, java.io.IOException { java.util.Map<java.lang.String, java.lang.Long> result = new java.util.HashMap<java.lang.String, java.lang.Long>(); java.util.LinkedHashSet<java.lang.String> paths = com.intellij.updater.Utils.collectRelativePaths(dir); for (java.lang.String each : paths) { if (ignoredFiles.contains(each)) continue; ui.setStatus(each); ui.checkCancelled(); result.put(each, digestFile(new java.io.File(dir, each))); } return result; }",6eae3cd634bee0763f8c251c1f405ba004f326db,"public java.util.Map<java.lang.String, java.lang.Long> digestFiles(java.io.File dir, java.util.List<java.lang.String> ignoredFiles, com.intellij.updater.UpdaterUI ui) throws com.intellij.updater.OperationCancelledException, java.io.IOException { java.util.Map<java.lang.String, java.lang.Long> result = new java.util.LinkedHashMap<java.lang.String, java.lang.Long>(); java.util.LinkedHashSet<java.lang.String> paths = com.intellij.updater.Utils.collectRelativePaths(dir, isStrict); for (java.lang.String each : paths) { if (ignoredFiles.contains(each)) continue; ui.setStatus(each); ui.checkCancelled(); result.put(each, digestFile(new java.io.File(dir, each))); } return result; }",12b538661f65d91df5a48cf327d3700c56f9a9fb,"digestFiles(java.io.File,java.util.List,com.intellij.updater.UpdaterUI)","digestFiles(java.io.File,java.util.List,com.intellij.updater.UpdaterUI)",3,1,"public java.util.Map<java.lang.String, java.lang.Long> digestFiles(java.io.File dir, java.util.List<java.lang.String> ignoredFiles, com.intellij.updater.UpdaterUI ui) throws com.intellij.updater.OperationCancelledException, java.io.IOException { java.util.Map<java.lang.String, java.lang.Long> result = new java.util.LinkedHashMap<java.lang.String, java.lang.Long>(); java.util.LinkedHashSet<java.lang.String> paths = com.intellij.updater.Utils.collectRelativePaths(dir, myIsStrict); for (java.lang.String each : paths) { if (ignoredFiles.contains(each)) continue; ui.setStatus(each); ui.checkCancelled(); result.put(each, digestFile(new java.io.File(dir, each))); } return result; }",f0d7e59122243726f48703ad07e80c8a09bbefee,"digestFiles(java.io.File,java.util.List,com.intellij.updater.UpdaterUI)",297105,204,205
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,39.0,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",013348b9d8071705cd25f84b41f9a82734deaadf,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",6de5af2c889b235d724626bb96043125b3089029,testAesCbcHmacMd5Tcp4(),testAesCbcHmacMd5Tcp4(),15,60,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",651632591d12248bdaf7c7bf65f861546e54f33a,testAesCbcHmacMd5Tcp4(),381500,189,181
141690,sched_src_com_android_sched_util_codec_OrCodec.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.String apply(com.android.sched.util.codec.StringCodec<? extends T> codec) { return codec.getVariableName(); },321acee332482ffc47ba2fc1a640530f0795ab30,,apply(com.android.sched.util.codec.StringCodec),3,5,@java.lang.Override public java.lang.String apply(@javax.annotation.Nonnull com.android.sched.util.codec.StringCodec<? extends T> codec) { return codec.getVariableName(); },4546c5ab19fa0168cf77cd65f9c6dd900b3df6fa,apply(com.android.sched.util.codec.StringCodec),396736,40,45
562929,src_com_android_bluetooth_pbap_BluetoothPbapService.java,1.0,"@java.lang.Override public int getState() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""getState = "" + (mService.getState()))); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } return service.getState(); }",ab0714aa211ee5cf3592ad1a4e6e7fd57c63370e,"@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""getConnectedDevices""); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return new java.util.ArrayList<>(0); } return service.getConnectedDevices(); }",9d12863587b4549d74b8b1f4f5044a6821e0b5d8,getState(),getConnectedDevices(),2,10,"@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""getConnectedDevices""); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(); if (service == null) { return new java.util.ArrayList<>(0); } return service.getConnectedDevices(); }",39e7239651b144ced5f26974adaef1fc23058fa8,getConnectedDevices(),222987,142,119
555560,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,27.0,"private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local) throws java.lang.Exception { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int localPort = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, transform); byte[] data = new java.lang.String((""Best test data ever! Port: "" + localPort)).getBytes(""UTF-8""); byte[] in = new byte[data.length]; android.system.Os.sendto(udpSocket, data, 0, data.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertTrue(""Encapsulated data did not match."", java.util.Arrays.equals(data, in)); mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); }",61deb82cdd63ceab9822549c6498d5b3b956e3c6,"private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local) throws java.lang.Exception { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int localPort = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, transform); byte[] in = new byte[android.net.cts.IpSecManagerTest.TEST_DATA.length]; android.system.Os.sendto(udpSocket, android.net.cts.IpSecManagerTest.TEST_DATA, 0, android.net.cts.IpSecManagerTest.TEST_DATA.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertArrayEquals(""Encapsulated data did not match."", android.net.cts.IpSecManagerTest.TEST_DATA, in); mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); }",8d4c632bbb4b9a5ac58f5cc14c88512416111d7a,"checkUnconnectedUdp(android.net.IpSecTransform,java.net.InetAddress)","checkUnconnectedUdp(android.net.IpSecTransform,java.net.InetAddress)",9,47,"private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local, int sendCount) throws java.lang.Exception { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int localPort = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, transform); for (int i = 0; i < sendCount; i++) { byte[] in = new byte[android.net.cts.IpSecManagerTest.TEST_DATA.length]; android.system.Os.sendto(udpSocket, android.net.cts.IpSecManagerTest.TEST_DATA, 0, android.net.cts.IpSecManagerTest.TEST_DATA.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertArrayEquals(""Encapsulated data did not match."", android.net.cts.IpSecManagerTest.TEST_DATA, in); } mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); }",01285ae978033b2feab22044af2c2169631194af,"checkUnconnectedUdp(android.net.IpSecTransform,java.net.InetAddress,int)",439659,248,267
141061,jack_src_com_android_jack_server_ServerTaskSpawningVM.java,0.0,"@java.lang.Override public int run(@javax.annotation.Nonnull java.io.PrintStream out, @javax.annotation.Nonnull java.io.PrintStream err, @javax.annotation.Nonnull java.io.File pwd, @javax.annotation.Nonnull com.android.sched.util.config.cli.TokenIterator args) { java.lang.String jackJarPath = getJackJarPath(); if (jackJarPath == null) { return ServerExitStatus.FAILURE_JACK_JAR_NOT_FOUND; } java.util.List<java.lang.String> commandLineArgs; try { commandLineArgs = buildArgs(jackJarPath, args); } catch (java.lang.Exception e) { return ServerExitStatus.FAILURE_USAGE; } com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(commandLineArgs.toArray(new java.lang.String[commandLineArgs.size()])); exec.setErr(err); exec.setOut(out); try { exec.setWorkingDir(pwd, false); } catch (java.io.IOException e) { return ServerExitStatus.FAILURE_USAGE; } try { return exec.run(); } catch (java.lang.Exception e) { return ServerExitStatus.FAILURE_UNKNOWN; } }",5f46099e9a579eaa3106721f1c30b94d5b7f6b93,"@java.lang.Override public int run(@javax.annotation.Nonnull java.io.PrintStream out, @javax.annotation.Nonnull java.io.PrintStream err, @javax.annotation.Nonnull java.io.File pwd, @javax.annotation.Nonnull com.android.sched.util.config.cli.TokenIterator args) { java.util.List<java.lang.String> commandLineArgs; try { commandLineArgs = buildArgs(args); } catch (java.lang.Exception e) { return ServerExitStatus.FAILURE_USAGE; } com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(commandLineArgs.toArray(new java.lang.String[commandLineArgs.size()])); exec.setErr(err); exec.setOut(out); try { exec.setWorkingDir(pwd, false); } catch (java.io.IOException e) { return ServerExitStatus.FAILURE_USAGE; } try { return exec.run(); } catch (java.lang.Exception e) { com.android.jack.server.ServerTaskSpawningVM.logger.log(java.util.logging.Level.SEVERE, (""Failed to run command "" + commandLineArgs), e); return ServerExitStatus.FAILURE_UNKNOWN; } }",269d8afbad2ede7800541d606b6680c93ac868c3,"run(java.io.PrintStream,java.io.PrintStream,java.io.File,com.android.sched.util.config.cli.TokenIterator)","run(java.io.PrintStream,java.io.PrintStream,java.io.File,com.android.sched.util.config.cli.TokenIterator)",5,1,"@java.lang.Override public int run(@javax.annotation.Nonnull java.io.PrintStream out, @javax.annotation.Nonnull java.io.PrintStream err, @javax.annotation.Nonnull java.io.File pwd, @javax.annotation.Nonnull com.android.sched.util.config.cli.TokenIterator args) { java.util.List<java.lang.String> commandLineArgs; try { commandLineArgs = buildArgs(args); } catch (com.android.sched.util.file.NoSuchFileException e) { return ServerExitStatus.FAILURE_JACK_JAR_NOT_FOUND; } catch (java.lang.Exception e) { com.android.jack.server.ServerTaskSpawningVM.logger.log(java.util.logging.Level.SEVERE, ""Failed to build command line"", e); return ServerExitStatus.FAILURE_USAGE; } com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(commandLineArgs.toArray(new java.lang.String[commandLineArgs.size()])); exec.setErr(err); exec.setOut(out); try { exec.setWorkingDir(pwd, false); } catch (java.io.IOException e) { return ServerExitStatus.FAILURE_USAGE; } try { return exec.run(); } catch (java.lang.Exception e) { com.android.jack.server.ServerTaskSpawningVM.logger.log(java.util.logging.Level.SEVERE, (""Failed to run command "" + commandLineArgs), e); return ServerExitStatus.FAILURE_UNKNOWN; } }",4c4666aa8b5610cb741cc495642817916c4b72be,"run(java.io.PrintStream,java.io.PrintStream,java.io.File,com.android.sched.util.config.cli.TokenIterator)",228867,270,341
37322,src_com_android_cellbroadcastreceiver_CellBroadcastListActivity.java,13.0,"public static void confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity.DeleteThreadListener listener, boolean deleteAll, android.content.Context context) { android.view.View contents = android.view.View.inflate(context, R.layout.delete_broadcast_dialog_view, null); android.widget.TextView msg = ((android.widget.TextView) (contents.findViewById(R.id.message))); msg.setText((deleteAll ? R.string.confirm_delete_all_broadcasts : R.string.confirm_delete_broadcast)); android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(context); builder.setTitle(R.string.confirm_dialog_title).setIcon(android.R.drawable.ic_dialog_alert).setCancelable(true).setPositiveButton(R.string.button_delete, listener).setNegativeButton(R.string.button_cancel, null).setView(contents).show(); }",dc7dd7c1aea0751e8a415a366fb65661c4e38f29,"public static void confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity.DeleteThreadListener listener, boolean deleteAll, android.content.Context context) { android.view.View contents = android.view.View.inflate(context, R.layout.delete_broadcast_dialog_view, null); android.widget.TextView msg = ((android.widget.TextView) (contents.findViewById(R.id.message))); msg.setText((deleteAll ? R.string.confirm_delete_all_broadcasts : R.string.confirm_delete_broadcast)); android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(context); builder.setTitle(R.string.confirm_dialog_title).setIconAttribute(android.R.attr.alertDialogIcon).setCancelable(true).setPositiveButton(R.string.button_delete, listener).setNegativeButton(R.string.button_cancel, null).setView(contents).show(); }",527fd9fc86d1a98113be59756f98a83dcee8b151,"confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity$DeleteThreadListener,boolean,android.content.Context)","confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity$DeleteThreadListener,boolean,android.content.Context)",2,9,"public static void confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity.CursorLoaderListFragment.DeleteThreadListener listener, boolean deleteAll, android.content.Context context) { android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(context); builder.setIconAttribute(android.R.attr.alertDialogIcon).setCancelable(true).setPositiveButton(R.string.button_delete, listener).setNegativeButton(R.string.button_cancel, null).setMessage((deleteAll ? R.string.confirm_delete_all_broadcasts : R.string.confirm_delete_broadcast)).show(); }",eb1afddc4f1c7d90468b0fef75ab96d1cf0dfc84,"confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity$CursorLoaderListFragment$DeleteThreadListener,boolean,android.content.Context)",20991,210,140
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_ThreadOnlyModifierTest.java,,,,"public void testThreadStart() { logWriter.println(""testThreadStart started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long threadID = getFilteredThreadId(); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setThreadOnlyThreadStart(threadID); checkReplyPacket(reply, ""Failed to set THREAD_START with count modifier""); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForThreadEvent(JDWPConstants.EventKind.THREAD_START, requestID, threadID); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.THREAD_START, requestID); checkReplyPacket(reply, (""Failed to clear event "" + requestID)); logWriter.println(""testThreadStart done""); }",ee4468642bdbaa96c0c481b099798dc4a850befd,,testThreadStart(),3,7,"public void testThreadStart() { logWriter.println(""testThreadStart started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createThreadStartBuilder(); testEventWithThreadOnlyModifier(builder); logWriter.println(""testThreadStart done""); }",bd4f1b40da4f2cca4cd8dd9f1e599ef6923b65ee,testThreadStart(),127193,212,81
117110,luni_src_test_java_libcore_javax_net_ssl_SSLSocketTest.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_SSLSocket_ClientHello_SNI() throws java.lang.Exception { new tests.util.ForEachRunnable<javax.net.ssl.SSLSocketFactory>() { @java.lang.Override protected void run(javax.net.ssl.SSLSocketFactory sslSocketFactory) throws java.lang.Exception { libcore.tlswire.handshake.ClientHello clientHello = captureTlsHandshakeClientHello(sslSocketFactory); libcore.tlswire.handshake.ServerNameHelloExtension sniExtension = ((libcore.tlswire.handshake.ServerNameHelloExtension) (clientHello.findExtensionByType(HelloExtension.TYPE_SERVER_NAME))); assertNotNull(sniExtension); assertEquals(java.util.Arrays.asList(""localhost.localdomain""), sniExtension.hostnames); } }.runAllNamed(getSSLSocketFactoriesToTest()); }",7f4f80b0461e56a09da66dc1e83d28f5a6530d7d,,test_SSLSocket_ClientHello_SNI(),6,9,"public void test_SSLSocket_ClientHello_SNI() throws java.lang.Exception { tests.util.ForEachRunner.runNamed(new tests.util.ForEachRunner.Callback<javax.net.ssl.SSLSocketFactory>() { @java.lang.Override public void run(javax.net.ssl.SSLSocketFactory sslSocketFactory) throws java.lang.Exception { libcore.tlswire.handshake.ClientHello clientHello = captureTlsHandshakeClientHello(sslSocketFactory); libcore.tlswire.handshake.ServerNameHelloExtension sniExtension = ((libcore.tlswire.handshake.ServerNameHelloExtension) (clientHello.findExtensionByType(HelloExtension.TYPE_SERVER_NAME))); assertNotNull(sniExtension); assertEquals(java.util.Arrays.asList(""localhost.localdomain""), sniExtension.hostnames); } }, getSSLSocketFactoriesToTest()); }",ebf1c6ed8a168e9897d46e8874d45e2029dd5ee6,test_SSLSocket_ClientHello_SNI(),354213,175,183
40084,src_java_com_android_internal_telephony_uicc_IccUtils.java,13.0,"public static android.graphics.Bitmap parseToBnW(byte[] data, int length) { int valueIndex = 0; int width = (data[(valueIndex++)]) & 255; int height = (data[(valueIndex++)]) & 255; int numOfPixels = width * height; int[] pixels = new int[numOfPixels]; int pixelIndex = 0; int bitIndex = 7; byte currentByte = 0; while (pixelIndex < numOfPixels) { if ((pixelIndex % 8) == 0) { currentByte = data[(valueIndex++)]; bitIndex = 7; } pixels[(pixelIndex++)] = com.android.internal.telephony.IccUtils.bitToRGB(((currentByte >> (bitIndex--)) & 1)); } if (pixelIndex != numOfPixels) { android.util.Log.e(com.android.internal.telephony.IccUtils.LOG_TAG, ""parse end and size error""); } return android.graphics.Bitmap.createBitmap(pixels, width, height, Bitmap.Config.ARGB_8888); }",09a3197cbacaa8ab54a93c6817a083f1ba90964e,"public static android.graphics.Bitmap parseToBnW(byte[] data, int length) { int valueIndex = 0; int width = (data[(valueIndex++)]) & 255; int height = (data[(valueIndex++)]) & 255; int numOfPixels = width * height; int[] pixels = new int[numOfPixels]; int pixelIndex = 0; int bitIndex = 7; byte currentByte = 0; while (pixelIndex < numOfPixels) { if ((pixelIndex % 8) == 0) { currentByte = data[(valueIndex++)]; bitIndex = 7; } pixels[(pixelIndex++)] = com.android.internal.telephony.uicc.IccUtils.bitToRGB(((currentByte >> (bitIndex--)) & 1)); } if (pixelIndex != numOfPixels) { android.util.Log.e(com.android.internal.telephony.uicc.IccUtils.LOG_TAG, ""parse end and size error""); } return android.graphics.Bitmap.createBitmap(pixels, width, height, Bitmap.Config.ARGB_8888); }",bd55fe467ef37e9d390d9592ad3df9059812272b,"parseToBnW(byte[],int)","parseToBnW(byte[],int)",27,13,"public static android.graphics.Bitmap parseToBnW(byte[] data, int length) { int valueIndex = 0; int width = (data[(valueIndex++)]) & 255; int height = (data[(valueIndex++)]) & 255; int numOfPixels = width * height; int[] pixels = new int[numOfPixels]; int pixelIndex = 0; int bitIndex = 7; byte currentByte = 0; while (pixelIndex < numOfPixels) { if ((pixelIndex % 8) == 0) { currentByte = data[(valueIndex++)]; bitIndex = 7; } pixels[(pixelIndex++)] = com.android.internal.telephony.uicc.IccUtils.bitToRGB(((currentByte >> (bitIndex--)) & 1)); } if (pixelIndex != numOfPixels) { android.telephony.Rlog.e(com.android.internal.telephony.uicc.IccUtils.LOG_TAG, ""parse end and size error""); } return android.graphics.Bitmap.createBitmap(pixels, width, height, Bitmap.Config.ARGB_8888); }",beb86bb24e2428d488ecf366189a7b42d855554e,"parseToBnW(byte[],int)",174404,226,227
91995,luni_src_main_java_libcore_io_ForwardingOs.java,21.0,"public void setsockoptGroupSourceReq(java.io.FileDescriptor fd, int level, int option, libcore.io.StructGroupSourceReq value) throws libcore.io.ErrnoException { os.setsockoptGroupSourceReq(fd, level, option, value); }",1fb254464d5a53bef49de628247dac54d238ed9e,"public void setsockoptGroupSourceReq(java.io.FileDescriptor fd, int level, int option, android.os.StructGroupSourceReq value) throws android.os.ErrnoException { os.setsockoptGroupSourceReq(fd, level, option, value); }",8aae9f9c19c1815d00630f15a2360fc53bc94bb9,"setsockoptGroupSourceReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupSourceReq)","setsockoptGroupSourceReq(java.io.FileDescriptor,int,int,android.os.StructGroupSourceReq)",3,97,"public void setsockoptGroupSourceReq(java.io.FileDescriptor fd, int level, int option, android.system.StructGroupSourceReq value) throws android.system.ErrnoException { os.setsockoptGroupSourceReq(fd, level, option, value); }",5edd2e3a402d28eab317d5e3f1ac0288f859a307,"setsockoptGroupSourceReq(java.io.FileDescriptor,int,int,android.system.StructGroupSourceReq)",170532,59,59
513800,src_main_java_com_android_apksig_internal_util_VerityTreeBuilder.java,5.0,"public byte[] generateVerityTreeRootHash(com.android.apksig.util.DataSource fileSource) throws java.io.IOException { int digestSize = mMd.getDigestLength(); int[] levelOffset = com.android.apksig.internal.util.VerityTreeBuilder.calculateLevelOffset(fileSource.size(), digestSize); java.nio.ByteBuffer verityBuffer = java.nio.ByteBuffer.allocate(levelOffset[((levelOffset.length) - 1)]); for (int i = (levelOffset.length) - 2; i >= 0; i--) { com.android.apksig.util.DataSource src; if (i == ((levelOffset.length) - 2)) { src = fileSource; } else { src = com.android.apksig.util.DataSources.asDataSource(com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer.asReadOnlyBuffer(), levelOffset[(i + 1)], levelOffset[(i + 2)])); } com.android.apksig.util.DataSink middleBufferSink = new com.android.apksig.internal.util.ByteBufferSink(com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer, levelOffset[i], levelOffset[(i + 1)])); digestDataByChunks(src, middleBufferSink); long totalOutput = (com.android.apksig.internal.util.VerityTreeBuilder.divideRoundup(src.size(), com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) * digestSize; int incomplete = ((int) (totalOutput % (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE))); if (incomplete > 0) { byte[] padding = new byte[(com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE) - incomplete]; middleBufferSink.consume(padding, 0, padding.length); } } java.nio.ByteBuffer firstPage = com.android.apksig.internal.util.VerityTreeBuilder.slice(verityBuffer.asReadOnlyBuffer(), 0, com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE); return saltedDigest(firstPage); }",5a012bade899f89759d00c31918b3b2c94074201,"public byte[] generateVerityTreeRootHash(com.android.apksig.util.DataSource beforeApkSigningBlock, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { if (((beforeApkSigningBlock.size()) % (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) != 0) { throw new java.lang.IllegalStateException(""APK Signing Block is not page aligned""); } com.android.apksig.util.DataSource modifiedEocd = com.android.apksig.util.DataSources.asDataSource(com.android.apksig.internal.zip.EocdRecord.createWithCentralDirectoryFieldHidden(eocd.getByteBuffer(0, ((int) (eocd.size()))))); return generateVerityTreeRootHash(new com.android.apksig.internal.util.ChainedDataSource(beforeApkSigningBlock, centralDir, modifiedEocd)); }",bb554a3e2ff9a2de4736d25231bef56c49041d62,generateVerityTreeRootHash(com.android.apksig.util.DataSource),"generateVerityTreeRootHash(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource)",5,3,"public byte[] generateVerityTreeRootHash(com.android.apksig.util.DataSource beforeApkSigningBlock, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { if (((beforeApkSigningBlock.size()) % (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) != 0) { throw new java.lang.IllegalStateException((((""APK Signing Block size not a multiple of "" + (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) + "": "") + (beforeApkSigningBlock.size()))); } long centralDirOffsetForDigesting = beforeApkSigningBlock.size(); java.nio.ByteBuffer eocdBuf = java.nio.ByteBuffer.allocate(((int) (eocd.size()))); eocdBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); eocd.copyTo(0, ((int) (eocd.size())), eocdBuf); eocdBuf.flip(); com.android.apksig.internal.zip.ZipUtils.setZipEocdCentralDirectoryOffset(eocdBuf, centralDirOffsetForDigesting); return generateVerityTreeRootHash(new com.android.apksig.internal.util.ChainedDataSource(beforeApkSigningBlock, centralDir, com.android.apksig.util.DataSources.asDataSource(eocdBuf))); }",285fce1e1813035548a8f67199c7cf4c80909073,"generateVerityTreeRootHash(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource)",377647,222,329
91995,luni_src_main_java_libcore_io_Posix.java,82.0,public native java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,99e5c0575100e1a99699b2b1973d8a04ec20aced,public native java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws android.os.ErrnoException;,adb271b3eaa1f9c9c58d5291878ba295d6b24aba,getsockname(java.io.FileDescriptor),getsockname(java.io.FileDescriptor),3,81,public native java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws android.system.ErrnoException;,0a0a1ce6a08ee1fd9caa227a9f0285f5e5630693,getsockname(java.io.FileDescriptor),169835,27,27
162651,ddmlib_src_main_java_com_android_ddmlib_Device.java,61.0,"@java.lang.Override public void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.removeForward(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, java.lang.String.format(""tcp:%d"", localPort), java.lang.String.format(""%s:%s"", namespace.getType(), remoteSocketName)); }",ac42dcb92a9bba72b7e75a29accca60fb12d43cf,"@java.lang.Override public void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException { com.android.ddmlib.AdbHelper.removeForward(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, java.lang.String.format(""tcp:%d"", localPort), java.lang.String.format(""%s:%s"", namespace.getType(), remoteSocketName)); }",c0f60be881aea5002cf9fb40a19498c81d83c477,"removeForward(int,java.lang.String,com.android.ddmlib.DeviceUnixSocketNamespace)","removeForward(int,java.lang.String,com.android.ddmlib.DeviceUnixSocketNamespace)",4,61,"@java.lang.Override public void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.removeForward(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, java.lang.String.format(""tcp:%d"", localPort), java.lang.String.format(""%s:%s"", namespace.getType(), remoteSocketName)); }",ac42dcb92a9bba72b7e75a29accca60fb12d43cf,"removeForward(int,java.lang.String,com.android.ddmlib.DeviceUnixSocketNamespace)",353113,144,137
295681,test-rules_src_main_java_libcore_junit_util_ResourceLeakageDetector.java,0.0,"public void assertUnreleasedResourceCount(java.lang.Object owner, int expectedCount) { libcore.junit.util.ResourceLeakageDetector.FINALIZER_CHECKER.accept(owner, expectedCount); }",8a96e90d01b428a1a0620da6014f04c956ca66d6,"public void assertUnreleasedResourceCount(java.lang.Object owner, int expectedCount) { if (leakageDetectionDisabledForTest) { throw new java.lang.IllegalStateException((""Does not work when leakage detection has been disabled; remove the "" + ""@DisableResourceLeakageDetection from the test method"")); } libcore.junit.util.ResourceLeakageDetector.FINALIZER_CHECKER.accept(owner, expectedCount); }",53d42da653e06148900367cf9e476ce6430590f9,"assertUnreleasedResourceCount(java.lang.Object,int)","assertUnreleasedResourceCount(java.lang.Object,int)",3,0,"public void assertUnreleasedResourceCount(java.lang.Object owner, int expectedCount) { if (leakageDetectionEnabledForTest) { libcore.junit.util.ResourceLeakageDetector.FINALIZER_CHECKER.accept(owner, expectedCount); } else { throw new java.lang.IllegalStateException((""Does not work when leakage detection has been disabled; remove the "" + ""@DisableResourceLeakageDetection from the test method"")); } }",0f769b8ffcbaad1373a598f73d418b6fe29e5765,"assertUnreleasedResourceCount(java.lang.Object,int)",236883,96,99
123684,core_java_com_android_internal_os_WrapperInit.java,3.0,"public static void execApplication(java.lang.String invokeWith, java.lang.String niceName, int targetSdkVersion, java.io.FileDescriptor pipeFd, java.lang.String[] args) { java.lang.StringBuilder command = new java.lang.StringBuilder(invokeWith); command.append("" /system/bin/app_process /system/bin --application""); if (niceName != null) { command.append("" '--nice-name="").append(niceName).append(""'""); } command.append("" com.android.internal.os.WrapperInit ""); command.append((pipeFd != null ? pipeFd.getInt$() : 0)); command.append(' '); command.append(targetSdkVersion); com.android.internal.os.Zygote.appendQuotedShellArgs(command, args); com.android.internal.os.Zygote.execShell(command.toString()); }",77bbe8e93daf2749dc15f4aa0bbf0b930106d16f,"public static void execApplication(java.lang.String invokeWith, java.lang.String niceName, int targetSdkVersion, java.io.FileDescriptor pipeFd, java.lang.String[] args) { com.android.internal.os.WrapperInit.sendPidToParent(pipeFd); java.lang.StringBuilder command = new java.lang.StringBuilder(invokeWith); command.append("" /system/bin/app_process /system/bin --application""); if (niceName != null) { command.append("" '--nice-name="").append(niceName).append(""'""); } command.append("" com.android.internal.os.WrapperInit ""); command.append(targetSdkVersion); com.android.internal.os.Zygote.appendQuotedShellArgs(command, args); com.android.internal.os.Zygote.execShell(command.toString()); }",7ac33a74d27af2acc0350f5e73062aea3892d5be,"execApplication(java.lang.String,java.lang.String,int,java.io.FileDescriptor,java.lang.String[])","execApplication(java.lang.String,java.lang.String,int,java.io.FileDescriptor,java.lang.String[])",4,2,"public static void execApplication(java.lang.String invokeWith, java.lang.String niceName, int targetSdkVersion, java.io.FileDescriptor pipeFd, java.lang.String[] args) { java.lang.StringBuilder command = new java.lang.StringBuilder(invokeWith); command.append("" /system/bin/app_process /system/bin --application""); if (niceName != null) { command.append("" '--nice-name="").append(niceName).append(""'""); } command.append("" com.android.internal.os.WrapperInit ""); command.append((pipeFd != null ? pipeFd.getInt$() : 0)); command.append(' '); command.append(targetSdkVersion); com.android.internal.os.Zygote.appendQuotedShellArgs(command, args); com.android.internal.os.Zygote.execShell(command.toString()); }",77bbe8e93daf2749dc15f4aa0bbf0b930106d16f,"execApplication(java.lang.String,java.lang.String,int,java.io.FileDescriptor,java.lang.String[])",356470,198,207
630005,src_com_android_providers_telephony_CarrierIdProvider.java,14.0,"@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return ((((((((((((((((((((((((""CREATE TABLE "" + tableName) + ""(_id INTEGER PRIMARY KEY,"") + (CarrierIdentification.All.MCCMNC)) + "" TEXT NOT NULL,"") + (CarrierIdentification.All.GID1)) + "" TEXT,"") + (CarrierIdentification.All.GID2)) + "" TEXT,"") + (CarrierIdentification.All.PLMN)) + "" TEXT,"") + (CarrierIdentification.All.IMSI_PREFIX_XPATTERN)) + "" TEXT,"") + (CarrierIdentification.All.SPN)) + "" TEXT,"") + (CarrierIdentification.All.APN)) + "" TEXT,"") + (CarrierIdentification.All.ICCID_PREFIX)) + "" TEXT,"") + (android.provider.Telephony.CarrierIdentification.NAME)) + "" TEXT,"") + (android.provider.Telephony.CarrierIdentification.CID)) + "" INTEGER DEFAULT -1,"") + ""UNIQUE ("") + (android.text.TextUtils.join("", "", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + ""));""; }",0dedb2a8ce6f9769b355e0ae7433362b5f563562,"@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return ((((((((((((((((((((((((""CREATE TABLE "" + tableName) + ""(_id INTEGER PRIMARY KEY,"") + (CarrierId.All.MCCMNC)) + "" TEXT NOT NULL,"") + (CarrierId.All.GID1)) + "" TEXT,"") + (CarrierId.All.GID2)) + "" TEXT,"") + (CarrierId.All.PLMN)) + "" TEXT,"") + (CarrierId.All.IMSI_PREFIX_XPATTERN)) + "" TEXT,"") + (CarrierId.All.SPN)) + "" TEXT,"") + (CarrierId.All.APN)) + "" TEXT,"") + (CarrierId.All.ICCID_PREFIX)) + "" TEXT,"") + (android.provider.Telephony.CarrierId.NAME)) + "" TEXT,"") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + "" INTEGER DEFAULT -1,"") + ""UNIQUE ("") + (android.text.TextUtils.join("", "", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + ""));""; }",4a4aaeb2d52f36f0a1cc1d7125db24fe7d129c78,getStringForCarrierIdTableCreation(java.lang.String),getStringForCarrierIdTableCreation(java.lang.String),2,14,"@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return ((((((((((((((((((((((((""CREATE TABLE "" + tableName) + ""(_id INTEGER PRIMARY KEY,"") + (CarrierId.All.MCCMNC)) + "" TEXT NOT NULL,"") + (CarrierId.All.GID1)) + "" TEXT,"") + (CarrierId.All.GID2)) + "" TEXT,"") + (CarrierId.All.PLMN)) + "" TEXT,"") + (CarrierId.All.IMSI_PREFIX_XPATTERN)) + "" TEXT,"") + (CarrierId.All.SPN)) + "" TEXT,"") + (CarrierId.All.APN)) + "" TEXT,"") + (CarrierId.All.ICCID_PREFIX)) + "" TEXT,"") + (android.provider.Telephony.CarrierId.CARRIER_NAME)) + "" TEXT,"") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + "" INTEGER DEFAULT -1,"") + ""UNIQUE ("") + (android.text.TextUtils.join("", "", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + ""));""; }",951f777735c52e687f405b6b3d46d2d82c598ea2,getStringForCarrierIdTableCreation(java.lang.String),267011,286,290
252478,java_tests_RsTest_src_com_android_rs_test_UT_math_agree.java,5.0,"private com.android.rs.test.Float2 pack_f2(float[] val) { assert (val.length) == 2; return new com.android.rs.test.Float2(val[0], val[1]); }",5efef44f9808e9a4e22bbc355497aece2d458cd0,"private android.renderscript.Float2 pack_f2(float[] val) { assert (val.length) == 2; return new android.renderscript.Float2(val[0], val[1]); }",62fa84989effcdc3ceb9c19f3c9a0eb88b6d82d1,pack_f2(float[]),pack_f2(float[]),7,5,"private com.android.rs.test.Float2 pack_f2(float[] val) { assert (val.length) == 2; return new com.android.rs.test.Float2(val[0], val[1]); }",5efef44f9808e9a4e22bbc355497aece2d458cd0,pack_f2(float[]),379453,41,47
355257,service_java_com_android_server_wifi_aware_WifiAwareServiceImpl.java,9.0,"@java.lang.Override public void updatePublish(int clientId, int sessionId, android.net.wifi.aware.PublishConfig publishConfig) { enforceAccessPermission(); enforceChangePermission(); if (publishConfig == null) { throw new java.lang.IllegalArgumentException(""PublishConfig must not be null""); } publishConfig.assertValid(mStateManager.getCharacteristics()); int uid = getMockableCallingUid(); enforceClientValidity(uid, clientId); if (com.android.server.wifi.aware.WifiAwareServiceImpl.VDBG) { android.util.Log.v(com.android.server.wifi.aware.WifiAwareServiceImpl.TAG, (((((((""updatePublish: uid="" + uid) + "", clientId="") + clientId) + "", sessionId="") + sessionId) + "", config="") + publishConfig)); } mStateManager.updatePublish(clientId, sessionId, publishConfig); }",3bc39f60666920c1e800d845d95551ed9eb24dc4,"@java.lang.Override public void updatePublish(int clientId, int sessionId, android.net.wifi.aware.PublishConfig publishConfig) { enforceAccessPermission(); enforceChangePermission(); if (publishConfig == null) { throw new java.lang.IllegalArgumentException(""PublishConfig must not be null""); } publishConfig.assertValid(mStateManager.getCharacteristics()); if ((publishConfig.mPublishCount) != 0) { enforceConnectivityInternalPermission(); } int uid = getMockableCallingUid(); enforceClientValidity(uid, clientId); if (com.android.server.wifi.aware.WifiAwareServiceImpl.VDBG) { android.util.Log.v(com.android.server.wifi.aware.WifiAwareServiceImpl.TAG, (((((((""updatePublish: uid="" + uid) + "", clientId="") + clientId) + "", sessionId="") + sessionId) + "", config="") + publishConfig)); } mStateManager.updatePublish(clientId, sessionId, publishConfig); }",e359b19102d50d052be0f5cb86196327024423ec,"updatePublish(int,int,android.net.wifi.aware.PublishConfig)","updatePublish(int,int,android.net.wifi.aware.PublishConfig)",3,9,"@java.lang.Override public void updatePublish(int clientId, int sessionId, android.net.wifi.aware.PublishConfig publishConfig) { enforceAccessPermission(); enforceChangePermission(); if (publishConfig == null) { throw new java.lang.IllegalArgumentException(""PublishConfig must not be null""); } publishConfig.assertValid(mStateManager.getCharacteristics()); int uid = getMockableCallingUid(); enforceClientValidity(uid, clientId); if (com.android.server.wifi.aware.WifiAwareServiceImpl.VDBG) { android.util.Log.v(com.android.server.wifi.aware.WifiAwareServiceImpl.TAG, (((((((""updatePublish: uid="" + uid) + "", clientId="") + clientId) + "", sessionId="") + sessionId) + "", config="") + publishConfig)); } mStateManager.updatePublish(clientId, sessionId, publishConfig); }",3bc39f60666920c1e800d845d95551ed9eb24dc4,"updatePublish(int,int,android.net.wifi.aware.PublishConfig)",298776,213,194
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,5.0,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",d3ceb86ca8ffbbcc11bdba7186f19fbdc4f077d6,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = android.net.NetworkStats.UID_ALL; entry.set = android.net.NetworkStats.SET_ALL; entry.tag = android.net.NetworkStats.TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",6877d8e0e89f985e29355329b100eb5fe7c6d5c3,readNetworkStatsSummaryDev(),readNetworkStatsSummaryDev(),11,5,"public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(""problem parsing stats"", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",d3ceb86ca8ffbbcc11bdba7186f19fbdc4f077d6,readNetworkStatsSummaryDev(),129346,390,371
339044,tests_wifitests_src_com_android_server_wifi_WifiMonitorTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testHandleWpsEventSuccess() { mWifiMonitor.registerHandler(com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME, WifiMonitor.WPS_SUCCESS_EVENT, mHandlerSpy); mWifiMonitor.handleWpsSuccessEvent(com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME); mLooper.dispatchAll(); org.mockito.ArgumentCaptor<android.os.Message> messageCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Message.class); verify(mHandlerSpy).handleMessage(messageCaptor.capture()); assertEquals(WifiMonitor.WPS_SUCCESS_EVENT, messageCaptor.getValue().what); }",c22d0b1d85db9deb37f9ae7f5ce0e4712b24b25e,,testHandleWpsEventSuccess(),6,4,"@org.junit.Test public void testBroadcastWpsEventSuccess() { mWifiMonitor.registerHandler(com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME, WifiMonitor.WPS_SUCCESS_EVENT, mHandlerSpy); mWifiMonitor.broadcastWpsSuccessEvent(com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME); mLooper.dispatchAll(); org.mockito.ArgumentCaptor<android.os.Message> messageCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Message.class); verify(mHandlerSpy).handleMessage(messageCaptor.capture()); assertEquals(WifiMonitor.WPS_SUCCESS_EVENT, messageCaptor.getValue().what); }",d63b932e71c6b8b1417edd4348fd06b0df69afd2,testBroadcastWpsEventSuccess(),430010,160,160
243440,test_458-checker-instruction-simplification_src_Main.java,23.0,public static long UShr60And7(long arg) { return (arg >>> 60) & 7; },22c22f88a8a70f076bae9bd2880f970a16f98042,public static long UShr60And7(long arg) { if (Main.doThrow) { throw new java.lang.Error(); } return (arg >>> 60) & 7; },267becc8b621c9c8685441e422d900b7192ba791,UShr60And7(long),UShr60And7(long),3,73,public static long $noinline$UShr60And7(long arg) { if (Main.doThrow) { throw new java.lang.Error(); } return (arg >>> 60) & 7; },8e1385c6be75ffdb53d4ba0205bb574e1e1061d5,$noinline$UShr60And7(long),118252,37,42
299978,src_com_android_managedprovisioning_uiflows_PreProvisioningController.java,1.0,"private void initiateDeviceOwnerProvisioning(android.content.Intent intent) { if (!(mParams.startedByTrustedSource)) { mUi.initiateUi(R.string.setup_work_device, R.string.setup_device_start_setup, R.string.company_controls_device, R.string.the_following_is_your_mdm_for_device, mParams); } if (isEncryptionRequired()) { maybeTriggerEncryption(); return; } if (mKeyguardManager.inKeyguardRestrictedInputMode()) { com.android.managedprovisioning.ProvisionLogger.logi(""Cannot pick wifi because the screen is locked.""); } else if ((!(mUtils.isConnectedToNetwork(mContext))) && ((mParams.wifiInfo) == null)) { if (canRequestWifiPick()) { mUi.requestWifiPick(); return; } else { com.android.managedprovisioning.ProvisionLogger.logi(""Cannot pick wifi because there is no handler to the intent""); } } askForConsentOrStartDeviceOwnerProvisioning(); }",ef6e9599a59cae5c45a573d9ca49908404df9ad8,"private void initiateDeviceOwnerProvisioning(android.content.Intent intent) { if (!(mParams.startedByTrustedSource)) { mUi.initiateUi(R.string.setup_work_device, R.string.setup_device_start_setup, R.string.company_controls_device, R.string.the_following_is_your_mdm_for_device, mParams); } if (isEncryptionRequired()) { maybeTriggerEncryption(); return; } if (mKeyguardManager.inKeyguardRestrictedInputMode()) { com.android.managedprovisioning.ProvisionLogger.logi(""Cannot pick wifi because the screen is locked.""); } else if ((((!(mUtils.isConnectedToNetwork(mContext))) && ((mParams.wifiInfo) == null)) && ((mParams.deviceAdminDownloadInfo) != null)) && (!(android.text.TextUtils.isEmpty(mParams.deviceAdminDownloadInfo.location)))) { if (canRequestWifiPick()) { mUi.requestWifiPick(); return; } else { com.android.managedprovisioning.ProvisionLogger.logi(""Cannot pick wifi because there is no handler to the intent""); } } askForConsentOrStartDeviceOwnerProvisioning(); }",ba601b6ef543f139279efc93a22c0085c44c28e6,initiateDeviceOwnerProvisioning(android.content.Intent),initiateDeviceOwnerProvisioning(android.content.Intent),2,1,"private void initiateDeviceOwnerProvisioning(android.content.Intent intent) { if (!(mParams.startedByTrustedSource)) { mUi.initiateUi(R.string.setup_work_device, R.string.setup_device_start_setup, R.string.company_controls_device, R.string.the_following_is_your_mdm_for_device, mParams); } if (isEncryptionRequired()) { maybeTriggerEncryption(); return; } if (mKeyguardManager.inKeyguardRestrictedInputMode()) { com.android.managedprovisioning.ProvisionLogger.logi(""Cannot pick wifi because the screen is locked.""); } else if (((!(mUtils.isConnectedToNetwork(mContext))) && ((mParams.wifiInfo) == null)) && ((mParams.deviceAdminDownloadInfo) != null)) { if (canRequestWifiPick()) { mUi.requestWifiPick(); return; } else { com.android.managedprovisioning.ProvisionLogger.logi(""Cannot pick wifi because there is no handler to the intent""); } } askForConsentOrStartDeviceOwnerProvisioning(); }",7076a2c74734e0d4f10be5af32ff8fc932367000,initiateDeviceOwnerProvisioning(android.content.Intent),181363,258,239
149957,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_NdkHandler.java,,,,"private java.io.File getToolchainPath(java.lang.String abi) { return getToolchainPath(toolchainName, toolchainVersion, abi); }",84ea89640192c4746a149d0cf24a7fdec2161a9f,,getToolchainPath(java.lang.String),8,2,"private java.io.File getToolchainPath(com.android.build.gradle.internal.core.Abi abi) { return getToolchainPath(toolchain, toolchainVersion, abi); }",f8a68aff61c6524868a21927bf92409539b910ab,getToolchainPath(com.android.build.gradle.internal.core.Abi),341082,37,45
22764,tests_tests_telephony_src_android_telephony_cts_SmsManagerTest.java,3.0,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (intent.getAction().equals(mAction)) { synchronized(mLock) { mCalls += 1; if ((mCalls) >= (mExpectedCalls)) { mLock.notify(); } } } }",eba6b4947350705634f7e24347bb1e0b027b69c2,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (mAction.equals(android.telephony.cts.SmsManagerTest.DATA_SMS_RECEIVED_ACTION)) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); android.os.Bundle bundle = intent.getExtras(); if (bundle != null) { java.lang.Object[] obj = ((java.lang.Object[]) (bundle.get(""pdus""))); android.telephony.SmsMessage[] message = new android.telephony.SmsMessage[obj.length]; for (int i = 0; i < (obj.length); i++) { message[i] = android.telephony.SmsMessage.createFromPdu(((byte[]) (obj[i]))); } for (android.telephony.SmsMessage currentMessage : message) { sb.append(currentMessage.getDisplayMessageBody()); } } this.mReceivedDataSms = true; this.mReceivedText = sb.toString(); } if (intent.getAction().equals(mAction)) { synchronized(mLock) { mCalls += 1; if ((mCalls) >= (mExpectedCalls)) { mLock.notify(); } } } }",1753007c621ee7c115462e0c0c543f95e0e88ccc,"onReceive(android.content.Context,android.content.Intent)","onReceive(android.content.Context,android.content.Intent)",6,3,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (mAction.equals(android.telephony.cts.SmsManagerTest.DATA_SMS_RECEIVED_ACTION)) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); android.os.Bundle bundle = intent.getExtras(); if (bundle != null) { java.lang.Object[] obj = ((java.lang.Object[]) (bundle.get(""pdus""))); android.telephony.SmsMessage[] message = new android.telephony.SmsMessage[obj.length]; for (int i = 0; i < (obj.length); i++) { message[i] = android.telephony.SmsMessage.createFromPdu(((byte[]) (obj[i]))); } for (android.telephony.SmsMessage currentMessage : message) { byte[] binaryContent = currentMessage.getUserData(); java.lang.String readableContent = new java.lang.String(binaryContent); sb.append(readableContent); } } android.telephony.cts.SmsManagerTest.mReceivedDataSms = true; android.telephony.cts.SmsManagerTest.mReceivedText = sb.toString(); } if (intent.getAction().equals(mAction)) { synchronized(mLock) { mCalls += 1; if ((mCalls) >= (mExpectedCalls)) { mLock.notify(); } } } }",2c6697eadc442e0b73a31cb9e7d2def4a980e627,"onReceive(android.content.Context,android.content.Intent)",308439,261,305
286959,services_tests_servicestests_src_com_android_server_connectivity_TetheringTest.java,,,,@org.junit.Test public void provisioningNotRequiredWhenCarrierConfigManagerMissing() { setupForRequiredProvisioning(); when(mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE)).thenReturn(null); verify((!(mTethering.isTetherProvisioningRequired()))); },bcc9750bd07f4d52dc42641161eef048c7da57e1,,provisioningNotRequiredWhenCarrierConfigManagerMissing(),6,1,@org.junit.Test public void toleratesCarrierConfigManagerMissing() { setupForRequiredProvisioning(); when(mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE)).thenReturn(null); assertTrue(mTethering.isTetherProvisioningRequired()); },54d76dd86d52970c9582012a4effd1cd5c4ac620,toleratesCarrierConfigManagerMissing(),288290,61,56
139390,src_com_google_gct_idea_debugger_CloudDebugProcess.java,,,,public com.google.gct.idea.debugger.Breakpoint getCurrentBreakpoint() { return myCurrentBreakpoint; },a08a595254eebc3a02d5e9978b35f2726ee29761,,getCurrentBreakpoint(),30,31,public com.google.api.services.debugger.model.Breakpoint getCurrentSnapshot() { return myCurrentSnapshot; },4348a767a3340990af15ff4ee4323954fb4da0c9,getCurrentSnapshot(),250758,24,25
295681,test-rules_src_main_java_libcore_junit_util_ResourceLeakageDetector.java,3.0,"@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { if ((description.getAnnotation(libcore.junit.util.ResourceLeakageDetector.DisableResourceLeakageDetection.class)) != null) { return base; } else { return leakageDetectorRule.apply(base, description); } }",71789d7a515be8f03b471479db81d53deb3451ab,"@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { if ((description.getAnnotation(libcore.junit.util.ResourceLeakageDetector.DisableResourceLeakageDetection.class)) != null) { leakageDetectionDisabledForTest = true; return base; } else { leakageDetectionDisabledForTest = false; return leakageDetectorRule.apply(base, description); } }",11281127bd8b16b0e5a19cfd59018d96de420b54,"apply(org.junit.runners.model.Statement,org.junit.runner.Description)","apply(org.junit.runners.model.Statement,org.junit.runner.Description)",3,3,"@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { if ((description.getAnnotation(libcore.junit.util.ResourceLeakageDetector.DisableResourceLeakageDetection.class)) != null) { leakageDetectionEnabledForTest = false; return base; } else { leakageDetectionEnabledForTest = true; return leakageDetectorRule.apply(base, description); } }",0f948d981e2f95959f0518fa03167b0acbb949eb,"apply(org.junit.runners.model.Statement,org.junit.runner.Description)",236879,108,108
119247,sched_src_com_android_sched_vfs_MessageDigestInputOutputVFS.java,8.0,"public void close() throws com.android.sched.util.file.CannotCreateFileException, java.io.IOException { java.io.OutputStream os = dir.createOutputVFile(new com.android.sched.vfs.VPath(""jack.sha1"", '/')).openWrite(); java.io.PrintStream printer = new java.io.PrintStream(os); for (com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile file : files) { byte[] digest = file.getDigest(); if (digest != null) { printer.print(file.getVPath().getPathAsString('/')); printer.print(':'); printer.print(com.android.sched.vfs.MessageDigestInputOutputVFS.encode(digest)); printer.println(); } } printer.close(); }",5483eb189703137ac46e041cb0994a40070bae76,"public synchronized void close() throws com.android.sched.util.file.CannotCreateFileException, java.io.IOException { java.io.OutputStream os = dir.createOutputVFile(new com.android.sched.vfs.VPath(""jack.sha1"", '/')).openWrite(); java.io.PrintStream printer = new java.io.PrintStream(os); for (com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile file : files) { byte[] digest = file.getDigest(); if (digest != null) { printer.print(file.getVPath().getPathAsString('/')); printer.print(':'); printer.print(com.android.sched.vfs.MessageDigestInputOutputVFS.encode(digest)); printer.println(); } } printer.close(); }",ca198cb733a9caef989e4a976a6c949ce60b263b,close(),close(),3,8,"private synchronized void close() throws com.android.sched.util.file.CannotCreateFileException, java.io.IOException { java.io.OutputStream os = dir.createOutputVFile(new com.android.sched.vfs.VPath(""jack.sha1"", '/')).openWrite(); java.io.PrintStream printer = new java.io.PrintStream(os); for (com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile file : files) { byte[] digest = file.getDigest(); if (digest != null) { printer.print(file.getVPath().getPathAsString('/')); printer.print(':'); printer.print(com.android.sched.vfs.MessageDigestInputOutputVFS.encode(digest)); printer.println(); } } printer.close(); }",9aefdb47b48d5ab5019e5ed9a9d1505dfd7f9d46,close(),474570,170,170
81416,tests_tests_renderscript_src_android_renderscript_cts_TestCospi.java,,,,"private void checkCospiFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testCospiFloat3(in, out); verifyResultsCospiFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCospiFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCospiFloat3(in, out); verifyResultsCospiFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCospiFloat3: "" + (e.toString()))); } }",b6fee558ce5a960a74689ab5b6ccc46230a83737,,checkCospiFloat3(),9,5,"private void checkCospiFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -1986078932875801394L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testCospiFloat3Float3(in, out); verifyResultsCospiFloat3Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCospiFloat3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCospiFloat3Float3(in, out); verifyResultsCospiFloat3Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCospiFloat3Float3: "" + (e.toString()))); } }",7cd3f1aacbb1ef281cc76d63c49eaf73e8f022b7,checkCospiFloat3Float3(),143145,324,309
79445,build-system_builder_src_main_java_com_android_builder_PlatformSdkParser.java,7.0,"@java.lang.Override public void initParser(@com.android.annotations.NonNull java.lang.String target, @com.android.annotations.NonNull com.android.sdklib.repository.FullRevision buildToolRevision, @com.android.annotations.NonNull com.android.utils.ILogger logger) { if (!(mInitialized)) { mTarget = new com.android.builder.internal.FakeAndroidTarget(mPlatformRootFolder, target); mBuildToolInfo = new com.android.sdklib.BuildToolInfo(buildToolRevision, new java.io.File(mPlatformRootFolder), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AAPT), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AIDL), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/tools/dx""), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/tools/lib/dx.jar""), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_RENDERSCRIPT), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/renderscript/include""), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/renderscript/clang-include""), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_BCC_COMPAT), new java.io.File(getHostToolsFolder(), ""arm-linux-androideabi-ld""), new java.io.File(getHostToolsFolder(), ""i686-linux-android-ld""), new java.io.File(getHostToolsFolder(), ""mipsel-linux-android-ld"")); mInitialized = true; } }",6017de215bda6495f2f30cc66c1b5f2a34233115,"@java.lang.Override public void initParser(@com.android.annotations.NonNull java.lang.String target, @com.android.annotations.NonNull com.android.sdklib.repository.FullRevision buildToolRevision, @com.android.annotations.NonNull com.android.utils.ILogger logger) { if (!(mInitialized)) { mTarget = new com.android.builder.internal.FakeAndroidTarget(mPlatformRootFolder, target); mBuildToolInfo = new com.android.sdklib.BuildToolInfo(buildToolRevision, new java.io.File(mPlatformRootFolder), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AAPT), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AIDL), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/tools/dx"".replace('/', java.io.File.separatorChar)), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/tools/lib/dx.jar"".replace('/', java.io.File.separatorChar)), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_RENDERSCRIPT), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/renderscript/include"".replace('/', java.io.File.separatorChar)), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/renderscript/clang-include"".replace('/', java.io.File.separatorChar)), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_BCC_COMPAT), new java.io.File(getHostToolsFolder(), ""arm-linux-androideabi-ld""), new java.io.File(getHostToolsFolder(), ""i686-linux-android-ld""), new java.io.File(getHostToolsFolder(), ""mipsel-linux-android-ld"")); mInitialized = true; } }",fe6fb6e87e082888e27ef8753734802c344dfffa,"initParser(java.lang.String,com.android.sdklib.repository.FullRevision,com.android.utils.ILogger)","initParser(java.lang.String,com.android.sdklib.repository.FullRevision,com.android.utils.ILogger)",2,7,"@java.lang.Override public void initParser(@com.android.annotations.NonNull java.lang.String target, @com.android.annotations.NonNull com.android.sdklib.repository.FullRevision buildToolRevision, @com.android.annotations.NonNull com.android.utils.ILogger logger) { if (!(mInitialized)) { mTarget = new com.android.builder.internal.FakeAndroidTarget(mPlatformRootFolder, target); mBuildToolInfo = new com.android.sdklib.BuildToolInfo(buildToolRevision, new java.io.File(mPlatformRootFolder), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AAPT), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AIDL), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/tools/dx""), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/tools/lib/dx.jar""), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_RENDERSCRIPT), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/renderscript/include""), new java.io.File(mPlatformRootFolder, ""prebuilts/sdk/renderscript/clang-include""), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_BCC_COMPAT), new java.io.File(getHostToolsFolder(), ""arm-linux-androideabi-ld""), new java.io.File(getHostToolsFolder(), ""i686-linux-android-ld""), new java.io.File(getHostToolsFolder(), ""mipsel-linux-android-ld"")); mInitialized = true; } }",6017de215bda6495f2f30cc66c1b5f2a34233115,"initParser(java.lang.String,com.android.sdklib.repository.FullRevision,com.android.utils.ILogger)",333787,445,397
331764,core_java_android_net_ConnectivityManager.java,68.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void registerNetworkCallback(android.net.NetworkRequest request, android.net.ConnectivityManager.NetworkCallback networkCallback, android.os.Handler handler) { sendRequestForNetwork(request.networkCapabilities, networkCallback, 0, android.net.ConnectivityManager.LISTEN, android.net.ConnectivityManager.TYPE_NONE, handler); }",21d9d7ccbf7b9fc1ef42d977c8706ea99cab8ce6,,"registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)",12,133,"public void registerNetworkCallback(android.net.NetworkRequest request, android.net.ConnectivityManager.NetworkCallback networkCallback, android.os.Handler handler) { android.net.ConnectivityManager.CallbackHandler cbHandler = new android.net.ConnectivityManager.CallbackHandler(handler); android.net.NetworkCapabilities nc = request.networkCapabilities; sendRequestForNetwork(nc, networkCallback, 0, android.net.ConnectivityManager.LISTEN, android.net.ConnectivityManager.TYPE_NONE, cbHandler); }",c66553bc6da15dfc28f60ca0e26763e0cf387b2d,"registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)",272819,71,106
87714,build-system_manifest-merger_src_main_java_com_android_manifmerger_PostValidator.java,,,,"private static MergingReport.Result validate(com.android.manifmerger.XmlElement xmlElement, com.android.manifmerger.ActionRecorder actionRecorder, com.android.utils.ILogger iLogger) { com.android.manifmerger.MergingReport.Result result = MergingReport.Result.SUCCESS; com.android.manifmerger.NodeOperationType operationType = xmlElement.getOperationType(); switch (operationType) { case REPLACE : if (!(com.android.manifmerger.PostValidator.isNodeOperationPresent(xmlElement, actionRecorder, ActionType.REJECTED))) { iLogger.warning(("""" + (""%s was tagged at %s:%d to replace another declaration "" + ""but no other declaration present"")), xmlElement.getId(), xmlElement.getDocument().getSourceLocation().print(true), xmlElement.getPosition().getLine()); result = MergingReport.Result.WARNING; } break; case REMOVE : case REMOVE_ALL : if (!(com.android.manifmerger.PostValidator.isNodeOperationPresent(xmlElement, actionRecorder, ActionType.REJECTED))) { iLogger.warning(("""" + (""%s was tagged at %s:%d to remove other declarations "" + ""but no other declaration present"")), xmlElement.getId(), xmlElement.getDocument().getSourceLocation().print(true), xmlElement.getPosition().getLine()); result = MergingReport.Result.WARNING; } break; } com.android.manifmerger.PostValidator.validateAttributes(xmlElement, actionRecorder, iLogger); for (com.android.manifmerger.XmlElement child : xmlElement.getMergeableElements()) { if ((com.android.manifmerger.PostValidator.validate(child, actionRecorder, iLogger)) == (MergingReport.Result.WARNING)) { result = MergingReport.Result.WARNING; } } return result; }",aee9c254cc892198baf0f2a8886da743d60420d0,,"validate(com.android.manifmerger.XmlElement,com.android.manifmerger.ActionRecorder,com.android.utils.ILogger)",3,2,"private static MergingReport.Result validate(com.android.manifmerger.XmlElement xmlElement, com.android.manifmerger.ActionRecorder recorder, com.android.utils.ILogger logger) { com.android.manifmerger.MergingReport.Result result = Result.SUCCESS; com.android.manifmerger.NodeOperationType operationType = xmlElement.getOperationType(); switch (operationType) { case REPLACE : if (!(com.android.manifmerger.PostValidator.isNodeOperationPresent(xmlElement, recorder, ActionType.REJECTED))) { logger.warning((""%1$s was tagged at %2$s:%3$d to replace another declaration "" + ""but no other declaration present""), xmlElement.getId(), xmlElement.getDocument().getSourceLocation().print(true), xmlElement.getPosition().getLine()); result = Result.WARNING; } break; case REMOVE : case REMOVE_ALL : if (!(com.android.manifmerger.PostValidator.isNodeOperationPresent(xmlElement, recorder, ActionType.REJECTED))) { logger.warning((""%1$s was tagged at %2$s:%3$d to remove other declarations "" + ""but no other declaration present""), xmlElement.getId(), xmlElement.getDocument().getSourceLocation().print(true), xmlElement.getPosition().getLine()); result = Result.WARNING; } break; } com.android.manifmerger.PostValidator.validateAttributes(xmlElement, recorder, logger); for (com.android.manifmerger.XmlElement child : xmlElement.getMergeableElements()) { if ((com.android.manifmerger.PostValidator.validate(child, recorder, logger)) == (Result.WARNING)) { result = Result.WARNING; } } return result; }",f21d4f0632ced2ebbad27e2ee9b9c1fd2a3c7163,"validate(com.android.manifmerger.XmlElement,com.android.manifmerger.ActionRecorder,com.android.utils.ILogger)",517228,419,392
309003,hostsidetests_services_windowmanager_src_android_wm_cts_CrossAppDragAndDropTests.java,15.0,"public void testGrantNoneRequestNone() throws java.lang.Exception { doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.GRANT_NONE, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, android.wm.cts.CrossAppDragAndDropTests.RESULT_EXCEPTION); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }",888386e016c946a0460b80d59a5050943c7c5b3c,"public void testGrantNoneRequestNone() throws java.lang.Exception { if (!(supportsMultiWindow())) { return; } doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.GRANT_NONE, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, android.wm.cts.CrossAppDragAndDropTests.RESULT_EXCEPTION); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }",fc670649a17de4787ed6748afa8116ff2d938eb8,testGrantNoneRequestNone(),testGrantNoneRequestNone(),13,14,"public void testGrantNoneRequestNone() throws java.lang.Exception { doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.GRANT_NONE, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, android.wm.cts.CrossAppDragAndDropTests.RESULT_EXCEPTION); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }",888386e016c946a0460b80d59a5050943c7c5b3c,testGrantNoneRequestNone(),55468,171,161
68130,java_src_test_java_com_google_protobuf_NanoTest.java,63.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void populate(com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano message) { message.optionalInt32 = 5; message.optionalInt64 = 777; message.optionalFloat = 1.0F; message.optionalDouble = 2.0; message.optionalBool = true; message.optionalString = ""Hello""; message.optionalBytes = new byte[]{ 1, 2, 3 }; message.optionalNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage(); message.optionalNestedMessage.bb = 27; message.optionalNestedEnum = com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR; message.repeatedInt32 = new int[]{ 5, 6, 7, 8 }; message.repeatedInt64 = new long[]{ 27L, 28L, 29L }; message.repeatedFloat = new float[]{ 5.0F, 6.0F }; message.repeatedDouble = new double[]{ 99.1, 22.5 }; message.repeatedBool = new boolean[]{ true, false, true }; message.repeatedString = new java.lang.String[]{ ""One"", ""Two"" }; message.repeatedBytes = new byte[][]{ new byte[]{ 2, 7 }, new byte[]{ 2, 7 } }; message.repeatedNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage[]{ message.optionalNestedMessage, message.optionalNestedMessage }; message.repeatedNestedEnum = new int[]{ com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR, com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAZ }; message.defaultFloatNan = 1.0F; message.defaultDoubleNan = 1.0; }",3ee1b7d4d60917c537247faa5190c870847acf0a,,populate(com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano),4,52,"private com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano createMessageForHashCodeEqualsTest() { com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.optionalInt32 = 5; message.optionalInt64 = 777; message.optionalFloat = 1.0F; message.optionalDouble = 2.0; message.optionalBool = true; message.optionalString = ""Hello""; message.optionalBytes = new byte[]{ 1, 2, 3 }; message.optionalNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage(); message.optionalNestedMessage.bb = 27; message.optionalNestedEnum = com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR; message.repeatedInt32 = new int[]{ 5, 6, 7, 8 }; message.repeatedInt64 = new long[]{ 27L, 28L, 29L }; message.repeatedFloat = new float[]{ 5.0F, 6.0F }; message.repeatedDouble = new double[]{ 99.1, 22.5 }; message.repeatedBool = new boolean[]{ true, false, true }; message.repeatedString = new java.lang.String[]{ ""One"", ""Two"" }; message.repeatedBytes = new byte[][]{ new byte[]{ 2, 7 }, new byte[]{ 2, 7 } }; message.repeatedNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage[]{ message.optionalNestedMessage, message.optionalNestedMessage }; message.repeatedNestedEnum = new int[]{ com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR, com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAZ }; message.defaultFloatNan = 1.0F; message.defaultDoubleNan = 1.0; return message; }",2b1b6be9c6f962e1c12a0fa6bc588f6d580b7530,createMessageForHashCodeEqualsTest(),283690,385,426
551290,src_com_android_bluetooth_hid_HidDeviceService.java,7.0,"synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((""reportError(): device="" + device) + "" error="") + error)); } if (!(checkDevice(device))) { return false; } return reportErrorNative(error); }",845e78e67a10a4c978f1e54e4d41caedfb50723e,"synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((""reportError(): device="" + device) + "" error="") + error)); } if (!(checkDevice(device))) { return false; } if (!(checkCallingUid())) { return false; } return reportErrorNative(error); }",7620c2b099d84cffee1341aaf9c7dd0cc1736833,"reportError(android.bluetooth.BluetoothDevice,byte)","reportError(android.bluetooth.BluetoothDevice,byte)",11,19,"synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((""reportError(): device="" + device) + "" error="") + error)); } return ((checkDevice(device)) && (checkCallingUid())) && (mHidDeviceNativeInterface.reportError(error)); }",b7cdb1ce072950face07192a46fc4b66dbd10324,"reportError(android.bluetooth.BluetoothDevice,byte)",80269,110,109
91995,luni_src_main_java_libcore_io_Os.java,84.0,public void fdatasync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,6882d763c3690a90749d9b882d5a12a2777f2094,public void fdatasync(java.io.FileDescriptor fd) throws android.os.ErrnoException;,a5069f74595aad72987133ab8603c4dde20fbdb3,fdatasync(java.io.FileDescriptor),fdatasync(java.io.FileDescriptor),3,84,public void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,17be24b72469d75e217a65eaa676ffbc1b6b9e81,fdatasync(java.io.FileDescriptor),170188,22,22
567897,telephony_java_android_telephony_euicc_EuiccManager.java,4.0,@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return mController.getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },c2be24f29fa1a3997da92e10e92706420789d612,@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return getIEuiccController().getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },3ecfcc3253dfbe9b3d9f32f5d11b4f1821b09019,getEid(),getEid(),2,4,@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },a149748101f70c2eeec0bd04b6bdab8c121707e0,getEid(),377346,60,73
349011,src_com_android_bluetooth_map_BluetoothMapMasInstance.java,24.0,"public void restartObexServerSession() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, ""MAP Service restartObexServerSession()""); startRfcommSocketListener(); }",37ccb0807032ae206cab9497791a0ca3f5674036,"public void restartObexServerSession() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG, ""MAP Service restartObexServerSession()""); startSocketListeners(); }",346054d6849d272f8a14209673968ad4f52e5f5a,restartObexServerSession(),restartObexServerSession(),4,24,"public void restartObexServerSession() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""MAP Service restartObexServerSession()""); } startSocketListeners(); }",b3a33d0ddb16b251b9be671dc8807f5556ce4bcd,restartObexServerSession(),457956,52,55
342596,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerTestBase.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected boolean noHomeScreen() throws com.android.tradefed.device.DeviceNotAvailableException { com.android.tradefed.device.CollectingOutputReceiver outputReceiver = new com.android.tradefed.device.CollectingOutputReceiver(); executeShellCommand(android.server.cts.ActivityManagerTestBase.AM_NO_HOME_SCREEN, outputReceiver); java.lang.String output = outputReceiver.getOutput(); return output.startsWith(""true""); }",cb1b700b98a461657e6cc7a87307aa8d5e9bdf4d,,noHomeScreen(),3,6,"protected boolean noHomeScreen() throws com.android.tradefed.device.DeviceNotAvailableException { if (!(android.server.cts.ActivityManagerTestBase.mCheckedNoHomeScreen)) { try { executeShellCommand((""am start -n android.server.app/."" + (NO_HOME_SCREEN_OBSERVER))); waitForResume(""android.server.app"", NO_HOME_SCREEN_OBSERVER); java.util.Map map = getLogResults(NO_HOME_SCREEN_OBSERVER); java.lang.String value = ((java.lang.String) (map.get(RESULT_KEY_HEAD))); if ((value != null) && (value.equals(""OK""))) { android.server.cts.ActivityManagerTestBase.mCheckedNoHomeScreen = true; android.server.cts.ActivityManagerTestBase.mNoHomeScreen = map.get(""config_noHomeScreen"").equals(""true""); } executeShellCommand(android.server.cts.ActivityManagerTestBase.AM_FORCE_STOP_TEST_PACKAGE); } catch (java.lang.Exception e) { e.printStackTrace(); } } return android.server.cts.ActivityManagerTestBase.mNoHomeScreen; }",03cefaa06754eaa69a96888a0f0efa8a619e5012,noHomeScreen(),508916,100,260
328218,src_com_android_bluetooth_btservice_AdapterProperties.java,44.0,"void discoveryStateChangeCallback(int state) { infoLog((""Callback:discoveryStateChangeCallback with state:"" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }",d36856ba5585a553edd61ed4819b891ba917694c,"void discoveryStateChangeCallback(int state) { infoLog((""Callback:discoveryStateChangeCallback with state:"" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; mDiscoveryEnded = java.lang.System.currentTimeMillis(); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; mDiscoveryEnded = (java.lang.System.currentTimeMillis()) + (com.android.bluetooth.btservice.AdapterProperties.DEFAULT_DISCOVERY_TIMEOUT_MS); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }",90d3d412e0905d75f70d06f7d6be52e70e453c76,discoveryStateChangeCallback(int),discoveryStateChangeCallback(int),6,44,"void discoveryStateChangeCallback(int state) { infoLog((""Callback:discoveryStateChangeCallback with state:"" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; mDiscoveryEndMs = java.lang.System.currentTimeMillis(); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; mDiscoveryEndMs = (java.lang.System.currentTimeMillis()) + (com.android.bluetooth.btservice.AdapterProperties.DEFAULT_DISCOVERY_TIMEOUT_MS); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }",f598a60c64bf38f6bf845d83283be2e9821772fe,discoveryStateChangeCallback(int),384913,229,231
98929,harmony-tests_src_test_java_org_apache_harmony_tests_java_util_CollectionsTest.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_unmodifiableMap_LinkedHashMap() { java.util.LinkedHashMap<java.lang.String, java.lang.Integer> smallMap = new java.util.LinkedHashMap<java.lang.String, java.lang.Integer>(); for (int counter = 0; counter < 100; counter++) { java.lang.Integer object = objArray[counter]; smallMap.put(object.toString(), object); } new tests.support.Support_MapTest("""", smallMap).runTest(); }",4685a07061cfb004b99e98724f16b1df08602b3c,,test_unmodifiableMap_LinkedHashMap(),2,67,"public void test_unmodifiableMap_LinkedHashMap() { java.util.LinkedHashMap<java.lang.String, java.lang.Integer> smallMap = new java.util.LinkedHashMap<java.lang.String, java.lang.Integer>(); for (int i = 0; i < 100; i++) { java.lang.Integer object = objArray[i]; smallMap.put(object.toString(), object); } new org.apache.harmony.tests.java.util.CollectionsTest.MapTestSupport(smallMap).runTest(); }",7a6a497258a2832ff4876b75bfe294bb8844e875,test_unmodifiableMap_LinkedHashMap(),223426,102,114
15341,sdkmanager_libs_sdklib_src_com_android_sdklib_build_ApkBuilder.java,,,,"private void checkInputFile(java.io.File file) throws com.android.sdklib.build.ApkBuilder.ApkCreationException { if (file.isDirectory()) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(((file.getAbsolutePath()) + "" is a directory!"")); } if (file.exists()) { if ((file.canRead()) == false) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException((""Cannot read "" + (file.getAbsolutePath()))); } } else { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(((file.getAbsolutePath()) + "" does not exists!"")); } }",d3298614e5874ffb2de6df509c6720b652ebbb10,,checkInputFile(java.io.File),15,11,"private void checkInputFile(java.io.File file) throws com.android.sdklib.build.ApkBuilder.ApkCreationException { if (file.isDirectory()) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(""%s is a directory!"", file); } if (file.exists()) { if ((file.canRead()) == false) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(""Cannot read %s"", file); } } else { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(""%s does not exist"", file); } }",5b93ef2b9ca8a968226d56e986b510bf43f22eea,checkInputFile(java.io.File),230108,148,137
116621,jack_src_com_android_jack_analysis_dependency_type_TypeDependenciesWriter.java,,,,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession program) throws com.android.jack.JackUserException { try { com.android.sched.vfs.OutputVFile outputVFile; if ((((outputLibrary) != null) && (!(isIncrementalMode))) && ((intermediateDexDir) == null)) { outputVFile = outputLibrary.createFile(FileType.DEPENDENCIES, TypeDependencies.vpath); } else { assert (intermediateDexDir) != null; com.android.sched.vfs.VPath typeDependencyPath = TypeDependencies.vpath.clone(); typeDependencyPath.prependPath(new com.android.sched.vfs.VPath("".."", '/')); outputVFile = intermediateDexDir.createOutputVFile(typeDependencyPath); } com.android.jack.Jack.getSession().getTypeDependencies().write(outputVFile); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new com.android.jack.JackIOException((""Could not create type dependencies file in output "" + ((outputLibrary) != null ? outputLibrary.getLocation().getDescription() : intermediateDexDir)), e); } catch (java.io.IOException e) { throw new com.android.jack.JackIOException((""Could not create type dependencies file in output "" + ((outputLibrary) != null ? outputLibrary.getLocation().getDescription() : intermediateDexDir)), e); } }",190f5a7be3ba7ca7a72e63230f4a13d239eaf690,,run(com.android.jack.ir.ast.JSession),9,0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession program) throws com.android.jack.JackUserException { java.io.PrintStream ps = null; try { com.android.sched.vfs.OutputVFile outputVFile; if ((((outputLibrary) != null) && (!(isIncrementalMode))) && ((intermediateDexDir) == null)) { outputVFile = outputLibrary.createFile(FileType.DEPENDENCIES, TypeDependencies.vpath); } else { assert (intermediateDexDir) != null; com.android.sched.vfs.VPath typeDependencyPath = TypeDependencies.vpath.clone(); typeDependencyPath.prependPath(new com.android.sched.vfs.VPath("".."", '/')); outputVFile = intermediateDexDir.getRootOutputVDir().createOutputVFile(typeDependencyPath); } ps = new java.io.PrintStream(outputVFile.openWrite()); com.android.jack.Jack.getSession().getTypeDependencies().write(ps); } catch (com.android.sched.util.file.CannotCreateFileException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } catch (java.io.IOException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } finally { if (ps != null) { ps.close(); } } }",52f2fec97d726836073b1db9c3395d6c7045e7b6,run(com.android.jack.ir.ast.JSession),156292,325,418
41960,eclipse_plugins_com.android.ide.eclipse.ndk_src_com_android_ide_eclipse_ndk_internal_wizards_AddNativeWizard.java,1.0,"@java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { org.eclipse.core.resources.IWorkspaceRunnable op1 = new org.eclipse.core.resources.IWorkspaceRunnable() { @java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor1) throws org.eclipse.core.runtime.CoreException { org.eclipse.cdt.core.CCorePlugin.getDefault().convertProjectToCC(mProject, monitor1, MakeCorePlugin.MAKE_PROJECT_ID); new com.android.ide.eclipse.ndk.internal.wizards.NdkWizardHandler().convertProject(mProject, monitor1); com.android.ide.eclipse.ndk.internal.NdkManager.addNativeSupport(mProject, mTemplateArgs, monitor1); } }; org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace(); try { workspace.run(op1, workspace.getRoot(), 0, new org.eclipse.core.runtime.NullProgressMonitor()); } catch (org.eclipse.core.runtime.CoreException e) { throw new java.lang.reflect.InvocationTargetException(e); } }",7cbda6bcc3fa0434105dd4257f1930498e9d3a8c,"@java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { org.eclipse.core.resources.IWorkspaceRunnable op1 = new org.eclipse.core.resources.IWorkspaceRunnable() { @java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor1) throws org.eclipse.core.runtime.CoreException { org.eclipse.cdt.core.CCorePlugin.getDefault().convertProjectToCC(mProject, monitor1, MakeCorePlugin.MAKE_PROJECT_ID); new com.android.ide.eclipse.ndk.internal.wizards.NdkWizardHandler().convertProject(mProject, monitor1); org.eclipse.cdt.core.language.settings.providers.ScannerDiscoveryLegacySupport.setLanguageSettingsProvidersFunctionalityEnabled(mProject, false); com.android.ide.eclipse.ndk.internal.NdkManager.addNativeSupport(mProject, mTemplateArgs, monitor1); } }; org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace(); try { workspace.run(op1, workspace.getRoot(), 0, new org.eclipse.core.runtime.NullProgressMonitor()); } catch (org.eclipse.core.runtime.CoreException e) { throw new java.lang.reflect.InvocationTargetException(e); } }",e1438171f018d7f2170bb179a4f1db2952931aad,run(org.eclipse.core.runtime.IProgressMonitor),run(org.eclipse.core.runtime.IProgressMonitor),2,1,"@java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { org.eclipse.core.resources.IWorkspaceRunnable op1 = new org.eclipse.core.resources.IWorkspaceRunnable() { @java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor1) throws org.eclipse.core.runtime.CoreException { org.eclipse.cdt.core.CCorePlugin.getDefault().convertProjectToCC(mProject, monitor1, MakeCorePlugin.MAKE_PROJECT_ID); new com.android.ide.eclipse.ndk.internal.wizards.NdkWizardHandler().convertProject(mProject, monitor1); try { @java.lang.SuppressWarnings(""rawtypes"") java.lang.Class c = getClass().getClassLoader().loadClass(""org.eclipse.cdt.core.language.settings.providers.ScannerDiscoveryLegacySupport""); @java.lang.SuppressWarnings(""unchecked"") java.lang.reflect.Method m = c.getMethod(""setLanguageSettingsProvidersFunctionalityEnabled"", org.eclipse.core.resources.IProject.class, boolean.class); m.invoke(null, mProject, false); } catch (java.lang.Exception e) { } com.android.ide.eclipse.ndk.internal.NdkManager.addNativeSupport(mProject, mTemplateArgs, monitor1); } }; org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace(); try { workspace.run(op1, workspace.getRoot(), 0, new org.eclipse.core.runtime.NullProgressMonitor()); } catch (org.eclipse.core.runtime.CoreException e) { throw new java.lang.reflect.InvocationTargetException(e); } }",1adbaedacd3a4864235e386edbfe7b2affcdd098,run(org.eclipse.core.runtime.IProgressMonitor),126776,309,391
44563,luni_src_test_java_libcore_java_net_ConcurrentCloseTest.java,8.0,"public void test_connect_timeout() throws java.lang.Exception { tests.net.StuckServer ss = new tests.net.StuckServer(); java.net.Socket s = new java.net.Socket(); new libcore.java.net.ConcurrentCloseTest.Killer(s).start(); try { java.lang.System.err.println(((((""connect (with timeout) "" + s) + "" to "") + (ss.getLocalSocketAddress())) + ""..."")); s.connect(ss.getLocalSocketAddress(), (3600 * 1000)); fail(((""connect returned: "" + s) + ""!"")); } catch (java.net.SocketException expected) { assertEquals(""Socket closed"", expected.getMessage()); } finally { ss.close(); } }",787dd3eb81cfffb9e9d6a4b1d74fd4adbd8f4e3f,"public void test_connect_timeout() throws java.lang.Exception { tests.net.StuckServer ss = new tests.net.StuckServer(false); java.net.Socket s = new java.net.Socket(); new libcore.java.net.ConcurrentCloseTest.Killer(s).start(); try { java.lang.System.err.println(((((""connect (with timeout) "" + s) + "" to "") + (ss.getLocalSocketAddress())) + ""..."")); s.connect(ss.getLocalSocketAddress(), (3600 * 1000)); fail(((""connect returned: "" + s) + ""!"")); } catch (java.net.SocketException expected) { assertEquals(""Socket closed"", expected.getMessage()); } finally { ss.close(); } }",48c3b11d876305bc6348e8426cc4987580b125c9,test_connect_timeout(),test_connect_timeout(),2,8,"public void test_connect_timeout() throws java.lang.Exception { tests.net.StuckServer ss = new tests.net.StuckServer(false); java.net.Socket s = new java.net.Socket(); new libcore.java.net.ConcurrentCloseTest.Killer(s).start(); try { java.lang.System.err.println(""connect (with timeout)...""); s.connect(ss.getLocalSocketAddress(), (3600 * 1000)); fail(((""connect returned: "" + s) + ""!"")); } catch (java.net.SocketException expected) { assertEquals(""Socket closed"", expected.getMessage()); } finally { ss.close(); } }",7ab251b60f007e1a7981b4169e372ce0b54f9754,test_connect_timeout(),165955,175,153
101172,perflib_src_test_java_com_android_tools_perflib_heap_analysis_DominatorsTest.java,,,,"public void testSimpleGraph() { mHeap = new com.android.tools.perflib.heap.analysis.SyntheticHeap(6).addEdge(1, 2).addEdge(1, 3).addEdge(2, 4).addEdge(2, 6).addEdge(3, 4).addEdge(3, 5).addEdge(4, 6).addRoot(1).getHeap(); mDominators = new com.android.tools.perflib.heap.analysis.Dominators(mHeap).getDominatorMap(); assertEquals(6, mDominators.size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); assertDominates(1, 6); assertDominates(3, 5); }",44a0f83714228941c19f115cbefb7175063ba163,,testSimpleGraph(),5,2,"public void testSimpleGraph() { mHeap = new com.android.tools.perflib.heap.analysis.HeapBuilder(6).addReference(1, 2).addReference(1, 3).addReference(2, 4).addReference(2, 6).addReference(3, 4).addReference(3, 5).addReference(4, 6).addRoot(1).getHeap(); mDominators = com.android.tools.perflib.heap.analysis.Dominators.getDominatorMap(mHeap); assertEquals(6, mDominators.size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); assertDominates(1, 6); assertDominates(3, 5); }",272299424a7298feb621301bb69500968ae9867b,testSimpleGraph(),504684,134,140
278609,telecomm_java_android_telecom_Log.java,43.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void addEvent(android.telecom.Logging.Events.EventRecordEntry recordEntry, java.lang.String event) { android.telecom.Log.getEvents().event(recordEntry, event, null); }",1f65db3e8d577a3662e473551aac398c75bedf65,,"addEvent(android.telecom.Logging.Events$EventRecordEntry,java.lang.String)",3,11,"public static void addEvent(android.telecom.Logging.EventManager.Loggable recordEntry, java.lang.String event) { android.telecom.Log.getEventManager().event(recordEntry, event, null); }",e79795a7c1e7b963ed1d8b1dc42bfe64cee7a3fc,"addEvent(android.telecom.Logging.EventManager$Loggable,java.lang.String)",122348,51,52
88521,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_Events_Breakpoint002Test.java,,,,"public void testInlinedIntSetter() { logWriter.println(""testInlinedIntSetter started""); testBreakpointIn(""breakpointIntSetter""); logWriter.println(""testInlinedIntSetter done""); }",b6113e06a4b5e036f90fa585e2acb90c86b600c6,,testInlinedIntSetter(),3,12,"public void testInlinedIntSetter() { testBreakpointIn(""testInlinedIntSetter"", ""breakpointIntSetter""); }",14e8ea1ee2bce62e1a3badb24ee4c73217653724,testInlinedIntSetter(),274224,43,26
133812,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_app_MultiModuleTestProject.java,1.0,"@java.lang.Override public void write(@com.android.annotations.NonNull final java.io.File projectDir, @com.android.annotations.Nullable final java.lang.String buildScriptContent) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, ? extends com.android.build.gradle.integration.common.fixture.TestProject> entry : subprojects.entrySet()) { java.lang.String subprojectPath = entry.getKey(); com.android.build.gradle.integration.common.fixture.TestProject subproject = entry.getValue(); subproject.write(new java.io.File(projectDir, com.android.build.gradle.integration.common.fixture.app.MultiModuleTestProject.convertGradlePathToDirectory(subprojectPath)), buildScriptContent); } java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (java.lang.String subprojectName : subprojects.keySet()) { builder.append(""include '"").append(subprojectName).append(""\'\n""); } com.google.common.io.Files.write(builder.toString(), new java.io.File(projectDir, ""settings.gradle""), java.nio.charset.Charset.defaultCharset()); }",fa8e09da50b4a7755da0a2d29003a20caeab2d5f,"@java.lang.Override public void write(@com.android.annotations.NonNull final java.io.File projectDir, @com.android.annotations.Nullable final java.lang.String buildScriptContent) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, ? extends com.android.build.gradle.integration.common.fixture.TestProject> entry : subprojects.entrySet()) { java.lang.String subprojectPath = entry.getKey(); com.android.build.gradle.integration.common.fixture.TestProject subproject = entry.getValue(); java.io.File subprojectDir = new java.io.File(projectDir, com.android.build.gradle.integration.common.fixture.app.MultiModuleTestProject.convertGradlePathToDirectory(subprojectPath)); if (!(subprojectDir.exists())) { subprojectDir.mkdirs(); assert subprojectDir.isDirectory(); } subproject.write(subprojectDir, """"); } java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (java.lang.String subprojectName : subprojects.keySet()) { builder.append(""include '"").append(subprojectName).append(""\'\n""); } com.google.common.io.Files.write(builder.toString(), new java.io.File(projectDir, ""settings.gradle""), java.nio.charset.Charset.defaultCharset()); com.google.common.io.Files.write(buildScriptContent, new java.io.File(projectDir, ""build.gradle""), java.nio.charset.Charset.defaultCharset()); }",7d17de23b18c5fb02fae8c91bdae5f2574f15a8b,"write(java.io.File,java.lang.String)","write(java.io.File,java.lang.String)",5,1,"@java.lang.Override public void write(@com.android.annotations.NonNull final java.io.File projectDir, @com.android.annotations.Nullable final java.lang.String buildScriptContent) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, ? extends com.android.build.gradle.integration.common.fixture.TestProject> entry : subprojects.entrySet()) { java.lang.String subprojectPath = entry.getKey(); com.android.build.gradle.integration.common.fixture.TestProject subproject = entry.getValue(); java.io.File subprojectDir = new java.io.File(projectDir, com.android.build.gradle.integration.common.fixture.app.MultiModuleTestProject.convertGradlePathToDirectory(subprojectPath)); if (!(subprojectDir.exists())) { subprojectDir.mkdirs(); assert subprojectDir.isDirectory(); } subproject.write(subprojectDir, null); } java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (java.lang.String subprojectName : subprojects.keySet()) { builder.append(""include '"").append(subprojectName).append(""\'\n""); } com.google.common.io.Files.write(builder.toString(), new java.io.File(projectDir, ""settings.gradle""), java.nio.charset.Charset.defaultCharset()); com.google.common.io.Files.write(buildScriptContent, new java.io.File(projectDir, ""build.gradle""), java.nio.charset.Charset.defaultCharset()); }",40c087ee8e0c7095ca9fc282aa7e58f7d041451f,"write(java.io.File,java.lang.String)",354108,342,343
46820,core_tests_overlaytests_OverlayTest_src_com_android_overlaytest_OverlayBaseTest.java,46.0,"public void testBooleanOverlay() throws java.lang.Throwable { final int resId = com.android.internal.R.bool.config_automatic_brightness_available; assertResource(resId, false, true); }",7909cea76388220ba7126f0b7d4e27ddd7b352d9,"public void testBooleanOverlay() throws java.lang.Throwable { final int resId = com.android.internal.R.bool.rro_test_usually_false; assertResource(resId, false, true, false); }",cffb9d07375e6e9c643c39e97545cf82042842d9,testBooleanOverlay(),testBooleanOverlay(),16,33,"public void testFrameworkBooleanOverlay() throws java.lang.Throwable { final int resId = com.android.internal.R.bool.config_annoy_dianne; assertResource(resId, true, false, false); }",5ef4067cda02c78c37bab4d9974c09790efb0a01,testFrameworkBooleanOverlay(),81759,50,51
531103,src_com_android_bluetooth_hfp_HeadsetNativeInterface.java,,,,boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { return disconnectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); },98559ed3c89d329ae63fa5bb58ea3c26573c798c,,disconnectAudio(android.bluetooth.BluetoothDevice),10,18,@android.support.annotation.VisibleForTesting public boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { return disconnectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); },2beb34fc3261dcb13df51b83e94322cdec11e617,disconnectAudio(android.bluetooth.BluetoothDevice),386030,31,41
81416,tests_tests_renderscript_src_android_renderscript_cts_TestRint.java,,,,"private void checkRintFloat4() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testRintFloat4(in, out); verifyResultsRintFloat4(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRintFloat4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testRintFloat4(in, out); verifyResultsRintFloat4(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRintFloat4: "" + (e.toString()))); } }",9f79c4013c9cd3ee68134f7b8b7810bf63b587b1,,checkRintFloat4(),9,7,"private void checkRintFloat4Float4() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -9020879362006948442L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testRintFloat4Float4(in, out); verifyResultsRintFloat4Float4(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRintFloat4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testRintFloat4Float4(in, out); verifyResultsRintFloat4Float4(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRintFloat4Float4: "" + (e.toString()))); } }",cbf8fa37552157d6f032574720a9e59bab930b66,checkRintFloat4Float4(),142995,329,311
18971,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gre_RulesEngine.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void callCreateHooks(final com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor editor, final com.android.ide.common.api.InsertType insertType, final com.android.ide.common.api.IViewRule parentRule, final com.android.ide.common.api.INode parentNode, final com.android.ide.common.api.IViewRule childRule, final com.android.ide.common.api.INode newNode) { if (!(editor.isEditXmlModelPending())) { editor.wrapUndoEditXmlModel(""Customize creation"", new java.lang.Runnable() { public void run() { com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine.callCreateHooks(editor, insertType, parentRule, parentNode, childRule, newNode); } }); return; } if (parentRule != null) { parentRule.onInsert(newNode, parentNode, insertType); } if (childRule != null) { childRule.onCreate(newNode, parentNode, insertType); } }",300aad25a5be43746047a045a06136a11db37728,,"callCreateHooks(com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor,com.android.ide.common.api.InsertType,com.android.ide.common.api.IViewRule,com.android.ide.common.api.INode,com.android.ide.common.api.IViewRule,com.android.ide.common.api.INode)",5,3,"private static void callCreateHooks(final com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor editor, final com.android.ide.common.api.InsertType insertType, final com.android.ide.common.api.IViewRule parentRule, final com.android.ide.common.api.INode parentNode, final com.android.ide.common.api.IViewRule childRule, final com.android.ide.common.api.INode newNode) { if (!(editor.isEditXmlModelPending())) { editor.wrapUndoEditXmlModel(""Customize creation"", new java.lang.Runnable() { public void run() { com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine.callCreateHooks(editor, insertType, parentRule, parentNode, childRule, newNode); } }); return; } if (parentRule != null) { parentRule.onChildInserted(newNode, parentNode, insertType); } if (childRule != null) { childRule.onCreate(newNode, parentNode, insertType); } }",9a35d6b5714775d5928bf91837e73f6dddb18912,"callCreateHooks(com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor,com.android.ide.common.api.InsertType,com.android.ide.common.api.IViewRule,com.android.ide.common.api.INode,com.android.ide.common.api.IViewRule,com.android.ide.common.api.INode)",396048,240,241
18735,tools_vm-tests_src_dot_junit_opcodes_iget_boolean_Test_iget_boolean.java,0.0,"public void testVFE16() { try { java.lang.Class.forName(""dot.junit.opcodes.iget_boolean.d.T_iget_boolean_5""); fail(""expected a verification exception""); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }",403e73f8c9c8a12025ae2238bf782a1e07bb3092,"public void testVFE16() { try { dot.junit.opcodes.iget_boolean.d.T_iget_boolean_5 t = new dot.junit.opcodes.iget_boolean.d.T_iget_boolean_5(); t.run(); fail(""expected an IncompatibleClassChangeError exception""); } catch (java.lang.IncompatibleClassChangeError e) { } }",d353c3bd212ebccfba785e88e7e79dad10b87985,testVFE16(),testVFE16(),2,0,"public void testVFE16() { try { new dot.junit.opcodes.iget_boolean.d.T_iget_boolean_5().run(); fail(""expected an IncompatibleClassChangeError exception""); } catch (java.lang.IncompatibleClassChangeError e) { } }",59021643e5f28b1a5a8847583247e25fedc69785,testVFE16(),456432,93,64
231511,jack-tests_tests_com_android_jack_shrob_ShrinkTests.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void test56_001() throws java.lang.Exception { runTest(""056"", ""001"", """"); }",404b2c8a53e8f7ae504f4a6760ffde1fc749a2d3,,test56_001(),6,30,"@org.junit.Test public void test57_001() throws java.lang.Exception { runTest(""057"", ""001"", """"); }",6bef521b3849e663ed8d80c359224ba7cdcaf57d,test57_001(),444710,31,31
81416,tests_tests_renderscript_src_android_renderscript_cts_TestHalfRsqrt.java,,,,"private void checkHalfRsqrtFloat3() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testHalfRsqrtFloat3(inV, out); verifyResultsHalfRsqrtFloat3(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testHalfRsqrtFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testHalfRsqrtFloat3(inV, out); verifyResultsHalfRsqrtFloat3(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testHalfRsqrtFloat3: "" + (e.toString()))); } }",64d434f791d69fdd4a1dd0aac66cfaffaf618a09,,checkHalfRsqrtFloat3(),9,1,"private void checkHalfRsqrtFloat3Float3() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -4336029855328095729L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testHalfRsqrtFloat3Float3(inV, out); verifyResultsHalfRsqrtFloat3Float3(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testHalfRsqrtFloat3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testHalfRsqrtFloat3Float3(inV, out); verifyResultsHalfRsqrtFloat3Float3(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testHalfRsqrtFloat3Float3: "" + (e.toString()))); } }",9f21fa1153fc6f8b53db1388406d71eef0d64c99,checkHalfRsqrtFloat3Float3(),143171,337,322
36031,ddms_libs_ddmuilib_src_com_android_ddmuilib_logcat_LogCatPanel.java,48.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void run() { if (mViewer.getTable().isDisposed()) { return; } synchronized(this) { mCurrentRefresher = null; } int nDeleted; synchronized(mDeletedLock) { nDeleted = mDeletedSinceLastRefreshCount; mDeletedSinceLastRefreshCount = 0; } int topIndex = mViewer.getTable().getTopIndex(); mViewer.getTable().setRedraw(false); mViewer.refresh(); if (mShouldScrollToLatestLog) { scrollToLatestLog(); } else { if (topIndex > nDeleted) { topIndex -= nDeleted; } mViewer.getTable().setTopIndex(topIndex); } mViewer.getTable().setRedraw(true); },e6f5480b6fe65af7b5212284a52dc239884c3a2c,,run(),10,29,private static org.eclipse.swt.graphics.Color getForegroundColor(com.android.ddmuilib.logcat.LogCatMessage m) { com.android.ddmlib.Log.LogLevel l = m.getLogLevel(); if (l.equals(LogLevel.VERBOSE)) { return com.android.ddmuilib.logcat.LogCatPanel.VERBOSE_MSG_COLOR; } else if (l.equals(LogLevel.INFO)) { return com.android.ddmuilib.logcat.LogCatPanel.INFO_MSG_COLOR; } else if (l.equals(LogLevel.DEBUG)) { return com.android.ddmuilib.logcat.LogCatPanel.DEBUG_MSG_COLOR; } else if (l.equals(LogLevel.ERROR)) { return com.android.ddmuilib.logcat.LogCatPanel.ERROR_MSG_COLOR; } else if (l.equals(LogLevel.WARN)) { return com.android.ddmuilib.logcat.LogCatPanel.WARN_MSG_COLOR; } return null; },9a0c2eebc5134fb5d4afc148e624779ff433e50f,getForegroundColor(com.android.ddmuilib.logcat.LogCatMessage),433889,154,234
308588,luni_src_test_java_libcore_io_MemoryMappedFileTest.java,,,,"private static void checkIntFailureCases(libcore.io.BufferIterator iterator) { assertEquals(10, iterator.size()); iterator.seek((-1)); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek((-4)); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek(7); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek(10); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); }",29f6f08a9f5ca45461ea9d6cfa20c051badf478d,,checkIntFailureCases(libcore.io.BufferIterator),12,16,private static void checkIntFailureCases(libcore.io.BufferIterator iterator) { iterator.seek((-1)); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek((-4)); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek(7); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek(10); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); },8a828088ec5a46a521fb8b0e3739c290a6cbc6ca,checkIntFailureCases(libcore.io.BufferIterator),42678,120,114
237050,test_458-checker-instruction-simplification_src_Main.java,87.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static int AddAddSubAddConst(int arg) { return (((arg + 1) + 2) - 3) + 4; },26f8550bc1555cbf3ff2735ca331b1cf86597643,,AddAddSubAddConst(int),6,27,public static int $noinline$AddAddSubAddConst(int arg) { if (Main.doThrow) { throw new java.lang.Error(); } return (((arg + 1) + 2) - 3) + 4; },980f9960f0d72e1d4415f7d88daf49b0539acadb,$noinline$AddAddSubAddConst(int),438712,25,46
510897,src_com_android_bluetooth_mapclient_MnsService.java,2.0,"void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, ""stop()""); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }",cc642dd341a23f70a2a566ff137e8f8ed4f9607a,"void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, ""stop()""); mShutdown = true; if ((mSdpHandle) >= 0) { if (!(com.android.bluetooth.sdp.SdpManager.getDefaultManager().removeSdpRecord(mSdpHandle))) { android.util.Log.e(com.android.bluetooth.mapclient.MnsService.TAG, (""Failed to remove sdp handle "" + (mSdpHandle))); mSdpHandle = -1; } } if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }",fae32c5cf77ebef8a46c34d7a75b38dd00329bc8,stop(),stop(),5,3,"void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, ""stop()""); mShutdown = true; cleanUpSdpRecord(); if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }",03e018e4202e65f4c5479f8a975739dc71cec3fe,stop(),33767,209,127
55540,sdk-common_src_main_java_com_android_ide_common_res2_MergeConsumer.java,0.0,"void removeItem(I removedItem, I replacedBy) throws com.android.ide.common.res2.MergeConsumer.ConsumerException;",7b1c3cfe1dd9dab129ce69a9257f7bcffe0790fd,"void removeItem(@com.android.annotations.NonNull I removedItem, I replacedBy) throws com.android.ide.common.res2.MergeConsumer.ConsumerException;",ec57b7f168ae6ab6d51b45b0b234e747733a3a29,"removeItem(com.android.ide.common.res2.DataItem,com.android.ide.common.res2.DataItem)","removeItem(com.android.ide.common.res2.DataItem,com.android.ide.common.res2.DataItem)",8,0,"void removeItem(@com.android.annotations.NonNull I removedItem, @com.android.annotations.Nullable I replacedBy) throws com.android.ide.common.res2.MergeConsumer.ConsumerException;",2bba7ade4ef92b694e99c68a2350e280d4f2311c,"removeItem(com.android.ide.common.res2.DataItem,com.android.ide.common.res2.DataItem)",454413,36,44
329960,service_java_com_android_server_wifi_WifiStateMachine.java,194.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void initialize() { sendMessage(com.android.server.wifi.WifiStateMachine.CMD_INITIALIZE); },85bd7ce3e18e9f54a331eee6c510844daa8b9e51,,initialize(),14,223,public boolean syncInitialize(com.android.internal.util.AsyncChannel channel) { android.os.Message resultMsg = channel.sendMessageSynchronously(com.android.server.wifi.WifiStateMachine.CMD_INITIALIZE); boolean result = (resultMsg.arg1) != (com.android.server.wifi.WifiStateMachine.FAILURE); resultMsg.recycle(); return result; },cb928cea160992a069466e76db198c4a45397808,syncInitialize(com.android.internal.util.AsyncChannel),71886,25,82
247700,services_core_java_com_android_server_MountService.java,116.0,"private void onStartUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, (""onStartUser "" + userId)); try { mConnector.execute(""volume"", ""user_started"", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mVolumes) { for (int i = 0; i < (mVolumes.size()); i++) { final android.os.storage.VolumeInfo vol = mVolumes.valueAt(i); if ((vol.isVisibleForRead(userId)) && (vol.isMountedReadable())) { final android.os.storage.StorageVolume userVol = vol.buildStorageVolume(mContext, userId, false); mHandler.obtainMessage(com.android.server.MountService.H_VOLUME_BROADCAST, userVol).sendToTarget(); final java.lang.String envState = android.os.storage.VolumeInfo.getEnvironmentForState(vol.getState()); mCallbacks.notifyStorageStateChanged(userVol.getPath(), envState, envState); } } mStartedUsers = com.android.internal.util.ArrayUtils.appendInt(mStartedUsers, userId); } }",d1b70b180cd3735aa51c5502ed1828ed1da11c25,"private void onStartUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, (""onStartUser "" + userId)); try { mConnector.execute(""volume"", ""user_started"", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mVolumes) { for (int i = 0; i < (mVolumes.size()); i++) { final android.os.storage.VolumeInfo vol = mVolumes.valueAt(i); if ((vol.isVisibleForRead(userId)) && (vol.isMountedReadable())) { final android.os.storage.StorageVolume userVol = vol.buildStorageVolume(mContext, userId, false); mHandler.obtainMessage(com.android.server.MountService.H_VOLUME_BROADCAST, userVol).sendToTarget(); final java.lang.String envState = android.os.storage.VolumeInfo.getEnvironmentForState(vol.getState()); mCallbacks.notifyStorageStateChanged(userVol.getPath(), envState, envState); } } } synchronized(mLock) { mStartedUsers = com.android.internal.util.ArrayUtils.appendInt(mStartedUsers, userId); } }",30ae15779297d68ffe83c84c4ce333151ce25d66,onStartUser(int),onStartUser(int),5,116,"private void onUnlockUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, (""onUnlockUser "" + userId)); try { mConnector.execute(""volume"", ""user_started"", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mLock) { for (int i = 0; i < (mVolumes.size()); i++) { final android.os.storage.VolumeInfo vol = mVolumes.valueAt(i); if ((vol.isVisibleForRead(userId)) && (vol.isMountedReadable())) { final android.os.storage.StorageVolume userVol = vol.buildStorageVolume(mContext, userId, false); mHandler.obtainMessage(com.android.server.MountService.H_VOLUME_BROADCAST, userVol).sendToTarget(); final java.lang.String envState = android.os.storage.VolumeInfo.getEnvironmentForState(vol.getState()); mCallbacks.notifyStorageStateChanged(userVol.getPath(), envState, envState); } } mSystemUnlockedUsers = com.android.internal.util.ArrayUtils.appendInt(mSystemUnlockedUsers, userId); } }",40471fe003a751d9208d5b1072b64a5cb60a29bd,onUnlockUser(int),92316,267,265
628456,luni_src_main_java_libcore_icu_DateIntervalFormat.java,3.0,"public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean endsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(endCalendar); if (((startMs != endMs) && endsAtMidnight) && (((flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) == 0) || ((libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) <= 1))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }",52d713122a77acd8ada7d8360d874de4db83df94,"public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean startsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(startCalendar); boolean endsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(endCalendar); boolean showTime = (flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) != 0; boolean endsDayAfterStart = (libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) == 1; if (((startMs != endMs) && endsAtMidnight) && ((!showTime) || (endsDayAfterStart && (!startsAtMidnight)))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }",56f51baf2dc538d1550ba6f81d91f149eefd182d,"formatDateRange(android.icu.util.ULocale,android.icu.util.TimeZone,long,long,int)","formatDateRange(android.icu.util.ULocale,android.icu.util.TimeZone,long,long,int)",4,3,"public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } if (libcore.icu.DateIntervalFormat.isExactlyMidnight(endCalendar)) { boolean showTime = (flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) == (DateUtilsBridge.FORMAT_SHOW_TIME); boolean endsDayAfterStart = (libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) == 1; if (((!showTime) && (startMs != endMs)) || (endsDayAfterStart && (!(libcore.icu.DateUtilsBridge.isDisplayMidnightUsingSkeleton(startCalendar))))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }",1a7a264b92e280c3b03da413398ff1e5d52aae73,"formatDateRange(android.icu.util.ULocale,android.icu.util.TimeZone,long,long,int)",504429,400,396
81416,tests_tests_renderscript_src_android_renderscript_cts_TestMax.java,,,,"private void checkMaxFloatFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); android.renderscript.Allocation in1 = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in1, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocIn1(in1); script.forEach_testMaxFloatFloat(in, out); verifyResultsMaxFloatFloat(in, in1, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testMaxFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocIn1(in1); scriptRelaxed.forEach_testMaxFloatFloat(in, out); verifyResultsMaxFloatFloat(in, in1, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testMaxFloatFloat: "" + (e.toString()))); } }",5733fe806ff024d760eba4f44224a27d3f9af80f,,checkMaxFloatFloat(),9,23,"private void checkMaxFloatFloatFloat() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 2977680248089755468L); android.renderscript.Allocation in1 = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 2977680248089755468L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocIn1(in1); script.forEach_testMaxFloatFloatFloat(in, out); verifyResultsMaxFloatFloatFloat(in, in1, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testMaxFloatFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocIn1(in1); scriptRelaxed.forEach_testMaxFloatFloatFloat(in, out); verifyResultsMaxFloatFloatFloat(in, in1, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testMaxFloatFloatFloat: "" + (e.toString()))); } }",9abc799e9b36a59353d12ed097ecd0efd2b4d99f,checkMaxFloatFloatFloat(),143334,410,361
531103,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,60.0,public void setAudioRouteAllowed(boolean allowed) { mAudioRouteAllowed = allowed; setScoAllowedNative(allowed); },13fc927302982c05f10f439c26f556f928fecece,com.android.bluetooth.hfp.HeadsetNativeInterface getNativeInterface() { return mNativeInterface; },38d2dece9a75d2ef1c349b46b3f60961845ab3cb,setAudioRouteAllowed(boolean),getNativeInterface(),10,42,"static void destroy(com.android.bluetooth.hfp.HeadsetStateMachine stateMachine) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ""destroy""); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, ""destroy(), stateMachine is null""); return; } stateMachine.doQuit(); stateMachine.cleanup(); }",c182e0d62ed7732d90cabf5979b536a17f0b9939,destroy(com.android.bluetooth.hfp.HeadsetStateMachine),385997,24,100
410059,services_core_java_com_android_server_connectivity_Tethering.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void notifyLinkPropertiesChanged(java.lang.String iface, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { final boolean isTethering; synchronized(mPublicSync) { final com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if (tetherState == null) { isTethering = false; } else if (tetherState.stateMachine.equals(who)) { isTethering = (tetherState.lastState) == (com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED); } else { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, (""got notification from stale iface "" + iface)); return; } } mLog.log(java.lang.String.format(""OBSERVED LinkProperties update iface=%s isTethering=%s"", iface, isTethering)); final int which = com.android.server.connectivity.Tethering.TetherMasterSM.EVENT_IFACE_UPDATE_LINKPROPERTIES; mTetherMasterSM.sendMessage(which, (isTethering ? 1 : 0), 0, newLp); }",7c006553e5407561600754a146e463b364bca593,,"notifyLinkPropertiesChanged(java.lang.String,com.android.server.connectivity.tethering.TetherInterfaceStateMachine,android.net.LinkProperties)",3,33,"private void notifyLinkPropertiesChanged(java.lang.String iface, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { final int state; synchronized(mPublicSync) { final com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if ((tetherState != null) && (tetherState.stateMachine.equals(who))) { state = tetherState.lastState; } else { mLog.log((""got notification from stale iface "" + iface)); return; } } mLog.log(java.lang.String.format(""OBSERVED LinkProperties update iface=%s state=%s"", iface, state)); final int which = com.android.server.connectivity.Tethering.TetherMasterSM.EVENT_IFACE_UPDATE_LINKPROPERTIES; mTetherMasterSM.sendMessage(which, state, 0, newLp); }",3375605c5a2c6a991f3ba8cdf86130e06d237697,"notifyLinkPropertiesChanged(java.lang.String,com.android.server.connectivity.tethering.TetherInterfaceStateMachine,android.net.LinkProperties)",255585,320,226
233727,jack-tests_tests_com_android_jack_optimizations_valuepropagation_ValuePropagationTests.java,,,,"@org.junit.Test public void test001() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test001""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test001/A;""; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); com.android.jack.optimizations.valuepropagation.TypeMethodsValidator aMethods = new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert(""use(I)I"", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, ""A.use.dalvik""))); compileAndValidateTypes(test, properties, new com.android.jack.optimizations.valuepropagation.Validators().insert(aType, aMethods)); }",2d7587dad9699dd8a0154ab13f5a702f87421a21,,test001(),7,2,"@org.junit.Test public void test001() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test001""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test001/A;""; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""use(I)I"", dalvik(test, ""A.use.dalvik"")))); compileAndValidate(test, defaultProperties().withPreserveJls(true), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""use(I)I"", dalvik(test, ""A.use.jls.dalvik"")))); }",058a831a94704f00feac027b9db87d73d121ca28,test001(),438863,196,214
622726,services_core_java_com_android_server_ConnectivityService.java,106.0,"private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUids(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",1e5a1d8a7b9980753fd0c6cc72b76188ce37f30f,"private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUidsUnlessAllowed(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",4bb7a86dced4cc462669600616353a010964080d,"callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)","callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)",3,106,"private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUidsUnlessAllowed(networkAgent.networkCapabilities, nri.mPid, nri.mUid); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log((((""sending notification "" + notification) + "" for "") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge((""RemoteException caught trying to send a callback msg for "" + (nri.request))); } }",e9a6bcd20b6aafa249f15f95887bcd70e2a22a9f,"callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)",418550,500,512
252478,java_tests_RsTest_src_com_android_rs_test_UT_element.java,0.0,"private void testJavaSide(com.android.rs.test.RenderScript RS) { int subElemCount = simpleElem.getSubElementCount(); _RS_ASSERT(""subElemCount == 0"", (subElemCount == 0)); _RS_ASSERT(""simpleElem.getDataKind() == USER"", ((simpleElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT(""simpleElem.getDataType() == FLOAT_32"", ((simpleElem.getDataType()) == (android.renderscript.Element.DataType.FLOAT_32))); subElemCount = complexElem.getSubElementCount(); _RS_ASSERT(""subElemCount == 10"", (subElemCount == 10)); _RS_ASSERT(""complexElem.getDataKind() == USER"", ((complexElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT(""complexElemsimpleElem.getDataType() == NONE"", ((complexElem.getDataType()) == (android.renderscript.Element.DataType.NONE))); for (int i = 0; i < subElemCount; i++) { _RS_ASSERT(""complexElem.getSubElement(i) != null"", ((complexElem.getSubElement(i)) != null)); _RS_ASSERT(""complexElem.getSubElementName(i).equals(subElemNames[i])"", complexElem.getSubElementName(i).equals(subElemNames[i])); _RS_ASSERT(""complexElem.getSubElementArraySize(i) == subElemArraySizes[i]"", ((complexElem.getSubElementArraySize(i)) == (subElemArraySizes[i]))); _RS_ASSERT(""complexElem.getSubElementOffsetBytes(i) == subElemOffsets[i]"", ((complexElem.getSubElementOffsetBytes(i)) == (subElemOffsets[i]))); } }",69d952c0cade0f8005d2a0961a2586424dac4b35,"private void testJavaSide(android.renderscript.RenderScript RS) { int subElemCount = simpleElem.getSubElementCount(); _RS_ASSERT(""subElemCount == 0"", (subElemCount == 0)); _RS_ASSERT(""simpleElem.getDataKind() == USER"", ((simpleElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT(""simpleElem.getDataType() == FLOAT_32"", ((simpleElem.getDataType()) == (android.renderscript.Element.DataType.FLOAT_32))); subElemCount = complexElem.getSubElementCount(); _RS_ASSERT(""subElemCount == 10"", (subElemCount == 10)); _RS_ASSERT(""complexElem.getDataKind() == USER"", ((complexElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT(""complexElemsimpleElem.getDataType() == NONE"", ((complexElem.getDataType()) == (android.renderscript.Element.DataType.NONE))); for (int i = 0; i < subElemCount; i++) { _RS_ASSERT(""complexElem.getSubElement(i) != null"", ((complexElem.getSubElement(i)) != null)); _RS_ASSERT(""complexElem.getSubElementName(i).equals(subElemNames[i])"", complexElem.getSubElementName(i).equals(subElemNames[i])); _RS_ASSERT(""complexElem.getSubElementArraySize(i) == subElemArraySizes[i]"", ((complexElem.getSubElementArraySize(i)) == (subElemArraySizes[i]))); _RS_ASSERT(""complexElem.getSubElementOffsetBytes(i) == subElemOffsets[i]"", ((complexElem.getSubElementOffsetBytes(i)) == (subElemOffsets[i]))); } }",d3e91f13925057d30bfca29f208eb8618f6c2c5d,testJavaSide(com.android.rs.test.RenderScript),testJavaSide(android.renderscript.RenderScript),7,0,"private void testJavaSide(com.android.rs.test.RenderScript RS) { int subElemCount = simpleElem.getSubElementCount(); _RS_ASSERT(""subElemCount == 0"", (subElemCount == 0)); _RS_ASSERT(""simpleElem.getDataKind() == USER"", ((simpleElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT(""simpleElem.getDataType() == FLOAT_32"", ((simpleElem.getDataType()) == (android.renderscript.Element.DataType.FLOAT_32))); subElemCount = complexElem.getSubElementCount(); _RS_ASSERT(""subElemCount == 10"", (subElemCount == 10)); _RS_ASSERT(""complexElem.getDataKind() == USER"", ((complexElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT(""complexElemsimpleElem.getDataType() == NONE"", ((complexElem.getDataType()) == (android.renderscript.Element.DataType.NONE))); for (int i = 0; i < subElemCount; i++) { _RS_ASSERT(""complexElem.getSubElement(i) != null"", ((complexElem.getSubElement(i)) != null)); _RS_ASSERT(""complexElem.getSubElementName(i).equals(subElemNames[i])"", complexElem.getSubElementName(i).equals(subElemNames[i])); _RS_ASSERT(""complexElem.getSubElementArraySize(i) == subElemArraySizes[i]"", ((complexElem.getSubElementArraySize(i)) == (subElemArraySizes[i]))); _RS_ASSERT(""complexElem.getSubElementOffsetBytes(i) == subElemOffsets[i]"", ((complexElem.getSubElementOffsetBytes(i)) == (subElemOffsets[i]))); } }",69d952c0cade0f8005d2a0961a2586424dac4b35,testJavaSide(com.android.rs.test.RenderScript),379517,404,407
83593,luni_src_test_java_libcore_java_util_AbstractResourceLeakageDetectorTestCase.java,,,,@java.lang.Override protected void tearDown() throws java.lang.Exception { if ((postTestChecker) != null) { postTestChecker.run(); } },7616f881aff42104d35b533836a734b4faadaf0c,,tearDown(),11,1,@java.lang.Override protected void tearDown() throws java.lang.Exception { if ((detector) != null) { detector.checkForLeaks(); } },e23c403a5904ecfd3b5af24f5d3cc71185b931ca,tearDown(),111958,36,36
81416,tests_tests_renderscript_src_android_renderscript_cts_TestTan.java,,,,"private void checkTanFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testTanFloat2(in, out); verifyResultsTanFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTanFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTanFloat2(in, out); verifyResultsTanFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTanFloat2: "" + (e.toString()))); } }",910d473a2e4f3b6f201479904d1eff75f5fd2ee7,,checkTanFloat2(),9,3,"private void checkTanFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -5865848349273848380L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testTanFloat2Float2(in, out); verifyResultsTanFloat2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTanFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTanFloat2Float2(in, out); verifyResultsTanFloat2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTanFloat2Float2: "" + (e.toString()))); } }",996adf18f54e71d78bce61e3251e4d8129acfd48,checkTanFloat2Float2(),143475,323,308
22162,monkeyrunner_src_com_android_monkeyrunner_easy_EasyMonkeyDevice.java,,,,"@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = ""Checks if the specified object is visible."", args = { ""selector"" }, returns = ""True if the object is visible."", argDocs = { ""The selector identifying the object."" }) public boolean visible(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); java.lang.String selector = ap.getString(0); ViewNode node = mHierarchyViewer.findViewById(selector); boolean ret = ((node != null) && (node.namedProperties.containsKey(""getVisibility()""))) && (""VISIBLE"".equalsIgnoreCase(node.namedProperties.get(""getVisibility()"").value)); return ret; }",c66a82bebb6622186bae0ae193ceef144a1adba8,,"visible(org.python.core.PyObject[],java.lang.String[])",5,5,"@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = ""Checks if the specified object is visible."", args = { ""selector"" }, returns = ""True if the object is visible."", argDocs = { ""The selector identifying the object."" }) public boolean visible(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); com.android.monkeyrunner.easy.By selector = getSelector(ap, 0); ViewNode node = mHierarchyViewer.findView(selector); boolean ret = ((node != null) && (node.namedProperties.containsKey(""getVisibility()""))) && (""VISIBLE"".equalsIgnoreCase(node.namedProperties.get(""getVisibility()"").value)); return ret; }",4e094ef689f7959ce197fa5bb4e5d66e909cac72,"visible(org.python.core.PyObject[],java.lang.String[])",341432,201,208
253791,luni_src_main_java_libcore_io_Posix.java,63.0,"public native void chown(java.lang.String path, int uid, int gid) throws android.system.ErrnoException;",10376942ab2f4074f12e8175cdc3046060a2adce,"public native void chown(java.lang.String path, int uid, int gid) throws libcore.io.ErrnoException;",011982a8989ed06d43ed92268d688bc938ce1437,"chown(java.lang.String,int,int)","chown(java.lang.String,int,int)",8,59,"public native void chown(java.lang.String path, int uid, int gid) throws android.system.ErrnoException;",10376942ab2f4074f12e8175cdc3046060a2adce,"chown(java.lang.String,int,int)",494448,30,29
72740,json_src_main_java_org_json_JSONObject.java,44.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Set keySet() { return nameValuePairs.keySet(); },d1c216842b03cafd775658e02302d9e8f02b48bb,,keySet(),5,29,public java.util.Set<java.lang.String> keySet() { return nameValuePairs.keySet(); },d35d0f816e70b12142854909bf2d0ce24d6d7b10,keySet(),43629,18,25
158301,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,65.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onComplete(java.lang.Void aVoid) { throw new junit.framework.AssertionFailedError(""Expecting test build to fail""); }",aa4230ae6a7c1e79b689f61abb0ebc7a4b068647,,onComplete(java.lang.Void),4,36,"@java.lang.Override public void onComplete(java.lang.Void aVoid) { throw new java.lang.AssertionError(java.lang.String.format((""Expecting build to fail:\n"" + ("" Tasks: %s\n"" + "" Arguments: %s"")), com.google.common.base.Joiner.on(' ').join(tasks), com.google.common.base.Joiner.on(' ').join(arguments))); }",5cf21d50404c3e7d93d36f31123a012b1371f8e1,onComplete(java.lang.Void),357894,36,102
79721,graphics_java_android_graphics_Bitmap.java,93.0,"private static native android.graphics.Bitmap nativeCopy(int srcBitmap, int nativeConfig, boolean isMutable);",f8e4061f9bbe4427ec29de846623d88cb738748d,"private static native android.graphics.Bitmap nativeCopy(long srcBitmap, int nativeConfig, boolean isMutable);",5bc19856cf55b140d99e47d41541f0fbf5be5606,"nativeCopy(int,int,boolean)","nativeCopy(long,int,boolean)",6,55,"private static native android.graphics.Bitmap nativeCopy(long nativeSrcBitmap, int nativeConfig, boolean isMutable);",49d468adead7acec0e14780fc92c7e58f0e3e54e,"nativeCopy(long,int,boolean)",35786,23,24
50376,common_src_test_java_com_android_utils_SdkUtilsTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testParseInt() throws java.lang.Exception { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt(""1000"")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt(""0"")); assertEquals(1, com.android.utils.SdkUtils.parseLocalizedInt(""1"")); assertEquals((-1), com.android.utils.SdkUtils.parseLocalizedInt(""-1"")); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt(""1,000"")); assertEquals(1000000, com.android.utils.SdkUtils.parseLocalizedInt(""1,000,000"")); java.util.Locale.setDefault(java.util.Locale.ITALIAN); assertSame(java.util.Locale.ITALIAN, java.util.Locale.getDefault()); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt(""1000"")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt(""0"")); assertEquals(1, com.android.utils.SdkUtils.parseLocalizedInt(""1"")); assertEquals((-1), com.android.utils.SdkUtils.parseLocalizedInt(""-1"")); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt(""1.000"")); assertEquals(1000000, com.android.utils.SdkUtils.parseLocalizedInt(""1.000.000"")); }",095a6048cd4e64ccc1aa3a6ed80b70838fdad50d,,testParseInt(),3,1,"public void testParseInt() throws java.lang.Exception { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt(""1000"")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt(""0"")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt("""")); assertEquals(1, com.android.utils.SdkUtils.parseLocalizedInt(""1"")); assertEquals((-1), com.android.utils.SdkUtils.parseLocalizedInt(""-1"")); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt(""1,000"")); assertEquals(1000000, com.android.utils.SdkUtils.parseLocalizedInt(""1,000,000"")); java.util.Locale.setDefault(java.util.Locale.ITALIAN); assertSame(java.util.Locale.ITALIAN, java.util.Locale.getDefault()); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt(""1000"")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt(""0"")); assertEquals(1, com.android.utils.SdkUtils.parseLocalizedInt(""1"")); assertEquals((-1), com.android.utils.SdkUtils.parseLocalizedInt(""-1"")); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt(""1.000"")); assertEquals(1000000, com.android.utils.SdkUtils.parseLocalizedInt(""1.000.000"")); try { com.android.utils.SdkUtils.parseLocalizedInt(""X""); fail(""Should have thrown exception""); } catch (java.text.ParseException e) { } }",11ce4c1c670384951a2817e21caa605097d05e0b,testParseInt(),491244,283,335
52223,builder_src_main_java_com_android_builder_DefaultSdkParser.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.List<java.io.File> getRepositories() { java.util.List<java.io.File> repositories = com.google.common.collect.Lists.newArrayList(); java.io.File androidRepo = new java.io.File(((mSdkLocation) + ""/extras/android/repository"")); if (androidRepo.isDirectory()) { repositories.add(androidRepo); } java.io.File googleRepo = new java.io.File(((mSdkLocation) + ""/extras/google/repository"")); if (googleRepo.isDirectory()) { repositories.add(googleRepo); } return repositories; }",ab5a98a91ee48b48a98989f4ddfc7bd217a21508,,getRepositories(),3,5,"@java.lang.Override public java.util.List<java.io.File> getRepositories() { java.util.List<java.io.File> repositories = com.google.common.collect.Lists.newArrayList(); java.io.File androidRepo = new java.io.File(((mSdkLocation) + ""/extras/android/m2repository"")); if (androidRepo.isDirectory()) { repositories.add(androidRepo); } java.io.File googleRepo = new java.io.File(((mSdkLocation) + ""/extras/google/m2repository"")); if (googleRepo.isDirectory()) { repositories.add(googleRepo); } return repositories; }",71ec797880fa465633507aca4c266c331058c844,getRepositories(),110781,141,145
396553,src_java_com_android_internal_telephony_sip_SipPhoneBase.java,60.0,"@java.lang.Override public void setVoiceMailNumber(java.lang.String alphaTag, java.lang.String voiceMailNumber, android.os.Message onComplete) { android.os.AsyncResult.forMessage(onComplete, null, null); onComplete.sendToTarget(); }",6fcd6d4af49ed8b88e301f05bbddee2584d0083c,"@java.lang.Override public void setVoiceMailNumber(java.lang.String alphaTag, java.lang.String voiceMailNumber, com.android.internal.telephony.sip.Message onComplete) { android.os.AsyncResult.forMessage(onComplete, null, null); onComplete.sendToTarget(); }",63bb6e64c396329436a1e4f428a958e575029e38,"setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)","setVoiceMailNumber(java.lang.String,java.lang.String,com.android.internal.telephony.sip.Message)",4,60,"@java.lang.Override public void setVoiceMailNumber(java.lang.String alphaTag, java.lang.String voiceMailNumber, android.os.Message onComplete) { android.os.AsyncResult.forMessage(onComplete, null, null); onComplete.sendToTarget(); }",6fcd6d4af49ed8b88e301f05bbddee2584d0083c,"setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)",398027,65,59
197830,sched_src_com_android_sched_util_file_FileUtils.java,4.0,"@com.android.sched.util.findbugs.SuppressFBWarnings(""RV_RETURN_VALUE_IGNORED_BAD_PRACTICE"") private static void deleteSubElement(@javax.annotation.Nonnull java.io.File dir) { if (dir.isDirectory()) { for (java.io.File sub : dir.listFiles()) { com.android.sched.util.file.FileUtils.deleteSubElement(sub); } } dir.delete(); }",0a9d7a0022caafd967185bbf722cc8339dd10349,"@com.android.sched.util.findbugs.SuppressFBWarnings(""RV_RETURN_VALUE_IGNORED_BAD_PRACTICE"") private static void deleteSubElement(@javax.annotation.Nonnull java.io.File dir) throws java.io.IOException { if (dir.isDirectory()) { java.io.File[] fileList = dir.listFiles(); if (fileList == null) { throw new java.io.IOException((""Failed to list "" + (new com.android.sched.util.location.DirectoryLocation(dir).getDescription()))); } for (java.io.File sub : fileList) { com.android.sched.util.file.FileUtils.deleteSubElement(sub); } } dir.delete(); }",db15c9d79d607241a52ace264b266dd5f7c5b5a2,deleteSubElement(java.io.File),deleteSubElement(java.io.File),4,4,"@com.android.sched.util.findbugs.SuppressFBWarnings(""RV_RETURN_VALUE_IGNORED_BAD_PRACTICE"") private static void deleteSubElement(@javax.annotation.Nonnull java.io.File dir) { if (dir.isDirectory()) { java.io.File[] fileList = dir.listFiles(); if (fileList == null) { throw new com.android.sched.util.ConcurrentIOException(new com.android.sched.vfs.ListDirException(dir)); } for (java.io.File sub : fileList) { com.android.sched.util.file.FileUtils.deleteSubElement(sub); } } dir.delete(); }",e535921b0bd6989329d8bbe6b6d2cad165c5d43d,deleteSubElement(java.io.File),2667,158,147
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,"public void changeIccLockPassword(java.lang.String oldPassword, java.lang.String newPassword, android.os.Message onComplete) { if (com.android.internal.telephony.UiccCardApplication.DBG) log((((""Change Pin1 old: "" + oldPassword) + "" new: "") + newPassword)); mCi.changeIccPinForApp(oldPassword, newPassword, mAid, onComplete); }",16bd87a0b19f4e2a82e255240118a19bd4457eda,,"changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)",22,1,"public void changeIccLockPassword(java.lang.String oldPassword, java.lang.String newPassword, android.os.Message onComplete) { synchronized(mLock) { if (com.android.internal.telephony.UiccCardApplication.DBG) log(""changeIccLockPassword""); mCi.changeIccPinForApp(oldPassword, newPassword, mAid, onComplete); } }",1e42a89090f8409b920a7705aaff6a1b4479b2e8,"changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)",499278,98,89
23591,apps_CtsVerifier_src_com_android_cts_verifier_bluetooth_MessageTestActivity.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void showPairingErrorDialog() { new android.app.AlertDialog.Builder(this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(R.string.bt_insecure_pairing_error_title).setMessage(R.string.bt_insecure_pairing_error_message).setPositiveButton(android.R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { setResult(com.android.cts.verifier.bluetooth.RESULT_CANCELED); finish(); } }).setCancelable(false).show(); }",7bcaf38de2dd2bd444ded2cc4fda649183cae733,,showPairingErrorDialog(),2,3,"private void showPairingErrorDialog() { new android.app.AlertDialog.Builder(this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(R.string.bt_insecure_pairing_error_title).setMessage(R.string.bt_insecure_pairing_error_message).setPositiveButton(android.R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { com.android.cts.verifier.TestResult.setFailedResult(com.android.cts.verifier.bluetooth.MessageTestActivity.this); finish(); } }).setCancelable(false).show(); }",30c96f8a99d6519b135fe44e811d85219766d57f,showPairingErrorDialog(),37837,142,156
148991,jack_src_com_android_jack_backend_dex_DexWritingTool.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@javax.annotation.Nonnull protected int getCurrentMergerIdx() { synchronized(this) { return currentMergerIdx; } },7910ab7d2c33ad7e766bb47dabda6f210bc0a0f0,,getCurrentMergerIdx(),6,0,@javax.annotation.Nonnull private synchronized int getCurrentMergerIdx() { return currentMergerIdx; },2b9c5df9c6a9311b361cb2e24c42107c163bca44,getCurrentMergerIdx(),92027,25,20
465279,core_java_android_bluetooth_le_AdvertisingSet.java,0.0,"public void setPeriodicAdvertisingEnabled(boolean enable) { try { gatt.setPeriodicAdvertisingEnable(this.advertiserId, enable); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",58b3d6c4ed38163d11751f744a005cf4ab959f67,"public void setPeriodicAdvertisingEnabled(boolean enable) { try { mGatt.setPeriodicAdvertisingEnable(this.mAdvertiserId, enable); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",d1d5c4573ced5f2dcfb47dd2bf31f2b8e796d407,setPeriodicAdvertisingEnabled(boolean),setPeriodicAdvertisingEnabled(boolean),9,0,"public void setPeriodicAdvertisingEnabled(boolean enable) { try { mGatt.setPeriodicAdvertisingEnable(mAdvertiserId, enable); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",a86eac885dbcef8745e2032350438499d47db57a,setPeriodicAdvertisingEnabled(boolean),2187,77,75
83690,src_com_android_phone_CallLogger.java,0.0,"public void logCall(com.android.internal.telephony.Connection c, int callLogType) { final java.lang.String number = c.getAddress(); final long date = c.getCreateTime(); final long duration = c.getDurationMillis(); final com.android.internal.telephony.Phone phone = c.getCall().getPhone(); final com.android.internal.telephony.CallerInfo ci = getCallerInfoFromConnection(c); final java.lang.String logNumber = getLogNumber(c, ci); if (com.android.phone.CallLogger.DBG) { log((((""- onDisconnect(): logNumber set to:"" + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(logNumber))) + "", number set to: "") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number)))); } final int presentation = getPresentation(c, ci); final boolean isOtaspNumber = (com.android.internal.telephony.TelephonyCapabilities.supportsOtasp(phone)) && (phone.isOtaSpNumber(number)); if (!isOtaspNumber) { logCall(ci, logNumber, presentation, callLogType, date, duration); } }",6956b2831fa9ca94af4d782e634bd15297d1ecdb,"public void logCall(com.android.internal.telephony.Connection c, int callLogType) { final java.lang.String number = c.getAddress(); final long date = c.getCreateTime(); final long duration = c.getDurationMillis(); final int disconnectCause = c.getDisconnectCause(); final com.android.internal.telephony.Phone phone = c.getCall().getPhone(); final com.android.internal.telephony.CallerInfo ci = getCallerInfoFromConnection(c); final java.lang.String logNumber = getLogNumber(c, ci); if (com.android.phone.CallLogger.DBG) { log((((""- onDisconnect(): logNumber set to:"" + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(logNumber))) + "", number set to: "") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number)))); } final int presentation = getPresentation(c, ci); final boolean isOtaspNumber = (com.android.internal.telephony.TelephonyCapabilities.supportsOtasp(phone)) && (phone.isOtaSpNumber(number)); if (!isOtaspNumber) { logCall(ci, logNumber, presentation, callLogType, date, duration, disconnectCause); } }",8eb29e18731a11a91e26a7abb7d713e984a7b18d,"logCall(com.android.internal.telephony.Connection,int)","logCall(com.android.internal.telephony.Connection,int)",2,0,"public void logCall(com.android.internal.telephony.Connection c, int callLogType) { final java.lang.String number = c.getAddress(); final long date = c.getCreateTime(); final long duration = c.getDurationMillis(); final com.android.internal.telephony.Phone phone = c.getCall().getPhone(); final com.android.internal.telephony.CallerInfo ci = getCallerInfoFromConnection(c); final java.lang.String logNumber = getLogNumber(c, ci); if (com.android.phone.CallLogger.DBG) { log((((""- onDisconnect(): logNumber set to:"" + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(logNumber))) + "", number set to: "") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number)))); } final int presentation = getPresentation(c, ci); final boolean isOtaspNumber = (com.android.internal.telephony.TelephonyCapabilities.supportsOtasp(phone)) && (phone.isOtaSpNumber(number)); if (!isOtaspNumber) { logCall(ci, logNumber, presentation, callLogType, date, duration); } }",6956b2831fa9ca94af4d782e634bd15297d1ecdb,"logCall(com.android.internal.telephony.Connection,int)",357971,282,268
253791,luni_src_main_java_libcore_io_Os.java,102.0,"public void execv(java.lang.String filename, java.lang.String[] argv) throws android.system.ErrnoException;",ca5fccf4624994397d3b33030f728fd4bc335cd4,"public void execv(java.lang.String filename, java.lang.String[] argv) throws libcore.io.ErrnoException;",e29ab42f013fc9af59034652caa463944719b28a,"execv(java.lang.String,java.lang.String[])","execv(java.lang.String,java.lang.String[])",8,101,"public void execv(java.lang.String filename, java.lang.String[] argv) throws android.system.ErrnoException;",ca5fccf4624994397d3b33030f728fd4bc335cd4,"execv(java.lang.String,java.lang.String[])",494644,30,29
343338,tests_wifitests_src_com_android_server_wifi_WifiNetworkSelectorTest.java,15.0,"@org.junit.Test public void emptyScanResults() { java.lang.String[] ssids = new java.lang.String[0]; java.lang.String[] bssids = new java.lang.String[0]; int[] freqs = new int[0]; java.lang.String[] caps = new java.lang.String[0]; int[] levels = new int[0]; int[] securities = new int[0]; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, mWifiInfo, false, true, false); assertEquals(""Expect null configuration"", null, candidate); }",10291400a3845fe485315c7fa808a1c9dc116d41,"@org.junit.Test public void emptyScanResults() { java.lang.String[] ssids = new java.lang.String[0]; java.lang.String[] bssids = new java.lang.String[0]; int[] freqs = new int[0]; java.lang.String[] caps = new java.lang.String[0]; int[] levels = new int[0]; int[] securities = new int[0]; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); java.util.ArrayList<java.lang.String> blacklist = new java.util.ArrayList<java.lang.String>(); android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, blacklist, mWifiInfo, false, true, false); assertEquals(""Expect null configuration"", null, candidate); }",1916799711bf59a6dec13b25369e3cfef2c48ef0,emptyScanResults(),emptyScanResults(),21,12,"@org.junit.Test public void emptyScanResults() { java.lang.String[] ssids = new java.lang.String[0]; java.lang.String[] bssids = new java.lang.String[0]; int[] freqs = new int[0]; java.lang.String[] caps = new java.lang.String[0]; int[] levels = new int[0]; int[] securities = new int[0]; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); java.util.HashSet<java.lang.String> blacklist = new java.util.HashSet<java.lang.String>(); android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, blacklist, mWifiInfo, false, true, false); assertEquals(""Expect null configuration"", null, candidate); }",ad31106e14f81207972de0690a428e7fdb76a3b7,emptyScanResults(),525393,261,261
601015,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void registerForEidReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mSimStateLoadedRegistrants.add(r); }",52a39d7f059a14d996827e37a0f21ab8a12caaea,,"registerForEidReady(android.os.Handler,int,java.lang.Object)",11,3,"public void registerForEidReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); if ((mEid) != null) { r.notifyRegistrant(new android.os.AsyncResult(null, null, null)); } else { mEidReadyRegistrants.add(r); } }",833708379fdaa8d3591150fd52c0d66eeecb43a5,"registerForEidReady(android.os.Handler,int,java.lang.Object)",289029,61,95
161350,jack-tests_tests_com_android_jack_switchstatement_SwitchstatementTests.java,47.0,"@org.junit.Test public void testCompile016() throws java.lang.Exception { properties.clear(); properties.put(""jack.optimization.enum.switch"", ""feedback""); java.lang.String packageName = ""com.android.jack.switchstatement.test016.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum1$Enum11"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum1$Switch2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""SyntheticSwitchmapClass-*"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + ""Enum1$Enum11""), true)); checkCompiledCode(packageName, input); }",a59d73c4fbb4e26733c2fd3563fcf9b7ef38f856,"@org.junit.Test public void testCompile016() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test016.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum1$Enum11"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum1$Switch2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""SyntheticSwitchmapClass-*"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + ""Enum1$Enum11""), true)); checkCompiledCode(packageName, input); }",bc61bdd28f456c0beb7d8d1c3780782fee96179d,testCompile016(),testCompile016(),4,44,"@org.junit.Test public void testCompile016() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test016.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Switch2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""SyntheticSwitchmapClass-*"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + ""Enum1$Enum1_""), true)); checkCompiledCode(packageName, input); }",10f160759e098d5ed3b8a240477e72467146332c,testCompile016(),299228,337,337
110691,src_com_google_gct_idea_appengine_validation_RestSignatureInspection.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.jetbrains.annotations.Nullable private java.lang.String guessResourceName(com.google.gct.idea.appengine.validation.PsiMethod method) { if ((method.getReturnType()) == (PsiType.VOID)) { return null; } com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod restMethod = getDefaultRestMethod(method); com.intellij.openapi.project.Project project; try { project = method.getContainingFile().getProject(); } catch (com.google.gct.idea.appengine.validation.PsiInvalidElementAccessException e) { com.google.gct.idea.appengine.validation.LOG.error((""Error getting project with parameter "" + (method.getText())), e); return null; } return restMethod.guessResourceName(project, method); }",8920aab47ea34ca6eade3ab6e3e52bd42d2e0983,,guessResourceName(com.google.gct.idea.appengine.validation.PsiMethod),7,0,@org.jetbrains.annotations.Nullable private java.lang.String guessResourceName(com.google.gct.idea.appengine.validation.PsiMethod method) { if ((method.getReturnType()) == (PsiType.VOID)) { return null; } com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod restMethod = getDefaultRestMethod(method); return restMethod.guessResourceName(method); },b5ca08bc06b921d900d911b8a7f1d58e0f71bc9e,guessResourceName(com.google.gct.idea.appengine.validation.PsiMethod),375474,184,96
240700,luni_src_test_java_libcore_java_net_URLConnectionTest.java,129.0,"public void testInspectSslBeforeConnect() throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse()); server.play(); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (server.getUrl(""/"").openConnection())); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertNotNull(connection.getHostnameVerifier()); try { connection.getLocalCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getServerCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getCipherSuite(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getPeerPrincipal(); fail(); } catch (java.lang.IllegalStateException expected) { } }",a892844c18a48c7bfb3fd850f8d54d15756686c3,"public void testInspectSslBeforeConnect() throws java.lang.Exception { TestSSLContext testSSLContext = createTestSSLContext(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse()); server.play(); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (server.getUrl(""/"").openConnection())); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertNotNull(connection.getHostnameVerifier()); try { connection.getLocalCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getServerCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getCipherSuite(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getPeerPrincipal(); fail(); } catch (java.lang.IllegalStateException expected) { } }",c16b094b42a1f62e3da0afc91334726c5eedbc74,testInspectSslBeforeConnect(),testInspectSslBeforeConnect(),4,128,"public void testInspectSslBeforeConnect() throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse()); server.play(); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (server.getUrl(""/"").openConnection())); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertNotNull(connection.getHostnameVerifier()); try { connection.getLocalCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getServerCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getCipherSuite(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getPeerPrincipal(); fail(); } catch (java.lang.IllegalStateException expected) { } }",bd89a4340cfab58f7611a4ce1d8bde5619f7fcd9,testInspectSslBeforeConnect(),274793,199,200
199192,luni_src_test_java_libcore_util_ZoneInfoTest.java,,,,"private static void writeInt(java.io.OutputStream os, int value) throws java.io.IOException { byte[] bytes = java.nio.ByteBuffer.allocate(4).putInt(value).array(); os.write(bytes); }",13e09676e76b05900535dc99d64faa44d00dfa8f,,"writeInt(java.io.OutputStream,int)",6,19,"private static void writeInt(java.io.OutputStream os, int value) throws java.lang.Exception { byte[] bytes = java.nio.ByteBuffer.allocate(4).putInt(value).array(); os.write(bytes); }",e0cc5e0888b9e3223a4312d49da033df104728c0,"writeInt(java.io.OutputStream,int)",67615,49,49
402813,tools_ahat_src_heapdump_Sort.java,2.0,"@java.lang.Override public int compare(com.android.ahat.heapdump.Site a, com.android.ahat.heapdump.Site b) { return java.lang.Long.compare(b.getTotalSize(), a.getTotalSize()); }",98cca491253397d13bf3b1f896f8302739bf17ac,"@java.lang.Override public int compare(com.android.ahat.heapdump.Site a, com.android.ahat.heapdump.Site b) { return java.lang.Long.compare(b.getTotalSize().getSize(), a.getTotalSize().getSize()); }",ec8c6ae7428b19619b564188341ae0f726312f7c,"compare(com.android.ahat.heapdump.Site,com.android.ahat.heapdump.Site)","compare(com.android.ahat.heapdump.Site,com.android.ahat.heapdump.Site)",3,3,"@java.lang.Override public int compare(com.android.ahat.heapdump.Site a, com.android.ahat.heapdump.Site b) { return com.android.ahat.heapdump.Sort.SIZE_BY_SIZE.compare(b.getTotalSize(), a.getTotalSize()); }",45f850df836dc82c53875932301d8e9f76c45bd6,"compare(com.android.ahat.heapdump.Site,com.android.ahat.heapdump.Site)",281067,61,73
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAsinh.java,,,,public void testAsinh() { checkAsinhFloat(); checkAsinhFloat2(); checkAsinhFloat3(); checkAsinhFloat4(); },43ef376e4bd6549089892b516abb96243dd6c1a5,,testAsinh(),9,1,public void testAsinh() { checkAsinhFloatFloat(); checkAsinhFloat2Float2(); checkAsinhFloat3Float3(); checkAsinhFloat4Float4(); },bf70529a10e4a481790e3461353f400604e82929,testAsinh(),143185,36,43
54842,hierarchyviewer2_hierarchyviewer2lib_src_main_java_com_android_hierarchyviewerlib_HierarchyViewerDirector.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean isUsingDdmProtocol() { return ""ddm"".equalsIgnoreCase(com.android.hierarchyviewerlib.HierarchyViewerDirector.sHvProtoEnvVar); }",185de224e5ff68c289f0c4ebf211dd2e2ae7feb1,,isUsingDdmProtocol(),2,62,public static boolean isUsingDdmProtocol() { return com.android.hierarchyviewerlib.HierarchyViewerDirector.sIsUsingDdmProtocol; },487633bb1148e285baf4d15011a95dc6c1d9277d,isUsingDdmProtocol(),48142,38,31
567262,services_core_java_com_android_server_connectivity_DnsManager.java,,,,private android.net.INetd getNetd() { if ((mNetd) == null) { mNetd = android.net.util.NetdService.get(1000); } return mNetd; },300439a06a65c1a3c34176331ec594181d969298,,getNetd(),14,1,"private void setNetDnsProperty(int which, java.lang.String value) { final java.lang.String key = ""net.dns"" + which; try { mSystemProperties.set(key, value); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, ""Error setting unsupported net.dns property: "", e); } }",123e7d22b9776ddf5ad92204739aa5b36866c92b,"setNetDnsProperty(int,java.lang.String)",12295,47,94
335040,service_java_com_android_server_wifi_SupplicantP2pIfaceHal.java,38.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean cancelConnect() { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(""cancelConnect()""); try { result.setResult(mISupplicantP2pIface.cancelConnect()); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",3ba4fd58cf55f190ce24d14b67605893dc2ed2bf,,cancelConnect(),23,33,"public boolean cancelConnect() { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""cancelConnect""))) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(""cancelConnect()""); try { result.setResult(mISupplicantP2pIface.cancelConnect()); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",a2a1e85a522110fad5df3ca1696b0210f0f31fc3,cancelConnect(),258139,190,193
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,,"protected static int getPort(java.io.FileDescriptor sock) throws java.io.IOException { int port = -1; try { port = ((java.net.InetSocketAddress) (android.system.Os.getsockname(sock))).getPort(); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } if (port == (-1)) { throw new java.lang.IllegalStateException(""Something happened while trying to get port""); } return port; }",5c1e462502364812110642a4d407294eaaa479b5,,getPort(java.io.FileDescriptor),15,26,protected static int getPort(java.io.FileDescriptor sock) throws java.lang.Exception { return ((java.net.InetSocketAddress) (android.system.Os.getsockname(sock))).getPort(); },17ffe8693635ac83dfbb4527b49ff4a05728281f,getPort(java.io.FileDescriptor),381466,105,49
19120,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_LayoutCanvas.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void run() { java.util.List<com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection> selection = mSelectionManager.getSelections(); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection canvasSelection = selection.get(0); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo info = canvasSelection.getViewInfo(); java.lang.Object viewObject = info.getViewObject(); if (viewObject != null) { com.android.layoutlib.api.LayoutScene scene = mViewHierarchy.getScene(); scene.animate(viewObject, ""testanim"", false, new com.android.layoutlib.api.LayoutScene.IAnimationListener() { private int count = 0; public void onNewFrame(java.awt.image.BufferedImage image) { try { javax.imageio.ImageIO.write(image, ""png"", new java.io.File(((""/Users/xav/Desktop/anim/anim"" + ((count)++)) + "".png""))); } catch (java.io.IOException e) { e.printStackTrace(); } } public boolean isCanceled() { return false; } public void done(com.android.layoutlib.api.SceneResult result) { } }); } }",6039188da655cba0000d6e5e75e30412e700674f,,run(),6,23,"@java.lang.Override public void run() { java.util.List<com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection> selection = mSelectionManager.getSelections(); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection canvasSelection = selection.get(0); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo info = canvasSelection.getViewInfo(); java.lang.Object viewObject = info.getViewObject(); if (viewObject != null) { com.android.layoutlib.api.LayoutScene scene = mViewHierarchy.getScene(); scene.animate(viewObject, ""testanim"", false, new com.android.layoutlib.api.LayoutScene.IAnimationListener() { public void onNewFrame(final java.awt.image.BufferedImage image) { getDisplay().asyncExec(new java.lang.Runnable() { public void run() { mImageOverlay.setImage(image); redraw(); } }); } public boolean isCanceled() { return false; } public void done(com.android.layoutlib.api.SceneResult result) { } }); } }",35f4cfe7cca97a3773d98c1d542757291f8b78ce,run(),105790,297,260
311386,hostsidetests_net_app_src_com_android_cts_net_hostside_DataSaverModeTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override protected boolean isSupported() throws java.lang.Exception { return (super.isSupported()) && (canUseMeteredNetwork()); },d1b148692d718867d0fe0858d5ce349f0344e1d8,,isSupported(),3,3,@java.lang.Override protected boolean setUpActiveNetworkMeteringState() throws java.lang.Exception { return setMeteredNetwork(); },8c425c607aa68c636bebca5720603b76dd53a390,setUpActiveNetworkMeteringState(),135263,33,29
319492,tests_src_com_android_networkrecommendation_WifiWakeupNetworkSelectorTest.java,,,,@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mResources.getInteger(R.integer.config_wifi_framework_wifi_score_low_rssi_threshold_24GHz)).thenReturn(com.android.networkrecommendation.WifiWakeupNetworkSelectorTest.MIN_QUALIFIED_24); when(mResources.getInteger(R.integer.config_wifi_framework_wifi_score_low_rssi_threshold_5GHz)).thenReturn(com.android.networkrecommendation.WifiWakeupNetworkSelectorTest.MIN_QUALIFIED_5); when(mResources.getInteger(R.integer.config_wifi_framework_5GHz_preference_boost_factor)).thenReturn(100); mWifiWakeupNetworkSelector = new com.android.networkrecommendation.WifiWakeupNetworkSelector(mResources); },5ef2234d4eb8a81f49334447ffc9bd72b4aa8069,,setUp(),5,2,@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mResources.getInteger(R.integer.config_netrec_wifi_score_low_rssi_threshold_24GHz)).thenReturn(com.android.networkrecommendation.WifiWakeupNetworkSelectorTest.MIN_QUALIFIED_24); when(mResources.getInteger(R.integer.config_netrec_wifi_score_low_rssi_threshold_5GHz)).thenReturn(com.android.networkrecommendation.WifiWakeupNetworkSelectorTest.MIN_QUALIFIED_5); when(mResources.getInteger(R.integer.config_netrec_5GHz_preference_boost_factor)).thenReturn(100); mWifiWakeupNetworkSelector = new com.android.networkrecommendation.WifiWakeupNetworkSelector(mResources); },7f799e51cd96610c4625baf09309ccefd0e2907c,setUp(),19772,200,197
121240,src_com_google_gct_idea_samples_SamplePreviewPanel.java,,,,"@java.lang.Override protected void paintComponent(java.awt.Graphics g) { super.paintComponent(g); int yPos = 0; for (java.awt.Image img : myScaledImages) { g.drawImage(img, 0, yPos, null); yPos += (img.getHeight(null)) + (com.google.gct.idea.samples.SamplePreviewPanel.PADDING); } }",486834580f5d9bf658a15fd69a3bcbee25f90ea9,,paintComponent(java.awt.Graphics),4,10,"@java.lang.Override protected void paintComponent(java.awt.Graphics g) { super.paintComponent(g); int yPos = 0; if ((myScaledImages.size()) == 0) { java.lang.String text = com.google.gct.idea.util.GctBundle.message(""sample.browser.no.preview""); if (myHasPreview) { text = ""Loading...""; } java.awt.geom.Rectangle2D r = g.getFontMetrics().getStringBounds(text, g); g.drawString(text, 1, ((int) (r.getHeight()))); } for (java.awt.Image img : myScaledImages) { g.drawImage(img, 0, yPos, null); yPos += (img.getHeight(null)) + (com.google.gct.idea.samples.SamplePreviewPanel.PADDING); } }",9e33b071c43c7d4c8ff3a84015b648f3f4629cba,paintComponent(java.awt.Graphics),411602,87,184
22391,telephony_java_com_android_internal_telephony_cdma_RuimPhoneBookInterfaceManager.java,0.0,"public int[] getAdnRecordsSize(int efid) { if (DBG) logd((""getAdnRecordsSize: efid="" + efid)); synchronized(mLock) { checkThread(); recordSize = new int[3]; android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.cdma.EVENT_GET_SIZE_DONE); phone.getIccFileHandler().getEFLinearRecordSize(efid, response); try { mLock.wait(); } catch (java.lang.InterruptedException e) { logd(""interrupted while trying to load from the RUIM""); } } return recordSize; }",26c041b738fbbe011531b0cc1bc7b0ee8256cf03,"public int[] getAdnRecordsSize(int efid) { if (DBG) logd((""getAdnRecordsSize: efid="" + efid)); synchronized(mLock) { checkThread(); recordSize = new int[3]; java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean(false); android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.cdma.EVENT_GET_SIZE_DONE, status); phone.getIccFileHandler().getEFLinearRecordSize(efid, response); while (!(status.get())) { try { mLock.wait(); } catch (java.lang.InterruptedException e) { logd(""interrupted while trying to load from the RUIM""); } } } return recordSize; }",29b2d86a3c7fae9f7a87f2a4e9fe7f058ba0deb3,getAdnRecordsSize(int),getAdnRecordsSize(int),3,0,"public int[] getAdnRecordsSize(int efid) { if (DBG) logd((""getAdnRecordsSize: efid="" + efid)); synchronized(mLock) { checkThread(); recordSize = new int[3]; java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean(false); android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.cdma.EVENT_GET_SIZE_DONE, status); phone.getIccFileHandler().getEFLinearRecordSize(efid, response); waitForResult(status); } return recordSize; }",34f8c08032358e13de04f0da017eb3ecca786d13,getAdnRecordsSize(int),152222,182,145
92758,luni_src_main_java_java_nio_DirectByteBuffer.java,24.0,"@java.lang.Override public java.nio.ByteBuffer putShort(short value) { checkNotFreed(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } int newPosition = (position) + (libcore.io.SizeOf.SHORT); if (newPosition > (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeShort(((offset) + (position)), value, order); position = newPosition; return this; }",3534ebb4f0e420ef28a804c948eea6a568d3ee0b,"@java.lang.Override public java.nio.ByteBuffer putShort(short value) { checkCanAccess(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } int newPosition = (position) + (libcore.io.SizeOf.SHORT); if (newPosition > (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeShort(((offset) + (position)), value, order); position = newPosition; return this; }",2fa7fc124532385d83ffa4dc6f71eec4d9252469,putShort(short),putShort(short),6,26,"@java.lang.Override public java.nio.ByteBuffer putShort(short value) { checkIsAccessible(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } int newPosition = (position) + (libcore.io.SizeOf.SHORT); if (newPosition > (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeShort(((offset) + (position)), value, order); position = newPosition; return this; }",4e89b1bae958206287902ea6e19293939b76a9c4,putShort(short),45024,106,106
156953,ddmlib_src_main_java_com_android_ddmlib_Device.java,44.0,java.nio.channels.SocketChannel getClientMonitoringSocket() { return mSocketChannel; },d404f806a49cc300160e5ba4d34f11a6d3af757e,@com.android.annotations.NonNull java.nio.channels.SocketChannel getClientMonitoringSocket() { return mSocketChannel; },cc48405a2258e8bff490512161cbdb31557a0b5d,getClientMonitoringSocket(),getClientMonitoringSocket(),5,44,@com.android.annotations.Nullable java.nio.channels.SocketChannel getClientMonitoringSocket() { return mSocketChannel; },75931cc5ba0fe1983c9ba469690d8c754d7931e1,getClientMonitoringSocket(),402344,26,26
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,,"public static com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country, java.time.Instant startInclusive, java.time.Instant endExclusive) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US); java.util.List<com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList(); java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos = new java.util.ArrayList<>(); for (int i = 0; i < (timeZoneMappings.size()); i++) { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping timeZoneMapping = timeZoneMappings.get(i); int priority = timeZoneMapping.getPriority(); com.ibm.icu.util.BasicTimeZone timeZone = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone(timeZoneMapping.getId()))); if (timeZone == (com.ibm.icu.util.TimeZone.UNKNOWN_ZONE)) { throw new java.lang.IllegalArgumentException((""Unknown zone id: "" + timeZone)); } com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo = com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo.create(timeZoneNames, timeZone, priority, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country.getIsoCode(), zoneInfos); }",9b5690de35aa09c2a030a9a7346807811ae4d781,,"create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country,java.time.Instant,java.time.Instant)",4,17,"public static com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country, java.time.Instant startInclusive, java.time.Instant endExclusive) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US); java.util.List<com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList(); java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos = new java.util.ArrayList<>(); for (com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping timeZoneMapping : timeZoneMappings) { int priority = timeZoneMapping.getPriority(); com.ibm.icu.util.TimeZone timeZone = com.ibm.icu.util.TimeZone.getTimeZone(timeZoneMapping.getId()); if (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.isInvalidZone(timeZone)) { throw new java.lang.IllegalArgumentException((""Unknown or unexpected type for zone id: "" + (timeZone.getID()))); } com.ibm.icu.util.BasicTimeZone basicTimeZone = ((com.ibm.icu.util.BasicTimeZone) (timeZone)); com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo = com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo.create(timeZoneNames, basicTimeZone, priority, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country.getIsoCode(), zoneInfos, startInclusive, endExclusive); }",8ba2885dd65149b154249982c360e64022b1f4e8,"create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country,java.time.Instant,java.time.Instant)",153172,442,463
207541,apps_CtsVerifier_src_com_android_cts_verifier_usb_UsbAccessoryTestActivity.java,14.0,"@java.lang.Override protected void onResume() { super.onResume(); android.hardware.usb.UsbAccessory[] accessories = mUsbManager.getAccessoryList(); android.hardware.usb.UsbAccessory accessory = ((accessories != null) && ((accessories.length) > 0)) ? accessories[0] : null; if (accessory != null) { if (mUsbManager.hasPermission(accessory)) { openAccessory(accessory); } else { if (!(mPermissionRequestPending)) { mUsbManager.requestPermission(accessory, mPermissionIntent); mPermissionRequestPending = true; } } } }",0055a1a61d6610942379edd57ebd2dd541088df6,@java.lang.Override protected void onResume() { super.onResume(); tryGetAccessory(false); },12a5277a378b5d0be77f27abfe8ab305acbd4f56,onResume(),onResume(),3,15,"@java.lang.Override protected void onResume() { super.onResume(); if ((mState) == (com.android.cts.verifier.usb.UsbAccessoryTestActivity.STATE_START)) { android.hardware.usb.UsbAccessory[] accessories = mUsbManager.getAccessoryList(); android.hardware.usb.UsbAccessory accessory = ((accessories != null) && ((accessories.length) > 0)) ? accessories[0] : null; if (accessory != null) { if (mUsbManager.hasPermission(accessory)) { openAccessory(accessory); } else { if (!(mPermissionRequestPending)) { mUsbManager.requestPermission(accessory, mPermissionIntent); mPermissionRequestPending = true; } } } } else if (((mState) != (com.android.cts.verifier.usb.UsbAccessoryTestActivity.STATE_CONNECTED)) && ((mState) != (com.android.cts.verifier.usb.UsbAccessoryTestActivity.STATE_RECONNECTED))) { closeAccessory(); setTestResultAndFinish(false); android.widget.Toast.makeText(this, R.string.usb_test_abort, Toast.LENGTH_SHORT).show(); mState = com.android.cts.verifier.usb.UsbAccessoryTestActivity.STATE_START; } }",7cf01faeae34e3b1d2a49166d6e69926d34f5052,onResume(),440195,23,292
558960,src_java_com_android_internal_telephony_uicc_UiccCard.java,35.0,"public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { mCi.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE, response)); }",c85dc41e96c4bfb111d8e01ac40d08d1c92df05a,"public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { mCi.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE, response)); } else { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, response); } } }",0d7eab6c931de94eeeb5304725760a64e5b77509,"iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String,android.os.Message)","iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String,android.os.Message)",8,22,"@java.lang.Deprecated public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, response); } else { loge(""iccTransmitApduBasicChannel Failed!""); } }",34c8369bc6f4dfb066e075076cee9acabe5b3066,"iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String,android.os.Message)",47921,182,104
136140,rpclib_src_test_java_com_android_tools_rpclib_binary_DecoderTest.java,,,,"public void testDecodeUint8() { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (127)), ((byte) (128)), ((byte) (255)) }); final short[] expected = new short[]{ 0, 127, 128, 255 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); try { for (short u8 : expected) { assertEquals(u8, ((d.uint8()) & 255)); } } catch (java.io.IOException ex) { assertNull(ex); } }",d626db0d047ae35159094076240e15ac25c5a3af,,testDecodeUint8(),3,14,"public void testDecodeUint8() throws java.io.IOException { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (127)), ((byte) (128)), ((byte) (255)) }); final short[] expected = new short[]{ 0, 127, 128, 255 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); for (short u8 : expected) { assertEquals(u8, ((d.uint8()) & 255)); } }",d6f8fc1431a66f88b528cd966aa2cb27f42be05e,testDecodeUint8(),49527,153,140
51412,ddmlib_src_main_java_com_android_ddmlib_logcat_LogCatMessage.java,,,,public java.lang.String getTime() { return mTime; },1d47d7396661dadfa56ed17800a69ec875c70e57,,getTime(),6,7,@com.android.annotations.NonNull public java.lang.String getTime() { return mTime; },30f9948cbf46df17d7870d6c9e4292667f9deafa,getTime(),474551,15,23
88304,build-system_manifest-merger_src_main_java_com_android_manifmerger_PreValidator.java,2.0,private void updateResult(com.android.manifmerger.MergingReport.Result result) { if ((result == (MergingReport.Result.ERROR)) || ((result == (MergingReport.Result.WARNING)) && ((mResult) != (MergingReport.Result.ERROR)))) { mResult = result; } },c9b3baa18952be9f21782954cb43a85355dcbccc,"private void validateAttributeInstructions(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, com.android.manifmerger.AttributeOperationType> attributeOperationTypeEntry : xmlElement.getAttributeOperations()) { com.google.common.base.Optional<com.android.manifmerger.XmlAttribute> attribute = xmlElement.getAttribute(attributeOperationTypeEntry.getKey()); switch (attributeOperationTypeEntry.getValue()) { case STRICT : break; case REMOVE : if (attribute.isPresent()) { mergingReport.addError(java.lang.String.format((""tools:remove specified at line:%d for attribute %s, but "" + (""attribute also declared at line:%d, "" + ""do you want to use tools:replace instead ?"")), xmlElement.getPosition().getLine(), attributeOperationTypeEntry.getKey(), attribute.get().getPosition().getLine())); } break; case REPLACE : if (!(attribute.isPresent())) { mergingReport.addError(java.lang.String.format((""tools:replace specified at line:%d for attribute %s, but "" + ""no new value specified""), xmlElement.getPosition().getLine(), attributeOperationTypeEntry.getKey())); } break; default : throw new java.lang.IllegalStateException((""Unhandled AttributeOperationType "" + (attributeOperationTypeEntry.getValue()))); } } }",8e87e70404e5717342e44044ae951212dcf3ad3e,updateResult(com.android.manifmerger.MergingReport$Result),"validateAttributeInstructions(com.android.manifmerger.MergingReport$Builder,com.android.manifmerger.XmlElement)",2,2,"private static void validateAttributeInstructions(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, com.android.manifmerger.AttributeOperationType> attributeOperationTypeEntry : xmlElement.getAttributeOperations()) { com.google.common.base.Optional<com.android.manifmerger.XmlAttribute> attribute = xmlElement.getAttribute(attributeOperationTypeEntry.getKey()); switch (attributeOperationTypeEntry.getValue()) { case STRICT : break; case REMOVE : if (attribute.isPresent()) { mergingReport.addError(java.lang.String.format((""tools:remove specified at line:%d for attribute %s, but "" + (""attribute also declared at line:%d, "" + ""do you want to use tools:replace instead ?"")), xmlElement.getPosition().getLine(), attributeOperationTypeEntry.getKey(), attribute.get().getPosition().getLine())); } break; case REPLACE : if (!(attribute.isPresent())) { mergingReport.addError(java.lang.String.format((""tools:replace specified at line:%d for attribute %s, but "" + ""no new value specified""), xmlElement.getPosition().getLine(), attributeOperationTypeEntry.getKey())); } break; default : throw new java.lang.IllegalStateException((""Unhandled AttributeOperationType "" + (attributeOperationTypeEntry.getValue()))); } } }",0f3dcec6030d98ad3d5e80801d238f0ff3f8edee,"validateAttributeInstructions(com.android.manifmerger.MergingReport$Builder,com.android.manifmerger.XmlElement)",288193,318,319
123952,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void LibToImportStaticLibs(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { for (java.io.File staticlib : in) { args.add(""--import""); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } }",c1ba9b25bf227e6d1661aa133b1bafb768855ea6,,"LibToImportStaticLibs(java.util.List,java.io.File[])",15,0,"protected void libToImportStaticLibs(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { for (java.io.File staticlib : in) { args.add(""--import""); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } }",50b2661426dd8f20c5b5f3d8886f28d2b2459727,"libToImportStaticLibs(java.util.List,java.io.File[])",53111,113,112
325584,luni_src_test_java_libcore_java_util_SpliteratorTester.java,14.0,"public static <T> void runBasicIterationTests(java.util.Spliterator<T> spliterator, java.util.ArrayList<T> expectedElements) { java.util.ArrayList<T> recorder = new java.util.ArrayList<T>(expectedElements.size()); java.util.function.Consumer<T> consumer = (T value) -> recorder.add(value); junit.framework.Assert.assertTrue(spliterator.tryAdvance(consumer)); junit.framework.Assert.assertEquals(expectedElements.get(0), recorder.get(0)); spliterator.forEachRemaining(consumer); junit.framework.Assert.assertEquals(expectedElements, recorder); junit.framework.Assert.assertFalse(spliterator.tryAdvance(consumer)); spliterator.forEachRemaining(( T) -> junit.framework.Assert.fail()); }",df3bede9652d3429a580079f16db4484411b10bf,"public static <T> void runBasicIterationTests(java.util.Spliterator<T> spliterator, java.util.List<T> expectedElements) { java.util.List<T> recorder = new java.util.ArrayList<T>(expectedElements.size()); java.util.function.Consumer<T> consumer = (T value) -> recorder.add(value); boolean didAdvance = spliterator.tryAdvance(consumer); junit.framework.Assert.assertEquals((!(expectedElements.isEmpty())), didAdvance); if (0 < (expectedElements.size())) { junit.framework.Assert.assertEquals(expectedElements.get(0), recorder.get(0)); } spliterator.forEachRemaining(consumer); junit.framework.Assert.assertEquals(expectedElements, recorder); junit.framework.Assert.assertFalse(spliterator.tryAdvance(consumer)); spliterator.forEachRemaining(( T) -> junit.framework.Assert.fail()); }",e09745a1a0080b3fa88c0ce2f6016d0df1d13755,"runBasicIterationTests(java.util.Spliterator,java.util.ArrayList)","runBasicIterationTests(java.util.Spliterator,java.util.List)",4,6,"public static <T> void runBasicIterationTests(java.util.Spliterator<T> spliterator, java.util.List<T> expectedElements) { java.util.List<T> recorder = new java.util.ArrayList<T>(expectedElements.size()); java.util.function.Consumer<T> consumer = (T value) -> recorder.add(value); boolean didAdvance = spliterator.tryAdvance(consumer); junit.framework.Assert.assertEquals((!(expectedElements.isEmpty())), didAdvance); spliterator.forEachRemaining(consumer); junit.framework.Assert.assertEquals(expectedElements, recorder); junit.framework.Assert.assertFalse(spliterator.tryAdvance(consumer)); spliterator.forEachRemaining(( T) -> junit.framework.Assert.fail()); }",d6b8e4d0db96909b941dca7c8e7e305f16ff4363,"runBasicIterationTests(java.util.Spliterator,java.util.List)",516454,194,166
21570,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_resources_manager_ResourceItem.java,,,,protected void replaceWith(com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem item) { mFiles.clear(); mFiles.addAll(item.mFiles); },f128f0bfb82901f61b90f2928bcea4f2199e4048,,replaceWith(com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem),6,9,"@java.lang.Override public java.lang.String toString() { return (((""ResourceItem [mName="" + (mName)) + "", mFiles="") + (mFiles)) + ""]""; }",10634f4fd8c272a14feaf7554fc542a43d872e86,toString(),150545,43,47
238940,jack_src_com_android_jack_shrob_proguard_GrammarActions.java,5.0,"@javax.annotation.Nonnull static com.android.jack.shrob.spec.AnnotationSpecification annotation(java.lang.String annotationName, boolean hasNameNegator) { com.android.jack.shrob.spec.NameSpecification name = com.android.jack.shrob.proguard.GrammarActions.name(annotationName); name.setNegator(hasNameNegator); return new com.android.jack.shrob.spec.AnnotationSpecification(name); }",3cb4572cfd649aaa691c8ef2324a77a6105d779d,"@javax.annotation.Nonnull static com.android.jack.shrob.spec.AnnotationSpecification annotation(java.lang.String annotationName, boolean hasNameNegator) { com.android.jack.shrob.spec.NameSpecification name = com.android.jack.shrob.proguard.GrammarActions.name(annotationName, com.android.jack.shrob.proguard.GrammarActions.NameFormat.CLASS); name.setNegator(hasNameNegator); return new com.android.jack.shrob.spec.AnnotationSpecification(name); }",16fef5d0f4b383f6ace9827615d0c5d1f0596f81,"annotation(java.lang.String,boolean)","annotation(java.lang.String,boolean)",5,3,"@javax.annotation.Nonnull static com.android.jack.shrob.spec.AnnotationSpecification annotation(java.lang.String annotationName, boolean hasNameNegator) { com.android.jack.shrob.spec.NameSpecification name = com.android.jack.shrob.proguard.GrammarActions.name(annotationName, com.android.jack.shrob.proguard.GrammarActions.FilterSeparator.CLASS); name.setNegator(hasNameNegator); return new com.android.jack.shrob.spec.AnnotationSpecification(name); }",0f0519b3e72b8f21f3c2a689b4147307d9af5b00,"annotation(java.lang.String,boolean)",444633,125,125
579565,src_java_com_android_internal_telephony_RIL.java,158.0,"@java.lang.Override public void getCellInfoList(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_CELL_INFO_LIST, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCellInfoList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getCellInfoList"", e); } } }",beb23d149ad91c0df9dbbaa7e23e0737d6d1613e,"@java.lang.Override public void getCellInfoList(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_CELL_INFO_LIST, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCellInfoList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getCellInfoList"", e); } } }",cae338c85e74546e6b211b3d4f9f83bbb23f77f3,"getCellInfoList(android.os.Message,android.os.WorkSource)","getCellInfoList(android.os.Message,android.os.WorkSource)",3,158,"@java.lang.Override public void getCellInfoList(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_CELL_INFO_LIST, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCellInfoList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getCellInfoList"", e); } } }",beb23d149ad91c0df9dbbaa7e23e0737d6d1613e,"getCellInfoList(android.os.Message,android.os.WorkSource)",89343,228,224
51412,ddmlib_src_main_java_com_android_ddmlib_logcat_LogCatReceiverTask.java,,,,public void removeLogCatListener(com.android.ddmlib.logcat.ILogCatListener l) { mListeners.remove(l); },339269524bff2a8d27044350951eeefb13003ad5,,removeLogCatListener(com.android.ddmlib.logcat.ILogCatListener),6,6,public synchronized void removeLogCatListener(com.android.ddmlib.logcat.LogCatListener l) { mListeners.remove(l); },cee33f3ecb2b626907419cdde3b68c68697a9673,removeLogCatListener(com.android.ddmlib.logcat.LogCatListener),474560,33,33
124245,jill_tests_com_android_jill_Core.java,0.0,"@org.junit.Test public void coreToJayceFromJar() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jill.JillTestTools.getAndroidTop()) + ""/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar""))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir(""core_"", ""_dir""); new com.android.jill.Jill(options, ""0.1"").process(options.getBinaryFile()); }",0cfb8a9c46511aa97c1a7239739f715506a7bcb5,"@org.junit.Test public void coreToJayceFromJar() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jack.test.TestingEnvironment.getAndroidRootDir().getPath()) + ""/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar""))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir(""core_"", ""_dir""); new com.android.jill.Jill(options, ""0.1"").process(options.getBinaryFile()); }",069c23c6c402a2e5be991898f236df7a75873060,coreToJayceFromJar(),coreToJayceFromJar(),3,0,"@org.junit.Test public void coreToJayceFromJar() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jack.test.TestsProperties.getAndroidRootDir().getPath()) + ""/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar""))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir(""core_"", ""_dir""); new com.android.jill.Jill(options, ""0.1"").process(options.getBinaryFile()); }",fec678b52114637a4b6c99503f732f7bd5d1a079,coreToJayceFromJar(),151549,174,174
189059,tools_signapk_src_com_android_signapk_SignApk.java,29.0,"@java.lang.Override public void write(java.io.OutputStream out) throws java.io.IOException { try { signer = new com.android.signapk.SignApk.WholeFileSignerOutputStream(out, outputStream); java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(signer); int hash = com.android.signapk.SignApk.getDigestAlgorithm(publicKey); long timestamp = (publicKey.getNotBefore().getTime()) + (3600L * 1000); java.util.jar.Manifest manifest = com.android.signapk.SignApk.addDigestsToManifest(inputJar, hash); com.android.signapk.SignApk.copyFiles(manifest, inputJar, outputJar, timestamp, 0); com.android.signapk.SignApk.addOtacert(outputJar, publicKeyFile, timestamp, manifest, hash); com.android.signapk.SignApk.signFile(manifest, new java.security.cert.X509Certificate[]{ publicKey }, new java.security.PrivateKey[]{ privateKey }, outputJar); signer.notifyClosing(); outputJar.close(); signer.finish(); } catch (java.lang.Exception e) { throw new java.io.IOException(e); } }",a5433f69c0035c37fafef04b710c7fc6dacc8358,"@java.lang.Override public void write(java.io.OutputStream out) throws java.io.IOException { try { signer = new com.android.signapk.SignApk.WholeFileSignerOutputStream(out, outputStream); java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(signer); int hash = com.android.signapk.SignApk.getDigestAlgorithm(publicKey); long timestamp = (publicKey.getNotBefore().getTime()) + (3600L * 1000); java.util.jar.Manifest manifest = com.android.signapk.SignApk.addDigestsToManifest(inputJar, hash); com.android.signapk.SignApk.copyFiles(manifest, inputJar, outputJar, timestamp, 0); com.android.signapk.SignApk.addOtacert(outputJar, publicKeyFile, timestamp, manifest, hash); com.android.signapk.SignApk.signFile(manifest, new java.security.cert.X509Certificate[]{ publicKey }, new java.security.PrivateKey[]{ privateKey }, outputJar, false); signer.notifyClosing(); outputJar.close(); signer.finish(); } catch (java.lang.Exception e) { throw new java.io.IOException(e); } }",d6c50cbab0ec8e7f332c721de1e79b490b95658f,write(java.io.OutputStream),write(java.io.OutputStream),9,31,"@java.lang.Override public void write(java.io.OutputStream out) throws java.io.IOException { try { signer = new com.android.signapk.SignApk.WholeFileSignerOutputStream(out, outputStream); java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(signer); int hash = com.android.signapk.SignApk.getDigestAlgorithm(publicKey, minSdkVersion); long timestamp = (publicKey.getNotBefore().getTime()) + (3600L * 1000); java.util.jar.Manifest manifest = com.android.signapk.SignApk.addDigestsToManifest(inputJar, hash); com.android.signapk.SignApk.copyFiles(manifest, inputJar, outputJar, timestamp, 0); com.android.signapk.SignApk.addOtacert(outputJar, publicKeyFile, timestamp, manifest, hash); com.android.signapk.SignApk.signFile(manifest, new java.security.cert.X509Certificate[]{ publicKey }, new java.security.PrivateKey[]{ privateKey }, minSdkVersion, false, outputJar); signer.notifyClosing(); outputJar.close(); signer.finish(); } catch (java.lang.Exception e) { throw new java.io.IOException(e); } }",f8b3f22d5783e848b468e55b02313138ab5139e6,write(java.io.OutputStream),264169,273,279
583630,src_com_android_bips_ipp_CapabilitiesCache.java,7.0,"public void request(DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""request() printer="" + printer) + "" high="") + highPriority)); Uri printerUri = printer.getUri(); Uri printerPath = printer.path; com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer.getUri()); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(printer, capabilities); return; } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.get(printerUri); if (request == null) { if (highPriority) { request = new com.android.bips.ipp.CapabilitiesCache.Request(printer, com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT); } else { request = new com.android.bips.ipp.CapabilitiesCache.Request(printer, com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT); } mRequests.put(printerUri, request); } else if (!(request.mPrinter.path.equals(printerPath))) { android.util.Log.w(com.android.bips.ipp.CapabilitiesCache.TAG, (((""Capabilities request for printer "" + printer) + "" overlaps with different path "") + (request.mPrinter.path))); onLocalPrinterCapabilities.onCapabilities(printer, null); return; } request.mCallbacks.add(onLocalPrinterCapabilities); if (highPriority) { request.mHighPriority = true; } startNextRequest(); }",d821c74c09deef9d7075595a6c39779d81c73d91,"public void request(com.android.bips.discovery.DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""request() printer="" + printer) + "" high="") + highPriority)); com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Adding to P2P evict list: "" + printer)); mToEvictP2p.add(printer.path); } else { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Adding to WLAN evict list: "" + printer)); mToEvict.add(printer.path); } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.computeIfAbsent(printer.path, ( uri) -> new com.android.bips.ipp.Request(printer, (highPriority ? com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT))); if (highPriority) request.mHighPriority = true; request.mCallbacks.add(onLocalPrinterCapabilities); startNextRequest(); }",b4dabf4e34feff89542c71825ee6bf5d442c580e,"request(com.android.bips.discovery.DiscoveredPrinter,boolean,com.android.bips.ipp.CapabilitiesCache$OnLocalPrinterCapabilities)","request(com.android.bips.discovery.DiscoveredPrinter,boolean,com.android.bips.ipp.CapabilitiesCache$OnLocalPrinterCapabilities)",4,10,"public void request(com.android.bips.discovery.DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (((""request() printer="" + printer) + "" high="") + highPriority)); com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Adding to P2P evict list: "" + printer)); mToEvictP2p.add(printer.path); } else { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, (""Adding to WLAN evict list: "" + printer)); mToEvict.add(printer.path); } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.computeIfAbsent(printer.path, ( uri) -> new com.android.bips.ipp.Request(printer, (highPriority ? com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT))); if (highPriority) { request.mHighPriority = true; } request.mCallbacks.add(onLocalPrinterCapabilities); startNextRequest(); }",f22c629efb4bfa0607a4f85b10680c751853f656,"request(com.android.bips.discovery.DiscoveredPrinter,boolean,com.android.bips.ipp.CapabilitiesCache$OnLocalPrinterCapabilities)",33230,440,442
19446,ide_common_src_com_android_ide_common_layoutlib_LayoutLibrary.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.EnumSet<com.android.layoutlib.api.Capabilities> getCapabilities() { if ((mBridge) != null) { return mBridge.getCapabilities(); } return java.util.EnumSet.noneOf(com.android.layoutlib.api.Capabilities.class); },c855f6f2e1b20011faf44ceef7e04622f646ecfb,,getCapabilities(),7,5,public boolean supports(com.android.layoutlib.api.Capability capability) { if ((mBridge) != null) { return mBridge.getCapabilities().contains(capability); } if ((mLegacyBridge) != null) { switch (capability) { case UNBOUND_RENDERING : return (getLegacyApiLevel()) == 4; } } return false; },0bc7fd59b5f16950edae189cf4837f06f5f1f3f8,supports(com.android.layoutlib.api.Capability),270969,63,78
207904,jack-tests_tests_com_android_jack_java8_VariableTest.java,,,,"@org.junit.Test public void test001() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.java8.variable.test001.jack""); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeClazz = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(2); excludeClazz.add(com.android.jack.test.toolchain.JackApiV01.class); com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class, excludeClazz); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()).setSourceLevel(SourceLevel.JAVA_8); try { toolchain.srcToExe(out, false, testFolder); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { } }",2f52b0547dcb7e7ec9bfc965d8c8213453ecdc3e,,test001(),5,0,"@org.junit.Test public void test001() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.java8.variable.test001.jack""); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeClazz = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(2); excludeClazz.add(com.android.jack.test.toolchain.JackApiV01.class); com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class, excludeClazz); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()).setErrorStream(errOut).setSourceLevel(SourceLevel.JAVA_8); try { toolchain.srcToExe(out, false, testFolder); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { junit.framework.Assert.assertTrue(errOut.toString().contains(""Local variable value defined in an enclosing scope must be final or effectively final"")); } }",6a15b6ec321872cafb3a7674195432b868aff82f,test001(),297112,286,339
302799,src_com_android_bluetooth_map_BluetoothMapbMessageSms.java,3.0,"public byte[] encode() throws java.io.UnsupportedEncodingException { java.util.ArrayList<byte[]> bodyFragments = new java.util.ArrayList<byte[]>(); if ((mSmsBody) != null) { java.lang.String tmpBody = mSmsBody.replaceAll(""END:MSG"", ""/END\\:MSG""); bodyFragments.add(tmpBody.getBytes(""UTF-8"")); } else if (((mSmsBodyPdus) != null) && ((mSmsBodyPdus.size()) > 0)) { for (com.android.bluetooth.map.BluetoothMapSmsPdu.SmsPdu pdu : mSmsBodyPdus) { bodyFragments.add(encodeBinary(pdu.getData(), pdu.getScAddress()).getBytes(""UTF-8"")); } } else { bodyFragments.add(new byte[0]); } return encodeGeneric(bodyFragments); }",7d3053523ba868b80d2ddf2ec48c94da71d3785a,"public byte[] encode() throws java.io.UnsupportedEncodingException { java.util.ArrayList<byte[]> bodyFragments = new java.util.ArrayList<byte[]>(); if ((mSmsBody) != null) { java.lang.String tmpBody = mSmsBody.replaceAll(""END:MSG"", ""/END\\:MSG""); java.lang.String remoteAddress = com.android.bluetooth.map.BluetoothMapService.getRemoteDevice().getAddress(); if (com.android.bluetooth.DeviceWorkArounds.addresStartsWith(remoteAddress, DeviceWorkArounds.PCM_CARKIT)) { tmpBody = tmpBody.replaceAll(""\r"", """"); } else if (com.android.bluetooth.DeviceWorkArounds.addresStartsWith(remoteAddress, DeviceWorkArounds.FORD_SYNC_CARKIT)) { tmpBody = tmpBody.replaceAll(""\n"", """"); } bodyFragments.add(tmpBody.getBytes(""UTF-8"")); } else if (((mSmsBodyPdus) != null) && ((mSmsBodyPdus.size()) > 0)) { for (com.android.bluetooth.map.BluetoothMapSmsPdu.SmsPdu pdu : mSmsBodyPdus) { bodyFragments.add(encodeBinary(pdu.getData(), pdu.getScAddress()).getBytes(""UTF-8"")); } } else { bodyFragments.add(new byte[0]); } return encodeGeneric(bodyFragments); }",a33925bae17d42b80adfa48ccf9ab914b70ea8c3,encode(),encode(),17,3,"@java.lang.Override public byte[] encode() throws java.io.UnsupportedEncodingException { java.util.ArrayList<byte[]> bodyFragments = new java.util.ArrayList<byte[]>(); if ((mSmsBody) != null) { java.lang.String tmpBody = mSmsBody.replaceAll(""END:MSG"", ""/END\\:MSG""); java.lang.String remoteAddress = com.android.bluetooth.map.BluetoothMapService.getRemoteDevice().getAddress(); if (com.android.bluetooth.DeviceWorkArounds.addressStartsWith(remoteAddress, DeviceWorkArounds.PCM_CARKIT)) { tmpBody = tmpBody.replaceAll(""\r"", """"); } else if (com.android.bluetooth.DeviceWorkArounds.addressStartsWith(remoteAddress, DeviceWorkArounds.FORD_SYNC_CARKIT)) { tmpBody = tmpBody.replaceAll(""\n"", """"); } else if ((com.android.bluetooth.DeviceWorkArounds.addressStartsWith(remoteAddress, DeviceWorkArounds.SYNC_CARKIT)) && ((tmpBody.length()) > 0)) { int trailingLF = 0; while ((tmpBody.charAt((((tmpBody.length()) - trailingLF) - 1))) == '\n') trailingLF++; tmpBody = tmpBody.substring(0, ((tmpBody.length()) - trailingLF)); } bodyFragments.add(tmpBody.getBytes(""UTF-8"")); } else if (((mSmsBodyPdus) != null) && ((mSmsBodyPdus.size()) > 0)) { for (com.android.bluetooth.map.BluetoothMapSmsPdu.SmsPdu pdu : mSmsBodyPdus) { bodyFragments.add(encodeBinary(pdu.getData(), pdu.getScAddress()).getBytes(""UTF-8"")); } } else { bodyFragments.add(new byte[0]); } return encodeGeneric(bodyFragments); }",0efa377ad97554c86477e55166c6e074a3c0240e,encode(),48190,308,410
189059,tools_signapk_src_com_android_signapk_ApkSignerV2.java,,,,"private static com.android.signapk.Pair<java.lang.String, ? extends java.security.spec.AlgorithmParameterSpec> getSignatureAlgorithmJcaSignatureAlgorithm(int sigAlgorithm) { switch (sigAlgorithm) { case com.android.signapk.ApkSignerV2.SIGNATURE_RSAPSS_WITH_SHA256 : return com.android.signapk.Pair.create(""SHA256withRSA/PSS"", new java.security.spec.PSSParameterSpec(""SHA-256"", ""MGF1"", java.security.spec.MGF1ParameterSpec.SHA256, (256 / 8), 1)); case com.android.signapk.ApkSignerV2.SIGNATURE_RSAPSS_WITH_SHA512 : return com.android.signapk.Pair.create(""SHA512withRSA/PSS"", new java.security.spec.PSSParameterSpec(""SHA-512"", ""MGF1"", java.security.spec.MGF1ParameterSpec.SHA512, (512 / 8), 1)); case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA256 : return com.android.signapk.Pair.create(""SHA256withECDSA"", null); case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA512 : return com.android.signapk.Pair.create(""SHA512withECDSA"", null); case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA256 : return com.android.signapk.Pair.create(""SHA256withDSA"", null); case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA512 : return com.android.signapk.Pair.create(""SHA512withDSA"", null); default : throw new java.lang.IllegalArgumentException((""Unknown signature algorithm: 0x"" + (java.lang.Long.toHexString((sigAlgorithm & -1))))); } }",952689794df83572caa11ed97960ef1d1c27aed2,,getSignatureAlgorithmJcaSignatureAlgorithm(int),9,10,"private static com.android.signapk.Pair<java.lang.String, ? extends java.security.spec.AlgorithmParameterSpec> getSignatureAlgorithmJcaSignatureAlgorithm(int sigAlgorithm) { switch (sigAlgorithm) { case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PSS_WITH_SHA256 : return com.android.signapk.Pair.create(""SHA256withRSA/PSS"", new java.security.spec.PSSParameterSpec(""SHA-256"", ""MGF1"", java.security.spec.MGF1ParameterSpec.SHA256, (256 / 8), 1)); case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PSS_WITH_SHA512 : return com.android.signapk.Pair.create(""SHA512withRSA/PSS"", new java.security.spec.PSSParameterSpec(""SHA-512"", ""MGF1"", java.security.spec.MGF1ParameterSpec.SHA512, (512 / 8), 1)); case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA256 : return com.android.signapk.Pair.create(""SHA256withRSA"", null); case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA512 : return com.android.signapk.Pair.create(""SHA512withRSA"", null); case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA256 : return com.android.signapk.Pair.create(""SHA256withECDSA"", null); case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA512 : return com.android.signapk.Pair.create(""SHA512withECDSA"", null); case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA256 : return com.android.signapk.Pair.create(""SHA256withDSA"", null); case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA512 : return com.android.signapk.Pair.create(""SHA512withDSA"", null); default : throw new java.lang.IllegalArgumentException((""Unknown signature algorithm: 0x"" + (java.lang.Long.toHexString((sigAlgorithm & -1))))); } }",82714a3676488b9d9c7c54fce774297460bad62d,getSignatureAlgorithmJcaSignatureAlgorithm(int),264156,416,512
161270,test_449-checker-bce_src_Main.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testExceptionMessage() { short[] B1 = new short[5]; int[] B2 = new int[5]; java.lang.Exception err = null; try { (count)++; testExceptionMessage1(B1, B2, null, (-1), 6); } catch (java.lang.Exception e) { err = e; } java.lang.System.out.println(err); }",08f324dc092bda8e3bf027bc00da1ffea0fab850,,testExceptionMessage(),3,12,"public void testExceptionMessage() { short[] B1 = new short[5]; int[] B2 = new int[5]; java.lang.Exception err = null; try { testExceptionMessage1(B1, B2, null, (-1), 6); } catch (java.lang.Exception e) { err = e; } java.lang.System.out.println(err); }",634d921193a12db42d8b0ceae0ad4e3929c86b7c,testExceptionMessage(),18019,83,79
589595,src_main_java_com_android_apksig_internal_apk_v3_V3SchemeVerifier.java,,,,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v3.V3SchemeVerifier.APK_SIGNATURE_SCHEME_V3_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }",e80f1adafe4027c64d58ddf200cb070ea76f146a,,"verify(com.android.apksig.util.DataSource,com.android.apksig.apk.ApkUtils$ZipSections,int,int)",6,0,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v3.V3SchemeVerifier.APK_SIGNATURE_SCHEME_V3_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; if (minSdkVersion < (com.android.apksig.internal.util.AndroidSdkVersion.P)) { minSdkVersion = com.android.apksig.internal.util.AndroidSdkVersion.P; } com.android.apksig.internal.apk.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }",92bac67cd17d5ae7076858cfcf2f6e6749594c49,"verify(com.android.apksig.util.DataSource,com.android.apksig.apk.ApkUtils$ZipSections,int,int)",473394,357,401
89225,libart_src_main_java_java_lang_reflect_Field.java,44.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private native long getLongNative(java.lang.Object object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;",83aa2d0ff8f5f28f2411646408ccec202112aa65,,getLongNative(java.lang.Object),2,52,"private native long getLong(java.lang.Object object, boolean accessible) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;",dd81704643b78c2ed79af912b1c386bafd07d651,"getLong(java.lang.Object,boolean)",134487,29,31
96272,services_java_com_android_server_pm_PackageManagerService.java,401.0,"@java.lang.Override public void installPackageWithVerification(android.net.Uri packageURI, android.content.pm.IPackageInstallObserver observer, int flags, java.lang.String installerPackageName, android.net.Uri verificationURI, android.content.pm.ManifestDigest manifestDigest, android.content.pm.ContainerEncryptionParams encryptionParams) { android.content.pm.VerificationParams verificationParams = new android.content.pm.VerificationParams(verificationURI, null, null, android.content.pm.VerificationParams.NO_UID, manifestDigest); installPackageWithVerificationAndEncryption(packageURI, observer, flags, installerPackageName, verificationParams, encryptionParams); }",3c85b2f48bf783a289c6e0aa4a4ed331eb916723,"@java.lang.Override public void installPackageWithVerification(android.net.Uri packageURI, android.content.pm.IPackageInstallObserver observer, int flags, java.lang.String installerPackageName, android.net.Uri verificationURI, android.content.pm.ManifestDigest manifestDigest, android.content.pm.ContainerEncryptionParams encryptionParams) { android.content.pm.VerificationParams verificationParams = new android.content.pm.VerificationParams(verificationURI, null, null, android.content.pm.VerificationParams.NO_UID, manifestDigest); installPackageWithVerificationAndEncryption(packageURI, observer, flags, installerPackageName, verificationParams, encryptionParams, null); }",a82efaf24a648f2dbf4df26d4d05d61fd78a36a4,"installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest,android.content.pm.ContainerEncryptionParams)","installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest,android.content.pm.ContainerEncryptionParams)",6,402,"@java.lang.Override public void installPackageWithVerification(android.net.Uri packageURI, android.content.pm.IPackageInstallObserver observer, int flags, java.lang.String installerPackageName, android.net.Uri verificationURI, android.content.pm.ManifestDigest manifestDigest, android.content.pm.ContainerEncryptionParams encryptionParams) { android.content.pm.VerificationParams verificationParams = new android.content.pm.VerificationParams(verificationURI, null, null, android.content.pm.VerificationParams.NO_UID, manifestDigest); installPackageWithVerificationAndEncryption(packageURI, observer, flags, installerPackageName, verificationParams, encryptionParams); }",3c85b2f48bf783a289c6e0aa4a4ed331eb916723,"installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest,android.content.pm.ContainerEncryptionParams)",316320,146,144
340810,telecomm_java_android_telecom_Connection.java,33.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void onRttConnectionRemotelyTerminated(android.telecom.Connection c) { },99153059188a56ddbf64bdb2e32b3a639434841f,,onRttConnectionRemotelyTerminated(android.telecom.Connection),6,75,public void onRttSessionRemotelyTerminated(android.telecom.Connection c) { },e1ffabb08cfc290e307dabfc8ffd8ca6c8351477,onRttSessionRemotelyTerminated(android.telecom.Connection),393362,21,21
202082,ojluni_src_main_java_java_net_NetworkInterface.java,21.0,"public byte[] getHardwareAddress() throws java.net.SocketException { java.lang.SecurityManager sec = java.lang.System.getSecurityManager(); if (sec != null) { try { sec.checkPermission(new java.net.NetPermission(""getNetworkInformation"")); } catch (java.lang.SecurityException e) { if (!(getInetAddresses().hasMoreElements())) { return null; } } } for (java.net.InetAddress addr : addrs) { if (addr instanceof java.net.Inet4Address) { return java.net.NetworkInterface.getMacAddr0(((java.net.Inet4Address) (addr)).getAddress(), name, index); } } return java.net.NetworkInterface.getMacAddr0(null, name, index); }",638c79a77a4d8fa59d5e427dd79991218ef3e92e,public byte[] getHardwareAddress() throws java.net.SocketException { return hardwareAddr; },8ad56fb0c0ec29aab4fdeab000385976cbd8ddbc,getHardwareAddress(),getHardwareAddress(),4,21,public byte[] getHardwareAddress() throws java.net.SocketException { return (hardwareAddr) != null ? hardwareAddr.clone() : null; },0cb858c96f4a374a5365415bd43fbc3e074ec267,getHardwareAddress(),2944,20,33
22162,monkeyrunner_src_com_android_monkeyrunner_easy_EasyMonkeyDevice.java,,,,"@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = ""Sends a touch event to the selected object."", args = { ""selector"", ""type"" }, argDocs = { ""The selector identifying the object."", ""The event type as returned by TouchPressType()."" }) public void touch(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); java.lang.String selector = ap.getString(0); com.android.hierarchyviewerlib.device.ViewNode node = mHierarchyViewer.findViewById(selector); if (node == null) { throw new org.python.core.PyException(org.python.core.Py.ValueError, java.lang.String.format(""View not found: %s"", selector)); } org.eclipse.swt.graphics.Point p = com.android.monkeyrunner.easy.HierarchyViewer.getAbsoluteCenterOfView(node); org.python.core.PyObject[] otherArgs = new org.python.core.PyObject[3]; otherArgs[0] = new org.python.core.PyInteger(p.x); otherArgs[1] = new org.python.core.PyInteger(p.y); otherArgs[2] = args[1]; mDevice.touch(otherArgs, kws); }",86d9d9fb830670eef818ea345ff2054bbed4d8ce,,"touch(org.python.core.PyObject[],java.lang.String[])",5,8,"@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = ""Sends a touch event to the selected object."", args = { ""selector"", ""type"" }, argDocs = { ""The selector identifying the object."", ""The event type as returned by TouchPressType()."" }) public void touch(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); com.android.monkeyrunner.easy.By selector = getSelector(ap, 0); com.android.hierarchyviewerlib.device.ViewNode node = mHierarchyViewer.findView(selector); if (node == null) { throw new org.python.core.PyException(org.python.core.Py.ValueError, java.lang.String.format(""View not found: %s"", selector)); } org.eclipse.swt.graphics.Point p = com.android.monkeyrunner.easy.HierarchyViewer.getAbsoluteCenterOfView(node); org.python.core.PyObject[] otherArgs = new org.python.core.PyObject[3]; otherArgs[0] = new org.python.core.PyInteger(p.x); otherArgs[1] = new org.python.core.PyInteger(p.y); otherArgs[2] = args[1]; mDevice.touch(otherArgs, kws); }",a4c5a9721f72bf8823738aa5daa37c8a35f50a0f,"touch(org.python.core.PyObject[],java.lang.String[])",341431,325,332
579565,src_java_com_android_internal_telephony_RIL.java,77.0,"@java.lang.Override public void sendSMS(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendSMS"", e); } } }",5647e8a52c7d204cee7b6d680f573b2b4b1cbdc6,"@java.lang.Override public void sendSMS(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendSMS"", e); } } }",c26ab37803c18cbd78ca4eeef964de166a3bc3e5,"sendSMS(java.lang.String,java.lang.String,android.os.Message)","sendSMS(java.lang.String,java.lang.String,android.os.Message)",3,77,"@java.lang.Override public void sendSMS(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendSMS"", e); } } }",5647e8a52c7d204cee7b6d680f573b2b4b1cbdc6,"sendSMS(java.lang.String,java.lang.String,android.os.Message)",89386,301,297
279775,src_test_java_org_conscrypt_CertPinManagerTest.java,0.0,"public void testPinEntryPinFailure() throws java.lang.Exception { java.lang.String shortEntry = ""*.google.com=true|"" + (shortPin); org.conscrypt.PinListEntry e = new org.conscrypt.PinListEntry(shortEntry, new org.conscrypt.TrustedCertificateStore()); assertTrue(""Not enforcing!"", e.getEnforcing()); boolean retval = e.isChainValid(longChain); assertFalse(""Accepted an incorrect pinning, this is very bad"", retval); }",4695656d175a6a05dcca577a84bdeef55824f50b,"public void testHostnameProvided() throws java.lang.Exception { final java.lang.String expectedHostname = ""example.com""; boolean hostnameMatched = false; org.conscrypt.CertPinManager manager = new org.conscrypt.CertPinManager() { @java.lang.Override public boolean isChainValid(java.lang.String hostname, java.util.List<java.security.cert.X509Certificate> chain) { hostnameMatched = expectedHostname.equals(hostname); return true; } }; callCheckServerTrusted(null, manager); assertTrue(hostnameMatched); }",da2607c5fa7af62b6e9e057219969f40102ed991,testPinEntryPinFailure(),testHostnameProvided(),3,0,"public void testHostnameProvided() throws java.lang.Exception { final java.lang.String expectedHostname = ""example.com""; class TestCertPinManager implements org.conscrypt.CertPinManager { public boolean hostnameMatched = false; @java.lang.Override public void checkChainPinning(java.lang.String hostname, java.util.List<java.security.cert.X509Certificate> chain) throws java.security.cert.CertificateException { hostnameMatched = expectedHostname.equals(hostname); } } TestCertPinManager manager = new TestCertPinManager(); callCheckServerTrusted(expectedHostname, manager); assertTrue(manager.hostnameMatched); }",10d99006cafa79fbe7b4109348dc0d56e8955921,testHostnameProvided(),440783,124,139
186130,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,13.0,"@org.junit.Test public void retroLambdaDefaultMethodsTest006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_006).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",96cf1ca344b17b2a722f8af8b6b162498d8a40aa,"@org.junit.Test public void retroLambdaDefaultMethodsTest006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_006).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",93a360070bbda32cb81609d2d3ba18f1f0eb38f9,retroLambdaDefaultMethodsTest006(),retroLambdaDefaultMethodsTest006(),7,13,@org.junit.Test public void retroLambdaDefaultMethodsTest006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_006).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },f90071ba3ca2afb1bebe190a0ac8e9a62bd56e8f,retroLambdaDefaultMethodsTest006(),466312,90,64
654568,src_com_android_bluetooth_hdp_HealthService.java,26.0,"private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } }",1d2b055742bf1b32bdc0830ad30896e5939eb05e,"private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } if ((newDeviceState != prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEALTH); } }",b91129f7d57c82ecc32e597c121a45e780d021de,"updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)","updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)",18,26,"private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } if ((newDeviceState != prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.HEALTH); } }",7c88203f6c2024210723689467cfcce1135d0aea,"updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)",135992,128,127
310544,tests_wifitests_src_com_android_server_wifi_hotspot2_anqp_RoamingConsortiumElementTest.java,,,,@org.junit.Test public void parseBufferWithEmptyBuffer() throws java.lang.Exception { com.android.server.wifi.hotspot2.anqp.RoamingConsortiumElement element = com.android.server.wifi.hotspot2.anqp.RoamingConsortiumElement.parse(java.nio.ByteBuffer.allocate(0)); assertTrue(element.getOIs().isEmpty()); },2555287a7872550c3c9417eb9ac31788ca30b232,,parseBufferWithEmptyBuffer(),6,7,@org.junit.Test public void parseEmptyBuffer() throws java.lang.Exception { com.android.server.wifi.hotspot2.anqp.RoamingConsortiumElement element = com.android.server.wifi.hotspot2.anqp.RoamingConsortiumElement.parse(java.nio.ByteBuffer.allocate(0)); assertTrue(element.getOIs().isEmpty()); },e8c2a5073b06c26ac86df547cb4e2e651fbc7c36,parseEmptyBuffer(),48805,87,85
52293,sdklib_src_main_java_com_android_sdklib_SdkManager.java,14.0,"private void setBuildTools(@com.android.annotations.NonNull java.util.Map<com.android.sdklib.repository.FullRevision, com.android.sdklib.BuildToolInfo> buildTools) { assert buildTools != null; mBuildTools = buildTools; }",a003268ddf573c73cfd240b62acbbebf0bfa8401,"@java.lang.Deprecated private void setBuildTools(@com.android.annotations.NonNull java.util.Map<com.android.sdklib.repository.FullRevision, com.android.sdklib.BuildToolInfo> buildTools) { assert buildTools != null; mBuildTools = buildTools; }",e7d141c21e509d3b54b54863a70e597a13140115,setBuildTools(java.util.Map),setBuildTools(java.util.Map),15,0,@java.lang.Deprecated @com.android.annotations.NonNull public java.util.Set<com.android.sdklib.repository.FullRevision> getBuildTools() { com.android.sdklib.local.LocalPkgInfo[] pkgs = mLocalSdk.getPkgsInfos(LocalSdk.PKG_BUILD_TOOLS); java.util.TreeSet<com.android.sdklib.repository.FullRevision> bt = new java.util.TreeSet<com.android.sdklib.repository.FullRevision>(); for (com.android.sdklib.local.LocalPkgInfo pkg : pkgs) { if (pkg.hasFullRevision()) { bt.add(pkg.getFullRevision()); } } return java.util.Collections.unmodifiableSet(bt); },eb091c443641a7189e9cf93e719f60bb165dffba,getBuildTools(),399459,66,166
79721,graphics_java_android_graphics_Canvas.java,85.0,"private static native void copyNativeCanvasState(int srcCanvas, int dstCanvas);",1c5cd7c705b36d1da2f47b96315b39ed891c135b,"private static native void copyNativeCanvasState(long srcCanvas, long dstCanvas);",c369c3d292011bdf640c4641f1837eae608af1aa,"copyNativeCanvasState(int,int)","copyNativeCanvasState(long,long)",6,72,"private static native void copyNativeCanvasState(long nativeSrcCanvas, long nativeDstCanvas);",c7af31084b16dcf09ac3ce04b9769e30881ee9f8,"copyNativeCanvasState(long,long)",35670,17,19
623549,src_com_android_bluetooth_hfpclient_HeadsetClientService.java,45.0,"@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""Unable to unregister broadcast receiver"", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mNativeInterface = null; mSmThread.quit(); mSmThread = null; com.android.bluetooth.hfpclient.NativeInterface.cleanupNative(); return true; }",96c812b196d2ed89a3a7b5e6836c512702987c8a,"@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""Unable to unregister broadcast receiver"", e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mSmThread.quit(); mSmThread = null; if ((mNativeInterface) != null) { mNativeInterface.cleanupNative(); mNativeInterface = null; } return true; }",067c6d3f48d3d2c90f1ef12156bc315769746964,stop(),stop(),8,45,"@java.lang.Override protected synchronized boolean stop() { if ((com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService) == null) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, ""stop() called without start()""); return false; } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(null); unregisterReceiver(mBroadcastReceiver); for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mSmThread.quit(); mSmThread = null; mNativeInterface.cleanupNative(); mNativeInterface = null; return true; }",6410e745b4780c6766701938331886c07b564d71,stop(),99592,278,302
143360,services_core_java_com_android_server_wm_DimLayer.java,3.0,"void adjustSurface(int layer, boolean inTransaction) { final int dw; final int dh; final float xPos; final float yPos; if (!(mStack.isFullscreen())) { dw = mBounds.width(); dh = mBounds.height(); xPos = mBounds.left; yPos = mBounds.top; } else { final android.view.DisplayInfo info = mDisplayContent.getDisplayInfo(); dw = ((int) ((info.logicalWidth) * 1.5)); dh = ((int) ((info.logicalHeight) * 1.5)); xPos = ((-1) * dw) / 6; yPos = ((-1) * dh) / 6; } try { if (!inTransaction) { android.view.SurfaceControl.openTransaction(); } mDimSurface.setPosition(xPos, yPos); mDimSurface.setSize(dw, dh); mDimSurface.setLayer(layer); } catch (java.lang.RuntimeException e) { android.util.Slog.w(com.android.server.wm.DimLayer.TAG, ""Failure setting size or layer"", e); } finally { if (!inTransaction) { android.view.SurfaceControl.closeTransaction(); } } mLastBounds.set(mBounds); mLayer = layer; }",b06ef53c72210f5476b63cf517fb9143935d4d60,"void adjustSurface(int layer, boolean inTransaction, boolean needResize) { final int dw; final int dh; final float xPos; final float yPos; if (!(mStack.isFullscreen())) { dw = mBounds.width(); dh = mBounds.height(); xPos = mBounds.left; yPos = mBounds.top; } else { final android.view.DisplayInfo info = mDisplayContent.getDisplayInfo(); dw = ((int) ((info.logicalWidth) * 1.5)); dh = ((int) ((info.logicalHeight) * 1.5)); xPos = ((-1) * dw) / 6; yPos = ((-1) * dh) / 6; } try { if (!inTransaction) { android.view.SurfaceControl.openTransaction(); } mDimSurface.setPosition(xPos, yPos); if (needResize) { mDimSurface.setSize(dw, dh); } mDimSurface.setLayer(layer); } catch (java.lang.RuntimeException e) { android.util.Slog.w(com.android.server.wm.DimLayer.TAG, ""Failure setting size or layer"", e); } finally { if (!inTransaction) { android.view.SurfaceControl.closeTransaction(); } } mLastBounds.set(mBounds); mLayer = layer; }",0e6890fc96bf814b0df8ca5606c7dc7c121841be,"adjustSurface(int,boolean)","adjustSurface(int,boolean,boolean)",4,4,"private void adjustBounds() { final int dw; final int dh; final float xPos; final float yPos; if (!(mStack.isFullscreen())) { dw = mBounds.width(); dh = mBounds.height(); xPos = mBounds.left; yPos = mBounds.top; } else { final android.view.DisplayInfo info = mDisplayContent.getDisplayInfo(); dw = ((int) ((info.logicalWidth) * 1.5)); dh = ((int) ((info.logicalHeight) * 1.5)); xPos = ((-1) * dw) / 6; yPos = ((-1) * dh) / 6; } mDimSurface.setPosition(xPos, yPos); mDimSurface.setSize(dw, dh); mLastBounds.set(mBounds); }",cfc3b3c9d9d6c95cfd08549ce4a666c1e1e5e516,adjustBounds(),101636,297,184
94988,support_src_test_java_libcore_javax_net_ssl_TestSSLContext.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static libcore.javax.net.ssl.TestSSLContext create(libcore.java.security.TestKeyStore client, libcore.java.security.TestKeyStore server, javax.net.ssl.KeyManager[] additionalClientKeyManagers, javax.net.ssl.KeyManager[] additionalServerKeyManagers) { java.lang.String protocol = ""TLSv1.2""; javax.net.ssl.KeyManager[] clientKeyManagers = libcore.javax.net.ssl.TestSSLContext.concat(client.keyManagers, additionalClientKeyManagers); javax.net.ssl.KeyManager[] serverKeyManagers = libcore.javax.net.ssl.TestSSLContext.concat(server.keyManagers, additionalServerKeyManagers); javax.net.ssl.SSLContext clientContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext(protocol, clientKeyManagers, client.trustManagers); javax.net.ssl.SSLContext serverContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext(protocol, serverKeyManagers, server.trustManagers); return libcore.javax.net.ssl.TestSSLContext.create(client.keyStore, client.storePassword, server.keyStore, server.storePassword, clientKeyManagers, serverKeyManagers, client.trustManagers[0], server.trustManagers[0], clientContext, serverContext); }",5e43080fcf689aa00fbfd69498371d0bcc836fcc,,"create(libcore.java.security.TestKeyStore,libcore.java.security.TestKeyStore,javax.net.ssl.KeyManager[],javax.net.ssl.KeyManager[])",3,5,"public static libcore.javax.net.ssl.TestSSLContext createWithAdditionalKeyManagers(libcore.java.security.TestKeyStore client, libcore.java.security.TestKeyStore server, javax.net.ssl.KeyManager[] additionalClientKeyManagers, javax.net.ssl.KeyManager[] additionalServerKeyManagers) { java.lang.String protocol = ""TLSv1.2""; javax.net.ssl.KeyManager[] clientKeyManagers = libcore.javax.net.ssl.TestSSLContext.concat(client.keyManagers, additionalClientKeyManagers); javax.net.ssl.KeyManager[] serverKeyManagers = libcore.javax.net.ssl.TestSSLContext.concat(server.keyManagers, additionalServerKeyManagers); javax.net.ssl.SSLContext clientContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext(protocol, clientKeyManagers, client.trustManagers); javax.net.ssl.SSLContext serverContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext(protocol, serverKeyManagers, server.trustManagers); return libcore.javax.net.ssl.TestSSLContext.create(client.keyStore, client.storePassword, server.keyStore, server.storePassword, clientKeyManagers, serverKeyManagers, client.trustManagers[0], server.trustManagers[0], clientContext, serverContext); }",e79c1003766e9609f25d634bf069018f0b838ca8,"createWithAdditionalKeyManagers(libcore.java.security.TestKeyStore,libcore.java.security.TestKeyStore,javax.net.ssl.KeyManager[],javax.net.ssl.KeyManager[])",122056,297,302
44490,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_DeviceManagerPage.java,,,,@java.lang.Override public void widgetDisposed(org.eclipse.swt.events.DisposeEvent event) { for (org.eclipse.swt.graphics.Resource d : disposables) { d.dispose(); } if (disposeFont != null) { disposeFont.dispose(); } },cd5b6b114f1794b7ca1c85b2b3db7eeddf2985b0,,widgetDisposed(org.eclipse.swt.events.DisposeEvent),5,8,"@java.lang.Override public void widgetDisposed(org.eclipse.swt.events.DisposeEvent event) { disposeTableResources(table.getData(""disposeResources"")); }",fc74bc1c55978b9068a2ce08e1494d1d20ddb1d3,widgetDisposed(org.eclipse.swt.events.DisposeEvent),481163,66,37
579565,src_java_com_android_internal_telephony_RIL.java,222.0,"@java.lang.Override public void setInitialAttachApn(android.telephony.data.DataProfile dataProfile, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_INITIAL_ATTACH_APN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + dataProfile)); } try { radioProxy.setInitialAttachApn(rr.mSerial, com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile), dataProfile.isModemCognitive(), isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setInitialAttachApn"", e); } } }",09f61a44c653ee9de13c571d3037a0af8ec21ffe,"@java.lang.Override public void setInitialAttachApn(android.telephony.data.DataProfile dataProfile, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_INITIAL_ATTACH_APN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + dataProfile)); } try { radioProxy.setInitialAttachApn(rr.mSerial, com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile), dataProfile.isModemCognitive(), isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setInitialAttachApn"", e); } } }",a7a909049c865ce7ba9343d64a87384684c20ea3,"setInitialAttachApn(android.telephony.data.DataProfile,boolean,android.os.Message)","setInitialAttachApn(android.telephony.data.DataProfile,boolean,android.os.Message)",3,222,"@java.lang.Override public void setInitialAttachApn(android.telephony.data.DataProfile dataProfile, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_INITIAL_ATTACH_APN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + dataProfile)); } try { radioProxy.setInitialAttachApn(rr.mSerial, com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile), dataProfile.isModemCognitive(), isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setInitialAttachApn"", e); } } }",09f61a44c653ee9de13c571d3037a0af8ec21ffe,"setInitialAttachApn(android.telephony.data.DataProfile,boolean,android.os.Message)",89321,271,267
466677,services_core_java_com_android_server_IpSecService.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkIpSecConfigAndThrow(android.net.IpSecConfig config) { switch (config.getMode()) { case android.net.IpSecTransform.MODE_TUNNEL : case android.net.IpSecTransform.MODE_TRANSPORT : break; default : throw new java.lang.IllegalArgumentException((""Invalid IpSecTransform.mode: "" + (config.getMode()))); } checkNotNull(config.getRemoteAddress(), ""Invalid Remote InetAddress""); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : checkNotNull(mUdpSocketRecords.get(config.getEncapSocketResourceId()), ""No Encapsulation socket for specified Resource Id""); int port = config.getEncapRemotePort(); if ((port == 0) || ((port & -65536) != 0)) { throw new java.lang.IllegalArgumentException((""Invalid remote UDP port: "" + port)); } break; default : throw new java.lang.IllegalArgumentException((""Invalid Encap Type: "" + (config.getEncapType()))); } for (int direction : com.android.server.IpSecService.DIRECTIONS) { android.net.IpSecAlgorithm crypt = config.getEncryption(direction); android.net.IpSecAlgorithm auth = config.getAuthentication(direction); if ((crypt == null) && (auth == null)) { throw new java.lang.IllegalArgumentException(""Encryption and Authentication are both null""); } checkNotNull(mSpiRecords.get(config.getSpiResourceId(direction)), ""No SPI for specified Resource Id""); } }",0425960241e23fc5b4094ac8ff4bcaaaad44d47b,,checkIpSecConfigAndThrow(android.net.IpSecConfig),17,55,"private void checkIpSecConfig(android.net.IpSecConfig config) { if ((config.getLocalAddress()) == null) { throw new java.lang.IllegalArgumentException(""Invalid null Local InetAddress""); } if ((config.getRemoteAddress()) == null) { throw new java.lang.IllegalArgumentException(""Invalid null Remote InetAddress""); } switch (config.getMode()) { case android.net.IpSecTransform.MODE_TRANSPORT : if (!(config.getLocalAddress().isEmpty())) { throw new java.lang.IllegalArgumentException(""Non-empty Local Address""); } com.android.server.IpSecService.checkInetAddress(config.getRemoteAddress()); break; case android.net.IpSecTransform.MODE_TUNNEL : break; default : throw new java.lang.IllegalArgumentException((""Invalid IpSecTransform.mode: "" + (config.getMode()))); } switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : if ((mUdpSocketRecords.get(config.getEncapSocketResourceId())) == null) { throw new java.lang.IllegalStateException((""No Encapsulation socket for Resource Id: "" + (config.getEncapSocketResourceId()))); } int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw new java.lang.IllegalArgumentException((""Invalid remote UDP port: "" + port)); } break; default : throw new java.lang.IllegalArgumentException((""Invalid Encap Type: "" + (config.getEncapType()))); } for (int direction : com.android.server.IpSecService.DIRECTIONS) { android.net.IpSecAlgorithm crypt = config.getEncryption(direction); android.net.IpSecAlgorithm auth = config.getAuthentication(direction); if ((crypt == null) && (auth == null)) { throw new java.lang.IllegalArgumentException(""Encryption and Authentication are both null""); } if ((mSpiRecords.get(config.getSpiResourceId(direction))) == null) { throw new java.lang.IllegalStateException(""No SPI for specified Resource Id""); } } }",2f282d94d483aabafbc20a1f9b5757df7f17f5e6,checkIpSecConfig(android.net.IpSecConfig),176120,388,507
598075,hostsidetests_jvmti_attaching_host_src_android_jvmti_cts_JvmtiAttachingHostTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testJvmtiAgentAppExternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String pwd = device.executeShellCommand(((""run-as "" + pkg) + "" pwd"")); if (pwd == null) { throw new java.lang.RuntimeException(""pwd failed""); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw new java.lang.RuntimeException(""pwd failed""); } java.lang.String libInDataData = (android.jvmti.cts.JvmtiAttachingHostTest.AGENT.substring(0, ((android.jvmti.cts.JvmtiAttachingHostTest.AGENT.length()) - ("".so"".length())))) + ""2.so""; java.lang.String agentInDataData = installLibToDataData(device, pkg, abiName, apk, pwd, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInDataData); java.lang.String setAgentAppCmd = ((""cmd activity set-agent-app "" + pkg) + "" "") + agentInDataData; java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply != null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed running set-agent-app"", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed agent-app attaching"", e); } }); }",a7babf5ce83e01a109b1dc98e683353123eca7d3,,testJvmtiAgentAppExternal(),2,2,"public void testJvmtiAgentAppExternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String pwd = device.executeShellCommand(((""run-as "" + pkg) + "" pwd"")); if (pwd == null) { throw new java.lang.RuntimeException(""pwd failed""); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw new java.lang.RuntimeException(""pwd failed""); } java.lang.String libInDataData = (android.jvmti.cts.JvmtiAttachingHostTest.AGENT.substring(0, ((android.jvmti.cts.JvmtiAttachingHostTest.AGENT.length()) - ("".so"".length())))) + ""2.so""; java.lang.String agentInDataData = installLibToDataData(device, pkg, abiName, apk, pwd, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInDataData); java.lang.String setAgentAppCmd = ((""cmd activity set-agent-app "" + pkg) + "" "") + agentInDataData; device.executeShellCommand(setAgentAppCmd); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed running set-agent-app"", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, """"); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(""Failed agent-app attaching"", e); } }); }",36e6fb5d387d2e5c5dc66870e3af7702737b17f1,testJvmtiAgentAppExternal(),444609,449,420
113236,build-system_gradle_src_main_groovy_com_android_build_gradle_tasks_ResourceUsageAnalyzer.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void recordHtmlAttributeValue(@com.android.annotations.Nullable com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource from, @com.android.annotations.Nullable java.lang.String tagName, @com.android.annotations.Nullable java.lang.String attribute, @com.android.annotations.NonNull java.lang.String value) { if ((""href"".equals(attribute)) || (""src"".equals(attribute))) { if (!(referencedUrl(from, value))) { referencedString(value); } if (from != null) { from.addReference(getResourceFromFilePath(attribute)); } } }",110e1c7b09df3ad0160026787ce0fff31dd42d4c,,"recordHtmlAttributeValue(com.android.build.gradle.tasks.ResourceUsageAnalyzer$Resource,java.lang.String,java.lang.String,java.lang.String)",3,14,"private void recordHtmlAttributeValue(@com.android.annotations.Nullable com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource from, @com.android.annotations.Nullable java.lang.String tagName, @com.android.annotations.Nullable java.lang.String attribute, @com.android.annotations.NonNull java.lang.String value) { if ((""href"".equals(attribute)) || (""src"".equals(attribute))) { if (!(referencedUrl(from, value))) { referencedString(value); mFoundWebContent = true; } if (from != null) { from.addReference(getResourceFromFilePath(attribute)); } } }",21a1114e7ef8be847c3ca10e538123283858d441,"recordHtmlAttributeValue(com.android.build.gradle.tasks.ResourceUsageAnalyzer$Resource,java.lang.String,java.lang.String,java.lang.String)",276729,134,140
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm96Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",bb4ee5984a28d724162d3ff6bca601256c99cef6,,testAesGcm96Udp4(),9,9,"public void testAesGcm96Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",f460d4c0e6345aa17624e1096033c1b25b5ea6da,testAesGcm96Udp4(),1886,165,166
91995,luni_src_main_java_android_os_Os.java,,,,public static void remove(java.lang.String path) throws android.os.ErrnoException { Libcore.os.remove(path); },e9b8fee7934bc0f6529b81fca00bdc53d6d5329f,,remove(java.lang.String),3,41,public static void remove(java.lang.String path) throws android.system.ErrnoException { Libcore.os.remove(path); },39f4815e3178f12a7b265438ae025db0c2e35113,remove(java.lang.String),169972,32,32
90190,build-system_builder_src_main_java_com_android_builder_internal_compiler_PreDexCache.java,,,,@com.android.annotations.NonNull public com.google.common.hash.HashCode getSourceHash() { return mSourceHash; },c253379b14d5202fa5d1a70fd85a9d1488a4f88a,,getSourceHash(),5,1,@com.android.annotations.NonNull private com.google.common.hash.HashCode getSourceHash() { return mSourceHash; },d37120f6c39cb50e54efb33415ef0c4a4d20747b,getSourceHash(),515860,29,29
527235,luni_src_main_java_android_system_Os.java,114.0,"public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException { libcore.util.MutableInt internalArg = new libcore.util.MutableInt(arg.value); try { return Libcore.os.ioctlInt(fd, cmd, internalArg); } finally { arg.value = internalArg.value; } }",e083bcc4db8cecf84724174f8aef22979831e4c4,"public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException { return Libcore.os.ioctlInt(fd, cmd, arg); }",453b11b917c074458b4e8ad01e9131988a76f705,"ioctlInt(java.io.FileDescriptor,int,android.system.IoctlIntArg)","ioctlInt(java.io.FileDescriptor,int,android.system.IoctlIntArg)",13,89,"public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.Int32Ref arg) throws android.system.ErrnoException { return Libcore.os.ioctlInt(fd, cmd, arg); }",0a1224dcd0dfe4e9684d1606817b545103c8e5a5,"ioctlInt(java.io.FileDescriptor,int,android.system.Int32Ref)",15135,55,54
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void checkClzUchar() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, 0, 500); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUchar(inValue, out); verifyResultsClzUchar(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUchar: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUchar(inValue, out); verifyResultsClzUchar(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUchar: "" + (e.toString()))); } }",7d04e3ac26f03916792c87afbae534bf86210812,,checkClzUchar(),9,1,"private void checkClzUcharUchar() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.UNSIGNED_8, 1, 2200722815242108012L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_8, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUcharUchar(inValue, out); verifyResultsClzUcharUchar(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUcharUchar: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_8, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUcharUchar(inValue, out); verifyResultsClzUcharUchar(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUcharUchar: "" + (e.toString()))); } }",cce3248f7047463c9435eb5d76f3b4bbb0f93855,checkClzUcharUchar(),143451,324,314
139310,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_managed_SigningConfigAdaptor.java,,,,@com.android.annotations.Nullable @java.lang.Override public java.io.File getStoreFile() { return (signingConfig.getStoreFile()) == null ? null : new java.io.File(signingConfig.getStoreFile()); },18146ebaa0c07d16968974a5fbd5a2246d9e332f,,getStoreFile(),11,2,@com.android.annotations.Nullable @java.lang.Override @org.gradle.api.tasks.InputFile @org.gradle.api.tasks.Optional public java.io.File getStoreFile() { return (signingConfig.getStoreFile()) == null ? null : new java.io.File(signingConfig.getStoreFile()); },836db53cb3f4f5289fadb8bd163bc58de5bac888,getStoreFile(),253350,55,76
629007,src_com_android_bluetooth_btservice_AdapterService.java,163.0,"boolean stopGattProfileService() { setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }",97bac3539c85c58544fa626302e92c849927c900,"boolean stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog(""stopGattProfileService() - No profiles services to stop.""); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }",47b62da32bfbc91bd2563ea4558bed055e688457,stopGattProfileService(),stopGattProfileService(),14,163,"private void stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog(""stopGattProfileService() - No profiles services to stop.""); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); }",a6e0239a6dad39acfd0c81d121f7563bc1a2da56,stopGattProfileService(),162362,89,87
74153,gradle-import_src_main_java_com_android_tools_gradle_eclipse_GradleImport.java,70.0,"private boolean haveLocalRepository(java.lang.String vendor) { com.android.sdklib.SdkManager sdkManager = getSdkManager(); if (sdkManager != null) { com.android.sdklib.repository.local.LocalSdk localSdk = sdkManager.getLocalSdk(); com.android.sdklib.repository.local.LocalPkgInfo[] infos = localSdk.getPkgsInfos(PkgType.PKG_EXTRAS); for (com.android.sdklib.repository.local.LocalPkgInfo info : infos) { com.android.sdklib.repository.descriptors.IPkgDesc d = info.getDesc(); if ((((d.hasVendorId()) && (vendor.equals(d.getVendorId()))) && (d.hasPath())) && (""m2repository"".equals(d.getPath()))) { return true; } } } if ((mSdkLocation) != null) { java.io.File repository = new java.io.File(mSdkLocation, (((((com.android.SdkConstants.FD_EXTRAS) + (java.io.File.separator)) + vendor) + (java.io.File.separator)) + ""m2repository"")); return repository.exists(); } return false; }",47dc4e23a57492ed6784990ca0728ef9f36a70cf,"private boolean haveLocalRepository(java.lang.String vendor) { if ((getSdk()) != null) { com.android.sdklib.repository.local.LocalPkgInfo[] infos = getSdk().getPkgsInfos(PkgType.PKG_EXTRAS); for (com.android.sdklib.repository.local.LocalPkgInfo info : infos) { com.android.sdklib.repository.descriptors.IPkgDesc d = info.getDesc(); if ((((d.hasVendorId()) && (vendor.equals(d.getVendorId()))) && (d.hasPath())) && (""m2repository"".equals(d.getPath()))) { return true; } } } if ((mSdkLocation) != null) { java.io.File repository = new java.io.File(mSdkLocation, (((((FD_EXTRAS) + (java.io.File.separator)) + vendor) + (java.io.File.separator)) + ""m2repository"")); return repository.exists(); } return false; }",8b2524bd0d211c3749e00cc52de1e1b73c99e32f,haveLocalRepository(java.lang.String),haveLocalRepository(java.lang.String),3,70,"private boolean haveLocalRepository(java.lang.String vendor) { com.android.sdklib.SdkManager sdkManager = getSdkManager(); if (sdkManager != null) { com.android.sdklib.repository.local.LocalSdk localSdk = sdkManager.getLocalSdk(); com.android.sdklib.repository.local.LocalPkgInfo[] infos = localSdk.getPkgsInfos(PkgType.PKG_EXTRAS); for (com.android.sdklib.repository.local.LocalPkgInfo info : infos) { com.android.sdklib.repository.descriptors.IPkgDesc d = info.getDesc(); if ((((d.hasVendorId()) && (vendor.equals(d.getVendorId()))) && (d.hasPath())) && (""m2repository"".equals(d.getPath()))) { return true; } } } if ((mSdkLocation) != null) { java.io.File repository = new java.io.File(mSdkLocation, (((((com.android.SdkConstants.FD_EXTRAS) + (java.io.File.separator)) + vendor) + (java.io.File.separator)) + ""m2repository"")); return repository.exists(); } return false; }",47dc4e23a57492ed6784990ca0728ef9f36a70cf,haveLocalRepository(java.lang.String),505724,230,273
298417,harmony-tests_src_test_java_org_apache_harmony_tests_java_util_zip_ZipEntryTest.java,20.0,"@java.lang.Override protected void setUp() throws java.lang.Exception { final java.io.File f = java.io.File.createTempFile(""ZipEntryTest"", "".zip""); java.io.InputStream is = tests.support.resource.Support_Resources.getStream(""hyts_ZipFile.zip""); java.io.FileOutputStream fos = new java.io.FileOutputStream(f); libcore.io.Streams.copy(is, fos); is.close(); fos.close(); zfile = new java.util.zip.ZipFile(f); zentry = zfile.getEntry(""File1.txt""); orgSize = zentry.getSize(); orgCompressedSize = zentry.getCompressedSize(); orgCrc = zentry.getCrc(); orgTime = zentry.getTime(); }",62cf593c04c358e942956e0097a83a7d54d98db3,"@java.lang.Override protected void setUp() throws java.lang.Exception { setupStartTimestamp = java.lang.System.currentTimeMillis(); final java.io.File f = java.io.File.createTempFile(""ZipEntryTest"", "".zip""); java.io.InputStream is = tests.support.resource.Support_Resources.getStream(""hyts_ZipFile.zip""); java.io.FileOutputStream fos = new java.io.FileOutputStream(f); libcore.io.Streams.copy(is, fos); is.close(); fos.close(); zfile = new java.util.zip.ZipFile(f); zentry = zfile.getEntry(""File1.txt""); orgSize = zentry.getSize(); orgCompressedSize = zentry.getCompressedSize(); orgCrc = zentry.getCrc(); orgTime = zentry.getTime(); }",c21ef6ec4f81b128fea46e59bb7626b4caa72216,setUp(),setUp(),7,20,"@java.lang.Override protected void setUp() throws java.lang.Exception { final java.io.File f = java.io.File.createTempFile(""ZipEntryTest"", "".zip""); java.io.InputStream is = tests.support.resource.Support_Resources.getStream(""hyts_ZipFile.zip""); java.io.FileOutputStream fos = new java.io.FileOutputStream(f); libcore.io.Streams.copy(is, fos); is.close(); fos.close(); zfile = new java.util.zip.ZipFile(f); zentry = zfile.getEntry(""File1.txt""); orgSize = zentry.getSize(); orgCompressedSize = zentry.getCompressedSize(); orgCrc = zentry.getCrc(); orgTime = zentry.getTime(); }",62cf593c04c358e942956e0097a83a7d54d98db3,setUp(),18936,183,170
587834,src_main_java_com_android_apksig_ApkSigner.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); if ((enabled && ((mSignerConfigs) != null)) && ((mSignerConfigs.size()) > 1)) { throw new java.lang.IllegalArgumentException((""APK Signature Scheme v3 cannot be used with "" + ""multiple signers."")); } mV3SigningEnabled = enabled; return this; }",085b4bc46fb0b596a69e56cef6f15f0fb464238d,,setV3SigningEnabled(boolean),10,16,public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); mV3SigningEnabled = enabled; if (enabled) { mV3SigningExplicitlyEnabled = true; } else { mV3SigningExplicitlyDisabled = true; } return this; },83c7a25c1ad36285a4d0e9dd41d5a834fa2efe32,setV3SigningEnabled(boolean),471841,96,66
643826,telephony_java_android_telephony_mbms_vendor_MbmsDownloadServiceBase.java,0.0,"@java.lang.Override public final int registerStateCallback(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStateCallback callback, int flags) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (callback == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.DownloadStateCallback exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.FilteredDownloadStateCallback(callback, flags) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerStateCallback(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadCallbackBinderMap.remove(callback.asBinder()); mDownloadCallbackDeathRecipients.remove(callback.asBinder()); } }; mDownloadCallbackDeathRecipients.put(callback.asBinder(), deathRecipient); callback.asBinder().linkToDeath(deathRecipient, 0); mDownloadCallbackBinderMap.put(callback.asBinder(), exposedCallback); } return result; }",b37c2f06c696aee4ed004bae0865cb9df3aefa4a,"@java.lang.Override public final int registerStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.DownloadStatusListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = registerStatusListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }",630c6fdb4341b59f36e18c93d07424cf36660440,"registerStateCallback(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStateCallback,int)","registerStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)",4,7,"@java.lang.Override public final int addStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException(""Download request must not be null""); } if (listener == null) { throw new java.lang.NullPointerException(""Callback must not be null""); } android.telephony.mbms.DownloadStatusListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = addStatusListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }",c3e0f81ff62df59c8871ee3c6311863e7a578fab,"addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)",473203,354,354
158444,sdk-common_src_main_java_com_android_ide_common_res2_MergedResourceWriter.java,3.0,"@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem removedItem, @com.android.annotations.Nullable com.android.ide.common.res2.ResourceItem replacedBy) throws com.android.ide.common.res2.ConsumerException { com.android.ide.common.res2.ResourceFile.FileType removedType = removedItem.getSourceType(); com.android.ide.common.res2.ResourceFile.FileType replacedType = (replacedBy != null) ? replacedBy.getSourceType() : null; if (removedType == replacedType) { if (removedType == (ResourceFile.FileType.MULTI)) { mQualifierWithDeletedValues.add(removedItem.getQualifiers()); } else { } } else if (removedType == (ResourceFile.FileType.SINGLE)) { removeOutFile(removedItem); } else { mQualifierWithDeletedValues.add(removedItem.getQualifiers()); } }",c00d0f1a7bf2d0e08c39bd313bcc0cf01ab7d3e0,"@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem removedItem, @com.android.annotations.Nullable com.android.ide.common.res2.ResourceItem replacedBy) throws com.android.ide.common.res2.ConsumerException { com.android.ide.common.res2.ResourceFile.FileType removedType = removedItem.getSourceType(); com.android.ide.common.res2.ResourceFile.FileType replacedType = (replacedBy != null) ? replacedBy.getSourceType() : null; if (removedType == replacedType) { if (removedType == (ResourceFile.FileType.XML_VALUES)) { mQualifierWithDeletedValues.add(removedItem.getQualifiers()); } else { } } else if (removedType == (ResourceFile.FileType.SINGLE_FILE)) { removeOutFile(removedItem); } else { mQualifierWithDeletedValues.add(removedItem.getQualifiers()); } }",3b8240841f4426f7482a9e9e72e5a626b58f62eb,"removeItem(com.android.ide.common.res2.ResourceItem,com.android.ide.common.res2.ResourceItem)","removeItem(com.android.ide.common.res2.ResourceItem,com.android.ide.common.res2.ResourceItem)",8,3,"@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem removedItem, @com.android.annotations.Nullable com.android.ide.common.res2.ResourceItem replacedBy) throws com.android.ide.common.res2.ConsumerException { com.android.ide.common.res2.ResourceFile.FileType removedType = removedItem.getSourceType(); com.android.ide.common.res2.ResourceFile.FileType replacedType = (replacedBy != null) ? replacedBy.getSourceType() : null; switch (removedType) { case SINGLE_FILE : case GENERATED_FILES : if ((replacedType == (DataFile.FileType.SINGLE_FILE)) || (replacedType == (DataFile.FileType.GENERATED_FILES))) { break; } removeOutFile(removedItem); break; case XML_VALUES : mQualifierWithDeletedValues.add(removedItem.getQualifiers()); break; default : throw new java.lang.IllegalStateException(); } }",02c944b8180ed3e354f36812b1d49b0135390f84,"removeItem(com.android.ide.common.res2.ResourceItem,com.android.ide.common.res2.ResourceItem)",237684,217,231
105745,perflib_src_test_java_com_android_tools_perflib_heap_analysis_VisitorsTest.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> getStaticFields() { java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> result = com.google.common.collect.Maps.newHashMap(); result.put(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, ""foo""), object1); result.put(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, ""bar""), object2); return result; }",7df8ff9592e6ce2835558ed0a8de0d0a07a59622,,getStaticFields(),2,2,"@java.lang.Override public java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> getStaticFieldValues() { java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> result = com.google.common.collect.Maps.newHashMap(); result.put(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, ""foo""), object1); result.put(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, ""bar""), object2); return result; }",a9b55759a615c32168976e40ac793e2d4e85f6ec,getStaticFieldValues(),361250,157,158
40084,src_java_com_android_internal_telephony_uicc_IccCardProxy.java,19.0,private void processLockedState() { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } },08449c032bb5da317d99f369e373420cabf4a441,private void processLockedState() { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.uicc.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.uicc.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.uicc.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } },2637f56e198a9264fa3789e328038a45355d1ced,processLockedState(),processLockedState(),27,17,private void processLockedState() { synchronized(mLock) { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.uicc.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.uicc.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.uicc.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } } },5cf1ac5d800311d88e18a7bd3c9bb66a602edfaa,processLockedState(),174450,196,203
527795,src_java_com_android_internal_telephony_uicc_SIMRecords.java,24.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean shouldConsiderServiceStateRoaming() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configManager != null) { android.os.PersistableBundle b = configManager.getConfigForSubId(com.android.internal.telephony.SubscriptionController.getInstance().getSubIdUsingPhoneId(mParentApp.getPhoneId())); if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_SPN_DISPLAY_RULE_SHOULD_CONSIDER_SERVICE_STATE_ROAMING_BOOL))) { return true; } } return false; },080e393940a38523e66aaec744c4f6d9c7ed9341,,shouldConsiderServiceStateRoaming(),3,17,private boolean useRoamingFromServiceState() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configManager != null) { android.os.PersistableBundle b = configManager.getConfigForSubId(com.android.internal.telephony.SubscriptionController.getInstance().getSubIdUsingPhoneId(mParentApp.getPhoneId())); if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_SPN_DISPLAY_RULE_USE_ROAMING_FROM_SERVICE_STATE_BOOL))) { return true; } } return false; },6fb4bb10e257fbbcf923f4de1acdc98d86688af7,useRoamingFromServiceState(),416016,149,147
577277,core_java_android_net_NetworkCapabilities.java,67.0,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); },532ffcd3f09874add76b1929d7e736a60eb965d9,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineAllowedUids(nc); },516c11a9f4af58db5f800e6bb74411a2a5ec4267,combineCapabilities(android.net.NetworkCapabilities),combineCapabilities(android.net.NetworkCapabilities),13,67,public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineUids(nc); },9fe3fcc90adb3ef7954c3bb5cd214d7e8976bdae,combineCapabilities(android.net.NetworkCapabilities),122837,54,53
233727,jack-tests_tests_com_android_jack_optimizations_valuepropagation_ValuePropagationTests.java,,,,"@org.junit.Test public void test003() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test003""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test003/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test003/B;""; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); com.android.jack.optimizations.valuepropagation.TypeMethodsValidator aMethods = new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert(""check()V"", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, ""A.check.dalvik""))); com.android.jack.optimizations.valuepropagation.TypeMethodsValidator bMethods = new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert(""check()Ljava/lang/String;"", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, ""B.check.dalvik""))); compileAndValidateTypes(test, properties, new com.android.jack.optimizations.valuepropagation.Validators().insert(aType, aMethods).insert(bType, bMethods)); }",1265f68f4e54eabeeac8de937a691966232e57dc,,test003(),7,5,"@org.junit.Test public void test003() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test003""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test003/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test003/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test003/C;""; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""check()V"", dalvik(test, ""A.check.dalvik""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""check()Ljava/lang/String;"", dalvik(test, ""B.check.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""check()Ljava/lang/String;"", dalvik(test, ""C.check.dalvik"")))); properties = properties.with(Optimizations.FieldValuePropagation.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""check()V"", dalvik(test, ""A.check.dalvik""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""check()Ljava/lang/String;"", dalvik(test, ""B.check.e.t.i.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""check()Ljava/lang/String;"", dalvik(test, ""C.check.e.t.i.dalvik"")))); }",1e73dd9d8614d162b3af4715ad596dfd1a90520c,test003(),438858,307,497
358037,tests_acceleration_src_android_acceleration_cts_HardwareAccelerationTest.java,0.0,public void testIsHardwareAccelerated() { if ((getGlEsVersion(mActivity)) >= 2) { assertTrue(mHardwareView.isHardwareAccelerated()); assertTrue(mSoftwareView.isHardwareAccelerated()); assertTrue(mManualHardwareView.isHardwareAccelerated()); assertTrue(mManualSoftwareView.isHardwareAccelerated()); assertTrue(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertTrue(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } else { assertFalse(mHardwareView.isHardwareAccelerated()); assertFalse(mSoftwareView.isHardwareAccelerated()); assertFalse(mManualHardwareView.isHardwareAccelerated()); assertFalse(mManualSoftwareView.isHardwareAccelerated()); assertFalse(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertFalse(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } },d6250e47eaf8724bf24fd62d9e59d7046b87785c,@com.android.compatibility.common.util.PdkTest public void testIsHardwareAccelerated() { if ((getGlEsVersion(mActivity)) >= 2) { assertTrue(mHardwareView.isHardwareAccelerated()); assertTrue(mSoftwareView.isHardwareAccelerated()); assertTrue(mManualHardwareView.isHardwareAccelerated()); assertTrue(mManualSoftwareView.isHardwareAccelerated()); assertTrue(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertTrue(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } else { assertFalse(mHardwareView.isHardwareAccelerated()); assertFalse(mSoftwareView.isHardwareAccelerated()); assertFalse(mManualHardwareView.isHardwareAccelerated()); assertFalse(mManualSoftwareView.isHardwareAccelerated()); assertFalse(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertFalse(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } },0275c82bbc59bdd6613e81e3346f45853493f430,testIsHardwareAccelerated(),testIsHardwareAccelerated(),4,0,@com.android.compatibility.common.util.VendorInterfaceTest public void testIsHardwareAccelerated() { if ((getGlEsVersion(mActivity)) >= 2) { assertTrue(mHardwareView.isHardwareAccelerated()); assertTrue(mSoftwareView.isHardwareAccelerated()); assertTrue(mManualHardwareView.isHardwareAccelerated()); assertTrue(mManualSoftwareView.isHardwareAccelerated()); assertTrue(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertTrue(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } else { assertFalse(mHardwareView.isHardwareAccelerated()); assertFalse(mSoftwareView.isHardwareAccelerated()); assertFalse(mManualHardwareView.isHardwareAccelerated()); assertFalse(mManualSoftwareView.isHardwareAccelerated()); assertFalse(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertFalse(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } },e2fe8c4229974aec7b9fb23f756a3e10fd3d463a,testIsHardwareAccelerated(),226517,262,262
429505,telephony_java_android_telephony_SmsManager.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void sendTextMessageInternal(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { if (android.text.TextUtils.isEmpty(destinationAddress)) { throw new java.lang.IllegalArgumentException(""Invalid destinationAddress""); } if (android.text.TextUtils.isEmpty(text)) { throw new java.lang.IllegalArgumentException(""Invalid message body""); } try { com.android.internal.telephony.ISms iccISms = android.telephony.SmsManager.getISmsServiceOrThrow(); if (iccISms != null) { iccISms.sendTextForSubscriberWithOptions(getSubscriptionId(), android.app.ActivityThread.currentPackageName(), destinationAddress, scAddress, text, sentIntent, deliveryIntent, persistMessage, priority, isExpectMore, validityPeriod); } } catch (android.os.RemoteException ex) { } }",54c1c95982472d25855a3c68478056c9b8d206fe,,"sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)",6,30,"private void sendTextMessageInternal(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessage, int priority, boolean expectMore, int validityPeriod) { if (android.text.TextUtils.isEmpty(destinationAddress)) { throw new java.lang.IllegalArgumentException(""Invalid destinationAddress""); } if (android.text.TextUtils.isEmpty(text)) { throw new java.lang.IllegalArgumentException(""Invalid message body""); } if ((priority < 0) || (priority > 3)) { throw new java.lang.IllegalArgumentException(""Invalid priority""); } if ((validityPeriod < 5) || (validityPeriod > 635040)) { throw new java.lang.IllegalArgumentException(""Invalid validity period""); } try { com.android.internal.telephony.ISms iccISms = android.telephony.SmsManager.getISmsServiceOrThrow(); if (iccISms != null) { iccISms.sendTextForSubscriberWithOptions(getSubscriptionId(), android.app.ActivityThread.currentPackageName(), destinationAddress, scAddress, text, sentIntent, deliveryIntent, persistMessage, priority, expectMore, validityPeriod); } } catch (android.os.RemoteException ex) { } }",3b28a35506e5199d11880582db38c42441c313bb,"sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)",100451,223,280
115825,luni_src_main_java_javax_net_ssl_DefaultHostnameVerifier.java,1.0,"public boolean verifyHostName(java.lang.String hostName, java.lang.String cn) { if ((((hostName == null) || (hostName.isEmpty())) || (cn == null)) || (cn.isEmpty())) { return false; } if ((hostName.endsWith(""."")) && (!(cn.endsWith(""."")))) { cn += '.'; } cn = cn.toLowerCase(java.util.Locale.US); if (!(cn.contains(""*""))) { return hostName.equals(cn); } if (!(javax.net.ssl.DefaultHostnameVerifier.containsAtLeastTwoDomainNameLabelsExcludingRoot(cn))) { return false; } if ((cn.startsWith(""*."")) && (hostName.regionMatches(0, cn, 2, ((cn.length()) - 2)))) { return true; } int asterisk = cn.indexOf('*'); int dot = cn.indexOf('.'); if (asterisk > dot) { return false; } if (!(hostName.regionMatches(0, cn, 0, asterisk))) { return false; } int suffixLength = (cn.length()) - (asterisk + 1); int suffixStart = (hostName.length()) - suffixLength; if ((hostName.indexOf('.', asterisk)) < suffixStart) { return false; } if (!(hostName.regionMatches(suffixStart, cn, (asterisk + 1), suffixLength))) { return false; } return true; }",2207c4d5d61d1eecd50638a4fe6b7c74764f865c,"public boolean verifyHostName(java.lang.String hostName, java.lang.String pattern) { if (((((hostName == null) || (hostName.isEmpty())) || (hostName.startsWith("".""))) || (hostName.endsWith(""..""))) || (hostName.contains(""*""))) { return false; } if ((((pattern == null) || (pattern.isEmpty())) || (pattern.startsWith("".""))) || (pattern.endsWith(""..""))) { return false; } if (!(hostName.endsWith("".""))) { hostName += '.'; } if (!(pattern.endsWith("".""))) { pattern += '.'; } pattern = pattern.toLowerCase(java.util.Locale.US); if (!(pattern.startsWith(""*.""))) { return hostName.equals(pattern); } if ((hostName.length()) < (pattern.length())) { return false; } if (!(javax.net.ssl.DefaultHostnameVerifier.containsAtLeastTwoDomainNameLabelsExcludingRoot(pattern))) { return false; } java.lang.String suffix = pattern.substring(1); if (!(hostName.endsWith(suffix))) { return false; } int suffixStartIndexInHostName = (hostName.length()) - (suffix.length()); if ((hostName.lastIndexOf('.', (suffixStartIndexInHostName - 1))) != (-1)) { return false; } return true; }",1f406b6ca179d5174ba4fc08fb2ff5e010c88cb2,"verifyHostName(java.lang.String,java.lang.String)","verifyHostName(java.lang.String,java.lang.String)",4,1,"private boolean verifyHostName(java.lang.String hostName, java.lang.String cn) { if ((((hostName == null) || (hostName.isEmpty())) || (cn == null)) || (cn.isEmpty())) { return false; } if ((hostName.endsWith(""."")) && (!(cn.endsWith(""."")))) { cn += '.'; } cn = cn.toLowerCase(java.util.Locale.US); if (!(cn.contains(""*""))) { return hostName.equals(cn); } if (!(javax.net.ssl.DefaultHostnameVerifier.containsAtLeastTwoDomainNameLabelsExcludingRoot(cn))) { return false; } if ((cn.startsWith(""*."")) && (hostName.regionMatches(0, cn, 2, ((cn.length()) - 2)))) { return true; } int asterisk = cn.indexOf('*'); int dot = cn.indexOf('.'); if (asterisk > dot) { return false; } if (!(hostName.regionMatches(0, cn, 0, asterisk))) { return false; } int suffixLength = (cn.length()) - (asterisk + 1); int suffixStart = (hostName.length()) - suffixLength; if ((hostName.indexOf('.', asterisk)) < suffixStart) { return false; } if (!(hostName.regionMatches(suffixStart, cn, (asterisk + 1), suffixLength))) { return false; } return true; }",6f8e824da468f291e488c86bbfa05b99097dab5a,"verifyHostName(java.lang.String,java.lang.String)",163292,266,281
451818,tests_net_java_android_net_NetworkCapabilitiesTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testDescribeImmutableDifferences() { android.net.NetworkCapabilities nc1; android.net.NetworkCapabilities nc2; nc1 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_CELLULAR); nc2 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI); assertNotEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED); nc2 = new android.net.NetworkCapabilities(); assertEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertNotEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities(); nc2 = new android.net.NetworkCapabilities().setSpecifier(new android.net.StringNetworkSpecifier(""specifications"")); assertNotEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); }",d7eb7895732a90363b3e8e1f35c178cb2e13c09c,,testDescribeImmutableDifferences(),2,0,"@org.junit.Test public void testDescribeImmutableDifferences() { android.net.NetworkCapabilities nc1; android.net.NetworkCapabilities nc2; nc1 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_CELLULAR); nc2 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI); assertNotEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED); nc2 = new android.net.NetworkCapabilities(); assertEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertNotEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI); nc2 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI).setNetworkSpecifier(new android.net.StringNetworkSpecifier(""specs"")); assertNotEquals("""", nc1.describeImmutableDifferences(nc2)); assertEquals("""", nc1.describeImmutableDifferences(nc1)); }",051e8823c044512145070b784aaa102572cd3db8,testDescribeImmutableDifferences(),112470,429,498
91995,luni_src_main_java_libcore_io_ForwardingOs.java,76.0,"public libcore.io.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptUcred(fd, level, option); }",5268a3c3e5ce7dbcae4d746cb4ad5a14f9dec250,"public android.os.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws android.os.ErrnoException { return os.getsockoptUcred(fd, level, option); }",bc535f5683bfa243707f600e18ad4051f2064fa9,"getsockoptUcred(java.io.FileDescriptor,int,int)","getsockoptUcred(java.io.FileDescriptor,int,int)",3,74,"public android.system.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptUcred(fd, level, option); }",0ef219ed30a6acd20e7802b855f30fd41db9f183,"getsockoptUcred(java.io.FileDescriptor,int,int)",170519,52,52
99283,login_src_com_google_gct_login_ui_GoogleLoginUsersPanel.java,6.0,@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { if ((e.getValueIsAdjusting()) == false) { if ((list.getSelectedIndex()) == (-1)) { signOutButton.setEnabled(false); } else { signOutButton.setEnabled(true); com.google.gct.login.ui.UsersListItem selectedUser = ((com.google.gct.login.ui.UsersListItem) (listModel.get(list.getSelectedIndex()))); if (!(selectedUser.isActiveUser())) { com.google.gct.login.GoogleLogin.getInstance().setActiveUser(selectedUser.getUserEmail()); } } } },2799303c574df3c28fdbf73dc75e274d4e649a04,"@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { valueChanged = true; java.lang.System.out.println(""in valueChanged function""); if ((e.getValueIsAdjusting()) == false) { if ((list.getSelectedIndex()) == (-1)) { signOutButton.setEnabled(false); } else { signOutButton.setEnabled(true); com.google.gct.login.ui.UsersListItem selectedUser = ((com.google.gct.login.ui.UsersListItem) (listModel.get(list.getSelectedIndex()))); if (!(selectedUser.isActiveUser())) { com.google.gct.login.GoogleLogin.getInstance().setActiveUser(selectedUser.getUserEmail()); } } } }",e3fd2eba8e068d965eb5cf58bb2da69717663013,valueChanged(javax.swing.event.ListSelectionEvent),valueChanged(javax.swing.event.ListSelectionEvent),7,8,@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { valueChanged = true; if ((e.getValueIsAdjusting()) == false) { if ((list.getSelectedIndex()) == (-1)) { signOutButton.setEnabled(false); } else { signOutButton.setEnabled(true); com.google.gct.login.ui.UsersListItem selectedUser = ((com.google.gct.login.ui.UsersListItem) (listModel.get(list.getSelectedIndex()))); if (!(selectedUser.isActiveUser())) { com.google.gct.login.GoogleLogin.getInstance().setActiveUser(selectedUser.getUserEmail()); } } } },e83bcdbf4ebb4e19441d448c1b1d6a14832aa9da,valueChanged(javax.swing.event.ListSelectionEvent),18942,165,150
116423,src_com_android_services_telephony_TelephonyConference.java,,,,protected android.telecom.Connection getOriginalConnection(android.telecom.Connection connection) { if (connection instanceof com.android.services.telephony.TelephonyConnection) { return ((com.android.services.telephony.TelephonyConnection) (connection)).getOriginalConnection(); } else { return null; } },fed3fc97f8dd1af81ec8452ce791d33201970ebb,,getOriginalConnection(android.telecom.Connection),2,7,private android.telecom.Connection getOriginalConnection(android.telecom.Connection connection) { if (connection instanceof com.android.services.telephony.TelephonyConnection) { return ((com.android.services.telephony.TelephonyConnection) (connection)).getOriginalConnection(); } else { return null; } },3bfaacd2811742ff5e08bb5fefcbb338f588af10,getOriginalConnection(android.telecom.Connection),463662,73,73
329624,tests_telephonytests_src_android_telephony_ims_ImsServiceTest.java,,,,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testRemoveMMTelFeature() throws android.os.RemoteException { mTestImsServiceBinder.createImsFeature(android.telephony.ims.ImsServiceTest.TEST_SLOT_0, ImsFeature.MMTEL); mTestImsServiceBinder.removeImsFeature(android.telephony.ims.ImsServiceTest.TEST_SLOT_0, ImsFeature.MMTEL); verify(mTestImsService.mMockMMTelFeature).onFeatureRemoved(); android.util.SparseArray<android.telephony.ims.feature.ImsFeature> features = mTestImsService.getImsFeatureMap(android.telephony.ims.ImsServiceTest.TEST_SLOT_0); junit.framework.Assert.assertNull(mTestImsService.getImsFeatureFromType(features, ImsFeature.MMTEL)); }",fd0c1e27e158f00608b661edc5cdd0774506eadb,,testRemoveMMTelFeature(),8,2,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testRemoveMMTelFeature() throws android.os.RemoteException { mTestImsServiceBinder.createImsFeature(android.telephony.ims.ImsServiceTest.TEST_SLOT_0, ImsFeature.MMTEL, mTestCallback); mTestImsServiceBinder.removeImsFeature(android.telephony.ims.ImsServiceTest.TEST_SLOT_0, ImsFeature.MMTEL); verify(mTestImsService.mMockMMTelFeature).notifyFeatureRemoved(eq(0)); verify(mTestImsService.mMockMMTelFeature).setImsFeatureStatusCallback(null); android.util.SparseArray<android.telephony.ims.feature.ImsFeature> features = mTestImsService.getImsFeatureMap(android.telephony.ims.ImsServiceTest.TEST_SLOT_0); junit.framework.Assert.assertNull(mTestImsService.getImsFeatureFromType(features, ImsFeature.MMTEL)); }",08d51acf9e0aedefd67689d37bae83c61a190a0b,testRemoveMMTelFeature(),382692,210,239
332203,telecomm_java_android_telecom_Call.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.io.OutputStreamWriter getTransmitStream() { return mTransmitStream; },54969a5ae8e982a61175e0166c33c0650b6b5a68,,getTransmitStream(),7,85,public int getRttAudioMode() { return mRttMode; },55094a6968c3615d7e5d34ca66f5977d5ccfe73b,getRttAudioMode(),223676,18,16
252478,java_tests_RsTest_src_com_android_rs_test_UT_primitives.java,0.0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_primitives s = new com.android.rs.test.ScriptC_primitives(pRS); pRS.setMessageHandler(mRsMessage); if (!(initializeGlobals(s))) { failTest(); } else { s.invoke_primitives_test(0, 0); pRS.finish(); waitForMessage(); } pRS.destroy(); }",6f5f94b5c80e7748b9b131bdb20516365a6f9233,"public void run() { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); com.android.rs.test.ScriptC_primitives s = new com.android.rs.test.ScriptC_primitives(pRS); pRS.setMessageHandler(mRsMessage); if (!(initializeGlobals(s))) { failTest(); } else { s.invoke_primitives_test(0, 0); pRS.finish(); waitForMessage(); } pRS.destroy(); }",011e722116c751bf5f9a0b39104468d584809e98,run(),run(),7,0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_primitives s = new com.android.rs.test.ScriptC_primitives(pRS); pRS.setMessageHandler(mRsMessage); if (!(initializeGlobals(s))) { failTest(); } else { s.invoke_primitives_test(0, 0); pRS.finish(); waitForMessage(); } pRS.destroy(); }",6f5f94b5c80e7748b9b131bdb20516365a6f9233,run(),379379,114,120
53694,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLRSAKeyFactory.java,1.0,"@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec instanceof java.security.spec.RSAPrivateCrtKeySpec) { java.security.spec.RSAPrivateCrtKeySpec rsaKeySpec = ((java.security.spec.RSAPrivateCrtKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.RSAPrivateKeySpec) { java.security.spec.RSAPrivateKeySpec rsaKeySpec = ((java.security.spec.RSAPrivateKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { java.security.spec.PKCS8EncodedKeySpec pkcs8KeySpec = ((java.security.spec.PKCS8EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded())); return org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey.getInstance(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException((""Must use RSAPublicKeySpec or PKCS8EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",8ea6685527c9c1906ab152aa4850106417997a70,"@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException(""keySpec == null""); } if (keySpec instanceof java.security.spec.RSAPrivateCrtKeySpec) { java.security.spec.RSAPrivateCrtKeySpec rsaKeySpec = ((java.security.spec.RSAPrivateCrtKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.RSAPrivateKeySpec) { java.security.spec.RSAPrivateKeySpec rsaKeySpec = ((java.security.spec.RSAPrivateKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { java.security.spec.PKCS8EncodedKeySpec pkcs8KeySpec = ((java.security.spec.PKCS8EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded())); return org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey.getInstance(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException((""Must use RSAPublicKeySpec or PKCS8EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",8736b8c7b663865c6f6f0cbbf900ccaba46de448,engineGeneratePrivate(java.security.spec.KeySpec),engineGeneratePrivate(java.security.spec.KeySpec),3,1,"@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException(""keySpec == null""); } if (keySpec instanceof java.security.spec.RSAPrivateCrtKeySpec) { return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey(((java.security.spec.RSAPrivateCrtKeySpec) (keySpec))); } else if (keySpec instanceof java.security.spec.RSAPrivateKeySpec) { return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey(((java.security.spec.RSAPrivateKeySpec) (keySpec))); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { return org.apache.harmony.xnet.provider.jsse.OpenSSLKey.getPrivateKey(((java.security.spec.PKCS8EncodedKeySpec) (keySpec)), NativeCrypto.EVP_PKEY_RSA); } throw new java.security.spec.InvalidKeySpecException((""Must use RSAPublicKeySpec or PKCS8EncodedKeySpec; was "" + (keySpec.getClass().getName()))); }",942caec0b98f0d461a4c6b29be84624d22d4eed4,engineGeneratePrivate(java.security.spec.KeySpec),30515,421,273
325281,services_net_java_android_net_ip_IpManager.java,59.0,"private void startStateMachineUpdaters() { try { mNwService.registerObserver(mNetlinkTracker); } catch (android.os.RemoteException e) { android.util.Log.e(mTag, (""Couldn't register NetlinkTracker: "" + (e.toString()))); } mAvoidBadWifiTracker.start(); }",84e27e6634855d3a24b52fce228401411bfc8be9,"private void startStateMachineUpdaters() { try { mNwService.registerObserver(mNetlinkTracker); } catch (android.os.RemoteException e) { android.util.Log.e(mTag, (""Couldn't register NetlinkTracker: "" + (e.toString()))); } mHandoverPolicyTracker.start(); }",8b0dac46fd04bfc10f6c8133b50842dd38851b3d,startStateMachineUpdaters(),startStateMachineUpdaters(),5,59,"private void startStateMachineUpdaters() { try { mNwService.registerObserver(mNetlinkTracker); } catch (android.os.RemoteException e) { android.util.Log.e(mTag, (""Couldn't register NetlinkTracker: "" + (e.toString()))); } mMultinetworkPolicyTracker.start(); }",4ec2b75f144f8224120955a0c7a831d62bfdbf35,startStateMachineUpdaters(),484952,72,72
555560,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,10.0,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }",fe59d10157228c214ec1422118decbe16756a095,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }",e277f83c5810540fe8ece20616cf93455935d895,testAesCbcHmacSha512Udp6(),testAesCbcHmacSha512Udp6(),9,12,"public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1); }",9875e986535872893a23c2cf63fd02b0cecbd5f6,testAesCbcHmacSha512Udp6(),439628,152,153
162651,ddmlib_src_main_java_com_android_ddmlib_Device.java,8.0,"@java.lang.Override public com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.SyncService syncService = new com.android.ddmlib.SyncService(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this); if (syncService.openSync()) { return syncService; } return null; }",064804dcb0479c517b53a36199522bfcea6727b2,"@java.lang.Override public com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException { com.android.ddmlib.SyncService syncService = new com.android.ddmlib.SyncService(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this); if (syncService.openSync()) { return syncService; } return null; }",36a8779b6bd147151a340a2999ebec4060cc9309,getSyncService(),getSyncService(),4,8,"@java.lang.Override public com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.SyncService syncService = new com.android.ddmlib.SyncService(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this); if (syncService.openSync()) { return syncService; } return null; }",064804dcb0479c517b53a36199522bfcea6727b2,getSyncService(),353109,119,112
142188,sdk-common_src_test_java_com_android_ide_common_blame_parser_SourceFragmentPositionRangeJsonTest.java,3.0,"public void testSimpleDeserialize() { java.lang.String json2 = ""{\""startLine\"":245}""; com.android.ide.common.blame.SourceFragmentPositionRange range2 = gsonDeserializer.fromJson(json2, com.android.ide.common.blame.SourceFragmentPositionRange.class); assertEquals(new com.android.ide.common.blame.SourceFragmentPositionRange(245, (-1), (-1)), range2); }",8cb601793bd5159e0c14cfe603fed8654c128b13,"public void testSimpleDeserialize() { java.lang.String json2 = ""{\""startLine\"":245}""; com.android.ide.common.blame.SourcePositionRange range2 = gsonDeserializer.fromJson(json2, com.android.ide.common.blame.SourcePositionRange.class); assertEquals(new com.android.ide.common.blame.SourcePositionRange(245, (-1), (-1)), range2); }",2fe8c2458237ef9bfb6c3095be1a804df80be2a9,testSimpleDeserialize(),testSimpleDeserialize(),4,2,"public void testSimpleDeserialize() { java.lang.String json2 = ""{\""startLine\"":245}""; com.android.ide.common.blame.SourceFragmentPositionRange range2 = gsonDeserializer.fromJson(json2, com.android.ide.common.blame.SourceFragmentPositionRange.class); assertEquals(new com.android.ide.common.blame.SourceFragmentPositionRange(245, (-1), (-1)), range2); }",8cb601793bd5159e0c14cfe603fed8654c128b13,testSimpleDeserialize(),8038,91,94
586959,src_java_com_android_internal_telephony_euicc_EuiccCardController.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void getRat(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetRatCallback callback) { checkCallingPackage(callingPackage); }",8ca70cdb4f702451b378a6a89be32239a323d059,,"getRat(java.lang.String,com.android.internal.telephony.euicc.IGetRatCallback)",3,3,"@java.lang.Override public void getRulesAuthTable(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetRulesAuthTableCallback callback) { checkCallingPackage(callingPackage); }",9021a77102925c5cc816ae22b2947cd2aa1a01dd,"getRulesAuthTable(java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)",217544,48,50
269312,service_java_com_android_server_wifi_WifiNetworkSelector.java,,,,"private boolean isCurrentNetworkQualified(android.net.wifi.WifiConfiguration network) { if (network == null) { localLog(""No current connected network.""); return false; } else { localLog((((""Current connected network: "" + (network.SSID)) + "" , ID: "") + (network.networkId))); } if (network.ephemeral) { localLog(""Current network is an ephemeral one.""); return false; } if (com.android.server.wifi.WifiConfigurationUtil.isConfigForOpenNetwork(network)) { localLog(""Current network is a open one.""); return false; } if (mWifiInfo.is24GHz()) { localLog(""Current network is 2.4GHz.""); return false; } int currentRssi = mWifiInfo.getRssi(); if (((mWifiInfo.is24GHz()) && (currentRssi < (mThresholdQualifiedRssi24))) || ((mWifiInfo.is5GHz()) && (currentRssi < (mThresholdQualifiedRssi5)))) { localLog(((((""Current network band="" + (mWifiInfo.is24GHz() ? ""2.4GHz"" : ""5GHz"")) + "", RSSI["") + currentRssi) + ""]-acceptable but not qualified."")); return false; } return true; }",73b754bb57996503a0026f6c75b1891b6ed60606,,isCurrentNetworkQualified(android.net.wifi.WifiConfiguration),13,4,"private boolean isCurrentNetworkSufficient(android.net.wifi.WifiConfiguration network) { if (network == null) { localLog(""No current connected network.""); return false; } else { localLog((((""Current connected network: "" + (network.SSID)) + "" , ID: "") + (network.networkId))); } if (network.ephemeral) { localLog(""Current network is an ephemeral one.""); return false; } if (com.android.server.wifi.WifiConfigurationUtil.isConfigForOpenNetwork(network)) { localLog(""Current network is a open one.""); return false; } if (mWifiInfo.is24GHz()) { localLog(""Current network is 2.4GHz.""); return false; } int currentRssi = mWifiInfo.getRssi(); if ((mWifiInfo.is5GHz()) && (currentRssi < (mThresholdQualifiedRssi5))) { localLog(((((""Current network band="" + (mWifiInfo.is5GHz() ? ""5GHz"" : ""2.4GHz"")) + "", RSSI["") + currentRssi) + ""]-acceptable but not qualified."")); return false; } return true; }",d25335f801d39088698f60fa66282282b68c8737,isCurrentNetworkSufficient(android.net.wifi.WifiConfiguration),347350,288,263
209091,src_com_android_bluetooth_gatt_GattService.java,147.0,"void registerForNotification(int clientIf, java.lang.String address, int srvcType, int srvcInstanceId, java.util.UUID srvcUuid, int charInstanceId, java.util.UUID charUuid, boolean enable) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((isRestrictedCharUuid(charUuid)) || (isRestrictedSrvcUuid(srvcUuid))) { enforcePrivilegedPermission(); } if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, (((""registerForNotification() - address="" + address) + "" enable: "") + enable)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) { gattClientRegisterForNotificationsNative(clientIf, address, srvcType, srvcInstanceId, srvcUuid.getLeastSignificantBits(), srvcUuid.getMostSignificantBits(), charInstanceId, charUuid.getLeastSignificantBits(), charUuid.getMostSignificantBits(), enable); } else { android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, ((""registerForNotification() - No connection for "" + address) + ""..."")); } }",595faebbbfa2fd57b58a7b13b1fd4a30bfe98c56,"void registerForNotification(int clientIf, java.lang.String address, int handle, boolean enable) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, (((""registerForNotification() - address="" + address) + "" enable: "") + enable)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) { gattClientRegisterForNotificationsNative(clientIf, address, handle, enable); } else { android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, ((""registerForNotification() - No connection for "" + address) + ""..."")); } }",e58d7083106eff5662b3ecc43bafb85e3ab899ae,"registerForNotification(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,boolean)","registerForNotification(int,java.lang.String,int,boolean)",5,57,"void registerForNotification(int clientIf, java.lang.String address, int handle, boolean enable) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, (((""registerForNotification() - address="" + address) + "" enable: "") + enable)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) { android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, ((""registerForNotification() - No connection for "" + address) + ""..."")); return; } if (!(permissionCheck(connId, handle))) { if (com.android.bluetooth.gatt.GattService.VDBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ""writeDescriptor() - permission check failed!""); return; } gattClientRegisterForNotificationsNative(clientIf, address, handle, enable); }",d839e01ce3957ba74b1cca42c58eb0f676886216,"registerForNotification(int,java.lang.String,int,boolean)",291592,209,273
49466,lint_cli_src_test_java_com_android_tools_lint_checks_AbstractCheckTest.java,13.0,"private java.io.File getRootDir() { java.security.CodeSource source = getClass().getProtectionDomain().getCodeSource(); if (source != null) { java.net.URL location = source.getLocation(); try { java.io.File dir = new java.io.File(location.toURI()); assertTrue(dir.getPath(), dir.exists()); while (dir != null) { java.io.File settingsGradle = new java.io.File(dir, ""settings.gradle""); if (settingsGradle.exists()) { return dir.getParentFile().getParentFile(); } java.io.File lint = new java.io.File(dir, ""lint""); if ((lint.exists()) && (new java.io.File(lint, ""cli"").exists())) { return dir.getParentFile().getParentFile(); } dir = dir.getParentFile(); } return null; } catch (java.net.URISyntaxException e) { fail(e.getLocalizedMessage()); } } return null; }",3df80d91490bb10f338ca539b5ea1169a000cdc9,"private java.io.File getRootDir() { java.security.CodeSource source = getClass().getProtectionDomain().getCodeSource(); if (source != null) { java.net.URL location = source.getLocation(); try { java.io.File dir = new java.io.File(location.toURI()); assertTrue(dir.getPath(), dir.exists()); while (dir != null) { java.io.File settingsGradle = new java.io.File(dir, ""settings.gradle""); if (settingsGradle.exists()) { return dir.getParentFile().getParentFile(); } java.io.File lint = new java.io.File(dir, ""lint""); if ((lint.exists()) && (new java.io.File(lint, ""cli"").exists())) { return dir.getParentFile().getParentFile(); } if (dir.getName().equals(""tools"")) { java.io.File base = new java.io.File(dir, ""base""); if (base.exists()) { return dir.getParentFile(); } } dir = dir.getParentFile(); } return null; } catch (java.net.URISyntaxException e) { fail(e.getLocalizedMessage()); } } return null; }",421f0ac21a5027699849123a57b55aee243859fe,getRootDir(),getRootDir(),4,13,"private java.io.File getRootDir() { java.security.CodeSource source = getClass().getProtectionDomain().getCodeSource(); if (source != null) { java.net.URL location = source.getLocation(); try { java.io.File dir = new java.io.File(location.toURI()); assertTrue(dir.getPath(), dir.exists()); while (dir != null) { java.io.File settingsGradle = new java.io.File(dir, ""settings.gradle""); if (settingsGradle.exists()) { return dir.getParentFile().getParentFile(); } java.io.File lint = new java.io.File(dir, ""lint""); if ((lint.exists()) && (new java.io.File(lint, ""cli"").exists())) { return dir.getParentFile().getParentFile(); } dir = dir.getParentFile(); } return null; } catch (java.net.URISyntaxException e) { fail(e.getLocalizedMessage()); } } return null; }",3df80d91490bb10f338ca539b5ea1169a000cdc9,getRootDir(),141040,253,209
319845,service_java_com_android_server_wifi_RecommendedNetworkEvaluator.java,2.0,@java.lang.Override public java.lang.String getName() { return com.android.server.wifi.RecommendedNetworkEvaluator.TAG; },7fb4250baca1b8c1fc36139cfabcb3ac97eb3303,@java.lang.Override public java.lang.String getName() { return mNetworkRecommendationsEnabled ? com.android.server.wifi.RecommendedNetworkEvaluator.TAG : mExternalScoreEvaluator.getName(); },d5c146311a8ac5276c530573d7cad7612cdbbb91,getName(),getName(),4,3,"@java.lang.Override public java.lang.String getName() { if (mNetworkRecommendationsEnabled) { return com.android.server.wifi.RecommendedNetworkEvaluator.TAG; } return ((com.android.server.wifi.RecommendedNetworkEvaluator.TAG) + ""-"") + (mExternalScoreEvaluator.getName()); }",9b0a011aa9e2e72083dbff024a2be32378d844c8,getName(),142178,46,71
307447,hostsidetests_devicepolicy_src_com_android_cts_devicepolicy_MixedProfileOwnerTest.java,0.0,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { mUserId = mPrimaryUserId; installAppAsUser(com.android.cts.devicepolicy.DEVICE_ADMIN_APK, mUserId); setProfileOwnerOrFail((((DEVICE_ADMIN_PKG) + ""/"") + (ADMIN_RECEIVER_TEST_CLASS)), mUserId); } }",4557e331ed66eed68083a015e58c3e5f875bceb6,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { mUserId = mPrimaryUserId; try { installAppAsUser(com.android.cts.devicepolicy.DEVICE_ADMIN_APK, mUserId); setProfileOwnerOrFail((((DEVICE_ADMIN_PKG) + ""/"") + (ADMIN_RECEIVER_TEST_CLASS)), mUserId); } catch (java.lang.Throwable throwable) { getDevice().uninstallPackage(com.android.cts.devicepolicy.DEVICE_ADMIN_PKG); throw throwable; } } }",da40629e1c6209974476ec8276ee1ffa538b159c,setUp(),setUp(),2,0,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { mUserId = mPrimaryUserId; installAppAsUser(com.android.cts.devicepolicy.DEVICE_ADMIN_APK, mUserId); if (!(setProfileOwner((((DEVICE_ADMIN_PKG) + ""/"") + (ADMIN_RECEIVER_TEST_CLASS)), mUserId, false))) { removeAdmin((((DEVICE_ADMIN_PKG) + ""/"") + (ADMIN_RECEIVER_TEST_CLASS)), mUserId); getDevice().uninstallPackage(com.android.cts.devicepolicy.DEVICE_ADMIN_PKG); fail(""Failed to set profile owner""); } } }",7ba647a7abcc420c03d70acd4e8fc4c6c2e84453,setUp(),217639,135,159
300257,dalvik_src_main_java_dalvik_system_EmulatedStackFrame.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void putNextShort(short value) { checkType(short.class); (argumentIdx)++; frameBuf.putInt(((short) (value))); },d26d3babc5d012e1bb5106442521585d3603fe17,,putNextShort(short),5,14,public void putNextShort(short value) { checkType(short.class); (argumentIdx)++; frameBuf.putInt(((int) (value))); },2b818cf38d40ed725b7cc9561168a0dc9860c333,putNextShort(short),124817,33,33
599176,telephony_java_android_telephony_NetworkRegistrationState.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mMaxDataCalls); }",e32172ce531b8b8e4ad5bd71417b35ecbf864c34,,"writeToParcel(android.os.Parcel,int)",10,10,public android.telephony.CellIdentity getCellIdentity() { return mCellIdentity; },612dfc2af11d65ace5d041291403553343c4196b,getCellIdentity(),445209,25,18
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_CountModifierDebuggee.java,,,,"private void startThread() { ++(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount); java.lang.System.out.println((""CountModifierDebuggee.startThread: threadRunCount="" + (org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount))); java.lang.Thread t = new java.lang.Thread((""TestThread-"" + (org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount))); t.start(); try { t.join(); } catch (java.lang.InterruptedException e) { e.printStackTrace(); } }",9553b971d9878d23a106121e9cc5e4c100fa51da,,startThread(),3,1,"void runThread() { ++(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount); java.lang.System.out.println((""CountModifierDebuggee.startThread: threadRunCount="" + (org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount))); java.lang.Thread t = new java.lang.Thread((""TestThread-"" + (org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount))); t.start(); try { t.join(); } catch (java.lang.InterruptedException e) { e.printStackTrace(); } }",9da05303d68c34814c7408390ef51cbe93daf0ba,runThread(),127333,170,169
91995,luni_src_main_java_libcore_io_ForwardingOs.java,102.0,"public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws java.net.SocketException, libcore.io.ErrnoException { return os.sendto(fd, bytes, byteOffset, byteCount, flags, inetAddress, port); }",e7b95811658352f82eb4b90b124e5dd097eb7dca,"public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws android.os.ErrnoException, java.net.SocketException { return os.sendto(fd, bytes, byteOffset, byteCount, flags, inetAddress, port); }",da13a90fb7211d6d058b8a3e747dfcc7c2e92ce4,"sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)","sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)",3,102,"public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws android.system.ErrnoException, java.net.SocketException { return os.sendto(fd, bytes, byteOffset, byteCount, flags, inetAddress, port); }",4da7583163039b763063102a95312a2aef796f7d,"sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)",170441,78,78
434739,telephony_java_android_telephony_TelephonyManager.java,8.0,public java.lang.String[] getIsimImpu() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpu(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } },5258668d571ed85e6e21698b2c5d11054f7d3399,public java.lang.String[] getIsimImpu() { return getIsimImpu(getSubId()); },9d77ae7258c1c283a61d775954106f052812dd3c,getIsimImpu(),getIsimImpu(),2,8,public java.lang.String[] getIsimImpu() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpu(getSubId()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } },ef863b6f9531c74749e6e346e9436ec92cf8116e,getIsimImpu(),427231,25,85
162651,ddmlib_src_main_java_com_android_ddmlib_IDevice.java,34.0,"com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",fd438325061281d9f8cf35dc993ed679b1bdc300,"com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException;",ef8e234b1bd8feab19a125d3fb807375d425f41a,"getScreenshot(long,java.util.concurrent.TimeUnit)","getScreenshot(long,java.util.concurrent.TimeUnit)",4,34,"com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",fd438325061281d9f8cf35dc993ed679b1bdc300,"getScreenshot(long,java.util.concurrent.TimeUnit)",352913,63,56
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,36.0,"public void addI8(android.support.v8.renderscript.Byte2 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addI8(new android.renderscript.Byte2(v.x, v.y)); return; } addI8(v.x); addI8(v.y); }",78b95611fd5e91866c14f0bb6412132da4261e9a,"public void addI8(android.support.v8.renderscript.Byte2 v) { if (shouldThunk()) { mN.addI8(new android.renderscript.Byte2(v.x, v.y)); return; } addI8(v.x); addI8(v.y); }",414eb32c11c66d5011ebcbd651aaaa64a45ee099,addI8(android.support.v8.renderscript.Byte2),addI8(android.support.v8.renderscript.Byte2),5,35,"public void addI8(android.support.v8.renderscript.Byte2 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addI8(new android.renderscript.Byte2(v.x, v.y)); return; } addI8(v.x); addI8(v.y); }",78b95611fd5e91866c14f0bb6412132da4261e9a,addI8(android.support.v8.renderscript.Byte2),205184,73,86
42594,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_PackagesPage.java,14.0,"private void syncViewerSelection() { org.eclipse.jface.viewers.ITreeContentProvider provider = ((org.eclipse.jface.viewers.ITreeContentProvider) (mTreeViewer.getContentProvider())); java.lang.Object input = mTreeViewer.getInput(); if (input == null) { return; } for (java.lang.Object cat : provider.getElements(input)) { java.lang.Object[] children = provider.getElements(cat); boolean allChecked = (children.length) > 0; for (java.lang.Object child : children) { if (child instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { com.android.sdkuilib.internal.repository.core.PkgItem item = ((com.android.sdkuilib.internal.repository.core.PkgItem) (child)); boolean checked = item.isChecked(); allChecked &= checked; if (checked != (mTreeViewer.getChecked(item))) { if (checked) { if (!(mTreeViewer.getExpandedState(cat))) { mTreeViewer.setExpandedState(cat, true); } } checkAndExpandItem(item, checked, true, false); } } } if (allChecked != (mTreeViewer.getChecked(cat))) { mTreeViewer.setChecked(cat, allChecked); } } }",9ccfa02729cf15c328ca93a12a6a19e6235da102,"private void syncViewerSelection() { org.eclipse.jface.viewers.ITreeContentProvider provider = ((org.eclipse.jface.viewers.ITreeContentProvider) (mImpl.mTreeViewer.getContentProvider())); java.lang.Object input = mImpl.mTreeViewer.getInput(); if (input == null) { return; } for (java.lang.Object cat : provider.getElements(input)) { java.lang.Object[] children = provider.getElements(cat); boolean allChecked = (children.length) > 0; for (java.lang.Object child : children) { if (child instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { com.android.sdkuilib.internal.repository.core.PkgItem item = ((com.android.sdkuilib.internal.repository.core.PkgItem) (child)); boolean checked = item.isChecked(); allChecked &= checked; if (checked != (mImpl.mTreeViewer.getChecked(item))) { if (checked) { if (!(mImpl.mTreeViewer.getExpandedState(cat))) { mImpl.mTreeViewer.setExpandedState(cat, true); } } checkAndExpandItem(item, checked, true, false); } } } if (allChecked != (mImpl.mTreeViewer.getChecked(cat))) { mImpl.mTreeViewer.setChecked(cat, allChecked); } } }",8cf03eb7799c47024d3e929f15d1eff24bc6538a,syncViewerSelection(),syncViewerSelection(),8,9,"private void syncViewerSelection() { org.eclipse.jface.viewers.ITreeContentProvider provider = ((org.eclipse.jface.viewers.ITreeContentProvider) (mTreeViewer.getContentProvider())); java.lang.Object input = mTreeViewer.getInput(); if (input == null) { return; } for (java.lang.Object cat : provider.getElements(input)) { java.lang.Object[] children = provider.getElements(cat); boolean allChecked = (children.length) > 0; for (java.lang.Object child : children) { if (child instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { com.android.sdkuilib.internal.repository.core.PkgItem item = ((com.android.sdkuilib.internal.repository.core.PkgItem) (child)); boolean checked = item.isChecked(); allChecked &= checked; if (checked != (mTreeViewer.getChecked(item))) { if (checked) { if (!(mTreeViewer.getExpandedState(cat))) { mTreeViewer.setExpandedState(cat, true); } } checkAndExpandItem(item, checked, true, false); } } } if (allChecked != (mTreeViewer.getChecked(cat))) { mTreeViewer.setChecked(cat, allChecked); } } }",9ccfa02729cf15c328ca93a12a6a19e6235da102,syncViewerSelection(),195244,313,292
276040,tests_wifitests_src_com_android_server_wifi_ExternalScoreEvaluatorTest.java,,,,"@org.junit.Test public void chooseSavedNetworkWithExternalScore() { java.lang.String[] ssids = new java.lang.String[]{ ""\""test1\"""" }; java.lang.String[] bssids = new java.lang.String[]{ ""6c:f3:7f:ae:8c:f3"" }; int[] freqs = new int[]{ 5200 }; java.lang.String[] caps = new java.lang.String[]{ ""[WPA2-EAP-CCMP][ESS]"" }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; java.lang.Integer[] scores = new java.lang.Integer[]{ 120 }; boolean[] meteredHints = new boolean[]{ false }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration[] savedConfigs = scanDetailsAndConfigs.getWifiConfigs(); savedConfigs[0].useExternalScores = true; com.android.server.wifi.WifiNetworkSelectorTestUtil.configureScoreCache(mScoreCache, scanDetails, scores, meteredHints); android.net.wifi.WifiConfiguration candidate = mExternalScoreEvaluator.evaluateNetworks(scanDetails, null, null, false, true, mScoreCache, null); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqual(savedConfigs[0], candidate); com.android.server.wifi.WifiNetworkSelectorTestUtil.verifySelectedScanResult(mWifiConfigManager, scanDetails.get(0).getScanResult(), candidate); }",a88f057975c7bff6bbee929714aa28ebae02e78a,,chooseSavedNetworkWithExternalScore(),11,12,"@org.junit.Test public void chooseSavedNetworkWithExternalScore() { java.lang.String[] ssids = new java.lang.String[]{ ""\""test1\"""" }; java.lang.String[] bssids = new java.lang.String[]{ ""6c:f3:7f:ae:8c:f3"" }; int[] freqs = new int[]{ 5200 }; java.lang.String[] caps = new java.lang.String[]{ ""[WPA2-EAP-CCMP][ESS]"" }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; java.lang.Integer[] scores = new java.lang.Integer[]{ 120 }; boolean[] meteredHints = new boolean[]{ false }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration[] savedConfigs = scanDetailsAndConfigs.getWifiConfigs(); savedConfigs[0].useExternalScores = true; com.android.server.wifi.WifiNetworkSelectorTestUtil.configureScoreCache(mScoreCache, scanDetails, scores, meteredHints); android.net.wifi.WifiConfiguration candidate = mExternalScoreEvaluator.evaluateNetworks(scanDetails, null, null, false, true, null); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqual(savedConfigs[0], candidate); com.android.server.wifi.WifiNetworkSelectorTestUtil.verifySelectedScanResult(mWifiConfigManager, scanDetails.get(0).getScanResult(), candidate); }",35a90be11c1427200f7af5f0190c1c03a41f8948,chooseSavedNetworkWithExternalScore(),471980,451,447
46210,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_Hyperlinks.java,36.0,"private static com.android.utils.Pair<com.android.resources.ResourceType, java.lang.String> parseResource(java.lang.String url) { if (url.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) { java.lang.String remainder = url.substring(com.android.SdkConstants.PREFIX_THEME_REF.length()); int colon = url.indexOf(':'); if (colon != (-1)) { if ((remainder.indexOf('/', colon)) == (-1)) { remainder = (((remainder.substring(0, colon)) + (com.android.SdkConstants.RESOURCE_CLZ_ATTR)) + '/') + (remainder.substring(colon)); } url = (com.android.SdkConstants.PREFIX_RESOURCE_REF) + remainder; return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } } return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); }",98551bdda8587307b6d8335e78adadfa8b3bf713,"public static com.android.utils.Pair<com.android.resources.ResourceType, java.lang.String> parseResource(java.lang.String url) { if (url.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) { java.lang.String remainder = url.substring(com.android.SdkConstants.PREFIX_THEME_REF.length()); if (url.startsWith(com.android.SdkConstants.ATTR_REF_PREFIX)) { url = (com.android.SdkConstants.PREFIX_RESOURCE_REF) + (url.substring(1)); return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } int colon = url.indexOf(':'); if (colon != (-1)) { if ((remainder.indexOf('/', colon)) == (-1)) { remainder = (((remainder.substring(0, colon)) + (com.android.SdkConstants.RESOURCE_CLZ_ATTR)) + '/') + (remainder.substring(colon)); } url = (com.android.SdkConstants.PREFIX_RESOURCE_REF) + remainder; return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } else { int slash = url.indexOf('/'); if (slash == (-1)) { url = (((com.android.SdkConstants.PREFIX_RESOURCE_REF) + (com.android.SdkConstants.RESOURCE_CLZ_ATTR)) + '/') + remainder; return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } } } return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); }",486556625b310515354d62d630283c3600abb73d,parseResource(java.lang.String),parseResource(java.lang.String),7,36,"public static com.android.utils.Pair<com.android.resources.ResourceType, java.lang.String> parseResource(java.lang.String url) { if (url.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) { java.lang.String remainder = url.substring(com.android.SdkConstants.PREFIX_THEME_REF.length()); int colon = url.indexOf(':'); if (colon != (-1)) { if ((remainder.indexOf('/', colon)) == (-1)) { remainder = (((remainder.substring(0, colon)) + (com.android.SdkConstants.RESOURCE_CLZ_ATTR)) + '/') + (remainder.substring(colon)); } url = (com.android.SdkConstants.PREFIX_RESOURCE_REF) + remainder; return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } } return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); }",d038ab6a7aed137f75b32a30ad07025b6734cd32,parseResource(java.lang.String),447521,365,217
556951,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerTransitionSelectionTests.java,0.0,"private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += "" --ez USE_WALLPAPER true""; } if (testSlowStop) { bottomStartCmd += "" --ei STOP_DELAY 3000""; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += "" -f 0x18000000""; } if (topWallpaper) { topStartCmd += "" --ez USE_WALLPAPER true""; } if (!testOpen) { topStartCmd += "" --ei FINISH_DELAY 1000""; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals(""Picked wrong transition"", expectedTransit, mAmWmState.getWmState().getLastTransition()); }",a985fde551cb7ba9cecc676c93ea586bfe71eff5,"private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { if (isVrHeadset()) { return; } java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += "" --ez USE_WALLPAPER true""; } if (testSlowStop) { bottomStartCmd += "" --ei STOP_DELAY 3000""; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += "" -f 0x18000000""; } if (topWallpaper) { topStartCmd += "" --ez USE_WALLPAPER true""; } if (!testOpen) { topStartCmd += "" --ei FINISH_DELAY 1000""; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals(""Picked wrong transition"", expectedTransit, mAmWmState.getWmState().getLastTransition()); }",5d0302a7d2706586e7e30ea2ec0412a45ab536aa,"testTransitionSelection(boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String)","testTransitionSelection(boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String)",9,0,"private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { if ((isUiModeLockedToVrHeadset()) && (bottomWallpaper || topWallpaper)) { return; } java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += "" --ez USE_WALLPAPER true""; } if (testSlowStop) { bottomStartCmd += "" --ei STOP_DELAY 3000""; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += "" -f 0x18000000""; } if (topWallpaper) { topStartCmd += "" --ez USE_WALLPAPER true""; } if (!testOpen) { topStartCmd += "" --ei FINISH_DELAY 1000""; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals(""Picked wrong transition"", expectedTransit, mAmWmState.getWmState().getLastTransition()); }",2e302a9906c5850d35bb6e0a3dc8b2775f1bae66,"testTransitionSelection(boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String)",66346,440,453
101167,hierarchyviewer2_hierarchyviewer2lib_src_main_java_com_android_hierarchyviewerlib_ui_EvaluateContrastDisplay.java,,,,"private static void buildTreeItem(com.android.hierarchyviewerlib.models.EvaluateContrastModel model, final ViewNode child) { int dotIndex = child.name.lastIndexOf('.'); java.lang.String shortName = (dotIndex == (-1)) ? child.name : child.name.substring((dotIndex + 1)); java.lang.String text = ((shortName + "": \"""") + (child.namedProperties.get(""text:mText"").value)) + ""\""""; org.eclipse.swt.widgets.TreeItem item = new org.eclipse.swt.widgets.TreeItem(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sResultsTree, org.eclipse.swt.SWT.NONE); item.setText(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.transformText(text, com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.MAX_NUM_CHARACTERS)); item.setImage(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getResultImage(model.hasSufficientContrast())); com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sViewNodeForTreeItem.put(item, child); com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.buildTreeItemsForModel(model, item); }",9eb76a7d932152702063d258b0aeccbc327df07c,,"buildTreeItem(com.android.hierarchyviewerlib.models.EvaluateContrastModel,com.android.hierarchyviewerlib.models.ViewNode)",6,22,"private static void buildTreeItem(com.android.hierarchyviewerlib.models.EvaluateContrastModel model, final ViewNode child) { int dotIndex = child.name.lastIndexOf('.'); java.lang.String shortName = (dotIndex == (-1)) ? child.name : child.name.substring((dotIndex + 1)); java.lang.String text = ((shortName + "": \"""") + (child.namedProperties.get(""text:mText"").value)) + ""\""""; org.eclipse.swt.widgets.TreeItem item = new org.eclipse.swt.widgets.TreeItem(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sResultsTree, org.eclipse.swt.SWT.NONE); item.setText(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.transformText(text, com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.MAX_NUM_CHARACTERS)); item.setImage(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getResultImage(model.getContrastResult())); com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sViewNodeForTreeItem.put(item, child); com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.buildTreeItemsForModel(model, item); }",08acdf93b22d27dc6a4012753d5c2e7218d1ed47,"buildTreeItem(com.android.hierarchyviewerlib.models.EvaluateContrastModel,com.android.hierarchyviewerlib.models.ViewNode)",377079,291,291
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,,"private void setAudioFormat() { byte[] buffer = new byte[(com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length) + 2]; java.lang.String audioParameter = ""set_ARC_format=""; java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length)); buffer[1] = ((byte) (mAvrPort)); for (int index = 0; index < (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length); index++) { buffer[(index + 2)] = com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup[index]; } keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); finish(); }",fce05a18513300cb89f3dbc57dbcfeaaa9a35a35,,setAudioFormat(),11,3,"private void setAudioFormat() { byte[] buffer = new byte[2]; java.lang.String audioParameter = ""set_ARC_format=""; java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup.length)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); keyValuePairs += java.util.Arrays.toString(com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup); com.android.server.hdmi.HdmiLogger.debug((""keyValuePairs:"" + keyValuePairs)); mCallback.updateSAD(keyValuePairs, isMultiChannelsSupported()); finish(); }",84ba0e61cae24df501fcd645453403769e889550,setAudioFormat(),435420,198,173
91995,luni_src_main_java_libcore_io_Os.java,86.0,"public void msync(long address, long byteCount, int flags) throws libcore.io.ErrnoException;",3eb6a71908c85e255d99152be0c75f43e509fa24,"public void msync(long address, long byteCount, int flags) throws android.os.ErrnoException;",2bdd7bd5ba359736a6df5beae483aabbca289dd0,"msync(long,long,int)","msync(long,long,int)",3,86,"public void msync(long address, long byteCount, int flags) throws android.system.ErrnoException;",141a29bf36e85fb63dbd1b3fb2a78c7f014eab06,"msync(long,long,int)",170175,24,24
245662,jack-tests_tests_com_android_jack_reflect_ReflectTests.java,2.0,@org.junit.Test public void simpleName001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(com.android.jack.reflect.ReflectTests.TEST001_WITHOUT_SHRINK_SCHEDULABLE).compileAndRunTest(); },65344e7beb79b1edb21ee699ae3fecb5edf63a4d,@org.junit.Test @java.lang.Runtime @org.junit.experimental.categories.Category(com.android.jack.test.category.RuntimeRegressionTest.class) public void simpleName001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(com.android.jack.reflect.ReflectTests.TEST001_WITHOUT_SHRINK_SCHEDULABLE).compileAndRunTest(); },df42129dd5d23df0cf1a5521b3eef57fddbacaf1,simpleName001(),simpleName001(),2,2,@org.junit.Test @java.lang.Runtime public void simpleName001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(com.android.jack.reflect.ReflectTests.TEST001_WITHOUT_SHRINK_SCHEDULABLE).compileAndRunTest(); },0662d3b571de71526860c05954e78978d0bebdcd,simpleName001(),64165,100,73
335040,service_java_com_android_server_wifi_WifiNative.java,104.0,"public boolean p2pServDiscCancelReq(java.lang.String id) { return doBooleanCommand((""P2P_SERV_DISC_CANCEL_REQ "" + id)); }",f8f9aafeefc222df1dd937f9517498541d1effac,"public boolean p2pServDiscCancelReq(java.lang.String id) { if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.cancelServiceDiscovery(id); } else { return doBooleanCommand((""P2P_SERV_DISC_CANCEL_REQ "" + id)); } }",e19c0b28da387c794a3626e6590ded55a2bde514,p2pServDiscCancelReq(java.lang.String),p2pServDiscCancelReq(java.lang.String),23,105,"public boolean p2pServDiscCancelReq(java.lang.String id) { if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.cancelServiceDiscovery(id); } else { return doBooleanCommand((""P2P_SERV_DISC_CANCEL_REQ "" + id)); } }",b882350a58e1990abea4430e95d2dbbbc68dcd50,p2pServDiscCancelReq(java.lang.String),258351,102,106
149734,sched_src_com_android_sched_util_codec_CaseInsensitiveDirectFSCodec.java,,,,"@java.lang.Override @javax.annotation.CheckForNull public com.android.sched.vfs.VFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { try { java.security.Provider.Service service = messageDigestCodec.checkString(context, ""SHA""); return new com.android.sched.vfs.CaseInsensitiveFS(codec.checkString(context, string), 2, 2, new com.android.sched.util.config.MessageDigestFactory(service)); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new com.android.sched.util.codec.ParsingException(e); } }",ab1b04b3b0c1d9c576de14250becdf2f17ffab19,,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",5,6,"@java.lang.Override @javax.annotation.CheckForNull public com.android.sched.vfs.VFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { try { java.security.Provider.Service service = messageDigestCodec.checkString(context, ""SHA""); return new com.android.sched.vfs.CaseInsensitiveFS(codec.checkString(context, string), 2, 2, new com.android.sched.util.config.MessageDigestFactory(service), false); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new com.android.sched.util.codec.ParsingException(e); } }",2ee63fa594334707a232673c1a12ddfbfa8f9b73,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",7857,167,169
326133,PMC_src_com_android_pmc_A2dpReceiver.java,,,,"private void setCodecValue(int codecType, int sampleRate, int bitsPerSample, long codecSpecific1) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, (((((((""setCodecValue Codec Type: "" + codecType) + "" sampleRate: "") + sampleRate) + "" bitsPerSample: "") + bitsPerSample) + "" LDAC quality: "") + codecSpecific1)); android.bluetooth.BluetoothCodecConfig codecConfig = new android.bluetooth.BluetoothCodecConfig(codecType, android.bluetooth.BluetoothCodecConfig.CODEC_PRIORITY_HIGHEST, sampleRate, bitsPerSample, android.bluetooth.BluetoothCodecConfig.CHANNEL_MODE_NONE, codecSpecific1, 0, 0, 0); if ((mBluetoothA2dp) != null) { mBluetoothA2dp.setCodecConfigPreference(codecConfig); } }",933c22a747f88f4c109da65980a00db461b38120,,"setCodecValue(int,int,int,long)",10,1,"private void setCodecValue(int codecType, int sampleRate, int bitsPerSample, int channelMode, long codecSpecific1, long codecSpecific2, long codecSpecific3, long codecSpecific4) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, (((((((((""SetCodecValue: Codec Type: "" + codecType) + "" sampleRate: "") + sampleRate) + "" bitsPerSample: "") + bitsPerSample) + "" Channel Mode: "") + channelMode) + "" LDAC quality: "") + codecSpecific1)); if (mMute) return; android.bluetooth.BluetoothCodecConfig codecConfig = new android.bluetooth.BluetoothCodecConfig(codecType, android.bluetooth.BluetoothCodecConfig.CODEC_PRIORITY_HIGHEST, sampleRate, bitsPerSample, channelMode, codecSpecific1, codecSpecific2, codecSpecific3, codecSpecific4); if ((mBluetoothA2dp) != null) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, ""setCodecConfigPreference()""); mBluetoothA2dp.setCodecConfigPreference(codecConfig); } else { android.util.Log.e(com.android.pmc.A2dpReceiver.TAG, ""mBluetoothA2dp is null. Codec is not set""); } }",21ea968e8306ee0cf27e01eb3d347399791f5691,"setCodecValue(int,int,int,int,long,long,long,long)",227682,193,296
206090,jack_tests_com_android_jack_optimizations_ExpressionSimplifierTest.java,4.0,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JExpression getSimplifiedExpresssion(@javax.annotation.Nonnull com.android.jack.ir.ast.JExpression exprToSimplify) { com.android.jack.ir.ast.JMethodBody body = ((com.android.jack.ir.ast.JMethodBody) (method.getBody())); assert body != null; com.android.jack.ir.ast.JBlock bodyBlock = body.getBlock(); bodyBlock.clear(); com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); tr.append(new com.android.jack.transformations.request.AppendStatement(bodyBlock, exprToSimplify.makeStatement())); tr.commit(); com.android.jack.optimizations.ExpressionSimplifier.Simplifier s = new com.android.jack.optimizations.ExpressionSimplifier.Simplifier(); s.accept(method); org.junit.Assert.assertEquals(1, bodyBlock.getStatements().size()); com.android.jack.ir.ast.JStatement stmt = bodyBlock.getStatements().get(0); org.junit.Assert.assertTrue((stmt instanceof com.android.jack.ir.ast.JExpressionStatement)); com.android.jack.ir.ast.JExpression simplifiedExpr = ((com.android.jack.ir.ast.JExpressionStatement) (stmt)).getExpr(); org.junit.Assert.assertNotNull(simplifiedExpr); return simplifiedExpr; }",3468074f52a0ea647046eee2ef307931eb58f9b1,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JExpression getSimplifiedExpresssion(@javax.annotation.Nonnull com.android.jack.ir.ast.JExpression exprToSimplify) { com.android.jack.ir.ast.JMethodBody body = ((com.android.jack.ir.ast.JMethodBody) (method.getBody())); assert body != null; com.android.jack.ir.ast.JBlock bodyBlock = body.getBlock(); bodyBlock.clear(); com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); tr.append(new com.android.jack.transformations.request.AppendStatement(bodyBlock, exprToSimplify.makeStatement())); tr.commit(); com.android.jack.optimizations.ExpressionSimplifier.Simplifier s = new com.android.jack.optimizations.ExpressionSimplifier.Simplifier(); s.setEnableNullInstanceOf(true); s.accept(method); org.junit.Assert.assertEquals(1, bodyBlock.getStatements().size()); com.android.jack.ir.ast.JStatement stmt = bodyBlock.getStatements().get(0); org.junit.Assert.assertTrue((stmt instanceof com.android.jack.ir.ast.JExpressionStatement)); com.android.jack.ir.ast.JExpression simplifiedExpr = ((com.android.jack.ir.ast.JExpressionStatement) (stmt)).getExpr(); org.junit.Assert.assertNotNull(simplifiedExpr); return simplifiedExpr; }",01f4face3dfa13a7b87c9d7f9e9ebf94cff48ea1,getSimplifiedExpresssion(com.android.jack.ir.ast.JExpression),getSimplifiedExpresssion(com.android.jack.ir.ast.JExpression),5,6,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JExpression getSimplifiedExpression(@javax.annotation.Nonnull com.android.jack.ir.ast.JExpression exprToSimplify) { com.android.jack.ir.ast.JMethodBody body = ((com.android.jack.ir.ast.JMethodBody) (method.getBody())); assert body != null; com.android.jack.ir.ast.JBlock bodyBlock = body.getBlock(); bodyBlock.clear(); com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); tr.append(new com.android.jack.transformations.request.AppendStatement(bodyBlock, exprToSimplify.makeStatement())); tr.commit(); com.android.jack.optimizations.ExpressionSimplifier.Simplifier s = new com.android.jack.optimizations.ExpressionSimplifier.Simplifier(); s.accept(method); org.junit.Assert.assertEquals(1, bodyBlock.getStatements().size()); com.android.jack.ir.ast.JStatement stmt = bodyBlock.getStatements().get(0); org.junit.Assert.assertTrue((stmt instanceof com.android.jack.ir.ast.JExpressionStatement)); com.android.jack.ir.ast.JExpression simplifiedExpr = ((com.android.jack.ir.ast.JExpressionStatement) (stmt)).getExpr(); org.junit.Assert.assertNotNull(simplifiedExpr); return simplifiedExpr; }",185787b99d0258f50eabe6f2d63a38044bc42e93,getSimplifiedExpression(com.android.jack.ir.ast.JExpression),150975,345,335
19248,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_ImageOverlay.java,2.0,"private java.awt.image.SampleModel getSampleModel(org.eclipse.swt.graphics.PaletteData palette, int w, int h) { if ((mSampleModel) == null) { return mSampleModel = new java.awt.image.PixelInterleavedSampleModel(java.awt.image.DataBuffer.TYPE_BYTE, w, h, 4, (w * 4), getBandOffset(palette)); } return mSampleModel.createCompatibleSampleModel(w, h); }",4dd504883a67527362f85db7bd5e6a55e78c355d,"private static java.awt.image.SampleModel getSampleModel(org.eclipse.swt.graphics.PaletteData palette, int w, int h) { if ((com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage.sSampleModel) == null) { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage.sSampleModel = new java.awt.image.PixelInterleavedSampleModel(java.awt.image.DataBuffer.TYPE_BYTE, w, h, 4, (w * 4), com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage.getBandOffset(palette)); } return com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage.sSampleModel.createCompatibleSampleModel(w, h); }",a8df857322adb6b639474c032cf671ee2a939b7c,"getSampleModel(org.eclipse.swt.graphics.PaletteData,int,int)","getSampleModel(org.eclipse.swt.graphics.PaletteData,int,int)",6,3,"private static com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage createImage(int w, int h, org.eclipse.swt.graphics.Device device) { org.eclipse.swt.graphics.ImageData imageData = new org.eclipse.swt.graphics.ImageData(w, h, 32, new org.eclipse.swt.graphics.PaletteData(16711680, 65280, 255)); com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage swtReadyImage = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage(w, h, imageData, device); return swtReadyImage; }",b130cddeaf6c8d68df3d6c8bf5d499ae8c84aaa1,"createImage(int,int,org.eclipse.swt.graphics.Device)",62801,220,179
172560,luni_src_main_java_java_nio_charset_ModifiedUtf8.java,0.0,"public static long countBytes(java.lang.String s, boolean shortLength) throws java.io.UTFDataFormatException { long result = 0; final int length = s.length(); for (int i = 0; i < length; ++i) { char ch = s.charAt(i); if ((ch != 0) && (ch <= 127)) { ++result; } else if (ch <= 2047) { result += 2; } else { result += 3; } if (shortLength && (result > 65535)) { throw new java.io.UTFDataFormatException(""String more than 65535 UTF bytes long""); } } return result; }",2ba4d434296800f228e14be7e4f4510cbd146620,"public static long countBytes(java.lang.String s, boolean shortLength) throws java.io.UTFDataFormatException { long counter = 0; int strLen = s.length(); for (int i = 0; i < strLen; i++) { char c = s.charAt(i); if (c < '\u0080') { counter++; if (c == '\u0000') { counter++; } } else if (c < '\u0800') { counter += 2; } else { counter += 3; } } if (shortLength && (counter > (((java.lang.Short.MAX_VALUE) * 2) + 1))) { throw new java.io.UTFDataFormatException(""""); } return counter; }",d2a36406c780fab3f3e368b0c643318cf8853245,"countBytes(java.lang.String,boolean)","countBytes(java.lang.String,boolean)",2,0,"public static long countBytes(java.lang.String s, boolean shortLength) throws java.io.UTFDataFormatException { long counter = 0; int strLen = s.length(); for (int i = 0; i < strLen; i++) { char c = s.charAt(i); if (c < '\u0080') { counter++; if (c == '\u0000') { counter++; } } else if (c < '\u0800') { counter += 2; } else { counter += 3; } } if (shortLength && (counter > 65535)) { throw new java.io.UTFDataFormatException(""Size of the encoded string doesn't fit in two bytes""); } return counter; }",c4447a28cef71c4c41589bc9008a20402d473b3c,"countBytes(java.lang.String,boolean)",268572,154,153
638866,harnesses_tradefed_tests_src_com_android_tradefed_testtype_VtsMultiDeviceTestTest.java,6.0,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mProcessHelper = null; mPython = ""python""; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected com.android.tradefed.util.ProcessHelper createProcessHelper(java.lang.String[] cmd) { assertCommand(cmd); try { createResult(cmd[3]); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } return mProcessHelper; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }",92266df5e3d3dbc070e4f054c0c02659c3982b1a,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mPython = ""python""; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected void updateVtsRunnerTestConfig(org.json.JSONObject jsonObject) { return; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }",c3e83b51438cde17be064dca62ed9f4294f154a3,setUp(),setUp(),7,6,@org.junit.Before public void setUp() throws java.lang.Exception { mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected void updateVtsRunnerTestConfig(org.json.JSONObject jsonObject) { return; } @java.lang.Override protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return mVtsPythonRunnerHelper; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); },2da594dcd6f09de6db47d4584178466600d7c2bf,setUp(),88288,200,231
88130,ddmlib_src_main_java_com_android_ddmlib_MultiLineReceiver.java,0.0,"@java.lang.Override public final void addOutput(byte[] data, int offset, int length) { if (!(isCancelled())) { java.lang.String s = null; try { s = new java.lang.String(data, offset, length, ""UTF-8""); } catch (java.io.UnsupportedEncodingException e) { s = new java.lang.String(data, offset, length); } if ((mUnfinishedLine) != null) { s = (mUnfinishedLine) + s; mUnfinishedLine = null; } mArray.clear(); int start = 0; do { int index = s.indexOf(""\r\n"", start); if (index == (-1)) { mUnfinishedLine = s.substring(start); break; } java.lang.String line = s.substring(start, index); if (mTrimLines) { line = line.trim(); } mArray.add(line); start = index + 2; } while (true ); if (!(mArray.isEmpty())) { java.lang.String[] lines = mArray.toArray(new java.lang.String[mArray.size()]); processNewLines(lines); } } }",2b340a082d1a087a1b7eef26e28bca09f459778b,"@java.lang.Override public final void addOutput(byte[] data, int offset, int length) { if (!(isCancelled())) { java.lang.String s = null; try { s = new java.lang.String(data, offset, length, com.android.SdkConstants.UTF_8); } catch (java.io.UnsupportedEncodingException e) { s = new java.lang.String(data, offset, length); } if ((mUnfinishedLine) != null) { s = (mUnfinishedLine) + s; mUnfinishedLine = null; } mArray.clear(); int start = 0; do { int index = s.indexOf(""\r\n"", start); if (index == (-1)) { mUnfinishedLine = s.substring(start); break; } java.lang.String line = s.substring(start, index); if (mTrimLines) { line = line.trim(); } mArray.add(line); start = index + 2; } while (true ); if (!(mArray.isEmpty())) { java.lang.String[] lines = mArray.toArray(new java.lang.String[mArray.size()]); processNewLines(lines); } } }",6265f6f55ce7586d7427fb32a1808cd8d6e42303,"addOutput(byte[],int,int)","addOutput(byte[],int,int)",3,0,"@java.lang.Override public final void addOutput(byte[] data, int offset, int length) { if (!(isCancelled())) { java.lang.String s = new java.lang.String(data, offset, length, com.google.common.base.Charsets.UTF_8); if ((mUnfinishedLine) != null) { s = (mUnfinishedLine) + s; mUnfinishedLine = null; } mArray.clear(); int start = 0; do { int index = s.indexOf(""\r\n"", start); if (index == (-1)) { mUnfinishedLine = s.substring(start); break; } java.lang.String line = s.substring(start, index); if (mTrimLines) { line = line.trim(); } mArray.add(line); start = index + 2; } while (true ); if (!(mArray.isEmpty())) { java.lang.String[] lines = mArray.toArray(new java.lang.String[mArray.size()]); processNewLines(lines); } } }",6a7d5d4693717b8cc9b1c2ece179324b07fe22c9,"addOutput(byte[],int,int)",488938,265,233
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFastNormalize.java,,,,"private void checkFastNormalizeFloat() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testFastNormalizeFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastNormalizeFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastNormalizeFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastNormalizeFloat: "" + (e.toString()))); } }",d93c59aeaa6c2d0f679f81875372503fa0d0d5ac,,checkFastNormalizeFloat(),9,1,"private void checkFastNormalizeFloatFloat() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -8691516666548268773L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testFastNormalizeFloatFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastNormalizeFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastNormalizeFloatFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastNormalizeFloatFloat: "" + (e.toString()))); } }",b37e23162ca12baade1fb5e4f24a5393a4cdf8cf,checkFastNormalizeFloatFloat(),142594,296,274
127845,v8_renderscript_java_src_android_support_v8_renderscript_Script.java,26.0,"public void setVar(int index, android.support.v8.renderscript.BaseObj o) { mRS.nScriptSetVarObj(getID(mRS), index, (o == null ? 0 : o.getID(mRS))); }",55c87735934710a6229269517a6ef89e71a728be,"public void setVar(int index, boolean v) { if (mUseIncSupp) { mRS.nIncScriptSetVarI(getID(mRS), index, (v ? 1 : 0)); } else { mRS.nScriptSetVarI(getID(mRS), index, (v ? 1 : 0)); } }",54b2c4677e27cde4bcad2e2286bcfd59113107a1,"setVar(int,android.support.v8.renderscript.BaseObj)","setVar(int,boolean)",8,3,"public void setVar(int index, double v) { mRS.nScriptSetVarD(getID(mRS), index, v, mUseIncSupp); }",756dfea07a8a76a536e28758a02f27c357f181ac,"setVar(int,double)",314329,73,37
308588,luni_src_main_java_libcore_io_NioBufferIterator.java,9.0,public byte readByte() { byte result = libcore.io.Memory.peekByte(((address) + (position))); ++(position); return result; },ec2338d142f1d62f415b1351809e6b172188a95f,"public byte readByte() { synchronized(fileLock) { file.checkNotClosed(); libcore.io.NioBufferIterator.checkReadBounds(position, size, 1); byte result = libcore.io.Memory.peekByte(((address) + (position))); ++(position); return result; } }",35a2915ec4b878e01ed63a1ba3f381d68b57d1d1,readByte(),readByte(),12,9,"public byte readByte() { file.checkNotClosed(); libcore.io.NioBufferIterator.checkReadBounds(position, length, 1); byte result = libcore.io.Memory.peekByte(((address) + (position))); ++(position); return result; }",8d338c897d9522f001019fb48cedd720fb0817ef,readByte(),42623,62,55
121951,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_utils_ApkHelper.java,4.0,"public static boolean checkForClass(@com.android.annotations.NonNull java.io.File apkFile, @com.android.annotations.NonNull java.lang.String expectedClassName) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { java.io.File classesDex = java.io.File.createTempFile(""ApkHelper"", """"); classesDex.deleteOnExit(); com.android.build.gradle.integration.common.utils.ZipHelper.extractFile(apkFile, ""classes.dex"", classesDex); java.io.File dexDump = com.android.build.gradle.integration.common.utils.SdkHelper.getDexDump(); com.android.ide.common.internal.CommandLineRunner commandLineRunner = new com.android.ide.common.internal.CommandLineRunner(new com.android.utils.StdLogger(StdLogger.Level.ERROR)); java.util.List<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); command.add(dexDump.getAbsolutePath()); command.add(classesDex.getAbsolutePath()); java.util.List<java.lang.String> output = com.android.build.gradle.integration.common.utils.ApkHelper.runAndGetOutput(commandLineRunner, command); for (java.lang.String line : output) { java.util.regex.Matcher m = com.android.build.gradle.integration.common.utils.ApkHelper.PATTERN.matcher(line.trim()); if (m.matches()) { java.lang.String className = m.group(1); if (expectedClassName.equals(className)) { return true; } } } return false; }",8d74764e801e509e33518ea3be010b494ca2e16c,"public static boolean checkForClass(@com.android.annotations.NonNull java.io.File apkFile, @com.android.annotations.NonNull java.lang.String expectedClassName) throws com.android.ide.common.process.ProcessException, java.io.IOException { java.io.File classesDex = java.io.File.createTempFile(""ApkHelper"", """"); classesDex.deleteOnExit(); com.android.build.gradle.integration.common.utils.ZipHelper.extractFile(apkFile, ""classes.dex"", classesDex); java.io.File dexDump = com.android.build.gradle.integration.common.utils.SdkHelper.getDexDump(); com.android.ide.common.process.ProcessExecutor executor = new com.android.ide.common.process.DefaultProcessExecutor(new com.android.utils.StdLogger(StdLogger.Level.ERROR)); com.android.ide.common.process.ProcessInfoBuilder builder = new com.android.ide.common.process.ProcessInfoBuilder(); builder.setExecutable(dexDump); builder.addArg(classesDex.getAbsolutePath()); java.util.List<java.lang.String> output = com.android.build.gradle.integration.common.utils.ApkHelper.runAndGetOutput(builder.createProcess(), executor); for (java.lang.String line : output) { java.util.regex.Matcher m = com.android.build.gradle.integration.common.utils.ApkHelper.PATTERN.matcher(line.trim()); if (m.matches()) { java.lang.String className = m.group(1); if (expectedClassName.equals(className)) { return true; } } } return false; }",635f41b422f94c7be69d56c4d61569a97a6a6817,"checkForClass(java.io.File,java.lang.String)","checkForClass(java.io.File,java.lang.String)",6,5,"public static boolean checkForClass(@com.android.annotations.NonNull java.io.File apkFile, @com.android.annotations.NonNull java.lang.String expectedClassName) throws com.android.ide.common.process.ProcessException, java.io.IOException { java.io.File dexDump = com.android.build.gradle.integration.common.utils.SdkHelper.getDexDump(); com.android.ide.common.process.ProcessExecutor executor = new com.android.ide.common.process.DefaultProcessExecutor(new com.android.utils.StdLogger(StdLogger.Level.ERROR)); com.android.ide.common.process.ProcessInfoBuilder builder = new com.android.ide.common.process.ProcessInfoBuilder(); builder.setExecutable(dexDump); builder.addArgs(apkFile.getAbsolutePath()); java.util.List<java.lang.String> output = com.android.build.gradle.integration.common.utils.ApkHelper.runAndGetOutput(builder.createProcess(), executor); for (java.lang.String line : output) { java.util.regex.Matcher m = com.android.build.gradle.integration.common.utils.ApkHelper.PATTERN.matcher(line.trim()); if (m.matches()) { java.lang.String className = m.group(1); if (expectedClassName.equals(className)) { return true; } } } return false; }",e6fe6bdaa3a07b3d81606f10f44a7382ef52fb6a,"checkForClass(java.io.File,java.lang.String)",265479,363,306
233471,luni_src_test_java_libcore_dalvik_system_SocketTaggingTest.java,,,,"public void testSocketChannel() throws java.lang.Exception { java.nio.channels.SocketChannel sc = java.nio.channels.SocketChannel.open(); sc.connect(server.getLocalAddress()); sc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }",0be6aa5b89c86c9a0ebde67215ba6d9c0ebb49a1,,testSocketChannel(),3,11,"public void testSocketChannel() throws java.lang.Exception { java.nio.channels.SocketChannel sc = java.nio.channels.SocketChannel.open(); sc.connect(server.getLocalAddress()); assertEquals(1, tagger.getLiveDescriptors().size()); sc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }",cbdb6bb67a31f19086402684208eebebab7df398,testSocketChannel(),88476,64,75
41115,src_java_com_android_internal_telephony_IccCardProxy.java,,,,"public void registerForReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mReadyRegistrants.add(r); if ((getState()) == (com.android.internal.telephony.IccCardConstants.State.READY)) { r.notifyRegistrant(); } }",d3b2482f735af11d3fe40c33dfebed641f2bd67b,,"registerForReady(android.os.Handler,int,java.lang.Object)",22,33,private java.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PUK_REQUIRED : return IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return IccCardConstants.INTENT_VALUE_ICC_LOCKED; case READY : return IccCardConstants.INTENT_VALUE_ICC_READY; case NOT_READY : return IccCardConstants.INTENT_VALUE_ICC_NOT_READY; case PERM_DISABLED : return IccCardConstants.INTENT_VALUE_ICC_LOCKED; default : return IccCardConstants.INTENT_VALUE_ICC_UNKNOWN; } },c381ab2dba2dabb600eb7e2751114ba1ed192765,getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State),499837,89,209
521749,tools_signapk_src_com_android_signapk_SignApk.java,14.0,"private static int getStoredEntryDataAlignment(java.lang.String entryName, int defaultAlignment) { if (defaultAlignment <= 0) { return 0; } if (entryName.endsWith("".so"")) { return 4096; } else { return defaultAlignment; } }",c08b49ace6bd20f0fbb815e1b5613766bee8cab3,"private static int getStoredEntryDataAlignment(java.lang.String entryName, int defaultAlignment) { if (defaultAlignment <= 0) { return 0; } if (entryName.endsWith("".so"")) { return com.android.signapk.SignApk.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES; } else { return defaultAlignment; } }",964d14d2012778ac412476ee48f4987ef69e5539,"getStoredEntryDataAlignment(java.lang.String,int)","getStoredEntryDataAlignment(java.lang.String,int)",3,13,"private static int getStoredEntryDataAlignment(java.lang.String entryName, int defaultAlignment) { if (defaultAlignment <= 0) { return 0; } if (entryName.endsWith("".so"")) { return 4096; } else { return defaultAlignment; } }",c08b49ace6bd20f0fbb815e1b5613766bee8cab3,"getStoredEntryDataAlignment(java.lang.String,int)",87199,73,56
63253,perflib_src_test_java_com_android_tools_perflib_vmtrace_CallStackReconstructorTest.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testCallHierarchyIterator() { com.android.tools.perflib.vmtrace.CallStackReconstructor reconstructor = new com.android.tools.perflib.vmtrace.CallStackReconstructor(255); reconstructor.addTraceAction(1, TraceAction.METHOD_ENTER, 10, 10); reconstructor.addTraceAction(2, TraceAction.METHOD_ENTER, 11, 11); reconstructor.addTraceAction(3, TraceAction.METHOD_ENTER, 12, 12); reconstructor.addTraceAction(3, TraceAction.METHOD_EXIT, 13, 13); reconstructor.addTraceAction(3, TraceAction.METHOD_ENTER, 14, 14); reconstructor.addTraceAction(3, TraceAction.METHOD_EXIT, 15, 15); reconstructor.addTraceAction(2, TraceAction.METHOD_EXIT, 16, 16); reconstructor.addTraceAction(5, TraceAction.METHOD_ENTER, 17, 17); reconstructor.addTraceAction(5, TraceAction.METHOD_EXIT, 18, 18); reconstructor.addTraceAction(1, TraceAction.METHOD_EXIT, 20, 20); reconstructor.addTraceAction(6, TraceAction.METHOD_ENTER, 21, 21); reconstructor.addTraceAction(6, TraceAction.METHOD_EXIT, 22, 22); com.android.tools.perflib.vmtrace.Call topLevel = reconstructor.getTopLevel(); for (java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = topLevel.getCallHierarchyIterator(); it.hasNext();) { com.android.tools.perflib.vmtrace.Call c = it.next(); java.lang.System.out.printf(""%d: %s, entry: %d %d, exit: %d %d\n"", c.getDepth(), c.getMethodId(), c.getEntryThreadTime(), c.getEntryGlobalTime(), c.getExitThreadTime(), c.getExitGlobalTime()); } }",bc3cb4228cc4d90a409edf4047cfca432ebebf1f,,testCallHierarchyIterator(),4,9,"public void testCallHierarchyIterator() { com.android.tools.perflib.vmtrace.Call topLevel = reconstructSampleCallStack(); java.util.List<java.lang.Integer> expectedSequence = java.util.Arrays.asList(255, 1, 2, 3, 3, 5, 6); int i = 0; java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = topLevel.getCallHierarchyIterator(); while (it.hasNext()) { com.android.tools.perflib.vmtrace.Call c = it.next(); long expectedMethodId = expectedSequence.get((i++)); long actualMethodId = c.getMethodId(); assertEquals(expectedMethodId, actualMethodId); } }",193d7df2156cf94965c876810838c87d22032d0c,testCallHierarchyIterator(),126769,399,155
21722,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_uimodel_UiElementNode.java,28.0,"public java.lang.String getShortDescription() { java.lang.String attr = getDescAttribute(); if (attr != null) { return java.lang.String.format(""%1$s (%2$s)"", attr, mDescriptor.getUiName()); } return mDescriptor.getUiName(); }",91b0f1ba5b71805464a3e6263928bc81a62a38cc,"public java.lang.String getShortDescription() { java.lang.String name = mDescriptor.getUiName(); java.lang.String attr = getDescAttribute(); if (attr != null) { if ((attr.indexOf(name)) >= 0) { return attr; } else { return java.lang.String.format(""%1$s (%2$s)"", attr, name); } } return name; }",50ed609b3b18e6426101aad27c15288f1f439d31,getShortDescription(),getShortDescription(),2,28,"public java.lang.String getShortDescription() { java.lang.String name = mDescriptor.getUiName(); java.lang.String attr = getDescAttribute(); if (attr != null) { if (attr.contains(name)) { return attr; } else { return java.lang.String.format(""%1$s (%2$s)"", attr, name); } } return name; }",7d9618bbd1178185b4b468d8ac394787c4c7d2ec,getShortDescription(),311721,89,86
90966,luni_src_test_java_libcore_java_nio_channels_FileIOInterruptTest.java,,,,"public void testChannelWrite_exceptionOnCloseWhenBlocked() throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoReader fifoReader = new libcore.java.nio.channels.FileIOInterruptTest.FifoReader(fifoFile); fifoReader.start(); java.nio.channels.FileChannel fileOutputChannel = new java.io.FileOutputStream(fifoFile).getChannel(); libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter channelWriter = new libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter(fileOutputChannel); java.lang.Thread channelWriterThread = libcore.java.nio.channels.FileIOInterruptTest.createAndStartThread(""ChannelWriter"", channelWriter); channelWriter.waitForThreadToBlock(); fileOutputChannel.close(); libcore.java.nio.channels.FileIOInterruptTest.waitToDie(channelWriterThread); assertSame(java.nio.channels.AsynchronousCloseException.class, channelWriter.ioe.getClass()); assertFalse(channelWriter.wasInterrupted); fifoReader.tidyUp(); }",ce557204a731755d91e433128a58a0ef6ea2b667,,testChannelWrite_exceptionOnCloseWhenBlocked(),7,15,public void testChannelWrite_exceptionOnCloseWhenBlocked() throws java.lang.Exception { testChannelWrite_exceptionOnCloseWhenBlocked(libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter.Method.WRITE); },0bfb903a4c5d69a4461c76fff75d47669af7d964,testChannelWrite_exceptionOnCloseWhenBlocked(),329352,234,48
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF3C148008534D44502E434F4D8108736D64732E636F6D9000""); assertEquals(""SMDP.COM"", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, ""BF3C00""); }",df411cfb4aa97d99da7d41f8c1ffa28523e911fe,,testGetDefaultSmdpAddress(),8,41,"@org.junit.Test public void testGetDefaultSmdpAddress() { int channel = mockLogicalChannelResponses(""BF3C148008534D44502E434F4D8108736D64732E636F6D9000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.String> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getDefaultSmdpAddress(resultCaptor, mHandler); resultCaptor.await(); assertEquals(""SMDP.COM"", resultCaptor.result); verifyStoreData(channel, ""BF3C00""); }",e769b89ad4318ac489fe8f0682487806995ac93d,testGetDefaultSmdpAddress(),396875,128,160
337409,luni_src_test_java_libcore_java_nio_file_Files2Test.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void test_readAllLine$Path$Charset_NPE() throws java.io.IOException { try { java.nio.file.Files.readAllLines(null, java.nio.charset.Charset.forName(""UTF-16"")); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), null); fail(); } catch (java.lang.NullPointerException expected) { } }",ed4bd66aff2a92e48c301579677b4debe1d67518,,test_readAllLine$Path$Charset_NPE(),5,78,"@org.junit.Test public void test_readAllLine$Path$Charset_NPE() throws java.io.IOException { try { java.nio.file.Files.readAllLines(null, java.nio.charset.StandardCharsets.UTF_16); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), null); fail(); } catch (java.lang.NullPointerException expected) { } }",59d9873c3f13b976327e18526a32020027743e24,test_readAllLine$Path$Charset_NPE(),336385,105,104
578588,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,8.0,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); },d45c72409786fa9781d71c9bf3c4532d95b5aa74,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); },e85e2a7ea0b2f5821598999d8487a0f04c9526ab,accept(int),accept(int),4,6,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); },4a150bdf251e88a4ed3e8f2eef036f8df7cf12f6,accept(int),140700,117,100
620332,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,4.0,"public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR); } } }",afd9cd34ebdc0faa71eb8226691cde784a2fc4c6,"public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.DELIVER_STATUS_ERROR_GENERIC); } } }",10a6263830af6849c62a2bab5eccbf50aa52b58e,"onSmsReceived(int,java.lang.String,byte[])","onSmsReceived(int,java.lang.String,byte[])",5,4,"public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not deliver sms: "" + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR_GENERIC); } } }",630267dbb2d6cdc57a8b5ef44a419f7131a6b758,"onSmsReceived(int,java.lang.String,byte[])",146898,154,160
278609,telecomm_java_android_telecom_Log.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.lang.String getSessionId() { synchronized(android.telecom.Log.sSingletonSync) { if ((android.telecom.Log.sSessions) != null) { return android.telecom.Log.getSessions().getSessionId(); } else { return """"; } } }",4d911dab77621baca2eabfb1134a6d97a7947e6a,,getSessionId(),3,17,"public static java.lang.String getSessionId() { synchronized(android.telecom.Log.sSingletonSync) { if ((android.telecom.Log.sSessionManager) != null) { return android.telecom.Log.getSessionManager().getSessionId(); } else { return """"; } } }",b03de2727c182b528ed675acd17adb948b92ab53,getSessionId(),122335,66,66
81416,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,,,,public static void computeFastLength(android.renderscript.cts.TestFastLength.ArgumentsFloatNFloat args) { args.ulf = 4; args.ulfRelaxed = 12; double sum = 0.0F; for (int i = 0; i < (args.inV.length); i++) { sum += (args.inV[i]) * (args.inV[i]); } args.out = ((float) (java.lang.Math.sqrt(sum))); },97dabc4a87be9813233d3b83971c3b16af846718,,computeFastLength(android.renderscript.cts.TestFastLength$ArgumentsFloatNFloat),9,20,"public static void computeFract(android.renderscript.cts.TestFract.ArgumentsFloatFloat args) { args.ulf = 4; args.ulfRelaxed = 12; float floor = ((float) (java.lang.StrictMath.floor(args.inV))); args.out = ((float) (java.lang.StrictMath.min(((args.inV) - floor), 0.99999994F))); }",bcc7178d48a3c181fb366023cb2d98bf307ccb19,computeFract(android.renderscript.cts.TestFract$ArgumentsFloatFloat),142541,106,94
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,32.0,"@org.junit.Test public void testLamba015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA015).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",6fc9af7ff16c3ee1ac91ef7a01ab089efea15ddb,"@org.junit.Test public void testLamba015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA015).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",b2fcaa751b7b519a46e0768e37091c54d9140b28,testLamba015(),testLamba015(),7,32,@org.junit.Test public void testLamba015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA015).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },9f89ee9c2d0fcc263b846bfdb29efe91fe5a616b,testLamba015(),466362,83,57
15997,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_device_DeviceBridge.java,,,,"public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { try { device.removeForward(localPort, com.android.hierarchyviewerlib.device.DeviceBridge.DEFAULT_SERVER_PORT); com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap.remove(device); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e(""hierarchy"", (""Timeout removing port forwarding for "" + device)); } catch (com.android.ddmlib.AdbCommandRejectedException e) { } catch (java.io.IOException e) { com.android.ddmlib.Log.e(""hierarchy"", java.lang.String.format(""Failed to remove forward for device %1$s: %2$s"", device, e.getMessage())); } } } }",5eddafa1aaa00126e1ea651c08a148e10b4d59c1,,removeDeviceForward(com.android.ddmlib.IDevice),4,19,"public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { try { device.removeForward(localPort, com.android.hierarchyviewerlib.device.DeviceBridge.DEFAULT_SERVER_PORT); com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap.remove(device); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, (""Timeout removing port forwarding for "" + device)); } catch (com.android.ddmlib.AdbCommandRejectedException e) { } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, java.lang.String.format(""Failed to remove forward for device %1$s: %2$s"", device, e.getMessage())); } } } }",f3b59b7fb5edbb4e34b5513eb616853de0887c8a,removeDeviceForward(com.android.ddmlib.IDevice),125345,246,272
48539,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLX509Certificate.java,,,,@java.lang.Override public int getBasicConstraints() { return 0; },e346ee1d7c124e4b6db3320f2f8cf7227238834c,,getBasicConstraints(),17,1,@java.lang.Override public int getBasicConstraints() { if ((org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_check_ca(mContext)) != 1) { return -1; } final int pathLen = org.apache.harmony.xnet.provider.jsse.NativeCrypto.get_X509_ex_pathlen(mContext); if (pathLen == (-1)) { return java.lang.Integer.MAX_VALUE; } return pathLen; },b232975393536ea38e1f9b22c01052bbf74154cf,getBasicConstraints(),437055,16,110
118208,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,6.0,"@java.lang.Override @javax.annotation.Nonnull public void libToExe(@javax.annotation.Nonnull java.io.File in, @javax.annotation.Nonnull java.io.File out, boolean zipFile) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""java""); args.add(""-cp""); args.add(jackPrebuilt.getAbsolutePath()); if ((incrementalFolder) != null) { args.add(com.android.jack.experimental.incremental.Main.class.getName()); args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } else { args.add(com.android.jack.Main.class.getName()); } if (withDebugInfos) { args.add(""-D""); args.add(""jack.dex.optimize=false""); } else { args.add(""-D""); args.add(""jack.dex.optimize=true""); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); args.add(""--import""); args.add(in.getAbsolutePath()); for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } if (zipFile) { args.add(""--output-dex-zip""); } else { args.add(""--output-dex""); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(true); if (!(exec.run())) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",17b32ee9de7d01277bf54c6aaefd4d2bdfc883cb,"@java.lang.Override @javax.annotation.Nonnull public void libToExe(@javax.annotation.Nonnull java.io.File in, @javax.annotation.Nonnull java.io.File out, boolean zipFile) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""java""); args.add(""-cp""); args.add(jackPrebuilt.getAbsolutePath()); args.add(""--verbose""); args.add(verbosityLevel.name()); if ((incrementalFolder) != null) { args.add(com.android.jack.experimental.incremental.Main.class.getName()); args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } else { args.add(com.android.jack.Main.class.getName()); } if (withDebugInfos) { args.add(""-D""); args.add(""jack.dex.optimize=false""); } else { args.add(""-D""); args.add(""jack.dex.optimize=true""); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); args.add(""--import""); args.add(in.getAbsolutePath()); for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } if (zipFile) { args.add(""--output-dex-zip""); } else { args.add(""--output-dex""); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); if (!(exec.run())) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",f396a34c410e7f734fb3c34d91ade6ee5344b796,"libToExe(java.io.File,java.io.File,boolean)","libToExe(java.io.File,java.io.File,boolean)",3,6,"@java.lang.Override @javax.annotation.Nonnull public void libToExe(@javax.annotation.Nonnull java.io.File in, @javax.annotation.Nonnull java.io.File out, boolean zipFile) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""java""); args.add(""-cp""); args.add(jackPrebuilt.getAbsolutePath()); args.add(""--verbose""); args.add(verbosityLevel.name()); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } args.add(com.android.jack.Main.class.getName()); for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } if (withDebugInfos) { args.add(""-D""); args.add(""jack.dex.optimize=false""); } else { args.add(""-D""); args.add(""jack.dex.optimize=true""); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); args.add(""--import""); args.add(in.getAbsolutePath()); for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } if (zipFile) { args.add(""--output-dex-zip""); } else { args.add(""--output-dex""); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); if (!(exec.run())) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",fc7b45528c75e7ab6d3723911ff4f2a5124166b6,"libToExe(java.io.File,java.io.File,boolean)",176681,430,437
15997,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_device_Window.java,,,,public java.lang.String toString() { return title; },a21c23d10e3491a97345f8b9e69c37f33380957f,,toString(),4,2,@java.lang.Override public java.lang.String toString() { return title; },ac74096165a445250060779206953f916fa19ff7,toString(),125402,14,20
402363,src_java_com_android_internal_telephony_uicc_UiccCard.java,37.0,"public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal((""Close Logical Channel: "" + channel)); mCi.iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }",d243809db061a7561520d2e32f89833d33658c37,"public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal((""Close Logical Channel: "" + channel)); getCommandsInterface().iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }",ef3396ad02f47dd1a9989afb1078d7d903f12cd8,"iccCloseLogicalChannel(int,android.os.Message)","iccCloseLogicalChannel(int,android.os.Message)",4,37,"public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal((""Close Logical Channel: "" + channel)); mCi.iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }",d243809db061a7561520d2e32f89833d33658c37,"iccCloseLogicalChannel(int,android.os.Message)",378737,77,77
554301,hostsidetests_appsecurity_test-apps_ExternalStorageApp_src_com_android_cts_externalstorageapp_ReadDefaultUris.java,0.0,"private void playUri(final android.net.Uri uri, long timeToPlayMs, int usage, int contentType) throws java.lang.Exception { android.media.MediaPlayer mp = new android.media.MediaPlayer(); assertNotNull(mp); mp.setDataSource(mContext, uri); mp.setAudioAttributes(new android.media.AudioAttributes.Builder().setUsage(usage).setContentType(contentType).build()); mp.prepare(); mp.start(); java.lang.Thread.sleep(timeToPlayMs); mp.stop(); mp.release(); java.lang.Thread.sleep(timeToPlayMs); assertFalse(mAudioManager.isMusicActive()); }",f93f2232e821d8137e50ef42bffd5566fb37da22,"private void playUri(final android.net.Uri uri, long timeToPlayMs, int usage, int contentType) throws java.lang.Exception { boolean isMusicPlayingBeforeTest = false; if (mAudioManager.isMusicActive()) { isMusicPlayingBeforeTest = true; } android.media.MediaPlayer mp = new android.media.MediaPlayer(); assertNotNull(mp); mp.setDataSource(mContext, uri); mp.setAudioAttributes(new android.media.AudioAttributes.Builder().setUsage(usage).setContentType(contentType).build()); mp.prepare(); mp.start(); java.lang.Thread.sleep(timeToPlayMs); mp.stop(); mp.release(); java.lang.Thread.sleep(timeToPlayMs); if (!isMusicPlayingBeforeTest) { assertFalse(mAudioManager.isMusicActive()); } }",a59cbe0ace9ee404fcfbfa1009b9f4ad3c67564b,"playUri(android.net.Uri,long,int,int)","playUri(android.net.Uri,long,int,int)",2,0,"private void playUri(final android.net.Uri uri, long timeToPlayMs, int usage, int contentType) throws java.lang.Exception { android.media.MediaPlayer mp = new android.media.MediaPlayer(); assertNotNull(mp); mp.setDataSource(mContext, uri); mp.setAudioAttributes(new android.media.AudioAttributes.Builder().setUsage(usage).setContentType(contentType).build()); mp.prepare(); mp.start(); java.lang.Thread.sleep(timeToPlayMs); mp.stop(); mp.release(); java.lang.Thread.sleep(timeToPlayMs); }",f3c8c916ce2a2f23ae5c34d1cc58ba5e12f01cd8,"playUri(android.net.Uri,long,int,int)",162041,176,128
277758,dx_src_com_android_jack_dx_io_OpcodeInfo.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isDualConstant() { return (secondIndexType) != (IndexType.NONE); },9c597668ba7c190be9caa84038464ac6444506a0,,isDualConstant(),15,9,public boolean hasDualConstants() { return (secondIndexType) != (IndexType.NONE); },2511199c77956f7e9f6d788583b131c0a18848b0,hasDualConstants(),513501,21,21
442212,services_net_java_android_net_ip_IpReachabilityMonitor.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static android.net.ip.IpReachabilityMonitor.Config makeDefault(android.content.Context context, java.lang.String iface) { final java.lang.String lockName = ((android.net.ip.IpReachabilityMonitor.TAG) + ""."") + iface; final android.os.PowerManager pm = ((android.os.PowerManager) (context.getSystemService(Context.POWER_SERVICE))); final android.os.PowerManager.WakeLock lock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, lockName); return new android.net.ip.IpReachabilityMonitor.Config() { public void acquireWakeLock(long durationMs) { lock.acquire(durationMs); } }; }",418dd5b619c657806dfc3374ad32a2a69e482ad3,,"makeDefault(android.content.Context,java.lang.String)",4,3,"static android.net.ip.IpReachabilityMonitor.Dependencies makeDefault(android.content.Context context, java.lang.String iface) { final java.lang.String lockName = ((android.net.ip.IpReachabilityMonitor.TAG) + ""."") + iface; final android.os.PowerManager pm = ((android.os.PowerManager) (context.getSystemService(Context.POWER_SERVICE))); final android.os.PowerManager.WakeLock lock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, lockName); return new android.net.ip.IpReachabilityMonitor.Dependencies() { public void acquireWakeLock(long durationMs) { lock.acquire(durationMs); } }; }",e5062114959639a4825ff45329812d2e01ab047e,"makeDefault(android.content.Context,java.lang.String)",282910,161,161
465279,core_java_android_bluetooth_le_AdvertisingSet.java,3.0,"public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData) { try { gatt.setAdvertisingData(this.advertiserId, advertiseData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",650efa9bd3e10c7d371c83812092f88964f9a567,"public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData) { try { mGatt.setAdvertisingData(this.mAdvertiserId, advertiseData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",2629fc9c6d1080d62815863e3e8455f0a67a0bf7,setAdvertisingData(android.bluetooth.le.AdvertiseData),setAdvertisingData(android.bluetooth.le.AdvertiseData),9,3,"public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData) { try { mGatt.setAdvertisingData(mAdvertiserId, advertiseData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",848049a21a68dced250c8c0f9ba9a03dae9c41eb,setAdvertisingData(android.bluetooth.le.AdvertiseData),2182,86,84
303562,src_com_android_phone_NotificationMgr.java,2.0,"private boolean sendNotificationCustomComponent(java.lang.Integer count, java.lang.String number, android.app.PendingIntent pendingIntent, boolean isSettingsIntent) { if ((mNotificationComponent) != null) { android.content.Intent intent = new android.content.Intent(); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setComponent(mNotificationComponent); intent.setAction(TelephonyManager.ACTION_SHOW_VOICEMAIL_NOTIFICATION); if (count != null) { intent.putExtra(TelephonyManager.EXTRA_NOTIFICATION_COUNT, count); } if ((count == null) || (count > 0)) { if (!(android.text.TextUtils.isEmpty(number))) { intent.putExtra(TelephonyManager.EXTRA_VOICEMAIL_NUMBER, number); } if (pendingIntent != null) { intent.putExtra((isSettingsIntent ? android.telephony.TelephonyManager.EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT : android.telephony.TelephonyManager.EXTRA_CALL_VOICEMAIL_INTENT), pendingIntent); } } mContext.sendBroadcast(intent); return true; } return false; }",2fda4a0065233cc98336292086265b0ddd638f9b,"private boolean sendNotificationThroughDefaultDialer(java.lang.Integer count, java.lang.String number, android.app.PendingIntent pendingIntent, boolean isSettingsIntent, android.os.UserHandle userHandle) { if (shouldManageNotificationThroughDefaultDialer(userHandle)) { android.content.Intent intent = getShowVoicemailIntentForDefaultDialer(userHandle); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setAction(TelephonyManager.ACTION_SHOW_VOICEMAIL_NOTIFICATION); if (count != null) { intent.putExtra(TelephonyManager.EXTRA_NOTIFICATION_COUNT, count); } if ((count == null) || (count > 0)) { if (!(android.text.TextUtils.isEmpty(number))) { intent.putExtra(TelephonyManager.EXTRA_VOICEMAIL_NUMBER, number); } if (pendingIntent != null) { intent.putExtra((isSettingsIntent ? android.telephony.TelephonyManager.EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT : android.telephony.TelephonyManager.EXTRA_CALL_VOICEMAIL_INTENT), pendingIntent); } } android.util.Log.i(""twyen"", ""broadcast sent""); mContext.sendBroadcastAsUser(intent, userHandle, android.Manifest.permission.READ_PHONE_STATE); return true; } return false; }",124b689c68ce0dcd0e70c405b2d7f98745f8f068,"sendNotificationCustomComponent(java.lang.Integer,java.lang.String,android.app.PendingIntent,boolean)","sendNotificationThroughDefaultDialer(java.lang.Integer,java.lang.String,android.app.PendingIntent,boolean,android.os.UserHandle)",4,6,"private boolean maybeSendVoicemailNotificationUsingDefaultDialer(java.lang.Integer count, java.lang.String number, android.app.PendingIntent pendingIntent, boolean isSettingsIntent, android.os.UserHandle userHandle) { if (shouldManageNotificationThroughDefaultDialer(userHandle)) { android.content.Intent intent = getShowVoicemailIntentForDefaultDialer(userHandle); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setAction(TelephonyManager.ACTION_SHOW_VOICEMAIL_NOTIFICATION); if (count != null) { intent.putExtra(TelephonyManager.EXTRA_NOTIFICATION_COUNT, count); } if ((count == null) || (count > 0)) { if (!(android.text.TextUtils.isEmpty(number))) { intent.putExtra(TelephonyManager.EXTRA_VOICEMAIL_NUMBER, number); } if (pendingIntent != null) { intent.putExtra((isSettingsIntent ? android.telephony.TelephonyManager.EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT : android.telephony.TelephonyManager.EXTRA_CALL_VOICEMAIL_INTENT), pendingIntent); } } mContext.sendBroadcastAsUser(intent, userHandle, android.Manifest.permission.READ_PHONE_STATE); return true; } return false; }",1e2e16ce73cf6dd19e81e9d9776615d079b9a5f9,"maybeSendVoicemailNotificationUsingDefaultDialer(java.lang.Integer,java.lang.String,android.app.PendingIntent,boolean,android.os.UserHandle)",297828,273,260
293986,telecomm_java_android_telecom_ConnectionService.java,91.0,"@java.lang.Override public void hold(java.lang.String callId) { mHandler.obtainMessage(android.telecom.ConnectionService.MSG_HOLD, callId).sendToTarget(); }",44231a68a9d6a530a1bd121c4d2b4939ac395b88,"@java.lang.Override public void hold(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_HOLD); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_HOLD, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",3af4324f8098a26531179f45b07f8ec64ce1cecd,hold(java.lang.String),"hold(java.lang.String,android.telecom.Logging.Session$Info)",8,26,"@java.lang.Override public void hold(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_HOLD); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_HOLD, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",ecc899a5244d2e0a685a04e180f148abc3508e81,"hold(java.lang.String,android.telecom.Logging.Session$Info)",425197,154,153
43561,luni_src_test_java_libcore_javax_crypto_CipherTest.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAES_ECB_NoPadding_IncrementalUpdate_Success() throws java.lang.Exception { javax.crypto.SecretKey key = new javax.crypto.spec.SecretKeySpec(libcore.javax.crypto.CipherTest.AES_128_KEY, ""AES""); javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""AES/ECB/NoPadding""); c.init(javax.crypto.Cipher.ENCRYPT_MODE, key); for (int i = 0; i < ((libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded.length) - 1); i++) { final byte[] outputFragment = c.update(libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded, i, 1); assertNotNull(outputFragment); assertEquals(0, outputFragment.length); } final byte[] output = c.doFinal(libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded, ((libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded.length) - 1), 1); assertNotNull(output); assertEquals(libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded.length, output.length); assertTrue(java.util.Arrays.equals(libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded_Encrypted, output)); }",2e6f3f9b25fe8aa049c0ee1920c5701af008bc12,,testAES_ECB_NoPadding_IncrementalUpdate_Success(),7,44,"public void testAES_ECB_NoPadding_IncrementalUpdate_Success() throws java.lang.Exception { javax.crypto.SecretKey key = new javax.crypto.spec.SecretKeySpec(libcore.javax.crypto.CipherTest.AES_128_KEY, ""AES""); javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(""AES/ECB/NoPadding""); c.init(javax.crypto.Cipher.ENCRYPT_MODE, key); for (int i = 0; i < ((libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded.length) - 1); i++) { final byte[] outputFragment = c.update(libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded, i, 1); if (outputFragment != null) { assertEquals(0, outputFragment.length); } } final byte[] output = c.doFinal(libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded, ((libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded.length) - 1), 1); assertNotNull(output); assertEquals(libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded.length, output.length); assertTrue(java.util.Arrays.equals(libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Encrypted, output)); }",24a7f64c1d5c2590215a2fa717b5ae547711c510,testAES_ECB_NoPadding_IncrementalUpdate_Success(),278631,293,334
303277,dx_src_com_android_jack_dx_rop_cst_CstMethodHandleRef.java,,,,@java.lang.Override protected int compareTo0(@javax.annotation.Nonnull com.android.jack.dx.rop.cst.Constant other) { assert other instanceof com.android.jack.dx.rop.cst.CstMethodHandleRef; int cmp = getKind().compareTo(((com.android.jack.dx.rop.cst.CstMethodHandleRef) (other)).getKind()); if (cmp != 0) { return cmp; } return getMemberRef().compareTo(((com.android.jack.dx.rop.cst.CstMethodHandleRef) (other)).getMemberRef()); },141e7dc641db14d7a7db7a3be9822eeef90a06bb,,compareTo0(com.android.jack.dx.rop.cst.Constant),5,8,@java.lang.Override protected int compareTo0(@javax.annotation.Nonnull com.android.jack.dx.rop.cst.Constant other) { assert other instanceof com.android.jack.dx.rop.cst.CstMethodHandleRef; int cmp = kind.compareTo(((com.android.jack.dx.rop.cst.CstMethodHandleRef) (other)).kind); if (cmp != 0) { return cmp; } return memberRef.compareTo(((com.android.jack.dx.rop.cst.CstMethodHandleRef) (other)).memberRef); },dec9a64b54460aa1f439f8dcf1643cd143d39027,compareTo0(com.android.jack.dx.rop.cst.Constant),74264,133,131
323884,Common_src_com_googlecode_android_scripting_facade_bluetooth_GattClientFacade.java,27.0,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Get Bluetooth Gatt Services"") public java.util.ArrayList<java.lang.String> gattClientGetDiscoveredDescriptorUuids(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""index"") java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""serviceIndex"") java.lang.Integer serviceIndex, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""characteristicUuid"") java.lang.String characteristicUuid) throws java.lang.Exception { if ((mBluetoothGattDiscoveredServicesList.get(index)) != null) { if ((mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex)) != null) { android.bluetooth.BluetoothGattService service = mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex); java.util.UUID cUuid = java.util.UUID.fromString(characteristicUuid); if ((service.getCharacteristic(cUuid)) != null) { java.util.ArrayList<java.lang.String> uuidList = new java.util.ArrayList<java.lang.String>(); for (android.bluetooth.BluetoothGattDescriptor mDesc : service.getCharacteristic(cUuid).getDescriptors()) { uuidList.add(mDesc.getUuid().toString()); } return uuidList; } else { throw new java.lang.Exception((""Invalid characeristicUuid : "" + characteristicUuid)); } } else { throw new java.lang.Exception((""Invalid serviceIndex input:"" + index)); } } else { throw new java.lang.Exception((""Invalid index input:"" + index)); } }",3c7fe4569ba61266e319117be965bd0d07b43ec1,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Get Bluetooth Gatt Services"") public java.util.ArrayList<java.lang.String> gattClientGetDiscoveredDescriptorUuids(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""index"") java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""serviceIndex"") java.lang.Integer serviceIndex, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""characteristicIndex"") java.lang.Integer characteristicIndex) throws java.lang.Exception { if ((mBluetoothGattDiscoveredServicesList.get(index)) == null) { throw new java.lang.Exception((""Invalid index: "" + index)); } if ((mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex)) == null) { throw new java.lang.Exception((""Invalid serviceIndex: "" + serviceIndex)); } java.util.List<android.bluetooth.BluetoothGattCharacteristic> charList = mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex).getCharacteristics(); if ((charList.get(characteristicIndex)) == null) { throw new java.lang.Exception((""Invalid characteristicIndex: "" + characteristicIndex)); } java.util.List<android.bluetooth.BluetoothGattDescriptor> descList = charList.get(characteristicIndex).getDescriptors(); java.lang.System.out.println((""TACOOOOO: "" + (descList.toString()))); java.util.ArrayList<java.lang.String> uuidList = new java.util.ArrayList<java.lang.String>(); for (android.bluetooth.BluetoothGattDescriptor mDesc : descList) { uuidList.add(mDesc.getUuid().toString()); } return uuidList; }",432d3ebbb3fd45a57c3f38a0787fc222e46d5eb7,"gattClientGetDiscoveredDescriptorUuids(java.lang.Integer,java.lang.Integer,java.lang.String)","gattClientGetDiscoveredDescriptorUuids(java.lang.Integer,java.lang.Integer,java.lang.Integer)",15,26,"@java.lang.Deprecated @com.googlecode.android_scripting.rpc.Rpc(description = ""Get Bluetooth Gatt Services"") public java.util.ArrayList<java.lang.String> gattClientGetDiscoveredDescriptorUuids(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""index"") java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""serviceIndex"") java.lang.Integer serviceIndex, @com.googlecode.android_scripting.rpc.RpcParameter(name = ""characteristicUuid"") java.lang.String characteristicUuid) throws java.lang.Exception { if ((mBluetoothGattDiscoveredServicesList.get(index)) != null) { if ((mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex)) != null) { android.bluetooth.BluetoothGattService service = mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex); java.util.UUID cUuid = java.util.UUID.fromString(characteristicUuid); if ((service.getCharacteristic(cUuid)) != null) { java.util.ArrayList<java.lang.String> uuidList = new java.util.ArrayList<java.lang.String>(); for (android.bluetooth.BluetoothGattDescriptor mDesc : service.getCharacteristic(cUuid).getDescriptors()) { uuidList.add(mDesc.getUuid().toString()); } return uuidList; } else { throw new java.lang.Exception((""Invalid characeristicUuid : "" + characteristicUuid)); } } else { throw new java.lang.Exception((""Invalid serviceIndex input:"" + index)); } } else { throw new java.lang.Exception((""Invalid index input:"" + index)); } }",9040f9f9ee8e3982fe48c1e5a1e014bec37c66c0,"gattClientGetDiscoveredDescriptorUuids(java.lang.Integer,java.lang.Integer,java.lang.String)",132238,399,383
99283,login_src_com_google_gct_login_ui_GoogleLoginUsersPanel.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void mouseClicked(java.awt.event.MouseEvent mouseEvent) { list.updateUI(); if (!(valueChanged)) { java.lang.System.out.println((""valueChanged = "" + (valueChanged))); java.lang.System.out.println(""in mouseClicked function""); java.lang.System.out.println((((""X = "" + (mouseEvent.getX())) + ""; Y = "") + (mouseEvent.getY()))); com.intellij.ui.components.JBList theList = ((com.intellij.ui.components.JBList) (mouseEvent.getSource())); int index = theList.locationToIndex(mouseEvent.getPoint()); if (index >= 0) { boolean inPayUrl = com.google.gct.login.ui.UsersListCellRenderer.inPlayConsoleUrl(mouseEvent.getPoint(), index); java.lang.System.out.println((""in play url = "" + inPayUrl)); if (!inPayUrl) { boolean inConsoleUrl = com.google.gct.login.ui.UsersListCellRenderer.inCloudConsoleUrl(mouseEvent.getPoint(), index); java.lang.System.out.println((""in console url = "" + inConsoleUrl)); } } } valueChanged = false; }",138d44b8606932f9df5193d1b678c611c74fb149,,mouseClicked(java.awt.event.MouseEvent),7,3,"@java.lang.Override public void mouseClicked(java.awt.event.MouseEvent mouseEvent) { list.updateUI(); if (!(valueChanged)) { int index = list.locationToIndex(mouseEvent.getPoint()); if (index >= 0) { boolean inPlayUrl = usersListCellRenderer.inPlayConsoleUrl(mouseEvent.getPoint(), index); if (inPlayUrl) { com.intellij.ide.BrowserUtil.browse(com.google.gct.login.ui.GoogleLoginUsersPanel.PLAY_CONSOLE_URL); } else { boolean inCloudUrl = usersListCellRenderer.inCloudConsoleUrl(mouseEvent.getPoint(), index); if (inCloudUrl) { com.intellij.ide.BrowserUtil.browse(com.google.gct.login.ui.GoogleLoginUsersPanel.CLOUD_CONSOLE_URL); } } } } valueChanged = false; }",0834c334f9a63ec88f57e51ecebcda106de2c04c,mouseClicked(java.awt.event.MouseEvent),18946,269,181
588346,src_java_com_android_internal_telephony_uicc_UiccCard.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int getCardId() { return 0; },eb9fdeaa928db87ed7624660e690196d50580c31,,getCardId(),7,24,public java.lang.String getCardId() { if ((mCardId) != null) { return mCardId; } else if ((mUiccProfile) != null) { return mUiccProfile.getIccId(); } else { return null; } },16a95de253cd813e98ff399171c6c184e09ecd50,getCardId(),210504,10,60
311386,hostsidetests_net_app_src_com_android_cts_net_hostside_AbstractRestrictBackgroundNetworkTestCase.java,56.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected boolean canDisableNetworkMetering() throws java.lang.Exception { final android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); assertNotNull(""Could not get active network"", info); if ((info.getType()) == (android.net.ConnectivityManager.TYPE_WIFI)) { return true; } return !(mCm.isActiveNetworkMetered()); }",5b23494a8e35387ccaf17a6f8cb44b3f3b295427,,canDisableNetworkMetering(),3,4,"protected boolean setUnmeteredNetwork() throws java.lang.Exception { final android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); assertNotNull(""Could not get active network"", info); if (!(mCm.isActiveNetworkMetered())) { android.util.Log.d(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG, (""Active network is not metered: "" + info)); } else if ((info.getType()) == (android.net.ConnectivityManager.TYPE_WIFI)) { android.util.Log.i(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG, (""Setting active WI-FI network as not metered: "" + info)); setWifiMeteredStatus(false); } else { android.util.Log.d(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG, (""Active network cannot be set to un-metered: "" + info)); return false; } assertActiveNetworkMetered(false); return true; }",61d5de04bfe94a2a8e0d0e65a087220b421de58a,setUnmeteredNetwork(),135331,77,236
586414,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,8.0,"@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",5eddc143711d1cfd04adb46b91240557ebafd8fe,"@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt()); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",26824b0e1961e58071a37129ac90597de5806c3b,testTransportModeTransformBinderDeath(),testTransportModeTransformBinderDeath(),3,7,"@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",acbfbeb9bfd2fe4904dfd23cfeed59c08c3e20a1,testTransportModeTransformBinderDeath(),47284,371,296
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFmax.java,,,,"private void checkFmaxFloat2Float2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmaxFloat2Float2(inX, out); verifyResultsFmaxFloat2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmaxFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmaxFloat2Float2(inX, out); verifyResultsFmaxFloat2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmaxFloat2Float2: "" + (e.toString()))); } }",c77afc490f30651f2daf6186f75ba2074418defa,,checkFmaxFloat2Float2(),9,3,"private void checkFmaxFloat2Float2Float2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 9054100515228441726L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 9054100515228441726L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmaxFloat2Float2Float2(inX, out); verifyResultsFmaxFloat2Float2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmaxFloat2Float2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmaxFloat2Float2Float2(inX, out); verifyResultsFmaxFloat2Float2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmaxFloat2Float2Float2: "" + (e.toString()))); } }",95c7786b6e460820574249277271f8daa8b70a05,checkFmaxFloat2Float2Float2(),143265,443,395
174892,jack-tests_tests_com_android_jack_java8_GwtTest.java,,,,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testInterfaceThis() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_51).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",13e592661f2958ae44b31b1feeeca6d8a64934b2,,testInterfaceThis(),7,44,"@org.junit.Test public void testInterfaceThis() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_51).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",90020cced0f5c95c10ef4b25f2ec3b1e18027f1e,testInterfaceThis(),261317,103,90
81416,tests_tests_renderscript_src_android_renderscript_cts_TestDegrees.java,,,,"private void checkDegreesFloat2() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inValue, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testDegreesFloat2(inValue, out); verifyResultsDegreesFloat2(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testDegreesFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testDegreesFloat2(inValue, out); verifyResultsDegreesFloat2(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testDegreesFloat2: "" + (e.toString()))); } }",7dcc54d16269c7a8ddf3c6cca47c33f59ec55ca3,,checkDegreesFloat2(),9,5,"private void checkDegreesFloat2Float2() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 550005316802551612L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testDegreesFloat2Float2(inValue, out); verifyResultsDegreesFloat2Float2(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testDegreesFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testDegreesFloat2Float2(inValue, out); verifyResultsDegreesFloat2Float2(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testDegreesFloat2Float2: "" + (e.toString()))); } }",811af7da6edfd9522d9e588267c36a44e2efeb4a,checkDegreesFloat2Float2(),142628,322,305
482797,services_core_java_com_android_server_am_ActivityManagerService.java,598.0,"@java.lang.Override public final int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller(""startActivity""); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, ""startActivity"", null); return mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, profilerInfo, null, null, bOptions, false, userId, null, null, ""startActivityAsUser""); }",5dd5f8f480ed3ca341efc05053ae0eadfeeba6d4,"@java.lang.Override public final int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int struntimeFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller(""startActivity""); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, ""startActivity"", null); return mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, struntimeFlags, profilerInfo, null, null, bOptions, false, userId, null, null, ""startActivityAsUser""); }",5c68467b36015644147d7266b4518831d665a217,"startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)","startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)",3,598,"@java.lang.Override public final int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller(""startActivity""); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, ""startActivity"", null); return mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, profilerInfo, null, null, bOptions, false, userId, null, null, ""startActivityAsUser""); }",5dd5f8f480ed3ca341efc05053ae0eadfeeba6d4,"startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)",502223,218,216
311525,tests_wifitests_src_com_android_server_wifi_RecommendedNetworkEvaluatorTest.java,,,,"@org.junit.Test public void testUpdate_oneScored_oneUnscored() { when(mNetworkScoreCache.isScoredNetwork(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1.getScanResult())).thenReturn(true); when(mNetworkScoreCache.isScoredNetwork(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2.getScanResult())).thenReturn(false); mRecommendedNetworkEvaluator.update(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1, com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2)); verify(mNetworkScoreManager).requestScores(mNetworkKeyArrayCaptor.capture()); assertEquals(1, mNetworkKeyArrayCaptor.getValue().length); assertEquals(new android.net.NetworkKey(new android.net.WifiKey(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2.getSSID(), com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2.getBSSIDString())), mNetworkKeyArrayCaptor.getValue()[0]); }",958c844d14b068f11596b6e36a7b1f58544298ea,,testUpdate_oneScored_oneUnscored(),7,3,"@org.junit.Test public void testUpdate_oneScored_oneUnscored() { when(mNetworkScoreCache.isScoredNetwork(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult())).thenReturn(true); when(mNetworkScoreCache.isScoredNetwork(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult())).thenReturn(false); mRecommendedNetworkEvaluator.update(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL)); verify(mNetworkScoreManager).requestScores(mNetworkKeyArrayCaptor.capture()); assertEquals(1, mNetworkKeyArrayCaptor.getValue().length); android.net.NetworkKey expectedNetworkKey = new android.net.NetworkKey(new android.net.WifiKey(com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getSSID()), com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getBSSIDString())); assertEquals(expectedNetworkKey, mNetworkKeyArrayCaptor.getValue()[0]); }",b4518b0091aed197c2f6e3eca91be3f956655975,testUpdate_oneScored_oneUnscored(),180357,249,302
174892,jack-tests_tests_com_android_jack_java8_GwtTest.java,,,,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testMultipleDefaults_superclass_right() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_50).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",2507392d542b86cb933a1e57b6db29bc57b0032e,,testMultipleDefaults_superclass_right(),7,47,"@org.junit.Test public void testMultipleDefaults_superclass_right() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_50).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",fe060cbaba3632c15b547d837cdf606c293a29b5,testMultipleDefaults_superclass_right(),261352,107,94
160082,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_VdPreview.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.NonNull public static com.sun.org.apache.xml.internal.serialize.OutputFormat getPrettyPrintFormat() { com.sun.org.apache.xml.internal.serialize.OutputFormat format = new com.sun.org.apache.xml.internal.serialize.OutputFormat(); format.setLineWidth(120); format.setIndenting(true); format.setIndent(4); format.setEncoding(""UTF-8""); format.setOmitComments(true); return format; }",0b15d57e5fe689891d81ebee97c145530c170d16,,getPrettyPrintFormat(),6,2,"@com.android.annotations.NonNull private static com.sun.org.apache.xml.internal.serialize.OutputFormat getPrettyPrintFormat() { com.sun.org.apache.xml.internal.serialize.OutputFormat format = new com.sun.org.apache.xml.internal.serialize.OutputFormat(); format.setLineWidth(120); format.setIndenting(true); format.setIndent(4); format.setEncoding(""UTF-8""); format.setOmitComments(true); return format; }",62a0e1b6f16e9f8b1499236d9f9a423acffb9099,getPrettyPrintFormat(),410185,104,104
583630,src_com_android_bips_util_Stoppable.java,,,,void stop();,c0100f2b72c5dc62cccf62e57fe1f17a2b990b64,,stop(),4,0,void cancel();,9ecbe6e52b4ae7cd15862e804e760a9fd487dda6,cancel(),33309,3,3
175765,luni_src_main_java_java_math_BigInt.java,43.0,"void multiplyByPositiveInt(int w) { java.math.NativeBN.BN_mul_word(this.bignum, w); }",a951042e713953d7496a0e7ef32c20200ce9a2b3,"void multiplyByPositiveInt(int w) { java.math.NativeBN.BN_mul_word(this.nativePtr, w); }",c6c3c746ff83bb8c2213e71d675f44e58b89b934,multiplyByPositiveInt(int),multiplyByPositiveInt(int),10,42,"void multiplyByPositiveInt(int w) { java.math.NativeBN.BN_mul_word(this.bignum, w); }",a951042e713953d7496a0e7ef32c20200ce9a2b3,multiplyByPositiveInt(int),337195,33,33
144667,keystore_java_android_security_KeyStoreCipherSpi.java,,,,"private void ensureKeystoreOperationInitialized() { if ((mMainDataStreamer) != null) { return; } if ((mKey) == null) { throw new java.lang.IllegalStateException(""Not initialized""); } android.security.keymaster.KeymasterArguments keymasterInputArgs = new android.security.keymaster.KeymasterArguments(); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_ALGORITHM, mAlgorithm); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE, mBlockMode); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_PADDING, mPadding); addAlgorithmSpecificParametersToBegin(keymasterInputArgs); android.security.keymaster.KeymasterArguments keymasterOutputArgs = new android.security.keymaster.KeymasterArguments(); android.security.keymaster.OperationResult opResult = mKeyStore.begin(mKey.getAlias(), (mEncrypting ? android.security.keymaster.KeymasterDefs.KM_PURPOSE_ENCRYPT : android.security.keymaster.KeymasterDefs.KM_PURPOSE_DECRYPT), true, keymasterInputArgs, mAdditionalEntropyForBegin, keymasterOutputArgs); mAdditionalEntropyForBegin = null; if (opResult == null) { throw new android.security.KeyStoreConnectException(); } else if (((opResult.resultCode) != (android.security.keymaster.KeymasterDefs.KM_ERROR_OK)) && ((opResult.resultCode) != (KeyStore.NO_ERROR))) { throw new android.security.CryptoOperationException(""Failed to start keystore operation"", android.security.KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode)); } if ((opResult.token) == null) { throw new android.security.CryptoOperationException(""Keystore returned null operation token""); } mOperationToken = opResult.token; loadAlgorithmSpecificParametersFromBeginResult(keymasterOutputArgs); mFirstOperationInitiated = true; mMainDataStreamer = new android.security.KeyStoreCryptoOperationChunkedStreamer(new android.security.KeyStoreCryptoOperationChunkedStreamer.MainDataStream(mKeyStore, opResult.token)); }",152e92de725228b3371475c934fc48d22aa79680,,ensureKeystoreOperationInitialized(),3,10,"private void ensureKeystoreOperationInitialized() { if ((mMainDataStreamer) != null) { return; } if ((mKey) == null) { throw new java.lang.IllegalStateException(""Not initialized""); } android.security.keymaster.KeymasterArguments keymasterInputArgs = new android.security.keymaster.KeymasterArguments(); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_ALGORITHM, mAlgorithm); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE, mBlockMode); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_PADDING, mPadding); addAlgorithmSpecificParametersToBegin(keymasterInputArgs); android.security.keymaster.KeymasterArguments keymasterOutputArgs = new android.security.keymaster.KeymasterArguments(); android.security.keymaster.OperationResult opResult = mKeyStore.begin(mKey.getAlias(), (mEncrypting ? android.security.keymaster.KeymasterDefs.KM_PURPOSE_ENCRYPT : android.security.keymaster.KeymasterDefs.KM_PURPOSE_DECRYPT), true, keymasterInputArgs, mAdditionalEntropyForBegin, keymasterOutputArgs); mAdditionalEntropyForBegin = null; if (opResult == null) { throw new android.security.KeyStoreConnectException(); } else if ((opResult.resultCode) != (KeyStore.NO_ERROR)) { throw new android.security.CryptoOperationException(""Failed to start keystore operation"", android.security.KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode)); } if ((opResult.token) == null) { throw new android.security.CryptoOperationException(""Keystore returned null operation token""); } mOperationToken = opResult.token; loadAlgorithmSpecificParametersFromBeginResult(keymasterOutputArgs); mFirstOperationInitiated = true; mMainDataStreamer = new android.security.KeyStoreCryptoOperationChunkedStreamer(new android.security.KeyStoreCryptoOperationChunkedStreamer.MainDataStream(mKeyStore, opResult.token)); }",b2c0649ce41d6e1b1f82aca47265f110c1407722,ensureKeystoreOperationInitialized(),512899,479,452
144781,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_scope_VariantScope.java,,,,public java.util.Collection<java.io.File> getNdkOutputDirectories() { return ndkOutputDirectories; },3b405d9599f83610ae194be1a92cd01dd24c7a96,,getNdkOutputDirectories(),6,2,@com.android.annotations.NonNull public java.util.Collection<java.io.File> getNdkOutputDirectories() { return ndkOutputDirectories; },478efa7a84e68b1418a568f7b31876ac76f9596f,getNdkOutputDirectories(),337598,27,35
314476,src_com_android_server_telecom_CallsManager.java,53.0,"boolean onMediaButton(int type) { if (hasAnyCalls()) { if ((HeadsetMediaButton.SHORT_PRESS) == type) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if (ringingCall == null) { mCallAudioManager.toggleMute(); return true; } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { android.telecom.Log.d(this, ""handleHeadsetHook: longpress -> hangup""); com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); if (callToHangup != null) { callToHangup.disconnect(); return true; } } } return false; }",b26b9299b0078ad56762ab7ea11404f8d9a9f30d,"boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.event(callToHangup, Log.Events.INFO, ""media btn short press - end call.""); if (callToHangup != null) { callToHangup.disconnect(); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall != null) { android.telecom.Log.event(getForegroundCall(), Log.Events.INFO, ""media btn long press - reject""); ringingCall.reject(false, null); } else { android.telecom.Log.event(getForegroundCall(), Log.Events.INFO, ""media btn long press - mute""); mCallAudioManager.toggleMute(); } return true; } } return false; }",9c6732a2250a1d910d42bf11bfb17b01551defa6,onMediaButton(int),onMediaButton(int),4,53,"boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, ""media btn short press - end call.""); if (callToHangup != null) { callToHangup.disconnect(); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall != null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, ""media btn long press - reject""); ringingCall.reject(false, null); } else { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, ""media btn long press - mute""); mCallAudioManager.toggleMute(); } return true; } } return false; }",775bb691cb9f3e60df331a958c299433962067e3,onMediaButton(int),55201,308,314
170040,luni_src_main_java_libcore_io_ClassPathURLStreamHandler.java,2.0,"public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((jarFile.findEntry(entryName)) != null) { try { return new java.net.URL(""jar"", null, (-1), (((fileUri) + ""!/"") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException(""Invalid entry name"", e); } } return null; }",e1712760028dbf5dd3e277eaf3c89aefe21e771f,"public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { java.util.zip.ZipEntry entry = findEntryWithDirectoryFallback(entryName); if (entry != null) { entryName = entry.getName(); try { return new java.net.URL(""jar"", null, (-1), (((fileUri) + ""!/"") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException(""Invalid entry name"", e); } } return null; }",6b881b4f1fbbd9d922c6ed1c7963cfcba4ca7893,getEntryUrlOrNull(java.lang.String),getEntryUrlOrNull(java.lang.String),4,2,"public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((libcore.io.ClassPathURLStreamHandler.findEntryWithDirectoryFallback(jarFile, entryName)) != null) { try { return new java.net.URL(""jar"", null, (-1), (((fileUri) + ""!/"") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException(""Invalid entry name"", e); } } return null; }",2de73da224b383d85cf5be345e711ae0063d81ae,getEntryUrlOrNull(java.lang.String),237031,117,111
44640,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_project_LibraryClasspathContainerInitializer.java,7.0,"private static org.eclipse.jdt.core.IClasspathContainer allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject javaProject) { final org.eclipse.core.resources.IProject iProject = javaProject.getProject(); com.android.ide.eclipse.adt.AdtPlugin plugin = com.android.ide.eclipse.adt.AdtPlugin.getDefault(); if (plugin == null) { return null; } try { org.eclipse.jdt.core.IClasspathEntry[] rawClasspath = javaProject.getRawClasspath(); org.eclipse.jdt.core.IClasspathEntry[] oldRawClasspath = rawClasspath; boolean foundLibrariesContainer = false; for (org.eclipse.jdt.core.IClasspathEntry entry : rawClasspath) { int kind = entry.getEntryKind(); if (kind == (org.eclipse.jdt.core.IClasspathEntry.CPE_CONTAINER)) { java.lang.String path = entry.getPath().toString(); if (AdtConstants.CONTAINER_LIBRARIES.equals(path)) { foundLibrariesContainer = true; break; } } } if (foundLibrariesContainer == false) { rawClasspath = com.android.ide.eclipse.adt.internal.project.ProjectHelper.addEntryToClasspath(rawClasspath, org.eclipse.jdt.core.JavaCore.newContainerEntry(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), true)); } if (rawClasspath != oldRawClasspath) { javaProject.setRawClasspath(rawClasspath, new org.eclipse.core.runtime.NullProgressMonitor()); } } catch (org.eclipse.jdt.core.JavaModelException e) { return null; } com.android.ide.eclipse.adt.internal.sdk.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(iProject); if (state == null) { return null; } java.util.List<org.eclipse.jdt.core.IClasspathEntry> entries = new java.util.ArrayList<org.eclipse.jdt.core.IClasspathEntry>(); org.eclipse.core.resources.IWorkspaceRoot workspaceRoot = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot(); java.util.Set<java.io.File> jarFiles = new java.util.HashSet<java.io.File>(); java.util.Set<org.eclipse.core.resources.IProject> refProjects = new java.util.HashSet<org.eclipse.core.resources.IProject>(); java.util.List<org.eclipse.core.resources.IProject> libProjects = state.getFullLibraryProjects(); for (org.eclipse.core.resources.IProject libProject : libProjects) { org.eclipse.core.resources.IFolder outputFolder = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getAndroidOutputFolder(libProject); if (outputFolder != null) { org.eclipse.core.resources.IFile jarIFile = outputFolder.getFile(((libProject.getName().toLowerCase()) + (com.android.SdkConstants.DOT_JAR))); java.util.List<org.eclipse.core.runtime.IPath> srcs = com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.getSourceClasspaths(libProject); org.eclipse.core.runtime.IPath sourceFolder = null; for (org.eclipse.core.runtime.IPath src : srcs) { org.eclipse.core.resources.IFolder srcFolder = workspaceRoot.getFolder(src); if ((srcFolder.isDerived()) == false) { sourceFolder = src; break; } } org.eclipse.jdt.core.IClasspathEntry entry = org.eclipse.jdt.core.JavaCore.newLibraryEntry(jarIFile.getLocation(), sourceFolder, null, true); entries.add(entry); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getDependencyListFromClasspath(libProject, refProjects, jarFiles, true); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getJarListFromLibsFolder(libProject, jarFiles); } } com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.processReferencedProjects(iProject, refProjects, jarFiles); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getJarListFromLibsFolder(iProject, jarFiles); if (((state.getTarget()) != null) && ((state.getTarget().getVersion().getApiLevel()) <= 15)) { java.io.File annotationsJar = new java.io.File(com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent().getSdkLocation(), (((((com.android.SdkConstants.FD_TOOLS) + (java.io.File.separator)) + (com.android.SdkConstants.FD_SUPPORT)) + (java.io.File.separator)) + (com.android.SdkConstants.FN_ANNOTATIONS_JAR))); jarFiles.add(annotationsJar); } for (org.eclipse.core.resources.IProject p : refProjects) { entries.add(org.eclipse.jdt.core.JavaCore.newProjectEntry(p.getFullPath(), true)); } com.android.sdklib.build.JarListSanitizer sanitizer = new com.android.sdklib.build.JarListSanitizer(iProject.getFolder(SdkConstants.FD_OUTPUT).getLocation().toFile(), new com.android.ide.eclipse.adt.AndroidPrintStream(iProject, null, com.android.ide.eclipse.adt.AdtPlugin.getOutStream())); java.lang.String errorMessage = null; try { java.util.List<java.io.File> sanitizedList = sanitizer.sanitize(jarFiles); for (java.io.File jarFile : sanitizedList) { if (jarFile instanceof com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.CPEFile) { com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.CPEFile cpeFile = ((com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.CPEFile) (jarFile)); org.eclipse.jdt.core.IClasspathEntry e = cpeFile.getClasspathEntry(); entries.add(org.eclipse.jdt.core.JavaCore.newLibraryEntry(e.getPath(), e.getSourceAttachmentPath(), e.getSourceAttachmentRootPath(), e.getAccessRules(), e.getExtraAttributes(), true)); } else { java.lang.String jarPath = jarFile.getAbsolutePath(); org.eclipse.core.runtime.IPath sourceAttachmentPath = null; org.eclipse.jdt.core.IClasspathAttribute javaDocAttribute = null; java.io.File jarProperties = new java.io.File((jarPath + (com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.DOT_PROPERTIES))); if (jarProperties.isFile()) { java.util.Properties p = new java.util.Properties(); java.io.InputStream is = null; try { p.load((is = new java.io.FileInputStream(jarProperties))); java.lang.String value = p.getProperty(com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.ATTR_SRC); if (value != null) { java.io.File srcPath = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getFile(jarFile, value); if (srcPath.exists()) { sourceAttachmentPath = new org.eclipse.core.runtime.Path(srcPath.getAbsolutePath()); } } value = p.getProperty(com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.ATTR_DOC); if (value != null) { java.io.File docPath = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getFile(jarFile, value); if (docPath.exists()) { try { javaDocAttribute = org.eclipse.jdt.core.JavaCore.newClasspathAttribute(IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME, docPath.toURI().toURL().toString()); } catch (java.net.MalformedURLException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, ""Failed to process 'doc' attribute for %s"", jarProperties.getAbsolutePath()); } } } } catch (java.io.FileNotFoundException e) { } catch (java.io.IOException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, ""Failed to read %s"", jarProperties.getAbsolutePath()); } finally { if (is != null) { try { is.close(); } catch (java.io.IOException e) { } } } } if (javaDocAttribute != null) { entries.add(org.eclipse.jdt.core.JavaCore.newLibraryEntry(new org.eclipse.core.runtime.Path(jarPath), sourceAttachmentPath, null, new org.eclipse.jdt.core.IAccessRule[0], new org.eclipse.jdt.core.IClasspathAttribute[]{ javaDocAttribute }, true)); } else { entries.add(org.eclipse.jdt.core.JavaCore.newLibraryEntry(new org.eclipse.core.runtime.Path(jarPath), sourceAttachmentPath, null, true)); } } } } catch (com.android.sdklib.build.JarListSanitizer.DifferentLibException e) { errorMessage = e.getMessage(); com.android.ide.eclipse.adt.AdtPlugin.printErrorToConsole(iProject, ((java.lang.Object[]) (e.getDetails()))); } catch (com.android.sdklib.build.JarListSanitizer.Sha1Exception e) { errorMessage = e.getMessage(); } processError(iProject, errorMessage, AdtConstants.MARKER_DEPENDENCY, true); return new com.android.ide.eclipse.adt.internal.project.AndroidClasspathContainer(entries.toArray(new org.eclipse.jdt.core.IClasspathEntry[entries.size()]), new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), ""Android Dependencies"", org.eclipse.jdt.core.IClasspathContainer.K_APPLICATION); }",115d8e4f67a7fc8a8d9eca5cb864dbf1cb826366,"private static org.eclipse.jdt.core.IClasspathContainer allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject javaProject) { final org.eclipse.core.resources.IProject iProject = javaProject.getProject(); com.android.ide.eclipse.adt.internal.sdk.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(iProject); if (state == null) { return null; } java.util.List<org.eclipse.jdt.core.IClasspathEntry> entries = new java.util.ArrayList<org.eclipse.jdt.core.IClasspathEntry>(); java.util.Set<java.io.File> jarFiles = new java.util.HashSet<java.io.File>(); java.util.Set<org.eclipse.core.resources.IProject> refProjects = new java.util.HashSet<org.eclipse.core.resources.IProject>(); java.util.List<org.eclipse.core.resources.IProject> libProjects = state.getFullLibraryProjects(); for (org.eclipse.core.resources.IProject libProject : libProjects) { com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getDependencyListFromClasspath(libProject, refProjects, jarFiles, true); } com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.processReferencedProjects(iProject, refProjects, jarFiles); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getJarListFromLibsFolder(iProject, jarFiles); for (org.eclipse.core.resources.IProject p : refProjects) { entries.add(org.eclipse.jdt.core.JavaCore.newProjectEntry(p.getFullPath(), true)); } entries.addAll(com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.convertJarsToClasspathEntries(iProject, jarFiles)); return com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateContainer(javaProject, entries, new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), ""Android Libraries""); }",6ccae277af26c45f444e9c2c0c5ce0266071ff26,allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject),allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject),3,6,"private static org.eclipse.jdt.core.IClasspathContainer allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject javaProject) { final org.eclipse.core.resources.IProject iProject = javaProject.getProject(); com.android.ide.eclipse.adt.internal.sdk.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(iProject); if (state == null) { return null; } java.util.List<org.eclipse.jdt.core.IClasspathEntry> entries = new java.util.ArrayList<org.eclipse.jdt.core.IClasspathEntry>(); java.util.Set<java.io.File> jarFiles = new java.util.HashSet<java.io.File>(); java.util.Set<org.eclipse.core.resources.IProject> refProjects = new java.util.HashSet<org.eclipse.core.resources.IProject>(); java.util.List<org.eclipse.core.resources.IProject> libProjects = state.getFullLibraryProjects(); for (org.eclipse.core.resources.IProject libProject : libProjects) { com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getDependencyListFromClasspath(libProject, refProjects, jarFiles, true); } com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.processReferencedProjects(iProject, refProjects, jarFiles); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getJarListFromLibsFolder(iProject, jarFiles); for (org.eclipse.core.resources.IProject p : refProjects) { entries.add(org.eclipse.jdt.core.JavaCore.newProjectEntry(p.getFullPath(), true)); } entries.addAll(com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.convertJarsToClasspathEntries(iProject, jarFiles)); return com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateContainer(javaProject, entries, new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_PRIVATE_LIBRARIES), ""Android Private Libraries""); }",8c0c013c2ed12cafd8bffb8c760b49ba07973205,allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject),174959,508,511
144460,sdk-common_src_test_java_com_android_ide_common_caching_CreatingCacheTest.java,4.0,"@java.lang.Override public void run() { try { java.lang.Thread.sleep(mSleep); mResult = mCache.get(""foo""); } catch (java.lang.InterruptedException e) { mException = e; } }",d67a0ba6331ae1ee2ca6d590f4cdf28a2beea52b,"@java.lang.Override public void run() { mResult = mCache.get(""foo""); }",474b27a4e860e0f85643f0b797b4fc4f75121218,run(),run(),2,5,"@java.lang.Override public void run() { if ((mLatch) != null) { mResult = mCache.get(""foo"", new com.android.ide.common.caching.CreatingCache.QueryListener() { @java.lang.Override public void onQueryState(@com.android.annotations.NonNull com.android.ide.common.caching.CreatingCache.State state) { mLatch.countDown(); } }); } else { mResult = mCache.get(""foo""); } }",9bd5c184699e002a97ab2145f70a0bcd7f8c95e9,run(),357084,22,107
116116,test_422-type-conversion_src_Main.java,46.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void longToDouble() { Main.assertDoubleEquals(1.0, Main.$opt$LongToDouble(1L)); Main.assertDoubleEquals(0.0, Main.$opt$LongToDouble(0L)); Main.assertDoubleEquals((-1.0), Main.$opt$LongToDouble((-1L))); Main.assertDoubleEquals(51.0, Main.$opt$LongToDouble(51L)); Main.assertDoubleEquals((-51.0), Main.$opt$LongToDouble((-51L))); Main.assertDoubleEquals(2.147483647E9, Main.$opt$LongToDouble(2147483647L)); Main.assertDoubleEquals((-2.147483647E9), Main.$opt$LongToDouble((-2147483647L))); Main.assertDoubleEquals((-2.147483648E9), Main.$opt$LongToDouble((-2147483648L))); Main.assertDoubleEquals(2.147483648E9, Main.$opt$LongToDouble(2147483648L)); Main.assertDoubleEquals((-2.147483649E9), Main.$opt$LongToDouble((-2147483649L))); Main.assertDoubleEquals(4.294967296E9, Main.$opt$LongToDouble(4294967296L)); Main.assertDoubleEquals(1.40739635871745E14, Main.$opt$LongToDouble(140739635871745L)); Main.assertDoubleEquals((-1.40739635871745E14), Main.$opt$LongToDouble((-140739635871745L))); Main.assertDoubleEquals(9.223372036854776E18, Main.$opt$LongToDouble(9223372036854775807L)); Main.assertDoubleEquals((-9.223372036854776E18), Main.$opt$LongToDouble((-9223372036854775807L))); Main.assertDoubleEquals((-9.223372036854776E18), Main.$opt$LongToDouble(-9223372036854775808L)); }",439aefee8d189435bd4d14fbfb9eb502c024c9d2,,longToDouble(),6,25,"private static void longToDouble() { Main.assertDoubleEquals(1.0, Main.$opt$LongToDouble(1L)); Main.assertDoubleEquals(0.0, Main.$opt$LongToDouble(0L)); Main.assertDoubleEquals((-1.0), Main.$opt$LongToDouble((-1L))); Main.assertDoubleEquals(51.0, Main.$opt$LongToDouble(51L)); Main.assertDoubleEquals((-51.0), Main.$opt$LongToDouble((-51L))); Main.assertDoubleEquals(2.147483647E9, Main.$opt$LongToDouble(2147483647L)); Main.assertDoubleEquals((-2.147483647E9), Main.$opt$LongToDouble((-2147483647L))); Main.assertDoubleEquals((-2.147483648E9), Main.$opt$LongToDouble((-2147483648L))); Main.assertDoubleEquals(2.147483648E9, Main.$opt$LongToDouble(2147483648L)); Main.assertDoubleEquals((-2.147483649E9), Main.$opt$LongToDouble((-2147483649L))); Main.assertDoubleEquals(4.294967296E9, Main.$opt$LongToDouble(4294967296L)); Main.assertDoubleEquals((-4.294967296E9), Main.$opt$LongToDouble((-4294967296L))); Main.assertDoubleEquals(1.40739635871745E14, Main.$opt$LongToDouble(140739635871745L)); Main.assertDoubleEquals((-1.40739635871745E14), Main.$opt$LongToDouble((-140739635871745L))); Main.assertDoubleEquals(9.223372036854776E18, Main.$opt$LongToDouble(9223372036854775807L)); Main.assertDoubleEquals((-9.223372036854776E18), Main.$opt$LongToDouble((-9223372036854775807L))); Main.assertDoubleEquals((-9.223372036854776E18), Main.$opt$LongToDouble(-9223372036854775808L)); }",eb38b9521128b5cc1d4c390e104c64a74b67d176,longToDouble(),360244,442,473
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,,"@org.junit.Before public void setup() throws java.lang.Exception { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""setup""); java.io.File applicationDataDir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.multidexlegacytestservices.test2.ServicesTests.clearDirContent(applicationDataDir); targetFilesDir = android.support.test.InstrumentationRegistry.getTargetContext().getFilesDir(); android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""setup done""); }",6f9e7d3f5d4d37b74e92fa90f9b5d2779a841ca8,,setup(),7,8,"@org.junit.Before public void setup() throws java.lang.Exception { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""setup""); killServices(); java.io.File applicationDataDir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.multidexlegacytestservices.test2.ServicesTests.clearDirContent(applicationDataDir); targetFilesDir = android.support.test.InstrumentationRegistry.getTargetContext().getFilesDir(); android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""setup done""); }",2dde9eeeae94a83f5b62d2a9cc34d4b945981fa7,setup(),443213,152,155
142189,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_ExtraModelInfo.java,1.0,"public void registerJavaArtifact(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.api.BaseVariant variant, @com.android.annotations.NonNull java.lang.String assembleTaskName, @com.android.annotations.NonNull java.lang.String javaCompileTaskName, @com.android.annotations.NonNull java.util.Collection<java.io.File> generatedSourceFolders, @com.android.annotations.NonNull java.lang.Iterable<java.lang.String> ideSetupTaskNames, @com.android.annotations.NonNull org.gradle.api.artifacts.Configuration configuration, @com.android.annotations.NonNull java.io.File classesFolder, @com.android.annotations.Nullable com.android.builder.model.SourceProvider sourceProvider) { com.android.builder.model.ArtifactMetaData artifactMetaData = extraArtifactMap.get(name); if (artifactMetaData == null) { throw new java.lang.IllegalArgumentException(""Artifact with name $name is not yet registered. Use registerArtifactType()""); } if ((artifactMetaData.getType()) != (com.android.builder.model.ArtifactMetaData.TYPE_JAVA)) { throw new java.lang.IllegalArgumentException(""Artifact with name $name is not of type JAVA""); } com.android.builder.model.JavaArtifact artifact = new com.android.build.gradle.internal.model.JavaArtifactImpl(name, assembleTaskName, javaCompileTaskName, ideSetupTaskNames, generatedSourceFolders, classesFolder, new com.android.build.gradle.internal.ConfigurationDependencies(configuration), sourceProvider, null); extraJavaArtifacts.put(variant.getName(), artifact); }",f1c37fbff28a3bca4b78fb2be44b47ad24aa1314,"public void registerJavaArtifact(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.api.BaseVariant variant, @com.android.annotations.NonNull java.lang.String assembleTaskName, @com.android.annotations.NonNull java.lang.String javaCompileTaskName, @com.android.annotations.NonNull java.util.Collection<java.io.File> generatedSourceFolders, @com.android.annotations.NonNull java.lang.Iterable<java.lang.String> ideSetupTaskNames, @com.android.annotations.NonNull org.gradle.api.artifacts.Configuration configuration, @com.android.annotations.NonNull java.io.File classesFolder, @com.android.annotations.NonNull java.io.File runtimeJavaResourecesFolder, @com.android.annotations.Nullable com.android.builder.model.SourceProvider sourceProvider) { com.android.builder.model.ArtifactMetaData artifactMetaData = extraArtifactMap.get(name); if (artifactMetaData == null) { throw new java.lang.IllegalArgumentException(""Artifact with name $name is not yet registered. Use registerArtifactType()""); } if ((artifactMetaData.getType()) != (com.android.builder.model.ArtifactMetaData.TYPE_JAVA)) { throw new java.lang.IllegalArgumentException(""Artifact with name $name is not of type JAVA""); } com.android.builder.model.JavaArtifact artifact = new com.android.build.gradle.internal.model.JavaArtifactImpl(name, assembleTaskName, javaCompileTaskName, ideSetupTaskNames, generatedSourceFolders, classesFolder, runtimeJavaResourecesFolder, new com.android.build.gradle.internal.ConfigurationDependencies(configuration), sourceProvider, null); extraJavaArtifacts.put(variant.getName(), artifact); }",bd3fe317fd3a3e83a7fe1965db085a04e0ead865,"registerJavaArtifact(java.lang.String,com.android.build.gradle.api.BaseVariant,java.lang.String,java.lang.String,java.util.Collection,java.lang.Iterable,org.gradle.api.artifacts.Configuration,java.io.File,com.android.builder.model.SourceProvider)","registerJavaArtifact(java.lang.String,com.android.build.gradle.api.BaseVariant,java.lang.String,java.lang.String,java.util.Collection,java.lang.Iterable,org.gradle.api.artifacts.Configuration,java.io.File,java.io.File,com.android.builder.model.SourceProvider)",3,0,"public void registerJavaArtifact(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.api.BaseVariant variant, @com.android.annotations.NonNull java.lang.String assembleTaskName, @com.android.annotations.NonNull java.lang.String javaCompileTaskName, @com.android.annotations.NonNull java.util.Collection<java.io.File> generatedSourceFolders, @com.android.annotations.NonNull java.lang.Iterable<java.lang.String> ideSetupTaskNames, @com.android.annotations.NonNull org.gradle.api.artifacts.Configuration configuration, @com.android.annotations.NonNull java.io.File classesFolder, @com.android.annotations.NonNull java.io.File javaResourcesFolder, @com.android.annotations.Nullable com.android.builder.model.SourceProvider sourceProvider) { com.android.builder.model.ArtifactMetaData artifactMetaData = extraArtifactMap.get(name); if (artifactMetaData == null) { throw new java.lang.IllegalArgumentException(""Artifact with name $name is not yet registered. Use registerArtifactType()""); } if ((artifactMetaData.getType()) != (com.android.builder.model.ArtifactMetaData.TYPE_JAVA)) { throw new java.lang.IllegalArgumentException(""Artifact with name $name is not of type JAVA""); } com.android.builder.model.JavaArtifact artifact = new com.android.build.gradle.internal.model.JavaArtifactImpl(name, assembleTaskName, javaCompileTaskName, ideSetupTaskNames, generatedSourceFolders, classesFolder, javaResourcesFolder, new com.android.build.gradle.internal.ConfigurationDependencies(configuration), sourceProvider, null); extraJavaArtifacts.put(variant.getName(), artifact); }",60ce34c2a6a423f3193ab6602feca5f72174fe0c,"registerJavaArtifact(java.lang.String,com.android.build.gradle.api.BaseVariant,java.lang.String,java.lang.String,java.util.Collection,java.lang.Iterable,org.gradle.api.artifacts.Configuration,java.io.File,java.io.File,com.android.builder.model.SourceProvider)",86722,405,397
390556,src_main_java_com_android_apksig_ApkSigner.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.nio.ByteBuffer getAndroidManifestFromApk(java.util.List<com.android.apksig.internal.zip.CentralDirectoryRecord> cdRecords, com.android.apksig.util.DataSource lhfSection) throws com.android.apksig.zip.ZipFormatException, java.io.IOException { com.android.apksig.internal.zip.CentralDirectoryRecord androidManifestCdRecord = null; for (com.android.apksig.internal.zip.CentralDirectoryRecord cdRecord : cdRecords) { if (com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME.equals(cdRecord.getName())) { androidManifestCdRecord = cdRecord; break; } } if (androidManifestCdRecord == null) { return null; } return java.nio.ByteBuffer.wrap(com.android.apksig.internal.zip.LocalFileRecord.getUncompressedData(lhfSection, androidManifestCdRecord, lhfSection.size())); }",cf825fd6c6a46bf048cdc1ae5cb45c67e641e04a,,"getAndroidManifestFromApk(java.util.List,com.android.apksig.util.DataSource)",11,2,"static java.nio.ByteBuffer getAndroidManifestFromApk(java.util.List<com.android.apksig.internal.zip.CentralDirectoryRecord> cdRecords, com.android.apksig.util.DataSource lhfSection) throws com.android.apksig.apk.ApkFormatException, com.android.apksig.zip.ZipFormatException, java.io.IOException { com.android.apksig.internal.zip.CentralDirectoryRecord androidManifestCdRecord = null; for (com.android.apksig.internal.zip.CentralDirectoryRecord cdRecord : cdRecords) { if (com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME.equals(cdRecord.getName())) { androidManifestCdRecord = cdRecord; break; } } if (androidManifestCdRecord == null) { throw new com.android.apksig.apk.ApkFormatException((""Missing "" + (com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME))); } return java.nio.ByteBuffer.wrap(com.android.apksig.internal.zip.LocalFileRecord.getUncompressedData(lhfSection, androidManifestCdRecord, lhfSection.size())); }",ec351b3acc5b0297dd04184aa65fa74ed17532b5,"getAndroidManifestFromApk(java.util.List,com.android.apksig.util.DataSource)",117792,220,269
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,,"public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.TIMED_OUT); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }",7503c8887112e702db7f21a2c99a8b4e5d3d5e9b,,testProcessRunTimeout(),7,9,"@org.junit.Test public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.TIMED_OUT); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(com.android.tradefed.util.VtsPythonRunnerHelperTest.mPythonCmd, commandResult, com.android.tradefed.util.VtsPythonRunnerHelperTest.mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }",00622b00a9dc96d5bf19d1606cb567fcb2128385,testProcessRunTimeout(),88337,126,168
629007,src_com_android_bluetooth_btservice_AdapterState.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT); },b7c98faba7500e2e63b46d6f4889e13cf7e021a0,,exit(),14,11,@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT); super.exit(); },c3e1b324e5e387e92c818d3da7cd58e8bed9cfd3,exit(),162305,33,37
578588,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,30.0,"@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }",b8af1e2fff815765846167b3db1fac8b7ca16558,"@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }",39a75672b49db652b7db38186d52b016ddb093a1,test(),test(),4,31,"@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }",3660b9ccef471a1b8994ecc311b280197a67eaa8,test(),140692,173,156
539837,android_icu4j_src_main_tests_android_icu_dev_test_format_NumberFormatDataDrivenTest.java,10.0,"@java.lang.Override public java.lang.String parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); CurrencyAmount currAmt = fmt.parseCurrency(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return ((""Parse failed; got "" + currAmt) + "", but expected "") + (tuple.output); } if (tuple.output.equals(""fail"")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); java.lang.Number actual = currAmt.getNumber(); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return ((""Expected: "" + expected) + "", got: "") + actual; } if (!(tuple.outputCurrency.equals(currAmt.getCurrency().toString()))) { return ((""Expected currency: "" + (tuple.outputCurrency)) + "", got: "") + (currAmt.getCurrency()); } return null; }",1c03ad362c200ced44be0700de246a14f6ea7f17,"@java.lang.Override public java.lang.String parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.dev.test.format.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); CurrencyAmount currAmt = fmt.parseCurrency(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return ((""Parse failed; got "" + currAmt) + "", but expected "") + (tuple.output); } if (tuple.output.equals(""fail"")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); java.lang.Number actual = currAmt.getNumber(); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return ((""Expected: "" + expected) + "", got: "") + actual; } if (!(tuple.outputCurrency.equals(currAmt.getCurrency().toString()))) { return ((""Expected currency: "" + (tuple.outputCurrency)) + "", got: "") + (currAmt.getCurrency()); } return null; }",625091537bb1b5187f423cb5477024fd92be5b97,parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData),parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData),3,10,"@java.lang.Override public java.lang.String parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58_Android fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); CurrencyAmount currAmt = fmt.parseCurrency(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return ((""Parse failed; got "" + currAmt) + "", but expected "") + (tuple.output); } if (tuple.output.equals(""fail"")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); java.lang.Number actual = currAmt.getNumber(); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return ((""Expected: "" + expected) + "", got: "") + actual; } if (!(tuple.outputCurrency.equals(currAmt.getCurrency().toString()))) { return ((""Expected currency: "" + (tuple.outputCurrency)) + "", got: "") + (currAmt.getCurrency()); } return null; }",06005a5ed599f0e7cf90b3b69cd6058d96644915,parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData),296018,296,294
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,,"private void onDeviceLoaded(byte capabilities, byte sinkId, byte[] address) { com.android.bluetooth.hearingaid.HearingAidStackEvent event = new com.android.bluetooth.hearingaid.HearingAidStackEvent(HearingAidStackEvent.EVENT_TYPE_DEVICE_LOADED); event.device = getDevice(address); event.valueInt1 = capabilities; event.valueInt2 = sinkId; if (com.android.bluetooth.hearingaid.HearingAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, (""onAudioStateChanged: "" + event)); } sendMessageToService(event); }",1b1fd95b09f231466617b166694fa5510e6c8183,,"onDeviceLoaded(byte,byte,byte[])",34,16,"private void onDeviceAvailable(byte capabilities, long hiSyncId, byte[] address) { com.android.bluetooth.hearingaid.HearingAidStackEvent event = new com.android.bluetooth.hearingaid.HearingAidStackEvent(HearingAidStackEvent.EVENT_TYPE_DEVICE_AVAILABLE); event.device = getDevice(address); event.valueInt1 = capabilities; event.valueLong2 = hiSyncId; if (com.android.bluetooth.hearingaid.HearingAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, (""onDeviceAvailable: "" + event)); } sendMessageToService(event); }",37430b5623aaa7f7595f876f6df8075c7740ed21,"onDeviceAvailable(byte,long,byte[])",484210,168,169
81416,tests_tests_renderscript_src_android_renderscript_cts_TestCospi.java,,,,"private void checkCospiFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testCospiFloat(in, out); verifyResultsCospiFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCospiFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCospiFloat(in, out); verifyResultsCospiFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCospiFloat: "" + (e.toString()))); } }",0c128e922c0e9bc7bdc001bee80188b5803f577b,,checkCospiFloat(),9,0,"private void checkCospiFloatFloat() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -4590295257071997532L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testCospiFloatFloat(in, out); verifyResultsCospiFloatFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCospiFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCospiFloatFloat(in, out); verifyResultsCospiFloatFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCospiFloatFloat: "" + (e.toString()))); } }",7d06aad7478f062b9fda062942a72a3f433997b5,checkCospiFloatFloat(),143153,316,297
654568,src_com_android_bluetooth_newavrcp_AvrcpTargetService.java,1.0,"void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, (((""deviceConnected: bdaddr="" + bdaddr) + "" absoluteVolume="") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); }",e6ede96a1b595b2dc36dc6af0da827860f868958,"void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, (((""deviceConnected: bdaddr="" + bdaddr) + "" absoluteVolume="") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.AVRCP); }",5040d5fc0c2a3429c84f21701fc1cd62d3283519,"deviceConnected(java.lang.String,boolean)","deviceConnected(java.lang.String,boolean)",18,1,"void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, (((""deviceConnected: bdaddr="" + bdaddr) + "" absoluteVolume="") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.AVRCP); }",5284b3f355b53c5739c30cc327ba8b5829067cb7,"deviceConnected(java.lang.String,boolean)",135790,113,112
205676,src_com_android_bluetooth_gatt_ContextMap.java,17.0,void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { synchronized(mScanEvents) { for (com.android.bluetooth.btservice.BluetoothProto.ScanEvent event : mScanEvents) { proto.addScanEvent(event); } } },315690652ef4f98c4e0f2e8218f5bb1f56eced67,void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { synchronized(ScanStats.mScanEvents) { for (com.android.bluetooth.btservice.BluetoothProto.ScanEvent event : ScanStats.mScanEvents) { proto.addScanEvent(event); } } },657928ec6834afd052ea6bf64e03ff4a53782da9,dumpProto(com.android.bluetooth.btservice.BluetoothProto$BluetoothLog),dumpProto(com.android.bluetooth.btservice.BluetoothProto$BluetoothLog),11,17,void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { synchronized(mScanEvents) { for (com.android.bluetooth.btservice.BluetoothProto.ScanEvent event : mScanEvents) { proto.addScanEvent(event); } } },315690652ef4f98c4e0f2e8218f5bb1f56eced67,dumpProto(com.android.bluetooth.btservice.BluetoothProto$BluetoothLog),151791,69,63
338270,src_java_com_android_internal_telephony_RIL.java,158.0,"@java.lang.Override public void invokeOemRilRequestRaw(byte[] data, android.os.Message response) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_OEM_HOOK_RAW, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog(((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + ""["") + (com.android.internal.telephony.uicc.IccUtils.bytesToHexString(data))) + ""]"")); rr.mParcel.writeByteArray(data); send(rr); }",65acd74de629454a415ea16dd3c81ed7cc931e17,"@java.lang.Override public void invokeOemRilRequestRaw(byte[] data, android.os.Message response) { android.hardware.radio.V1_0.IOemHook oemHookProxy = getOemHookProxy(response); if (oemHookProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_OEM_HOOK_RAW, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + ""["") + (com.android.internal.telephony.uicc.IccUtils.bytesToHexString(data))) + ""]"")); } try { oemHookProxy.sendRequestRaw(rr.mSerial, com.android.internal.telephony.RIL.primitiveArrayToArrayList(data)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""invokeOemRilRequestStrings"", e); } } }",089a74ae1b40351ffd8c01c5677585299f84ce3a,"invokeOemRilRequestRaw(byte[],android.os.Message)","invokeOemRilRequestRaw(byte[],android.os.Message)",7,160,"@java.lang.Override public void invokeOemRilRequestRaw(byte[] data, android.os.Message response) { android.hardware.radio.deprecated.V1_0.IOemHook oemHookProxy = getOemHookProxy(response); if (oemHookProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_OEM_HOOK_RAW, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + ""["") + (com.android.internal.telephony.uicc.IccUtils.bytesToHexString(data))) + ""]"")); } try { oemHookProxy.sendRequestRaw(rr.mSerial, com.android.internal.telephony.RIL.primitiveArrayToArrayList(data)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""invokeOemRilRequestStrings"", e); } } }",66bb7d7b6bf583f74cd5810d338657b6f0c2e2b0,"invokeOemRilRequestRaw(byte[],android.os.Message)",453525,274,276
636656,tests_net_java_android_net_NetworkCapabilitiesTest.java,2.0,@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); nc.maybeMarkCapabilitiesRestricted(); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); },5e99e8a62856ad02ad40c920916e6436c697bad5,@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertTrue(nc.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); },7ffbed36949d4655f61e53c7ae0a3f44775d6db4,testOemPaid(),testOemPaid(),8,2,@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertFalse(nc.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); android.net.NetworkCapabilities nr = new android.net.NetworkCapabilities(); nr.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nr.maybeMarkCapabilitiesRestricted(); assertTrue(nr.satisfiedByNetworkCapabilities(nc)); assertFalse(nr.satisfiedByNetworkCapabilities(new android.net.NetworkCapabilities())); },f2c4955be589fe195fe7dc14efbc6acf1cb62dae,testOemPaid(),74253,213,316
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,32.0,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",b2abc15aadb2dd26723c5f13747bbb4a73db9ffa,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",4be97cc5bb0dc001f02938038dbcc5c117d8dc93,testAesCbcHmacSha384Tcp4UdpEncap(),testAesCbcHmacSha384Tcp4UdpEncap(),9,34,"public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",99274f7ab27ed8261822fea8d93618b7140411d4,testAesCbcHmacSha384Tcp4UdpEncap(),1900,217,217
41115,src_java_com_android_internal_telephony_IccCardProxy.java,,,,private void processLockedState() { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } },08449c032bb5da317d99f369e373420cabf4a441,,processLockedState(),22,18,private void processLockedState() { synchronized(mLock) { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } } },088dfeb1de32cbd43d4ebe739326bff9b633d7f7,processLockedState(),499818,187,194
240700,luni_src_test_java_libcore_java_net_URLConnectionTest.java,214.0,"private void testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""this response comes via HTTPS"")); server.play(); java.net.URL url = server.getUrl(""/foo""); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertContent(""this response comes via HTTPS"", connection); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertEquals(""GET /foo HTTP/1.1"", request.getRequestLine()); }",ca2c386d8e88d98dc506e682c2d1b1735e497ac2,"private void testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = createTestSSLContext(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""this response comes via HTTPS"")); server.play(); java.net.URL url = server.getUrl(""/foo""); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertContent(""this response comes via HTTPS"", connection); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertEquals(""GET /foo HTTP/1.1"", request.getRequestLine()); }",43bc8b2fd8b3ef7826b19f3a11e1124c038985d1,testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest$ProxyConfig),testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest$ProxyConfig),4,212,"private void testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""this response comes via HTTPS"")); server.play(); java.net.URL url = server.getUrl(""/foo""); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertContent(""this response comes via HTTPS"", connection); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertEquals(""GET /foo HTTP/1.1"", request.getRequestLine()); }",ffce408236f2e1638c127143095fef897212917a,testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest$ProxyConfig),274932,185,186
87789,luni_src_main_java_java_util_Formatter.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean startsWithMinusSign(java.lang.CharSequence cs, java.lang.String minusSign) { for (int i = 0; i < (minusSign.length()); ++i) { if ((minusSign.charAt(i)) != (cs.charAt(i))) { return false; } } return true; }",b4f37362ecaac857cadf73ffd58575cc7be08a7c,,"startsWithMinusSign(java.lang.CharSequence,java.lang.String)",6,34,"private static boolean startsWithMinusSign(java.lang.CharSequence cs, java.lang.String minusSign) { if ((cs.length()) < (minusSign.length())) { return false; } for (int i = 0; i < (minusSign.length()); ++i) { if ((minusSign.charAt(i)) != (cs.charAt(i))) { return false; } } return true; }",75aba368c5f3beecb564f3a7d5652a2592d54475,"startsWithMinusSign(java.lang.CharSequence,java.lang.String)",97659,70,89
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,7.0,"@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException((((""inconsistent idx="" + idx) + "" after lastIdx="") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException((""problem parsing idx "" + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",2e6aa1558a771cdad3e72f6756cddbd7ef27cd69,"@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException((((""inconsistent idx="" + idx) + "" after lastIdx="") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (android.net.NetworkStats.UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (android.net.NetworkStats.TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException((""problem parsing idx "" + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",ec2c57317e8dbcf2579735bdbdbc2402bd6c9cff,"javaReadNetworkStatsDetail(java.io.File,int,java.lang.String[],int)","javaReadNetworkStatsDetail(java.io.File,int,java.lang.String[],int)",11,12,"@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException((((""inconsistent idx="" + idx) + "" after lastIdx="") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException((""problem parsing idx "" + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }",2e6aa1558a771cdad3e72f6756cddbd7ef27cd69,"javaReadNetworkStatsDetail(java.io.File,int,java.lang.String[],int)",129347,494,480
162712,jack-tests_tests_com_android_jack_switchstatement_SwitchstatementTests.java,27.0,"@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test017.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum1$Enum11"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), true)); checkCompiledCode(packageName, input); }",737f185d3b9b1db732fb29d5fda9d02c6512aa63,"@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test017.jack""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input1 = com.google.common.collect.Maps.newHashMap(); { java.lang.String classPrefix = (packageName.replace('.', '-')) + ""-""; input1.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input1.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input1.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), true)); } java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input2 = com.google.common.collect.Maps.newHashMap(); { java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; input2.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input2.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input2.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), true)); } compileCode(packageName, input1, input2); }",f4be750b312a6a2cb90042bf5b331eb85e3cac2f,testCompile017(),testCompile017(),4,27,"@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test017.jack""; java.lang.String classPrefix = (packageName.replace('.', '-')) + ""-""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); { input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), true)); } checkCompiledCode(packageName, input); }",a351c008e0e154c79d3d57235a0d15bc55c2d216,testCompile017(),482071,445,246
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,23.0,"public void addU16(int v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU16(v); return; } if ((v < 0) || (v > 65535)) { android.util.Log.e(""rs"", ((""FieldPacker.addU16( "" + v) + "" )"")); throw new java.lang.IllegalArgumentException(""Saving value out of range for type""); } align(2); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) (v >> 8)); }",ca1fce40ef607e0abc41e845e47c595233f32f2c,"public void addU16(int v) { if (shouldThunk()) { mN.addU16(v); return; } if ((v < 0) || (v > 65535)) { android.util.Log.e(""rs"", ((""FieldPacker.addU16( "" + v) + "" )"")); throw new java.lang.IllegalArgumentException(""Saving value out of range for type""); } align(2); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) (v >> 8)); }",4a9efff59240979d4bff0e5e2a3f0d5966a7c403,addU16(int),addU16(int),5,22,"public void addU16(int v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU16(v); return; } if ((v < 0) || (v > 65535)) { android.util.Log.e(""rs"", ((""FieldPacker.addU16( "" + v) + "" )"")); throw new java.lang.IllegalArgumentException(""Saving value out of range for type""); } align(2); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) (v >> 8)); }",ca1fce40ef607e0abc41e845e47c595233f32f2c,addU16(int),205171,135,148
102887,jack_src_com_android_jack_analysis_tracer_ComposedTracerBrush.java,,,,@java.lang.Override public void endTraceMarked(com.android.jack.ir.ast.JNode node) { composedStatus.pop(); for (com.android.jack.analysis.tracer.TracerBrush config : brushes) { config.endTraceMarked(node); } },8a76fb17ba25f04917d9d2cef10c0f8ba3bd0e61,,endTraceMarked(com.android.jack.ir.ast.JNode),6,2,@java.lang.Override public void endTraceMarked(@javax.annotation.Nonnull com.android.jack.ir.ast.JNode node) { composedStatus.pop(); for (com.android.jack.analysis.tracer.TracerBrush config : brushes) { config.endTraceMarked(node); } },504ac3acce7fe6696f4046363b0446e733ba2bc4,endTraceMarked(com.android.jack.ir.ast.JNode),103983,65,70
166720,luni_src_main_java_libcore_net_UriCodec.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static char intToHexDigit(int b) { if (b < 10) { return ((char) ('0' + b)); } else { return ((char) (('a' + b) - 10)); } },61bb2a57787f92fdf69d65ed212b277d2a3abf38,,intToHexDigit(int),3,1,private static char intToHexDigit(int b) { if (b < 10) { return ((char) ('0' + b)); } else { return ((char) (('A' + b) - 10)); } },f9c68792f4ae8954dd3529b6facd4d4f2008e02b,intToHexDigit(int),217459,47,47
217447,telephony_java_android_telephony_SignalStrength.java,31.0,"public void fillInNotifierBundle(android.os.Bundle m) { m.putInt(""GsmSignalStrength"", mGsmSignalStrength); m.putInt(""GsmBitErrorRate"", mGsmBitErrorRate); m.putInt(""CdmaDbm"", mCdmaDbm); m.putInt(""CdmaEcio"", mCdmaEcio); m.putInt(""EvdoDbm"", mEvdoDbm); m.putInt(""EvdoEcio"", mEvdoEcio); m.putInt(""EvdoSnr"", mEvdoSnr); m.putInt(""LteSignalStrength"", mLteSignalStrength); m.putInt(""LteRsrp"", mLteRsrp); m.putInt(""LteRsrq"", mLteRsrq); m.putInt(""LteRssnr"", mLteRssnr); m.putInt(""LteCqi"", mLteCqi); m.putInt(""TdScdma"", mTdScdmaRscp); m.putBoolean(""isGsm"", java.lang.Boolean.valueOf(isGsm)); }",014b09e6a6116fef036f57ebf598128baa16bd3b,"public void fillInNotifierBundle(android.os.Bundle m) { m.putInt(""GsmSignalStrength"", mGsmSignalStrength); m.putInt(""GsmBitErrorRate"", mGsmBitErrorRate); m.putInt(""CdmaDbm"", mCdmaDbm); m.putInt(""CdmaEcio"", mCdmaEcio); m.putInt(""EvdoDbm"", mEvdoDbm); m.putInt(""EvdoEcio"", mEvdoEcio); m.putInt(""EvdoSnr"", mEvdoSnr); m.putInt(""LteSignalStrength"", mLteSignalStrength); m.putInt(""LteRsrp"", mLteRsrp); m.putInt(""LteRsrq"", mLteRsrq); m.putInt(""LteRssnr"", mLteRssnr); m.putInt(""LteCqi"", mLteCqi); m.putInt(""TdScdma"", mTdScdmaRscp); m.putBoolean(""isGsm"", java.lang.Boolean.parseBoolean(isGsm)); }",a21833c959f76b2961f6a5268ca89f36890d1ff8,fillInNotifierBundle(android.os.Bundle),fillInNotifierBundle(android.os.Bundle),4,31,"public void fillInNotifierBundle(android.os.Bundle m) { m.putInt(""GsmSignalStrength"", mGsmSignalStrength); m.putInt(""GsmBitErrorRate"", mGsmBitErrorRate); m.putInt(""CdmaDbm"", mCdmaDbm); m.putInt(""CdmaEcio"", mCdmaEcio); m.putInt(""EvdoDbm"", mEvdoDbm); m.putInt(""EvdoEcio"", mEvdoEcio); m.putInt(""EvdoSnr"", mEvdoSnr); m.putInt(""LteSignalStrength"", mLteSignalStrength); m.putInt(""LteRsrp"", mLteRsrp); m.putInt(""LteRsrq"", mLteRsrq); m.putInt(""LteRssnr"", mLteRssnr); m.putInt(""LteCqi"", mLteCqi); m.putInt(""TdScdma"", mTdScdmaRscp); m.putBoolean(""isGsm"", isGsm); }",cfe36b44d9c40ccf241de75704717b87aa34f334,fillInNotifierBundle(android.os.Bundle),244152,262,254
245062,jack_src_com_android_jack_jayce_v0002_nodes_NDeclaredType.java,1.0,"@java.lang.Override public void loadAnnotations(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession(); com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession(session.getPhantomLookup(), session, com.android.jack.jayce.NodeLevel.STRUCTURE); for (com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast(exportSession); loading.addAnnotation(annotationLiteral); annotationLiteral.updateParents(loading); } }",c09a7ad204366c8578365fc6cc7c28e205b19a5a,"@java.lang.Override public void loadAnnotations(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader) { com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession(classOrInterfaceLoader.getSession(), com.android.jack.jayce.NodeLevel.STRUCTURE); for (com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast(exportSession); loading.addAnnotation(annotationLiteral); annotationLiteral.updateParents(loading); } }",79f5fe3278f9e6aae41074fd50761511f15d13ec,"loadAnnotations(com.android.jack.ir.ast.JDefinedClassOrInterface,com.android.jack.jayce.JayceClassOrInterfaceLoader)","loadAnnotations(com.android.jack.ir.ast.JDefinedClassOrInterface,com.android.jack.jayce.JayceClassOrInterfaceLoader)",3,1,"@java.lang.Override public void loadAnnotations(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader) { if (!(annotations.isEmpty())) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession(); com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession(loader.getSession(), com.android.jack.jayce.NodeLevel.STRUCTURE); for (com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast(exportSession); loading.addAnnotation(annotationLiteral); annotationLiteral.updateParents(loading); } } }",da964f26bbf4da36891d7ccdc201000f41c9b679,"loadAnnotations(com.android.jack.ir.ast.JDefinedClassOrInterface,com.android.jack.jayce.JayceClassOrInterfaceLoader)",399731,192,218
169118,src_main_java_org_conscrypt_ct_SerializationUtils.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static byte[] readDEROctetString(byte[] input) throws org.conscrypt.ct.SerializationException { return org.conscrypt.ct.SerializationUtils.readDEROctetString(new java.io.ByteArrayInputStream(input)); },79a0534e8ca8df2a5de97540f71336d4d0370f29,,readDEROctetString(byte[]),16,4,public static byte[] readDEROctetString(byte[] input) throws org.conscrypt.ct.SerializationException { return org.conscrypt.ct.Serialization.readDEROctetString(new java.io.ByteArrayInputStream(input)); },744363f54866876ea9da44e6939f53e4250c2458,readDEROctetString(byte[]),117458,53,52
150819,luni_src_main_java_org_apache_harmony_security_fortress_Engine.java,0.0,"public java.util.ArrayList<java.security.Provider.Service> getServices(java.lang.String algorithm) { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); org.apache.harmony.security.fortress.Engine.ServiceCacheEntry cacheEntry = this.serviceCache; final java.lang.String algoUC = algorithm.toUpperCase(java.util.Locale.US); if (((cacheEntry != null) && (cacheEntry.algorithm.equalsIgnoreCase(algoUC))) && (newCacheVersion == (cacheEntry.cacheVersion))) { return cacheEntry.services; } java.lang.String name = ((this.serviceName) + ""."") + algoUC; java.util.ArrayList<java.security.Provider.Service> services = org.apache.harmony.security.fortress.Services.getServices(name); this.serviceCache = new org.apache.harmony.security.fortress.Engine.ServiceCacheEntry(algoUC, newCacheVersion, services); return services; }",58028e6fbf98a5083278350e5a1e2fca9db6b49c,"public java.util.ArrayList<java.security.Provider.Service> getServices(java.lang.String algorithm) { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); org.apache.harmony.security.fortress.Engine.ServiceCacheEntry cacheEntry = this.serviceCache; final java.lang.String algoUC = algorithm.toUpperCase(java.util.Locale.US); if (((cacheEntry != null) && (cacheEntry.algorithm.equalsIgnoreCase(algoUC))) && (newCacheVersion == (cacheEntry.cacheVersion))) { return cacheEntry.services; } java.lang.String name = ((this.serviceName) + ""."") + algoUC; java.util.ArrayList<java.security.Provider.Service> services = org.apache.harmony.security.fortress.Services.getServices(serviceName, algoUC); this.serviceCache = new org.apache.harmony.security.fortress.Engine.ServiceCacheEntry(algoUC, newCacheVersion, services); return services; }",24bbf050c3e261917904108d63251efe500bf5eb,getServices(java.lang.String),getServices(java.lang.String),6,0,"public java.util.ArrayList<java.security.Provider.Service> getServices(java.lang.String algorithm) { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); org.apache.harmony.security.fortress.Engine.ServiceCacheEntry cacheEntry = this.serviceCache; final java.lang.String algoUC = algorithm.toUpperCase(java.util.Locale.US); if (((cacheEntry != null) && (cacheEntry.algorithm.equalsIgnoreCase(algoUC))) && (newCacheVersion == (cacheEntry.cacheVersion))) { return cacheEntry.services; } java.util.ArrayList<java.security.Provider.Service> services = org.apache.harmony.security.fortress.Services.getServices(serviceName, algoUC); this.serviceCache = new org.apache.harmony.security.fortress.Engine.ServiceCacheEntry(algoUC, newCacheVersion, services); return services; }",192cc9acb8a711edb5d7020e3ef7484f4f3a012d,getServices(java.lang.String),326254,244,223
326498,tests_wifitests_src_com_android_server_wifi_HalDeviceManagerTest.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testCreateP2pInterfaceNoInitMode() throws java.lang.Exception { final java.lang.String name = ""p2p0""; com.android.server.wifi.HalDeviceManagerTest.BaselineChip chipMock = new com.android.server.wifi.HalDeviceManagerTest.BaselineChip(); chipMock.initialize(); mInOrder = inOrder(mServiceManagerMock, mWifiMock, chipMock.chip, mManagerStatusCallbackMock); executeAndValidateStartupSequence(); com.android.server.wifi.HalDeviceManager.InterfaceDestroyedListener idl = mock(HalDeviceManager.InterfaceDestroyedListener.class); com.android.server.wifi.HalDeviceManager.InterfaceAvailableForRequestListener iafrl = mock(HalDeviceManager.InterfaceAvailableForRequestListener.class); android.hardware.wifi.V1_0.IWifiP2pIface iface = ((android.hardware.wifi.V1_0.IWifiP2pIface) (validateInterfaceSequence(chipMock, false, (-1000), IfaceType.P2P, name, com.android.server.wifi.HalDeviceManagerTest.BaselineChip.STA_CHIP_MODE_ID, null, idl, iafrl))); mDut.removeIface(iface); mTestLooper.dispatchAll(); mInOrder.verify(chipMock.chip).removeP2pIface(name); verify(idl).onDestroyed(); verifyNoMoreInteractions(mManagerStatusCallbackMock, idl, iafrl); }",56ebec7d7cf3ce3137232091486f62e729ed3c30,,testCreateP2pInterfaceNoInitMode(),8,20,"@org.junit.Test public void testCreateP2pInterfaceNoInitMode() throws java.lang.Exception { final java.lang.String name = ""p2p0""; com.android.server.wifi.HalDeviceManagerTest.BaselineChip chipMock = new com.android.server.wifi.HalDeviceManagerTest.BaselineChip(); chipMock.initialize(); mInOrder = inOrder(mServiceManagerMock, mWifiMock, chipMock.chip, mManagerStatusCallbackMock); executeAndValidateInitializationSequence(); executeAndValidateStartupSequence(); com.android.server.wifi.HalDeviceManager.InterfaceDestroyedListener idl = mock(HalDeviceManager.InterfaceDestroyedListener.class); com.android.server.wifi.HalDeviceManager.InterfaceAvailableForRequestListener iafrl = mock(HalDeviceManager.InterfaceAvailableForRequestListener.class); android.hardware.wifi.V1_0.IWifiP2pIface iface = ((android.hardware.wifi.V1_0.IWifiP2pIface) (validateInterfaceSequence(chipMock, false, (-1000), IfaceType.P2P, name, com.android.server.wifi.HalDeviceManagerTest.BaselineChip.STA_CHIP_MODE_ID, null, idl, iafrl))); collector.checkThat(""allocated interface"", iface, org.hamcrest.core.IsNull.notNullValue()); mDut.removeIface(iface); mTestLooper.dispatchAll(); mInOrder.verify(chipMock.chip).removeP2pIface(name); verify(idl).onDestroyed(); verifyNoMoreInteractions(mManagerStatusCallbackMock, idl, iafrl); }",c8020b93475493cc9bfde563e8b458394177ae3b,testCreateP2pInterfaceNoInitMode(),389645,340,368
83276,src_main_java_org_conscrypt_NativeCrypto.java,38.0,public static native long EVP_SignInit(java.lang.String algorithm);,47bfe84f77a6c997b6d324de6e220bc369b84326,"public static native int EVP_SignInit(long ctx, long evpRef);",857802541c46c437f82f69ac9dfa40cf3c1fc636,EVP_SignInit(java.lang.String),"EVP_SignInit(long,long)",5,136,"public static native int EVP_SignInit(org.conscrypt.OpenSSLDigestContext ctx, long evpRef);",d815886090f34ac2f4336001a56cd60df33e1a0e,"EVP_SignInit(org.conscrypt.OpenSSLDigestContext,long)",254510,18,27
603413,src_java_com_android_internal_telephony_NetworkRegistrationManager.java,,,,"public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (""getNetworkRegistrationState domain "" + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException(""Service not connected."")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); } catch (android.os.RemoteException e) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, (""getNetworkRegistrationState RemoteException "" + e)); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, e); onCompleteMessage.sendToTarget(); } }",993c6dca8470e64a79fab7f3e74139187b8df3db,,"getNetworkRegistrationState(int,android.os.Message)",4,12,"public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; com.android.internal.telephony.NetworkRegistrationManager.logd((""getNetworkRegistrationState domain "" + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException(""Service not connected."")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); } catch (android.os.RemoteException e) { android.telephony.Rlog.e(com.android.internal.telephony.NetworkRegistrationManager.TAG, (""getNetworkRegistrationState RemoteException "" + e)); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, e); onCompleteMessage.sendToTarget(); } }",f39138baebb026a4b91a0fdd6ee0548b2c43ea8e,"getNetworkRegistrationState(int,android.os.Message)",101693,220,213
465279,core_java_android_bluetooth_BluetoothAdapter.java,6.0,"public void onLeScan(android.bluetooth.BluetoothDevice device, int rssi, byte[] scanRecord);",146e0cade787861c87eb3ab086c45f6ae1974394,"void onLeScan(android.bluetooth.BluetoothDevice device, int rssi, byte[] scanRecord);",2dbf3acdc5f3bc3931c34633ed924ea88e1d63f0,"onLeScan(android.bluetooth.BluetoothDevice,int,byte[])","onLeScan(android.bluetooth.BluetoothDevice,int,byte[])",9,6,"public void onLeScan(android.bluetooth.BluetoothDevice device, int rssi, byte[] scanRecord);",146e0cade787861c87eb3ab086c45f6ae1974394,"onLeScan(android.bluetooth.BluetoothDevice,int,byte[])",2115,22,23
161052,sched_src_com_android_sched_vfs_UnionVFS.java,,,,@java.lang.Override boolean isEmpty(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir dir) { return false; },cf5ce5d82bab55fdca0c3c467dfd2eb32a4b43e0,,isEmpty(com.android.sched.vfs.UnionVFS$UnionVDir),15,9,@java.lang.Override boolean isEmpty(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir dir) { return list(dir).isEmpty(); },484d5b54276b673bf8eab4c5868713b921398435,isEmpty(com.android.sched.vfs.UnionVFS$UnionVDir),316810,36,40
83821,build-system_builder_src_main_java_com_android_builder_png_Chunk.java,,,,@com.android.annotations.NonNull public byte[] getType() { return mType; },96165090901a9f5a060ca9efe650fd7ca5a44260,,getType(),12,1,@com.android.annotations.NonNull byte[] getType() { return mType; },73a62f3f4642f03666d631241bbde150914ecc7b,getType(),148818,20,19
319283,src_com_android_bluetooth_opp_BluetoothOppObexClientSession.java,4.0,"private void doSend() { int status = BluetoothShare.STATUS_SUCCESS; while ((mFileInfo) == null) { try { java.lang.Thread.sleep(50); } catch (java.lang.InterruptedException e) { status = BluetoothShare.STATUS_CANCELED; } } if (!(mConnected)) { status = BluetoothShare.STATUS_CONNECTION_ERROR; } if (status == (BluetoothShare.STATUS_SUCCESS)) { if ((mFileInfo.mFileName) != null) { status = sendFile(mFileInfo); } else { status = mFileInfo.mStatus; } waitingForShare = true; } else { com.android.bluetooth.opp.Constants.updateShareStatus(mContext1, mInfo.mId, status); } if (status == (BluetoothShare.STATUS_SUCCESS)) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SHARE_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } else { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_ERROR; mInfo.mStatus = status; msg.obj = mInfo; msg.sendToTarget(); } }",577c96b08d3753059988333cacea70b889f8e988,"private void doSend() { int status = BluetoothShare.STATUS_SUCCESS; while ((mFileInfo) == null) { try { java.lang.Thread.sleep(50); } catch (java.lang.InterruptedException e) { status = BluetoothShare.STATUS_CANCELED; } } if (!(mConnected)) { status = BluetoothShare.STATUS_CONNECTION_ERROR; } if (status == (BluetoothShare.STATUS_SUCCESS)) { if ((mFileInfo.mFileName) != null) { if ((mFileInfo.mLength) > 4294967295L) { status = BluetoothShare.STATUS_OBEX_DATA_ERROR; android.util.Log.e(com.android.bluetooth.opp.BluetoothOppObexClientSession.TAG, ""File bigger than 4GB cannot be transferred""); } else { status = sendFile(mFileInfo); } } else { status = mFileInfo.mStatus; } waitingForShare = true; } else { com.android.bluetooth.opp.Constants.updateShareStatus(mContext1, mInfo.mId, status); } if (status == (BluetoothShare.STATUS_SUCCESS)) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SHARE_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } else { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_ERROR; mInfo.mStatus = status; msg.obj = mInfo; msg.sendToTarget(); } }",fa3b8b2445ed30b83dfb46a31de9ffc3d3d362e0,doSend(),doSend(),4,4,"private void doSend() { int status = BluetoothShare.STATUS_SUCCESS; while ((mFileInfo) == null) { try { java.lang.Thread.sleep(50); } catch (java.lang.InterruptedException e) { status = BluetoothShare.STATUS_CANCELED; } } if (!(mConnected)) { status = BluetoothShare.STATUS_CONNECTION_ERROR; } if (status == (BluetoothShare.STATUS_SUCCESS)) { if ((mFileInfo.mFileName) != null) { status = sendFile(mFileInfo); } else { status = mFileInfo.mStatus; } waitingForShare = true; } else { com.android.bluetooth.opp.Constants.updateShareStatus(mContext1, mInfo.mId, status); } if (status == (BluetoothShare.STATUS_SUCCESS)) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SHARE_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } else { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_ERROR; mInfo.mStatus = status; msg.obj = mInfo; msg.sendToTarget(); } }",577c96b08d3753059988333cacea70b889f8e988,doSend(),176626,350,277
573442,src_com_android_settings_deviceinfo_SimStatus.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mSir.getSubscriptionId()); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE, mRes.getString((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered))); }",a19dc2bbee9cc28b58a24aada8ed08ec76fb3e72,,updateImsRegistrationState(),4,5,"@android.support.annotation.VisibleForTesting void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mSir.getSubscriptionId()); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE, mRes.getString((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered))); }",ccd9a0d1217913523200f6e64a18b65772b4532c,updateImsRegistrationState(),70770,97,105
92758,luni_src_main_java_java_nio_DirectByteBuffer.java,23.0,"@java.lang.Override public java.nio.ByteBuffer put(byte value) { checkNotFreed(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } if ((position) == (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeByte(((offset) + ((position)++)), value); return this; }",0713d8826f076e377ca3dd41a3076d475481eecb,"@java.lang.Override public java.nio.ByteBuffer put(byte value) { checkCanAccess(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } if ((position) == (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeByte(((offset) + ((position)++)), value); return this; }",a2a186339429623b051b7849abd27bccfa4391fb,put(byte),put(byte),6,25,"@java.lang.Override public java.nio.ByteBuffer put(byte value) { checkIsAccessible(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } if ((position) == (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeByte(((offset) + ((position)++)), value); return this; }",1aa2933429e66bf5ff1e136d235df8c6cb7022b5,put(byte),45003,82,82
548206,src_com_android_bluetooth_hfp_HeadsetService.java,50.0,"boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); return true; }",aa0c8c3445d16ff34e89a395c8e533d60defd71e,"boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); } return true; }",518be8ee3b76c546b3b93999e971fa38755b93d1,startVoiceRecognition(android.bluetooth.BluetoothDevice),startVoiceRecognition(android.bluetooth.BluetoothDevice),34,54,"boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mVoiceRecognitionStarted = true; stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); } return true; }",c31640a6572bce6d20ee91e86db7eb8c995d6ea7,startVoiceRecognition(android.bluetooth.BluetoothDevice),210707,164,171
93566,luni_src_main_java_libcore_net_url_FileURLConnection.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaderFields() { if ((headerFields) == null) { headerFields = new java.util.TreeMap<>(libcore.net.url.FileURLConnection.HEADER_COMPARATOR); for (int i = 0; i < (headerKeysAndValues.length); i += 2) { headerFields.put(headerKeysAndValues[i], java.util.Collections.singletonList(headerKeysAndValues[(i + 1)])); } } return java.util.Collections.unmodifiableMap(headerFields); }",330346d2ae9f192e8eec3e713b0119745286af36,,getHeaderFields(),3,1,"@java.lang.Override public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaderFields() { if ((headerFields) == null) { final java.util.TreeMap<java.lang.String, java.util.List<java.lang.String>> headerFieldsMap = new java.util.TreeMap<>(libcore.net.url.FileURLConnection.HEADER_COMPARATOR); for (int i = 0; i < (headerKeysAndValues.length); i += 2) { headerFieldsMap.put(headerKeysAndValues[i], java.util.Collections.singletonList(headerKeysAndValues[(i + 1)])); } headerFields = java.util.Collections.unmodifiableMap(headerFieldsMap); } return headerFields; }",c69a0ec83fb22b0f6750a57951a11f1a38b6ad1e,getHeaderFields(),392215,132,166
70160,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_charset_CharsetEncoderTest.java,11.0,"public void test_ConstructorLjava_nio_charset_CharsetNull() { java.nio.charset.CharsetEncoder ech = new org.apache.harmony.nio_char.tests.java.nio.charset.CharsetEncoderTest.MockCharsetEncoderForHarmony491(null, 1, 1); assertNull(ech.charset()); }",00859aca4d60fa9bdc2d85f438a07602a0591118,"public void test_ConstructorLjava_nio_charset_CharsetNull() { java.nio.charset.CharsetEncoder ech = new org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MockCharsetEncoderForHarmony491(null, 1, 1); assertNull(ech.charset()); }",2e4aedcb68e7edca502ec4cb9668eb7c2d9cf906,test_ConstructorLjava_nio_charset_CharsetNull(),test_ConstructorLjava_nio_charset_CharsetNull(),3,30,"public void testCharset() { try { encoder = new org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MockCharsetEncoder(java.nio.charset.Charset.forName(""gbk""), 1, org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MAX_BYTES); } catch (java.nio.charset.UnsupportedCharsetException e) { java.lang.System.err.println(""Don't support GBK encoding, ignore current test""); } }",d27d9967065ab62d756826cd8bf6353868e1b086,testCharset(),200500,70,112
22725,tools_host_src_com_android_cts_TestDevice.java,23.0,"public void runTestCaseInBatchMode(com.android.cts.TestPackage testPackage, final java.lang.String javaClassName, java.lang.String profile) throws com.android.cts.DeviceDisconnectedException { if (javaClassName == null) { return; } java.lang.String appNameSpace = testPackage.getAppNameSpace(); java.lang.String runner = testPackage.getInstrumentationRunner(); if (runner == null) { runner = com.android.cts.TestDevice.DEFAULT_TEST_RUNNER_NAME; } java.lang.String cmdHeader = (((""am instrument -w -r -e class "" + javaClassName) + "" -e profile "") + profile) + "" ""; final java.lang.String commandStr = ((cmdHeader + appNameSpace) + ""/"") + runner; com.android.cts.Log.d(commandStr); mBatchModeResultParser = new com.android.cts.TestDevice.BatchModeResultParser(testPackage); executeShellCommand(commandStr, mBatchModeResultParser); }",d4277488e36fe9e06e8d07550efd9ced28975a53,"private java.lang.String getTestArguments() { java.lang.String telephoneNumber = Strings.telephoneNumber.value(); return ""-e telephoneNumber "" + telephoneNumber; }",2f77e56d4590c365fa49e09076b1d5f6767a7814,"runTestCaseInBatchMode(com.android.cts.TestPackage,java.lang.String,java.lang.String)",getTestArguments(),4,89,"private java.lang.String getTestArguments() { return ""-e phoneNumber "" + (Strings.phoneNumber.value()); }",fc94683ba52e324fb21d2d61820d229f012794a9,getTestArguments(),390380,42,27
150674,espresso_contrib_src_main_java_android_support_test_espresso_contrib_DrawerActions.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void closeDrawer(int drawerLayoutId, int gravity) { android.support.test.espresso.contrib.Checks.checkState((!(android.support.test.espresso.contrib.DrawerActions.checkDrawer(drawerLayoutId, android.support.test.espresso.contrib.DrawerMatchers.isClosed(gravity)))), ""Drawer is already closed""); android.support.test.espresso.Espresso.onView(withId(drawerLayoutId)).perform(android.support.test.espresso.contrib.DrawerActions.registerListener()).perform(android.support.test.espresso.contrib.DrawerActions.actionCloseDrawer(gravity)).perform(android.support.test.espresso.contrib.DrawerActions.unregisterListener()); }",d578bb4e22ad4d124511a706f6524758e685f58a,,"closeDrawer(int,int)",4,17,"public static void closeDrawer(int drawerLayoutId, int gravity) { if (android.support.test.espresso.contrib.DrawerActions.checkDrawer(drawerLayoutId, android.support.test.espresso.contrib.DrawerMatchers.isClosed())) { return; } android.support.test.espresso.Espresso.onView(withId(drawerLayoutId)).perform(android.support.test.espresso.contrib.DrawerActions.registerListener()).perform(android.support.test.espresso.contrib.DrawerActions.actionCloseDrawer(gravity)).perform(android.support.test.espresso.contrib.DrawerActions.unregisterListener()); }",1184ff39c7fa1a2fc2a8024883e42a85ff1c4593,"closeDrawer(int,int)",42048,160,141
347050,tests_wifitests_src_com_android_server_wifi_scanner_WificondWifiScannerTest.java,16.0,"private void assertBackgroundPeriodAlarmNotPending() { assertFalse(""background period alarm is pending"", mAlarmManager.isPending(SupplicantWifiScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); }",71fa591e93a9a25d80a0fcbd8cfbab6742dbe998,"private void assertBackgroundPeriodAlarmNotPending() { assertFalse(""background period alarm is pending"", mAlarmManager.isPending(WificondWifiScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); }",9ea12cdb211050c041b3030b18dff390c8ce91ce,assertBackgroundPeriodAlarmNotPending(),assertBackgroundPeriodAlarmNotPending(),12,16,"private void assertBackgroundPeriodAlarmNotPending() { assertFalse(""background period alarm is pending"", mAlarmManager.isPending(WificondScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); }",d3d8200feb400a2ed0d49311b0a076c02affc38d,assertBackgroundPeriodAlarmNotPending(),82520,40,39
18735,tools_vm-tests_src_dot_junit_opcodes_iget_char_Test_iget_char.java,14.0,"public void testVFE7() { try { java.lang.Class.forName(""dot.junit.opcodes.iget_char.d.T_iget_char_12""); fail(""expected a verification exception""); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }",db8d696ede076107d201777c89473b8bcf5c3113,"public void testVFE7() { try { dot.junit.opcodes.iget_char.d.T_iget_char_12 t = new dot.junit.opcodes.iget_char.d.T_iget_char_12(); t.run(); fail(""expected an IllegalAccessError exception""); } catch (java.lang.IllegalAccessError t) { } }",94105c857498ba8a17a9db352de90a8204f179a7,testVFE7(),testVFE7(),2,14,"public void testVFE7() { try { new dot.junit.opcodes.iget_char.d.T_iget_char_12().run(); fail(""expected an IllegalAccessError exception""); } catch (java.lang.IllegalAccessError t) { } }",c3d047c648d764f9c98a64b6e13daf42e2a7190f,testVFE7(),456482,89,60
346896,tests_tests_net_src_android_net_wifi_aware_cts_SingleDeviceTest.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,boolean hasCallbackAlreadyHappened(int callback) { java.util.Iterator<java.lang.Integer> it = mCallbackQueue.iterator(); while (it.hasNext()) { if ((it.next()) == callback) { return true; } } return false; },968d6c49aa66a142d170478625c4c725a4399e50,,hasCallbackAlreadyHappened(int),6,1,boolean hasCallbackAlreadyHappened(int callback) { synchronized(mLocalLock) { return mCallbackQueue.contains(callback); } },e61f0cc6657330f5b25b118cef7b26741d56b590,hasCallbackAlreadyHappened(int),186968,58,29
81416,tests_tests_renderscript_src_android_renderscript_cts_TestRemainder.java,,,,"private void checkRemainderFloat4Float4() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testRemainderFloat4Float4(inX, out); verifyResultsRemainderFloat4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRemainderFloat4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testRemainderFloat4Float4(inX, out); verifyResultsRemainderFloat4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRemainderFloat4Float4: "" + (e.toString()))); } }",4f2dd09b137611d27d80960cadd2103ee209600c,,checkRemainderFloat4Float4(),9,5,"private void checkRemainderFloat4Float4Float4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -5019417213533590404L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -5019417213533590404L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testRemainderFloat4Float4Float4(inX, out); verifyResultsRemainderFloat4Float4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRemainderFloat4Float4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testRemainderFloat4Float4Float4(inX, out); verifyResultsRemainderFloat4Float4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRemainderFloat4Float4Float4: "" + (e.toString()))); } }",ca1ff9c2b80a71422b1e998579221eed6a0a39b8,checkRemainderFloat4Float4Float4(),142648,443,389
48571,builder_src_main_java_com_android_builder_ProductFlavor.java,17.0,public com.android.builder.ProductFlavor setSigningKeyAlias(java.lang.String signingKeyAlias) { mSigningKeyAlias = signingKeyAlias; return this; },c6c86273f05a1d39c36b68abb1c1743ff5b5122a,public com.android.builder.ProductFlavor setSigningKeystore(com.android.builder.SigningKeystore signingKeystore) { mSigningKeystore = signingKeystore; return this; },31fc524b3a4e30a925299ce63a5a735feb246882,setSigningKeyAlias(java.lang.String),setSigningKeystore(com.android.builder.SigningKeystore),4,22,public com.android.builder.ProductFlavor setKeystore(com.android.builder.Keystore keystore) { mKeystore = keystore; return this; },ecade071b6788a6aa426db26f2f1911dde2f73fd,setKeystore(com.android.builder.Keystore),462943,36,31
632510,src_java_com_android_internal_telephony_RIL.java,106.0,"static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }",e57bcf8b8562b960e926686c67ed71d197db6aa6,"static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { int tdscdmaRsrp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { tdscdmaRsrp_1_2 = 120 - (signalStrength.tdScdma.rscp); } return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRsrp_1_2); }",c1106812d6e7420aeb79dc0a64b81cc48f2fdf16,convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength),convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength),6,106,"static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { int tdscdmaRscp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { int rscpDbm = -(signalStrength.tdScdma.rscp); tdscdmaRscp_1_2 = rscpDbm + 120; } return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRscp_1_2); }",a341100d3aeaba891b094db895b7febf3d89ffc5,convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength),105673,232,244
146696,jack_src_com_android_jack_LogLevel.java,,,,"@java.lang.Override public java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>> getLevels() { java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>> setup = new java.util.ArrayList<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>>(); setup.add(new com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>("""", java.util.logging.Level.FINE)); setup.add(new com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>(""com.android.sched"", java.util.logging.Level.WARNING)); return setup; }",14bac42df81d31e0de3bbddbeb287a3e15cd63be,,getLevels(),17,3,"@java.lang.Override public java.util.List<com.android.jack.test.toolchain.PackageLevel> getLevels() { java.util.List<com.android.jack.test.toolchain.PackageLevel> setup = new java.util.ArrayList<com.android.jack.test.toolchain.PackageLevel>(); setup.add(new com.android.jack.test.toolchain.PackageLevel("""", java.util.logging.Level.FINE)); setup.add(new com.android.jack.test.toolchain.PackageLevel(""com.android.sched"", java.util.logging.Level.WARNING)); return setup; }",affe40e9c49a9b68d355bf149c08a287e0136354,getLevels(),89151,219,137
111480,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_model_AaptOptionsImpl.java,,,,"public java.lang.String toString() { return ((((((((""AaptOptionsImpl{"" + "", mIgnoreAssets="") + (mIgnoreAssets)) + "", mNoCompress"") + (mNoCompress)) + "", mFailOnMissingConfigEntry"") + (mFailOnMissingConfigEntry)) + "", mUseQueuedAaptPngCruncher"") + (mUseQueuedAaptPngCruncher)) + ""}""; }",5f0a94c94b8fcb5293d56c8f0da5d4735c232f48,,toString(),4,2,"public java.lang.String toString() { return ((((((""AaptOptionsImpl{"" + "", ignoreAssets="") + (ignoreAssets)) + "", noCompress="") + (noCompress)) + "", failOnMissingConfigEntry="") + (failOnMissingConfigEntry)) + ""}""; }",378fcc2050741cdcd6cae41ffe1438d8cd5e4689,toString(),521522,97,66
114079,luni_src_test_java_libcore_java_net_URLConnectionTest.java,99.0,"public void testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache() throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); initResponseCache(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); com.google.mockwebserver.MockResponse badProxyResponse = new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders().setBody(""bogus proxy connect response content""); server.enqueue(badProxyResponse); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""response"")); server.play(); java.net.URL url = new java.net.URL(""https://android.com/foo""); libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig = libcore.java.net.URLConnectionTest.ProxyConfig.PROXY_SYSTEM_PROPERTY; javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier()); assertContent(""response"", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals(""CONNECT android.com:443 HTTP/1.1"", connect.getRequestLine()); assertContains(connect.getHeaders(), ""Host: android.com""); }",a380912c10df5ac4dbf18fafff44cc54f8d52408,"public void testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache() throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); initResponseCache(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); com.google.mockwebserver.MockResponse badProxyResponse = new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders().setBody(""bogus proxy connect response content""); server.enqueue(badProxyResponse); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""response"")); server.play(); java.net.URL url = new java.net.URL(""https://android.com/foo""); libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig = libcore.java.net.URLConnectionTest.ProxyConfig.PROXY_SYSTEM_PROPERTY; javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier()); assertContent(""response"", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals(""CONNECT android.com:443 HTTP/1.1"", connect.getRequestLine()); libcore.java.net.URLConnectionTest.assertContains(connect.getHeaders(), ""Host: android.com""); }",305427a47103bb387ffd3c6b211e4d34054eef3a,testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache(),testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache(),3,99,"public void testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache() throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); initResponseCache(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); com.google.mockwebserver.MockResponse badProxyResponse = new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders().setBody(""bogus proxy connect response content""); server.enqueue(badProxyResponse); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""response"")); server.play(); java.net.URL url = new java.net.URL(""https://android.com/foo""); libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig = libcore.java.net.URLConnectionTest.ProxyConfig.PROXY_SYSTEM_PROPERTY; javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier()); assertContent(""response"", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals(""CONNECT android.com:443 HTTP/1.1"", connect.getRequestLine()); assertContains(connect.getHeaders(), ""Host: android.com""); }",a380912c10df5ac4dbf18fafff44cc54f8d52408,testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache(),455240,327,317
14691,src_com_android_settings_ApnEditor.java,14.0,"private void showErrorMessage(java.lang.String message) { new android.app.AlertDialog.Builder(this).setTitle(R.string.error_title).setMessage(message).setPositiveButton(android.R.string.ok, null).show(); }",3f6b6efddf336cf59dd2905aebf1680a10a9b146,"private void showErrorMessage(java.lang.String message) { if ((mErrorDialog) != null) { mErrorDialog.setMessage(message); mErrorDialog.show(); } else { mErrorDialog = new android.app.AlertDialog.Builder(this).setTitle(R.string.error_title).setMessage(message).setPositiveButton(android.R.string.ok, null).show(); } }",84f5f0e8ed340bdfd4c3745d7fec628424eab08e,showErrorMessage(java.lang.String),showErrorMessage(java.lang.String),3,3,"@java.lang.Override protected android.app.Dialog onCreateDialog(int id) { if (id == (com.android.settings.ApnEditor.ERROR_DIALOG_ID)) { java.lang.String msg = getErrorMsg(); return new android.app.AlertDialog.Builder(this).setTitle(R.string.error_title).setPositiveButton(android.R.string.ok, null).setMessage(msg).create(); } return super.onCreateDialog(id); }",9b8883d151c6631d14f48ec2002c7ebb016a2dce,onCreateDialog(int),77872,87,103
579585,src_com_android_bluetooth_pbap_BluetoothPbapService.java,6.0,"java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if ((mPbapStateMachine) != null) { devices.add(mPbapStateMachine.getRemoteDevice()); } return devices; }",3fd8938613e9be440217d8289271f9c5a72e8420,"java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mPbapStateMachineMap) == null) { return new java.util.ArrayList<>(); } return new java.util.ArrayList(mPbapStateMachineMap.keySet()); }",d0448bda7f8b3e0daab07be129e7d6a2e1863b73,getConnectedDevices(),getConnectedDevices(),19,6,"java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mPbapStateMachineMap) == null) { return new java.util.ArrayList<>(); } synchronized(mPbapStateMachineMap) { return new java.util.ArrayList(mPbapStateMachineMap.keySet()); } }",07faf89e0a8b7db0b98d5be6f5aa579314beffa4,getConnectedDevices(),517579,95,106
593334,telephony_java_android_telephony_SignalStrength.java,29.0,@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (isGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); },9a1c261df7d15da12f7587b390303e0fada7cd33,@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (mIsGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); },e2fca8d27430592f76bfbbda567f529913d1c6a4,hashCode(),hashCode(),6,29,@java.lang.Override public int hashCode() { int primeNum = 31; return (((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (mIsGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0)) + (java.util.Arrays.hashCode(mLteRsrpThresholds)); },ac0c1ee5f99fe70077dd9ff019bc2eacdae2e2cb,hashCode(),31259,251,271
18971,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_layout_ScrollViewRule.java,,,,"@java.lang.Override public void onCreate(com.android.ide.common.api.INode node, com.android.ide.common.api.INode parent, com.android.ide.common.api.InsertType insertType) { super.onCreate(node, parent, insertType); if (insertType == (com.android.ide.common.api.InsertType.CREATE)) { node.appendChild(com.android.ide.common.layout.LINEAR_LAYOUT_FQCN); } }",18e59bfef9ebcd4b5f2c64d06321eb642a451218,,"onCreate(com.android.ide.common.api.INode,com.android.ide.common.api.INode,com.android.ide.common.api.InsertType)",5,0,"@java.lang.Override public void onCreate(com.android.ide.common.api.INode node, com.android.ide.common.api.INode parent, com.android.ide.common.api.InsertType insertType) { super.onCreate(node, parent, insertType); if (insertType == (com.android.ide.common.api.InsertType.CREATE)) { node.appendChild(com.android.ide.common.layout.FQCN_LINEAR_LAYOUT); } }",3d16678a8a5a7e50bf3484c6a3582e65f24bd3e8,"onCreate(com.android.ide.common.api.INode,com.android.ide.common.api.INode,com.android.ide.common.api.InsertType)",396001,107,107
146710,sdk-common_src_test_java_com_android_ide_common_res2_ResourceMergerTest.java,14.0,"public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(); assertEquals(31, merger.size()); }",6041cee3119e0994c69dacded590c6ee9c46ac61,"public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(); assertEquals(32, merger.size()); }",decf1f2cc689752d77ae3041ab2b61c1c110d536,testMergeByCount(),testMergeByCount(),3,14,"public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(false); assertEquals(32, merger.size()); }",b6432115d06a07dbc2f740b6cf1c1b8088048809,testMergeByCount(),183213,55,57
23171,core_tests_coretests_src_android_content_pm_PackageManagerTests.java,131.0,"@android.test.suitebuilder.annotation.LargeTest public void testExistingEUserI() { int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL; int iFlags = PackageManager.INSTALL_EXTERNAL; setExistingXUserX(userSetting, iFlags, PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL); }",9f957e2ec5f9a2f8bcde0d4a2c4a4612a2d2bf3b,"@android.test.suitebuilder.annotation.LargeTest public void testExistingEUserI() { int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL; int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; setExistingXUserX(userSetting, iFlags, PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL); }",0eab830d232d0f46a651f20ad5395a253e67c99d,testExistingEUserI(),testExistingEUserI(),3,131,"@android.test.suitebuilder.annotation.LargeTest public void testExistingEUserI() { if (android.os.Environment.isExternalStorageEmulated()) { return; } int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL; int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; setExistingXUserX(userSetting, iFlags, PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL); }",bc8c33a997d2700dd08f38fe5fd0ed6889c915e6,testExistingEUserI(),232253,83,100
316646,src_com_android_settings_search_Index.java,53.0,"public static com.android.settings.search.Index getInstance(android.content.Context context) { if ((com.android.settings.search.Index.sInstance) == null) { com.android.settings.search.Index.sInstance = new com.android.settings.search.Index(context.getApplicationContext(), com.android.settings.search.Index.BASE_AUTHORITY); } return com.android.settings.search.Index.sInstance; }",f1bd86443f91aaa12e6b64391aac8e828910c076,"public static com.android.settings.search.Index getInstance(android.content.Context context) { if ((com.android.settings.search.Index.sInstance) == null) { com.android.settings.search.Index.sInstance = new com.android.settings.search.Index(context, com.android.settings.search.Index.BASE_AUTHORITY); } return com.android.settings.search.Index.sInstance; }",9c34b749ddfc353c8dca18d98f3d1d355b2f43fe,getInstance(android.content.Context),getInstance(android.content.Context),8,53,"public static com.android.settings.search.Index getInstance(android.content.Context context) { if ((com.android.settings.search.Index.sInstance) == null) { synchronized(com.android.settings.search.Index.class) { if ((com.android.settings.search.Index.sInstance) == null) { com.android.settings.search.Index.sInstance = new com.android.settings.search.Index(context.getApplicationContext(), com.android.settings.search.Index.BASE_AUTHORITY); } } } return com.android.settings.search.Index.sInstance; }",e2ce03ca60b580b9d046b0db312374a398be7f66,getInstance(android.content.Context),361138,98,138
70281,luni_src_main_java_java_util_Arrays.java,67.0,private static int deepHashCodeElement(java.lang.Object element) { java.lang.Class<?> cl; if (element == null) { return 0; } cl = element.getClass().getComponentType(); if (cl == null) { return element.hashCode(); } if (!(cl.isPrimitive())) { return java.util.Arrays.deepHashCode(((java.lang.Object[]) (element))); } if (cl.equals(int.class)) { return java.util.Arrays.hashCode(((int[]) (element))); } if (cl.equals(char.class)) { return java.util.Arrays.hashCode(((char[]) (element))); } if (cl.equals(boolean.class)) { return java.util.Arrays.hashCode(((boolean[]) (element))); } if (cl.equals(byte.class)) { return java.util.Arrays.hashCode(((byte[]) (element))); } if (cl.equals(long.class)) { return java.util.Arrays.hashCode(((long[]) (element))); } if (cl.equals(float.class)) { return java.util.Arrays.hashCode(((float[]) (element))); } if (cl.equals(double.class)) { return java.util.Arrays.hashCode(((double[]) (element))); } return java.util.Arrays.hashCode(((short[]) (element))); },8cca12cca7475d4e44a5d373caa64d9575d4f484,private static int deepHashCodeElement(java.lang.Object element) { java.lang.Class<?> cl; if (element == null) { return 0; } cl = element.getClass().getComponentType(); if (cl == null) { return element.hashCode(); } if (!(cl.isPrimitive())) { return java.util.Arrays.deepHashCode(((java.lang.Object[]) (element))); } else if (cl == (int.class)) { return java.util.Arrays.hashCode(((int[]) (element))); } else if (cl == (char.class)) { return java.util.Arrays.hashCode(((char[]) (element))); } else if (cl == (boolean.class)) { return java.util.Arrays.hashCode(((boolean[]) (element))); } else if (cl == (byte.class)) { return java.util.Arrays.hashCode(((byte[]) (element))); } else if (cl == (long.class)) { return java.util.Arrays.hashCode(((long[]) (element))); } else if (cl == (float.class)) { return java.util.Arrays.hashCode(((float[]) (element))); } else if (cl == (double.class)) { return java.util.Arrays.hashCode(((double[]) (element))); } else { return java.util.Arrays.hashCode(((short[]) (element))); } },4bc80bf9c06235e29d271b607558f0cacce72a42,deepHashCodeElement(java.lang.Object),deepHashCodeElement(java.lang.Object),7,67,private static int deepHashCodeElement(java.lang.Object element) { java.lang.Class<?> cl; if (element == null) { return 0; } cl = element.getClass().getComponentType(); if (cl == null) { return element.hashCode(); } if (element instanceof java.lang.Object[]) { return java.util.Arrays.deepHashCode(((java.lang.Object[]) (element))); } else if (cl == (int.class)) { return java.util.Arrays.hashCode(((int[]) (element))); } else if (cl == (char.class)) { return java.util.Arrays.hashCode(((char[]) (element))); } else if (cl == (boolean.class)) { return java.util.Arrays.hashCode(((boolean[]) (element))); } else if (cl == (byte.class)) { return java.util.Arrays.hashCode(((byte[]) (element))); } else if (cl == (long.class)) { return java.util.Arrays.hashCode(((long[]) (element))); } else if (cl == (float.class)) { return java.util.Arrays.hashCode(((float[]) (element))); } else if (cl == (double.class)) { return java.util.Arrays.hashCode(((double[]) (element))); } else { return java.util.Arrays.hashCode(((short[]) (element))); } },840ef7ecdefaac9dc32421b0a5449936c1ab1c1b,deepHashCodeElement(java.lang.Object),280469,281,285
116091,luni_src_test_java_libcore_javax_net_ssl_DefaultHostnameVerifierTest.java,46.0,"public void testWildcardMatchingEmptySubstring() { assertTrue(verifier.verifyHostName(""imap.google.com"", ""imap*.google.com"")); }",d695e726a621a58a605e629bf11c831c3454e271,"public void testWildcardMatchingEmptySubstring() { assertTrue(verifyWithHostnamePattern(""imap.google.com"", ""imap*.google.com"")); }",3f904a891dc1fce71050c7b33a722c4048907cda,testWildcardMatchingEmptySubstring(),testWildcardMatchingEmptySubstring(),3,47,"public void testWildcardMatchingEmptySubstring() { assertTrue(verifyWithDomainNamePattern(""imap.google.com"", ""imap*.google.com"")); }",4797b5a7409ce9e979de8ecba2fd88b9f11d3c00,testWildcardMatchingEmptySubstring(),120905,33,33
245062,jack_src_com_android_jack_jayce_MethodNode.java,1.0,"@javax.annotation.CheckForNull com.android.jack.ir.ast.JAbstractMethodBody loadBody(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loading) throws com.android.jack.ir.ast.JTypeLookupException, com.android.jack.lookup.JMethodLookupException;",ef048adf39b0b3d7dcaa77b87d1d03a69562b85d,"@javax.annotation.CheckForNull com.android.jack.ir.ast.JAbstractMethodBody loadBody(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceMethodLoader jayceMethodLoader) throws com.android.jack.ir.ast.JTypeLookupException, com.android.jack.lookup.JMethodLookupException;",fe07d56513e9e797bfe14fba8f8abcd23d07dd8a,loadBody(com.android.jack.ir.ast.JMethod),"loadBody(com.android.jack.ir.ast.JMethod,com.android.jack.jayce.JayceMethodLoader)",3,2,"@javax.annotation.CheckForNull com.android.jack.ir.ast.JAbstractMethodBody loadBody(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceMethodLoader loader) throws com.android.jack.ir.ast.JTypeLookupException, com.android.jack.lookup.JMethodLookupException;",9289f7d30add6a4712e7467abcee7d7aa4f44b17,"loadBody(com.android.jack.ir.ast.JMethod,com.android.jack.jayce.JayceMethodLoader)",399735,98,94
91995,luni_src_main_java_libcore_io_Posix.java,91.0,"public native void msync(long address, long byteCount, int flags) throws libcore.io.ErrnoException;",26c53a9114f639c566df6e3d597bf29f17492528,"public native void msync(long address, long byteCount, int flags) throws android.os.ErrnoException;",430462b5e0fadec2f6d5af54ec26a66f0454a1ac,"msync(long,long,int)","msync(long,long,int)",3,91,"public native void msync(long address, long byteCount, int flags) throws android.system.ErrnoException;",9c6b9eaa4ad4ac2a1bbd3e0d883b763e50f0fd88,"msync(long,long,int)",169864,25,25
589613,core_java_android_net_NetworkStatsHistory.java,21.0,"public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }",626899935a44a14db658f2af5d291fcfa779f0ab,"public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_ALL, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }",f0b8ca8927601c9b4636b65822886d5d5f246e9b,"recordHistory(android.net.NetworkStatsHistory,long,long)","recordHistory(android.net.NetworkStatsHistory,long,long)",6,21,"public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }",626899935a44a14db658f2af5d291fcfa779f0ab,"recordHistory(android.net.NetworkStatsHistory,long,long)",53516,316,303
174017,src_compat_java_org_conscrypt_Platform.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static void closeGuardClose(java.lang.Object guardObj) { if ((Build.VERSION.SDK_INT) < (Build.VERSION_CODES.ICE_CREAM_SANDWICH)) { return; } org.conscrypt.CloseGuard guard = ((org.conscrypt.CloseGuard) (guardObj)); guard.close(); },1068aad2d2c2b80f123d25ff74717d19cad6aa9b,,closeGuardClose(java.lang.Object),3,13,public static void closeGuardClose(java.lang.Object guardObj) { if ((Build.VERSION.SDK_INT) < 14) { return; } dalvik.system.CloseGuard guard = ((dalvik.system.CloseGuard) (guardObj)); guard.close(); },3e44e6fc7fa47f1d6825e52c77fc1f2c7b6231d8,closeGuardClose(java.lang.Object),457874,80,61
627768,src_com_android_bluetooth_btservice_AdapterService.java,202.0,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",043367c7ce1ebacb54a966fbfdb2600d93161de0,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""AdapterProperties""); writer.println((("" "" + ""MaxConnectedAudioDevices: "") + (getMaxConnectedAudioDevices()))); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",fa73cdb3d6524435809481481ac44c2ad4a9eef2,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])","dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",2,202,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""AdapterProperties""); writer.println((("" "" + ""MaxConnectedAudioDevices: "") + (getMaxConnectedAudioDevices()))); writer.println(); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",28105ae2a93a7d2cde6eae33d15dea5ab77b7d2d,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",157559,332,336
81416,tests_tests_renderscript_src_android_renderscript_cts_TestSincos.java,,,,public void testSincos() { checkSincosFloatFloat(); checkSincosFloat2Float2(); checkSincosFloat3Float3(); checkSincosFloat4Float4(); },68518d1c7085d3f8257ab6b2a197209a951c3c59,,testSincos(),9,7,public void testSincos() { checkSincosFloatFloatFloat(); checkSincosFloat2Float2Float2(); checkSincosFloat3Float3Float3(); checkSincosFloat4Float4Float4(); },0e0f9ed9851f67982c287e52e8291d30458dc583,testSincos(),142558,43,50
620809,src_com_google_android_traceur_Receiver.java,5.0,"public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, ((((""getActiveTags(onlyAvailable="" + onlyAvailable) + "") = \"""") + s) + ""\"""")); return s; }",58683fd8922920f6716c241e38d95f7f865a09d8,"public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); com.android.traceur.Log.v(com.android.traceur.Receiver.TAG, ((((""getActiveTags(onlyAvailable="" + onlyAvailable) + "") = \"""") + s) + ""\"""")); return s; }",8b3f5165f1bf513f6c2eb2716b13c4a345f76904,"getActiveTags(android.content.Context,android.content.SharedPreferences,boolean)","getActiveTags(android.content.Context,android.content.SharedPreferences,boolean)",4,5,"public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, ((((""getActiveTags(onlyAvailable="" + onlyAvailable) + "") = \"""") + s) + ""\"""")); return s; }",58683fd8922920f6716c241e38d95f7f865a09d8,"getActiveTags(android.content.Context,android.content.SharedPreferences,boolean)",208320,263,260
109435,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_variant_BaseVariantOutputData.java,13.0,"@com.android.annotations.NonNull public java.lang.String getDirName() { if (!(multiOutput)) { return variantData.getVariantConfiguration().getDirName(); } return variantData.getVariantConfiguration().computeDirNameWithSplits(densityFilter, abiFilter); }",8313f56201b5b197ee8480f7868555c04bdf390b,"@com.android.annotations.NonNull public java.lang.String getDirName() { if (!(multiOutput)) { return variantData.getVariantConfiguration().getDirName(); } return variantData.getVariantConfiguration().computeDirNameWithSplits(getFilter(FilterType.DENSITY), getFilter(FilterType.ABI)); }",4b2ad11f347f0ee228cbe50566e233fe4360df34,getDirName(),getDirName(),15,9,"@com.android.annotations.NonNull public java.lang.String getDirName() { if (!(multiOutput)) { return variantData.getVariantConfiguration().getDirName(); } return variantData.getVariantConfiguration().computeDirNameWithSplits(mainApkOutputFile.getFilter(OutputFile.DENSITY), mainApkOutputFile.getFilter(OutputFile.ABI)); }",88a6c6f2c0574bc7752f618fb27e60de353d2508,getDirName(),226359,70,75
217553,tests_tests_permission2_src_android_permission2_cts_NoReceiveSmsPermissionTest.java,1.0,"private void sendSMSToSelf() { android.app.PendingIntent sentIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_SENT_ACTION), PendingIntent.FLAG_ONE_SHOT); android.app.PendingIntent deliveryIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_STATUS_RECEIVED_ACTION), PendingIntent.FLAG_ONE_SHOT); android.telephony.TelephonyManager telephony = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); java.lang.String currentNumber = telephony.getLine1Number(); android.util.Log.i(android.permission2.cts.NoReceiveSmsPermissionTest.LOG_TAG, java.lang.String.format(""Sending SMS to self: %s"", currentNumber)); sendSms(currentNumber, ""test message"", sentIntent, deliveryIntent); }",34f7cc8ca38fb088cf4b4d3a1a470e8d1dc428ab,"private void sendSMSToSelf() { android.app.PendingIntent sentIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_SENT_ACTION), PendingIntent.FLAG_ONE_SHOT); android.app.PendingIntent deliveryIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_STATUS_RECEIVED_ACTION), PendingIntent.FLAG_ONE_SHOT); android.telephony.TelephonyManager telephony = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); java.lang.String currentNumber = telephony.getLine1Number(); if (android.text.TextUtils.isEmpty(mDestAddr)) { fail(""[RERUN] SIM card does not provide phone number. Use a suitable SIM Card.""); } android.util.Log.i(android.permission2.cts.NoReceiveSmsPermissionTest.LOG_TAG, java.lang.String.format(""Sending SMS to self: %s"", currentNumber)); sendSms(currentNumber, ""test message"", sentIntent, deliveryIntent); }",5c65dfd9a7d4f473b14082fe21a4effeb269b401,sendSMSToSelf(),sendSMSToSelf(),5,1,"private void sendSMSToSelf() { android.app.PendingIntent sentIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_SENT_ACTION), PendingIntent.FLAG_ONE_SHOT); android.app.PendingIntent deliveryIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_STATUS_RECEIVED_ACTION), PendingIntent.FLAG_ONE_SHOT); android.telephony.TelephonyManager telephony = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); java.lang.String currentNumber = telephony.getLine1Number(); assertFalse(""[RERUN] SIM card does not provide phone number. Use a suitable SIM Card."", android.text.TextUtils.isEmpty(currentNumber)); android.util.Log.i(android.permission2.cts.NoReceiveSmsPermissionTest.LOG_TAG, java.lang.String.format(""Sending SMS to self: %s"", currentNumber)); sendSms(currentNumber, ""test message"", sentIntent, deliveryIntent); }",ba8e07f9bee43a96ea9c34d07e59c4172320a395,sendSMSToSelf(),58934,263,259
369032,src_java_com_android_internal_telephony_RadioResponse.java,85.0,"public void supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }",46f0f0b9554cd4063292e0746ef873163938ac8c,"public void supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responsePinOrPukStatus(responseInfo, remainingAttempts); }",2d2888eb7e1b38985805ea731b446c2d6f0e4b93,"supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo,int)","supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo,int)",5,84,"public void supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }",46f0f0b9554cd4063292e0746ef873163938ac8c,"supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo,int)",189002,47,43
101167,hierarchyviewer2_hierarchyviewer2lib_src_main_java_com_android_hierarchyviewerlib_ui_EvaluateContrastDisplay.java,,,,private static org.eclipse.swt.graphics.Image getResultImage(int result) { switch (result) { case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_PASS : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sGreenImage; case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_FAIL : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sRedImage; default : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sYellowImage; } },29258a849ee918f14fdbefcf82498635244e722d,,getResultImage(int),6,2,private static org.eclipse.swt.graphics.Image getResultImage(com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult result) { switch (result) { case PASS : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sGreenImage; case FAIL : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sRedImage; default : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sYellowImage; } },3bdd9bf875efb7541e6d7be9a40aacc258731227,getResultImage(com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult),377076,140,121
403334,services_core_java_com_android_server_NsdService.java,46.0,"private void registerForNsdSetting() { android.database.ContentObserver contentObserver = new android.database.ContentObserver(this.getHandler()) { @java.lang.Override public void onChange(boolean selfChange) { notifyEnabled(isNsdEnabled()); } }; mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(Settings.Global.NSD_ON), false, contentObserver); }",a91a26d38a0d56463227ebeae0a303546cd445f9,"private void registerForNsdSetting() { android.database.ContentObserver contentObserver = new android.database.ContentObserver(this.getHandler()) { @java.lang.Override public void onChange(boolean selfChange) { notifyEnabled(isNsdEnabled()); } }; android.net.Uri uri = Settings.Global.getUriFor(Settings.Global.NSD_ON); mNsdSettings.registerContentObserver(uri, contentObserver); }",23cd7dde8558c284e6eb91445427cdbf7d21de25,registerForNsdSetting(),registerForNsdSetting(),4,46,"private void registerForNsdSetting() { final android.database.ContentObserver contentObserver = new android.database.ContentObserver(this.getHandler()) { @java.lang.Override public void onChange(boolean selfChange) { notifyEnabled(isNsdEnabled()); } }; final android.net.Uri uri = Settings.Global.getUriFor(Settings.Global.NSD_ON); mNsdSettings.registerContentObserver(uri, contentObserver); }",1b122389ce75544144aeab3215fbced5735dfd24,registerForNsdSetting(),361700,97,99
307012,dx_src_com_android_dx_command_dexer_Main.java,9.0,"private static int runMonoDex() throws java.io.IOException { java.io.File incrementalOutFile = null; if (com.android.dx.command.dexer.Main.args.incremental) { if ((com.android.dx.command.dexer.Main.args.outName) == null) { java.lang.System.err.println(""error: no incremental output name specified""); return -1; } incrementalOutFile = new java.io.File(com.android.dx.command.dexer.Main.args.outName); if (incrementalOutFile.exists()) { com.android.dx.command.dexer.Main.minimumFileAge = incrementalOutFile.lastModified(); } } if (!(com.android.dx.command.dexer.Main.processAllFiles())) { return 1; } if ((com.android.dx.command.dexer.Main.args.incremental) && (!(com.android.dx.command.dexer.Main.anyFilesProcessed))) { return 0; } byte[] outArray = null; if ((!(com.android.dx.command.dexer.Main.outputDex.isEmpty())) || ((com.android.dx.command.dexer.Main.args.humanOutName) != null)) { outArray = com.android.dx.command.dexer.Main.writeDex(com.android.dx.command.dexer.Main.outputDex); if (outArray == null) { return 2; } } if (com.android.dx.command.dexer.Main.args.incremental) { outArray = com.android.dx.command.dexer.Main.mergeIncremental(outArray, incrementalOutFile); } outArray = com.android.dx.command.dexer.Main.mergeLibraryDexBuffers(outArray); if (com.android.dx.command.dexer.Main.args.jarOutput) { com.android.dx.command.dexer.Main.outputDex = null; if (outArray != null) { com.android.dx.command.dexer.Main.outputResources.put(DexFormat.DEX_IN_JAR_NAME, outArray); } if (!(com.android.dx.command.dexer.Main.createJar(com.android.dx.command.dexer.Main.args.outName))) { return 3; } } else if ((outArray != null) && ((com.android.dx.command.dexer.Main.args.outName) != null)) { java.io.OutputStream out = com.android.dx.command.dexer.Main.openOutput(com.android.dx.command.dexer.Main.args.outName); out.write(outArray); com.android.dx.command.dexer.Main.closeOutput(out); } return 0; }",d51d6f21447431697184317894e7cb3679c11575,"private int runMonoDex() throws java.io.IOException { java.io.File incrementalOutFile = null; if (args.incremental) { if ((args.outName) == null) { java.lang.System.err.println(""error: no incremental output name specified""); return -1; } incrementalOutFile = new java.io.File(args.outName); if (incrementalOutFile.exists()) { minimumFileAge = incrementalOutFile.lastModified(); } } if (!(processAllFiles())) { return 1; } if ((args.incremental) && (!(anyFilesProcessed))) { return 0; } byte[] outArray = null; if ((!(outputDex.isEmpty())) || ((args.humanOutName) != null)) { outArray = writeDex(outputDex); if (outArray == null) { return 2; } } if (args.incremental) { outArray = com.android.dx.command.dexer.Main.mergeIncremental(outArray, incrementalOutFile); } outArray = mergeLibraryDexBuffers(outArray); if (args.jarOutput) { outputDex = null; if (outArray != null) { outputResources.put(DexFormat.DEX_IN_JAR_NAME, outArray); } if (!(createJar(args.outName))) { return 3; } } else if ((outArray != null) && ((args.outName) != null)) { java.io.OutputStream out = com.android.dx.command.dexer.Main.openOutput(args.outName); out.write(outArray); com.android.dx.command.dexer.Main.closeOutput(out); } return 0; }",a936eed3a533900b911e3cf54c48da7cdfd7fade,runMonoDex(),runMonoDex(),5,11,"private int runMonoDex() throws java.io.IOException { java.io.File incrementalOutFile = null; if (args.incremental) { if ((args.outName) == null) { context.err.println(""error: no incremental output name specified""); return -1; } incrementalOutFile = new java.io.File(args.outName); if (incrementalOutFile.exists()) { minimumFileAge = incrementalOutFile.lastModified(); } } if (!(processAllFiles())) { return 1; } if ((args.incremental) && (!(anyFilesProcessed))) { return 0; } byte[] outArray = null; if ((!(outputDex.isEmpty())) || ((args.humanOutName) != null)) { outArray = writeDex(outputDex); if (outArray == null) { return 2; } } if (args.incremental) { outArray = com.android.dx.command.dexer.Main.mergeIncremental(outArray, incrementalOutFile); } outArray = mergeLibraryDexBuffers(outArray); if (args.jarOutput) { outputDex = null; if (outArray != null) { outputResources.put(DexFormat.DEX_IN_JAR_NAME, outArray); } if (!(createJar(args.outName))) { return 3; } } else if ((outArray != null) && ((args.outName) != null)) { java.io.OutputStream out = openOutput(args.outName); out.write(outArray); closeOutput(out); } return 0; }",1c07be43c1347db16284305547f9ac901dd32d5a,runMonoDex(),234812,362,332
281492,tests_wifitests_src_com_android_server_wifi_WifiStateMachinePrimeTest.java,5.0,"@org.junit.Test public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(mWificond); when(mWificond.createApInterface()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); enterSoftApActiveMode(); verify(mWificond).tearDownInterfaces(); }",07d4357da153f01acd00bc1a9ca9cf2e7d99d7f8,"@org.junit.Test public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(mWificond); when(mWificond.createApInterface()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(null); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); enterSoftApActiveMode(); }",ee03bb2bf79afb79a13eeb95b34f1833a2da1f2c,testEnterSoftApModeActiveWhenAlreadyInSoftApMode(),testEnterSoftApModeActiveWhenAlreadyInSoftApMode(),12,6,"@org.junit.Test public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(mWificond); when(mWificond.createApInterface()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(null); mLooper.dispatchAll(); assertEquals(com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING, mWifiStateMachinePrime.getCurrentMode()); enterSoftApActiveMode(); }",eabc1886b7eb06262fe61d43e9ed253cc536317b,testEnterSoftApModeActiveWhenAlreadyInSoftApMode(),252793,125,122
139390,src_com_google_gct_idea_debugger_CloudDebugProcess.java,,,,public void removeListener(com.google.gct.idea.debugger.CloudDebugProcess.CloudBreakListChanged listener) { myBreakpointListChangedListeners.remove(listener); },ddeaec880c3add8c21cffd679dcc9ee6d94eea51,,removeListener(com.google.gct.idea.debugger.CloudDebugProcess$CloudBreakListChanged),30,23,public void addListener(@org.jetbrains.annotations.NotNull com.google.gct.idea.debugger.CloudBreakpointListener listener) { getStateController().addListener(listener); },cf204b3c20bc095b03c43acda9951d7265f8c55a,addListener(com.google.gct.idea.debugger.CloudBreakpointListener),250769,39,39
362753,tests_wifitests_src_com_android_server_wifi_WifiServiceImplTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testSetWifiEnabledFromAppFailsWhenApEnabled() throws java.lang.Exception { when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_ENABLED); assertFalse(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, true)); verify(mSettingsStore, never()).handleWifiToggled(anyBoolean()); verify(mWifiController, never()).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }",4b3b7a2f946ac1c6e2122ccac2c5c06470ad17f6,,testSetWifiEnabledFromAppFailsWhenApEnabled(),3,19,"@org.junit.Test public void testSetWifiEnabledFromAppFailsWhenApEnabled() throws java.lang.Exception { when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_ENABLED); assertFalse(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, true)); verify(mSettingsStore, never()).handleWifiToggled(anyBoolean()); verify(mWifiController, never()).sendMessage(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }",cb744c312a08cf055316fe83515e3619306f20dd,testSetWifiEnabledFromAppFailsWhenApEnabled(),288908,138,135
184220,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,3.0,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { boolean assertEnable = false; assert true == (assertEnable = true); args.add(""java""); args.add((assertEnable ? ""-ea"" : ""-da"")); args.add(""-jar""); args.add(jackPrebuilt.getAbsolutePath()); args.add(""--verbose""); args.add(verbosityLevel.name()); args.add(""--sanity-checks""); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add(""--import-meta""); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""""))) { args.add(""--classpath""); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add(""--config-jarjar""); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add(""-g""); } libToImportStaticLibs(args, in); }",2a7a24bdea8f0be808231d4370cc47392529f43e,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { invokeJack(args); args.add(""--verbose""); args.add(verbosityLevel.name()); args.add(""--sanity-checks""); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add(""--import-meta""); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""""))) { args.add(""--classpath""); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add(""--config-jarjar""); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add(""-g""); } libToImportStaticLibs(args, in); }",2e659ce61738234240f4bac0cf5d595e04b8545b,"libToCommon(java.util.List,java.lang.String,java.io.File[])","libToCommon(java.util.List,java.lang.String,java.io.File[])",10,3,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { buildJackCall(args); args.add(""--verbose""); args.add(verbosityLevel.name()); args.add(""--sanity-checks""); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add(""--import-meta""); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""""))) { args.add(""--classpath""); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add(""--config-jarjar""); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add(""-g""); } libToImportStaticLibs(args, in); }",0b30afd3bc3cc3d5a6c4dfd9e686e54f1eb82591,"libToCommon(java.util.List,java.lang.String,java.io.File[])",137016,339,340
153563,src_com_android_settings_ZonePicker.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String getZoneDisplayName(java.util.Locale locale, java.util.TimeZone tz, java.util.Date now, boolean preferLocation) { java.lang.String zoneNameString; if (preferLocation) { zoneNameString = com.android.settings.ZonePicker.getZoneExemplarLocation(locale, tz); if ((zoneNameString == null) || (zoneNameString.isEmpty())) { zoneNameString = com.android.settings.DateTimeSettings.getZoneLongName(locale, tz, now); } } else { zoneNameString = com.android.settings.DateTimeSettings.getZoneLongName(locale, tz, now); if ((zoneNameString == null) || (zoneNameString.isEmpty())) { zoneNameString = com.android.settings.ZonePicker.getZoneExemplarLocation(locale, tz); } } return zoneNameString; }",953fa2e15f678177e0f9024fece6ad787d93b5e9,,"getZoneDisplayName(java.util.Locale,java.util.TimeZone,java.util.Date,boolean)",3,2,"private static java.lang.String getZoneDisplayName(java.util.Locale locale, java.util.TimeZone tz, java.util.Date now, boolean preferLongName) { java.lang.String zoneNameString; if (preferLongName) { zoneNameString = com.android.settings.DateTimeSettings.getZoneLongName(locale, tz, now); } else { zoneNameString = com.android.settings.ZonePicker.getZoneExemplarLocation(locale, tz); if ((zoneNameString == null) || (zoneNameString.isEmpty())) { zoneNameString = com.android.settings.DateTimeSettings.getZoneLongName(locale, tz, now); } } return zoneNameString; }",8485c8821fa5151cbb25cab14ee69b5ed3e6d903,"getZoneDisplayName(java.util.Locale,java.util.TimeZone,java.util.Date,boolean)",417648,201,160
622726,services_core_java_com_android_server_ConnectivityService.java,118.0,private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUids(nai.networkCapabilities); } } } return null; },aa50ad93bad4e2ba8058a32750697e4679f43dcb,private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUidsUnlessAllowed(nai.networkCapabilities); } } } return null; },4e7408302e584b3923c1a73ee49bbf243a8c3e29,getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo),getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo),3,118,"private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUidsUnlessAllowed(nai.networkCapabilities, android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid()); } } } return null; }",35fe5e0ba08d88de5fcc283f4e809b01c40ae38d,getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo),418386,79,99
167753,jack-server_src_com_android_jack_server_router_ContentTypeRouter.java,0.0,"@java.lang.Override public void handle(@javax.annotation.Nonnull org.simpleframework.http.Request request, @javax.annotation.Nonnull org.simpleframework.http.Response response) { java.lang.String type = getContentType(request).getType(); com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, ((""Route request for '"" + type) + ""'"")); org.simpleframework.http.core.Container container = registry.get(type); if (container != null) { container.handle(request, response); } else { primaryContainer.handle(request, response); } }",c784e27eba49c97d8d8d854f4421ade0c3e2db74,"@java.lang.Override public void handle(@javax.annotation.Nonnull org.simpleframework.http.Request request, @javax.annotation.Nonnull org.simpleframework.http.Response response) { org.simpleframework.http.ContentType contentType = getContentType(request); org.simpleframework.http.core.Container container; if (contentType == null) { com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, ""Route request for no content type""); container = null; } else { java.lang.String type = contentType.getType(); com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, ((""Route request for '"" + type) + ""'"")); container = registry.get(type); } if (container != null) { container.handle(request, response); } else { primaryContainer.handle(request, response); } }",3ead01632792541a82063953c8697284b863425b,"handle(org.simpleframework.http.Request,org.simpleframework.http.Response)","handle(org.simpleframework.http.Request,org.simpleframework.http.Response)",4,0,"@java.lang.Override public void handle(@javax.annotation.Nonnull org.simpleframework.http.Request request, @javax.annotation.Nonnull org.simpleframework.http.Response response) { org.simpleframework.http.ContentType contentType = getContentType(request); org.simpleframework.http.core.Container container; if (contentType == null) { com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, ""Route request for no content type""); container = primaryContainer; } else { java.lang.String type = contentType.getType(); com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, ((""Route request for '"" + type) + ""'"")); container = registry.get(type); if (container == null) { com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, ((""No route for '"" + type) + ""'"")); container = primaryContainer; } } container.handle(request, response); }",53931e9c2a4cfa80140e7a29c5322dbac9c937dd,"handle(org.simpleframework.http.Request,org.simpleframework.http.Response)",381433,207,241
69360,luni_src_test_java_libcore_javax_net_ssl_SSLSocketTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void test_SSLSocket_defaultConfiguratio() throws java.lang.Exception { libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLSocket(((javax.net.ssl.SSLSocket) (javax.net.ssl.SSLSocketFactory.getDefault().createSocket()))); },f1b6c31cb1ce412dbb4e6c0cb6d486e4ee5e5239,,test_SSLSocket_defaultConfiguratio(),3,6,public void test_SSLSocket_defaultConfiguration() throws java.lang.Exception { libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLSocket(((javax.net.ssl.SSLSocket) (javax.net.ssl.SSLSocketFactory.getDefault().createSocket()))); },e7e39835de6b846fbcac275fe90fa132ea473b41,test_SSLSocket_defaultConfiguration(),337879,58,56
16532,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_device_ViewNode.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void dereferenceImage() { (imageReferences)--; if (((image) != null) && ((imageReferences) == 0)) { image.dispose(); java.lang.System.out.println(""DISPOSING""); } }",7b9fc794d37c2815682ece7e73a9411772e265fa,,dereferenceImage(),6,2,public void dereferenceImage() { (imageReferences)--; if (((image) != null) && ((imageReferences) == 0)) { image.dispose(); } },d2d5c9a3f1b1da8c6c9d121132b32c34ef4500c5,dereferenceImage(),297585,48,34
144460,sdk-common_src_test_java_com_android_ide_common_caching_CreatingCacheTest.java,6.0,"@org.junit.Test public void testMultiThread() throws java.lang.Exception { final com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory()); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable1 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, 0); java.lang.Thread t1 = new java.lang.Thread(runnable1); t1.start(); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable2 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, 1000); java.lang.Thread t2 = new java.lang.Thread(runnable2); t2.start(); t1.join(); t2.join(); assertEquals(""foo"", runnable1.getResult()); assertEquals(""foo"", runnable2.getResult()); assertTrue(""repetitive calls give same instance"", ((runnable1.getResult()) == (runnable2.getResult()))); }",035ac2ab0e89fa83a7b44883b425104646e55068,"@org.junit.Test public void testMultiThread() throws java.lang.Exception { java.util.concurrent.CountDownLatch factoryLatch = new java.util.concurrent.CountDownLatch(1); com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory(factoryLatch)); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable1 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache); java.lang.Thread t1 = new java.lang.Thread(runnable1); t1.start(); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable2 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache); java.lang.Thread t2 = new java.lang.Thread(runnable2); t2.start(); factoryLatch.countDown(); t1.join(); t2.join(); assertEquals(""foo"", runnable1.getResult()); assertEquals(""foo"", runnable2.getResult()); assertTrue(""repetitive calls give same instance"", ((runnable1.getResult()) == (runnable2.getResult()))); }",b49ad6b5e06754a179baea561bf1766b2932eb8c,testMultiThread(),testMultiThread(),2,7,"@org.junit.Test public void testMultiThread() throws java.lang.Exception { java.util.concurrent.CountDownLatch factoryLatch = new java.util.concurrent.CountDownLatch(1); com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory(factoryLatch)); java.util.concurrent.CountDownLatch latch1 = new java.util.concurrent.CountDownLatch(1); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable1 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, latch1); java.lang.Thread t1 = new java.lang.Thread(runnable1); t1.start(); latch1.await(); java.util.concurrent.CountDownLatch latch2 = new java.util.concurrent.CountDownLatch(1); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable2 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, latch2); java.lang.Thread t2 = new java.lang.Thread(runnable2); t2.start(); latch2.await(); factoryLatch.countDown(); t1.join(); t2.join(); assertEquals(""foo"", runnable1.getResult()); assertEquals(""foo"", runnable2.getResult()); assertTrue(""repetitive calls give same instance"", ((runnable1.getResult()) == (runnable2.getResult()))); }",fe36d641d516c8506e3534419172f64adcae538b,testMultiThread(),357086,292,342
140231,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_ndk_ManagedNdkConfig.java,,,,@com.android.annotations.NonNull com.android.build.gradle.managed.ManagedPattern getCFilePattern();,7a6d3787f51b488d89639b69ca2e19a517d9ea4a,,getCFilePattern(),10,2,@com.android.annotations.NonNull com.android.build.gradle.managed.FilePattern getCFilePattern();,a1753c61684a5e2916762f6b2ebc0019a2b3392d,getCFilePattern(),80766,25,25
577169,telephony_java_android_telephony_SignalStrength.java,1.0,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (isGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level""); }",aa839c2d1fbafb20e35f2a32f32dfdf1588ef35b,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mUmtsRscp)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (isGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level"")) + "" "") + (java.util.Arrays.toString(mUmtsRscpThresholds)); }",05f98be40a516b86000c5cd095bc24a0813a7e45,toString(),toString(),10,1,"@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((((((((((((((""SignalStrength:"" + "" "") + (mGsmSignalStrength)) + "" "") + (mGsmBitErrorRate)) + "" "") + (mCdmaDbm)) + "" "") + (mCdmaEcio)) + "" "") + (mEvdoDbm)) + "" "") + (mEvdoEcio)) + "" "") + (mEvdoSnr)) + "" "") + (mLteSignalStrength)) + "" "") + (mLteRsrp)) + "" "") + (mLteRsrq)) + "" "") + (mLteRssnr)) + "" "") + (mLteCqi)) + "" "") + (mLteRsrpBoost)) + "" "") + (mTdScdmaRscp)) + "" "") + (mWcdmaSignalStrength)) + "" "") + (mWcdmaRscpAsu)) + "" "") + (mWcdmaRscp)) + "" "") + (mIsGsm ? ""gsm|lte"" : ""cdma"")) + "" "") + (mUseOnlyRsrpForLteLevel ? ""use_only_rsrp_for_lte_level"" : ""use_rsrp_and_rssnr_for_lte_level"")) + "" "") + (mWcdmaDefaultSignalMeasurement)) + "" "") + (java.util.Arrays.toString(mLteRsrpThresholds))) + "" "") + (java.util.Arrays.toString(mWcdmaRscpThresholds)); }",a4f030bf67f7484da6884eda9077aa1638b60032,toString(),23526,336,405
81416,tests_tests_renderscript_src_android_renderscript_cts_TestErfc.java,,,,"private void checkErfcFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testErfcFloat(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testErfcFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testErfcFloat(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testErfcFloat: "" + (e.toString()))); } }",6a8e1af7fcc3ec2735d3cb3452d3b478620584dd,,checkErfcFloat(),9,0,"private void checkErfcFloatFloat() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -3978605608416223824L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testErfcFloatFloat(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testErfcFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testErfcFloatFloat(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testErfcFloatFloat: "" + (e.toString()))); } }",50f5ff039707f9f9479056184dd7ae5533fa288b,checkErfcFloatFloat(),142451,292,272
16553,hierarchyviewer2_app_src_com_android_hierarchyviewer_HierarchyViewerApplication.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void run() { if ((com.android.hierarchyviewerlib.ComponentRegistry.getTreeViewModel().getTree()) == null) { showDeviceSelector(); treeViewButton.setEnabled(false); } else { showTreeView(); treeViewButton.setEnabled(true); } },2ba59e7faa11fb7df3264f500b19565056720a5e,,run(),14,16,"public void run() { if ((com.android.hierarchyviewerlib.models.TreeViewModel.getModel().getTree()) == null) { showDeviceSelector(); treeViewButton.setEnabled(false); } else { showTreeView(); treeViewButton.setEnabled(true); zoomSlider.setSelection(((int) (java.lang.Math.round(((com.android.hierarchyviewerlib.models.TreeViewModel.getModel().getZoom()) * 10))))); filterText.setText(""""); } }",0de98ce33b446eaeb80bde983cfac12412d62e5d,run(),450787,57,101
52781,core_java_android_widget_FastScroller.java,0.0,"private int getThumbPositionForListPosition(int firstVisibleItem, int visibleItemCount, int totalItemCount) { if (((mSectionIndexer) == null) || ((mListAdapter) == null)) { getSectionsFromIndexer(); } if (((mSectionIndexer) == null) || (!(mMatchDragPosition))) { return (((mList.getHeight()) - (mThumbH)) * firstVisibleItem) / (totalItemCount - visibleItemCount); } firstVisibleItem -= mListOffset; if (firstVisibleItem < 0) { return 0; } totalItemCount -= mListOffset; final int trackHeight = (mList.getHeight()) - (mThumbH); final int section = mSectionIndexer.getSectionForPosition(firstVisibleItem); final int sectionPos = mSectionIndexer.getPositionForSection(section); final int nextSectionPos = mSectionIndexer.getPositionForSection((section + 1)); final int sectionCount = mSections.length; final int positionsInSection = nextSectionPos - sectionPos; final android.view.View child = mList.getChildAt(0); final float incrementalPos = (child == null) ? 0 : firstVisibleItem + (((float) ((mList.getPaddingTop()) - (child.getTop()))) / (child.getHeight())); final float posWithinSection = (incrementalPos - sectionPos) / positionsInSection; int result = ((int) (((section + posWithinSection) / sectionCount) * trackHeight)); if ((firstVisibleItem > 0) && ((firstVisibleItem + visibleItemCount) == totalItemCount)) { final android.view.View lastChild = mList.getChildAt((visibleItemCount - 1)); final float lastItemVisible = ((float) (((mList.getHeight()) - (mList.getPaddingBottom())) - (lastChild.getTop()))) / (lastChild.getHeight()); result += (trackHeight - result) * lastItemVisible; } return result; }",8ee02d6291a27d06f495ba1b352b7ffd629f2347,"private int getThumbPositionForListPosition(int firstVisibleItem, int visibleItemCount, int totalItemCount) { if (((mSectionIndexer) == null) || ((mListAdapter) == null)) { getSectionsFromIndexer(); } if (((mSectionIndexer) == null) || (!(mMatchDragPosition))) { return (((mList.getHeight()) - (mThumbH)) * firstVisibleItem) / (totalItemCount - visibleItemCount); } firstVisibleItem -= mListOffset; if (firstVisibleItem < 0) { return 0; } totalItemCount -= mListOffset; final int trackHeight = (mList.getHeight()) - (mThumbH); final int section = mSectionIndexer.getSectionForPosition(firstVisibleItem); final int sectionPos = mSectionIndexer.getPositionForSection(section); int nextSectionPos = 0; final int sectionCount = mSections.length; if ((section + 1) < sectionCount) { nextSectionPos = mSectionIndexer.getPositionForSection((section + 1)); } else { nextSectionPos = totalItemCount - 1; } final int positionsInSection = nextSectionPos - sectionPos; final android.view.View child = mList.getChildAt(0); final float incrementalPos = (child == null) ? 0 : firstVisibleItem + (((float) ((mList.getPaddingTop()) - (child.getTop()))) / (child.getHeight())); final float posWithinSection = (incrementalPos - sectionPos) / positionsInSection; int result = ((int) (((section + posWithinSection) / sectionCount) * trackHeight)); if ((firstVisibleItem > 0) && ((firstVisibleItem + visibleItemCount) == totalItemCount)) { final android.view.View lastChild = mList.getChildAt((visibleItemCount - 1)); final float lastItemVisible = ((float) (((mList.getHeight()) - (mList.getPaddingBottom())) - (lastChild.getTop()))) / (lastChild.getHeight()); result += (trackHeight - result) * lastItemVisible; } return result; }",80aaf2871cec323267d05c6d8cf7fa073b448fc6,"getThumbPositionForListPosition(int,int,int)","getThumbPositionForListPosition(int,int,int)",2,0,"private int getThumbPositionForListPosition(int firstVisibleItem, int visibleItemCount, int totalItemCount) { if (((mSectionIndexer) == null) || ((mListAdapter) == null)) { getSectionsFromIndexer(); } if (((mSectionIndexer) == null) || (!(mMatchDragPosition))) { return (((mList.getHeight()) - (mThumbH)) * firstVisibleItem) / (totalItemCount - visibleItemCount); } firstVisibleItem -= mListOffset; if (firstVisibleItem < 0) { return 0; } totalItemCount -= mListOffset; final int trackHeight = (mList.getHeight()) - (mThumbH); final int section = mSectionIndexer.getSectionForPosition(firstVisibleItem); final int sectionPos = mSectionIndexer.getPositionForSection(section); final int nextSectionPos; final int sectionCount = mSections.length; if ((section + 1) < sectionCount) { nextSectionPos = mSectionIndexer.getPositionForSection((section + 1)); } else { nextSectionPos = totalItemCount - 1; } final int positionsInSection = nextSectionPos - sectionPos; final android.view.View child = mList.getChildAt(0); final float incrementalPos = (child == null) ? 0 : firstVisibleItem + (((float) ((mList.getPaddingTop()) - (child.getTop()))) / (child.getHeight())); final float posWithinSection = (incrementalPos - sectionPos) / positionsInSection; int result = ((int) (((section + posWithinSection) / sectionCount) * trackHeight)); if ((firstVisibleItem > 0) && ((firstVisibleItem + visibleItemCount) == totalItemCount)) { final android.view.View lastChild = mList.getChildAt((visibleItemCount - 1)); final float lastItemVisible = ((float) (((mList.getHeight()) - (mList.getPaddingBottom())) - (lastChild.getTop()))) / (lastChild.getHeight()); result += (trackHeight - result) * lastItemVisible; } return result; }",5f9d7163bc66df951c31f204585189390b985423,"getThumbPositionForListPosition(int,int,int)",316877,436,436
99522,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,304.0,"public static void computeTanpi(android.renderscript.cts.TestTanpi.ArgumentsFloatFloat args) { args.out = new android.renderscript.cts.Floaty(android.renderscript.cts.CoreMathVerifier.tan(((args.in) * ((float) (java.lang.Math.PI)))), 6, 128); }",8b676c72b2b648aa7b10ed67bc1f21e70f6e849e,"public static void computeTanpi(android.renderscript.cts.TestTanpi.ArgumentsFloatFloat args) { args.out = new android.renderscript.cts.Floaty(((float) (java.lang.Math.tan((((double) (args.in)) * (java.lang.Math.PI))))), 6, 128); }",00a24c11e724820c0c956aa99532bb2238867035,computeTanpi(android.renderscript.cts.TestTanpi$ArgumentsFloatFloat),computeTanpi(android.renderscript.cts.TestTanpi$ArgumentsFloatFloat),2,304,"public static void computeTanpi(android.renderscript.cts.TestTanpi.ArgumentsFloatFloat args) { args.out = new android.renderscript.cts.Floaty(android.renderscript.cts.CoreMathVerifier.tan(((args.in) * ((float) (java.lang.Math.PI)))), 6, 128); }",8b676c72b2b648aa7b10ed67bc1f21e70f6e849e,computeTanpi(android.renderscript.cts.TestTanpi$ArgumentsFloatFloat),120638,77,80
61200,ddmlib_src_test_java_com_android_ddmlib_testrunner_RemoteAndroidTestRunnerTest.java,5.0,"@java.lang.SuppressWarnings(""unchecked"") public void testRun_ioException() throws java.lang.Exception { mMockDevice.executeShellCommand(((java.lang.String) (org.easymock.EasyMock.anyObject())), ((com.android.ddmlib.IShellOutputReceiver) (org.easymock.EasyMock.anyObject())), org.easymock.EasyMock.eq(0)); org.easymock.EasyMock.expectLastCall().andThrow(new java.io.IOException()); mMockListener.testRunStarted(com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.TEST_PACKAGE, 0); mMockListener.testRunFailed(((java.lang.String) (org.easymock.EasyMock.anyObject()))); mMockListener.testRunEnded(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq(java.util.Collections.EMPTY_MAP)); org.easymock.EasyMock.replay(mMockDevice, mMockListener); try { mRunner.run(mMockListener); fail(""IOException not thrown""); } catch (java.io.IOException e) { } org.easymock.EasyMock.verify(mMockDevice, mMockListener); }",fd14cf205a06272daf1ee3fc38b11ce1b347f771,"@java.lang.SuppressWarnings(""unchecked"") public void testRun_ioException() throws java.lang.Exception { mMockDevice.executeShellCommand(((java.lang.String) (org.easymock.EasyMock.anyObject())), ((com.android.ddmlib.IShellOutputReceiver) (org.easymock.EasyMock.anyObject())), org.easymock.EasyMock.eq(0), org.easymock.EasyMock.eq(java.util.concurrent.TimeUnit.MILLISECONDS)); org.easymock.EasyMock.expectLastCall().andThrow(new java.io.IOException()); mMockListener.testRunStarted(com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.TEST_PACKAGE, 0); mMockListener.testRunFailed(((java.lang.String) (org.easymock.EasyMock.anyObject()))); mMockListener.testRunEnded(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq(java.util.Collections.EMPTY_MAP)); org.easymock.EasyMock.replay(mMockDevice, mMockListener); try { mRunner.run(mMockListener); fail(""IOException not thrown""); } catch (java.io.IOException e) { } org.easymock.EasyMock.verify(mMockDevice, mMockListener); }",b58e00565c6bb749d0db56f9658f43a807c627be,testRun_ioException(),testRun_ioException(),3,5,"@java.lang.SuppressWarnings(""unchecked"") public void testRun_ioException() throws java.lang.Exception { mMockDevice.executeShellCommand(((java.lang.String) (org.easymock.EasyMock.anyObject())), ((com.android.ddmlib.IShellOutputReceiver) (org.easymock.EasyMock.anyObject())), org.easymock.EasyMock.eq(0L), org.easymock.EasyMock.eq(java.util.concurrent.TimeUnit.MILLISECONDS)); org.easymock.EasyMock.expectLastCall().andThrow(new java.io.IOException()); mMockListener.testRunStarted(com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.TEST_PACKAGE, 0); mMockListener.testRunFailed(((java.lang.String) (org.easymock.EasyMock.anyObject()))); mMockListener.testRunEnded(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq(java.util.Collections.EMPTY_MAP)); org.easymock.EasyMock.replay(mMockDevice, mMockListener); try { mRunner.run(mMockListener); fail(""IOException not thrown""); } catch (java.io.IOException e) { } org.easymock.EasyMock.verify(mMockDevice, mMockListener); }",b370019e9554cb7c14b7bc11607121158134f5ea,testRun_ioException(),277171,291,293
37720,sdkmanager_libs_sdklib_src_com_android_sdklib_devices_Device.java,,,,public void setMeta(com.android.sdklib.devices.Device.Meta meta) { mMeta = meta; },509ff9c1b6cfeac97a72016d26cd60ccf792424a,,setMeta(com.android.sdklib.devices.Device$Meta),8,14,public void setMeta(com.android.sdklib.devices.Meta meta) { mMeta = meta; },e74a3fff180ae5f0e6ca22b8ae87a3a418747524,setMeta(com.android.sdklib.devices.Meta),17795,27,25
474557,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerAppConfigurationTests.java,1.0,"private static void assertSizesRotate(android.server.cts.ReportedSizes rotationA, android.server.cts.ReportedSizes rotationB) throws java.lang.Exception { assertEquals(rotationA.displayWidth, rotationA.metricsWidth); assertEquals(rotationA.displayHeight, rotationA.metricsHeight); assertEquals(rotationB.displayWidth, rotationB.metricsWidth); assertEquals(rotationB.displayHeight, rotationB.metricsHeight); final boolean beforePortrait = (rotationA.displayWidth) < (rotationA.displayHeight); final boolean afterPortrait = (rotationB.displayWidth) < (rotationB.displayHeight); assertFalse((beforePortrait == afterPortrait)); final boolean beforeConfigPortrait = (rotationA.widthDp) < (rotationA.heightDp); final boolean afterConfigPortrait = (rotationB.widthDp) < (rotationB.heightDp); assertEquals(beforePortrait, beforeConfigPortrait); assertEquals(afterPortrait, afterConfigPortrait); }",0e0f060d2e69dcf44641d86dfc369408a4465150,"private static void assertSizesRotate(android.server.cts.ReportedSizes rotationA, android.server.cts.ReportedSizes rotationB) throws java.lang.Exception { assertEquals(rotationA.displayWidth, rotationA.metricsWidth); assertEquals(rotationA.displayHeight, rotationA.metricsHeight); assertEquals(rotationB.displayWidth, rotationB.metricsWidth); assertEquals(rotationB.displayHeight, rotationB.metricsHeight); final boolean beforePortrait = (rotationA.displayWidth) < (rotationA.displayHeight); final boolean afterPortrait = (rotationB.displayWidth) < (rotationB.displayHeight); final boolean beforeConfigPortrait = (rotationA.widthDp) < (rotationA.heightDp); final boolean afterConfigPortrait = (rotationB.widthDp) < (rotationB.heightDp); assertEquals(beforePortrait, beforeConfigPortrait); assertEquals(afterPortrait, afterConfigPortrait); }",6a06e57887237f72c7e4e5982315c7ff17801ac2,"assertSizesRotate(android.server.cts.ReportedSizes,android.server.cts.ReportedSizes)","assertSizesRotate(android.server.cts.ReportedSizes,android.server.cts.ReportedSizes)",6,2,"private void assertSizesRotate(android.server.cts.ReportedSizes rotationA, android.server.cts.ReportedSizes rotationB) throws java.lang.Exception { assertEquals(rotationA.displayWidth, rotationA.metricsWidth); assertEquals(rotationA.displayHeight, rotationA.metricsHeight); assertEquals(rotationB.displayWidth, rotationB.metricsWidth); assertEquals(rotationB.displayHeight, rotationB.metricsHeight); final boolean beforePortrait = (rotationA.displayWidth) < (rotationA.displayHeight); final boolean afterPortrait = (rotationB.displayWidth) < (rotationB.displayHeight); if (!(shouldSkipRotationCheck())) { assertFalse((beforePortrait == afterPortrait)); } final boolean beforeConfigPortrait = (rotationA.widthDp) < (rotationA.heightDp); final boolean afterConfigPortrait = (rotationB.widthDp) < (rotationB.heightDp); assertEquals(beforePortrait, beforeConfigPortrait); assertEquals(afterPortrait, afterConfigPortrait); }",50e8374a8d2cf58622298ea34c0ae59ac01ee07d,"assertSizesRotate(android.server.cts.ReportedSizes,android.server.cts.ReportedSizes)",60457,217,239
82651,src_com_google_gct_idea_appengine_run_AppEngineRunConfigurationProducer.java,,,,"private com.intellij.execution.RunnerAndConfigurationSettings createConfiguration(@org.jetbrains.annotations.Nullable com.intellij.openapi.project.Project project, java.lang.Module module) { if (project == null) { return null; } com.intellij.execution.RunnerAndConfigurationSettings settings = com.intellij.execution.RunManagerEx.getInstanceEx(project).createRunConfiguration(AppEngineRunConfiguration.NAME, getConfigurationFactory()); final com.google.gct.idea.appengine.run.AppEngineRunConfiguration configuration = ((com.google.gct.idea.appengine.run.AppEngineRunConfiguration) (settings.getConfiguration())); configuration.setName(AppEngineRunConfiguration.NAME); configuration.setModule(module); return settings; }",73e93df6031c460e098b276f60f6e6e779dea5c5,,"createConfiguration(com.intellij.openapi.project.Project,java.lang.Module)",3,0,"private com.intellij.execution.RunnerAndConfigurationSettings createConfiguration(@org.jetbrains.annotations.Nullable com.intellij.openapi.project.Project project, java.lang.Module module) { if (project == null) { return null; } com.intellij.execution.RunnerAndConfigurationSettings settings = com.intellij.execution.RunManagerEx.getInstanceEx(project).createRunConfiguration((((module.getName()) + "" - "") + (AppEngineRunConfiguration.NAME)), getConfigurationFactory()); final com.google.gct.idea.appengine.run.AppEngineRunConfiguration configuration = ((com.google.gct.idea.appengine.run.AppEngineRunConfiguration) (settings.getConfiguration())); configuration.setModule(module); return settings; }",a22a7beb14409955946fa1a6747196caff32f341,"createConfiguration(com.intellij.openapi.project.Project,java.lang.Module)",355595,161,163
555560,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,12.0,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth); }",b6c4bcb14ed1b9b46bf0582e45d51379b8827bf6,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false); }",d4860087b98c7920c32134d047ade5d891df8144,testAesCbcHmacSha384Tcp6(),testAesCbcHmacSha384Tcp6(),9,14,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1); }",a3f08e70ca8e319191b9adc069a38c663ab99fe6,testAesCbcHmacSha384Tcp6(),439634,153,154
176245,java_tests_RsTest_src_com_android_rs_test_UT_single_source_alloc.java,,,,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_single_source_alloc s = new com.android.rs.test.ScriptC_single_source_alloc(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); for (int dataType : rsDataTypes) { for (int vecSize = 1; vecSize <= 4; vecSize++) { for (int nDims = 1; nDims <= 3; nDims++) { s.invoke_CreateAndTestAlloc(dataType, vecSize, nDims); } } } s.invoke_single_source_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",c04a6f4a5aed94032eb34f744a0468a20ba53c65,,run(),12,0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_single_source_alloc s = new com.android.rs.test.ScriptC_single_source_alloc(pRS); pRS.setMessageHandler(mRsMessage); for (int dataType : rsDataTypes) { for (int vecSize = 1; vecSize <= 4; vecSize++) { for (int nDims = 1; nDims <= 3; nDims++) { initializeGlobals(pRS, s, nDims); s.invoke_CreateAndTestAlloc(dataType, vecSize); } } } s.invoke_TestAllCases(); s.invoke_single_source_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",0362e22fefef870fb3a8f11560e75d3b6966288a,run(),9872,184,194
136110,jack_src_com_android_jack_jayce_JaycePackageLoader.java,3.0,@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); for (com.android.sched.vfs.InputVElement sub : packageVDir.list()) { if (sub.isVDir()) { subs.add(sub.getName()); } } return subs; },8ab1775835c6c6ab8989f9bc31fb3b49ab5748c4,"@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); for (java.util.Map.Entry<java.lang.String, com.android.sched.vfs.InputVElement> entry : cache.entrySet()) { if (entry.getValue().isVDir()) { subs.add(entry.getKey()); } } return subs; }",7e5d72bf9ecd1ab95e3f8f75c83968bb6403857c,getSubPackageNames(com.android.jack.ir.ast.JPackage),getSubPackageNames(com.android.jack.ir.ast.JPackage),5,3,@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { return collections.getUnmodifiableCollection(vdirCache.keySet()); },98852912b056f6288861d382f6ec3cc309ec45f5,getSubPackageNames(com.android.jack.ir.ast.JPackage),97098,141,64
48571,builder_src_test_java_com_android_builder_BuildTypeTest.java,0.0,"public void testDebug() { com.android.builder.BuildType type = new com.android.builder.BuildType(""debug""); assertTrue(type.isDebuggable()); assertTrue(type.isDebugJniBuild()); assertTrue(type.isDebugSigned()); }",df14d5e1379181b81ef620e746804ba666d7a44e,"public void testDebug() { com.android.builder.BuildType type = new com.android.builder.BuildType(""debug""); assertTrue(type.isDebuggable()); assertTrue(type.isDebugJniBuild()); }",0f1fc3f78c4194adc3c3b9c9c77076798db150fd,testDebug(),testDebug(),4,0,"public void testDebug() { com.android.builder.BuildType type = new com.android.builder.BuildType(""debug""); assertTrue(type.isDebuggable()); assertTrue(type.isDebugJniBuild()); assertNotNull(type.getKeystore()); assertTrue(type.getKeystore().isSigningReady()); }",efdd391737dfb0a202ef5668a2dad47fd2c70fb6,testDebug(),462893,48,66
652908,test_681-checker-abs_src_Main.java,9.0,"public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); java.lang.System.out.println(""passed""); }",8f57da55ff36b0cc93b86a42071bdbcecf054b47,"public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.absI((-10))); Main.expectEquals(20, Main.absI(20)); Main.expectEquals(10L, Main.absL((-10L))); Main.expectEquals(20L, Main.absL(20L)); Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); Main.expectEquals(1, Main.zabs1(((byte) (1)))); Main.expectEquals(255, Main.zabs1(((byte) (-1)))); Main.expectEquals(1, Main.zabs2(((short) (1)))); Main.expectEquals(65535, Main.zabs2(((short) (-1)))); java.lang.System.out.println(""passed""); }",ab9404c41be957eb4382b1aebac102fcdec37431,main(java.lang.String[]),main(java.lang.String[]),2,11,"public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.absI((-10))); Main.expectEquals(20, Main.absI(20)); Main.expectEquals(10L, Main.absL((-10L))); Main.expectEquals(20L, Main.absL(20L)); Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); Main.expectEquals(1, Main.zabs1(((byte) (1)))); Main.expectEquals(255, Main.zabs1(((byte) (-1)))); Main.expectEquals(1, Main.zabs2(((short) (1)))); Main.expectEquals(65535, Main.zabs2(((short) (-1)))); Main.expectEquals(1, Main.zabs3(((char) (1)))); Main.expectEquals(65535, Main.zabs3(((char) (-1)))); java.lang.System.out.println(""passed""); }",3b0a32b522d2be61d598b242d26547362c358c74,main(java.lang.String[]),39650,340,375
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.FailingSuiteTest.class) @org.junit.Test public void testRunner_FailingSuiteTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure(""suite"", ""java.lang.IllegalStateException: Cannot create suite\n"").completedNormally(); }",a14bb662822662e09ebef4e518d88451572062eb,,testRunner_FailingSuiteTest(),3,0,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.FailingSuiteTest.class) @org.junit.Test public void testRunner_FailingSuiteTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure(""suite"", ""java.lang.IllegalStateException: Cannot create suite\n"").completedNormally(); }",1d528ac94622e30a208a00630d0118b9daf6757a,testRunner_FailingSuiteTest(),130785,95,94
209370,harmony-tests_src_test_java_org_apache_harmony_tests_java_lang_DoubleTest.java,9.0,"public void test_isInfiniteD() { assertTrue(""Infinity check failed"", (((java.lang.Double.isInfinite(java.lang.Double.NEGATIVE_INFINITY)) && (java.lang.Double.isInfinite(java.lang.Double.POSITIVE_INFINITY))) && (!(java.lang.Double.isInfinite(java.lang.Double.MAX_VALUE))))); }",a60f37d559269547abc3d47f1f73a8cc25564d30,"public void test_isInfiniteD() { assertTrue(""Infinity check failed"", ((((((java.lang.Double.isInfinite(java.lang.Double.NEGATIVE_INFINITY)) && (java.lang.Double.isInfinite(java.lang.Double.POSITIVE_INFINITY))) && (!(java.lang.Double.isInfinite(java.lang.Double.MAX_VALUE)))) && (!(java.lang.Double.isInfinite(java.lang.Double.MIN_VALUE)))) && (!(java.lang.Double.isInfinite(Nan)))) && (!(java.lang.Double.isInfinite(0.0))))); }",d74924d0d2a85cbf78c203b75f1de71257d2424b,test_isInfiniteD(),test_isInfiniteD(),4,9,public void test_isInfiniteD() { assertTrue(java.lang.Double.isInfinite(java.lang.Double.NEGATIVE_INFINITY)); assertTrue(java.lang.Double.isInfinite(java.lang.Double.POSITIVE_INFINITY)); assertFalse(java.lang.Double.isInfinite(java.lang.Double.MAX_VALUE)); assertFalse(java.lang.Double.isInfinite(java.lang.Double.MIN_VALUE)); assertFalse(java.lang.Double.isInfinite(java.lang.Double.NaN)); assertFalse(java.lang.Double.isInfinite(0.0)); },a021844d988efbd157aad219811759ea89c8977c,test_isInfiniteD(),475600,120,122
43134,testapps_libsTest_appTest_src_com_android_tests_libstest_app_MainActivityTest.java,,,,"@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals(mAppTextView2.getText(), ""SUCCESS-APP""); assertEquals(mLib1TextView2.getText(), ""SUCCESS-LIB1""); assertEquals(mLib2TextView2.getText(), ""SUCCESS-LIB2""); }",0606e722c1b1228f814a026f114270b11c3da229,,testJavaStrings(),3,2,"@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals(""SUCCESS-APP"", mAppTextView2.getText()); assertEquals(""SUCCESS-LIB1"", mLib1TextView2.getText()); assertEquals(""SUCCESS-LIB2"", mLib2TextView2.getText()); }",078a4f01c8cae2d9da9f024ac7d4e80c7fd3a422,testJavaStrings(),224638,62,59
583630,src_com_android_bips_LocalPrintJob.java,5.0,"private void finish(boolean success, java.lang.String error) { mPrintService.unlockWifi(); mBackend.closeDocument(); mMainHandler.removeCallbacksAndMessages(null); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }",fda3c82dc98b5323350b8ca59d95295e92f80850,"private void finish(boolean success, java.lang.String error) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""finish() success="" + success) + "", error="") + error)); if ((mDiscovery) != null) mDiscovery.stop(); if ((mDiscoveryTimeout) != null) mDiscoveryTimeout.stop(); if ((mConnection) != null) mConnection.stop(); mPrintService.unlockWifi(); mBackend.closeDocument(); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }",b3e632922b87b363dd7e7cc743abbf9df28e8c07,"finish(boolean,java.lang.String)","finish(boolean,java.lang.String)",4,7,"private void finish(boolean success, java.lang.String error) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((""finish() success="" + success) + "", error="") + error)); mPrintService.getDiscovery().stop(this); if ((mDiscoveryTimeout) != null) { mDiscoveryTimeout.cancel(); } if ((mConnection) != null) { mConnection.close(); } mPrintService.unlockWifi(); mBackend.closeDocument(); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }",f5670ec4ab30bc163d5790d555a4fe7aa05e0d41,"finish(boolean,java.lang.String)",33318,206,206
81416,tests_tests_renderscript_src_android_renderscript_cts_TestRemainder.java,,,,public void testRemainder() { checkRemainderFloatFloat(); checkRemainderFloat2Float2(); checkRemainderFloat3Float3(); checkRemainderFloat4Float4(); },9e15348256f8b4c3059023cb7c11f44e13dfcd1b,,testRemainder(),9,1,public void testRemainder() { checkRemainderFloatFloatFloat(); checkRemainderFloat2Float2Float2(); checkRemainderFloat3Float3Float3(); checkRemainderFloat4Float4Float4(); },aa73589d115047b96ab8fb63a348bab68a8a7258,testRemainder(),142654,33,40
402363,src_java_com_android_internal_telephony_uicc_UiccCard.java,19.0,public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); },efbf2b9480bb23a8ec0360cc0c1d0954e5497982,public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { synchronized(mLock) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); } },bcd52eff7c837dd75c7013c5e0126de45a740f30,getCarrierPrivilegeStatus(android.content.pm.PackageInfo),getCarrierPrivilegeStatus(android.content.pm.PackageInfo),4,19,public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); },f60fa7eac61b6f9e79d2eb3299957b4b3a17602f,getCarrierPrivilegeStatus(android.content.pm.PackageInfo),378772,75,95
205783,harmony-tests_src_test_java_org_apache_harmony_tests_java_util_ArraysTest.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void test_parallelSort$DII(int size) { int startIndex = 100; int endIndex = size - 100; double[] reversedArray = new double[size]; double[] originalReversedArray = new double[size]; for (int counter = 0; counter < startIndex; counter++) { reversedArray[counter] = ((double) (100)); originalReversedArray[counter] = reversedArray[counter]; } for (int counter = endIndex; counter < size; counter++) { reversedArray[counter] = ((double) (100)); originalReversedArray[counter] = reversedArray[counter]; } for (int counter = startIndex; counter < endIndex; counter++) { reversedArray[counter] = ((double) (((size - counter) - startIndex) - 1)); originalReversedArray[counter] = reversedArray[counter]; } java.util.Arrays.parallelSort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue(""Array not sorted within bounds"", ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (org.apache.harmony.tests.java.util.ArraysTest.arraySize); counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.parallelSort(reversedArray, (startIndex + 1), startIndex); fail(""IllegalArgumentException expected""); } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.parallelSort(reversedArray, (-1), startIndex); fail(""ArrayIndexOutOfBoundsException expected (1)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.parallelSort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail(""ArrayIndexOutOfBoundsException expected (2)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } }",c39b6518aeb779a22aabbcec4842d2ddec1f7ba1,,test_parallelSort$DII(int),7,184,"private void test_parallelSort$DII(int size) { int startIndex = 100; int endIndex = size - 100; double[] reversedArray = new double[size]; double[] originalReversedArray = new double[size]; java.util.Arrays.fill(reversedArray, 0, startIndex, ((double) (100))); java.util.Arrays.fill(reversedArray, endIndex, size, ((double) (100))); for (int counter = startIndex; counter < endIndex; counter++) { reversedArray[counter] = ((double) (((size - counter) - startIndex) - 1)); } java.lang.System.arraycopy(reversedArray, 0, originalReversedArray, 0, size); java.util.Arrays.parallelSort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue(""Array not sorted within bounds"", ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (org.apache.harmony.tests.java.util.ArraysTest.arraySize); counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.parallelSort(reversedArray, (startIndex + 1), startIndex); fail(""IllegalArgumentException expected""); } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.parallelSort(reversedArray, (-1), startIndex); fail(""ArrayIndexOutOfBoundsException expected (1)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.parallelSort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail(""ArrayIndexOutOfBoundsException expected (2)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } }",68a05d4f29bac1643d109d81f0e3f673c2f2afea,test_parallelSort$DII(int),381771,448,421
308588,luni_src_main_java_libcore_io_MemoryMappedFile.java,2.0,"public libcore.io.BufferIterator bigEndianIterator() { return new libcore.io.NioBufferIterator(address, ((int) (size)), ((java.nio.ByteOrder.nativeOrder()) != (java.nio.ByteOrder.BIG_ENDIAN))); }",180b8c2d26d9651d0fc52ee242f6257068d50b75,"public libcore.io.BufferIterator bigEndianIterator() { return new libcore.io.NioBufferIterator(this, ((java.nio.ByteOrder.nativeOrder()) != (java.nio.ByteOrder.BIG_ENDIAN))); }",8312cd2f0be53303da577daa3e0901da0db4c8f7,bigEndianIterator(),bigEndianIterator(),12,3,"public libcore.io.BufferIterator bigEndianIterator() { return new libcore.io.NioBufferIterator(this, address, size, ((java.nio.ByteOrder.nativeOrder()) != (java.nio.ByteOrder.BIG_ENDIAN))); }",0926bb34a7c769c6161acf13aab2d50cb5927463,bigEndianIterator(),42637,51,55
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,59.0,"public void test_getPositivePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositivePrefix(""++""); assertTrue(""Incorrect positive prefix"", df.getPositivePrefix().equals(""++"")); }",58ddb36a0deda8e85b8ebac6559639c530c4afc7,"public void testGetPositivePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositivePrefix(""++""); assertTrue(""Incorrect positive prefix"", df.getPositivePrefix().equals(""++"")); }",ab151170e73b5441d382bece233a082d0220cc15,test_getPositivePrefix(),testGetPositivePrefix(),2,18,"public void test_getPositivePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositivePrefix(""++""); assertTrue(""Incorrect positive prefix"", df.getPositivePrefix().equals(""++"")); }",58ddb36a0deda8e85b8ebac6559639c530c4afc7,test_getPositivePrefix(),84372,47,48
101896,build-system_gradle_src_main_groovy_com_android_build_gradle_rules_Splits.java,,,,public void density(org.gradle.api.Action<com.android.build.gradle.rules.SplitData> action) { action.execute(density); },bc2dc3f2964017701028a958dbf0955afbee2c1e,,density(org.gradle.api.Action),4,2,public void density(org.gradle.api.Action<com.android.build.gradle.internal.dsl.DensitySplitData> action) { action.execute(density); },b53b232da5cb3ae679f3361e224f5d6d810e9d40,density(org.gradle.api.Action),153856,35,38
347050,service_java_com_android_server_wifi_scanner_WificondWifiScannerImpl.java,44.0,"public void onPnoScanFailed() { android.util.Log.e(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, ""Pno scan failure received""); reportPnoScanFailure(); }",16ccec1dfc99bfab2e565600c3f9207694ac10c7,"public void onPnoScanFailed() { android.util.Log.e(com.android.server.wifi.scanner.WificondWifiScannerImpl.TAG, ""Pno scan failure received""); reportPnoScanFailure(); }",9f5c926fcda49648d05c88a896d08ad419fa1824,onPnoScanFailed(),onPnoScanFailed(),12,46,"public void onPnoScanFailed() { android.util.Log.e(com.android.server.wifi.scanner.WificondScannerImpl.TAG, ""Pno scan failure received""); reportPnoScanFailure(); }",0ffb45fe49339f2fe2fa11db0727c2819e97d164,onPnoScanFailed(),82461,49,48
80701,sdk-common_src_main_java_com_android_ide_common_internal_ExecutorSingleton.java,,,,public static java.util.concurrent.ExecutorService getExecutor() { com.android.ide.common.internal.ExecutorSingleton.checkExecutor(); return com.android.ide.common.internal.ExecutorSingleton.sExecutorService; },28cc562d034d0f19ee8dbd42e2df2c61e43365b9,,getExecutor(),3,4,public static synchronized java.util.concurrent.ExecutorService getExecutor() { com.android.ide.common.internal.ExecutorSingleton.checkExecutor(); return com.android.ide.common.internal.ExecutorSingleton.sExecutorService; },5dff4c1320706f99c91008870cbd102d0b4d599b,getExecutor(),242432,47,48
162242,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_StandaloneNdkComponentModelPlugin.java,,,,@com.android.annotations.NonNull public static java.lang.String combineAsCamelCase(@com.android.annotations.NonNull java.util.List<? extends org.gradle.api.Named> namedList) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); boolean first = true; for (org.gradle.api.Named named : namedList) { if (first) { sb.append(named.getName()); first = false; } else { sb.append(com.android.utils.StringHelper.capitalize(named.getName())); } } return sb.toString(); },a8b0b129ed10f7485491fae55e243a658a5b7332,,combineAsCamelCase(java.util.List),5,7,"@com.android.annotations.NonNull private static java.lang.String combineAsCamelCase(@com.android.annotations.NonNull java.lang.Iterable<? extends org.gradle.api.Named> namedList) { return com.android.utils.StringHelper.combineAsCamelCase(com.google.common.collect.Iterables.transform(namedList, new com.google.common.base.Function<org.gradle.api.Named, java.lang.String>() { @java.lang.Override public java.lang.String apply(org.gradle.api.Named named) { return named.getName(); } })); }",b380f4df05896eb0f2b5c9a881c6c5877f6d33fd,combineAsCamelCase(java.lang.Iterable),161354,127,134
91995,luni_src_main_java_java_nio_MappedByteBuffer.java,3.0,"public final boolean isLoaded() { checkIsMapped(); long address = block.toLong(); long size = block.getSize(); if (size == 0) { return true; } try { int pageSize = ((int) (Libcore.os.sysconf(libcore.io.OsConstants._SC_PAGE_SIZE))); int pageOffset = ((int) (address % pageSize)); address -= pageOffset; size += pageOffset; int pageCount = ((int) (((size + pageSize) - 1) / pageSize)); byte[] vector = new byte[pageCount]; Libcore.os.mincore(address, size, vector); for (int i = 0; i < (vector.length); ++i) { if (((vector[i]) & 1) != 1) { return false; } } return true; } catch (libcore.io.ErrnoException errnoException) { return false; } }",ce41c40808c186f3c61a65f532f2f49c0767d321,"public final boolean isLoaded() { checkIsMapped(); long address = block.toLong(); long size = block.getSize(); if (size == 0) { return true; } try { int pageSize = ((int) (Libcore.os.sysconf(android.os.OsConstants._SC_PAGE_SIZE))); int pageOffset = ((int) (address % pageSize)); address -= pageOffset; size += pageOffset; int pageCount = ((int) (((size + pageSize) - 1) / pageSize)); byte[] vector = new byte[pageCount]; Libcore.os.mincore(address, size, vector); for (int i = 0; i < (vector.length); ++i) { if (((vector[i]) & 1) != 1) { return false; } } return true; } catch (android.os.ErrnoException errnoException) { return false; } }",ed306d9af4d37575ab5fa95d05d6231bb04676a8,isLoaded(),isLoaded(),3,3,"public final boolean isLoaded() { checkIsMapped(); long address = block.toLong(); long size = block.getSize(); if (size == 0) { return true; } try { int pageSize = ((int) (Libcore.os.sysconf(android.system.OsConstants._SC_PAGE_SIZE))); int pageOffset = ((int) (address % pageSize)); address -= pageOffset; size += pageOffset; int pageCount = ((int) (((size + pageSize) - 1) / pageSize)); byte[] vector = new byte[pageCount]; Libcore.os.mincore(address, size, vector); for (int i = 0; i < (vector.length); ++i) { if (((vector[i]) & 1) != 1) { return false; } } return true; } catch (android.system.ErrnoException errnoException) { return false; } }",93ab1068b70d455103dcbab70f3884b3ebb5746f,isLoaded(),170390,194,194
79721,graphics_java_android_graphics_Canvas.java,64.0,"private static native void native_drawPosText(int nativeCanvas, char[] text, int index, int count, float[] pos, int paint);",9af81e13b0941859bf38c2ff124286c5f660577f,"private static native void native_drawPosText(long nativeCanvas, char[] text, int index, int count, float[] pos, long paint);",303810624dbeca9728570c9a6fcda0caa6dc4241,"native_drawPosText(int,char[],int,int,float[],int)","native_drawPosText(long,char[],int,int,float[],long)",6,94,"private static native void native_drawPosText(long nativeCanvas, char[] text, int index, int count, float[] pos, long nativePaint);",32b5bcebbf92fe93cd02670851be01643148f692,"native_drawPosText(long,char[],int,int,float[],long)",35578,31,32
115053,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,1.0,"public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { projectDir = new java.io.File(com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); return this; }",9a49aa2fdd6e1802db8ab8cbaf68c1d98967e61a,"public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { testApp = new com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.EmptyTestApp(); java.io.File projectDir = new java.io.File(com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); for (java.io.File src : com.google.common.io.Files.fileTreeTraverser().preOrderTraversal(projectDir).filter(new com.google.common.base.Predicate<java.io.File>() { @java.lang.Override public boolean apply(@com.android.annotations.Nullable java.io.File file) { return (file != null) && (!(file.isDirectory())); } })) { java.io.File relativePath = new java.io.File(src.toString().replace(projectDir.toString(), """")); try { testApp.addFile(new com.android.build.gradle.integration.common.fixture.app.TestSourceFile(relativePath.getParent(), src.getName(), com.google.common.io.Files.toByteArray(src))); } catch (java.lang.Exception e) { fail(e.toString()); } } return this; }",3945eaaa7ecfdadd8139b4077c6664fd7e90a868,fromSample(java.lang.String),fromSample(java.lang.String),3,1,"public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { com.android.build.gradle.integration.common.fixture.app.AndroidTestApp app = new com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.EmptyTestApp(); java.io.File projectDir = new java.io.File(com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); com.android.build.gradle.integration.common.fixture.GradleTestProject.addAllFiles(app, projectDir); return fromTestApp(app); }",4e54396ed746034869e752d6fa6f49ce01124eeb,fromSample(java.lang.String),304164,302,166
346697,tests_wifitests_src_com_android_server_wifi_WifiNativeTest.java,11.0,"@org.junit.Test public void testSetupDriverForSoftApModeError() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(null); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode(); assertEquals(null, returnedApInterface); verify(wificondControl).setupDriverForSoftApMode(); }",471108e8145043015041d46450442fc12769af3c,"@org.junit.Test public void testSetupDriverForSoftApModeError() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(null); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode(); assertEquals(null, returnedApInterface); verify(mWifiNative).startHal(eq(false)); verify(wificondControl).setupDriverForSoftApMode(); }",3a3381a28b5bea32077d750cc24657957a20020d,testSetupDriverForSoftApModeError(),testSetupDriverForSoftApModeError(),9,12,"@org.junit.Test public void testSetupDriverForSoftApModeError() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(null); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupForSoftApMode(); assertEquals(null, returnedApInterface); verify(mWifiNative).startHal(eq(false)); verify(wificondControl).setupDriverForSoftApMode(); }",9489b76d9943dbf9ec74f20dc7bb62d23e026c6a,testSetupDriverForSoftApModeError(),217798,171,170
430659,luni_src_test_java_libcore_java_util_zip_ZipEntryTest.java,2.0,"public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry(""x"").getExtra().length); zipFile.close(); }",1256fdce25bd48d8d1ae9b58575c8f19db6c4ea3,"public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.TEST_TIME); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry(""x"").getExtra().length); zipFile.close(); }",c6ecc2b93a6a4694379c1084bfc69439e4cc2da0,testMaxLengthExtra(),testMaxLengthExtra(),10,2,"public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry(""x"").getExtra().length); zipFile.close(); }",48985df39f504f2ca55e57d96b5ff9df464c9344,testMaxLengthExtra(),83947,197,197
37842,src_com_android_settings_AccessibilitySettings.java,25.0,"private void offerInstallAccessibilitySerivceOnce() { if ((mServicesCategory.getPreference(0)) != (mNoServicesMessagePreference)) { return; } android.content.SharedPreferences preferences = getActivity().getPreferences(Context.MODE_PRIVATE); final boolean offerInstallService = !(preferences.getBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, false)); if (offerInstallService) { preferences.edit().putBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, true).commit(); showDialog(com.android.settings.AccessibilitySettings.DIALOG_ID_NO_ACCESSIBILITY_SERVICES); } }",a04bae8fdf7a5fcc28aacdf7e3b9a8757e52e2cc,"private void offerInstallAccessibilitySerivceOnce() { if ((mServicesCategory.getPreference(0)) != (mNoServicesMessagePreference)) { return; } java.lang.String screenreaderMarketLink = android.os.SystemProperties.get(com.android.settings.AccessibilitySettings.SYSTEM_PROPERTY_MARKET_URL, com.android.settings.AccessibilitySettings.DEFAULT_SCREENREADER_MARKET_LINK); android.net.Uri marketUri = android.net.Uri.parse(screenreaderMarketLink); android.content.Intent marketIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW, marketUri); if ((getPackageManager().resolveActivity(marketIntent, 0)) == null) { return; } android.content.SharedPreferences preferences = getActivity().getPreferences(Context.MODE_PRIVATE); final boolean offerInstallService = !(preferences.getBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, false)); if (offerInstallService) { preferences.edit().putBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, true).commit(); showDialog(com.android.settings.AccessibilitySettings.DIALOG_ID_NO_ACCESSIBILITY_SERVICES); } }",a4dc2bee8366067ff66386107f685eadced887d9,offerInstallAccessibilitySerivceOnce(),offerInstallAccessibilitySerivceOnce(),8,24,"private void offerInstallAccessibilitySerivceOnce() { if ((mServicesCategory.getPreference(0)) != (mNoServicesMessagePreference)) { return; } android.content.SharedPreferences preferences = getActivity().getPreferences(Context.MODE_PRIVATE); final boolean offerInstallService = !(preferences.getBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, false)); if (offerInstallService) { java.lang.String screenreaderMarketLink = android.os.SystemProperties.get(com.android.settings.AccessibilitySettings.SYSTEM_PROPERTY_MARKET_URL, com.android.settings.AccessibilitySettings.DEFAULT_SCREENREADER_MARKET_LINK); android.net.Uri marketUri = android.net.Uri.parse(screenreaderMarketLink); android.content.Intent marketIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW, marketUri); if ((getPackageManager().resolveActivity(marketIntent, 0)) == null) { return; } preferences.edit().putBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, true).commit(); showDialog(com.android.settings.AccessibilitySettings.DIALOG_ID_NO_ACCESSIBILITY_SERVICES); } }",31f4724939d1b613fc5758dad39f9ba2498b69c7,offerInstallAccessibilitySerivceOnce(),466886,288,288
237051,sched_src_com_android_sched_util_config_Config.java,1.0,@javax.annotation.Nonnull public <T> java.lang.String getAsString(@javax.annotation.Nonnull com.android.sched.util.config.id.PropertyId<T> propertyId);,c63ece483c82aafce7a3ced20617563d4d8fbd81,public <T> java.lang.String getAsString(@javax.annotation.Nonnull com.android.sched.util.config.id.PropertyId<T> propertyId);,58da8989ee28660c34cb7d62a91fa6b508f9c100,getAsString(com.android.sched.util.config.id.PropertyId),getAsString(com.android.sched.util.config.id.PropertyId),2,0,@javax.annotation.Nonnull public <T> java.lang.String getAsString(@javax.annotation.Nonnull com.android.sched.util.config.id.PropertyId<T> propertyId);,c63ece483c82aafce7a3ced20617563d4d8fbd81,getAsString(com.android.sched.util.config.id.PropertyId),68034,37,43
151671,jack-tests_tests_com_android_jack_experimental_incremental_DependenciesTest008.java,3.0,"@org.junit.Test public void testDependency002() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + (""public class A { } \n"" + ""class B { } \n""))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJackFiles().size()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ""public class A { }\n"")); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(1, ite.getJackFiles().size()); }",75ade10761162fba76bb07cb8cc9666585e9f59d,"@org.junit.Test public void testDependency002() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + (""public class A { } \n"" + ""class B { } \n""))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJayceSize()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ""public class A { }\n"")); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(1, ite.getJayceSize()); }",eb1a6d768fc755928c2c664b20a30ddb5fa8bcac,testDependency002(),testDependency002(),5,3,"@org.junit.Test public void testDependency002() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + (""public class A { } \n"" + ""class B { } \n""))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJayceCount()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ""public class A { }\n"")); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(1, ite.getJayceCount()); }",024542c0c6a9feb019d0df0fcd81f57436c833a7,testDependency002(),461368,208,208
155834,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_NdkComponentModelPlugin.java,16.0,"@java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); }",34e21c75f942ec9afcaa9d116a5dbb0d00576733,"@java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); for (org.gradle.nativeplatform.SharedLibraryBinarySpec nativeBin : nativeBinaries) { com.android.build.gradle.ndk.internal.NdkConfiguration.configureBinary(nativeBin, buildDir, binary.getMergedNdkConfig(), ndkHandler); } }",e4f85487796f2975c24c30b4a048fd83ba670409,execute(com.android.build.gradle.model.DefaultAndroidBinary),execute(com.android.build.gradle.model.DefaultAndroidBinary),5,15,"@java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { binary.computeMergedNdk(ndkConfig, binary.getProductFlavors(), binary.getBuildType()); java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); for (org.gradle.nativeplatform.SharedLibraryBinarySpec nativeBin : nativeBinaries) { com.android.build.gradle.ndk.internal.NdkConfiguration.configureBinary(nativeBin, buildDir, binary.getMergedNdkConfig(), ndkHandler); } }",84030aa74cb6c0ea7700bf5c3523acd0f6282c40,execute(com.android.build.gradle.model.DefaultAndroidBinary),84131,153,174
589613,core_java_android_net_NetworkStats.java,30.0,@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return (((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; },0899848066598ef0d34dfbc032271ea792bc05bf,@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return ((((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((defaultNetwork) == (e.defaultNetwork))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; },7a262a4e7f2c33290a25ff22c78a4f53cb477561,equals(java.lang.Object),equals(java.lang.Object),6,29,@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return ((((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((defaultNetwork) == (e.defaultNetwork))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; },dbaabc804b3c7e54f51301705981b4a884426563,equals(java.lang.Object),53325,216,216
283144,ojluni_src_main_java_java_net_AbstractPlainSocketImpl.java,9.0,protected void close() throws java.io.IOException { synchronized(fdLock) { if (((fd) != null) && (fd.valid())) { if (!(stream)) { sun.net.ResourceManager.afterUdpClose(); } if ((fdUseCount) == 0) { if (closePending) { return; } closePending = true; try { socketPreClose(); } finally { socketClose(); } fd = null; return; } else { if (!(closePending)) { closePending = true; (fdUseCount)--; socketPreClose(); } } } } },67cf3aee0d33d013f7fee90b3b6f1f77b6c66e9b,protected void close() throws java.io.IOException { synchronized(fdLock) { if (((fd) != null) && (fd.valid())) { if (!(stream)) { sun.net.ResourceManager.afterUdpClose(); } if ((fdUseCount) == 0) { if (closePending) { return; } closePending = true; try { socketPreClose(); } finally { socketClose(); } return; } else { if (!(closePending)) { closePending = true; (fdUseCount)--; socketPreClose(); } } } } },ab0b8b6dc2034c9faee8b95bc45432f1e0f8e45f,close(),close(),7,9,protected void close() throws java.io.IOException { synchronized(fdLock) { if (((fd) != null) && (fd.valid())) { if (!(stream)) { sun.net.ResourceManager.afterUdpClose(); } if (!(closePending)) { dalvik.system.SocketTagger.get().untag(fd); } if ((fdUseCount) == 0) { if (closePending) { return; } closePending = true; try { socketPreClose(); } finally { socketClose(); } return; } else { if (!(closePending)) { closePending = true; (fdUseCount)--; socketPreClose(); } } } } },4416a4a17ee6dea8b5bc0c585f443676a006778b,close(),310511,116,138
64463,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_Support_Format.java,3.0,"protected void t_Format(int count, java.lang.Object object, java.text.Format format, java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> expectedResults) { java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> results = org.apache.harmony.tests.java.text.Support_Format.findFields(format.formatToCharacterIterator(object)); assertTrue((((""Test "" + count) + "": Format returned incorrect CharacterIterator for "") + (format.format(object))), org.apache.harmony.tests.java.text.Support_Format.compare(results, expectedResults)); }",266255403b2015e0b8efcca6b50086c66bd9d01f,"protected void t_Format(int count, java.lang.Object object, java.text.Format format, java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> expectedResults) { java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> results = org.apache.harmony.tests.java.text.Support_Format.findFields(format.formatToCharacterIterator(object)); assertEquals(expectedResults.size(), results.size()); for (int i = 0; i < (results.size()); ++i) { assertEquals(("""" + i), expectedResults.get(i), results.get(i)); } }",fa369937b492da2be7db4a4696498644690382fe,"t_Format(int,java.lang.Object,java.text.Format,java.util.Vector)","t_Format(int,java.lang.Object,java.text.Format,java.util.Vector)",6,2,"protected void t_Format(int count, java.lang.Object object, java.text.Format format, java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> expectedResults) { java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> results = org.apache.harmony.tests.java.text.Support_Format.findFields(format.formatToCharacterIterator(object)); assertEquals((((((((""size mismatch\n"" + (format.format(object))) + ""\n"") + ""expectedResults="") + expectedResults) + ""\n"") + "" results="") + results), expectedResults.size(), results.size()); for (int i = 0; i < (results.size()); ++i) { if (!(results.contains(expectedResults.get(i)))) { fail((((((((""didn't find expected result "" + (expectedResults.get(i))) + ""\n"") + ""expectedResults="") + expectedResults) + ""\n"") + "" results="") + results)); } } }",fad8374e9c24d0af880f096c8cdd96d6404d6e35,"t_Format(int,java.lang.Object,java.text.Format,java.util.Vector)",115745,164,250
107815,jack_tests_com_android_jack_multidex_MultiDexOverflowTests.java,,,,"@org.junit.BeforeClass public static void init() throws java.io.IOException, java.lang.Exception { com.android.jack.multidex.MultiDexOverflowTests.annotations = com.android.jack.multidex.MultiDexOverflowTests.prepareAnnotations(); }",90e2e04ccabe1ed1c16719736511df76664a9bdc,,init(),5,2,"@org.junit.BeforeClass public static void init() throws java.io.IOException, java.lang.Exception { com.android.jack.multidex.MultiDexOverflowTests.annotations = com.android.jack.multidex.MultiDexTests.prepareAnnotations(); }",99f77bf3387658c01614054b7eadae531f16df2b,init(),224399,54,53
657832,src_com_android_bluetooth_hfp_HeadsetPhoneState.java,12.0,"private void startListenForPhoneState() { if (!(mListening)) { int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); mListening = true; } else { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (""startListenForPhoneState, invalid subscription ID "" + subId)); } } }",068568d402cd9ab27bff18a471a15c37229822ba,"private void startListenForPhoneState() { if ((mPhoneStateListener) != null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""startListenForPhoneState, already listening""); return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (""startListenForPhoneState, invalid subscription ID "" + subId)); return; } int events = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""startListenForPhoneState, no event to listen""); return; } mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, events); if ((events & (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)) != 0) { mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); } }",bd53a6cf4b5dd92d50dc5b7369a88c44088db283,startListenForPhoneState(),startListenForPhoneState(),10,13,"private void startListenForPhoneState() { if ((mPhoneStateListener) != null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""startListenForPhoneState, already listening""); return; } int events = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""startListenForPhoneState, no event to listen""); return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (""startListenForPhoneState, invalid subscription ID "" + subId)); return; } android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (((""startListenForPhoneState(), subId="" + subId) + "", enabled_events="") + events)); mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, events); }",dde8884e1972167d305caeb27a36ec4cef049efc,startListenForPhoneState(),182363,326,306
22268,monkeyrunner_src_com_android_monkeyrunner_adb_AdbMonkeyDevice.java,19.0,"@java.lang.Override public java.lang.String getProperty(java.lang.String key) { try { return manager.getVariable(key); } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, (""Unable to get variable: "" + key), e); return null; } }",2d8cb4273f91a022e501344b38fdf36952ddd7ff,"public java.lang.String getProperty(java.lang.String key) { try { return manager.getVariable(key); } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, (""Unable to get variable: "" + key), e); return null; } }",a692f0960cd87cab2b8fec16c8148342fd046561,getProperty(java.lang.String),getProperty(java.lang.String),8,19,"@java.lang.Override public java.lang.String getProperty(java.lang.String key) { try { return manager.getVariable(key); } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, (""Unable to get variable: "" + key), e); return null; } }",2d8cb4273f91a022e501344b38fdf36952ddd7ff,getProperty(java.lang.String),81218,83,89
549481,core_java_android_bluetooth_BluetoothHearingAid.java,,,,"boolean doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); android.content.ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), 0); intent.setComponent(comp); if ((comp == null) || (!(mContext.bindServiceAsUser(intent, mConnection, 0, android.os.Process.myUserHandle())))) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, (""Could not bind to Bluetooth Hearing Aid Service with "" + intent)); return false; } return true; }",c67446e33abf8803f82cce0319e0ae047693ced7,,doBind(),22,13,"void doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); android.content.ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), 0); intent.setComponent(comp); if ((comp == null) || (!(mContext.bindServiceAsUser(intent, mConnection, 0, android.os.Process.myUserHandle())))) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, (""Could not bind to Bluetooth Hearing Aid Service with "" + intent)); return; } }",366414646f53f5a22ab68cd37f0b2a972db577ee,doBind(),209692,138,134
79530,luni_src_main_java_java_nio_DatagramChannelImpl.java,22.0,@java.lang.Override public void send(java.net.DatagramPacket packet) throws java.io.IOException { if (!(channelImpl.isBlocking())) { throw new java.nio.channels.IllegalBlockingModeException(); } super.send(packet); },2f7a21fd556bf8a77add8ddd47786b9c17337d5d,@java.lang.Override public void send(java.net.DatagramPacket packet) throws java.io.IOException { if (!(channelImpl.isBlocking())) { throw new java.nio.channels.IllegalBlockingModeException(); } boolean wasBound = isBound(); super.send(packet); if (!wasBound) { channelImpl.initBound(false); } },27e32455ff1c6663be3399fa264d813505fd1f7c,send(java.net.DatagramPacket),send(java.net.DatagramPacket),11,22,@java.lang.Override public void send(java.net.DatagramPacket packet) throws java.io.IOException { if (!(channelImpl.isBlocking())) { throw new java.nio.channels.IllegalBlockingModeException(); } boolean wasBound = isBound(); super.send(packet); if (!wasBound) { channelImpl.onBind(false); } },80609bf3f689046a6e3573c05a218909ff20db03,send(java.net.DatagramPacket),511067,77,77
505551,src_com_android_bluetooth_hid_HidDevService.java,24.0,"@java.lang.Override public boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, (""unplug(): device="" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.unplug(device); }",1047d54849b2444f432f8bc6c2e6df41ffe86904,"@java.lang.Override public boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, (""unplug(): device="" + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ""unplug: HidDevService is null""); return false; } return service.unplug(device); }",079c3d6bf49b7bf0b1c420869bb7fc7cf0dca814,unplug(android.bluetooth.BluetoothDevice),unplug(android.bluetooth.BluetoothDevice),9,24,"@java.lang.Override public boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, (""unplug(): device="" + device)); } com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.unplug(device); }",20d8eacbce377b6d95443f68105b50657edc27b2,unplug(android.bluetooth.BluetoothDevice),47810,157,118
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,,"public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWChangeState(positiveResult); } else if (preference == (mButtonDeaAll)) { deactivateAllBarring(positiveResult); } }",d83828a5aec8be5f1a840c8e2a88807cf3d57ee3,,"onPinEntered(com.android.phone.settings.fdn.EditPinPreference,boolean)",5,1,"@java.lang.Override public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWChangeState(positiveResult); } else if (preference == (mButtonDisableAll)) { disableAllBarring(positiveResult); } }",ba00d41e5c1496c5794f3e98a8ffb4c77a1cff98,"onPinEntered(com.android.phone.settings.fdn.EditPinPreference,boolean)",437894,71,75
119533,libart_src_main_java_dalvik_system_VMRuntime.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public native void requestGC();,8472705d2a275111af8dd47e5ac3c8e1d73d0f8e,,requestGC(),2,20,public native void requestConcurrentGC();,ee97b7208c24a5394bb5fc2873ea519bb01f2812,requestConcurrentGC(),95777,6,7
460596,core_java_android_bluetooth_BluetoothHeadset.java,18.0,"public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice device, java.lang.String command, java.lang.String arg) { if (android.bluetooth.BluetoothHeadset.DBG) { android.bluetooth.BluetoothHeadset.log(""sendVendorSpecificResultCode()""); } if (command == null) { throw new java.lang.IllegalArgumentException(""command is null""); } if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.sendVendorSpecificResultCode(device, command, arg); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if ((mService) == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); } return false; }",650029fd254ca562a5bcd2a7fbd0e06f4b17dd95,"public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice device, java.lang.String command, java.lang.String arg) { if (android.bluetooth.BluetoothHeadset.DBG) { android.bluetooth.BluetoothHeadset.log(""sendVendorSpecificResultCode()""); } if (command == null) { throw new java.lang.IllegalArgumentException(""command is null""); } final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.sendVendorSpecificResultCode(device, command, arg); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); } return false; }",79988dd7121fdd0decc7bb8928a39d49cd94f75a,"sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)","sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)",17,18,"public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice device, java.lang.String command, java.lang.String arg) { if (android.bluetooth.BluetoothHeadset.DBG) { android.bluetooth.BluetoothHeadset.log(""sendVendorSpecificResultCode()""); } if (command == null) { throw new java.lang.IllegalArgumentException(""command is null""); } final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (android.bluetooth.BluetoothHeadset.isValidDevice(device))) { try { return service.sendVendorSpecificResultCode(device, command, arg); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); } return false; }",6aa75f3509bb06468c92b329192c212796324cf3,"sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)",41140,216,224
38676,eclipse_plugins_com.android.ide.eclipse.ndk_src_com_android_ide_eclipse_ndk_internal_build_NdkCommandLauncher.java,3.0,private boolean isWindowsExecutable(org.eclipse.core.runtime.IPath commandPath) { if (com.android.ide.eclipse.ndk.internal.build.NdkCommandLauncher.WINDOWS_EXE.equalsIgnoreCase(commandPath.getFileExtension())) { return true; } java.io.File exeFile = commandPath.addFileExtension(com.android.ide.eclipse.ndk.internal.build.NdkCommandLauncher.WINDOWS_EXE).toFile(); if (exeFile.exists()) { return true; } return false; },459cfce544b887be3a0b01503143dc8ad3d44c5b,private boolean isWindowsExecutable(org.eclipse.core.runtime.IPath commandPath) { java.lang.String ext = commandPath.getFileExtension(); if (hasWindowsExecutableExtension(ext)) { return true; } ext = findWindowsExecutableExtension(commandPath); if (ext != null) { return true; } return false; },61c374f2e533d9dcc91845b1f820fd2e97271ed6,isWindowsExecutable(org.eclipse.core.runtime.IPath),isWindowsExecutable(org.eclipse.core.runtime.IPath),2,1,private boolean isWindowsExecutable(org.eclipse.core.runtime.IPath commandPath) { java.lang.String ext = commandPath.getFileExtension(); if (isWindowsExecutableExtension(ext)) { return true; } ext = findWindowsExecutableExtension(commandPath); if (ext != null) { return true; } return false; },3a051fc362e7a91ce58349c47ccd66b6a60f1ef6,isWindowsExecutable(org.eclipse.core.runtime.IPath),267486,72,72
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,,"private void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mListener) == null) return; if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (((""Printer "" + printer) + "" caps="") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); stop(); } else { com.android.bips.discovery.DiscoveredPrinter p2pPrinter = new com.android.bips.discovery.DiscoveredPrinter(printer.uuid, printer.name, com.android.bips.discovery.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(p2pPrinter); } }",bdbc4f829d264cb68e6fdd92af64f80915718ccd,,"onCapabilities(com.android.bips.discovery.DiscoveredPrinter,com.android.bips.jni.LocalPrinterCapabilities)",4,8,"private void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mListener) == null) { return; } if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, (((""Printer "" + printer) + "" caps="") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); close(); } else { com.android.bips.discovery.DiscoveredPrinter p2pPrinter = new com.android.bips.discovery.DiscoveredPrinter(printer.uuid, printer.name, com.android.bips.discovery.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(p2pPrinter); } }",98b08e918eeee1bcf01985ea09cd5d801b39f946,"onCapabilities(com.android.bips.discovery.DiscoveredPrinter,com.android.bips.jni.LocalPrinterCapabilities)",33378,202,204
128670,src_com_android_nfc_cardemulation_RegisteredNfcFServicesCache.java,,,,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final int uid = intent.getIntExtra(Intent.EXTRA_UID, (-1)); java.lang.String action = intent.getAction(); if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DEBUG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, (""Intent action: "" + action)); if (uid != (-1)) { boolean replaced = (intent.getBooleanExtra(Intent.EXTRA_REPLACING, false)) && ((Intent.ACTION_PACKAGE_ADDED.equals(action)) || (Intent.ACTION_PACKAGE_REMOVED.equals(action))); if (!replaced) { int currentUser = android.app.ActivityManager.getCurrentUser(); if (currentUser == (android.os.UserHandle.getUserId(uid))) { invalidateCache(android.os.UserHandle.getUserId(uid)); } else { } } else { if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DEBUG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, ""Ignoring package intent due to package being replaced.""); } } }",c51bff7fadc1b68cbed452dd75951da5d7a01d3b,,"onReceive(android.content.Context,android.content.Intent)",10,8,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final int uid = intent.getIntExtra(Intent.EXTRA_UID, (-1)); java.lang.String action = intent.getAction(); if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, (""Intent action: "" + action)); if (uid != (-1)) { boolean replaced = (intent.getBooleanExtra(Intent.EXTRA_REPLACING, false)) && ((Intent.ACTION_PACKAGE_ADDED.equals(action)) || (Intent.ACTION_PACKAGE_REMOVED.equals(action))); if (!replaced) { int currentUser = android.app.ActivityManager.getCurrentUser(); if (currentUser == (android.os.UserHandle.getUserId(uid))) { invalidateCache(android.os.UserHandle.getUserId(uid)); } else { } } else { if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, ""Ignoring package intent due to package being replaced.""); } } }",57f080c68c237b8106221a17bd67ce93533782c1,"onReceive(android.content.Context,android.content.Intent)",148754,290,292
16124,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_sdk_LayoutDevice.java,11.0,void _seal() { mMap = java.util.Collections.unmodifiableMap(mEditMap); },7c7a21590503f43f5541dc05e3c963ced5ab1cea,void _seal() { synchronized(mConfigs) { mROList = java.util.Collections.unmodifiableList(mConfigs); } },054d6dbb7fe92fa124820ba8547b07261eba45a3,_seal(),_seal(),3,16,private void seal() { mROList = java.util.Collections.unmodifiableList(mConfigs); },2627843110165c6a1510e8519bff55b7e6926b5b,seal(),52605,29,22
112777,jack_src_com_android_jack_Jack.java,19.0,"@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.JackFileException { java.util.List<com.android.jack.library.InputJackLibrary> inputJackLibraries = new java.util.ArrayList<com.android.jack.library.InputJackLibrary>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.library.InputJackLibrary inputJackLibrary = new com.android.jack.library.InputJackLibrary(vDir); inputJackLibraries.add(inputJackLibrary); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(inputJackLibrary, session.getPhantomLookup()); session.getTopLevelPackage().addLoader(rootPLoader); session.addImportSource(vDir); } catch (java.io.IOException ioException) { throw new com.android.jack.JackFileException((""Error importing jack container: "" + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(inputJackLibraries); }",7c257e4abbe2f374f629bd4617b174e84beea31d,"@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.LibraryException { java.util.List<com.android.jack.library.InputLibrary> inputLibraries = new java.util.ArrayList<com.android.jack.library.InputLibrary>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.library.InputLibrary inputJackLibrary = com.android.jack.library.InputLibraryFactory.getJackLibrary(vDir); inputLibraries.add(inputJackLibrary); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(inputJackLibrary, session.getPhantomLookup()); session.getTopLevelPackage().addLoader(rootPLoader); session.addImportSource(vDir); } catch (java.io.IOException ioException) { throw new com.android.jack.LibraryException((""Error importing jack container: "" + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(inputLibraries); }",1be6f6b1736c33f19f6de672276e6e6ba3e741b3,"getJayceFileImporter(java.util.List,com.android.sched.util.RunnableHooks,com.android.jack.ir.ast.JSession)","getJayceFileImporter(java.util.List,com.android.sched.util.RunnableHooks,com.android.jack.ir.ast.JSession)",12,20,"@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.library.LibraryReadingException { java.util.List<com.android.jack.library.InputJackLibrary> inputJackLibraries = new java.util.ArrayList<com.android.jack.library.InputJackLibrary>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.library.InputJackLibrary inputJackLibrary = com.android.jack.library.JackLibraryFactory.getInputLibrary(vDir); inputJackLibraries.add(inputJackLibrary); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(inputJackLibrary, session.getPhantomLookup()); session.getTopLevelPackage().addLoader(rootPLoader); session.addImportSource(vDir); } catch (java.io.IOException ioException) { throw new com.android.jack.library.LibraryReadingException(ioException); } catch (com.android.jack.LibraryException libException) { throw new com.android.jack.library.LibraryReadingException(libException); } } return new com.android.jack.backend.jayce.JayceFileImporter(inputJackLibraries); }",d3cff8ff2cab9d287752d4b62d51a1ac67171302,"getJayceFileImporter(java.util.List,com.android.sched.util.RunnableHooks,com.android.jack.ir.ast.JSession)",442674,428,454
283122,harmony-tests_src_test_java_org_apache_harmony_tests_java_net_DatagramSocketTest.java,23.0,"public void test_getChannel() throws java.lang.Exception { assertNull(new java.net.DatagramSocket().getChannel()); org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer server = new org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer(LOOPBACK); java.net.DatagramSocket ds = new java.net.DatagramSocket(0); assertNull(ds.getChannel()); ds.disconnect(); ds.close(); server.stopServer(); java.nio.channels.DatagramChannel channel = java.nio.channels.DatagramChannel.open(); java.net.DatagramSocket socket = channel.socket(); assertEquals(channel, socket.getChannel()); socket.close(); }",330f5778efaadfacadf5ea356e2f5106de6bd54b,"public void test_getChannel() throws java.lang.Exception { try (java.net.DatagramSocket ds = new java.net.DatagramSocket()) { assertNull(ds.getChannel()); } try (org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer server = new org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer(LOOPBACK);java.net.DatagramSocket ds = new java.net.DatagramSocket(0)) { assertNull(ds.getChannel()); ds.disconnect(); ds.close(); } try (java.nio.channels.DatagramChannel channel = java.nio.channels.DatagramChannel.open();java.net.DatagramSocket socket = channel.socket()) { assertEquals(channel, socket.getChannel()); } }",e29e0b4751bef5c98b76456c1574250537db1a6c,test_getChannel(),test_getChannel(),7,23,"public void test_getChannel() throws java.lang.Exception { try (java.net.DatagramSocket ds = new java.net.DatagramSocket()) { assertNull(ds.getChannel()); } try (org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer server = new org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer(LOOPBACK);java.net.DatagramSocket ds = new java.net.DatagramSocket(0)) { assertNull(ds.getChannel()); ds.disconnect(); } try (java.nio.channels.DatagramChannel channel = java.nio.channels.DatagramChannel.open();java.net.DatagramSocket socket = channel.socket()) { assertEquals(channel, socket.getChannel()); } }",abb533655a720057ee15c5861c39bd49099b49a8,test_getChannel(),188873,166,162
99130,login_src_com_google_gct_login_ui_UsersListCellRenderer.java,1.0,"@java.lang.Override public java.awt.Component getListCellRendererComponent(javax.swing.JList list, java.lang.Object value, int index, boolean isSelected, boolean cellHasFocus) { if (!(value instanceof com.google.gct.login.ui.UsersListItem)) { return null; } javax.swing.JPanel mainPanel = new javax.swing.JPanel(); setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS)); mainPanel.setPreferredSize(MAIN_PANEL_DIMENSION); mainPanel.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT); final java.awt.Color bg = (isSelected) ? ACTIVE_COLOR : com.intellij.util.ui.UIUtil.getListBackground(); final java.awt.Color fg = (isSelected) ? com.intellij.util.ui.UIUtil.getListSelectionForeground() : com.intellij.util.ui.UIUtil.getListForeground(); mainPanel.setBackground(bg); mainPanel.setForeground(fg); java.awt.Image imageIcon = ((com.google.gct.login.ui.UsersListItem) (value)).getUserPicture(); mainPanel.add(new com.google.gct.login.ui.UsersListCellRenderer.ImagePanel(imageIcon)); mainPanel.add(createTextDisplay(isSelected, ((com.google.gct.login.ui.UsersListItem) (value)))); return mainPanel; }",42a7b7dda41d0ea24cc558508e509c7cbf84ccdf,"@java.lang.Override public java.awt.Component getListCellRendererComponent(javax.swing.JList list, java.lang.Object value, int index, boolean isSelected, boolean cellHasFocus) { if (!(value instanceof com.google.gct.login.ui.UsersListItem)) { return null; } javax.swing.JPanel mainPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10)); mainPanel.setMinimumSize(MAIN_PANEL_DIMENSION); mainPanel.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT); final java.awt.Color bg = (isSelected) ? ACTIVE_COLOR : com.intellij.util.ui.UIUtil.getListBackground(); final java.awt.Color fg = (isSelected) ? com.intellij.util.ui.UIUtil.getListSelectionForeground() : com.intellij.util.ui.UIUtil.getListForeground(); mainPanel.setBackground(bg); mainPanel.setForeground(fg); java.awt.Image imageIcon = ((com.google.gct.login.ui.UsersListItem) (value)).getUserPicture(); mainPanel.add(new com.google.gct.login.ui.UsersListCellRenderer.ImagePanel(imageIcon)); mainPanel.add(createTextDisplay(isSelected, ((com.google.gct.login.ui.UsersListItem) (value)))); return mainPanel; }",26984af7da3326caf8f939021b21b7d4bc7f41d2,"getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)","getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)",3,1,"@java.lang.Override public java.awt.Component getListCellRendererComponent(javax.swing.JList list, java.lang.Object value, int index, boolean isSelected, boolean cellHasFocus) { if (!(value instanceof com.google.gct.login.ui.UsersListItem)) { return null; } javax.swing.JPanel mainPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10)); mainPanel.setMinimumSize(MAIN_PANEL_DIMENSION); mainPanel.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT); final java.awt.Color bg = (isSelected) ? ACTIVE_COLOR : com.intellij.util.ui.UIUtil.getListBackground(); final java.awt.Color fg = (isSelected) ? com.intellij.util.ui.UIUtil.getListSelectionForeground() : com.intellij.util.ui.UIUtil.getListForeground(); mainPanel.setBackground(bg); mainPanel.setForeground(fg); java.awt.Image image = ((com.google.gct.login.ui.UsersListItem) (value)).getUserPicture(); java.awt.Image scaledImage = image.getScaledInstance(PLAIN_IMAGE_WIDTH, PLAIN_IMAGE_HEIGHT, java.awt.Image.SCALE_SMOOTH); mainPanel.add(new javax.swing.JLabel(new javax.swing.ImageIcon(scaledImage))); mainPanel.add(createTextDisplay(isSelected, ((com.google.gct.login.ui.UsersListItem) (value)))); return mainPanel; }",7c285f560c884ea98eef6849723fc01f7ab7fab2,"getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)",137088,296,327
316349,tests_src_com_android_networkrecommendation_DefaultNetworkRecommendationProviderTest.java,7.0,"private android.net.RecommendationResult verifyAndCaptureResult(android.net.RecommendationRequest request) { mProvider.doOnRequestRecommendation(request, mCallback); org.mockito.ArgumentCaptor<android.net.RecommendationResult> resultCaptor = org.mockito.ArgumentCaptor.forClass(android.net.RecommendationResult.class); verify(mCallback).onResult(resultCaptor.capture()); return resultCaptor.getValue(); }",f1a3bcfec371ed1cebd2d8799fb8ea9114c07d36,"private android.net.RecommendationResult verifyAndCaptureResult(android.net.RecommendationRequest request) { mProvider.requestRecommendation(request, mCallback); org.mockito.ArgumentCaptor<android.net.RecommendationResult> resultCaptor = org.mockito.ArgumentCaptor.forClass(android.net.RecommendationResult.class); verify(mCallback).onResult(resultCaptor.capture()); return resultCaptor.getValue(); }",2b6d2c521b1910afc14c81eaa6cbf8a86cb012e8,verifyAndCaptureResult(android.net.RecommendationRequest),verifyAndCaptureResult(android.net.RecommendationRequest),9,7,"private android.net.RecommendationResult verifyAndCaptureResult(android.net.RecommendationRequest request) { mProvider.onRequestRecommendation(request, mCallback); org.mockito.ArgumentCaptor<android.net.RecommendationResult> resultCaptor = org.mockito.ArgumentCaptor.forClass(android.net.RecommendationResult.class); verify(mCallback).onResult(resultCaptor.capture()); return resultCaptor.getValue(); }",c54dfbc5d2de432e35a959cd17fc0913a6532517,verifyAndCaptureResult(android.net.RecommendationRequest),140325,87,88
157512,tests_tests_hardware_src_android_hardware_camera2_cts_RobustnessTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private android.util.Size updateMaxSize(int sizeLimit, android.util.Size defSize) { android.view.WindowManager windowManager = ((android.view.WindowManager) (getContext().getSystemService(android.content.Context.WINDOW_SERVICE))); android.view.Display display = windowManager.getDefaultDisplay(); int width = display.getWidth(); int height = display.getHeight(); if (height > width) { height = width; width = display.getHeight(); } if (((mOrderedPreviewSizes) != null) && (sizeLimit == (android.hardware.camera2.cts.RobustnessTest.MaxOutputSizes.PREVIEW))) { for (android.util.Size size : mOrderedPreviewSizes) { if ((width >= (size.getWidth())) && (height >= (size.getHeight()))) return size; } } return defSize; }",7d43d080b8fe05ccb2841f392741c5a2fb520b70,,"updateMaxSize(int,android.util.Size)",4,3,"private static android.util.Size getMaxPreviewSize(android.content.Context context, java.lang.String cameraId) { try { android.view.WindowManager windowManager = ((android.view.WindowManager) (context.getSystemService(Context.WINDOW_SERVICE))); android.view.Display display = windowManager.getDefaultDisplay(); int width = display.getWidth(); int height = display.getHeight(); if (height > width) { height = width; width = display.getHeight(); } android.hardware.camera2.CameraManager camMgr = ((android.hardware.camera2.CameraManager) (context.getSystemService(Context.CAMERA_SERVICE))); java.util.List<android.util.Size> orderedPreviewSizes = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.getSupportedPreviewSizes(cameraId, camMgr, android.hardware.camera2.cts.PREVIEW_SIZE_BOUND); if (orderedPreviewSizes != null) { for (android.util.Size size : orderedPreviewSizes) { if ((width >= (size.getWidth())) && (height >= (size.getHeight()))) return size; } } } catch (java.lang.Exception e) { android.util.Log.e(android.hardware.camera2.cts.RobustnessTest.TAG, (""getMaxPreviewSize Failed. "" + (e.toString()))); } return PREVIEW_SIZE_BOUND; }",1a46d678813c907bd15d8f0eaaa75fac1279d369,"getMaxPreviewSize(android.content.Context,java.lang.String)",456103,182,309
352291,src_com_android_bluetooth_pbap_BluetoothPbapService.java,33.0,"private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Pbap Service stopObexServerSession""); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (mAdapter.isEnabled()) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }",8038b41b01722c554fc6a3d85fb3790292413734,"private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Pbap Service stopObexServerSession""); com.android.bluetooth.pbap.BluetoothPbapUtils.savePbapParams(this, BluetoothPbapUtils.primaryVersionCounter, BluetoothPbapUtils.secondaryVersionCounter, BluetoothPbapUtils.mDbIdentifier.get(), BluetoothPbapUtils.contactsLastUpdated, BluetoothPbapUtils.totalFields, BluetoothPbapUtils.totalSvcFields, BluetoothPbapUtils.totalContacts); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (mAdapter.isEnabled()) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }",9d4950319aff21362ca6db6d5debb20b45e2f3b4,stopObexServerSession(),stopObexServerSession(),8,32,"private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Pbap Service stopObexServerSession""); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (mAdapter.isEnabled()) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }",8038b41b01722c554fc6a3d85fb3790292413734,stopObexServerSession(),368914,299,206
118993,jack-tests_tests_com_android_jack_multidex_MultiDexTests.java,9.0,"private java.io.File getListingOfDex(@javax.annotation.Nonnull java.io.File dex) throws java.io.FileNotFoundException, java.io.IOException { assert dex.isFile(); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(new java.lang.String[]{ ""bash"", ""-c"", (((com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt(""dexdump"").getAbsolutePath()) + "" "") + (dex.getAbsolutePath())) + "" | grep \"" Class descriptor : \"" | cut -d\\\' -f2 | sed -e \'s/$/:/\'"" }); java.io.File outList = com.android.jack.TestTools.createTempFile(""types"", "".txt""); exec.setOut(outList); junit.framework.Assert.assertTrue(exec.run()); return outList; }",4baff2e9318eac6a40d504f27772fb5d17692658,"private java.lang.String getListingOfDex(@javax.annotation.Nonnull java.io.File dex) throws java.io.IOException { assert dex.isFile(); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.jack.dx.io.ClassDef def : new com.android.jack.dx.io.DexBuffer(dex).classDefs()) { java.lang.String typeName = def.getTypeName(); sb.append(typeName); sb.append("":""); sb.append(TextUtils.LINE_SEPARATOR); } return sb.toString(); }",80a3467d58725a231c015501ec1a274e0558c295,getListingOfDex(java.io.File),getListingOfDex(java.io.File),4,9,"private java.lang.String getListingOfDex(@javax.annotation.Nonnull java.io.File dex) throws java.io.IOException { assert dex.isFile(); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.jack.dx.io.ClassDef def : new com.android.jack.dx.io.DexBuffer(dex).classDefs()) { sb.append(def.getTypeName()); sb.append("":""); sb.append(TextUtils.LINE_SEPARATOR); } return sb.toString(); }",a05a932c9ce2fd1cf9c43a44d721de0173f21586,getListingOfDex(java.io.File),300012,126,117
40084,src_java_com_android_internal_telephony_uicc_IccCardProxy.java,27.0,public boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus.AppType type) { java.lang.Boolean retValue = ((mUiccCard) != null) ? mUiccCard.isApplicationOnIcc(type) : false; return retValue; },87bd23a3e521cb8d0166751bf8c8d38742e7dd5c,public boolean isApplicationOnIcc(com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType type) { java.lang.Boolean retValue = ((mUiccCard) != null) ? mUiccCard.isApplicationOnIcc(type) : false; return retValue; },91e0aec1f70f50e9f397da98971103272e502c00,isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus$AppType),isApplicationOnIcc(com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType),27,24,@java.lang.Override public boolean hasIccCard() { synchronized(mLock) { if (((mUiccCard) != null) && ((mUiccCard.getCardState()) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT))) { return true; } return false; } },d50594374317f850507e78b13e34a915e37b9249,hasIccCard(),174478,69,79
180122,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_ClassType_NewInstanceStringTest.java,,,,"@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); long stringBufferFieldId = checkField(debuggeeClassId, ""STRING_BUFFER""); org.apache.harmony.jpda.tests.framework.jdwp.Value stringBufferValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, stringBufferFieldId); constructorArguments.add(stringBufferValue); }",023d8c48eb6ad9cb3dd534d377107edbec24e59e,,provideConstructorArguments(java.util.List),2,29,"@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value stringBufferValue = getStaticFieldValue(debuggeeClassId, ""STRING_BUFFER""); constructorArguments.add(stringBufferValue); }",e64e80ec2308a36b0dfd5f5edbae0f0b92b8c783,provideConstructorArguments(java.util.List),31345,136,108
291044,emu_test_test_console_Server_app_src_main_java_com_android_devtools_server_services_SmsManagerService.java,,,,"@java.lang.Override public java.lang.String toString() { return new com.google.gson.Gson().toJson(new com.android.devtools.server.model.RestServiceModel(POST, ""/SmsManagerService"", new com.android.devtools.server.model.SmsManagerModel(""String"").toString())); }",03c0cc274c09dfadbd79054b8387975fbce846da,,toString(),5,1,"@java.lang.Override public java.lang.String toString() { return new com.google.gson.Gson().toJson(new com.android.devtools.server.model.RestServiceModel(POST, com.android.devtools.server.services.SmsManagerService.SMS_SERVICE_PATH, new com.android.devtools.server.model.SmsManagerModel(com.android.devtools.server.services.SmsManagerService.ACTION).toString())); }",624cd35ec26a985e7a3ea003100b0ed7c13889eb,toString(),256124,69,98
158444,sdk-common_src_main_java_com_android_ide_common_res2_ResourceSet.java,3.0,"private static com.android.ide.common.res2.ResourceFile createResourceFile(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.NonNull com.android.ide.common.res2.ResourceSet.FolderData folderData, @com.android.annotations.NonNull com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { if ((folderData.type) != null) { com.android.ide.common.res2.FileResourceNameValidator.validate(file, folderData.type); java.lang.String name = file.getName(); int pos = name.indexOf('.'); if (pos >= 0) { name = name.substring(0, pos); } return new com.android.ide.common.res2.ResourceFile(file, new com.android.ide.common.res2.ResourceItem(name, folderData.type, null), folderData.qualifiers); } else { try { com.android.ide.common.res2.ValueResourceParser2 parser = new com.android.ide.common.res2.ValueResourceParser2(file); java.util.List<com.android.ide.common.res2.ResourceItem> items = parser.parseFile(); return new com.android.ide.common.res2.ResourceFile(file, items, folderData.qualifiers); } catch (com.android.ide.common.res2.MergingException e) { logger.error(e, ""Failed to parse %s"", file.getAbsolutePath()); throw e; } } }",f9a720caa71793fa2c2150b8fe84b8bfb24bc479,"private com.android.ide.common.res2.ResourceFile createResourceFile(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.NonNull com.android.ide.common.res2.ResourceSet.FolderData folderData, @com.android.annotations.NonNull com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { if ((folderData.type) != null) { com.android.ide.common.res2.FileResourceNameValidator.validate(file, folderData.type); java.lang.String name = com.android.ide.common.res2.ResourceSet.getNameForFile(file); if (mPreprocessor.needsPreprocessing(file)) { return com.android.ide.common.res2.ResourceFile.generatedFiles(file, getResourceItemsForGeneratedFiles(file), folderData.qualifiers); } else { return new com.android.ide.common.res2.ResourceFile(file, new com.android.ide.common.res2.ResourceItem(name, folderData.type, null), folderData.qualifiers); } } else { try { com.android.ide.common.res2.ValueResourceParser2 parser = new com.android.ide.common.res2.ValueResourceParser2(file); java.util.List<com.android.ide.common.res2.ResourceItem> items = parser.parseFile(); return new com.android.ide.common.res2.ResourceFile(file, items, folderData.qualifiers); } catch (com.android.ide.common.res2.MergingException e) { logger.error(e, ""Failed to parse %s"", file.getAbsolutePath()); throw e; } } }",370299ab8007586f9e0ff625aedf8da6015b3d88,"createResourceFile(java.io.File,com.android.ide.common.res2.ResourceSet$FolderData,com.android.utils.ILogger)","createResourceFile(java.io.File,com.android.ide.common.res2.ResourceSet$FolderData,com.android.utils.ILogger)",8,4,"private com.android.ide.common.res2.ResourceFile createResourceFile(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.NonNull com.android.ide.common.res2.ResourceSet.FolderData folderData, @com.android.annotations.NonNull com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { if ((folderData.type) != null) { com.android.ide.common.res2.FileResourceNameValidator.validate(file, folderData.type); java.lang.String name = com.android.ide.common.res2.ResourceSet.getNameForFile(file); if (needsPreprocessing(file)) { return com.android.ide.common.res2.ResourceFile.generatedFiles(file, getResourceItemsForGeneratedFiles(file), folderData.qualifiers); } else { return new com.android.ide.common.res2.ResourceFile(file, new com.android.ide.common.res2.ResourceItem(name, folderData.type, null), folderData.qualifiers); } } else { try { com.android.ide.common.res2.ValueResourceParser2 parser = new com.android.ide.common.res2.ValueResourceParser2(file); java.util.List<com.android.ide.common.res2.ResourceItem> items = parser.parseFile(); return new com.android.ide.common.res2.ResourceFile(file, items, folderData.qualifiers); } catch (com.android.ide.common.res2.MergingException e) { logger.error(e, ""Failed to parse %s"", file.getAbsolutePath()); throw e; } } }",1388ea4519162037bec9bd25cd5da699effb47b4,"createResourceFile(java.io.File,com.android.ide.common.res2.ResourceSet$FolderData,com.android.utils.ILogger)",237542,376,373
131660,jack-tests_tests_com_android_jack_shrob_SeedTests.java,0.0,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); com.android.jack.shrob.spec.Flags flags = new com.android.jack.shrob.spec.Flags(); flags.setShrink(false); flags.setObfuscate(false); com.android.jack.shrob.proguard.GrammarActions.parse((""proguard.flags"" + flagNumber), testFolder.getAbsolutePath(), flags); java.io.File refFolder = new java.io.File(testFolder, ""refsSeed""); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""seeds"", "".txt""); java.io.File refOutputSeeds = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); flags.setSeedsFile(candidateOutputSeeds); flags.setPrintSeeds(true); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); toolchain.setShrobFlags(flags); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }",7064496c15bdb659dd7e7d99b13f787bfe191574,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, ""refsSeed""); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""seeds"", "".txt""); java.io.File refOutputSeeds = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, ("" -printseeds "" + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }",be5de5a8da193754ca5e45ca0429e4f69eb84a26,"runTest(java.lang.String,java.lang.String,java.lang.String)","runTest(java.lang.String,java.lang.String,java.lang.String)",11,0,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, ""refsSeed""); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""seeds"", "".txt""); java.io.File refOutputSeeds = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, ("" -dontshrink -dontobfuscate -printseeds "" + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }",060f98d52638c870dcdcb5aa3cc74381e162944d,"runTest(java.lang.String,java.lang.String,java.lang.String)",181582,423,431
335905,src_java_com_android_internal_telephony_RIL.java,67.0,"static com.android.internal.telephony.RILRequest obtain(int request, android.os.Message result) { com.android.internal.telephony.RILRequest rr = null; synchronized(com.android.internal.telephony.RILRequest.sPoolSync) { if ((com.android.internal.telephony.RILRequest.sPool) != null) { rr = com.android.internal.telephony.RILRequest.sPool; com.android.internal.telephony.RILRequest.sPool = rr.mNext; rr.mNext = null; (com.android.internal.telephony.RILRequest.sPoolSize)--; } } if (rr == null) { rr = new com.android.internal.telephony.RILRequest(); } rr.mSerial = com.android.internal.telephony.RILRequest.sNextSerial.getAndIncrement(); rr.mRequest = request; rr.mResult = result; rr.mParcel = android.os.Parcel.obtain(); rr.mWakeLockType = com.android.internal.telephony.RIL.INVALID_WAKELOCK; rr.mStartTimeMs = android.os.SystemClock.elapsedRealtime(); if ((result != null) && ((result.getTarget()) == null)) { throw new java.lang.NullPointerException(""Message target must not be null""); } rr.mParcel.writeInt(request); rr.mParcel.writeInt(rr.mSerial); return rr; }",db28eeb2342d7592cd867385f8758b1a30675c64,"static com.android.internal.telephony.RILRequest obtain(int request, android.os.Message result) { com.android.internal.telephony.RILRequest rr = null; synchronized(com.android.internal.telephony.RILRequest.sPoolSync) { if ((com.android.internal.telephony.RILRequest.sPool) != null) { rr = com.android.internal.telephony.RILRequest.sPool; com.android.internal.telephony.RILRequest.sPool = rr.mNext; rr.mNext = null; (com.android.internal.telephony.RILRequest.sPoolSize)--; } } if (rr == null) { rr = new com.android.internal.telephony.RILRequest(); } rr.mSerial = com.android.internal.telephony.RILRequest.sNextSerial.getAndIncrement(); rr.mRequest = request; rr.mResult = result; rr.mParcel = android.os.Parcel.obtain(); rr.mWakeLockType = com.android.internal.telephony.RIL.INVALID_WAKELOCK; rr.mClientId = android.app.ActivityThread.currentOpPackageName(); rr.mStartTimeMs = android.os.SystemClock.elapsedRealtime(); if ((result != null) && ((result.getTarget()) == null)) { throw new java.lang.NullPointerException(""Message target must not be null""); } rr.mParcel.writeInt(request); rr.mParcel.writeInt(rr.mSerial); return rr; }",9f737ce16d038e59b5f87ca48e104c0728d67af9,"obtain(int,android.os.Message)","obtain(int,android.os.Message)",3,71,"static com.android.internal.telephony.RILRequest obtain(int request, android.os.Message result) { com.android.internal.telephony.RILRequest rr = null; synchronized(com.android.internal.telephony.RILRequest.sPoolSync) { if ((com.android.internal.telephony.RILRequest.sPool) != null) { rr = com.android.internal.telephony.RILRequest.sPool; com.android.internal.telephony.RILRequest.sPool = rr.mNext; rr.mNext = null; (com.android.internal.telephony.RILRequest.sPoolSize)--; } } if (rr == null) { rr = new com.android.internal.telephony.RILRequest(); } rr.mSerial = com.android.internal.telephony.RILRequest.sNextSerial.getAndIncrement(); rr.mRequest = request; rr.mResult = result; rr.mParcel = android.os.Parcel.obtain(); rr.mWakeLockType = com.android.internal.telephony.RIL.INVALID_WAKELOCK; rr.mClientId = com.android.internal.telephony.ActivityThread.currentOpPackageName(); rr.mStartTimeMs = android.os.SystemClock.elapsedRealtime(); if ((result != null) && ((result.getTarget()) == null)) { throw new java.lang.NullPointerException(""Message target must not be null""); } rr.mParcel.writeInt(request); rr.mParcel.writeInt(rr.mSerial); return rr; }",adf05bcb070a0d0dde76737a6cc4a1ad03803da0,"obtain(int,android.os.Message)",483301,345,349
14648,tests_tests_telephony_src_android_telephony_cts_SmsManagerTest.java,7.0,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mTelephonyManager = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); mDestAddr = mTelephonyManager.getLine1Number(); mText = ""This is a test message""; }",2859c9615095f4ff9a2c0a1293342a5a046c708e,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mTelephonyManager = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); mDestAddr = mTelephonyManager.getLine1Number(); mText = ""This is a test message""; if ((mTelephonyManager.getPhoneType()) == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) { mDeliveryReportSupported = true; } else if (mTelephonyManager.getDeviceId().equals(""000000000000000"")) { mDeliveryReportSupported = false; } else { java.lang.String mccmnc = mTelephonyManager.getSimOperator(); mDeliveryReportSupported = !(mccmnc.equals(""310410"")); } }",f58e067cdc4ffa3ced43649193ccdf424b44fa3c,setUp(),setUp(),2,7,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mTelephonyManager = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); mDestAddr = mTelephonyManager.getLine1Number(); mText = ""This is a test message""; if ((mTelephonyManager.getPhoneType()) == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) { mDeliveryReportSupported = true; } else if (mTelephonyManager.getDeviceId().equals(""000000000000000"")) { mDeliveryReportSupported = false; } else { java.lang.String mccmnc = mTelephonyManager.getSimOperator(); mDeliveryReportSupported = !(android.telephony.cts.SmsManagerTest.NO_DELIVERY_REPORTS.contains(mccmnc)); } }",7776dc22a01ae14345612e2a5bbef2987335f6e4,setUp(),288310,161,175
493598,android_icu4j_src_main_tests_android_icu_dev_test_format_NumberFormatTestData.java,54.0,public void clearField(java.lang.String fieldName) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.NumberFormatTestData.fieldToClearer(fieldName)); try { m.invoke(this); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } },300dc247fa68cb231710069bfb41590211e3a1e0,public void clearField(java.lang.String fieldName) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.DataDrivenNumberFormatTestData.fieldToClearer(fieldName)); try { m.invoke(this); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } },4c870569cbb5283c10233b97ffe771417c24b7b4,clearField(java.lang.String),clearField(java.lang.String),3,54,public void clearField(java.lang.String fieldName) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.NumberFormatTestData.fieldToClearer(fieldName)); try { m.invoke(this); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } },300dc247fa68cb231710069bfb41590211e3a1e0,clearField(java.lang.String),395081,113,111
252091,java_tests_ImageProcessing_jb_src_com_android_rs_image_ImageProcessingTest.java,38.0,"public void runTest(com.android.rs.imagejb.ImageProcessingTest.TestAction ta, java.lang.String testName) { float sum = 0; for (int i = 0; i < (mIteration); i++) { runOnUiThread(ta); float bmValue = ta.getBenchmark(); android.util.Log.v(TAG, (((""results for iteration "" + i) + "" is "") + bmValue)); sum += bmValue; } float avgResult = sum / (mIteration); android.os.Bundle results = new android.os.Bundle(); results.putString(TEST_NAME, testName); results.putFloat(BENCHMARK, avgResult); getInstrumentation().sendStatus(Activity.RESULT_OK, results); }",1bdd997bdcec1ad0863a14d9415b4db719f6899c,"public void runTest(com.android.rs.imagejb.ImageProcessingTest.TestAction ta, java.lang.String testName) { float sum = 0; for (int i = 0; i < (mIteration); i++) { runOnUiThread(ta); float bmValue = ta.getBenchmark(); android.util.Log.v(TAG, (((""results for iteration "" + i) + "" is "") + bmValue)); sum += bmValue; } float avgResult = sum / (mIteration); android.os.Bundle results = new android.os.Bundle(); results.putString(TEST_NAME, testName); results.putFloat((testName + ""_avg""), avgResult); getInstrumentation().sendStatus(Activity.RESULT_OK, results); }",fdea73045f4acecb9639dee5d1b5fa69f89bff9f,"runTest(com.android.rs.imagejb.ImageProcessingTest$TestAction,java.lang.String)","runTest(com.android.rs.imagejb.ImageProcessingTest$TestAction,java.lang.String)",3,38,"public void runTest(com.android.rs.imagejb.ImageProcessingTest.TestAction ta, java.lang.String testName) { float sum = 0; for (int i = 0; i < (mIteration); i++) { runOnUiThread(ta); float bmValue = ta.getBenchmark(); android.util.Log.v(TAG, (((""results for iteration "" + i) + "" is "") + bmValue)); sum += bmValue; } float avgResult = sum / (mIteration); android.os.Bundle results = new android.os.Bundle(); results.putFloat((testName + ""_avg""), avgResult); getInstrumentation().sendStatus(Activity.RESULT_OK, results); }",28ead7a50399ba9ad3c6bdbef3ac4dbd82a40589,"runTest(com.android.rs.imagejb.ImageProcessingTest$TestAction,java.lang.String)",177017,165,154
16810,ddms_libs_ddmlib_tests_src_com_android_ddmlib_testrunner_InstrumentationResultParserTest.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testTestSuccessMetrics() { java.lang.StringBuilder output = buildCommonResult(); addStatusKey(output, ""randomKey"", ""randomValue""); assertFalse(((mTestResult.mTestMetrics) == null)); assertEquals(""randomValue"", mTestResult.mTestMetrics.get(""randomKey"")); }",d6cf982c50407848806e23044654c414f13f9ff2,,testTestSuccessMetrics(),4,16,"public void testTestSuccessMetrics() { java.lang.StringBuilder output = buildCommonResult(); addStatusKey(output, ""randomKey"", ""randomValue""); assertNotNull(mTestResult.mTestMetrics); assertEquals(""randomValue"", mTestResult.mTestMetrics.get(""randomKey"")); }",a344bcaf2a920d69f58a4a41f8253a87719bd9c8,testTestSuccessMetrics(),443896,64,60
144767,sdk-common_src_test_java_com_android_ide_common_repository_ResourceVisibilityLookupTest.java,,,,"public void testCombined() throws java.io.IOException { com.android.builder.model.AndroidLibrary library1 = com.android.testutils.TestUtils.createMockLibrary(("""" + (((((((""int dimen activity_horizontal_margin 0x7f030000\n"" + ""int dimen activity_vertical_margin 0x7f030001\n"") + ""int id action_settings 0x7f060000\n"") + ""int layout activity_main 0x7f020000\n"") + ""int menu menu_main 0x7f050000\n"") + ""int string action_settings 0x7f040000\n"") + ""int string app_name 0x7f040001\n"") + ""int string hello_world 0x7f040002"")), """"); com.android.builder.model.AndroidLibrary library2 = com.android.testutils.TestUtils.createMockLibrary(("""" + (""int layout foo 0x7f030001\n"" + ""int layout bar 0x7f060000\n"")), ("""" + ""layout foo\n"")); java.util.List<com.android.builder.model.AndroidLibrary> androidLibraries = java.util.Arrays.asList(library1, library2); com.android.ide.common.repository.ResourceVisibilityLookup visibility = com.android.ide.common.repository.ResourceVisibilityLookup.create(androidLibraries, null); assertTrue(visibility.isPrivate(ResourceType.DIMEN, ""activity_horizontal_margin"")); assertTrue(visibility.isPrivate(ResourceType.ID, ""action_settings"")); assertTrue(visibility.isPrivate(ResourceType.LAYOUT, ""activity_main"")); assertTrue(visibility.isPrivate(ResourceType.DIMEN, ""activity_vertical_margin"")); assertFalse(visibility.isPrivate(ResourceType.LAYOUT, ""foo"")); assertTrue(visibility.isPrivate(ResourceType.LAYOUT, ""bar"")); assertFalse(visibility.isPrivate(ResourceType.DIMEN, ""unknown"")); }",99ab58d570471a0a0152dd3a111c98e1e4e7d87b,,testCombined(),6,10,"public void testCombined() throws java.io.IOException { com.android.builder.model.AndroidLibrary library1 = com.android.ide.common.repository.ResourceVisibilityLookupTest.createMockLibrary(("""" + (((((((""int dimen activity_horizontal_margin 0x7f030000\n"" + ""int dimen activity_vertical_margin 0x7f030001\n"") + ""int id action_settings 0x7f060000\n"") + ""int layout activity_main 0x7f020000\n"") + ""int menu menu_main 0x7f050000\n"") + ""int string action_settings 0x7f040000\n"") + ""int string app_name 0x7f040001\n"") + ""int string hello_world 0x7f040002"")), """"); com.android.builder.model.AndroidLibrary library2 = com.android.ide.common.repository.ResourceVisibilityLookupTest.createMockLibrary(("""" + (""int layout foo 0x7f030001\n"" + ""int layout bar 0x7f060000\n"")), ("""" + ""layout foo\n"")); java.util.List<com.android.builder.model.AndroidLibrary> androidLibraries = java.util.Arrays.asList(library1, library2); com.android.ide.common.repository.ResourceVisibilityLookup visibility = com.android.ide.common.repository.ResourceVisibilityLookup.create(androidLibraries, null); assertTrue(visibility.isPrivate(ResourceType.DIMEN, ""activity_horizontal_margin"")); assertTrue(visibility.isPrivate(ResourceType.ID, ""action_settings"")); assertTrue(visibility.isPrivate(ResourceType.LAYOUT, ""activity_main"")); assertTrue(visibility.isPrivate(ResourceType.DIMEN, ""activity_vertical_margin"")); assertFalse(visibility.isPrivate(ResourceType.LAYOUT, ""foo"")); assertTrue(visibility.isPrivate(ResourceType.LAYOUT, ""bar"")); assertFalse(visibility.isPrivate(ResourceType.DIMEN, ""unknown"")); }",ec21c3e29faa6772dfaaab7618310ba410ad3afb,testCombined(),353460,431,441
122272,jack_src_com_android_jack_incremental_NoInputFilter.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.library.OutputJackLibrary getOutputJackLibrary() { com.android.sched.vfs.InputOutputVFS outputDir; com.android.sched.vfs.Container containerType = com.android.sched.util.config.ThreadConfig.get(Options.LIBRARY_OUTPUT_CONTAINER_TYPE); if (containerType == (com.android.sched.vfs.Container.DIR)) { outputDir = com.android.sched.util.config.ThreadConfig.get(Options.LIBRARY_OUTPUT_DIR); } else { outputDir = com.android.sched.util.config.ThreadConfig.get(Options.LIBRARY_OUTPUT_ZIP); } return com.android.jack.library.JackLibraryFactory.getOutputLibrary(outputDir, com.android.jack.Jack.getEmitterId(), com.android.jack.Jack.getVersionString()); }",30c23e4c629d6ff5c2ef984f6c4b03e6420b4c7f,,getOutputJackLibrary(),8,0,@java.lang.Override @javax.annotation.Nonnull public com.android.jack.library.OutputJackLibrary getOutputJackLibrary() { return getOutputJackLibraryFromVfs(); },99b9793cc6819f74f5d977ce885c67023a5c9a80,getOutputJackLibrary(),4855,199,39
278609,telecomm_java_android_telecom_Logging_Sessions.java,,,,"public synchronized void endSession() { int threadId = getCallingThreadId(); android.telecom.Logging.Session completedSession = sSessionMapper.get(threadId); if (completedSession == null) { android.telecom.Logging.android.telecom.Log.w(android.telecom.Logging.Sessions.LOGGING_TAG, ""Log.endSession was called with no session active.""); return; } completedSession.markSessionCompleted(java.lang.System.currentTimeMillis()); if (!(completedSession.isStartedFromActiveSession())) { android.telecom.Logging.android.telecom.Log.v(android.telecom.Logging.Sessions.LOGGING_TAG, ((((Session.END_SUBSESSION) + "" (dur: "") + (completedSession.getLocalExecutionTime())) + "" mS)"")); } else { android.telecom.Logging.android.telecom.Log.v(android.telecom.Logging.Sessions.LOGGING_TAG, ((((Session.END_SUBSESSION) + "" (Invisible Subsession) (dur: "") + (completedSession.getLocalExecutionTime())) + "" ms)"")); } android.telecom.Logging.Session parentSession = completedSession.getParentSession(); sSessionMapper.remove(threadId); endParentSessions(completedSession); if (((parentSession != null) && (!(parentSession.isSessionCompleted()))) && (completedSession.isStartedFromActiveSession())) { sSessionMapper.put(threadId, parentSession); } }",ed47221d73ab7789817418fc1ca0dc30043ed242,,endSession(),3,2,"public synchronized void endSession() { int threadId = getCallingThreadId(); android.telecom.Logging.Session completedSession = sSessionMapper.get(threadId); if (completedSession == null) { android.telecom.Logging.android.telecom.Log.w(android.telecom.Logging.SessionManager.LOGGING_TAG, ""Log.endSession was called with no session active.""); return; } completedSession.markSessionCompleted(java.lang.System.currentTimeMillis()); if (!(completedSession.isStartedFromActiveSession())) { android.telecom.Logging.android.telecom.Log.v(android.telecom.Logging.SessionManager.LOGGING_TAG, ((((Session.END_SUBSESSION) + "" (dur: "") + (completedSession.getLocalExecutionTime())) + "" mS)"")); } else { android.telecom.Logging.android.telecom.Log.v(android.telecom.Logging.SessionManager.LOGGING_TAG, ((((Session.END_SUBSESSION) + "" (Invisible Subsession) (dur: "") + (completedSession.getLocalExecutionTime())) + "" ms)"")); } android.telecom.Logging.Session parentSession = completedSession.getParentSession(); sSessionMapper.remove(threadId); endParentSessions(completedSession); if (((parentSession != null) && (!(parentSession.isSessionCompleted()))) && (completedSession.isStartedFromActiveSession())) { sSessionMapper.put(threadId, parentSession); } }",4bd26d34dffd264e44b297e0b4af5235e2aa633e,endSession(),122325,332,332
18960,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_platformData_AttrsXmlParser.java,13.0,"private com.android.ide.eclipse.adt.internal.resources.AttributeInfo parseAttributeTypes(org.w3c.dom.Node attrNode, java.lang.String name) { java.util.TreeSet<com.android.ide.eclipse.adt.internal.resources.AttributeInfo.Format> formats = new java.util.TreeSet<com.android.ide.eclipse.adt.internal.resources.AttributeInfo.Format>(); java.lang.String[] enumValues = null; java.lang.String[] flagValues = null; org.w3c.dom.Node attrFormat = attrNode.getAttributes().getNamedItem(""format""); if (attrFormat != null) { for (java.lang.String f : attrFormat.getNodeValue().split(""\\|"")) { try { com.android.ide.common.api.IAttributeInfo.Format format = AttributeInfo.Format.valueOf(f.toUpperCase()); if (((format != null) && (format != (com.android.ide.common.api.IAttributeInfo.Format.ENUM))) && (format != (com.android.ide.common.api.IAttributeInfo.Format.FLAG))) { formats.add(format); } } catch (java.lang.IllegalArgumentException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, ""Unknown format name \'%s\' in <attr name=\""%s\"">, file \'%s\'."", f, name, getOsAttrsXmlPath()); } } } enumValues = parseEnumFlagValues(attrNode, ""enum"", name); if (enumValues != null) { formats.add(AttributeInfo.Format.ENUM); } flagValues = parseEnumFlagValues(attrNode, ""flag"", name); if (flagValues != null) { formats.add(AttributeInfo.Format.FLAG); } com.android.ide.eclipse.adt.internal.resources.AttributeInfo info = new com.android.ide.eclipse.adt.internal.resources.AttributeInfo(name, formats.toArray(new com.android.ide.eclipse.adt.internal.resources.AttributeInfo.Format[formats.size()])); info.setEnumValues(enumValues); info.setFlagValues(flagValues); return info; }",f541e93c436bedda3fdf806082cf97c7bdb4f80c,"private com.android.ide.common.platformData.AttributeInfo parseAttributeTypes(org.w3c.dom.Node attrNode, java.lang.String name) { java.util.TreeSet<com.android.ide.common.platformData.AttributeInfo.Format> formats = new java.util.TreeSet<com.android.ide.common.platformData.AttributeInfo.Format>(); java.lang.String[] enumValues = null; java.lang.String[] flagValues = null; org.w3c.dom.Node attrFormat = attrNode.getAttributes().getNamedItem(""format""); if (attrFormat != null) { for (java.lang.String f : attrFormat.getNodeValue().split(""\\|"")) { try { com.android.ide.common.api.IAttributeInfo.Format format = AttributeInfo.Format.valueOf(f.toUpperCase()); if (((format != null) && (format != (com.android.ide.common.api.IAttributeInfo.Format.ENUM))) && (format != (com.android.ide.common.api.IAttributeInfo.Format.FLAG))) { formats.add(format); } } catch (java.lang.IllegalArgumentException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, ""Unknown format name \'%s\' in <attr name=\""%s\"">, file \'%s\'."", f, name, getOsAttrsXmlPath()); } } } enumValues = parseEnumFlagValues(attrNode, ""enum"", name); if (enumValues != null) { formats.add(AttributeInfo.Format.ENUM); } flagValues = parseEnumFlagValues(attrNode, ""flag"", name); if (flagValues != null) { formats.add(AttributeInfo.Format.FLAG); } com.android.ide.common.platformData.AttributeInfo info = new com.android.ide.common.platformData.AttributeInfo(name, formats.toArray(new com.android.ide.common.platformData.AttributeInfo.Format[formats.size()])); info.setEnumValues(enumValues); info.setFlagValues(flagValues); return info; }",6b11d1dba76b8e49f057d88a11ed9b57a4008484,"parseAttributeTypes(org.w3c.dom.Node,java.lang.String)","parseAttributeTypes(org.w3c.dom.Node,java.lang.String)",2,13,"private com.android.ide.common.resources.platform.AttributeInfo parseAttributeTypes(org.w3c.dom.Node attrNode, java.lang.String name) { java.util.TreeSet<com.android.ide.common.resources.platform.AttributeInfo.Format> formats = new java.util.TreeSet<com.android.ide.common.resources.platform.AttributeInfo.Format>(); java.lang.String[] enumValues = null; java.lang.String[] flagValues = null; org.w3c.dom.Node attrFormat = attrNode.getAttributes().getNamedItem(""format""); if (attrFormat != null) { for (java.lang.String f : attrFormat.getNodeValue().split(""\\|"")) { try { com.android.ide.common.api.IAttributeInfo.Format format = AttributeInfo.Format.valueOf(f.toUpperCase()); if (((format != null) && (format != (com.android.ide.common.api.IAttributeInfo.Format.ENUM))) && (format != (com.android.ide.common.api.IAttributeInfo.Format.FLAG))) { formats.add(format); } } catch (java.lang.IllegalArgumentException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, ""Unknown format name \'%s\' in <attr name=\""%s\"">, file \'%s\'."", f, name, getOsAttrsXmlPath()); } } } enumValues = parseEnumFlagValues(attrNode, ""enum"", name); if (enumValues != null) { formats.add(AttributeInfo.Format.ENUM); } flagValues = parseEnumFlagValues(attrNode, ""flag"", name); if (flagValues != null) { formats.add(AttributeInfo.Format.FLAG); } com.android.ide.common.resources.platform.AttributeInfo info = new com.android.ide.common.resources.platform.AttributeInfo(name, formats.toArray(new com.android.ide.common.resources.platform.AttributeInfo.Format[formats.size()])); info.setEnumValues(enumValues); info.setFlagValues(flagValues); return info; }",22e6babe813b7943b4ef0f00020379b1b435f43e,"parseAttributeTypes(org.w3c.dom.Node,java.lang.String)",136468,469,475
586706,src_java_com_android_internal_telephony_test_SimulatedCommands.java,207.0,"@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.telephony.data.InterfaceAddress(""12.34.56.78"", 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",b7fa6ed66d99643ae3dbab74c515f94a720357d6,"@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.net.LinkAddress(android.net.NetworkUtils.numericToInetAddress(""12.34.56.78""), 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",8bfe9830efabcb88b14a64e24c7ac9bc0af8803e,"setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,android.os.Message)","setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,android.os.Message)",4,207,"@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, ""IP"", ""rmnet_data7"", java.util.Arrays.asList(new android.net.LinkAddress(""12.34.56.78/32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""98.76.54.32"")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress(""11.22.33.44"")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException(""Setup data call failed!"")); } }",0240734b833984d08d48830ba7059aeb4192818f,"setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,android.os.Message)",52067,287,277
322889,tests_net_java_com_android_server_connectivity_tethering_UpstreamNetworkMonitorTest.java,7.0,@java.lang.Override public void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback cb) { if (trackingDefault.contains(cb)) { trackingDefault.remove(cb); } else if (listening.containsKey(cb)) { listening.remove(cb); } else if (requested.containsKey(cb)) { requested.remove(cb); } assertFalse(trackingDefault.contains(cb)); assertFalse(listening.containsKey(cb)); assertFalse(requested.containsKey(cb)); },2237f1d09f958868e4c2dc331b2de126d17045a0,"@java.lang.Override public void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback cb) { if (trackingDefault.contains(cb)) { trackingDefault.remove(cb); } else if (listening.containsKey(cb)) { listening.remove(cb); } else if (requested.containsKey(cb)) { requested.remove(cb); } else { fail(""Unexpected callback removed""); } assertFalse(trackingDefault.contains(cb)); assertFalse(listening.containsKey(cb)); assertFalse(requested.containsKey(cb)); }",70b5363b3384b68747baa19bc6c3ff2568723645,unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback),unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback),6,11,"@java.lang.Override public void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback cb) { if (trackingDefault.contains(cb)) { trackingDefault.remove(cb); } else if (listening.containsKey(cb)) { listening.remove(cb); } else if (requested.containsKey(cb)) { requested.remove(cb); legacyTypeMap.remove(cb); } else { fail(""Unexpected callback removed""); } assertFalse(trackingDefault.contains(cb)); assertFalse(listening.containsKey(cb)); assertFalse(requested.containsKey(cb)); }",19e85d809784a944bb3aab00c4d4676883fdd32f,unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback),269573,116,123
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,65.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private ApkSigningBlockUtils.SignerConfig createSigningBLockSignerConfig(com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig, boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.privateKey = signerConfig.getPrivateKey(); newSignerConfig.certificates = certificates; newSignerConfig.minSdkVersion = signerConfig.getMinSdkVersion(); newSignerConfig.maxSdkVersion = signerConfig.getMaxSdkVersion(); newSignerConfig.apkSignerLineage = signerConfig.getApkSignerLineage(); switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v3.V3SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; default : throw new java.lang.IllegalArgumentException(""Unknown APK Signature Scheme ID requested""); } return newSignerConfig; }",ec893e9f8f881435a8d5dac5badeae87e26feea0,,"createSigningBLockSignerConfig(com.android.apksig.DefaultApkSignerEngine$SignerConfig,boolean,int)",10,10,"private ApkSigningBlockUtils.SignerConfig createSigningBlockSignerConfig(com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig, boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.privateKey = signerConfig.getPrivateKey(); newSignerConfig.certificates = certificates; switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3 : try { newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v3.V3SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); } catch (java.security.InvalidKeyException e) { newSignerConfig.signatureAlgorithms = null; } break; default : throw new java.lang.IllegalArgumentException(""Unknown APK Signature Scheme ID requested""); } return newSignerConfig; }",d4e5243fee5f3e6e730764e707ab0c28121c8b6c,"createSigningBlockSignerConfig(com.android.apksig.DefaultApkSignerEngine$SignerConfig,boolean,int)",471889,385,363
280491,service_java_com_android_server_wifi_SoftApManager.java,1.0,"@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_START : break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH : case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_STOP : updateApState(WifiManager.WIFI_AP_STATE_DISABLING, 0); stopSoftAp(); if ((message.what) == (com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH)) { updateApState(WifiManager.WIFI_AP_STATE_FAILED, WifiManager.SAP_START_FAILURE_GENERAL); } else { updateApState(WifiManager.WIFI_AP_STATE_DISABLED, 0); } transitionTo(mIdleState); break; default : return NOT_HANDLED; } return HANDLED; }",0171d236a949fe2f82e3640fbaa2166d2c633607,"@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_INTERFACE_STATUS_CHANGED : if ((message.obj) != (mNetworkObserver)) { break; } boolean isUp = (message.arg1) == 1; if (isUp == (mIfaceIsUp)) { break; } mIfaceIsUp = isUp; if (isUp) { android.util.Log.d(com.android.server.wifi.SoftApManager.TAG, ""SoftAp is ready for use""); updateApState(WifiManager.WIFI_AP_STATE_ENABLED, 0); } else { } break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_START : break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH : case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_STOP : updateApState(WifiManager.WIFI_AP_STATE_DISABLING, 0); stopSoftAp(); if ((message.what) == (com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH)) { updateApState(WifiManager.WIFI_AP_STATE_FAILED, WifiManager.SAP_START_FAILURE_GENERAL); } else { updateApState(WifiManager.WIFI_AP_STATE_DISABLED, 0); } transitionTo(mIdleState); break; default : return NOT_HANDLED; } return HANDLED; }",b73587bbb5e0dac90a2bdd82add32ec3367a3324,processMessage(android.os.Message),processMessage(android.os.Message),3,1,"@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_INTERFACE_STATUS_CHANGED : if ((message.obj) != (mNetworkObserver)) { break; } boolean isUp = (message.arg1) == 1; onUpChanged(isUp); break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_START : break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH : case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_STOP : updateApState(WifiManager.WIFI_AP_STATE_DISABLING, 0); stopSoftAp(); if ((message.what) == (com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH)) { updateApState(WifiManager.WIFI_AP_STATE_FAILED, WifiManager.SAP_START_FAILURE_GENERAL); } else { updateApState(WifiManager.WIFI_AP_STATE_DISABLED, 0); } transitionTo(mIdleState); break; default : return NOT_HANDLED; } return HANDLED; }",f8467d89fb01b4de3d79eac6afcc0c0b3de363c7,processMessage(android.os.Message),346644,385,309
146988,sdk-common_src_main_java_com_android_ide_common_res2_AssetSet.java,3.0,"@java.lang.Override protected void readSourceFolder(java.io.File sourceFolder, com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { readFiles(sourceFolder, sourceFolder, logger); }",fd0a81ce3e1e6ee29e4559ea34a8fdab923afcae,"@java.lang.Override protected void readSourceFolder(java.io.File sourceFolder, com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { for (java.io.File file : com.google.common.io.Files.fileTreeTraverser().preOrderTraversal(sourceFolder)) { if ((file.isFile()) && (!(isIgnored(file)))) { handleNewFile(sourceFolder, file, logger); } } }",261541741e0b9ba735dc5b196605eba4f7e31d2d,"readSourceFolder(java.io.File,com.android.utils.ILogger)","readSourceFolder(java.io.File,com.android.utils.ILogger)",7,4,"@java.lang.Override protected void readSourceFolder(@com.android.annotations.NonNull java.io.File sourceFolder, @com.android.annotations.NonNull com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { readFiles(sourceFolder, sourceFolder, logger); }",dd1b0f439bd442c8f6930e48a015f343051985eb,"readSourceFolder(java.io.File,com.android.utils.ILogger)",266625,105,71
195067,src_com_android_settings_DevelopmentSettings.java,44.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String defaultLogdSizeValue() { java.lang.String defaultValue = android.os.SystemProperties.get(com.android.settings.DevelopmentSettings.SELECT_LOGD_DEFAULT_SIZE_PROPERTY); if ((defaultValue == null) || ((defaultValue.length()) == 0)) { if (android.os.SystemProperties.get(""ro.config.low_ram"").equals(""true"")) { defaultValue = ""65536""; } else { defaultValue = ""262144""; } } return defaultValue; }",c08ea6fc49ae0e27afc26c157e24712608419b5d,,defaultLogdSizeValue(),3,0,"private java.lang.String defaultLogdSizeValue() { java.lang.String defaultValue = android.os.SystemProperties.get(com.android.settings.DevelopmentSettings.SELECT_LOGD_DEFAULT_SIZE_PROPERTY); if ((defaultValue == null) || ((defaultValue.length()) == 0)) { if (android.os.SystemProperties.get(""ro.config.low_ram"").equals(""true"")) { defaultValue = com.android.settings.DevelopmentSettings.SELECT_LOGD_SVELTE_DEFAULT_SIZE_VALUE; } else { defaultValue = com.android.settings.DevelopmentSettings.SELECT_LOGD_DEFAULT_SIZE_VALUE; } } return defaultValue; }",7482df80e247be89c176f8c8b1df943b34a396d9,defaultLogdSizeValue(),198391,110,151
233727,jack_src_com_android_jack_optimizations_valuepropagation_argument_TypeMethodCallArgumentsMarker.java,,,,"private void markCall(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JExpression> args, boolean isVirtual) { java.util.concurrent.ConcurrentMap<java.lang.String, com.android.jack.optimizations.common.LiteralValueListTracker> map = (isVirtual) ? virtual : direct; com.android.jack.optimizations.common.LiteralValueListTracker tracker = map.get(signature); if (tracker == null) { tracker = new com.android.jack.optimizations.common.ConcurrentLiteralValueListTracker(args.size()); com.android.jack.optimizations.common.LiteralValueListTracker existing = map.putIfAbsent(signature, tracker); if (existing != null) { tracker = existing; } } tracker.updateWith(args); }",d3f58aea03b536d1f270a413e5108fa105214d6a,,"markCall(java.lang.String,java.util.List,boolean)",7,1,"private void markCall(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JExpression> args, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall.DispatchKind dispatchKind) { java.util.concurrent.ConcurrentMap<java.lang.String, com.android.jack.optimizations.common.LiteralValueListTracker> map = (dispatchKind == (JMethodCall.DispatchKind.VIRTUAL)) ? virtual : direct; com.android.jack.optimizations.common.LiteralValueListTracker tracker = map.get(signature); if (tracker == null) { tracker = new com.android.jack.optimizations.common.ConcurrentLiteralValueListTracker(args.size()); com.android.jack.optimizations.common.LiteralValueListTracker existing = map.putIfAbsent(signature, tracker); if (existing != null) { tracker = existing; } } tracker.updateWith(args); }",b1f9e4afc600a2cca04de0bb86b9a6c2c86992b9,"markCall(java.lang.String,java.util.List,com.android.jack.ir.ast.JMethodCall$DispatchKind)",439153,192,221
577277,core_java_android_net_NetworkCapabilities.java,50.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.internal.annotations.VisibleForTesting public boolean equalsAllowedUids(android.net.NetworkCapabilities nc) { java.util.Set<android.net.UidRange> comparedUids = nc.mAllowedUids; if (null == comparedUids) return null == (mAllowedUids); if (null == (mAllowedUids)) return false; final java.util.Set<android.net.UidRange> allowedUids = new android.util.ArraySet(mAllowedUids); for (android.net.UidRange range : comparedUids) { if (!(allowedUids.contains(range))) { return false; } allowedUids.remove(range); } return allowedUids.isEmpty(); },19b3edc3a91a97254f477633c42356577ce5507d,,equalsAllowedUids(android.net.NetworkCapabilities),13,16,@com.android.internal.annotations.VisibleForTesting public boolean equalsUids(android.net.NetworkCapabilities nc) { java.util.Set<android.net.UidRange> comparedUids = nc.mUids; if (null == comparedUids) return null == (mUids); if (null == (mUids)) return false; final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(mUids); for (android.net.UidRange range : comparedUids) { if (!(uids.contains(range))) { return false; } uids.remove(range); } return uids.isEmpty(); },815c7704038b4b84496c7a43cc0e69af4978b6b1,equalsUids(android.net.NetworkCapabilities),122886,163,154
270260,tests_tests_media_src_android_media_cts_VisualizerTest.java,4.0,"public void test4_0MeasurementModePeakRms() throws java.lang.Exception { if (!(hasAudioOutput())) { return; } try { getVisualizer(0); mVisualizer.setEnabled(true); assertTrue(""visualizer not enabled"", mVisualizer.getEnabled()); java.lang.Thread.sleep(100); int status = mVisualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS); assertEquals(""setMeasurementMode for PEAK_RMS doesn't report success"", Visualizer.SUCCESS, status); int mode = mVisualizer.getMeasurementMode(); assertEquals(""getMeasurementMode doesn't report PEAK_RMS"", Visualizer.MEASUREMENT_MODE_PEAK_RMS, mode); } catch (java.lang.IllegalStateException e) { fail(""method called in wrong state""); } catch (java.lang.InterruptedException e) { fail(""sleep() interrupted""); } finally { releaseVisualizer(); } }",e3709f68bdb74e671f78eec31fe52d06bb16af9c,"public void test4_0MeasurementModePeakRms() throws java.lang.Exception { if (!(hasAudioOutput())) { return; } try { getVisualizer(1); mVisualizer.setEnabled(true); assertTrue(""visualizer not enabled"", mVisualizer.getEnabled()); java.lang.Thread.sleep(100); int status = mVisualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS); assertEquals(""setMeasurementMode for PEAK_RMS doesn't report success"", Visualizer.SUCCESS, status); int mode = mVisualizer.getMeasurementMode(); assertEquals(""getMeasurementMode doesn't report PEAK_RMS"", Visualizer.MEASUREMENT_MODE_PEAK_RMS, mode); } catch (java.lang.IllegalStateException e) { fail(""method called in wrong state""); } catch (java.lang.InterruptedException e) { fail(""sleep() interrupted""); } finally { releaseVisualizer(); } }",dab038bb92e36618caf4420756aba6c54b00d776,test4_0MeasurementModePeakRms(),test4_0MeasurementModePeakRms(),5,4,"public void test4_0MeasurementModePeakRms() throws java.lang.Exception { if (!(hasAudioOutput())) { return; } try { getVisualizer(0); mVisualizer.setEnabled(true); assertTrue(""visualizer not enabled"", mVisualizer.getEnabled()); java.lang.Thread.sleep(100); int status = mVisualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS); assertEquals(""setMeasurementMode for PEAK_RMS doesn't report success"", Visualizer.SUCCESS, status); int mode = mVisualizer.getMeasurementMode(); assertEquals(""getMeasurementMode doesn't report PEAK_RMS"", Visualizer.MEASUREMENT_MODE_PEAK_RMS, mode); } catch (java.lang.IllegalStateException e) { fail(""method called in wrong state""); } catch (java.lang.InterruptedException e) { fail(""sleep() interrupted""); } finally { releaseVisualizer(); } }",e3709f68bdb74e671f78eec31fe52d06bb16af9c,test4_0MeasurementModePeakRms(),278749,212,212
534821,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,,,,"private static android.content.Intent getConnectionStateBroadcastMatcher(android.bluetooth.BluetoothDevice device, int toState, int fromState) { return org.mockito.hamcrest.MockitoHamcrest.argThat(org.hamcrest.core.AllOf.allOf(android.support.test.espresso.intent.matcher.IntentMatchers.hasAction(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothDevice.EXTRA_DEVICE, device), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothProfile.EXTRA_STATE, toState), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, fromState))); }",88f9040e866621e24a9e303eedd2070e1fa4de7e,,"getConnectionStateBroadcastMatcher(android.bluetooth.BluetoothDevice,int,int)",28,37,"private static void verifyConnectionStateBroadcast(android.bluetooth.BluetoothDevice device, int toState, int fromState, android.content.Intent intent) { org.junit.Assert.assertNotNull(intent); org.junit.Assert.assertEquals(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED, intent.getAction()); org.junit.Assert.assertEquals(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND, intent.getFlags()); org.junit.Assert.assertEquals(device, intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)); org.junit.Assert.assertEquals(toState, intent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertEquals(fromState, intent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1))); }",7ab9a05c9d9e4f014501e4df23540066735987ce,"verifyConnectionStateBroadcast(android.bluetooth.BluetoothDevice,int,int,android.content.Intent)",71061,169,164
73159,luni_src_test_java_libcore_java_util_zip_GZIPInputStreamTest.java,1.0,"public void testLongMessage() throws java.io.IOException { byte[] data = new byte[1024 * 1024]; new java.util.Random().nextBytes(data); assertTrue(java.util.Arrays.equals(data, libcore.java.util.zip.GZIPInputStreamTest.gunzip(libcore.java.util.zip.GZIPOutputStreamTest.gzip(data)))); }",90556ebc3f0039f3264a4b7df3199f22fd0b4468,public void testLongMessage() throws java.io.IOException { byte[] data = new byte[1024 * 1024]; new java.util.Random().nextBytes(data); },c1bb045428edc98d7b940b8d911eb3d3a496bc6b,testLongMessage(),testLongMessage(),3,2,"public void testLongMessage() throws java.io.IOException { byte[] data = new byte[1024 * 1024]; new java.util.Random().nextBytes(data); assertTrue(java.util.Arrays.equals(data, libcore.java.util.zip.GZIPInputStreamTest.gunzip(libcore.java.util.zip.GZIPOutputStreamTest.gzip(data)))); }",90556ebc3f0039f3264a4b7df3199f22fd0b4468,testLongMessage(),429509,36,83
102513,services_java_com_android_server_am_ActivityManagerService.java,397.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void removeRecentTaskLocked(int userId) { if (userId <= 0) { android.util.Slog.i(com.android.server.am.ActivityManagerService.TAG, (""Can't remove recent task on user "" + userId)); return; } int N = mRecentTasks.size(); for (int i = 0; i < N; i++) { com.android.server.am.TaskRecord tr = mRecentTasks.get(i); if ((tr.userId) == userId) { tr.disposeThumbnail(); mRecentTasks.remove(i); android.util.Slog.i(com.android.server.am.ActivityManagerService.TAG, (""remove RecentTask "" + userId)); i--; N--; } } }",7675d86d48c38971d1b8bd62bd6c789780783759,,removeRecentTaskLocked(int),3,250,"private void removeRecentTaskLocked(int userId) { if (userId <= 0) { android.util.Slog.i(com.android.server.am.ActivityManagerService.TAG, (""Can't remove recent task on user "" + userId)); return; } for (int i = (mRecentTasks.size()) - 1; i >= 0; --i) { com.android.server.am.TaskRecord tr = mRecentTasks.get(i); if ((tr.userId) == userId) { if (com.android.server.am.ActivityManagerService.DEBUG_TASKS) android.util.Slog.i(com.android.server.am.ActivityManagerService.TAG, (((""remove RecentTask "" + tr) + "" when finishing user"") + userId)); tr.disposeThumbnail(); mRecentTasks.remove(i); } } }",6a6aa1e20ea9878b54e6db998620bfe9aaf90926,removeRecentTaskLocked(int),43141,161,184
44490,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_DeviceManagerPage.java,,,,@java.lang.Override public void onDevicesChange() { },c1fb6386cbf96d7d6b73baf02327235bf80d78c5,,onDevicesChange(),5,32,@java.lang.Override public void onDevicesChange() { onRefresh(); },808f2451bb40d107fd434c6716259dcd3af70fcf,onDevicesChange(),481180,14,17
258052,luni_src_test_java_libcore_java_io_FileInputStreamTest.java,10.0,"public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile(""FileInputStreamTest_testSkipOnLargeFiles"", """"); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { java.io.FileOutputStream fos = new java.io.FileOutputStream(largeFile); try { byte[] buffer = new byte[1024 * 1024]; for (int i = 0; i < (3 * 1024); i++) { fos.write(buffer); } } finally { fos.close(); } java.io.FileInputStream fis = new java.io.FileInputStream(largeFile); long lastByte = (((3 * 1024) * 1024) * 1024L) - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } finally { assertTrue(largeFile.delete()); } }",cc2aa2937b569147dacab8a86dbb2cab52687cc6,"public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile(""FileInputStreamTest_testSkipOnLargeFiles"", """"); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { long fileSize = ((3 * 1024) * 1024) * 1024L; int resultCode = new java.lang.ProcessBuilder().command(""fallocate"", ""-l"", ""3G"", largeFile.getPath()).start().waitFor(); assertEquals(0, resultCode); assertEquals(fileSize, largeFile.length()); java.io.FileInputStream fis = new java.io.FileInputStream(largeFile); long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } finally { assertTrue(largeFile.delete()); } }",2719d6b54faa1991802f8bd406b4ff3f364cc501,testSkipOnLargeFiles(),testSkipOnLargeFiles(),8,11,"public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile(""FileInputStreamTest_testSkipOnLargeFiles"", """"); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; long fileSize = ((3 * 1024L) * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { libcore.java.io.FileInputStreamTest.allocateEmptyFile(largeFile, fileSize); assertEquals(fileSize, largeFile.length()); try (java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)) { long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } } finally { assertTrue(largeFile.delete()); } }",f5372646c41468f9fca10169b3a25049ac08dad4,testSkipOnLargeFiles(),44732,266,253
36201,ddms_libs_ddmuilib_src_com_android_ddmuilib_logcat_LogCatPanel.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void addRightClickMenu(final org.eclipse.swt.widgets.Table table) { final org.eclipse.jface.action.Action filterAction = new org.eclipse.jface.action.Action(""Filter similar messages.."") { @java.lang.Override public void run() { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> selectedMessages = getSelectedLogCatMessages(); if ((selectedMessages.size()) == 0) { addNewFilter(); } else { com.android.ddmuilib.logcat.LogCatMessage m = selectedMessages.get(0); addNewFilter(m.getTag(), m.getMessage(), m.getPid(), m.getAppName(), m.getLogLevel()); } } }; final org.eclipse.jface.action.MenuManager mgr = new org.eclipse.jface.action.MenuManager(); mgr.setRemoveAllWhenShown(true); mgr.addMenuListener(new org.eclipse.jface.action.IMenuListener() { @java.lang.Override public void menuAboutToShow(org.eclipse.jface.action.IMenuManager arg0) { mgr.add(filterAction); } }); final org.eclipse.swt.widgets.Menu menu = mgr.createContextMenu(table); table.addListener(SWT.MenuDetect, new org.eclipse.swt.widgets.Listener() { @java.lang.Override public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.graphics.Point pt = table.getDisplay().map(null, table, new org.eclipse.swt.graphics.Point(event.x, event.y)); org.eclipse.swt.graphics.Rectangle clientArea = table.getClientArea(); boolean header = ((pt.y) > (clientArea.y)) && ((pt.y) < ((clientArea.y) + (table.getHeaderHeight()))); table.setMenu((header ? null : menu)); } }); }",8c9a870fe1feea04bd4a6493520647f6bde516f9,,addRightClickMenu(org.eclipse.swt.widgets.Table),2,59,"private void addRightClickMenu(final org.eclipse.swt.widgets.Table table) { final org.eclipse.jface.action.Action filterAction = new org.eclipse.jface.action.Action(""Filter similar messages.."") { @java.lang.Override public void run() { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> selectedMessages = getSelectedLogCatMessages(); if ((selectedMessages.size()) == 0) { addNewFilter(); } else { com.android.ddmuilib.logcat.LogCatMessage m = selectedMessages.get(0); addNewFilter(m.getTag(), m.getMessage(), m.getPid(), m.getAppName(), m.getLogLevel()); } } }; final org.eclipse.jface.action.MenuManager mgr = new org.eclipse.jface.action.MenuManager(); mgr.add(filterAction); final org.eclipse.swt.widgets.Menu menu = mgr.createContextMenu(table); table.addListener(SWT.MenuDetect, new org.eclipse.swt.widgets.Listener() { @java.lang.Override public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.graphics.Point pt = table.getDisplay().map(null, table, new org.eclipse.swt.graphics.Point(event.x, event.y)); org.eclipse.swt.graphics.Rectangle clientArea = table.getClientArea(); boolean header = ((pt.y) > (clientArea.y)) && ((pt.y) < ((clientArea.y) + (table.getHeaderHeight()))); table.setMenu((header ? null : menu)); } }); }",0e4cee4cca5dc5376c92c523aa0e1a8e5363d929,addRightClickMenu(org.eclipse.swt.widgets.Table),74423,440,377
534821,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,,,,"@org.junit.Test public void testStateTransition_AudioDisconnectingToConnected_Timeout() { setUpAudioDisconnectingState(); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }",8f87b379248a3723132de9fb677e1442b5dea4a0,,testStateTransition_AudioDisconnectingToConnected_Timeout(),28,33,"@org.junit.Test public void testStateTransition_AudioDisconnectingToConnected_Timeout() { int numBroadcastsSent = setUpAudioDisconnectingState(); numBroadcastsSent++; verify(mHeadsetService, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS).times(numBroadcastsSent)).sendBroadcastAsUser(mIntentArgument.capture(), eq(UserHandle.ALL), eq(HeadsetService.BLUETOOTH_PERM)); com.android.bluetooth.hfp.HeadsetStateMachineTest.verifyAudioStateBroadcast(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTED, mIntentArgument.getValue()); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.Connected.class)); }",4ef1f0e79a715ca79f7db5c7b80f1506a5819ef5,testStateTransition_AudioDisconnectingToConnected_Timeout(),71075,149,196
530666,src_com_android_bluetooth_a2dp_A2dpNativeInterface.java,,,,"private void onAudioStateChanged(int state, byte[] address) { com.android.bluetooth.a2dp.StackEvent event = new com.android.bluetooth.a2dp.StackEvent(StackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, (""onAudioStateChanged: "" + event)); } com.android.bluetooth.a2dp.A2dpService service = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, ""onAudioStateChanged ignored: service not available""); } }",4ba3ea00626b3be9114546b3c35328e7647f65d4,,"onAudioStateChanged(int,byte[])",6,15,"private void onAudioStateChanged(int state, byte[] address) { com.android.bluetooth.a2dp.A2dpStackEvent event = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, (""onAudioStateChanged: "" + event)); } sendMessageToService(event); }",966bdcd67c6a5bd812c2f731ff4c51503ffc129a,"onAudioStateChanged(int,byte[])",280655,222,146
405397,src_java_com_android_internal_telephony_NetworkScanRequestTracker.java,,,,"public void stopNetworkScan(int scanId) { synchronized(mScheduler) { if (((scanId == (mScheduler.mLiveRequestInfo.mScanId)) && ((android.os.Binder.getCallingUid()) == (mScheduler.mLiveRequestInfo.mUid))) || ((scanId == (mScheduler.mPendingRequestInfo.mScanId)) && ((android.os.Binder.getCallingUid()) == (mScheduler.mPendingRequestInfo.mUid)))) { mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.CMD_STOP_NETWORK_SCAN, scanId).sendToTarget(); } else { throw new java.lang.IllegalArgumentException(((""Scan with id: "" + scanId) + "" does not exist!"")); } } }",bcbbd67f42946cdcffd22f2498eb9ff4cba300fe,,stopNetworkScan(int),17,1,"public void stopNetworkScan(int scanId) { synchronized(mScheduler) { if (((((mScheduler.mLiveRequestInfo) != null) && (scanId == (mScheduler.mLiveRequestInfo.mScanId))) && ((android.os.Binder.getCallingUid()) == (mScheduler.mLiveRequestInfo.mUid))) || ((((mScheduler.mPendingRequestInfo) != null) && (scanId == (mScheduler.mPendingRequestInfo.mScanId))) && ((android.os.Binder.getCallingUid()) == (mScheduler.mPendingRequestInfo.mUid)))) { mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.CMD_STOP_NETWORK_SCAN, scanId, 0).sendToTarget(); } else { throw new java.lang.IllegalArgumentException(((""Scan with id: "" + scanId) + "" does not exist!"")); } } }",36a8e9a97694297e3d747c5de5926b7330fbdd72,stopNetworkScan(int),424565,168,196
233160,espresso_core-tests_src_androidTest_java_android_support_test_espresso_EspressoEdgeCaseTest.java,11.0,"@java.lang.SuppressWarnings(""unchecked"") public void testRecoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle() throws java.lang.Exception { final java.lang.RuntimeException poison = new java.lang.RuntimeException(""oops""); try { Espresso.onView(withId(R.id.enter_data_edit_text)).perform(new android.support.test.espresso.EspressoEdgeCaseTest.TestAction() { @java.lang.Override public void perform(android.support.test.espresso.UiController controller, android.view.View view) { mainHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { throw poison; } }); controller.loopMainThreadUntilIdle(); } }); fail(""should throw""); } catch (java.lang.RuntimeException re) { if (re == poison) { } else { throw re; } } Espresso.onView(withId(R.id.enter_data_edit_text)).perform(typeText(""Hello World111"")); Espresso.onView(withId(R.id.enter_data_edit_text)).check(matches(withText(""Hello World111""))); }",ef84cb86f904a15602ccac70a63c24b7ed9db49b,"@org.junit.Test public void tecoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle() throws java.lang.Exception { final java.lang.RuntimeException poison = new java.lang.RuntimeException(""oops""); try { Espresso.onView(withId(R.id.enter_data_edit_text)).perform(new android.support.test.espresso.EspressoEdgeCaseTest.TestAction() { @java.lang.Override public void perform(android.support.test.espresso.UiController controller, android.view.View view) { mainHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { throw poison; } }); controller.loopMainThreadUntilIdle(); } }); fail(""should throw""); } catch (java.lang.RuntimeException re) { if (re == poison) { } else { throw re; } } Espresso.onView(withId(R.id.enter_data_edit_text)).perform(typeText(""Hello World111"")); Espresso.onView(withId(R.id.enter_data_edit_text)).check(matches(withText(""Hello World111""))); }",644dc419dbffe9185a7d7d816cac1716cd55cd14,testRecoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle(),tecoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle(),2,20,"@org.junit.Test public void recoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle() throws java.lang.Exception { final java.lang.RuntimeException poison = new java.lang.RuntimeException(""oops""); try { Espresso.onView(withId(R.id.enter_data_edit_text)).perform(new android.support.test.espresso.EspressoEdgeCaseTest.TestAction() { @java.lang.Override public void perform(android.support.test.espresso.UiController controller, android.view.View view) { mainHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { throw poison; } }); controller.loopMainThreadUntilIdle(); } }); fail(""should throw""); } catch (java.lang.RuntimeException re) { if (re == poison) { } else { throw re; } } Espresso.onView(withId(R.id.enter_data_edit_text)).perform(typeText(""Hello World111"")); Espresso.onView(withId(R.id.enter_data_edit_text)).check(matches(withText(""Hello World111""))); }",87012db8443cf0a193d5ce3559a8d29337230213,recoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle(),234240,264,262
104232,perflib_src_test_java_com_android_tools_perflib_heap_io_HprofBufferTest.java,,,,public void testSimpleMapping() throws java.lang.Exception { HprofBuffer.BUFFER_SIZE = ((int) (file.length())); com.android.tools.perflib.heap.Snapshot snapshot = new com.android.tools.perflib.heap.HprofParser(file).parse(); assertSnapshotCorrect(snapshot); },aaa9d6db3f8dd7c55d2b14cdd511ff1fa85bd407,,testSimpleMapping(),5,0,public void testSimpleMapping() throws java.lang.Exception { com.android.tools.perflib.heap.Snapshot snapshot = new com.android.tools.perflib.heap.HprofParser(new com.android.tools.perflib.heap.io.MemoryMappedFileBuffer(file)).parse(); assertSnapshotCorrect(snapshot); },338cc2742d14642082c78f5b734db8fb36110664,testSimpleMapping(),381632,73,74
316743,jack_src_com_android_jack_backend_dex_annotations_ParameterMetadataAnnotationsAdder.java,,,,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { for (com.android.jack.ir.ast.JParameter parameter : method.getParams()) { addParameterName(parameter.getName()); accessFlags.add(new com.android.jack.ir.ast.JIntLiteral(si, parameter.getModifier())); } return super.visit(method); }",b0844f4e0ecd743b0afbf2ea31ff1b5fba6b816c,,visit(com.android.jack.ir.ast.JMethod),16,1,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { for (com.android.jack.ir.ast.JParameter parameter : method.getParams()) { addParameterName((parameter.isNamePresent() ? parameter.getName() : null)); accessFlags.add(new com.android.jack.ir.ast.JIntLiteral(si, ((parameter.getModifier()) & (~(com.android.jack.ir.ast.JModifier.NAME_PRESENT))))); } return super.visit(method); }",8bf4f74a73290d3bf7e435ebd318a5076090df06,visit(com.android.jack.ir.ast.JMethod),48773,97,133
143337,tests_tests_hardware_src_android_hardware_cts_helpers_TestSensorEnvironment.java,10.0,"public int getExpectedSamplingPeriodUs() { if (!(isDelayRateTestable())) { throw new java.lang.IllegalArgumentException(""rateUs cannot be SENSOR_DELAY_[GAME|UI|NORMAL]""); } int expectedSamplingPeriodUs = mSamplingPeriodUs; int sensorMaxDelay = mSensor.getMaxDelay(); if (sensorMaxDelay > 0) { expectedSamplingPeriodUs = java.lang.Math.min(expectedSamplingPeriodUs, sensorMaxDelay); } return java.lang.Math.max(expectedSamplingPeriodUs, mSensor.getMinDelay()); }",6292478ebe4bee19c6cced39b5c4af00d5d0a313,"public int getExpectedSamplingPeriodUs() { if (!(isDelayRateTestable())) { throw new java.lang.IllegalArgumentException(""rateUs cannot be SENSOR_DELAY_[GAME|UI|NORMAL]""); } int expectedSamplingPeriodUs; switch (mSamplingPeriodUs) { case android.hardware.SensorManager.SENSOR_DELAY_FASTEST : expectedSamplingPeriodUs = 0; break; case android.hardware.SensorManager.SENSOR_DELAY_GAME : expectedSamplingPeriodUs = 20000; break; case android.hardware.SensorManager.SENSOR_DELAY_UI : expectedSamplingPeriodUs = 66667; break; case android.hardware.SensorManager.SENSOR_DELAY_NORMAL : expectedSamplingPeriodUs = 200000; break; default : expectedSamplingPeriodUs = mSamplingPeriodUs; break; } int sensorMaxDelay = mSensor.getMaxDelay(); if (sensorMaxDelay > 0) { expectedSamplingPeriodUs = java.lang.Math.min(expectedSamplingPeriodUs, sensorMaxDelay); } return java.lang.Math.max(expectedSamplingPeriodUs, mSensor.getMinDelay()); }",39224fa1e08804df20bbbc11f4ce459d4ab26d20,getExpectedSamplingPeriodUs(),getExpectedSamplingPeriodUs(),4,10,"public int getExpectedSamplingPeriodUs() { if (!(isDelayRateTestable())) { throw new java.lang.IllegalArgumentException(""rateUs cannot be SENSOR_DELAY_[GAME|UI|NORMAL]""); } int expectedSamplingPeriodUs = mSamplingPeriodUs; int sensorMaxDelay = mSensor.getMaxDelay(); if (sensorMaxDelay > 0) { expectedSamplingPeriodUs = java.lang.Math.min(expectedSamplingPeriodUs, sensorMaxDelay); } return java.lang.Math.max(expectedSamplingPeriodUs, mSensor.getMinDelay()); }",6292478ebe4bee19c6cced39b5c4af00d5d0a313,getExpectedSamplingPeriodUs(),390520,234,119
184220,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,6.0,"private void srcToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File... sources) { boolean assertEnable = false; assert true == (assertEnable = true); args.add(""java""); args.add((assertEnable ? ""-ea"" : ""-da"")); args.add(""-jar""); args.add(jackPrebuilt.getAbsolutePath()); args.add(""--verbose""); args.add(verbosityLevel.name()); args.add(""--sanity-checks""); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((classpath.size()) > 0) { args.add(""--classpath""); args.add(getClasspathAsString()); } for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add(""--import-meta""); args.add(meta.getPath()); } args.addAll(extraJackArgs); for (java.io.File jarjarFile : jarjarRules) { args.add(""--config-jarjar""); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add(""-g""); } addAnnotationProcessorArgs(args); for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } }",a42a77f3f78ddb965b1eaf45910d8e96a7922234,"private void srcToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File... sources) { invokeJack(args); args.add(""--verbose""); args.add(verbosityLevel.name()); args.add(""--sanity-checks""); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((classpath.size()) > 0) { args.add(""--classpath""); args.add(getClasspathAsString()); } for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add(""--import-meta""); args.add(meta.getPath()); } args.addAll(extraJackArgs); for (java.io.File jarjarFile : jarjarRules) { args.add(""--config-jarjar""); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add(""-g""); } addAnnotationProcessorArgs(args); for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } }",705e24e1b30920f8b31cbbffde7e927bcde14faa,"srcToCommon(java.util.List,java.io.File[])","srcToCommon(java.util.List,java.io.File[])",10,7,"private void srcToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File... sources) { buildJackCall(args); args.add(""--verbose""); args.add(verbosityLevel.name()); args.add(""--sanity-checks""); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((classpath.size()) > 0) { args.add(""--classpath""); args.add(getClasspathAsString()); } for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add(""--import-meta""); args.add(meta.getPath()); } args.addAll(extraJackArgs); for (java.io.File jarjarFile : jarjarRules) { args.add(""--config-jarjar""); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add(""-g""); } addAnnotationProcessorArgs(args); for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } }",55445528e8d732be3eba01243deb4ff997989c3a,"srcToCommon(java.util.List,java.io.File[])",137012,361,362
335040,service_java_com_android_server_wifi_SupplicantP2pIfaceHal.java,42.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean provisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; int targetMethod = wpsInfoToConfigMethod(config.wps.setup); if (targetMethod == (-1)) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""Unrecognized WPS configuration method: "" + (config.wps.setup))); return false; } byte[] macAddress = stringToAddress(config.deviceAddress); if (macAddress == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Cannot parse null mac address.""); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""provisionDiscovery("" + (config.deviceAddress)) + "", "") + (config.wps.setup)) + "")"")); try { result.setResult(mISupplicantP2pIface.provisionDiscovery(macAddress, targetMethod)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",e154f4346f652c33abb73de4f39487558541e5eb,,provisionDiscovery(android.net.wifi.p2p.WifiP2pConfig),23,18,"public boolean provisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""provisionDiscovery""))) return false; int targetMethod = wpsInfoToConfigMethod(config.wps.setup); if (targetMethod == (-1)) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""Unrecognized WPS configuration method: "" + (config.wps.setup))); return false; } if ((config.deviceAddress) == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Cannot parse null mac address.""); return false; } byte[] macAddress = null; try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(config.deviceAddress); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Could not parse peer mac address."", e); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""provisionDiscovery("" + (config.deviceAddress)) + "", "") + (config.wps.setup)) + "")"")); try { result.setResult(mISupplicantP2pIface.provisionDiscovery(macAddress, targetMethod)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",4ad4b41b1c448e3aa3a9ba91b0090fa5264c516f,provisionDiscovery(android.net.wifi.p2p.WifiP2pConfig),258111,382,464
148762,common_src_main_java_com_android_ide_common_blame_Message.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.android.ide.common.blame.Message.Kind findIgnoringCase(java.lang.String s) { return com.android.ide.common.blame.Message.Kind.findIgnoringCase(s, null); }",df16f3643fd82785725866e71f7d410408dfc4fc,,findIgnoringCase(java.lang.String),19,1,"@com.android.annotations.Nullable public static com.android.ide.common.blame.Message.Kind findIgnoringCase(java.lang.String s) { return com.android.ide.common.blame.Message.Kind.findIgnoringCase(s, null); }",47bb2cbe70fa43ec98dbef6d4a1cafd8b8c0fb4c,findIgnoringCase(java.lang.String),417588,54,62
79527,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_channels_ServerSocketChannelTest.java,4.0,"public void test_socket_accept_Nonblocking_Bound() throws java.io.IOException { serverChannel.configureBlocking(false); java.net.ServerSocket gotSocket = serverChannel.socket(); gotSocket.bind(null); try { gotSocket.accept(); fail(""Should throw an IllegalBlockingModeException""); } catch (java.nio.channels.IllegalBlockingModeException e) { } serverChannel.close(); try { gotSocket.accept(); fail(""Should throw a ClosedChannelException""); } catch (java.nio.channels.ClosedChannelException e) { } }",c0be4c6be0656e4d74c09881b76b84fdb936dc2f,"public void test_socket_accept_Nonblocking_Bound() throws java.io.IOException { serverChannel.configureBlocking(false); serverChannel.bind(null); java.net.ServerSocket gotSocket = serverChannel.socket(); try { gotSocket.accept(); fail(""Should throw an IllegalBlockingModeException""); } catch (java.nio.channels.IllegalBlockingModeException e) { } serverChannel.close(); try { gotSocket.accept(); fail(""Should throw a ClosedChannelException""); } catch (java.nio.channels.ClosedChannelException e) { } }",a03ff96f26f6ebf08d687421f1a4488192404b10,test_socket_accept_Nonblocking_Bound(),test_socket_accept_Nonblocking_Bound(),15,6,"public void test_socket_accept_Nonblocking_Bound() throws java.io.IOException { serverChannel.configureBlocking(false); serverChannel.bind(null); java.net.ServerSocket gotSocket = serverChannel.socket(); try { gotSocket.accept(); fail(""Should throw an IllegalBlockingModeException""); } catch (java.nio.channels.IllegalBlockingModeException expected) { } serverChannel.close(); try { gotSocket.accept(); fail(""Should throw a ClosedChannelException""); } catch (java.nio.channels.ClosedChannelException expected) { } }",934bd022d1d2b4476b9db21fd44d32cab9dbfe7f,test_socket_accept_Nonblocking_Bound(),311896,121,121
555786,tests_net_java_com_android_server_IpSecServiceTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testOpenUdpEncapSocketTagsSocket() throws java.lang.Exception { com.android.server.IpSecService.UidFdTagger mockTagger = mock(IpSecService.UidFdTagger.class); com.android.server.IpSecService testIpSecService = new com.android.server.IpSecService(mMockContext, mMockIpSecSrvConfig, mockTagger); IpSecUdpEncapResponse udpEncapResp = testIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(udpEncapResp); assertEquals(IpSecManager.Status.OK, udpEncapResp.status); java.io.FileDescriptor sockFd = udpEncapResp.fileDescriptor.getFileDescriptor(); org.mockito.ArgumentMatcher<java.io.FileDescriptor> fdMatcher = new org.mockito.ArgumentMatcher<java.io.FileDescriptor>() { public boolean matches(java.io.FileDescriptor arg) { try { android.system.StructStat sockStat = android.system.Os.fstat(sockFd); android.system.StructStat argStat = android.system.Os.fstat(arg); return ((sockStat.st_ino) == (argStat.st_ino)) && ((sockStat.st_dev) == (argStat.st_dev)); } catch (android.system.ErrnoException e) { return false; } } }; verify(mockTagger).tag(argThat(fdMatcher), eq(android.system.Os.getuid())); testIpSecService.closeUdpEncapsulationSocket(udpEncapResp.resourceId); udpEncapResp.fileDescriptor.close(); }",f55188e87d8133768073ff62dfadcf3e40771f2c,,testOpenUdpEncapSocketTagsSocket(),11,6,"@org.junit.Test public void testOpenUdpEncapSocketTagsSocket() throws java.lang.Exception { com.android.server.IpSecService.UidFdTagger mockTagger = mock(IpSecService.UidFdTagger.class); com.android.server.IpSecService testIpSecService = new com.android.server.IpSecService(mMockContext, mMockIpSecSrvConfig, mockTagger); IpSecUdpEncapResponse udpEncapResp = testIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(udpEncapResp); assertEquals(IpSecManager.Status.OK, udpEncapResp.status); java.io.FileDescriptor sockFd = udpEncapResp.fileDescriptor.getFileDescriptor(); org.mockito.ArgumentMatcher<java.io.FileDescriptor> fdMatcher = ( argFd) -> { return fileDescriptorsEqual(sockFd, argFd); }; verify(mockTagger).tag(argThat(fdMatcher), eq(android.system.Os.getuid())); testIpSecService.closeUdpEncapsulationSocket(udpEncapResp.resourceId); udpEncapResp.fileDescriptor.close(); }",14f8ebde29046fc347c1c565e0dd31bafaa6816d,testOpenUdpEncapSocketTagsSocket(),203316,374,264
52293,sdklib_src_main_java_com_android_sdklib_SdkManager.java,10.0,@com.android.annotations.Nullable public com.android.sdklib.IAndroidTarget getTargetFromHashString(@com.android.annotations.Nullable java.lang.String hash) { if (hash != null) { for (com.android.sdklib.IAndroidTarget target : mTargets) { if (hash.equals(target.hashString())) { return target; } } } return null; },ccb7ba04b4f1c17f359eeae27f1aa7925475627d,@com.android.annotations.Nullable public com.android.sdklib.IAndroidTarget getTargetFromHashString(@com.android.annotations.Nullable java.lang.String hash) { if (hash != null) { for (com.android.sdklib.IAndroidTarget target : getTargets()) { if (hash.equals(target.hashString())) { return target; } } } return null; },be8947e5fcc6cf92881ce027d84505c23b88949b,getTargetFromHashString(java.lang.String),getTargetFromHashString(java.lang.String),15,16,@com.android.annotations.Nullable public com.android.sdklib.IAndroidTarget getTargetFromHashString(@com.android.annotations.Nullable java.lang.String hash) { return mLocalSdk.getTargetFromHashString(hash); },35a14a006db88d88b3574a5b4fc92662804798e0,getTargetFromHashString(java.lang.String),399457,89,53
293986,telecomm_java_android_telecom_ConnectionService.java,63.0,"@java.lang.Override public void mergeConference(java.lang.String callId) { mHandler.obtainMessage(android.telecom.ConnectionService.MSG_MERGE_CONFERENCE, callId).sendToTarget(); }",5a0f22f66f97fd957d5eb9d428d281d539763f15,"@java.lang.Override public void mergeConference(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_MERGE_CONFERENCE); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_MERGE_CONFERENCE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",e18c6746f3e06fcd9acffeb5cb14febe4724de99,mergeConference(java.lang.String),"mergeConference(java.lang.String,android.telecom.Logging.Session$Info)",8,3,"@java.lang.Override public void mergeConference(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_MERGE_CONFERENCE); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_MERGE_CONFERENCE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",f89de51131ab27bdc0b94cec3fd11c16c0ff92c1,"mergeConference(java.lang.String,android.telecom.Logging.Session$Info)",425150,161,160
91995,luni_src_main_java_libcore_io_Os.java,20.0,"public void mincore(long address, long byteCount, byte[] vector) throws libcore.io.ErrnoException;",e50ec1feaa1fd935e40f0694ef2d0b281de338d7,"public void mincore(long address, long byteCount, byte[] vector) throws android.os.ErrnoException;",5c705f68a2e689307f1eeed7cf62f788dc7bf46b,"mincore(long,long,byte[])","mincore(long,long,byte[])",3,21,"public void mincore(long address, long byteCount, byte[] vector) throws android.system.ErrnoException;",57b65558e8660eab3fcb826b5187f764f796d3e9,"mincore(long,long,byte[])",170205,25,25
186211,test_vogar_testing_InterceptOutputStreams.java,,,,"@java.lang.Override public void evaluate() throws java.lang.Throwable { for (vogar.testing.InterceptOutputStreams.Stream stream : streams) { java.io.PrintStream original = stream.get(); vogar.testing.InterceptOutputStreams.State state = new vogar.testing.InterceptOutputStreams.State(original); stream.set(new java.io.PrintStream(state.baos, true, ""UTF-8"")); streams2State.put(stream, state); } try { base.evaluate(); } finally { for (java.util.Map.Entry<vogar.testing.InterceptOutputStreams.Stream, vogar.testing.InterceptOutputStreams.State> entry : streams2State.entrySet()) { vogar.testing.InterceptOutputStreams.Stream stream = entry.getKey(); vogar.testing.InterceptOutputStreams.State state = entry.getValue(); stream.set(state.original); } streams2State.clear(); } }",eea1d9cd28d43e8362c7224b24de1105ea3c0618,,evaluate(),4,6,"@java.lang.Override public void evaluate() throws java.lang.Throwable { for (vogar.testing.InterceptOutputStreams.Stream stream : streams) { vogar.testing.InterceptOutputStreams.State state = new vogar.testing.InterceptOutputStreams.State(stream); streams2State.put(stream, state); } try { base.evaluate(); } finally { for (vogar.testing.InterceptOutputStreams.State state : streams2State.values()) { state.reset(); } streams2State.clear(); } }",2f306eb870f0a7277c91ee1fd43df9cb13ea574f,evaluate(),103044,208,118
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetEuiccInfo1() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF20030102039000""); assertEquals(""BF2003010203"", mEuiccCard.getEuiccInfo1().toHex()); verifyStoreData(channel, ""BF2000""); }",d872e4add04d562f85f6c90d7a5222379e84c2fe,,testGetEuiccInfo1(),8,35,"@org.junit.Test public void testGetEuiccInfo1() { int channel = mockLogicalChannelResponses(""BF20030102039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getEuiccInfo1(resultCaptor, mHandler); resultCaptor.await(); assertEquals(""BF2003010203"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, ""BF2000""); }",dca50d614898afde9bda199e676017bbaa05b42b,testGetEuiccInfo1(),396915,106,150
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAcos.java,,,,"private void checkAcosFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAcosFloat3(in, out); verifyResultsAcosFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcosFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcosFloat3(in, out); verifyResultsAcosFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcosFloat3: "" + (e.toString()))); } }",790c11e6c5bc88fc7c46a0e93c94ee90e004490d,,checkAcosFloat3(),9,2,"private void checkAcosFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 7260668130254640958L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testAcosFloat3Float3(in, out); verifyResultsAcosFloat3Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcosFloat3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcosFloat3Float3(in, out); verifyResultsAcosFloat3Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcosFloat3Float3: "" + (e.toString()))); } }",f2c9fad36f699c714a37c516826428568d18a20c,checkAcosFloat3Float3(),142782,324,309
136041,policy_src_com_android_internal_policy_impl_PhoneWindowManager.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isAppHiddenByKeyguard(android.view.IApplicationToken appToken) { if ((mKeyguardDelegate) == null) return false; return (mKeyguardDelegate.isShowing()) && (((mWinShowWhenLocked) == null) || ((mWinShowWhenLocked.getAppToken()) != appToken)); },70018dff346f2a8f99b4810338d6637727374307,,isAppHiddenByKeyguard(android.view.IApplicationToken),4,137,"private boolean wakeUp(long wakeTime, boolean wakeInTheaterMode) { if ((!wakeInTheaterMode) && (isTheaterModeEnabled())) { return false; } mPowerManager.wakeUp(wakeTime); return true; }",21e23cf80a85d8cbd7ea2a89609bf0408dc70f23,"wakeUp(long,boolean)",394390,76,53
358176,hostsidetests_net_app_src_com_android_cts_net_hostside_AbstractRestrictBackgroundNetworkTestCase.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private int getRestrictBackgroundStatus() throws java.lang.Exception { final android.content.Intent intent = new android.content.Intent(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.ACTION_GET_RESTRICT_BACKGROUND_STATUS); final java.lang.String resultData = sendOrderedBroadcast(intent); assertNotNull(""timeout waiting for ordered broadcast result"", resultData); return java.lang.Integer.parseInt(resultData); }",247ab1d3971b0d26468e8e5d31fc54ce62d810e6,,getRestrictBackgroundStatus(),5,7,"protected boolean isMyRestrictBackgroundStatus(int expectedStatus) throws java.lang.Exception { final int actualStatus = mCm.getRestrictBackgroundStatus(); if (expectedStatus != actualStatus) { android.util.Log.d(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG, (((""Expected: "" + (toString(expectedStatus))) + "" but actual: "") + (toString(actualStatus)))); return false; } return true; }",f653af0e68efc249ef830fcfb90aeaf4dd2ae951,isMyRestrictBackgroundStatus(int),339330,98,105
584381,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testRequestNetworkScan() throws java.lang.InterruptedException { if (!(mTelephonyManager.hasCarrierPrivileges())) { android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, ""Skipping test that requires carrier privileges.""); return; } int ranGsm = RadioNetworkConstants.RadioAccessNetworks.GERAN; int[] gsmBands = new int[]{ RadioNetworkConstants.GeranBands.BAND_T380, RadioNetworkConstants.GeranBands.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier gsm = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); int ranLte = RadioNetworkConstants.RadioAccessNetworks.EUTRAN; int[] lteBands = new int[]{ RadioNetworkConstants.EutranBands.BAND_10, RadioNetworkConstants.EutranBands.BAND_11 }; int[] lteChannels = new int[]{ 5, 6, 7, 8 }; android.telephony.RadioAccessSpecifier lte = new android.telephony.RadioAccessSpecifier(ranLte, lteBands, lteChannels); android.telephony.RadioAccessSpecifier[] radioAccessSpecifier = new android.telephony.RadioAccessSpecifier[]{ gsm, lte }; mNetworkScanRequest = new android.telephony.NetworkScanRequest(android.telephony.NetworkScanRequest.SCAN_TYPE_ONE_SHOT, radioAccessSpecifier, 5, 60, true, 10, null); mNetworkScanCallback = new android.telephony.cts.TelephonyManagerTest.NetworkScanCallbackImpl(); android.os.Message startNetworkScan = mHandler.obtainMessage(android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_START); startNetworkScan.sendToTarget(); java.lang.Thread.sleep(android.telephony.cts.TelephonyManagerTest.MAX_INIT_WAIT_MS); android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, (""mNetworkScanStatus: "" + (mNetworkScanStatus))); assertTrue(""The final scan status is not ScanCompleted or ScanError"", scanCompleteStatus()); }",bcc8a02b1d2a4bb3bf2cf7c785d407bcfdcadf67,,testRequestNetworkScan(),10,15,"@org.junit.Test public void testSetNetworkSelectionModeAutomatic() { try { mTelephonyManager.setNetworkSelectionModeAutomatic(); fail(""Expected SecurityException. App does not have carrier privileges.""); } catch (java.lang.SecurityException expected) { } }",65684e5a987096774553d9d39b597fa6cad5eb04,testSetNetworkSelectionModeAutomatic(),186364,506,55
569319,src_com_android_bluetooth_pbap_PbapStateMachine.java,,,,"@java.lang.Override public void enter() { if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } if ((mConnSocket) != null) { try { mConnSocket.close(); mConnSocket = null; } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, (""Close Connection Socket error: "" + (e.toString()))); } } mSessionStatusHandler.obtainMessage(BluetoothPbapService.MSG_STATE_MACHINE_DONE).sendToTarget(); }",247c37b806058b2aa35d3c5b6a0e35a1e412441a,,enter(),19,17,@java.lang.Override int getConnectionStateInt() { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; },c23f0e12c38df897018124f9d94f363fb44aeb7e,getConnectionStateInt(),114443,137,26
81416,tests_tests_renderscript_src_android_renderscript_cts_TestErf.java,,,,"private void checkErfFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testErfFloat2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testErfFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testErfFloat2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testErfFloat2: "" + (e.toString()))); } }",26bb8b5e5201e76b89aed9d47a8359d32af57e69,,checkErfFloat2(),9,4,"private void checkErfFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -8655239448326554444L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testErfFloat2Float2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testErfFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testErfFloat2Float2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testErfFloat2Float2: "" + (e.toString()))); } }",890baf4d92d339595db3f374ff3cd3170cac0177,checkErfFloat2Float2(),142801,297,278
42013,src_java_com_android_internal_telephony_gsm_GsmMmiCode.java,43.0,"private static boolean isShortCodeUSSD(java.lang.String dialString, com.android.internal.telephony.gsm.GSMPhone phone) { if (dialString != null) { if (phone.isInCall()) { if ((dialString.length()) <= (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE)) { return true; } } if ((dialString.length()) <= (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE)) { if ((dialString.charAt(((dialString.length()) - 1))) == (com.android.internal.telephony.gsm.GsmMmiCode.END_OF_USSD_COMMAND)) { return true; } } } return false; }",e728afdbdd422ccb6d089d8e053dcc08cacd9ad8,"private static boolean isShortCodeUSSD(java.lang.String dialString, com.android.internal.telephony.gsm.GSMPhone phone) { if ((dialString != null) && ((dialString.length()) <= (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE))) { if (phone.isInCall()) { return true; } if (!(((dialString.length()) == (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE)) && ((dialString.charAt(0)) == '1'))) { return true; } } return false; }",99127dcce304065a876618cf0e703010054115ec,"isShortCodeUSSD(java.lang.String,com.android.internal.telephony.gsm.GSMPhone)","isShortCodeUSSD(java.lang.String,com.android.internal.telephony.gsm.GSMPhone)",3,43,"private static boolean isShortCodeUSSD(java.lang.String dialString, com.android.internal.telephony.gsm.GSMPhone phone) { if ((dialString != null) && ((dialString.length()) <= (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE))) { if (phone.isInCall()) { return true; } if (((dialString.length()) != (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE)) || ((dialString.charAt(0)) != '1')) { return true; } } return false; }",8b6b424e426d3b97acc5f08320216c754d8d87f7,"isShortCodeUSSD(java.lang.String,com.android.internal.telephony.gsm.GSMPhone)",524335,150,148
156541,tests_tests_renderscript_src_android_renderscript_cts_ImageProcessingTest.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"int blend() { float r = ((srcR) * (dstA)) + ((1 - (srcA)) * (dstR)); float g = ((srcG) * (dstA)) + ((1 - (srcA)) * (dstG)); float b = ((srcB) * (dstA)) + ((1 - (srcA)) * (dstB)); float a = ((srcA) * (dstA)) + ((1 - (srcA)) * (dstA)); return pack(a, r, g, b); }",a49e57b17e8db94ade469badc6c9636ed56a5dc1,,blend(),7,26,"@java.lang.Override int blend() { float r = ((srcR) * (dstA)) + ((1 - (srcA)) * (dstR)); float g = ((srcG) * (dstA)) + ((1 - (srcA)) * (dstG)); float b = ((srcB) * (dstA)) + ((1 - (srcA)) * (dstB)); float a = ((srcA) * (dstA)) + ((1 - (srcA)) * (dstA)); return pack(a, r, g, b); }",121aa201d52f856f0a8198052832287a2bcd733f,blend(),368441,126,132
149957,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_NdkHandler.java,,,,"public java.lang.String getGccToolchainVersion(java.lang.String abi) { if (toolchainName.equals(""gcc"")) { return toolchainVersion.isEmpty() ? getDefaultToolchainVersion(abi) : toolchainVersion; } else { return com.android.build.gradle.internal.NdkHandler.is64BitsAbi(abi) ? com.android.build.gradle.internal.NdkHandler.DEFAULT_LLVM_GCC64_VERSION : com.android.build.gradle.internal.NdkHandler.DEFAULT_LLVM_GCC32_VERSION; } }",7299fd5314e126f07dc41f440b791a3f4c981a49,,getGccToolchainVersion(java.lang.String),8,3,public java.lang.String getGccToolchainVersion(com.android.build.gradle.internal.core.Abi abi) { if ((toolchain) == (com.android.build.gradle.internal.core.Toolchain.GCC)) { return toolchainVersion.isEmpty() ? getDefaultToolchainVersion(abi) : toolchainVersion; } else { return abi.supports64Bits() ? Toolchain.CLANG.getDefaultGccVersion64() : Toolchain.CLANG.getDefaultGccVersion32(); } },ac0fa0651214f2c87c9476872f58a594a650b0ef,getGccToolchainVersion(com.android.build.gradle.internal.core.Abi),341080,136,119
137966,jack-api_src_com_android_jack_api_v01_Api01Config.java,10.0,@javax.annotation.Nonnull void setEmitDebug(boolean emitDebug) throws com.android.jack.api.v01.ConfigurationException;,d98ed934ac30de8d847fed629852087bdf95f98c,void setEmitDebug(boolean emitDebug) throws com.android.jack.api.v01.ConfigurationException;,b261c19e178c0d76073d466c6d841108b7494fb3,setEmitDebug(boolean),setEmitDebug(boolean),3,8,void setDebugInfoLevel(@javax.annotation.Nonnull com.android.jack.api.v01.DebugInfoLevel debugInfoLevel) throws com.android.jack.api.v01.ConfigurationException;,5b90f2b46f3926c794e496259c1cef0ab4ab1655,setDebugInfoLevel(com.android.jack.api.v01.DebugInfoLevel),337787,24,44
196553,luni_src_test_java_libcore_java_util_GregorianCalendarTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkDSTFields(java.util.Calendar cal, java.lang.String description, int expectedZoneOffset, int expectedDstOffset) { assertEquals((""Incorrect ZONE_OFFSET: "" + description), expectedZoneOffset, cal.get(java.util.Calendar.ZONE_OFFSET)); assertEquals((""Incorrect DST_OFFSET: "" + description), expectedDstOffset, cal.get(java.util.Calendar.DST_OFFSET)); }",4aebdd510551af0d8dd6d0066fb5f264692b3f21,,"checkDSTFields(java.util.Calendar,java.lang.String,int,int)",2,21,"private void checkDstFields(java.util.Calendar cal, java.lang.String description, int expectedZoneOffset, int expectedDstOffset) { assertEquals((""Incorrect ZONE_OFFSET: "" + description), expectedZoneOffset, cal.get(java.util.Calendar.ZONE_OFFSET)); assertEquals((""Incorrect DST_OFFSET: "" + description), expectedDstOffset, cal.get(java.util.Calendar.DST_OFFSET)); }",8b496841c5ad85466c8c5f2fd481e864ab76a076,"checkDstFields(java.util.Calendar,java.lang.String,int,int)",388459,96,96
158444,sdk-common_src_main_java_com_android_ide_common_res2_GeneratedResourceItem.java,,,,"@java.lang.Override org.w3c.dom.Node getAdoptedNode(org.w3c.dom.Document document) { org.w3c.dom.Element element = document.createElement(""generated-file""); element.setAttribute(SdkConstants.ATTR_PATH, mGeneratedFile.getAbsolutePath()); element.setAttribute(SdkConstants.ATTR_TYPE, getType().getName()); element.setAttribute(ResourceFile.ATTR_QUALIFIER, mQualifiers); return element; }",4a2dff947dabec806e829436b06aed5222f4df1f,,getAdoptedNode(org.w3c.dom.Document),8,2,"@java.lang.Override org.w3c.dom.Node getDetailsXml(org.w3c.dom.Document document) { org.w3c.dom.Element element = document.createElement(""generated-file""); element.setAttribute(SdkConstants.ATTR_PATH, mGeneratedFile.getAbsolutePath()); element.setAttribute(SdkConstants.ATTR_TYPE, getType().getName()); element.setAttribute(ResourceFile.ATTR_QUALIFIER, mQualifiers); return element; }",1c459babb9f1015475c9d416d5f49dbeceb62d42,getDetailsXml(org.w3c.dom.Document),237579,104,102
253791,luni_src_main_java_libcore_io_Os.java,94.0,public void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,17be24b72469d75e217a65eaa676ffbc1b6b9e81,public void fdatasync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,6882d763c3690a90749d9b882d5a12a2777f2094,fdatasync(java.io.FileDescriptor),fdatasync(java.io.FileDescriptor),8,91,public void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,17be24b72469d75e217a65eaa676ffbc1b6b9e81,fdatasync(java.io.FileDescriptor),494612,23,22
479697,dx_src_com_android_dx_util_ByteArray.java,17.0,@java.lang.Override public void mark(int reserve) { mark = cursor; },14697109fe34f1c3066fb90ad244591ed76f1346,public void mark(int reserve) { mark = cursor; },f7379f4aea4f7738c805cce596f4ec4e5bb3febe,mark(int),mark(int),7,17,@java.lang.Override public void mark(int reserve) { mark = cursor; },14697109fe34f1c3066fb90ad244591ed76f1346,mark(int),158977,13,19
215070,dx_src_com_android_jack_dx_dex_DexFormat.java,1.0,"public static int magicToApi(byte[] magic) { if ((magic.length) != 8) { return -1; } if ((((((magic[0]) != 'd') || ((magic[1]) != 'e')) || ((magic[2]) != 'x')) || ((magic[3]) != '\n')) || ((magic[7]) != '\u0000')) { return -1; } java.lang.String version = (("""" + ((char) (magic[4]))) + ((char) (magic[5]))) + ((char) (magic[6])); if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_CURRENT)) { return com.android.jack.dx.dex.DexFormat.API_CURRENT; } else if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_13)) { return 13; } return -1; }",dcb39c7b406dba1650d0e9b13a777d430f0ef74b,"public static int magicToApi(byte[] magic) { if ((magic.length) != 8) { return -1; } if ((((((magic[0]) != 'd') || ((magic[1]) != 'e')) || ((magic[2]) != 'x')) || ((magic[3]) != '\n')) || ((magic[7]) != '\u0000')) { return -1; } java.lang.String version = (("""" + ((char) (magic[4]))) + ((char) (magic[5]))) + ((char) (magic[6])); if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_CURRENT)) { return com.android.jack.dx.dex.DexFormat.API_CURRENT; } else if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_23)) { return com.android.jack.dx.dex.DexFormat.API_NO_DEFAULT_METHOD; } else if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_13)) { return com.android.jack.dx.dex.DexFormat.API_NO_EXTENDED_OPCODES; } return -1; }",79ecc5f86a7f00e685910b0c3dfc25e211236b4d,magicToApi(byte[]),magicToApi(byte[]),6,1,"public static int magicToApi(byte[] magic) { if ((magic.length) != 8) { return -1; } if ((((((magic[0]) != 'd') || ((magic[1]) != 'e')) || ((magic[2]) != 'x')) || ((magic[3]) != '\n')) || ((magic[7]) != '\u0000')) { return -1; } java.lang.String version = (("""" + ((char) (magic[4]))) + ((char) (magic[5]))) + ((char) (magic[6])); if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_CURRENT)) { return com.android.jack.dx.dex.DexFormat.API_CURRENT; } else if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_13)) { return com.android.jack.dx.dex.DexFormat.API_NO_EXTENDED_OPCODES; } return -1; }",466571f4dad504ec3179b246dc4e2abe23e43f5a,magicToApi(byte[]),320587,273,221
283122,harmony-tests_src_test_java_org_apache_harmony_tests_java_util_zip_InflaterInputStreamTest.java,0.0,"public void test_read$BII3() throws java.io.IOException { java.io.File resources = tests.support.resource.Support_Resources.createTempFolder(); tests.support.resource.Support_Resources.copyFile(resources, null, ""Broken_manifest.jar""); java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(resources, ""Broken_manifest.jar"")); java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream(fis); byte[] outBuf = new byte[530]; try { iis.read(); fail(""IOException expected.""); } catch (java.io.IOException ee) { } }",6c3d9551868a2113fea93ee063c6b4b489c8669d,"public void test_read$BII3() throws java.io.IOException { java.io.File resources = tests.support.resource.Support_Resources.createTempFolder(); tests.support.resource.Support_Resources.copyFile(resources, null, ""Broken_manifest.jar""); java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(resources, ""Broken_manifest.jar"")); try (java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream(fis)) { byte[] outBuf = new byte[530]; try { iis.read(); fail(""IOException expected.""); } catch (java.io.IOException ee) { } } }",f4927b7670813eeb3f153ee944f53a2c22cbd549,test_read$BII3(),test_read$BII3(),7,0,"public void test_read$BII3() throws java.io.IOException { java.io.File resources = tests.support.resource.Support_Resources.createTempFolder(); tests.support.resource.Support_Resources.copyFile(resources, null, ""Broken_manifest.jar""); java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(resources, ""Broken_manifest.jar"")); try (java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream(fis)) { try { iis.read(); fail(""IOException expected.""); } catch (java.io.IOException ee) { } } }",02a750a53528d6c15c59c1891576a94a2f10bc83,test_read$BII3(),188777,155,145
584815,src_java_com_android_internal_telephony_uicc_SIMRecords.java,53.0,"private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }",32d1b99702c11457bb295c20637e72ad146a2735,"private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }",2629be5a80d621e5006eccffaf018bf8b8c805e8,onLockedAllRecordsLoaded(),onLockedAllRecordsLoaded(),3,53,"private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED)) { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { loge((""onLockedAllRecordsLoaded: unexpected mLockedRecordsReqReason "" + (mLockedRecordsReqReason))); } }",72b71d6d92e6e7792e2376cadcd18117a4f07326,onLockedAllRecordsLoaded(),500775,98,148
44490,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_DeviceManagerPage.java,,,,"private static java.lang.String getGenericLabel(com.android.sdklib.devices.Device d) { java.lang.String name = d.getName(); if (name.equals(""3.7 FWVGA slider"")) { name = ""3.7in FWVGA slider""; } java.util.regex.Matcher matcher = com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + "".0""; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + ""\"" "") + n; } return name; }",c777f7321cb0c8ca7fc20bf6b493a05c4ffedaa7,,getGenericLabel(com.android.sdklib.devices.Device),5,39,"private static java.lang.String getPrettyName(com.android.sdklib.devices.Device d, boolean leadZeroes) { if (d == null) { return """"; } java.lang.String name = d.getName(); if (name.equals(""3.7 FWVGA slider"")) { name = ""3.7in FWVGA slider""; } java.util.regex.Matcher matcher = com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + "".0""; dot = (size.length()) - 2; } if (leadZeroes && (dot < 3)) { size = (""000"".substring(dot)) + size; } name = (size + ""\"" "") + n; } return name; }",04216a719410933ffaec797f2f0a74caa07b0bce,"getPrettyName(com.android.sdklib.devices.Device,boolean)",481164,202,220
243440,test_458-checker-instruction-simplification_src_Main.java,37.0,"public static int SubNeg1(int arg1, int arg2) { return (-arg1) - arg2; }",38ce801aa1a1cbfba0095c621e86f38be8ce83d7,"public static int SubNeg1(int arg1, int arg2) { if (Main.doThrow) { throw new java.lang.Error(); } return (-arg1) - arg2; }",fae571e3bd0b8e7932c20f050456bae7523e4bed,"SubNeg1(int,int)","SubNeg1(int,int)",3,25,"public static int $noinline$SubNeg1(int arg1, int arg2) { if (Main.doThrow) { throw new java.lang.Error(); } return (-arg1) - arg2; }",d2719353110741faeb2d83129ffffda1af814f66,"$noinline$SubNeg1(int,int)",118204,39,44
50262,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_ui_DevicePropertyEditingSupport.java,,,,private static java.lang.String stripCategoryPrefix(java.lang.String name) { int index = name.indexOf(':'); if ((index >= 0) && (index < ((name.length()) - 1))) { return name.substring((index + 1)); } else { return name; } },3f59e228d3467693fd5caa18b53957db0538d5ce,,stripCategoryPrefix(java.lang.String),9,16,private static java.lang.String stripCategoryPrefix(java.lang.String name) { return name.substring(((name.indexOf(':')) + 1)); },f7272f96451129b6befe3bee8f6c94bdbfd94dd3,stripCategoryPrefix(java.lang.String),346221,64,32
280681,jack-tests_tests_com_android_jack_java8_lambda_test042_Tests.java,,,,"@org.junit.Test public void test001() { junit.framework.Assert.assertEquals(10, com.android.jack.java8.lambda.test042.Tests.getValue(10)); }",acf259a0b04deb0160a8d38224d82dcc6a33d886,,test001(),3,3,"@org.junit.Test public void test001() { junit.framework.Assert.assertEquals(13, com.android.jack.java8.lambda.test042.Tests.getValue(10)); }",029cd1184d6e8f1a73a636d07744b3d772f3de08,test001(),218619,39,41
678625,services_core_java_com_android_server_audio_AudioService.java,71.0,"void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, ((""setBtScoActiveDevice("" + btDevice) + "")"")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to remove previous device "" + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to add new device "" + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }",488cd048e1f016b59a75396144881492ec0def6e,"private void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, ((""setBtScoActiveDevice("" + btDevice) + "")"")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to remove previous device "" + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to add new device "" + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }",d7feb1d0dc1eb1b97bbce196f0cb1004d9893235,setBtScoActiveDevice(android.bluetooth.BluetoothDevice),setBtScoActiveDevice(android.bluetooth.BluetoothDevice),2,71,"private void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { synchronized(mScoClients) { android.util.Log.i(com.android.server.audio.AudioService.TAG, (((""setBtScoActiveDevice: "" + (mBluetoothHeadsetDevice)) + "" -> "") + btDevice)); final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to remove previous device "" + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, (""setBtScoActiveDevice() failed to add new device "" + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }",a2e31056d98e29369a84f3063eee16744a8ddfab,setBtScoActiveDevice(android.bluetooth.BluetoothDevice),11290,274,265
253791,luni_src_main_java_libcore_io_ForwardingOs.java,104.0,"public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptInt(fd, level, option); }",d4c2c3344e99d78954666d79f4de061c356f096a,"public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptInt(fd, level, option); }",c4ef56ae603a21c5fc0a1a6be11202b1fd23203e,"getsockoptInt(java.io.FileDescriptor,int,int)","getsockoptInt(java.io.FileDescriptor,int,int)",8,103,"public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptInt(fd, level, option); }",d4c2c3344e99d78954666d79f4de061c356f096a,"getsockoptInt(java.io.FileDescriptor,int,int)",494836,45,44
340810,telecomm_java_android_telecom_Connection.java,179.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void onRttConnectionSuccess(android.telecom.Connection c) { },a0a3e69840bedc7b7e61a2733db9676b8e763475,,onRttConnectionSuccess(android.telecom.Connection),6,103,public void onRttInitiationSuccess(android.telecom.Connection c) { },00df53b25f9957120e94cd68a023614b7b2063d0,onRttInitiationSuccess(android.telecom.Connection),393468,19,20
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,54.0,"public void test_isDecimalSeparatorAlwaysShown() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###0.##""); assertTrue(""Wrong unset value"", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat(""###0.00""); assertTrue(""Wrong unset2 value"", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat(""###0.""); assertTrue(""Wrong set value"", df.isDecimalSeparatorAlwaysShown()); }",4f10dc0b3ddf34a87a38d29ffeff566c164c0d82,"public void testIsDecimalSeparatorAlwaysShown() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###0.##""); assertTrue(""Wrong unset value"", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat(""###0.00""); assertTrue(""Wrong unset2 value"", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat(""###0.""); assertTrue(""Wrong set value"", df.isDecimalSeparatorAlwaysShown()); }",2f54184bc877ed330876b8455b83a66b6904519f,test_isDecimalSeparatorAlwaysShown(),testIsDecimalSeparatorAlwaysShown(),2,19,"public void test_isDecimalSeparatorAlwaysShown() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###0.##""); assertTrue(""Wrong unset value"", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat(""###0.00""); assertTrue(""Wrong unset2 value"", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat(""###0.""); assertTrue(""Wrong set value"", df.isDecimalSeparatorAlwaysShown()); }",4f10dc0b3ddf34a87a38d29ffeff566c164c0d82,test_isDecimalSeparatorAlwaysShown(),84435,94,95
632219,services_core_java_com_android_server_BluetoothManagerService.java,15.0,"@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call getState"", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Airplane Mode change - current state: "" + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE); } } }",6bd888b57f878b0d19a046abd4cb867a32c553b9,"@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call getState"", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Airplane Mode change - current state: "" + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName()); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE, android.app.ActivityThread.currentPackageName()); } } }",e9538beb8ecafbfb77a259e283f4f76cf19d38c2,onChange(boolean),onChange(boolean),9,14,"@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call getState"", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Airplane Mode change - current state: "" + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, ""Unable to call onBrEdrDown"", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(BluetoothProtoEnums.ENABLE_DISABLE_REASON_AIRPLANE_MODE, mContext.getPackageName()); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, BluetoothProtoEnums.ENABLE_DISABLE_REASON_AIRPLANE_MODE, mContext.getPackageName()); } } }",dd12af6f755a1bd6d5400bbe7a6647060074d147,onChange(boolean),386487,468,454
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,70.0,"public void test_formatD() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getInstance(java.util.Locale.ENGLISH))); format.setGroupingUsed(false); format.setMaximumFractionDigits(400); for (int i = 0; i < 309; i++) { java.lang.String tval = ""1""; for (int j = 0; j < i; j++) tval += ""0""; double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + "") e:"") + tval) + "" r:"") + result), tval, result); } for (int i = 0; i < 322; i++) { java.lang.String tval = ""0.""; for (int j = 0; j < i; j++) tval += ""0""; tval += ""1""; double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + "") e:"") + tval) + "" r:"") + result), tval, result); } }",48dad6e627c1161ed30ceb8e012f101f0f4e8782,"public void testFormatDouble_wideRange() { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.DecimalFormat format = new java.text.DecimalFormat(""#0.#"", dfs); format.setMaximumIntegerDigits(400); format.setMaximumFractionDigits(400); for (int i = 0; i < 309; i++) { java.lang.String tval = ""1""; for (int j = 0; j < i; j++) { tval += ""0""; } double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + "") e:"") + tval) + "" r:"") + result), tval, result); } for (int i = 0; i < 322; i++) { java.lang.String tval = ""0.""; for (int j = 0; j < i; j++) { tval += ""0""; } tval += ""1""; double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + "") e:"") + tval) + "" r:"") + result), tval, result); } }",5bb424c8e39503a322621af4fa28a45731c82c75,test_formatD(),testFormatDouble_wideRange(),2,53,"public void test_formatDouble_wideRange() { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.DecimalFormat format = new java.text.DecimalFormat(""#0.#"", dfs); format.setMaximumIntegerDigits(400); format.setMaximumFractionDigits(400); for (int i = 0; i < 309; i++) { java.lang.String tval = ""1""; for (int j = 0; j < i; j++) { tval += ""0""; } double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + "") e:"") + tval) + "" r:"") + result), tval, result); } for (int i = 0; i < 322; i++) { java.lang.String tval = ""0.""; for (int j = 0; j < i; j++) { tval += ""0""; } tval += ""1""; double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + "") e:"") + tval) + "" r:"") + result), tval, result); } }",3cd506e966e472a51d60046630c773492a6fa76c,test_formatDouble_wideRange(),84428,284,285
335040,service_java_com_android_server_wifi_WifiNative.java,127.0,"public boolean p2pReinvoke(int netId, java.lang.String deviceAddress) { if ((android.text.TextUtils.isEmpty(deviceAddress)) || (netId < 0)) return false; return doBooleanCommand((((""P2P_INVITE persistent="" + netId) + "" peer="") + deviceAddress)); }",12b3731afd009d0adac060b9da023aed76758047,"public boolean p2pReinvoke(int netId, java.lang.String deviceAddress) { if ((android.text.TextUtils.isEmpty(deviceAddress)) || (netId < 0)) return false; if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.reinvoke(netId, deviceAddress); } else { return doBooleanCommand((((""P2P_INVITE persistent="" + netId) + "" peer="") + deviceAddress)); } }",dc3337144faa8032d26245b01f36375439196a37,"p2pReinvoke(int,java.lang.String)","p2pReinvoke(int,java.lang.String)",23,131,"public boolean p2pReinvoke(int netId, java.lang.String deviceAddress) { if ((android.text.TextUtils.isEmpty(deviceAddress)) || (netId < 0)) return false; if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.reinvoke(netId, deviceAddress); } else { return doBooleanCommand((((""P2P_INVITE persistent="" + netId) + "" peer="") + deviceAddress)); } }",cbcf272c75858143121400674d42de10d351f80f,"p2pReinvoke(int,java.lang.String)",258387,137,141
68031,sdk-common_src_test_java_com_android_ide_common_res2_ResourceSetTest.java,3.0,"public void testBrokenSet3() throws java.lang.Exception { java.io.File root = com.android.testutils.TestUtils.getRoot(""resources"", ""brokenSet3""); com.android.ide.common.res2.ResourceSet set = new com.android.ide.common.res2.ResourceSet(""main""); set.addSource(root); boolean gotException = false; com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger(); try { set.loadFromFiles(logger); } catch (java.io.IOException e) { gotException = true; } assertTrue(""ResourceSet processing should have failed, but didn't"", gotException); assertFalse(logger.getErrorMsgs().isEmpty()); }",4da7cc8735d1acad0bed22601eb716b6a2a222ca,"public void testBrokenSet3() throws java.lang.Exception { java.io.File root = com.android.testutils.TestUtils.getRoot(""resources"", ""brokenSet3""); com.android.ide.common.res2.ResourceSet set = new com.android.ide.common.res2.ResourceSet(""main""); set.addSource(root); boolean gotException = false; com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger(); try { set.loadFromFiles(logger); } catch (com.android.ide.common.res2.MergingException e) { gotException = true; assertEquals(((new java.io.File(root, ((""values"" + (java.io.File.separator)) + ""values.xml"")).getAbsolutePath()) + "": Found item Attr/d_common_attr more than one time""), e.getMessage()); } assertTrue(""ResourceSet processing should have failed, but didn't"", gotException); assertFalse(logger.getErrorMsgs().isEmpty()); }",f2a5b6fa911fb2a5dfd6348adb0ee5778ef0eb7d,testBrokenSet3(),testBrokenSet3(),3,3,"public void testBrokenSet3() throws java.lang.Exception { java.io.File root = com.android.testutils.TestUtils.getRoot(""resources"", ""brokenSet3""); com.android.ide.common.res2.ResourceSet set = new com.android.ide.common.res2.ResourceSet(""main""); set.addSource(root); boolean gotException = false; com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger(); try { set.loadFromFiles(logger); } catch (com.android.ide.common.res2.MergingException e) { gotException = true; assertEquals(((new java.io.File(root, ((""values"" + (java.io.File.separator)) + ""values.xml"")).getAbsolutePath()) + "": Error: Found item Attr/d_common_attr more than one time""), e.getMessage()); } assertTrue(""ResourceSet processing should have failed, but didn't"", gotException); assertFalse(logger.getErrorMsgs().isEmpty()); }",16028a61febaff57142c323cb6fa81898b200e5d,testBrokenSet3(),86933,227,229
231132,test_597-deopt-new-string_src_Main.java,3.0,public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { $noinline$run0(); } } },9e9392c9b447cc8e5011e23f1c6cfcefb22466d4,"public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { java.lang.String str = $noinline$run0(); if (!(str.equals(""abc""))) { java.lang.System.out.println((""Failure! "" + str)); java.lang.System.exit(0); } } } }",288d1704e29722c4f8f33269c5680f1cbcdfc316,run(),run(),5,3,"public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { java.lang.String str = $noinline$run0(); if (!(str.equals(""abc""))) { java.lang.System.out.println((""Failure 2! "" + str)); java.lang.System.exit(0); } } } }",fba74864486c96515d0502ad01fe260d020c583e,run(),146900,136,137
307718,jack_src_com_android_jack_ir_ast_JDefinedClassOrInterface.java,48.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull public com.android.jack.ir.ast.JMethod getMethod(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId methodId) throws com.android.jack.lookup.JMethodLookupException { return getMethod(name, methodId.getType(), methodId.getMethodIdWide().getParamTypes()); }",ff08f09090525d8b543654764adc8b440f64d6d9,,"getMethod(java.lang.String,com.android.jack.ir.ast.JMethodId)",5,3,"@javax.annotation.Nonnull public com.android.jack.ir.ast.JMethod getMethod(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId methodId) throws com.android.jack.lookup.JMethodLookupException { com.android.jack.ir.ast.JMethodIdWide methodIdWide = methodId.getMethodIdWide(); return getMethod(methodIdWide.getName(), methodId.getType(), methodIdWide.getParamTypes()); }",d4ad4e75516ce6f29737162f2367745a59cd8b4b,getMethod(com.android.jack.ir.ast.JMethodId),185257,92,105
48539,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLX509Certificate.java,,,,"@java.lang.Override public void verify(java.security.PublicKey key, java.lang.String sigProvider) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CertificateException { }",93b080c643a7f03ac5a1d21eaed21c5d0f0f12ef,,"verify(java.security.PublicKey,java.lang.String)",17,37,"@java.lang.Override public void verify(java.security.PublicKey key, java.lang.String sigProvider) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CertificateException { verifyInternal(key, sigProvider); }",23c9bef86bf3abb4e33ed8f1426ec0c720ff4eb3,"verify(java.security.PublicKey,java.lang.String)",437043,66,74
589435,services_core_java_com_android_server_ConnectivityService.java,49.0,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",ef8740af2e199a9f746d0e77bcd5563060973454,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",b757f93eb78ee2b0e2d9b3acfc7e09283876a7ea,"listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)","listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)",14,51,"@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); nc.setSingleUid(android.os.Binder.getCallingUid()); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log((""listenForNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }",9a34321242c52bf9b372d2e9fc784013f58c90c6,"listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)",106402,284,284
148495,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_vg_VDParser.java,,,,"@java.lang.Override public void parse(com.android.assetstudiolib.vectordrawable.vg.VDTree tree, org.xml.sax.Attributes attributes) { com.android.assetstudiolib.vectordrawable.vg.VDGroup g = parseGroupAttributes(attributes); tree.add(g); }",0400dbb9a332267bf739d4def7597b5cd6a19c3d,,"parse(com.android.assetstudiolib.vectordrawable.vg.VDTree,org.xml.sax.Attributes)",11,25,"@java.lang.Override public void parse(com.android.assetstudiolib.vectordrawable.VdTree tree, org.xml.sax.Attributes attributes) { com.android.assetstudiolib.vectordrawable.VdGroup g = parseGroupAttributes(attributes); tree.add(g); }",2ec287356916d1a0f613e65f9ae4c084f8453b7a,"parse(com.android.assetstudiolib.vectordrawable.VdTree,org.xml.sax.Attributes)",5090,71,65
531956,src_com_android_providers_telephony_TelephonyProvider.java,49.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,boolean isCallingFromSystemUid() { return (android.os.UserHandle.getAppId(android.os.Binder.getCallingUid())) == (SYSTEM_UID); },84c485e5448c2c5c19c2428e8a8c52b0e6a7fb66,,isCallingFromSystemUid(),21,25,boolean isCallingFromSystemUid() { return (mInjector.binderGetCallingUid()) == (SYSTEM_UID); },2fcd2fcd7e61c4628c6a80a6e32700747732896c,isCallingFromSystemUid(),424499,37,25
274154,src_com_android_phone_CallBarringEditPreference.java,,,,"void handleCallBarringResult(boolean status) { isActivated = status; if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""handleGetCBResponse done, isActivated="" + status)); }",a01aa077928feb34b601fe4c4cbc32c116030fba,,handleCallBarringResult(boolean),5,9,"void handleCallBarringResult(boolean status) { mIsActivated = status; if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, (""handleCallBarringResult: mIsActivated="" + (mIsActivated))); } }",b02acbcec13b0b0044854770123a32ae8a3356c9,handleCallBarringResult(boolean),437906,72,79
396553,src_java_com_android_internal_telephony_sip_SipPhoneBase.java,72.0,@java.lang.Override public void getDataCallList(android.os.Message response) { },0d85bd44043da43d44745fc4b0562cb6ff9c1a31,@java.lang.Override public void getDataCallList(com.android.internal.telephony.sip.Message response) { },ca10c2f91a256babfe71997bbed2cfe90eab8f86,getDataCallList(android.os.Message),getDataCallList(com.android.internal.telephony.sip.Message),4,59,@java.lang.Override public void getDataCallList(android.os.Message response) { },0d85bd44043da43d44745fc4b0562cb6ff9c1a31,getDataCallList(android.os.Message),397998,27,21
112695,build-system_builder-model_src_main_java_com_android_builder_model_BuildType.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,boolean isPseudolocalizeEnabled();,9e210c002cda4227f51b2e45f578978c9a559575,,isPseudolocalizeEnabled(),4,12,boolean isPseudoLocalesEnabled();,e311fa27379257d405a52f6ea9e41fda1a6d14a5,isPseudoLocalesEnabled(),109717,7,6
204904,v7_preference_src_android_support_v7_preference_CheckBoxPreference.java,1.0,private void syncCheckboxView(android.view.View view) { if (view instanceof android.widget.Checkable) { ((android.widget.Checkable) (view)).setChecked(mChecked); } },c3596cd6a290f448ae0b888923c937096b467d61,private void syncCheckboxView(android.view.View view) { if (view instanceof android.widget.CheckBox) { ((android.widget.CheckBox) (view)).setOnCheckedChangeListener(null); } if (view instanceof android.widget.Checkable) { ((android.widget.Checkable) (view)).setChecked(mChecked); } if (view instanceof android.widget.CheckBox) { ((android.widget.CheckBox) (view)).setOnCheckedChangeListener(mListener); } },3769680b4f5f5aff279f6f7e2f596745d5ec2e91,syncCheckboxView(android.view.View),syncCheckboxView(android.view.View),2,1,private void syncCheckboxView(android.view.View view) { if (view instanceof android.widget.CompoundButton) { ((android.widget.CompoundButton) (view)).setOnCheckedChangeListener(null); } if (view instanceof android.widget.Checkable) { ((android.widget.Checkable) (view)).setChecked(mChecked); } if (view instanceof android.widget.CompoundButton) { ((android.widget.CompoundButton) (view)).setOnCheckedChangeListener(mListener); } },c9def40158289a461e6293a3cc164198fe8f2320,syncCheckboxView(android.view.View),333464,105,105
340810,telecomm_java_android_telecom_RemoteConnection.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void onRemoteRttUpgradeRequest() { for (android.telecom.RemoteConnection.CallbackRecord record : mCallbackRecords) { final android.telecom.RemoteConnection connection = this; final android.telecom.RemoteConnection.Callback callback = record.getCallback(); record.getHandler().post(() -> callback.onRemoteRttUpgradeRequest(connection)); } },f1038cf3df3aea17257015b248a1e0075091c106,,onRemoteRttUpgradeRequest(),6,129,void onRemoteRttRequest() { for (android.telecom.RemoteConnection.CallbackRecord record : mCallbackRecords) { final android.telecom.RemoteConnection connection = this; final android.telecom.RemoteConnection.Callback callback = record.getCallback(); record.getHandler().post(() -> callback.onRemoteRttRequest(connection)); } },9fb858e339fa63d7e14f918b04155f05a731451f,onRemoteRttRequest(),393051,83,81
548365,src_java_com_android_internal_telephony_CommandsInterface.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void getIccSlotStatus(android.os.Message result);,861d14502e7eb7b7c14553f5a49c56f1e88aed1f,,getIccSlotStatus(android.os.Message),8,152,void getIccSlotsStatus(android.os.Message result);,715622057eba5858c6a80828eb41980d0106ba01,getIccSlotsStatus(android.os.Message),69996,14,14
105891,login_src_com_google_gct_login_CancellableServerReceiver.java,7.0,"@java.lang.Override public void handle(java.lang.String target, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, int dispatch) throws java.io.IOException { if (!(com.google.gct.login.CancellableServerReceiver.CALLBACK_PATH.equals(target))) { return; } writeLandingHtml(response); response.flushBuffer(); ((com.google.api.client.repackaged.org.mortbay.jetty.Request) (request)).setHandled(true); lock.lock(); try { error = request.getParameter(""error""); code = request.getParameter(""code""); gotAuthorizationResponse.signal(); } finally { lock.unlock(); } }",410d4e888435896be79938e4c16b8ec1e0a04785,"@java.lang.Override public void handle(java.lang.String target, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, int dispatch) throws java.io.IOException { if (!(com.google.gct.login.CancellableServerReceiver.CALLBACK_PATH.equals(target))) { return; } ((com.google.api.client.repackaged.org.mortbay.jetty.Request) (request)).setHandled(true); lock.lock(); try { error = request.getParameter(""error""); code = request.getParameter(""code""); gotAuthorizationResponse.signal(); } finally { lock.unlock(); } writeLandingHtml(response, ((error) == null)); response.flushBuffer(); }",ccf9ce84f2ff171cedaf3f69ca8d3571c88d2be7,"handle(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int)","handle(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int)",2,1,"@java.lang.Override public void handle(java.lang.String target, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, int dispatch) throws java.io.IOException { if (!(com.google.gct.login.CancellableServerReceiver.CALLBACK_PATH.equals(target))) { return; } ((com.google.api.client.repackaged.org.mortbay.jetty.Request) (request)).setHandled(true); lock.lock(); try { error = request.getParameter(""error""); code = request.getParameter(""code""); gotAuthorizationResponse.signal(); } finally { lock.unlock(); } response.sendRedirect(((error) == null ? com.google.gct.login.CancellableServerReceiver.CallbackHandler.AUTH_SUCCESS_LANDING_PAGE : com.google.gct.login.CancellableServerReceiver.CallbackHandler.AUTH_FAILURE_LANDING_PAGE)); response.flushBuffer(); }",05440344a52dd8d7b361d4ecaa80123ed1f24b20,"handle(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int)",38674,158,204
482797,services_core_java_com_android_server_am_ActivityManagerService.java,167.0,"@java.lang.Override public final int startActivityWithConfig(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.content.res.Configuration config, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller(""startActivityWithConfig""); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, ""startActivityWithConfig"", null); int ret = mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, null, null, config, bOptions, false, userId, null, null, ""startActivityWithConfig""); return ret; }",54be20b9e393fa4f143464caca04f1752aa98ce5,"@java.lang.Override public final int startActivityWithConfig(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int struntimeFlags, android.content.res.Configuration config, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller(""startActivityWithConfig""); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, ""startActivityWithConfig"", null); int ret = mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, struntimeFlags, null, null, config, bOptions, false, userId, null, null, ""startActivityWithConfig""); return ret; }",cf726ab49ed1fb7914c9e1ae39967f2aeea6b606,"startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)","startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)",3,167,"@java.lang.Override public final int startActivityWithConfig(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.content.res.Configuration config, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller(""startActivityWithConfig""); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, ""startActivityWithConfig"", null); int ret = mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, null, null, config, bOptions, false, userId, null, null, ""startActivityWithConfig""); return ret; }",54be20b9e393fa4f143464caca04f1752aa98ce5,"startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)",501772,226,224
82457,luni_src_test_java_libcore_java_io_FileTest.java,11.0,"public void test_emptyFilename() throws java.lang.Exception { java.io.File f = new java.io.File(""""); assertFalse(f.canExecute()); assertFalse(f.canRead()); assertFalse(f.canWrite()); try { f.createNewFile(); fail(""expected IOException""); } catch (java.io.IOException expected) { } assertFalse(f.delete()); f.deleteOnExit(); assertFalse(f.exists()); assertEquals("""", f.getName()); assertEquals(null, f.getParent()); assertEquals(null, f.getParentFile()); assertEquals("""", f.getPath()); assertFalse(f.isAbsolute()); assertFalse(f.isDirectory()); assertFalse(f.isFile()); assertFalse(f.isHidden()); assertEquals(0, f.lastModified()); assertEquals(0, f.length()); assertEquals(null, f.list()); assertEquals(null, f.list(null)); assertEquals(null, f.listFiles()); assertEquals(null, f.listFiles(((java.io.FileFilter) (null)))); assertEquals(null, f.listFiles(((java.io.FilenameFilter) (null)))); assertFalse(f.mkdir()); assertFalse(f.mkdirs()); assertFalse(f.renameTo(f)); assertFalse(f.setLastModified(123)); assertFalse(f.setExecutable(true)); assertFalse(f.setReadOnly()); assertFalse(f.setReadable(true)); assertFalse(f.setWritable(true)); java.lang.String cwd = java.lang.System.getProperty(""user.dir""); assertEquals(new java.io.File(cwd), f.getAbsoluteFile()); assertEquals(cwd, f.getAbsolutePath()); }",8b305853adf7c5df350718be18d27b501517feb8,"public void test_emptyFilename() throws java.lang.Exception { java.io.File f = new java.io.File(""""); assertFalse(f.canExecute()); assertFalse(f.canRead()); assertFalse(f.canWrite()); try { f.createNewFile(); fail(""expected IOException""); } catch (java.io.IOException expected) { } assertFalse(f.delete()); f.deleteOnExit(); assertFalse(f.exists()); assertEquals("""", f.getName()); assertEquals(null, f.getParent()); assertEquals(null, f.getParentFile()); assertEquals("""", f.getPath()); assertFalse(f.isAbsolute()); assertFalse(f.isDirectory()); assertFalse(f.isFile()); assertFalse(f.isHidden()); assertEquals(0, f.lastModified()); assertEquals(0, f.length()); assertEquals(null, f.list()); assertEquals(null, f.list(null)); assertEquals(null, f.listFiles()); assertEquals(null, f.listFiles(((libcore.java.io.FileFilter) (null)))); assertEquals(null, f.listFiles(((libcore.java.io.FilenameFilter) (null)))); assertFalse(f.mkdir()); assertFalse(f.mkdirs()); assertFalse(f.renameTo(f)); assertFalse(f.setLastModified(123)); assertFalse(f.setExecutable(true)); assertFalse(f.setReadOnly()); assertFalse(f.setReadable(true)); assertFalse(f.setWritable(true)); java.lang.String cwd = java.lang.System.getProperty(""user.dir""); assertEquals(new java.io.File(cwd), f.getAbsoluteFile()); assertEquals(cwd, f.getAbsolutePath()); }",15853c450ef523fcf8a3e3562adff6bfe6397757,test_emptyFilename(),test_emptyFilename(),4,11,"public void test_emptyFilename() throws java.lang.Exception { java.io.File f = new java.io.File(""""); assertFalse(f.canExecute()); assertFalse(f.canRead()); assertFalse(f.canWrite()); try { f.createNewFile(); fail(""expected IOException""); } catch (java.io.IOException expected) { } assertFalse(f.delete()); f.deleteOnExit(); assertFalse(f.exists()); assertEquals("""", f.getName()); assertEquals(null, f.getParent()); assertEquals(null, f.getParentFile()); assertEquals("""", f.getPath()); assertFalse(f.isAbsolute()); assertFalse(f.isDirectory()); assertFalse(f.isFile()); assertFalse(f.isHidden()); assertEquals(0, f.lastModified()); assertEquals(0, f.length()); assertEquals(null, f.list()); assertEquals(null, f.list(null)); assertEquals(null, f.listFiles()); assertEquals(null, f.listFiles(((java.io.FileFilter) (null)))); assertEquals(null, f.listFiles(((java.io.FilenameFilter) (null)))); assertFalse(f.mkdir()); assertFalse(f.mkdirs()); assertFalse(f.renameTo(f)); assertFalse(f.setLastModified(123)); assertFalse(f.setExecutable(true)); assertFalse(f.setReadOnly()); assertFalse(f.setReadable(true)); assertFalse(f.setWritable(true)); java.lang.String cwd = java.lang.System.getProperty(""user.dir""); assertEquals(new java.io.File(cwd), f.getAbsoluteFile()); assertEquals(cwd, f.getAbsolutePath()); }",8b305853adf7c5df350718be18d27b501517feb8,test_emptyFilename(),353290,342,336
307447,hostsidetests_devicepolicy_src_com_android_cts_devicepolicy_DeviceOwnerTest.java,21.0,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { installAppAsUser(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_APK, mPrimaryUserId); if (!(setDeviceOwner((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + ""/"") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId, false))) { removeAdmin((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + ""/"") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId); fail(""Failed to set device owner""); } } mHasEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (hasUserSplit()); mHasDisabledEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (!(hasUserSplit())); mHasCreateAndManageUserFeature = (mHasFeature) && (canCreateAdditionalUsers(1)); }",612d0cfc436f7fa09aef61a5206f31703f074c80,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { try { installAppAsUser(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_APK, mPrimaryUserId); if (!(setDeviceOwner((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + ""/"") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId, false))) { removeAdmin((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + ""/"") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId); fail(""Failed to set device owner""); } } catch (java.lang.Throwable throwable) { getDevice().uninstallPackage(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG); throw throwable; } } mHasEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (hasUserSplit()); mHasDisabledEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (!(hasUserSplit())); mHasCreateAndManageUserFeature = (mHasFeature) && (canCreateAdditionalUsers(1)); }",cef52cada6d1cd02d1f733d563b3d48d80ac849c,setUp(),setUp(),2,21,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { installAppAsUser(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_APK, mPrimaryUserId); if (!(setDeviceOwner((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + ""/"") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId, false))) { removeAdmin((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + ""/"") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId); getDevice().uninstallPackage(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG); fail(""Failed to set device owner""); } } mHasEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (hasUserSplit()); mHasDisabledEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (!(hasUserSplit())); mHasCreateAndManageUserFeature = (mHasFeature) && (canCreateAdditionalUsers(1)); }",c419d3094b4023a61dfc7490348e16af410edad0,setUp(),217655,309,292
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,88.0,"@org.junit.Test public void int_to_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(INT_TO_CHAR).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",1f5e1e9fb26435b11d4090ef9246b1e3a4ff7a1e,"@org.junit.Test public void int_to_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(INT_TO_CHAR).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",d586b5919eadaaa43034bce687f154a4e901a021,int_to_char(),int_to_char(),4,88,"@org.junit.Test public void int_to_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(INT_TO_CHAR).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",769fb5f74807d7caa612981e5fd59c22e78ca88d,int_to_char(),418881,113,111
23171,core_tests_coretests_src_android_content_pm_PackageManagerTests.java,84.0,@android.test.suitebuilder.annotation.LargeTest public void testReplaceSdcard() { sampleReplaceFromRawResource(((PackageManager.INSTALL_REPLACE_EXISTING) | (PackageManager.INSTALL_EXTERNAL))); },92caf6f8e0a528d7d28b2289588f161eb8d111b0,@android.test.suitebuilder.annotation.LargeTest public void testReplaceSdcard() { sampleReplaceFromRawResource(((android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING) | (android.content.pm.PackageManager.INSTALL_EXTERNAL))); },1a7b98644afd0f86aa6b16677ee2d238981c68ef,testReplaceSdcard(),testReplaceSdcard(),3,83,@android.test.suitebuilder.annotation.LargeTest public void testReplaceSdcard() { if (android.os.Environment.isExternalStorageEmulated()) { return; } sampleReplaceFromRawResource(((android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING) | (android.content.pm.PackageManager.INSTALL_EXTERNAL))); },31cb4c74ce50dc8d3dc0710019e9ee54355469f6,testReplaceSdcard(),232192,56,73
89225,libart_src_main_java_java_lang_reflect_Field.java,51.0,"public native void setFloat(java.lang.Object object, float value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;",f5bc2a1338e116a656a2b970178f6e6c1215ff6c,"public void setFloat(java.lang.Object object, float value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException { checkSetFinal(); checkAccess(object, getDeclaringClass(), getModifiers()); setFloatNative(object, value); }",e1faffac6edd9485bceb271f7301641e1923054e,"setFloat(java.lang.Object,float)","setFloat(java.lang.Object,float)",2,49,"public void setFloat(java.lang.Object object, float value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException { setFloat(object, value, isAccessible()); }",79cf42c4cffea2949086a49c236e34b7e3264e06,"setFloat(java.lang.Object,float)",134518,54,41
479697,dx_src_com_android_dx_dex_file_DexFile.java,13.0,"public void writeTo(java.io.OutputStream out, java.io.Writer humanOut, boolean verbose) throws java.io.IOException { boolean annotate = humanOut != null; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0(annotate, verbose); if (out != null) { out.write(result.getArray()); } if (annotate) { result.writeAnnotationsTo(humanOut); } }",138fb9eeac604f587541ead26ea55b7600371dad,"public void writeTo(java.io.OutputStream out, java.io.Writer humanOut, boolean verbose) throws java.io.IOException { boolean annotate = humanOut != null; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0(annotate, verbose, null); if (out != null) { out.write(result.getArray()); } if (annotate) { result.writeAnnotationsTo(humanOut); } }",b4414533806b225ab72def79cbde12a0d402d9e6,"writeTo(java.io.OutputStream,java.io.Writer,boolean)","writeTo(java.io.OutputStream,java.io.Writer,boolean)",7,12,"public void writeTo(java.io.OutputStream out, java.io.Writer humanOut, boolean verbose) throws java.io.IOException { writeTo(out, null, humanOut, verbose); }",8cf4c654cb0f5ed88e7816d3ff227768fafc6cd0,"writeTo(java.io.OutputStream,java.io.Writer,boolean)",159004,93,43
55540,sdk-common_src_main_java_com_android_ide_common_res2_MergedAssetWriter.java,2.0,"@java.lang.Override public void removeItem(com.android.ide.common.res2.AssetItem removedItem, com.android.ide.common.res2.AssetItem replacedBy) throws com.android.ide.common.res2.ConsumerException { if (replacedBy == null) { java.io.File removedFile = new java.io.File(getRootFolder(), removedItem.getName()); removedFile.delete(); } }",ed7e9f0559727b68dc262af1b38c3f540bbc1ed7,"@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.AssetItem removedItem, com.android.ide.common.res2.AssetItem replacedBy) throws com.android.ide.common.res2.ConsumerException { if (replacedBy == null) { java.io.File removedFile = new java.io.File(getRootFolder(), removedItem.getName()); removedFile.delete(); } }",bcbb51f0371374544491ab6b97bb5589f0fab35d,"removeItem(com.android.ide.common.res2.AssetItem,com.android.ide.common.res2.AssetItem)","removeItem(com.android.ide.common.res2.AssetItem,com.android.ide.common.res2.AssetItem)",8,2,"@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.AssetItem removedItem, @com.android.annotations.Nullable com.android.ide.common.res2.AssetItem replacedBy) throws com.android.ide.common.res2.ConsumerException { if (replacedBy == null) { java.io.File removedFile = new java.io.File(getRootFolder(), removedItem.getName()); removedFile.delete(); } }",3e60496fb03f1bfc5a1d2cbdfc1cdec6b3e420e0,"removeItem(com.android.ide.common.res2.AssetItem,com.android.ide.common.res2.AssetItem)",454414,101,109
42178,tests_tests_permission_src_android_permission_cts_FileSystemPermissionTest.java,28.0,"@android.test.suitebuilder.annotation.MediumTest public void testPn544Sane() throws java.lang.Exception { java.io.File f = new java.io.File(""/dev/pn544""); assertFalse(f.canRead()); assertFalse(f.canWrite()); assertFalse(f.canExecute()); android.permission.cts.FileUtils.FileStatus status = new android.permission.cts.FileUtils.FileStatus(); if ((f.exists()) && (android.permission.cts.FileUtils.getFileStatus(f.getAbsolutePath(), status, true))) { assertEquals(""nfc"", android.permission.cts.FileUtils.getUserName(status.uid)); assertEquals(""nfc"", android.permission.cts.FileUtils.getGroupName(status.gid)); } }",7622b1289eacb0820303d8d4fdbb5a38815817e2,"@android.test.suitebuilder.annotation.MediumTest public void testPn544Sane() throws java.lang.Exception { java.io.File f = new java.io.File(""/dev/pn544""); assertFalse(f.canRead()); assertFalse(f.canWrite()); assertFalse(f.canExecute()); if (f.exists()) { assertTrue(android.permission.cts.FileSystemPermissionTest.isFileOwner(f, ""nfc"")); assertTrue(android.permission.cts.FileSystemPermissionTest.isFileGroup(f, ""nfc"")); } }",a9e376f397b3ea5390d41f16c4f1ef9f3475eb1b,testPn544Sane(),testPn544Sane(),3,27,"@android.test.suitebuilder.annotation.MediumTest public void testPn544Sane() throws java.lang.Exception { java.io.File f = new java.io.File(""/dev/pn544""); assertFalse(f.canRead()); assertFalse(f.canWrite()); assertFalse(f.canExecute()); android.permission.cts.FileSystemPermissionTest.assertFileOwnedBy(f, ""nfc""); android.permission.cts.FileSystemPermissionTest.assertFileOwnedByGroup(f, ""nfc""); }",35d340c47e672fc083499163bc7bf71bb6263958,testPn544Sane(),471942,123,116
147245,luni_src_main_java_libcore_icu_DateTimeFormat.java,,,,"public static java.lang.String format(com.ibm.icu.util.ULocale icuLocale, com.ibm.icu.util.Calendar time, int flags, boolean capitalize) { java.lang.String skeleton = libcore.icu.FormatUtils.toSkeleton(time, flags); java.lang.String key = (((skeleton + ""\t"") + icuLocale) + ""\t"") + (time.getTimeZone()); com.ibm.icu.text.DisplayContext displayContext = libcore.icu.FormatUtils.getDisplayContext(capitalize); synchronized(libcore.icu.DateTimeFormat.CACHED_FORMATTERS) { com.ibm.icu.text.DateFormat formatter = libcore.icu.DateTimeFormat.CACHED_FORMATTERS.get(key); if (formatter == null) { com.ibm.icu.text.DateTimePatternGenerator generator = com.ibm.icu.text.DateTimePatternGenerator.getInstance(icuLocale); formatter = new com.ibm.icu.text.SimpleDateFormat(generator.getBestPattern(skeleton), icuLocale); libcore.icu.DateTimeFormat.CACHED_FORMATTERS.put(key, formatter); } formatter.setContext(displayContext); return formatter.format(time); } }",87226600f2a3889c1eb2159e2e0694914c4f7846,,"format(com.ibm.icu.util.ULocale,com.ibm.icu.util.Calendar,int,boolean)",3,0,"public static java.lang.String format(com.ibm.icu.util.ULocale icuLocale, com.ibm.icu.util.Calendar time, int flags, com.ibm.icu.text.DisplayContext displayContext) { java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(time, flags); java.lang.String key = (((skeleton + ""\t"") + icuLocale) + ""\t"") + (time.getTimeZone()); synchronized(libcore.icu.DateTimeFormat.CACHED_FORMATTERS) { com.ibm.icu.text.DateFormat formatter = libcore.icu.DateTimeFormat.CACHED_FORMATTERS.get(key); if (formatter == null) { com.ibm.icu.text.DateTimePatternGenerator generator = com.ibm.icu.text.DateTimePatternGenerator.getInstance(icuLocale); formatter = new com.ibm.icu.text.SimpleDateFormat(generator.getBestPattern(skeleton), icuLocale); libcore.icu.DateTimeFormat.CACHED_FORMATTERS.put(key, formatter); } formatter.setContext(displayContext); return formatter.format(time); } }",be4098123bb8caca5acab2ec66fd8b3c0bcf3a9f,"format(com.ibm.icu.util.ULocale,com.ibm.icu.util.Calendar,int,com.ibm.icu.text.DisplayContext)",163693,266,250
18735,tools_vm-tests_src_dot_junit_opcodes_iget_byte_Test_iget_byte.java,14.0,"public void testVFE7() { try { java.lang.Class.forName(""dot.junit.opcodes.iget_byte.d.T_iget_byte_12""); fail(""expected a verification exception""); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }",f5895b6146c49681bcee5e086470e55de0c4576d,"public void testVFE7() { try { dot.junit.opcodes.iget_byte.d.T_iget_byte_12 t = new dot.junit.opcodes.iget_byte.d.T_iget_byte_12(); t.run(); fail(""expected an IllegalAccessError exception""); } catch (java.lang.IllegalAccessError e) { } }",5f189cca0ee32764fcad32cee054fea54870546f,testVFE7(),testVFE7(),2,14,"public void testVFE7() { try { new dot.junit.opcodes.iget_byte.d.T_iget_byte_12().run(); fail(""expected an IllegalAccessError exception""); } catch (java.lang.IllegalAccessError e) { } }",35b253bf00ba96b954c7380fc9c58eb8079584ef,testVFE7(),456462,88,59
347050,service_java_com_android_server_wifi_scanner_WificondWifiScannerImpl.java,0.0,"@java.lang.Override public boolean setHwPnoList(com.android.server.wifi.WifiNative.PnoSettings settings, com.android.server.wifi.WifiNative.PnoEventHandler eventHandler) { synchronized(mSettingsLock) { if ((mPnoSettings) != null) { android.util.Log.w(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, ""Already running a PNO scan""); return false; } mPnoEventHandler = eventHandler; mPnoSettings = settings; processPendingScans(); return true; } }",3b9b4e4148020a1eed5b5d49ff9525e047c39e5a,"@java.lang.Override public boolean setHwPnoList(com.android.server.wifi.WifiNative.PnoSettings settings, com.android.server.wifi.WifiNative.PnoEventHandler eventHandler) { synchronized(mSettingsLock) { if ((mPnoSettings) != null) { android.util.Log.w(com.android.server.wifi.scanner.WificondWifiScannerImpl.TAG, ""Already running a PNO scan""); return false; } mPnoEventHandler = eventHandler; mPnoSettings = settings; processPendingScans(); return true; } }",982fe442daf5d764dc6dd2d19a7ba2e37f07c946,"setHwPnoList(com.android.server.wifi.WifiNative$PnoSettings,com.android.server.wifi.WifiNative$PnoEventHandler)","setHwPnoList(com.android.server.wifi.WifiNative$PnoSettings,com.android.server.wifi.WifiNative$PnoEventHandler)",12,0,"@java.lang.Override public boolean setHwPnoList(com.android.server.wifi.WifiNative.PnoSettings settings, com.android.server.wifi.WifiNative.PnoEventHandler eventHandler) { synchronized(mSettingsLock) { if ((mPnoSettings) != null) { android.util.Log.w(com.android.server.wifi.scanner.WificondScannerImpl.TAG, ""Already running a PNO scan""); return false; } mPnoEventHandler = eventHandler; mPnoSettings = settings; processPendingScans(); return true; } }",ff4f6612a132685f7d81300a7dcbb02b6339a9c4,"setHwPnoList(com.android.server.wifi.WifiNative$PnoSettings,com.android.server.wifi.WifiNative$PnoEventHandler)",82495,131,130
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,62.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm128Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",bc7e014c6546a0c0375f2d3c8c8593e85411d18f,,testAesGcm128Tcp4UdpEncap(),9,69,"public void testAesGcm128Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",536c532df5719ab5b079a3b4380564b1353b6aa9,testAesGcm128Tcp4UdpEncap(),1864,167,168
101172,perflib_src_test_java_com_android_tools_perflib_heap_analysis_VisitorsTest.java,,,,"public void testBasicDiamond() { com.android.tools.perflib.heap.Heap heap = new com.android.tools.perflib.heap.analysis.SyntheticHeap(4).addEdge(1, 2).addEdge(1, 3).addEdge(2, 4).addEdge(3, 4).addRoot(1).getHeap(); assertEquals(10, heap.getInstance(1).getCompositeSize()); assertEquals(6, heap.getInstance(2).getCompositeSize()); assertEquals(7, heap.getInstance(3).getCompositeSize()); assertEquals(4, heap.getInstance(4).getCompositeSize()); }",574e1ae116e62135727f97daac22567ec18bbf73,,testBasicDiamond(),5,3,"public void testBasicDiamond() { com.android.tools.perflib.heap.Heap heap = new com.android.tools.perflib.heap.analysis.HeapBuilder(4).addReference(1, 2).addReference(1, 3).addReference(2, 4).addReference(3, 4).addRoot(1).getHeap(); assertEquals(10, heap.getInstance(1).getCompositeSize()); assertEquals(6, heap.getInstance(2).getCompositeSize()); assertEquals(7, heap.getInstance(3).getCompositeSize()); assertEquals(4, heap.getInstance(4).getCompositeSize()); }",20d07f5953df271f37b12040f118eec62a5c7aa1,testBasicDiamond(),504671,105,109
583630,src_com_android_bips_LocalDiscoverySession.java,14.0,"private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = new com.android.bips.LocalDiscoverySession.ExpirePrinters(); mPrintService.getMainHandler().postDelayed(mExpirePrinters, com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS); } }",7a51c6969af8c48ca7f08a5a608ce12b4e1b7af1,"private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = mPrintService.delay(com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS, () -> { mExpirePrinters = null; boolean allFound = true; List<android.print.PrinterId> idsToRemove = new com.android.bips.ArrayList<>(); for (com.android.bips.LocalPrinter localPrinter : mPrinters.values()) { if (localPrinter.isExpired()) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""Expiring "" + localPrinter)); idsToRemove.add(localPrinter.getPrinterId()); } if (!(localPrinter.isFound())) allFound = false; } idsToRemove.forEach(mPrinters::remove); removePrinters(idsToRemove); if (!allFound) { monitorExpiredPrinters(); } }); } }",3718530b62e390280b88597cf7143afce6636165,monitorExpiredPrinters(),monitorExpiredPrinters(),4,14,"private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = mPrintService.delay(com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS, () -> { mExpirePrinters = null; boolean allFound = true; List<android.print.PrinterId> idsToRemove = new com.android.bips.ArrayList<>(); for (com.android.bips.LocalPrinter localPrinter : mPrinters.values()) { if (localPrinter.isExpired()) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, (""Expiring "" + localPrinter)); idsToRemove.add(localPrinter.getPrinterId()); } if (!(localPrinter.isFound())) { allFound = false; } } for (android.print.PrinterId id : idsToRemove) { mPrinters.remove(id); } removePrinters(idsToRemove); if (!allFound) { monitorExpiredPrinters(); } }); } }",d070e7bd2a8e15f2cf3514275896a80f6313536e,monitorExpiredPrinters(),33159,231,246
285003,tools_ahat_src_ObjectHandler.java,2.0,"private static void printClassInstanceFields(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.AhatSnapshot snapshot, com.android.tools.perflib.heap.ClassInstance inst) { doc.section(""Fields""); doc.table(new com.android.ahat.Column(""Type""), new com.android.ahat.Column(""Name""), new com.android.ahat.Column(""Value"")); com.android.ahat.SubsetSelector<com.android.tools.perflib.heap.ClassInstance.FieldValue> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.INSTANCE_FIELDS_ID, inst.getValues()); for (com.android.tools.perflib.heap.ClassInstance.FieldValue field : selector.selected()) { doc.row(com.android.ahat.DocString.text(field.getField().getType().toString()), com.android.ahat.DocString.text(field.getField().getName()), com.android.ahat.Value.render(snapshot, field.getValue())); } doc.end(); selector.render(doc); }",0415d9ac97d441e372318d032cb9b9abe19b409b,"private static void printClassInstanceFields(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.heapdump.AhatSnapshot snapshot, com.android.ahat.heapdump.AhatClassInstance inst) { doc.section(""Fields""); doc.table(new com.android.ahat.Column(""Type""), new com.android.ahat.Column(""Name""), new com.android.ahat.Column(""Value"")); com.android.ahat.SubsetSelector<com.android.ahat.heapdump.FieldValue> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.INSTANCE_FIELDS_ID, inst.getValues()); for (com.android.ahat.heapdump.FieldValue field : selector.selected()) { doc.row(com.android.ahat.DocString.text(field.getType()), com.android.ahat.DocString.text(field.getName()), com.android.ahat.Summarizer.summarize(field.getValue())); } doc.end(); selector.render(doc); }",407fc316a0fcb3a279b53f575bee28e5ea71af33,"printClassInstanceFields(com.android.ahat.Doc,com.android.ahat.Query,com.android.ahat.AhatSnapshot,com.android.tools.perflib.heap.ClassInstance)","printClassInstanceFields(com.android.ahat.Doc,com.android.ahat.Query,com.android.ahat.heapdump.AhatSnapshot,com.android.ahat.heapdump.AhatClassInstance)",7,4,"private static void printClassInstanceFields(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.heapdump.AhatClassInstance inst) { doc.section(""Fields""); doc.table(new com.android.ahat.Column(""Type""), new com.android.ahat.Column(""Name""), new com.android.ahat.Column(""Value"")); com.android.ahat.SubsetSelector<com.android.ahat.heapdump.FieldValue> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.INSTANCE_FIELDS_ID, inst.getInstanceFields()); for (com.android.ahat.heapdump.FieldValue field : selector.selected()) { doc.row(com.android.ahat.DocString.text(field.getType()), com.android.ahat.DocString.text(field.getName()), com.android.ahat.Summarizer.summarize(field.getValue())); } doc.end(); selector.render(doc); }",16ee3b8d49e7cc7643d7c2c62629f2e98404a76f,"printClassInstanceFields(com.android.ahat.Doc,com.android.ahat.Query,com.android.ahat.heapdump.AhatClassInstance)",183625,252,238
548206,src_com_android_bluetooth_hfp_HeadsetService.java,11.0,"boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: audio is not idle, current state "" + (mStateMachine.getAudioState()))); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, mStateMachine.getCurrentDevice()); return true; }",b04ce112bd0b09e9189495b63c6c2046c5889fb9,"boolean connectAudio() { synchronized(mStateMachines) { final android.bluetooth.BluetoothDevice device = getLastConnectedDevice(); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: no device is connected""); return false; } return connectAudio(device); } }",e4d7adf0396d50d1bebd1c081ca74afa5e9ea5c6,connectAudio(),connectAudio(),34,14,"boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = mActiveDevice; if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: no active device is selected""); return false; } return connectAudio(device); } }",ef284d9d76e1f60b1233a3b87d7eb7ca7424c058,connectAudio(),210672,76,110
278609,telecomm_java_android_telecom_Log.java,32.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static void setIsExtendedLoggingEnabled(boolean isExtendedLoggingEnabled) { if ((android.telecom.Log.mIsUserExtendedLoggingEnabled) == isExtendedLoggingEnabled) { return; } if ((android.telecom.Log.sEvents) != null) { android.telecom.Log.sEvents.changeEventCacheSize((isExtendedLoggingEnabled ? android.telecom.Log.EVENTS_TO_CACHE_DEBUG : android.telecom.Log.EVENTS_TO_CACHE)); } android.telecom.Log.mIsUserExtendedLoggingEnabled = isExtendedLoggingEnabled; if (android.telecom.Log.mIsUserExtendedLoggingEnabled) { android.telecom.Log.mUserExtendedLoggingStopTime = (java.lang.System.currentTimeMillis()) + (android.telecom.Log.EXTENDED_LOGGING_DURATION_MILLIS); } else { android.telecom.Log.mUserExtendedLoggingStopTime = 0; } },14eedcd13b458c0ac53ac015c81b70ea8c43e025,,setIsExtendedLoggingEnabled(boolean),3,30,public static void setIsExtendedLoggingEnabled(boolean isExtendedLoggingEnabled) { if ((android.telecom.Log.sIsUserExtendedLoggingEnabled) == isExtendedLoggingEnabled) { return; } if ((android.telecom.Log.sEventManager) != null) { android.telecom.Log.sEventManager.changeEventCacheSize((isExtendedLoggingEnabled ? android.telecom.Log.EVENTS_TO_CACHE_DEBUG : android.telecom.Log.EVENTS_TO_CACHE)); } android.telecom.Log.sIsUserExtendedLoggingEnabled = isExtendedLoggingEnabled; if (android.telecom.Log.sIsUserExtendedLoggingEnabled) { android.telecom.Log.sUserExtendedLoggingStopTime = (java.lang.System.currentTimeMillis()) + (android.telecom.Log.EXTENDED_LOGGING_DURATION_MILLIS); } else { android.telecom.Log.sUserExtendedLoggingStopTime = 0; } },c06976c84cf7075cdc3347d6f490e9b4cc99a9ca,setIsExtendedLoggingEnabled(boolean),122352,217,219
269312,service_java_com_android_server_wifi_ExternalScoreEvaluator.java,,,,"void trackSavedCandidate(@android.annotation.Nullable java.lang.Integer score, android.net.wifi.WifiConfiguration config, android.net.wifi.ScanResult scanResult) { if ((score != null) && ((score > (mHighScore)) || (((mBestCandidateType) == (com.android.server.wifi.ExternalScoreEvaluator.ExternalScoreTracker.BestCandidateType.UNTRUSTED_NETWORK)) && (score == (mHighScore))))) { mHighScore = score; mSavedConfig = config; mScanResultCandidate = scanResult; mBestCandidateType = com.android.server.wifi.ExternalScoreEvaluator.ExternalScoreTracker.BestCandidateType.SAVED_NETWORK; localLog(((com.android.server.wifi.WifiNetworkSelector.toScanId(scanResult)) + "" becomes the new externally scored saved network candidate."")); } }",cbf67d6031e420b4280c21826a706bd72fcc91a6,,"trackSavedCandidate(java.lang.Integer,android.net.wifi.WifiConfiguration,android.net.wifi.ScanResult)",13,15,"void trackSavedCandidate(@android.annotation.Nullable java.lang.Integer score, android.net.wifi.WifiConfiguration config, android.net.wifi.ScanResult scanResult) { if ((score != null) && ((score > (mHighScore)) || (((mBestCandidateType) == (com.android.server.wifi.ExternalScoreEvaluator.ExternalScoreTracker.EXTERNAL_SCORED_UNTRUSTED_NETWORK)) && (score == (mHighScore))))) { mHighScore = score; mSavedConfig = config; mScanResultCandidate = scanResult; mBestCandidateType = com.android.server.wifi.ExternalScoreEvaluator.ExternalScoreTracker.EXTERNAL_SCORED_SAVED_NETWORK; localLog(((com.android.server.wifi.WifiNetworkSelector.toScanId(scanResult)) + "" becomes the new externally scored saved network candidate."")); } }",0db71edca596cac42a0b78a34fdb401350a78c47,"trackSavedCandidate(java.lang.Integer,android.net.wifi.WifiConfiguration,android.net.wifi.ScanResult)",347418,187,189
513800,src_test_java_com_android_apksig_internal_util_VerityTreeBuilderTest.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void generateVerityTreeRootHashFromDummyDataSource() throws java.lang.Exception { byte[] sampleEoCDFromDisk = new byte[]{ 80, 75, 5, 6, 0, 0, 0, 0, 6, 0, 6, 0, 121, 1, 0, 0, 48, 22, 0, 0, 0, 0 }; com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(null); byte[] rootHash = builder.generateVerityTreeRootHash(com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.allocate(4096)), makeStringDataSource(""this is central directory (fake data)""), com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.wrap(sampleEoCDFromDisk))); junit.framework.TestCase.assertEquals(""db4176e0d6c3660a7072d9f7ae0053ba16a4a29df348627c79e1d786cf6c2931"", com.android.apksig.internal.util.HexEncoding.encode(rootHash)); }",736c41df4add605927203f8dcd693fbe7f969b38,,generateVerityTreeRootHashFromDummyDataSource(),5,0,"@org.junit.Test public void generateVerityTreeRootHashFromDummyDataSource() throws java.lang.Exception { byte[] sampleEoCDFromDisk = new byte[]{ 80, 75, 5, 6, 0, 0, 0, 0, 6, 0, 6, 0, 121, 1, 0, 0, 48, 22, 0, 0, 0, 0 }; com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(null); byte[] rootHash = builder.generateVerityTreeRootHash(com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.allocate(4096)), makeStringDataSource(""this is central directory (fake data)""), com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.wrap(sampleEoCDFromDisk))); junit.framework.TestCase.assertEquals(""7ddb07e6a24ed786ec6edd19cb4f823fb1d657a81ba531e93fe70fdf5b9988ba"", com.android.apksig.internal.util.HexEncoding.encode(rootHash)); }",bc69bb27309acd118ecd200e0d8f64657b9e1304,generateVerityTreeRootHashFromDummyDataSource(),377644,258,256
21247,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_ui_ResourceChooser.java,2.0,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mProjectButton.getSelection()) { setListElements(mSystemResources.getResources(mResourceType)); } },abf98793c0a2e7fe51fe448af6e56fcc2edbbdef,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mSystemButton.getSelection()) { setListElements(mSystemResources.getResources(mResourceType)); mNewButton.setEnabled(false); } },b0fc5f306c848129a01bf8291917776d326568d0,widgetSelected(org.eclipse.swt.events.SelectionEvent),widgetSelected(org.eclipse.swt.events.SelectionEvent),3,2,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mSystemButton.getSelection()) { setupResourceList(); mNewButton.setEnabled(false); } },37deb4816845b458c28db9c381c85a12095fad62,widgetSelected(org.eclipse.swt.events.SelectionEvent),177806,62,53
10161,src_com_android_music_StreamStarter.java,4.0,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { try { MusicUtils.sService.play(); intent = new android.content.Intent(""com.android.music.PLAYBACK_VIEWER""); intent.putExtra(""oneshot"", true); startActivity(intent); } catch (android.os.RemoteException ex) { } finish(); }",f59a413f204065e22c7d1b41f22bd3115be3976f,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { java.lang.String action = intent.getAction(); if (action.equals(MediaPlaybackService.PLAYBACK_COMPLETE)) { android.widget.Toast mt = android.widget.Toast.makeText(this, ""Failed to play the requested stream.."", 2000); mt.show(); finish(); return; } try { MusicUtils.sService.play(); intent = new android.content.Intent(""com.android.music.PLAYBACK_VIEWER""); intent.putExtra(""oneshot"", true); startActivity(intent); } catch (android.os.RemoteException ex) { } finish(); }",c1a3c085602fda881b840546db73706237aede77,"onReceive(android.content.Context,android.content.Intent)","onReceive(android.content.Context,android.content.Intent)",5,4,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { java.lang.String action = intent.getAction(); if (action.equals(MediaPlaybackService.PLAYBACK_COMPLETE)) { java.lang.String msg = getString(R.string.fail_to_start_stream); android.widget.Toast mt = android.widget.Toast.makeText(this, msg, Toast.LENGTH_SHORT); mt.show(); finish(); return; } try { MusicUtils.sService.play(); intent = new android.content.Intent(""com.android.music.PLAYBACK_VIEWER""); intent.putExtra(""oneshot"", true); startActivity(intent); } catch (android.os.RemoteException ex) { } finish(); }",95f39e69458a68673908fab10bc292ee9f494c80,"onReceive(android.content.Context,android.content.Intent)",78615,152,170
346308,tests_wifitests_src_com_android_server_wifi_WifiConfigManagerTest.java,11.0,"@org.junit.Test public void testUpdateLastConnectUid() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public int answer(java.lang.String permName, int uid) throws java.lang.Exception { if (uid == (com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)) { return android.content.pm.PackageManager.PERMISSION_GRANTED; } return android.content.pm.PackageManager.PERMISSION_DENIED; } }).when(mFrameworkFacade).checkUidPermission(anyString(), anyInt()); assertFalse(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); }",152f15b426c5bb6ce9263b5c6e72b4fdbe95856c,"@org.junit.Test public void testUpdateLastConnectUid() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public int answer(java.lang.String permName, int uid) throws java.lang.Exception { if (uid == (com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)) { return android.content.pm.PackageManager.PERMISSION_GRANTED; } return android.content.pm.PackageManager.PERMISSION_DENIED; } }).when(mFrameworkFacade).checkUidPermission(anyString(), anyInt()); when(mWifiPermissionsUtil.checkConfigOverridePermission(anyInt())).thenReturn(false); assertFalse(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); }",9a40f0a23b76dc4549419b9bb4de25751823303f,testUpdateLastConnectUid(),testUpdateLastConnectUid(),5,11,"@org.junit.Test public void testUpdateLastConnectUid() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); when(mWifiPermissionsUtil.checkConfigOverridePermission(anyInt())).thenReturn(false); assertFalse(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); }",0bf21a67d1e80d1fe93be7e0f66ec87057a80acc,testUpdateLastConnectUid(),489464,380,269
229489,jack_src_com_android_jack_plugin_StableOnly.java,0.0,"@java.lang.Override public boolean accept(@javax.annotation.Nonnull com.android.jack.plugin.Plugin plugin) { try { boolean accepted = plugin.getVersion().getSubReleaseKind().isMoreStableThan(SubReleaseKind.CANDIDATE); if (accepted) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', accepted version {1} because stable"", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); } else { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', rejected version {1} because not stable"", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); } return accepted; } catch (com.android.sched.util.UncomparableSubReleaseKind e) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', rejected version {1} because not stable"", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); return false; } }",a74ec4ec16d00b748d7af061e821b79da9cfed85,"@java.lang.Override public boolean accept(@javax.annotation.Nonnull com.android.jack.plugin.v01.Plugin plugin) { try { boolean accepted = plugin.getVersion().getSubReleaseKind().isMoreStableThan(SubReleaseKind.CANDIDATE); if (accepted) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', accepted version {1} because stable"", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); } else { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', rejected version {1} because not stable"", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); } return accepted; } catch (com.android.sched.util.UncomparableSubReleaseKind e) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', rejected version {1} because not stable"", new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); return false; } }",acb0a6e8b22aef1ad8f830193b9456ec6fa16f69,accept(com.android.jack.plugin.Plugin),accept(com.android.jack.plugin.v01.Plugin),5,0,"@java.lang.Override public boolean accept(@javax.annotation.Nonnull com.android.jack.plugin.v01.Plugin plugin) { try { boolean accepted = plugin.getVersion().getSubReleaseKind().isMoreStableThan(SubReleaseKind.CANDIDATE); if (accepted) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', accepted version {1} because stable"", new java.lang.Object[]{ plugin.getCanonicalName(), plugin.getVersion().getVersion() }); } else { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', rejected version {1} because not stable"", new java.lang.Object[]{ plugin.getCanonicalName(), plugin.getVersion().getVersion() }); } return accepted; } catch (com.android.sched.util.UncomparableSubReleaseKind e) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, ""For plugin ''{0}'', rejected version {1} because not stable"", new java.lang.Object[]{ plugin.getCanonicalName(), plugin.getVersion().getVersion() }); return false; } }",7e075fcf49a0fdbc9e2b113fcdcf6ccf05edd7cc,accept(com.android.jack.plugin.v01.Plugin),282279,275,275
50361,builder_src_test_java_com_android_builder_internal_incremental_DependencyDataStoreTest.java,,,,"public void testStoreNoOutputData() throws java.io.IOException { com.android.builder.internal.incremental.DependencyData data = new com.android.builder.internal.incremental.DependencyData(); data.setMainFile(""/1/main/file""); data.addSecondaryFile(""/1/secondary/file""); com.android.builder.internal.incremental.DependencyData data2 = new com.android.builder.internal.incremental.DependencyData(); data2.setMainFile(""/2/main/file""); data2.addSecondaryFile(""/2/secondary/file""); data2.addOutputFile(""/2/output/file""); com.android.builder.internal.incremental.DependencyDataStore store = new com.android.builder.internal.incremental.DependencyDataStore(); store.addData(data); store.addData(data2); java.io.File file = java.io.File.createTempFile(""DependencyDataStoreTest"", """"); file.deleteOnExit(); store.saveTo(file); store = new com.android.builder.internal.incremental.DependencyDataStore(); store.loadFrom(file); java.util.List<com.android.builder.internal.incremental.DependencyData> newDataList = store.getData(); assertNotNull(newDataList); assertEquals(2, newDataList.size()); com.android.builder.internal.incremental.DependencyData firstData = newDataList.get(0); assertNotNull(firstData); assertEquals(data.getMainFile(), firstData.getMainFile()); assertEquals(data.getSecondaryFiles(), firstData.getSecondaryFiles()); assertEquals(0, firstData.getOutputFiles().size()); com.android.builder.internal.incremental.DependencyData secondData = newDataList.get(1); assertNotNull(secondData); assertEquals(data2.getMainFile(), secondData.getMainFile()); assertEquals(data2.getSecondaryFiles(), secondData.getSecondaryFiles()); assertEquals(data2.getOutputFiles(), secondData.getOutputFiles()); }",982705604a4222bf11bfc5cf38acc5f6f51d79b7,,testStoreNoOutputData(),3,2,"public void testStoreNoOutputData() throws java.io.IOException { com.android.builder.internal.incremental.DependencyData data = new com.android.builder.internal.incremental.DependencyData(); data.setMainFile(""/1/main/file""); data.addSecondaryFile(""/1/secondary/file""); com.android.builder.internal.incremental.DependencyData data2 = new com.android.builder.internal.incremental.DependencyData(); data2.setMainFile(""/2/main/file""); data2.addSecondaryFile(""/2/secondary/file""); data2.addOutputFile(""/2/output/file""); com.android.builder.internal.incremental.DependencyDataStore store = new com.android.builder.internal.incremental.DependencyDataStore(); store.addData(data); store.addData(data2); java.io.File file = java.io.File.createTempFile(""DependencyDataStoreTest"", """"); file.deleteOnExit(); store.saveTo(file); store = new com.android.builder.internal.incremental.DependencyDataStore(); store.loadFrom(file); java.util.Collection<com.android.builder.internal.incremental.DependencyData> newDataList = store.getData(); assertEquals(2, newDataList.size()); com.android.builder.internal.incremental.DependencyData firstData = store.getByMainFile(""/1/main/file""); assertNotNull(firstData); assertEquals(data.getMainFile(), firstData.getMainFile()); assertEquals(data.getSecondaryFiles(), firstData.getSecondaryFiles()); assertEquals(0, firstData.getOutputFiles().size()); com.android.builder.internal.incremental.DependencyData secondData = store.getByMainFile(""/2/main/file""); assertNotNull(secondData); assertEquals(data2.getMainFile(), secondData.getMainFile()); assertEquals(data2.getSecondaryFiles(), secondData.getSecondaryFiles()); assertEquals(data2.getOutputFiles(), secondData.getOutputFiles()); }",923c9732c614e013319f674fdb026327c66ee689,testStoreNoOutputData(),263302,404,410
258270,jack-tests_tests_com_android_jack_optimizations_valuepropagation_ValuePropagationTests.java,7.0,"@org.junit.Test @java.lang.Runtime public void test106() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test106""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/D;""; java.lang.String init1 = (""<init>("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; java.lang.String init2 = ((""<init>("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; java.lang.String foo = (""foo("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(init1, dalvik(test, ""A.init1.dalvik"")).insert(init2, dalvik(test, ""A.init2.dalvik"")).insert(foo, dalvik(test, ""A.foo.dalvik""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""B.foo.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""D.foo.dalvik"")))); }",4c8bc60328e9bd24c98d29c6f43479fc47f4f914,"@org.junit.Test @java.lang.Runtime public void test106() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test106""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/D;""; java.lang.String init1 = (""<init>("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; java.lang.String init2 = ((""<init>("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; java.lang.String foo = (""foo("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; compileAndValidate(defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(init1, dalvik(test, ""A.init1.dalvik"")).insert(init2, dalvik(test, ""A.init2.dalvik"")).insert(foo, dalvik(test, ""A.foo.dalvik""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""B.foo.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""D.foo.dalvik""))), test); }",f005f92929b4febecd20820be82a97819b66b9ec,test106(),test106(),5,7,"@org.junit.Test @java.lang.Runtime public void test106() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test106""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test106/jack/D;""; java.lang.String init1 = (""<init>("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; java.lang.String init2 = ((""<init>("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; java.lang.String foo = (""foo("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")V""; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(init1, dalvik(test, ""A.init1.dalvik"")).insert(init2, dalvik(test, ""A.init2.dalvik"")).insert(foo, dalvik(test, ""A.foo.dalvik""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""B.foo.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""D.foo.dalvik"")))); }",4c8bc60328e9bd24c98d29c6f43479fc47f4f914,test106(),32053,510,510
564188,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,4.0,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack(""Fullscreen stack should be on top."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack(""Fullscreen stack should be focused."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }",acc3ec43ef3fad65c96d04cf4455588997a116cf,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack(""Fullscreen stack should be on top."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack(""Fullscreen stack should be focused."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }",91fe3916f041c7098d79e946971f85eff1427274,testAssistantStackFinishToPreviousApp(),testAssistantStackFinishToPreviousApp(),9,3,"public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, ""true""); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity(""TestActivity should be resumed"", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack(""Fullscreen stack should be on top."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack(""Fullscreen stack should be focused."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }",699f7273d2354cd4da836b49376e80fb21196630,testAssistantStackFinishToPreviousApp(),33760,302,300
115353,dx_src_com_android_multidex_Path.java,,,,"static com.android.multidex.ClassPathElement getClassPathElement(java.io.File file) throws java.io.IOException, java.util.zip.ZipException { if (file.isDirectory()) { return new com.android.multidex.FolderPathElement(file); } else if (file.isFile()) { return new com.android.multidex.ArchivePathElement(new java.util.zip.ZipFile(file)); } else if (file.exists()) { throw new java.io.IOException(((file.getAbsolutePath()) + "" is not a directory neither a zip file"")); } else { throw new java.io.FileNotFoundException(file.getAbsolutePath()); } }",0f14ca052e23385c560633a0d8ef6726861db18d,,getClassPathElement(java.io.File),3,1,"static com.android.multidex.ClassPathElement getClassPathElement(java.io.File file) throws java.io.IOException, java.util.zip.ZipException { if (file.isDirectory()) { return new com.android.multidex.FolderPathElement(file); } else if (file.isFile()) { return new com.android.multidex.ArchivePathElement(new java.util.zip.ZipFile(file)); } else if (file.exists()) { throw new java.io.IOException(((""\"""" + (file.getPath())) + ""\"" is not a directory neither a zip file"")); } else { throw new java.io.FileNotFoundException(((""File \"""" + (file.getPath())) + ""\"" not found"")); } }",fe5174791a8037578780ca08aa9c9165716435a0,getClassPathElement(java.io.File),52854,139,155
335040,service_java_com_android_server_wifi_SupplicantP2pIfaceHal.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean reject(java.lang.String peerAddress) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; byte[] macAddress = stringToAddress(peerAddress); if (macAddress == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Cannot parse rejected peer's mac address.""); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((""reject("" + peerAddress) + "")"")); try { result.setResult(mISupplicantP2pIface.reject(macAddress)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",c727e4c8673558d5be6f33aa4376cf3a4a180ab3,,reject(java.lang.String),23,47,"public boolean reject(java.lang.String peerAddress) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""reject""))) return false; if (peerAddress == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Cannot parse rejected peer's mac address.""); return false; } byte[] macAddress = null; try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(peerAddress); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Could not parse peer mac address."", e); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((""reject("" + peerAddress) + "")"")); try { result.setResult(mISupplicantP2pIface.reject(macAddress)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",828356df5b7875ce7bc5873560083dfb93e6c29b,reject(java.lang.String),258153,271,348
279041,dx_src_com_android_jack_dx_dex_code_InsnFormat.java,5.0,protected static java.lang.String cstString(com.android.jack.dx.dex.code.DalvInsn insn) { com.android.jack.dx.dex.code.CstInsn ci = ((com.android.jack.dx.dex.code.CstInsn) (insn)); com.android.jack.dx.rop.cst.Constant cst = ci.getConstant(); return cst instanceof com.android.jack.dx.rop.cst.CstString ? ((com.android.jack.dx.rop.cst.CstString) (cst)).toQuoted() : cst.toHuman(); },1eb337905f529e6775142905c2a3baaba6904496,@javax.annotation.Nonnull protected static java.lang.String cstString(@javax.annotation.Nonnull com.android.jack.dx.dex.code.DalvInsn insn) { com.android.jack.dx.dex.code.CstInsn ci = ((com.android.jack.dx.dex.code.CstInsn) (insn)); com.android.jack.dx.rop.cst.Constant cst = ci.getConstant(); return cst instanceof com.android.jack.dx.rop.cst.CstString ? ((com.android.jack.dx.rop.cst.CstString) (cst)).toQuoted() : cst.toHuman(); },107464ebf1bed01f2efcafaf33b23ddd0fb8a397,cstString(com.android.jack.dx.dex.code.DalvInsn),cstString(com.android.jack.dx.dex.code.DalvInsn),5,5,@javax.annotation.Nonnull protected static java.lang.String cstString(@javax.annotation.Nonnull com.android.jack.dx.dex.code.CstInsn ci) { com.android.jack.dx.rop.cst.Constant cst = ci.getConstant(); return cst instanceof com.android.jack.dx.rop.cst.CstString ? ((com.android.jack.dx.rop.cst.CstString) (cst)).toQuoted() : cst.toHuman(); },51b1735c512f9218a6b2f325a1d01a36dabed738,cstString(com.android.jack.dx.dex.code.CstInsn),171542,163,122
604838,tests_net_java_com_android_server_ConnectivityServiceTest.java,87.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onAvailable(android.net.Network network, android.net.NetworkCapabilities networkCapabilities, android.net.LinkProperties linkProperties) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, network, networkCapabilities); super.onAvailable(network, networkCapabilities, linkProperties); }",5a492671710fc4c00aef278486ceb056ab6206d0,,"onAvailable(android.net.Network,android.net.NetworkCapabilities,android.net.LinkProperties)",6,147,"@java.lang.Override public void onNetworkResumed(android.net.Network network) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.RESUMED, network, null); }",5f303098bf39484e1e348a578dcaa4f802accdeb,onNetworkResumed(android.net.Network),147789,77,46
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFastDistance.java,,,,"private void checkFastDistanceFloat4Float4() { android.renderscript.Allocation inLhs = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inLhs, 35, 0.0F, 1.0F); android.renderscript.Allocation inRhs = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inRhs, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInRhs(inRhs); script.forEach_testFastDistanceFloat4Float4(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastDistanceFloat4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInRhs(inRhs); scriptRelaxed.forEach_testFastDistanceFloat4Float4(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastDistanceFloat4Float4: "" + (e.toString()))); } }",6db7737425827f70ea95d02549e29880e58dc698,,checkFastDistanceFloat4Float4(),9,2,"private void checkFastDistanceFloat4Float4Float() { android.renderscript.Allocation inLhs = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 1850968168532624085L); android.renderscript.Allocation inRhs = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 1850968168532624085L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInRhs(inRhs); script.forEach_testFastDistanceFloat4Float4Float(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastDistanceFloat4Float4Float: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInRhs(inRhs); scriptRelaxed.forEach_testFastDistanceFloat4Float4Float(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastDistanceFloat4Float4Float: "" + (e.toString()))); } }",78136286bf64b5cc73c5396712358f4c2b0ee690,checkFastDistanceFloat4Float4Float(),142853,418,357
371353,luni_src_test_java_libcore_java_net_SocketTest.java,34.0,"public void test_setTrafficClass() throws java.lang.Exception { try (java.net.Socket s = new java.net.Socket()) { for (int i = 0; i <= 255; ++i) { s.setTrafficClass(i); assertEquals((i & (~(libcore.java.net.SocketTest.INET_ECN_MASK))), s.getTrafficClass()); } } }",739222fef2eab4b8c5c69b49c5696c1157d76ef3,public void test_setTrafficClass() throws java.lang.Exception { try (java.net.Socket s = new java.net.Socket()) { for (int i = 0; i <= 255; ++i) { s.setTrafficClass(i); int actual = s.getTrafficClass(); assertTrue(((i == actual) || (((i & (~(libcore.java.net.SocketTest.INET_ECN_MASK))) == (actual & (~(libcore.java.net.SocketTest.INET_ECN_MASK)))) && ((actual & (libcore.java.net.SocketTest.INET_ECN_MASK)) == 0)))); } } },1fc4354007977823c91afbbe7de9651a234c39e8,test_setTrafficClass(),test_setTrafficClass(),2,34,public void test_setTrafficClass() throws java.lang.Exception { try (java.net.Socket s = new java.net.Socket()) { for (int i = 0; i <= 255; ++i) { s.setTrafficClass(i); int actual = s.getTrafficClass(); assertTrue(((i == actual) || (actual == (i & (~(libcore.java.net.SocketTest.INET_ECN_MASK)))))); } } },fa6150cb428fcd35d1bc901221dc3a21a31696c4,test_setTrafficClass(),473478,152,104
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,,"@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Exit Disconnected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }",f12f5a666064cf35c389abc3ebe9b17e045fa3ad,,exit(),10,18,"@java.lang.Override public void exit() { log((((""Exit Disconnected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }",cdcc737a2e202b0beef6f9a146657529d72a823e,exit(),152133,126,75
437936,tests_net_java_android_net_ip_IpManagerTest.java,0.0,"@org.junit.Test public void testDefaultProvisioningConfiguration() throws java.lang.Exception { final java.lang.String iface = ""test_wlan0""; final android.net.ip.IpManager ipm = new android.net.ip.IpManager(mContext, iface, mCb, mNMService); android.net.ip.IpManager.ProvisioningConfiguration config = new android.net.ip.IpManager.ProvisioningConfiguration.Builder().withoutIPv4().withoutIpReachabilityMonitor().build(); ipm.startProvisioning(config); verify(mCb, times(1)).setNeighborDiscoveryOffload(true); verify(mCb, timeout(100).times(1)).setFallbackMulticastFilter(false); verify(mCb, never()).onProvisioningFailure(any()); ipm.stop(); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); }",3bb76e40698c1674283ae21c456e65befef4638a,"@org.junit.Test public void testDefaultProvisioningConfiguration() throws java.lang.Exception { final java.lang.String iface = ""test_wlan0""; final android.net.ip.IpManager ipm = new android.net.ip.IpManager(mContext, iface, mCb, mNMService); android.net.ip.IpManager.ProvisioningConfiguration config = new android.net.ip.IpManager.ProvisioningConfiguration.Builder().withoutIPv4().withoutIpReachabilityMonitor().build(); ipm.startProvisioning(config); verify(mCb, times(1)).setNeighborDiscoveryOffload(true); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); verify(mCb, timeout(100).times(1)).setFallbackMulticastFilter(false); verify(mCb, never()).onProvisioningFailure(any()); ipm.stop(); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); }",587a01c5f44d88553a226e0ac926a2447a59c8cc,testDefaultProvisioningConfiguration(),testDefaultProvisioningConfiguration(),2,0,"@org.junit.Test public void testDefaultProvisioningConfiguration() throws java.lang.Exception { final java.lang.String iface = ""test_wlan0""; final android.net.ip.IpManager ipm = makeIpManager(iface); android.net.ip.IpManager.ProvisioningConfiguration config = new android.net.ip.IpManager.ProvisioningConfiguration.Builder().withoutIPv4().withoutIpReachabilityMonitor().build(); ipm.startProvisioning(config); verify(mCb, times(1)).setNeighborDiscoveryOffload(true); verify(mCb, timeout(100).times(1)).setFallbackMulticastFilter(false); verify(mCb, never()).onProvisioningFailure(any()); ipm.stop(); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); }",79456a263aa79abe0ac5140d6541d3147ef6edf7,testDefaultProvisioningConfiguration(),338012,249,196
23171,core_tests_coretests_src_android_content_pm_PackageManagerTests.java,129.0,"@android.test.suitebuilder.annotation.LargeTest public void testFlagFExistingE() { int iFlags = PackageManager.INSTALL_EXTERNAL; int rFlags = (PackageManager.INSTALL_FORWARD_LOCK) | (PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource(""install.apk"", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource(""install.apk"", R.raw.install, rFlags, true, false, (-1), (-1)); }",b48be1bee5f2a9442443bd45f74c20526681d3ff,"@android.test.suitebuilder.annotation.LargeTest public void testFlagFExistingE() { int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; int rFlags = (android.content.pm.PackageManager.INSTALL_FORWARD_LOCK) | (android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource(""install.apk"", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource(""install.apk"", R.raw.install, rFlags, true, false, (-1), (-1)); }",a58f64156fbbe347000fa31c10441ba606132f7d,testFlagFExistingE(),testFlagFExistingE(),3,129,"@android.test.suitebuilder.annotation.LargeTest public void testFlagFExistingE() { if (android.os.Environment.isExternalStorageEmulated()) { return; } int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; int rFlags = (android.content.pm.PackageManager.INSTALL_FORWARD_LOCK) | (android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource(""install.apk"", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource(""install.apk"", R.raw.install, rFlags, true, false, (-1), (-1)); }",8b9f8424fb4f26ad182aebac712d6ef4a4f40eac,testFlagFExistingE(),232284,129,146
81416,tests_tests_renderscript_src_android_renderscript_cts_TestStep.java,,,,"private void checkStepFloatFloat() { android.renderscript.Allocation inEdge = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inEdge, 35, 0.0F, 1.0F); android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloatFloat(inEdge, out); verifyResultsStepFloatFloat(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloatFloat(inEdge, out); verifyResultsStepFloatFloat(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloatFloat: "" + (e.toString()))); } }",bbfacef4d54aba3a151120276db34d20b737b16f,,checkStepFloatFloat(),9,12,"private void checkStepFloatFloatFloat() { android.renderscript.Allocation inEdge = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 452436545215718188L); android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 452436545215718188L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloatFloatFloat(inEdge, out); verifyResultsStepFloatFloatFloat(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloatFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloatFloatFloat(inEdge, out); verifyResultsStepFloatFloatFloat(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloatFloatFloat: "" + (e.toString()))); } }",b6237a0802feb7be9328a3e5b74e7539bf9b33c9,checkStepFloatFloatFloat(),143515,421,368
237600,sched_src_com_android_sched_vfs_DeflateFS.java,32.0,"@java.lang.Override public void copy(@javax.annotation.Nonnull com.android.sched.vfs.VFile srcFile, @javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile dstFile) throws com.android.sched.util.file.CannotCloseInputException, com.android.sched.util.file.CannotCloseOutputException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { if (srcFile instanceof com.android.sched.vfs.DeflateFS.DeflateVFile) { vfs.copy(((com.android.sched.vfs.DeflateFS.DeflateVFile) (srcFile)).getWrappedFile(), dstFile.getWrappedFile()); } else { super.copy(srcFile, dstFile); } }",55e42f52227fdaf53baf22273d38b0792dea2a3f,"@java.lang.Override public void copy(@javax.annotation.Nonnull com.android.sched.vfs.VFile srcFile, @javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile dstFile) throws com.android.sched.util.file.CannotCloseException, com.android.sched.util.file.CannotCloseInputException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { if (srcFile instanceof com.android.sched.vfs.DeflateFS.DeflateVFile) { vfs.copy(((com.android.sched.vfs.DeflateFS.DeflateVFile) (srcFile)).getWrappedFile(), dstFile.getWrappedFile()); } else { super.copy(srcFile, dstFile); } }",1f9e13f6fbc23dc859046f36405fd78835358f00,"copy(com.android.sched.vfs.VFile,com.android.sched.vfs.DeflateFS$DeflateVFile)","copy(com.android.sched.vfs.VFile,com.android.sched.vfs.DeflateFS$DeflateVFile)",4,32,"@java.lang.Override public void copy(@javax.annotation.Nonnull com.android.sched.vfs.VFile srcFile, @javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile dstFile) throws com.android.sched.util.file.CannotCloseException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { if (srcFile instanceof com.android.sched.vfs.DeflateFS.DeflateVFile) { vfs.copy(((com.android.sched.vfs.DeflateFS.DeflateVFile) (srcFile)).getWrappedFile(), dstFile.getWrappedFile()); } else { super.copy(srcFile, dstFile); } }",8d51e485cca3e74c5f1b7d1cb9529c56106301de,"copy(com.android.sched.vfs.VFile,com.android.sched.vfs.DeflateFS$DeflateVFile)",434649,190,175
579565,src_java_com_android_internal_telephony_RIL.java,210.0,"@java.lang.Override public void setDataProfile(android.telephony.data.DataProfile[] dps, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_DATA_PROFILE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" with data profiles : "")); for (android.telephony.data.DataProfile profile : dps) { riljLog(profile.toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.DataProfileInfo> dpis = new java.util.ArrayList<>(); for (android.telephony.data.DataProfile dp : dps) { dpis.add(com.android.internal.telephony.RIL.convertToHalDataProfile(dp)); } try { radioProxy.setDataProfile(rr.mSerial, dpis, isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setDataProfile"", e); } } }",0070fee6bb4228a2c0c2ed146f14ccadce8b00ae,"@java.lang.Override public void setDataProfile(android.telephony.data.DataProfile[] dps, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_DATA_PROFILE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" with data profiles : "")); for (android.telephony.data.DataProfile profile : dps) { riljLog(profile.toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.DataProfileInfo> dpis = new java.util.ArrayList<>(); for (android.telephony.data.DataProfile dp : dps) { dpis.add(com.android.internal.telephony.RIL.convertToHalDataProfile(dp)); } try { radioProxy.setDataProfile(rr.mSerial, dpis, isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setDataProfile"", e); } } }",6b4f853ca6c5e7a49350b4096a8058b18c6b03ad,"setDataProfile(android.telephony.data.DataProfile[],boolean,android.os.Message)","setDataProfile(android.telephony.data.DataProfile[],boolean,android.os.Message)",3,210,"@java.lang.Override public void setDataProfile(android.telephony.data.DataProfile[] dps, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_DATA_PROFILE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" with data profiles : "")); for (android.telephony.data.DataProfile profile : dps) { riljLog(profile.toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.DataProfileInfo> dpis = new java.util.ArrayList<>(); for (android.telephony.data.DataProfile dp : dps) { dpis.add(com.android.internal.telephony.RIL.convertToHalDataProfile(dp)); } try { radioProxy.setDataProfile(rr.mSerial, dpis, isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setDataProfile"", e); } } }",0070fee6bb4228a2c0c2ed146f14ccadce8b00ae,"setDataProfile(android.telephony.data.DataProfile[],boolean,android.os.Message)",89212,346,342
48835,luni_src_test_java_libcore_java_security_cert_X509CertificateTest.java,47.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void generateCertificates_X509_DER(java.security.cert.CertificateFactory f) throws java.lang.Exception { final java.io.InputStream ris = tests.support.resource.Support_Resources.getStream(libcore.java.security.cert.X509CertificateTest.CERTS_X509_DER); java.util.Collection<? extends java.security.cert.Certificate> certs = f.generateCertificates(ris); assertNotNull(certs); assertEquals(2, certs.size()); }",f5c8f807c53dff395e7366aa27b57e07d825281b,,generateCertificates_X509_DER(java.security.cert.CertificateFactory),6,46,"private void generateCertificates_X509_DER(java.security.cert.CertificateFactory f) throws java.lang.Exception { java.util.Collection<? extends java.security.cert.X509Certificate> certs = getCertificates(f, libcore.java.security.cert.X509CertificateTest.CERTS_X509_DER); assertNotNull(certs); assertEquals(2, certs.size()); }",cd154a3b82b88297173bcd41b22133ec2cc8734d,generateCertificates_X509_DER(java.security.cert.CertificateFactory),153638,106,85
241967,sched_src_com_android_sched_marker_LocalMarkerManager.java,8.0,"@java.lang.Override @java.lang.SuppressWarnings(""unchecked"") @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T removeMarker(@javax.annotation.Nonnull java.lang.Class<T> cls) { synchronized(lock) { if ((markers) == null) { return null; } } return ((T) (markers.remove(cls))); }",e48d778d80f7b7e5ce82cb84bd6e9fbee2711e5f,"@java.lang.Override @java.lang.SuppressWarnings(""unchecked"") @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T removeMarker(@javax.annotation.Nonnull java.lang.Class<T> cls) { T result; synchronized(lock) { if ((markers) == null) { return null; } result = ((T) (markers.remove(cls))); if (markers.isEmpty()) { markers = null; } } return result; }",bfd6157519bf674045bf246a5d3c9fca44b70630,removeMarker(java.lang.Class),removeMarker(java.lang.Class),28,8,"@java.lang.Override @java.lang.SuppressWarnings(""unchecked"") @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T removeMarker(@javax.annotation.Nonnull java.lang.Class<T> cls) { synchronized(lock) { if ((markers) == null) { return null; } } return ((T) (markers.remove(cls))); }",e48d778d80f7b7e5ce82cb84bd6e9fbee2711e5f,removeMarker(java.lang.Class),487281,109,89
278601,tests_src_com_android_providers_telephony_TelephonyProviderTest.java,,,,"@java.lang.Override public int checkCallingOrSelfPermission(java.lang.String permission) { if (android.text.TextUtils.equals(permission, ""android.permission.WRITE_APN_SETTINGS"")) { android.util.Log.d(com.android.providers.telephony.TelephonyProviderTest.TAG, (((""checkCallingOrSelfPermission: permission="" + permission) + "", returning "") + (android.content.pm.PackageManager.PERMISSION_GRANTED))); return android.content.pm.PackageManager.PERMISSION_GRANTED; } else { android.util.Log.d(com.android.providers.telephony.TelephonyProviderTest.TAG, (((""checkCallingOrSelfPermission: permission="" + permission) + "", returning "") + (android.content.pm.PackageManager.PERMISSION_DENIED))); return android.content.pm.PackageManager.PERMISSION_DENIED; } }",3a7d6651b103a6e6207e410dcab8f99b72db8177,,checkCallingOrSelfPermission(java.lang.String),6,0,"@java.lang.Override public int checkCallingOrSelfPermission(java.lang.String permission) { if (android.text.TextUtils.equals(permission, ""android.permission.WRITE_APN_SETTINGS"")) { android.util.Log.d(com.android.providers.telephony.TelephonyProviderTest.TAG, ((""checkCallingOrSelfPermission: permission="" + permission) + "", returning PackageManager.PERMISSION_GRANTED"")); return android.content.pm.PackageManager.PERMISSION_GRANTED; } else { android.util.Log.d(com.android.providers.telephony.TelephonyProviderTest.TAG, ((""checkCallingOrSelfPermission: permission="" + permission) + "", returning PackageManager.PERMISSION_DENIED"")); return android.content.pm.PackageManager.PERMISSION_DENIED; } }",d17e61b533c759121ac88b603b5ebbc389ac8c70,checkCallingOrSelfPermission(java.lang.String),273119,193,171
349432,service_java_com_android_server_wifi_WifiNative.java,83.0,"public boolean requestIcon(java.lang.String bssid, java.lang.String fileName) { if (com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE) { return mSupplicantStaIfaceHal.initiateHs20IconQuery(bssid, fileName); } else { java.lang.String result = doStringCommand((((""REQ_HS20_ICON "" + bssid) + "" "") + fileName)); return (result != null) && (result.startsWith(""OK"")); } }",c186b7b07010ae254be7c35b684114e85a5ece07,"public boolean requestIcon(java.lang.String bssid, java.lang.String fileName) { if ((bssid == null) || (fileName == null)) return false; return mSupplicantStaIfaceHal.initiateHs20IconQuery(bssid, fileName); }",4fb74eabd0e30c15cb43e28ce800808b412c9ad3,"requestIcon(java.lang.String,java.lang.String)","requestIcon(java.lang.String,java.lang.String)",17,80,"public boolean requestIcon(java.lang.String bssid, java.lang.String fileName) { if ((bssid == null) || (fileName == null)) { android.util.Log.e(mTAG, ""Invalid arguments for Icon request.""); return false; } return mSupplicantStaIfaceHal.initiateHs20IconQuery(bssid, fileName); }",c6811ccc8d6147205c7fdd93ba6c38cfbca215b1,"requestIcon(java.lang.String,java.lang.String)",6754,66,87
347050,tests_wifitests_src_com_android_server_wifi_scanner_WificondWifiScannerTest.java,11.0,"private void dispatchBackgroundPeriodAlarm() { assertTrue(""dispatch background period alarm"", mAlarmManager.dispatch(SupplicantWifiScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); mLooper.dispatchAll(); }",916b05a4c73d02e53ef55303cbb5eb391cc7fa61,"private void dispatchBackgroundPeriodAlarm() { assertTrue(""dispatch background period alarm"", mAlarmManager.dispatch(WificondWifiScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); mLooper.dispatchAll(); }",1ca5ff7d39f08aa4fccd2abaa2e93954d9641242,dispatchBackgroundPeriodAlarm(),dispatchBackgroundPeriodAlarm(),12,11,"private void dispatchBackgroundPeriodAlarm() { assertTrue(""dispatch background period alarm"", mAlarmManager.dispatch(WificondScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); mLooper.dispatchAll(); }",3cc2fa699fa0efc4ab0b130221db0b0cbd42eaf2,dispatchBackgroundPeriodAlarm(),82506,41,40
628390,services_core_java_com_android_server_net_NetworkStatsService.java,34.0,"private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetail(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }",44532e7b97a713835236d9b91c30c70e695c08af,"private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetailLocked(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }",e8ce8fe27100f35a2aa3af90e48a2651c1ba9f7e,recordSnapshotLocked(long),recordSnapshotLocked(long),11,35,"private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetail(android.net.NetworkStats.INTERFACES_ALL); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }",e3fc33d3f2978544c0442f989ff41a93c1dd51ba,recordSnapshotLocked(long),129059,283,294
83326,luni_src_test_java_libcore_java_security_SignatureTest.java,49.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); for (int j = 0; j < 100; j++) { s.update(message); s.sign(); } return null; },135883551dc215beeeec87069ff5ecd7ec692cb3,,call(),4,22,@java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); latch.await(); for (int j = 0; j < 100; j++) { s.update(message); s.sign(); } return null; },b0ed2b6af860fae81258e6c8c7ee6c63076bfe4c,call(),350245,54,58
146403,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_DefaultAndroidComponentSpec.java,0.0,@java.lang.Override public com.android.build.gradle.BaseExtension getExtension() { return extension; },4c25942b4cfa0eb6470535ff5a978db9a50e10d3,@java.lang.Override public com.android.build.gradle.model.AndroidConfig getExtension() { return extension; },913f5acd4c6146df52d40d29299f8284fe21435e,getExtension(),getExtension(),11,0,@java.lang.Override public com.android.build.gradle.managed.AndroidConfig getExtension() { return extension; },857fa7b90500341120021ee149336cd984a7e8d5,getExtension(),236531,27,27
186130,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,26.0,"@org.junit.Test public void retroLambdaDefaultMethodsTest026() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_026).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",e393dbe64bf234a3bdc836ab29961fa47925fd77,"@org.junit.Test public void retroLambdaDefaultMethodsTest026() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_026).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",2d02da829c37a12ff77e5d59602de232854dc17f,retroLambdaDefaultMethodsTest026(),retroLambdaDefaultMethodsTest026(),7,26,@org.junit.Test public void retroLambdaDefaultMethodsTest026() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_026).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },05e10358f9f8c62ba61fa733b1cdb3d701c180fa,retroLambdaDefaultMethodsTest026(),466311,91,65
495730,src_com_android_bluetooth_pbap_BluetoothPbapService.java,32.0,"private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Pbap Service stopObexServerSession""); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }",10fd1105151bddce45b4f8f95bf8436439b3dc08,"protected void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Pbap Service stopObexServerSession""); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }",c33e2e7a1f3630c4fe8d12d267710539e65f8e99,stopObexServerSession(),stopObexServerSession(),11,32,"private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Pbap Service stopObexServerSession""); } mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothProfile.STATE_DISCONNECTED); }",923ac67e1afa12b59c9914c8622ad891e9e63253,stopObexServerSession(),115175,214,214
396032,services_net_java_android_net_ip_RouterAdvertisementDaemon.java,0.0,"private void maybeSendRA(java.net.InetSocketAddress dest) { if ((dest == null) || (!(isSuitableDestination(dest)))) { dest = mAllNodes; } try { synchronized(mLock) { if ((mRaLength) < (android.net.ip.RouterAdvertisementDaemon.MIN_RA_HEADER_SIZE)) { return; } android.system.Os.sendto(mSocket, mRA, 0, mRaLength, 0, dest); } android.util.Log.d(android.net.ip.RouterAdvertisementDaemon.TAG, (""RA sendto "" + (dest.getAddress().getHostAddress()))); } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { android.util.Log.e(android.net.ip.RouterAdvertisementDaemon.TAG, (""sendto error: "" + e)); } } }",9e394fdbe1e7b1596187617143a19ff682787147,"private void maybeSendRA(java.net.InetSocketAddress dest) { if ((dest == null) || (!(isSuitableDestination(dest)))) { dest = mAllNodes; } try { synchronized(mLock) { if ((mRaLength) < (android.net.ip.RouterAdvertisementDaemon.MIN_RA_HEADER_SIZE)) { return; } android.system.Os.sendto(mSocket, mRA, 0, mRaLength, 0, dest); } mLog.logAndEmit((""RA sendto "" + (dest.getAddress().getHostAddress()))); } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { mLog.error((""sendto error: "" + e)); } } }",ff2163445794e9a3516360797d31a73f5f436221,maybeSendRA(java.net.InetSocketAddress),maybeSendRA(java.net.InetSocketAddress),10,0,"private void maybeSendRA(java.net.InetSocketAddress dest) { if ((dest == null) || (!(isSuitableDestination(dest)))) { dest = mAllNodes; } try { synchronized(mLock) { if ((mRaLength) < (android.net.ip.RouterAdvertisementDaemon.MIN_RA_HEADER_SIZE)) { return; } android.system.Os.sendto(mSocket, mRA, 0, mRaLength, 0, dest); } android.util.Log.d(android.net.ip.RouterAdvertisementDaemon.TAG, (""RA sendto "" + (dest.getAddress().getHostAddress()))); } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { android.util.Log.e(android.net.ip.RouterAdvertisementDaemon.TAG, (""sendto error: "" + e)); } } }",9e394fdbe1e7b1596187617143a19ff682787147,maybeSendRA(java.net.InetSocketAddress),12907,170,202
546399,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,44.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertDayPeriodFormat(java.lang.String pattern, java.lang.String hour, java.lang.String expected, java.util.Locale locale) throws java.text.ParseException { java.text.SimpleDateFormat simpleDateFormat = new java.text.SimpleDateFormat(pattern, locale); simpleDateFormat.setTimeZone(java.util.TimeZone.getTimeZone(""UTC"")); assertEquals(expected, simpleDateFormat.format(libcore.java.text.SimpleDateFormatTest.createDateFromHour(hour))); }",8b2e4ff327feec51e552dc788f4dec46c4d6d442,,"assertDayPeriodFormat(java.lang.String,java.lang.String,java.lang.String,java.util.Locale)",4,29,"private void assertDayPeriodParseFailure(java.lang.String pattern, java.lang.String source) { java.text.SimpleDateFormat simpleDateFormat = new java.text.SimpleDateFormat(pattern, java.util.Locale.US); java.text.ParsePosition parsePosition = new java.text.ParsePosition(0); java.util.Date d = simpleDateFormat.parse(source, parsePosition); assertNull(d); assertEquals(0, parsePosition.getIndex()); }",a7850d361c7ec37e347651193a837eb3535d030b,"assertDayPeriodParseFailure(java.lang.String,java.lang.String)",251086,109,96
233471,luni_src_test_java_libcore_dalvik_system_SocketTaggingTest.java,,,,"public void testDatagramChannel() throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open(); dc.connect(server.getLocalAddress()); dc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }",2d53b622402d686b39b8cfab76a73bd6809c3743,,testDatagramChannel(),3,7,"public void testDatagramChannel() throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open(); dc.connect(server.getLocalAddress()); assertEquals(1, tagger.getLiveDescriptors().size()); dc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }",fd5d32b43f5517abd840d140a452314c5fd6c9ef,testDatagramChannel(),88475,64,75
146402,keystore_java_android_security_ArrayUtils.java,,,,"public static byte[] subarray(byte[] arr, int offset, int len) { if (len == 0) { return android.security.ArrayUtils.EMPTY_BYTE_ARRAY; } if ((offset == 0) && (len == (arr.length))) { return arr; } byte[] result = new byte[len]; java.lang.System.arraycopy(arr, offset, result, 0, len); return result; }",e66d6284a9a62d9c4c7ed4c4557a9da158f9501c,,"subarray(byte[],int,int)",5,3,"public static byte[] subarray(byte[] arr, int offset, int len) { if (len == 0) { return libcore.util.EmptyArray.BYTE; } if ((offset == 0) && (len == (arr.length))) { return arr; } byte[] result = new byte[len]; java.lang.System.arraycopy(arr, offset, result, 0, len); return result; }",fbbf65f0e7404b05599d9c7ccb4ae3e7c04bc11b,"subarray(byte[],int,int)",436736,88,85
48539,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLX509Certificate.java,,,,@java.lang.Override public java.util.Set<java.lang.String> getCriticalExtensionOIDs() { return null; },3737013c71f8bdbee142469c9aabc5336d5d958b,,getCriticalExtensionOIDs(),17,8,"@java.lang.Override public java.util.Set<java.lang.String> getCriticalExtensionOIDs() { java.lang.String[] critOids = org.apache.harmony.xnet.provider.jsse.NativeCrypto.get_X509_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_CRITICAL); if (((critOids.length) == 0) && ((org.apache.harmony.xnet.provider.jsse.NativeCrypto.get_X509_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_NON_CRITICAL).length) == 0)) { return null; } return new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(critOids)); }",b74f1196bc33387e887154d9c53ed537385981b8,getCriticalExtensionOIDs(),437040,30,172
15313,core_java_android_database_sqlite_SQLiteDatabase.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public long count(java.lang.String tablename) { return count(tablename, null, null); }",b7c4154ad26377929e4f214bdb861249bbdd0c93,,count(java.lang.String),5,53,"void logTimeStat(java.lang.String sql, long beginMillis) { logTimeStat(sql, beginMillis, null); }",f041778db7b615b596ea422f042e96c78d795930,"logTimeStat(java.lang.String,long)",140101,24,29
633724,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_CameraTest.java,1.0,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""ab5f9585-433b-4261-bd15-5c7136f6127b"") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); java.lang.String originalPhotoList = listPhotos(instrumentation); if ((testFramework.getApi()) >= 24) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launchPath(instrumentation, new java.lang.String[]{ ""Camera"" }); new com.android.devtools.systemimage.uitest.watchers.CameraAccessPermissionsWatcher(device).checkForCondition(); android.support.test.uiautomator.UiObject shutterButton = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_SHUTTER_BUTTON_RES)); if (shutterButton.waitForExists(3L)) { shutterButton.clickAndWaitForNewWindow(); } java.lang.String newPhotoList = listPhotos(instrumentation); org.junit.Assert.assertFalse(""Photo gallery has not been updated"", originalPhotoList.equals(newPhotoList)); android.support.test.uiautomator.UiObject photoThumbnail = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_PHOTO_THUMBNAIL_RES)); if (photoThumbnail.waitForExists(3L)) { photoThumbnail.clickAndWaitForNewWindow(); } android.support.test.uiautomator.UiObject trashCan = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.CAMERA_PHOTO_DELETE_RES)); if (trashCan.waitForExists(3L)) { trashCan.click(); } device.pressBack(); device.pressHome(); java.lang.String lastPhotoList = listPhotos(instrumentation); org.junit.Assert.assertTrue(""New photo was not deleted"", originalPhotoList.equals(lastPhotoList)); } }",ba7de5fdfab51d29ab6a3e3015a99ccf7736910c,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578821"") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { boolean photoTestSuccess = useCamera(instrumentation, ""Camera""); org.junit.Assert.assertTrue(""New photo was not deleted from the gallery"", photoTestSuccess); } }",174d7e16c4f13dbb388c61ee448353fcdde6bfd1,testPhotoCapture(),testPhotoCapture(),2,1,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""ab5f9585-433b-4261-bd15-5c7136f6127b"") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { boolean photoTestSuccess = useCamera(instrumentation, ""Camera""); org.junit.Assert.assertTrue(""New photo was not deleted from the gallery"", photoTestSuccess); } }",d47e230f3ae3a18b699cbb53278355b76d78779f,testPhotoCapture(),154807,138,156
420819,tools_ahat_test_DiffFieldsTest.java,,,,"@org.junit.Test public void normalAddedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue normal = new com.android.ahat.heapdump.FieldValue(""name"", ""type"", new com.android.ahat.heapdump.Value(1)); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.added(normal); assertEquals(""name"", x.name); assertEquals(""type"", x.type); assertEquals(new com.android.ahat.heapdump.Value(1), x.current); assertTrue(x.added); assertFalse(x.deleted); }",e9b117197b9d1fcbcad4a7b900c17b9d49286ac1,,normalAddedDiffedFieldValues(),3,4,"@org.junit.Test public void normalAddedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue normal = new com.android.ahat.heapdump.FieldValue(""name"", ""type"", new com.android.ahat.heapdump.Value(1)); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.added(normal); assertEquals(""name"", x.name); assertEquals(""type"", x.type); assertEquals(new com.android.ahat.heapdump.Value(1), x.current); assertEquals(DiffedFieldValue.Status.ADDED, x.status); }",bfed1559cf3be11352606360e10aa26a7f3c3012,normalAddedDiffedFieldValues(),387611,142,143
243440,test_458-checker-instruction-simplification_src_Main.java,6.0,public static int Shr24And255(int arg) { return (arg >> 24) & 255; },8d8a76b606037f5de3a3b72a4d0d6ffc90b8507d,public static int Shr24And255(int arg) { if (Main.doThrow) { throw new java.lang.Error(); } return (arg >> 24) & 255; },7f5030a11ea380838d861f4cc969a098e3133c16,Shr24And255(int),Shr24And255(int),3,32,public static int $noinline$Shr24And255(int arg) { if (Main.doThrow) { throw new java.lang.Error(); } return (arg >> 24) & 255; },2b404531d077050892d4e13d71e3c0f476038fe7,$noinline$Shr24And255(int),118230,39,44
245772,test_609-checker-inline-interface_src_Main.java,,,,"public void doCall() { if (Main.doThrow) throw new java.lang.Error(""""); }",27de9ea41f5c97765f561bdef31f5686df5035e7,,doCall(),6,2,"public void $noinline$doCall() { if (Main.doThrow) throw new java.lang.Error(""""); }",01dbe55fb24519a174c948ab2527447b1a1d934c,$noinline$doCall(),465466,21,26
162651,ddmlib_src_main_java_com_android_ddmlib_AdbHelper.java,20.0,"static void read(java.nio.channels.SocketChannel chan, byte[] data, int length, long timeout) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(data, 0, (length != (-1) ? length : data.length)); int numWaits = 0; while ((buf.position()) != (buf.limit())) { int count; count = chan.read(buf); if (count < 0) { com.android.ddmlib.Log.d(""ddms"", ""read: channel EOF""); throw new java.io.IOException(""EOF""); } else if (count == 0) { if ((timeout != 0) && ((numWaits * (com.android.ddmlib.AdbHelper.WAIT_TIME)) > timeout)) { com.android.ddmlib.Log.d(""ddms"", ""read: timeout""); throw new com.android.ddmlib.TimeoutException(); } try { java.lang.Thread.sleep(com.android.ddmlib.AdbHelper.WAIT_TIME); } catch (java.lang.InterruptedException ie) { } numWaits++; } else { numWaits = 0; } } }",e609cc990048e5ac4f5b2b4c34d99c259b26f84f,"static void read(java.nio.channels.SocketChannel chan, byte[] data, int length, long timeout) throws com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(data, 0, (length != (-1) ? length : data.length)); int numWaits = 0; while ((buf.position()) != (buf.limit())) { int count; count = chan.read(buf); if (count < 0) { com.android.ddmlib.Log.d(""ddms"", ""read: channel EOF""); throw new java.io.IOException(""EOF""); } else if (count == 0) { if ((timeout != 0) && ((numWaits * (com.android.ddmlib.AdbHelper.WAIT_TIME)) > timeout)) { com.android.ddmlib.Log.d(""ddms"", ""read: timeout""); throw new com.android.ddmlib.TimeoutException(); } java.lang.Thread.sleep(com.android.ddmlib.AdbHelper.WAIT_TIME); numWaits++; } else { numWaits = 0; } } }",50af33ce60d8b22bb44bb1a1ec9b6d7c4e1265dc,"read(java.nio.channels.SocketChannel,byte[],int,long)","read(java.nio.channels.SocketChannel,byte[],int,long)",4,20,"static void read(java.nio.channels.SocketChannel chan, byte[] data, int length, long timeout) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(data, 0, (length != (-1) ? length : data.length)); int numWaits = 0; while ((buf.position()) != (buf.limit())) { int count; count = chan.read(buf); if (count < 0) { com.android.ddmlib.Log.d(""ddms"", ""read: channel EOF""); throw new java.io.IOException(""EOF""); } else if (count == 0) { if ((timeout != 0) && ((numWaits * (com.android.ddmlib.AdbHelper.WAIT_TIME)) > timeout)) { com.android.ddmlib.Log.d(""ddms"", ""read: timeout""); throw new com.android.ddmlib.TimeoutException(); } try { java.lang.Thread.sleep(com.android.ddmlib.AdbHelper.WAIT_TIME); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); throw new com.android.ddmlib.TimeoutException(""Read interrupted with immediate timeout via interruption.""); } numWaits++; } else { numWaits = 0; } } }",e53e8328dc6e23130d360b3976d3328b17a70939,"read(java.nio.channels.SocketChannel,byte[],int,long)",352963,263,302
379459,telephony_java_android_telephony_TelephonyManager.java,269.0,public int getSimState(int slotIndex) { int simState = android.telephony.SubscriptionManager.getSimStateForSlotIndex(slotIndex); return simState; },86a4f8fd316b3e6e48aaa2824ce293b082758465,public int getSimState(int slotIdx) { int simState = android.telephony.SubscriptionManager.getSimStateForSlotIdx(slotIdx); return simState; },29bd6ed878b2f1209eacfead46167f960a8d5ff9,getSimState(int),getSimState(int),4,280,public int getSimState(int slotIndex) { int simState = android.telephony.SubscriptionManager.getSimStateForSlotIndex(slotIndex); return simState; },86a4f8fd316b3e6e48aaa2824ce293b082758465,getSimState(int),442507,37,37
249263,jack-tests_tests_com_android_jack_ifstatement_IfstatementTests.java,4.0,@java.lang.Override protected void fillRtTestInfos() { rtTestInfos.add(ADVANCEDTEST); rtTestInfos.add(CFGTEST); rtTestInfos.add(FASTPATH); rtTestInfos.add(SIMPLETEST); },69659e3a5453234ea62fd05ea3b8ff4f514a812a,@java.lang.Override protected void fillRtTestInfos() { rtTestInfos.add(ADVANCEDTEST); rtTestInfos.add(CFGTEST); rtTestInfos.add(FASTPATH); rtTestInfos.add(SIMPLETEST); rtTestInfos.add(SHORTCONDITION); },aa4c5c64adc0aa2e0fbd407cb67c007922f7bb17,fillRtTestInfos(),fillRtTestInfos(),8,4,@java.lang.Override protected void fillRtTestInfos() { rtTestInfos.add(ADVANCEDTEST); rtTestInfos.add(CFGTEST); rtTestInfos.add(FASTPATH); rtTestInfos.add(SIMPLETEST); },69659e3a5453234ea62fd05ea3b8ff4f514a812a,fillRtTestInfos(),159634,64,55
15341,sdkmanager_libs_sdklib_src_com_android_sdklib_build_ApkBuilder.java,,,,public void enableDebugSignature(java.lang.String storeOsPath) { mStoreOsPath = storeOsPath; },b4a67cd6c823a9c99299da3b274951c5eb742e93,,enableDebugSignature(java.lang.String),15,8,"public void addFile(java.io.File file, java.lang.String archivePath) throws com.android.sdklib.build.ApkBuilder.ApkCreationException, com.android.sdklib.build.ApkBuilder.DuplicateFileException, com.android.sdklib.build.ApkBuilder.SealedApkException { if (mIsSealed) { throw new com.android.sdklib.build.ApkBuilder.SealedApkException(""APK is already sealed""); } try { doAddFile(file, archivePath); } catch (com.android.sdklib.build.ApkBuilder.DuplicateFileException e) { throw e; } catch (java.lang.Exception e) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(e, ""Failed to add %s"", file); } }",1ff0058619063c2ee0e8e1db134408a21996268b,"addFile(java.io.File,java.lang.String)",230106,29,180
148495,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_Svg2Vector.java,,,,"private static void traverseSVGAndExtract(com.android.assetstudiolib.vectordrawable.vg.SVGTree svgTree, com.android.assetstudiolib.vectordrawable.vg.SVGGroupNode currentGroup, org.w3c.dom.Node item) { org.w3c.dom.NodeList allChildren = item.getChildNodes(); for (int i = 0; i < (allChildren.getLength()); i++) { org.w3c.dom.Node currentNode = allChildren.item(i); java.lang.String nodeName = currentNode.getNodeName(); if (((((""path"".equals(nodeName)) || (""rect"".equals(nodeName))) || (""circle"".equals(nodeName))) || (""polygon"".equals(nodeName))) || (""line"".equals(nodeName))) { com.android.assetstudiolib.vectordrawable.vg.SVGLeaveNode child = new com.android.assetstudiolib.vectordrawable.vg.SVGLeaveNode((nodeName + i)); com.android.assetstudiolib.vectordrawable.Svg2Vector.extractAllItemsAs(svgTree, child, currentNode); currentGroup.addChildren(child); } else if (""g"".equals(nodeName)) { com.android.assetstudiolib.vectordrawable.vg.SVGGroupNode childGroup = new com.android.assetstudiolib.vectordrawable.vg.SVGGroupNode((""child"" + i)); currentGroup.addChildren(childGroup); com.android.assetstudiolib.vectordrawable.Svg2Vector.traverseSVGAndExtract(svgTree, childGroup, currentNode); } else { com.android.assetstudiolib.vectordrawable.Svg2Vector.traverseSVGAndExtract(svgTree, currentGroup, currentNode); } } }",8d3fac50cbec0d1a2e2d0b9bdda3349842c60e50,,"traverseSVGAndExtract(com.android.assetstudiolib.vectordrawable.vg.SVGTree,com.android.assetstudiolib.vectordrawable.vg.SVGGroupNode,org.w3c.dom.Node)",11,10,"private static void traverseSVGAndExtract(com.android.assetstudiolib.vectordrawable.SvgTree svgTree, com.android.assetstudiolib.vectordrawable.SvgGroupNode currentGroup, org.w3c.dom.Node item) { org.w3c.dom.NodeList allChildren = item.getChildNodes(); for (int i = 0; i < (allChildren.getLength()); i++) { org.w3c.dom.Node currentNode = allChildren.item(i); java.lang.String nodeName = currentNode.getNodeName(); if (((((com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_PATH.equals(nodeName)) || (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_RECT.equals(nodeName))) || (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_CIRCLE.equals(nodeName))) || (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_POLYGON.equals(nodeName))) || (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_LINE.equals(nodeName))) { com.android.assetstudiolib.vectordrawable.SvgLeafNode child = new com.android.assetstudiolib.vectordrawable.SvgLeafNode((nodeName + i)); com.android.assetstudiolib.vectordrawable.Svg2Vector.extractAllItemsAs(svgTree, child, currentNode); currentGroup.addChild(child); } else if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_GROUP.equals(nodeName)) { com.android.assetstudiolib.vectordrawable.SvgGroupNode childGroup = new com.android.assetstudiolib.vectordrawable.SvgGroupNode((""child"" + i)); currentGroup.addChild(childGroup); com.android.assetstudiolib.vectordrawable.Svg2Vector.traverseSVGAndExtract(svgTree, childGroup, currentNode); } else { com.android.assetstudiolib.vectordrawable.Svg2Vector.traverseSVGAndExtract(svgTree, currentGroup, currentNode); } } }",85de4ee37491599184f0e62aa088394be54d5702,"traverseSVGAndExtract(com.android.assetstudiolib.vectordrawable.SvgTree,com.android.assetstudiolib.vectordrawable.SvgGroupNode,org.w3c.dom.Node)",5066,381,450
37501,tests_tests_dpi_src_android_dpi_cts_ConfigurationScreenLayoutTest.java,1.0,"public void testScreenLayout() throws java.lang.Exception { int expectedScreenLayout = computeScreenLayout(); int expectedSize = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int expectedLong = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); for (int i = 0; i < (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS.length); i++) { android.app.Activity activity = startOrientationActivity(android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i]); android.content.res.Configuration mConfig = activity.getResources().getConfiguration(); int actualSize = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int actualLong = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); assertEquals((((((""Expected screen size value of "" + expectedSize) + "" but got "") + actualSize) + "" for orientation "") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedSize, actualSize); assertEquals((((((""Expected screen long value of "" + expectedLong) + "" but got "") + actualLong) + "" for orientation "") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedLong, actualLong); tearDown(); } }",f23c1cfbb7167aac8459553caae24d32d9ee6107,"public void testScreenLayout() throws java.lang.Exception { int expectedScreenLayout = computeScreenLayout(); int expectedSize = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int expectedLong = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); boolean navigationBar = hasNavigationBar(); for (int i = 0; i < (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS.length); i++) { android.app.Activity activity = startOrientationActivity(android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i]); android.content.res.Configuration mConfig = activity.getResources().getConfiguration(); int actualSize = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int actualLong = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); assertEquals((((((""Expected screen size value of "" + expectedSize) + "" but got "") + actualSize) + "" for orientation "") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedSize, actualSize); if (!navigationBar) { assertEquals((((((""Expected screen long value of "" + expectedLong) + "" but got "") + actualLong) + "" for orientation "") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedLong, actualLong); } tearDown(); } }",d95d4997b87dda32fcd104086495849c8380aaaa,testScreenLayout(),testScreenLayout(),4,2,"public void testScreenLayout() throws java.lang.Exception { int expectedScreenLayout = computeScreenLayout(); int expectedSize = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int expectedLong = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); boolean navigationBar = hasNavigationBar(); for (int i = 0; i < (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS.length); i++) { android.app.Activity activity = startOrientationActivity(android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i]); android.content.res.Configuration mConfig = activity.getResources().getConfiguration(); int actualSize = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int actualLong = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); if (navigationBar) { expectedScreenLayout = reduceScreenLayout(activity, ((android.content.res.Configuration.SCREENLAYOUT_SIZE_XLARGE) | (android.content.res.Configuration.SCREENLAYOUT_LONG_YES))); expectedSize = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); expectedLong = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); } assertEquals((((((""Expected screen size value of "" + expectedSize) + "" but got "") + actualSize) + "" for orientation "") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedSize, actualSize); assertEquals((((((""Expected screen long value of "" + expectedLong) + "" but got "") + actualLong) + "" for orientation "") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedLong, actualLong); tearDown(); } }",70f6eda321c6bb2551c5060608f6040eb4b79ff4,testScreenLayout(),511704,336,431
139781,rpclib_src_main_java_com_android_tools_rpclib_binary_Decoder.java,10.0,public int uint32() throws java.io.IOException { return int32(); },038fbdd50ceb3d4fe1a8468562f3a018e1bb8503,public int uint32() throws java.io.IOException { read(1); int count = 0; for (int tag = (mBuffer[0]) & 255; (tag & 128) != 0; tag <<= 1) count += 1; int v = (mBuffer[0]) & (255 >> count); if (count == 0) { return v; } read(count); for (int i = 0; i < count; i++) { v = (v << 8) | ((mBuffer[i]) & 255); } return v; },66f64862207054bb773a8d0a1b2261e1ae826e2a,uint32(),uint32(),2,11,public int uint32() throws java.io.IOException { return ((int) (uintv())); },72768680661bfaed05124ed3f4561f3734b45541,uint32(),302435,106,23
205336,sched_src_com_android_sched_vfs_DeflateFS.java,31.0,@java.lang.Override @javax.annotation.Nonnull void delete(@javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file) throws com.android.sched.util.file.CannotDeleteFileException { vfs.delete(file); },53d944a0b40956937657256f121e2fc22d8689a7,@java.lang.Override @javax.annotation.Nonnull void delete(@javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file) throws com.android.sched.util.file.CannotDeleteFileException { vfs.delete(file); },89ceb77eb06b4de63f21389860fc655b2ed0c6ff,delete(com.android.sched.vfs.BaseVFile),delete(com.android.sched.vfs.DeflateFS$DeflateVFile),13,12,@java.lang.Override @javax.annotation.Nonnull void delete(@javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file) throws com.android.sched.util.file.CannotDeleteFileException { vfs.delete(file.getWrappedFile()); },af637375be3995d5bac16d1776f4c4df35838797,delete(com.android.sched.vfs.DeflateFS$DeflateVFile),282434,60,63
41115,src_java_com_android_internal_telephony_ims_IsimUiccRecords.java,15.0,"void loge(java.lang.String s) { if (com.android.internal.telephony.ims.IsimUiccRecords.DBG) android.util.Log.e(com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG, (""[ISIM] "" + s)); }",27e6cb7678dd931503587e9eefb59c4095d6557c,"protected void loge(java.lang.String s) { if (com.android.internal.telephony.ims.IsimUiccRecords.DBG) android.util.Log.e(com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG, (""[ISIM] "" + s)); }",3e2cae150d5190db7c2e9cc9dbea23f717496c3d,loge(java.lang.String),loge(java.lang.String),22,12,"@java.lang.Override protected void loge(java.lang.String s) { if (com.android.internal.telephony.ims.IsimUiccRecords.DBG) android.util.Log.e(com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG, (""[ISIM] "" + s)); }",38e17a441eed1834ff7bcca285d80ea10ae00c17,loge(java.lang.String),499240,76,82
125783,jack_src_com_android_jack_library_v0001_OutputJackLibraryImpl.java,15.0,"@java.lang.SuppressWarnings(""resource"") @javax.annotation.Nonnull private synchronized com.android.jack.library.v0001.OutputJackLibraryImpl.VFSPair getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.NotDirectoryException { com.android.jack.library.v0001.OutputJackLibraryImpl.VFSPair currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VPath prefixPath = new com.android.sched.vfs.VPath(fileType.getPrefix(), '/'); com.android.sched.vfs.OutputVFS outputVFS = new com.android.sched.vfs.PrefixedOutputVFS(baseVFS, prefixPath); com.android.sched.vfs.InputVFS inputVFS; try { inputVFS = new com.android.sched.vfs.PrefixedInputVFS(baseVFS, prefixPath); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new java.lang.AssertionError(e); } if ((generateJacklibDigest) && (fileType == (com.android.jack.library.FileType.DEX))) { outputVFS = new com.android.sched.vfs.MessageDigestOutputVFS(outputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO)); } currentSectionVFS = new com.android.jack.library.v0001.OutputJackLibraryImpl.VFSPair(inputVFS, outputVFS); sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",6f979c3d316c801b32cb0213e5ab89f54adf4cc6,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputOutputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) throws com.android.jack.library.LibraryIOException, com.android.sched.util.file.CannotCreateFileException { com.android.sched.vfs.InputOutputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VPath prefixPath = new com.android.sched.vfs.VPath(fileType.getPrefix(), '/'); com.android.sched.vfs.VFS outputVFS = new com.android.sched.vfs.PrefixedFS(vfs, prefixPath); if ((generateJacklibDigest) && (fileType == (com.android.jack.library.FileType.DEX))) { try { outputVFS = new com.android.sched.vfs.MessageDigestFS(outputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO)); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } } currentSectionVFS = new com.android.sched.vfs.GenericInputOutputVFS(outputVFS); sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",b6da494ae15e5f9c8a37e01f6cf6f5c5d0ec33b1,getSectionVFS(com.android.jack.library.FileType),getSectionVFS(com.android.jack.library.FileType),3,15,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputOutputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) throws com.android.sched.util.file.CannotCreateFileException { com.android.sched.vfs.InputOutputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VPath prefixPath = new com.android.sched.vfs.VPath(fileType.getPrefix(), '/'); com.android.sched.vfs.VFS outputVFS = null; try { outputVFS = new com.android.sched.vfs.PrefixedFS(vfs, prefixPath); if ((generateJacklibDigest) && (fileType == (com.android.jack.library.FileType.DEX))) { outputVFS = new com.android.sched.vfs.MessageDigestFS(outputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO)); } } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } currentSectionVFS = new com.android.sched.vfs.GenericInputOutputVFS(outputVFS); sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",394f858bedf7be7fe25c3a50615befa60d2841cd,getSectionVFS(com.android.jack.library.FileType),262559,319,335
396032,services_net_java_android_net_ip_RouterAdvertisementDaemon.java,17.0,"@java.lang.Override public void run() { while (isSocketValid()) { try { final int rval = android.system.Os.recvfrom(mSocket, mSolication, 0, mSolication.length, 0, solicitor); if ((rval < 1) || ((mSolication[0]) != (android.net.ip.RouterAdvertisementDaemon.ICMPV6_ND_ROUTER_SOLICIT))) { continue; } } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { android.util.Log.e(android.net.ip.RouterAdvertisementDaemon.TAG, (""recvfrom error: "" + e)); } continue; } maybeSendRA(solicitor); } }",1b5183e2598f5f4a0e33ae25650727a894fcc943,"@java.lang.Override public void run() { while (isSocketValid()) { try { final int rval = android.system.Os.recvfrom(mSocket, mSolication, 0, mSolication.length, 0, solicitor); if ((rval < 1) || ((mSolication[0]) != (android.net.ip.RouterAdvertisementDaemon.ICMPV6_ND_ROUTER_SOLICIT))) { continue; } } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { mLog.error((""recvfrom error: "" + e)); } continue; } maybeSendRA(solicitor); } }",89e64a5eeb7e0d96c2e2271a7193e4f57f6c9a20,run(),run(),10,17,"@java.lang.Override public void run() { while (isSocketValid()) { try { final int rval = android.system.Os.recvfrom(mSocket, mSolication, 0, mSolication.length, 0, solicitor); if ((rval < 1) || ((mSolication[0]) != (android.net.ip.RouterAdvertisementDaemon.ICMPV6_ND_ROUTER_SOLICIT))) { continue; } } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { android.util.Log.e(android.net.ip.RouterAdvertisementDaemon.TAG, (""recvfrom error: "" + e)); } continue; } maybeSendRA(solicitor); } }",1b5183e2598f5f4a0e33ae25650727a894fcc943,run(),12873,155,172
207707,rs_java_android_renderscript_RenderScript.java,96.0,"private static android.renderscript.RenderScript internalCreate(android.content.Context ctx, int sdkVersion, android.renderscript.RenderScript.ContextType ct, int flags) { if (!(android.renderscript.RenderScript.sInitialized)) { android.util.Log.e(android.renderscript.RenderScript.LOG_TAG, ""RenderScript.create() called when disabled; someone is likely to crash""); return null; } if ((flags & (~(((android.renderscript.RenderScript.CREATE_FLAG_LOW_LATENCY) | (android.renderscript.RenderScript.CREATE_FLAG_LOW_POWER)) | (android.renderscript.RenderScript.CREATE_FLAG_WAIT_FOR_ATTACH)))) != 0) { throw new android.renderscript.RSIllegalArgumentException(""Invalid flags passed.""); } android.renderscript.RenderScript rs = new android.renderscript.RenderScript(ctx); rs.mDev = rs.nDeviceCreate(); rs.mContext = rs.nContextCreate(rs.mDev, flags, sdkVersion, ct.mID); rs.mContextType = ct; rs.mContextFlags = flags; rs.mContextSdkVersion = sdkVersion; if ((rs.mContext) == 0) { throw new android.renderscript.RSDriverException(""Failed to create RS context.""); } final java.lang.String CACHE_PATH = ""com.android.renderscript.cache""; java.io.File f = new java.io.File(RenderScriptCacheDir.mCacheDir, CACHE_PATH); java.lang.String mCachePath = f.getAbsolutePath(); f.mkdirs(); rs.nContextSetCacheDir(mCachePath); rs.mMessageThread = new android.renderscript.RenderScript.MessageThread(rs); rs.mMessageThread.start(); return rs; }",49fd8bd56576c395223ca4a5d864a8492456e72f,"private static android.renderscript.RenderScript internalCreate(android.content.Context ctx, int sdkVersion, android.renderscript.RenderScript.ContextType ct, int flags) { if (!(android.renderscript.RenderScript.sInitialized)) { android.util.Log.e(android.renderscript.RenderScript.LOG_TAG, ""RenderScript.create() called when disabled; someone is likely to crash""); return null; } if ((flags & (~(((android.renderscript.RenderScript.CREATE_FLAG_LOW_LATENCY) | (android.renderscript.RenderScript.CREATE_FLAG_LOW_POWER)) | (android.renderscript.RenderScript.CREATE_FLAG_WAIT_FOR_ATTACH)))) != 0) { throw new android.renderscript.RSIllegalArgumentException(""Invalid flags passed.""); } android.renderscript.RenderScript rs = new android.renderscript.RenderScript(ctx); rs.mDev = rs.nDeviceCreate(); rs.mContext = rs.nContextCreate(rs.mDev, flags, sdkVersion, ct.mID); rs.mContextType = ct; rs.mContextFlags = flags; rs.mContextSdkVersion = sdkVersion; if ((rs.mContext) == 0) { throw new android.renderscript.RSDriverException(""Failed to create RS context.""); } final java.lang.String CACHE_PATH = ""com.android.renderscript.cache""; java.io.File f = new java.io.File(RenderScriptCacheDir.mCacheDir, CACHE_PATH); android.renderscript.RenderScript.mCachePath = f.getAbsolutePath(); f.mkdirs(); rs.nContextSetCacheDir(android.renderscript.RenderScript.mCachePath); rs.mMessageThread = new android.renderscript.RenderScript.MessageThread(rs); rs.mMessageThread.start(); return rs; }",9abcfccc4f57dfabe2cc6a1503f11b5a9089ec6b,"internalCreate(android.content.Context,int,android.renderscript.RenderScript$ContextType,int)","internalCreate(android.content.Context,int,android.renderscript.RenderScript$ContextType,int)",7,96,"private static android.renderscript.RenderScript internalCreate(android.content.Context ctx, int sdkVersion, android.renderscript.RenderScript.ContextType ct, int flags) { if (!(android.renderscript.RenderScript.sInitialized)) { android.util.Log.e(android.renderscript.RenderScript.LOG_TAG, ""RenderScript.create() called when disabled; someone is likely to crash""); return null; } if ((flags & (~(((android.renderscript.RenderScript.CREATE_FLAG_LOW_LATENCY) | (android.renderscript.RenderScript.CREATE_FLAG_LOW_POWER)) | (android.renderscript.RenderScript.CREATE_FLAG_WAIT_FOR_ATTACH)))) != 0) { throw new android.renderscript.RSIllegalArgumentException(""Invalid flags passed.""); } android.renderscript.RenderScript rs = new android.renderscript.RenderScript(ctx); rs.mDev = rs.nDeviceCreate(); rs.mContext = rs.nContextCreate(rs.mDev, flags, sdkVersion, ct.mID); rs.mContextType = ct; rs.mContextFlags = flags; rs.mContextSdkVersion = sdkVersion; if ((rs.mContext) == 0) { throw new android.renderscript.RSDriverException(""Failed to create RS context.""); } rs.nContextSetCacheDir(android.renderscript.RenderScript.getCachePath()); rs.mMessageThread = new android.renderscript.RenderScript.MessageThread(rs); rs.mMessageThread.start(); return rs; }",29fede9bb3229eaaaada8925904679cacf373348,"internalCreate(android.content.Context,int,android.renderscript.RenderScript$ContextType,int)",214972,409,339
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFastNormalize.java,,,,"private void checkFastNormalizeFloat2() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testFastNormalizeFloat2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastNormalizeFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastNormalizeFloat2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastNormalizeFloat2: "" + (e.toString()))); } }",b56df7d4f91758017129303e842886e1888e9720,,checkFastNormalizeFloat2(),9,4,"private void checkFastNormalizeFloat2Float2() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -2143390131417509529L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testFastNormalizeFloat2Float2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastNormalizeFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastNormalizeFloat2Float2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastNormalizeFloat2Float2: "" + (e.toString()))); } }",6040c50951ab994fe6bc96ae4b5e398e0f7def9a,checkFastNormalizeFloat2Float2(),142595,301,281
253791,luni_src_main_java_libcore_io_Posix.java,82.0,"public native void bind(java.io.FileDescriptor fd, java.net.SocketAddress address) throws android.system.ErrnoException, java.net.SocketException;",f2c133fc6c6c09cf35c63e680ec724a3c95b267d,"public native void bind(java.io.FileDescriptor fd, java.net.SocketAddress address) throws java.net.SocketException, libcore.io.ErrnoException;",1b406c17f68a22d1ea9a3ca00402f64f431d2692,"bind(java.io.FileDescriptor,java.net.SocketAddress)","bind(java.io.FileDescriptor,java.net.SocketAddress)",8,79,"public native void bind(java.io.FileDescriptor fd, java.net.SocketAddress address) throws android.system.ErrnoException, java.net.SocketException;",f2c133fc6c6c09cf35c63e680ec724a3c95b267d,"bind(java.io.FileDescriptor,java.net.SocketAddress)",494512,36,35
196492,jack_src_com_android_jack_digest_DigestOutput.java,,,,@java.lang.Override public void printOpt(java.lang.String s) { },f1d0297eb64d785fa03c772aa92b4a40c2b69e55,,printOpt(java.lang.String),3,1,@java.lang.Override public void printOpt(@javax.annotation.Nonnull java.lang.String s) { },8b131310e302b6a5e7ae65b45d464b6fd987c712,printOpt(java.lang.String),371671,21,26
236560,server_jack-server_src_com_android_jack_server_ConfigFile.java,5.0,"public int getTimeout() { int timeout = getProperty(com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY, java.lang.Integer.valueOf(7200), new com.android.sched.util.codec.IntCodec()).intValue(); if ((timeout < 0) && (timeout != (com.android.jack.server.ConfigFile.TIMEOUT_DISABLED))) { com.android.jack.server.ConfigFile.logger.log(java.util.logging.Level.WARNING, (((""Invalid config value for "" + (com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY)) + "": "") + timeout)); timeout = com.android.jack.server.ConfigFile.TIMEOUT_DISABLED; } return timeout; }",16610bd8e6d52c479469d9324e2bd2365a8cf084,"public int getTimeout() { int delay = getProperty(com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY, java.lang.Integer.valueOf(7200), new com.android.sched.util.codec.IntCodec()).intValue(); if ((delay < 0) && (delay != (com.android.jack.server.ConfigFile.TIME_DISABLED_VALUE))) { com.android.jack.server.ConfigFile.logger.log(java.util.logging.Level.WARNING, (((""Invalid config value for "" + (com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY)) + "": "") + delay)); delay = com.android.jack.server.ConfigFile.TIME_DISABLED_VALUE; } return delay; }",890bd172f10248ace509900b3aaf1ea26dfc2958,getTimeout(),getTimeout(),13,7,"public int getTimeout() { return getDelay(com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY, ((2 * 60) * 60)); }",fae64cd6efdd59fcda0bfa04f4905c92b836137d,getTimeout(),417514,165,35
250414,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,30.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testStandaloneWeekdayFormatting() throws java.text.ParseException { java.util.Locale fi = new java.util.Locale(""fi""); assertEquals(""torstai"", formatDate(fi, ""cccc"")); assertEquals(""torstaina"", formatDate(fi, ""EEEE"")); }",3241cf0817dfd774a797f7debe99ef5a9ba33848,,testStandaloneWeekdayFormatting(),5,2,"public void testStandaloneWeekdayFormatting() throws java.lang.Exception { java.util.Locale fi = new java.util.Locale(""fi""); assertEquals(""torstai"", formatDate(fi, ""cccc"")); assertEquals(""torstaina"", formatDate(fi, ""EEEE"")); }",bf4bf812043818e14788f086b9413fe877aa49d0,testStandaloneWeekdayFormatting(),14764,60,60
324140,services_core_java_com_android_server_NetworkManagementService.java,92.0,"private void notifyRouteChange(java.lang.String action, android.net.RouteInfo route) { final int length = mObservers.beginBroadcast(); try { for (int i = 0; i < length; i++) { try { if (action.equals(""updated"")) { mObservers.getBroadcastItem(i).routeUpdated(route); } else { mObservers.getBroadcastItem(i).routeRemoved(route); } } catch (android.os.RemoteException | java.lang.RuntimeException e) { } } } finally { mObservers.finishBroadcast(); } }",8916f7e31899ae937d1fd891ead08125dfbbfa28,"private void notifyRouteChange(java.lang.String action, android.net.RouteInfo route) { invokeForAllObservers(new com.android.server.NetworkManagementService.CallbackInvocation() { @java.lang.Override public void call(android.net.INetworkManagementEventObserver o) throws android.os.RemoteException { if (action.equals(""updated"")) { o.routeUpdated(route); } else { o.routeRemoved(route); } } }); }",10352c274967e8d9f7ed6706eb59f48bffbba50f,"notifyRouteChange(java.lang.String,android.net.RouteInfo)","notifyRouteChange(java.lang.String,android.net.RouteInfo)",3,83,"private void notifyRouteChange(java.lang.String action, android.net.RouteInfo route) { if (action.equals(""updated"")) { invokeForAllObservers(( o) -> o.routeUpdated(route)); } else { invokeForAllObservers(( o) -> o.routeRemoved(route)); } }",00e281f305192e07090882219ee271aab26ab3ce,"notifyRouteChange(java.lang.String,android.net.RouteInfo)",137145,100,68
426280,services_core_java_com_android_server_connectivity_Nat464Xlat.java,2.0,"public void fixupLinkProperties(android.net.LinkProperties oldLp) { if (((((mNetwork.clatd) != null) && (mIsRunning)) && ((mNetwork.linkProperties) != null)) && (!(mNetwork.linkProperties.getAllInterfaceNames().contains(mIface)))) { android.util.Slog.d(com.android.server.connectivity.Nat464Xlat.TAG, (""clatd running, updating NAI for "" + (mIface))); for (android.net.LinkProperties stacked : oldLp.getStackedLinks()) { if (mIface.equals(stacked.getInterfaceName())) { mNetwork.linkProperties.addStackedLink(stacked); break; } } } }",f406aa8d76083eee8d4c658ae62517a05985ebd4,"public void fixupLinkProperties(android.net.LinkProperties oldLp) { if ((!(mIsRunning)) || ((mNetwork.clatd) == null)) { return; } android.net.LinkProperties lp = mNetwork.linkProperties; if ((lp == null) || (lp.getAllInterfaceNames().contains(mIface))) { return; } android.util.Slog.d(com.android.server.connectivity.Nat464Xlat.TAG, (""clatd running, updating NAI for "" + (mIface))); for (android.net.LinkProperties stacked : oldLp.getStackedLinks()) { if (mIface.equals(stacked.getInterfaceName())) { lp.addStackedLink(stacked); return; } } }",ac4b4cf2ff814f5cadcefdf310e2ea13a4788d5e,fixupLinkProperties(android.net.LinkProperties),fixupLinkProperties(android.net.LinkProperties),16,9,"public void fixupLinkProperties(android.net.LinkProperties oldLp) { if (!(isRunning())) { return; } android.net.LinkProperties lp = mNetwork.linkProperties; if ((lp == null) || (lp.getAllInterfaceNames().contains(mIface))) { return; } android.util.Slog.d(com.android.server.connectivity.Nat464Xlat.TAG, (""clatd running, updating NAI for "" + (mIface))); for (android.net.LinkProperties stacked : oldLp.getStackedLinks()) { if (java.util.Objects.equals(mIface, stacked.getInterfaceName())) { lp.addStackedLink(stacked); return; } } }",0c2595e32fb0cbc4fdc5b253a4195c2c1e7a805b,fixupLinkProperties(android.net.LinkProperties),496318,176,166
114532,dx_src_com_android_dx_command_dexer_Main.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.Boolean call(com.android.dx.dex.file.ClassDefItem clazz) throws java.lang.Exception { if (clazz == null) { return true; } com.android.dx.command.dexer.Main.addClassToDex(name, clazz); com.android.dx.command.dexer.Main.updateStatus(true); if (com.android.dx.command.dexer.Main.args.multiDex) { synchronized(com.android.dx.command.dexer.Main.dexRotationLock) { com.android.dx.command.dexer.Main.maxMethodIdsInProcess -= maxMethodIdsInClass; com.android.dx.command.dexer.Main.maxFieldIdsInProcess -= maxFieldIdsInClass; com.android.dx.command.dexer.Main.dexRotationLock.notifyAll(); } } return true; }",e1fa8ef11974eb85e9e59bf4a724e4f8a3d90a69,,call(com.android.dx.dex.file.ClassDefItem),6,45,@java.lang.Override public java.lang.Boolean call() throws java.lang.Exception { try { com.android.dx.dex.file.ClassDefItem clazz = futureClazz.get(); if (clazz != null) { com.android.dx.command.dexer.Main.addClassToDex(clazz); com.android.dx.command.dexer.Main.updateStatus(true); } return true; } catch (java.util.concurrent.ExecutionException ex) { java.lang.Throwable t = ex.getCause(); throw t instanceof java.lang.Exception ? ((java.lang.Exception) (t)) : ex; } finally { if (com.android.dx.command.dexer.Main.args.multiDex) { synchronized(com.android.dx.command.dexer.Main.dexRotationLock) { com.android.dx.command.dexer.Main.maxMethodIdsInProcess -= maxMethodIdsInClass; com.android.dx.command.dexer.Main.maxFieldIdsInProcess -= maxFieldIdsInClass; com.android.dx.command.dexer.Main.dexRotationLock.notifyAll(); } } } },2876e60b6fbefe919c0833d4ecc719af462c7c79,call(),237066,197,260
101321,login_src_com_google_gct_login_GoogleLogin.java,1.0,"@java.lang.Override public com.google.gdt.eclipse.login.common.VerificationCodeHolder obtainVerificationCodeFromExternalUserInteraction(java.lang.String title) { com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver receiver = new com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver(); java.lang.String redirectUrl; try { redirectUrl = receiver.getRedirectUri(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? ""Google Login"" : title), e); return null; } com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl authCodeRequestUrl = new com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl(com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants.AUTHORIZATION_SERVER_URL, clientInfo.getId()).setRedirectUri(redirectUrl).setScopes(com.google.gct.login.OAuthScopeRegistry.getScopes()); com.intellij.ide.BrowserUtil.browse(authCodeRequestUrl.build()); java.lang.String verificationCode; try { verificationCode = receiver.waitForCode(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? ""Google Login"" : title), e); return null; } return new com.google.gdt.eclipse.login.common.VerificationCodeHolder(verificationCode, redirectUrl); }",6dc97b4e4b3300f355ace6fe3708b931d5b28fd7,"@java.lang.Override public com.google.gdt.eclipse.login.common.VerificationCodeHolder obtainVerificationCodeFromExternalUserInteraction(java.lang.String title) { receiver = new com.google.gct.login.CancellableServerReceiver(); java.lang.String redirectUrl; try { redirectUrl = receiver.getRedirectUri(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? ""Google Login"" : title), e); return null; } com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl authCodeRequestUrl = new com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl(com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants.AUTHORIZATION_SERVER_URL, clientInfo.getId()).setRedirectUri(redirectUrl).setScopes(com.google.gct.login.OAuthScopeRegistry.getScopes()); com.intellij.ide.BrowserUtil.browse(authCodeRequestUrl.build()); java.lang.String verificationCode; try { verificationCode = receiver.waitForCode(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? ""Google Login"" : title), e); return null; } return new com.google.gdt.eclipse.login.common.VerificationCodeHolder(verificationCode, redirectUrl); }",7e55af143881472c56df32fbff9ada29308667bc,obtainVerificationCodeFromExternalUserInteraction(java.lang.String),obtainVerificationCodeFromExternalUserInteraction(java.lang.String),6,2,"@java.lang.Override public com.google.gdt.eclipse.login.common.VerificationCodeHolder obtainVerificationCodeFromExternalUserInteraction(java.lang.String title) { receiver = new com.google.gct.login.CancellableServerReceiver(); java.lang.String redirectUrl; try { redirectUrl = receiver.getRedirectUri(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? ""Google Login"" : title), e); return null; } com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl authCodeRequestUrl = new com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl(com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants.AUTHORIZATION_SERVER_URL, clientInfo.getId()).setRedirectUri(redirectUrl).setScopes(com.google.gct.login.OAuthScopeRegistry.getScopes()); com.intellij.ide.BrowserUtil.browse(authCodeRequestUrl.build()); java.lang.String verificationCode; try { verificationCode = receiver.waitForCode(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? ""Google Login"" : title), e); return null; } finally { receiver = null; } return new com.google.gdt.eclipse.login.common.VerificationCodeHolder(verificationCode, redirectUrl); }",ef64704011fd88e00161771dad8f6b21a47e7294,obtainVerificationCodeFromExternalUserInteraction(java.lang.String),434959,305,312
317740,services_core_java_com_android_server_BluetoothManagerService.java,20.0,"public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""disable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""disable(): mBluetooth = "" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(); } return true; }",60bd429680d9ff6ad4a5f654b88f534be324360e,"public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""disable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""disable(): mBluetooth = "" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(packageName); } return true; }",6027033e3d525a07097917e212d218b5659dcbb9,"disable(java.lang.String,boolean)","disable(java.lang.String,boolean)",3,21,"public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""disable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if ((isEnabled()) && (mPermissionReviewRequired)) { startConsentUi(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE); return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((""disable(): mBluetooth = "" + (mBluetooth)) + "" mBinding = "") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(packageName); } return true; }",1b10186683b8d7ec00e1c66a8d596f68e65ff0a5,"disable(java.lang.String,boolean)",496654,308,306
422459,tests_net_java_com_android_server_connectivity_tethering_UpstreamNetworkMonitorTest.java,25.0,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); reset(mCS); reset(mLog); when(mLog.forSubComponent(anyString())).thenReturn(mLog); mCM = spy(new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager(mContext, mCS)); mSM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestStateMachine(); mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(mSM, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE, ((android.net.ConnectivityManager) (mCM)), mLog); }",03264d56ff4bfc7759c6db70fb71fe4108095098,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); reset(mCS); reset(mLog); when(mLog.forSubComponent(anyString())).thenReturn(mLog); mCM = spy(new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager(mContext, mCS)); mSM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestStateMachine(); mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(((android.net.ConnectivityManager) (mCM)), mSM, mLog, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_PFX_UPDATE); }",a0426ec524afb5888e242b5398fe406b4151f20a,setUp(),setUp(),11,29,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); reset(mCS); reset(mLog); when(mLog.forSubComponent(anyString())).thenReturn(mLog); mCM = spy(new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager(mContext, mCS)); mSM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestStateMachine(); mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(((android.net.ConnectivityManager) (mCM)), mSM, mLog, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE); }",d4ed0f799482081884e0bc903b336a6ca132da87,setUp(),183134,208,183
186211,test_vogar_target_TestRunnerProperties.java,,,,"java.lang.String profileFile() default """";",ca18149ad02bbae2ff3c17454784e958f3da28ef,,profileFile(),4,0,"java.lang.String profileFile() default ""default-profile-file"";",8ba32041a0b72b54fe23f17388d465667da954cb,profileFile(),103068,10,16
403812,services_core_java_com_android_server_connectivity_tethering_OffloadHardwareInterface.java,6.0,"public void stopOffloadControl() { if ((mOffloadControl) == null) return; try { final android.hardware.tetheroffload.control.V1_0.IOffloadControl.stopOffloadCallback cb = new android.hardware.tetheroffload.control.V1_0.IOffloadControl.stopOffloadCallback() { @java.lang.Override public void onValues(boolean success, java.lang.String errMsg) { if (success) return; android.util.Log.e(com.android.server.connectivity.tethering.OffloadHardwareInterface.TAG, (""stopOffload failed: "" + errMsg)); } }; mOffloadControl.stopOffload(cb); } catch (android.os.RemoteException e) { android.util.Log.d(com.android.server.connectivity.tethering.OffloadHardwareInterface.TAG, (""failed to stopOffload: "" + e)); } mOffloadControl = null; }",b97cef319a17d1ca2082067ad4829ce80c2abb58,"public void stopOffloadControl() { if ((mOffloadControl) != null) { try { mOffloadControl.stopOffload((boolean success,java.lang.String errMsg) -> { if (!success) mLog.e((""stopOffload failed: "" + errMsg)); }); } catch (android.os.RemoteException e) { mLog.e((""failed to stopOffload: "" + e)); } } mOffloadControl = null; mControlCallback = null; }",c1ad9e0dad00741b9b5609493536fc8273edbcc3,stopOffloadControl(),stopOffloadControl(),5,7,"public void stopOffloadControl() { if ((mOffloadControl) != null) { try { mOffloadControl.stopOffload((boolean success,java.lang.String errMsg) -> { if (!success) mLog.e((""stopOffload failed: "" + errMsg)); }); } catch (android.os.RemoteException e) { mLog.e((""failed to stopOffload: "" + e)); } } mOffloadControl = null; mTetheringOffloadCallback = null; mControlCallback = null; }",7656e239e78bf78974bff78ffb6f4e55103939d2,stopOffloadControl(),91112,109,119
237621,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,21.0,@org.junit.Test public void retroLambdaDefaultMethodsTest004() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_004); },541509ee1a6b2b57a3bf15390bbb2845f89e7b0c,@org.junit.Test @java.lang.Runtime public void retroLambdaDefaultMethodsTest004() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_004); },68acb3ebe462b9b2d33518a64ea039f20758aa43,retroLambdaDefaultMethodsTest004(),retroLambdaDefaultMethodsTest004(),11,21,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void retroLambdaDefaultMethodsTest004() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_004); },a93d71370b6305a3faba7db117487a497f572f35,retroLambdaDefaultMethodsTest004(),273873,43,51
153812,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,13.0,"@org.junit.Test @org.junit.Ignore public void test002c() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(false, ""keep-first"", errOut, false, false); checkResourceContent(jackOutput, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH, ""Res1""); checkResourceContent(jackOutput, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH, ""Res2""); checkResourceContent(jackOutput, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH, ""Res3""); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",4e5a4da7237a70687f26a48913bdc9bfea551e3c,"@org.junit.Test public void test002c() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(false, ""keep-first"", errOut, false, false); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, ""Res1""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, ""Res2""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, ""Res3""); } finally { if (lib != null) { lib.close(); } } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",968c8f4a095e8b22ffb6ec0bed3ff37ef85cf30a,test002c(),test002c(),9,14,"@org.junit.Test public void test002c() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(false, ""keep-first"", errOut, false, false); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, ""Res1""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, ""Res2""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, ""Res3""); } finally { if (lib != null) { lib.close(); } } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",74b98ddc5e949a913d2985d3bedcb686c1164dd0,test002c(),456032,220,218
131630,lint_libs_lint-api_src_main_java_com_android_tools_lint_detector_api_Detector.java,47.0,"@java.lang.SuppressWarnings(""javadoc"") public void visitResourceReference(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.AstVisitor visitor, @com.android.annotations.NonNull lombok.ast.Node node, @com.android.annotations.NonNull java.lang.String type, @com.android.annotations.NonNull java.lang.String name, boolean isFramework) { }",0e369b74f8098c10fdb63272bc84ee098b9006b5,"@java.lang.SuppressWarnings(""javadoc"") public void visitResourceReference(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable com.android.tools.lint.detector.api.AstVisitor visitor, @com.android.annotations.NonNull com.android.tools.lint.detector.api.Node node, @com.android.annotations.NonNull java.lang.String type, @com.android.annotations.NonNull java.lang.String name, boolean isFramework) { }",365624cb4be1d781db8c61f227245b2cbf318501,"visitResourceReference(com.android.tools.lint.detector.api.JavaContext,lombok.ast.AstVisitor,lombok.ast.Node,java.lang.String,java.lang.String,boolean)","visitResourceReference(com.android.tools.lint.detector.api.JavaContext,com.android.tools.lint.detector.api.AstVisitor,com.android.tools.lint.detector.api.Node,java.lang.String,java.lang.String,boolean)",2,54,"@java.lang.SuppressWarnings(""javadoc"") public void visitResourceReference(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.AstVisitor visitor, @com.android.annotations.NonNull lombok.ast.Node node, @com.android.annotations.NonNull java.lang.String type, @com.android.annotations.NonNull java.lang.String name, boolean isFramework) { }",0e369b74f8098c10fdb63272bc84ee098b9006b5,"visitResourceReference(com.android.tools.lint.detector.api.JavaContext,lombok.ast.AstVisitor,lombok.ast.Node,java.lang.String,java.lang.String,boolean)",491722,128,108
358929,core_java_android_net_StringNetworkSpecifier.java,,,,public int hashCode() { return java.util.Objects.hashCode(specifier); },611017e56ddf69711b800d60ad4ae334e7c3e212,,hashCode(),13,4,@java.lang.Override public int hashCode() { return java.util.Objects.hashCode(specifier); },d838af91d71cf2d35bca2f7859f271a754c9a92a,hashCode(),8709,18,24
296409,tests_wifitests_src_com_android_server_wifi_util_InformationElementUtilTest.java,6.0,"@org.junit.Test public void buildCapabilities_wpa1Element() { android.net.wifi.ScanResult.InformationElement ie = new android.net.wifi.ScanResult.InformationElement(); ie.id = android.net.wifi.ScanResult.InformationElement.EID_VSA; ie.bytes = new byte[]{ ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (1)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (2)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (4)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (0)), ((byte) (0)) }; android.net.wifi.ScanResult.InformationElement[] ies = new android.net.wifi.ScanResult.InformationElement[]{ ie }; java.util.BitSet beaconCap = new java.util.BitSet(16); beaconCap.set(4); java.lang.String result = InformationElementUtil.Capabilities.buildCapabilities(ies, beaconCap); assertEquals(""[WPA-PSK]"", result); }",948fa29f7f451ea2ebeff11ca82d94b3ac7d8082,"@org.junit.Test public void buildCapabilities_wpa1Element() { android.net.wifi.ScanResult.InformationElement ie = new android.net.wifi.ScanResult.InformationElement(); ie.id = android.net.wifi.ScanResult.InformationElement.EID_VSA; ie.bytes = new byte[]{ ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (1)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (2)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (4)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (0)), ((byte) (0)) }; android.net.wifi.ScanResult.InformationElement[] ies = new android.net.wifi.ScanResult.InformationElement[]{ ie }; java.util.BitSet beaconCap = new java.util.BitSet(16); beaconCap.set(4); java.lang.String result = InformationElementUtil.Capabilities.buildCapabilities(ies, beaconCap); assertEquals(""[WPA-GROUP_TKIP-PAIRWISE_CCMP+PAIRWISE_TKIP-PSK]"", result); }",7dfe92db43b3932b877c604f34f64b249f393590,buildCapabilities_wpa1Element(),buildCapabilities_wpa1Element(),7,6,"@org.junit.Test public void buildCapabilities_wpa1Element() { android.net.wifi.ScanResult.InformationElement ie = new android.net.wifi.ScanResult.InformationElement(); ie.id = android.net.wifi.ScanResult.InformationElement.EID_VSA; ie.bytes = new byte[]{ ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (1)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (2)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (4)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (0)), ((byte) (0)) }; android.net.wifi.ScanResult.InformationElement[] ies = new android.net.wifi.ScanResult.InformationElement[]{ ie }; java.util.BitSet beaconCap = new java.util.BitSet(16); beaconCap.set(4); com.android.server.wifi.util.InformationElementUtil.Capabilities capabilities = new com.android.server.wifi.util.InformationElementUtil.Capabilities(); capabilities.from(ies, beaconCap); java.lang.String result = capabilities.generateCapabilitiesString(); assertEquals(""[WPA-PSK-CCMP+TKIP]"", result); }",639c4714fc0822861509bc1ca8f11935eb0c934c,buildCapabilities_wpa1Element(),155920,376,397
396032,services_core_java_com_android_server_connectivity_Tethering.java,31.0,"protected void setDnsForwarders(final android.net.Network network, final android.net.LinkProperties lp) { java.lang.String[] dnsServers = mConfig.defaultIPv4DNS; final java.util.Collection<java.net.InetAddress> dnses = lp.getDnsServers(); if ((dnses != null) && (!(dnses.isEmpty()))) { dnsServers = android.net.NetworkUtils.makeStrings(dnses); } try { mNMService.setDnsForwarders(network, dnsServers); mLocalLog.log(java.lang.String.format(""SET DNS forwarders: network=%s dnsServers=[%s]"", network, java.util.Arrays.toString(dnsServers))); } catch (java.lang.Exception e) { mLocalLog.log((""ERROR setting DNS forwarders failed, "" + e)); transitionTo(mSetDnsForwardersErrorState); } }",601e91d33d698c4b329c08f4d6fbbde061ce9f03,"protected void setDnsForwarders(final android.net.Network network, final android.net.LinkProperties lp) { java.lang.String[] dnsServers = mConfig.defaultIPv4DNS; final java.util.Collection<java.net.InetAddress> dnses = lp.getDnsServers(); if ((dnses != null) && (!(dnses.isEmpty()))) { dnsServers = android.net.NetworkUtils.makeStrings(dnses); } try { mNMService.setDnsForwarders(network, dnsServers); mLog.log(java.lang.String.format(""SET DNS forwarders: network=%s dnsServers=%s"", network, java.util.Arrays.toString(dnsServers))); } catch (java.lang.Exception e) { mLog.error((""setting DNS forwarders failed, "" + e)); transitionTo(mSetDnsForwardersErrorState); } }",20f62417898b3b5786628423a08da784e320df26,"setDnsForwarders(android.net.Network,android.net.LinkProperties)","setDnsForwarders(android.net.Network,android.net.LinkProperties)",10,31,"protected void setDnsForwarders(final android.net.Network network, final android.net.LinkProperties lp) { java.lang.String[] dnsServers = mConfig.defaultIPv4DNS; final java.util.Collection<java.net.InetAddress> dnses = lp.getDnsServers(); if ((dnses != null) && (!(dnses.isEmpty()))) { dnsServers = android.net.NetworkUtils.makeStrings(dnses); } try { mNMService.setDnsForwarders(network, dnsServers); mLog.log(java.lang.String.format(""SET DNS forwarders: network=%s dnsServers=%s"", network, java.util.Arrays.toString(dnsServers))); } catch (java.lang.Exception e) { mLog.e((""setting DNS forwarders failed, "" + e)); transitionTo(mSetDnsForwardersErrorState); } }",8c03be27f16a02c2913929163c8735a488d01503,"setDnsForwarders(android.net.Network,android.net.LinkProperties)",12777,193,193
41115,src_java_com_android_internal_telephony_uicc_UiccController.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.internal.telephony.IccFileHandler getIccFileHandler(int family) { if ((mUiccCard) != null) { com.android.internal.telephony.UiccCardApplication app = mUiccCard.getApplication(family); if (app != null) { return app.getIccFileHandler(); } } return null; },6bfc726fb57fb29496ead7c4f5ecca0e2c26378b,,getIccFileHandler(int),22,10,public com.android.internal.telephony.IccFileHandler getIccFileHandler(int family) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { if ((mUiccCard) != null) { com.android.internal.telephony.UiccCardApplication app = mUiccCard.getApplication(family); if (app != null) { return app.getIccFileHandler(); } } return null; } },54f5109e11a38b85732498984433e05a80c93d93,getIccFileHandler(int),499809,77,99
181233,jack_src_com_android_jack_backend_dex_rop_RopBuilderVisitor.java,50.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull private com.android.jack.dx.rop.code.RegisterSpec generateBoxLambda(@javax.annotation.Nonnull com.android.jack.ir.ast.JType boxType, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition, @javax.annotation.CheckForNull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec valueToBox, boolean useTmp, boolean extraInst) { assert (!useTmp) || (destReg == null); com.android.jack.dx.rop.code.RegisterSpec tmpBoxedReg = (useTmp) ? ropReg.getOrCreateTmpRegister(boxType) : destReg; assert tmpBoxedReg != null; com.android.jack.dx.rop.code.RegisterSpecList sourcesBox = com.android.jack.dx.rop.code.RegisterSpecList.make(valueToBox); com.android.jack.dx.rop.code.Insn inst = new com.android.jack.dx.rop.code.PlainCstInsn(com.android.jack.dx.rop.code.Rops.opBoxLambda(valueToBox, sourcesBox), sourcePosition, tmpBoxedReg, sourcesBox, com.android.jack.dx.rop.cst.CstType.intern(com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(boxType))); if (extraInst) { addExtraInstruction(inst); } else { addInstruction(inst); } return tmpBoxedReg; }",183cc4213441eadb8839498daaef741d12ce433f,,"generateBoxLambda(com.android.jack.ir.ast.JType,com.android.jack.dx.rop.code.SourcePosition,com.android.jack.dx.rop.code.RegisterSpec,com.android.jack.dx.rop.code.RegisterSpec,boolean,boolean)",8,6,"@javax.annotation.Nonnull private com.android.jack.dx.rop.code.RegisterSpec generateBoxLambda(@javax.annotation.Nonnull com.android.jack.ir.ast.JType boxType, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition, @javax.annotation.CheckForNull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec regToBox, boolean useTmp, boolean extraInst) { assert (!useTmp) || (destReg == null); com.android.jack.dx.rop.code.RegisterSpec tmpBoxedReg = (useTmp) ? ropReg.getOrCreateTmpRegister(boxType, false) : destReg; assert tmpBoxedReg != null; com.android.jack.dx.rop.code.RegisterSpecList sourcesBox = com.android.jack.dx.rop.code.RegisterSpecList.make(regToBox); com.android.jack.dx.rop.code.Insn inst = new com.android.jack.dx.rop.code.PlainCstInsn(com.android.jack.dx.rop.code.Rops.opBoxLambda(regToBox, sourcesBox), sourcePosition, tmpBoxedReg, sourcesBox, com.android.jack.dx.rop.cst.CstType.intern(com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(boxType))); if (extraInst) { addExtraInstruction(inst); } else { addInstruction(inst); } return tmpBoxedReg; }",7cc9704b9dc3b13bcea626754b23ead47c84ee34,"generateBoxLambda(com.android.jack.ir.ast.JType,com.android.jack.dx.rop.code.SourcePosition,com.android.jack.dx.rop.code.RegisterSpec,com.android.jack.dx.rop.code.RegisterSpec,boolean,boolean)",123550,378,380
200346,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_SimpleDateFormatTest.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_parse_D_dd_yyyy_MMMM() throws java.lang.Exception { checkPatternOnFixedDate(""D dd yyyy MMMM"", ""70 11 2002 March"", ""240 11 2002 March""); }",91e90494ec68d75e21a9e61ed64f8697f646c8a4,,test_parse_D_dd_yyyy_MMMM(),4,34,"public void test_parse_D_dd_yyyy_MMMM() throws java.lang.Exception { org.apache.harmony.tests.java.text.SimpleDateFormatTest.checkPatternOnFixedDate(""D dd yyyy MMMM"", ""70 11 2002 March"", ""240 11 2002 March""); }",3725da2998175aa85bc5055841df27d135debd3d,test_parse_D_dd_yyyy_MMMM(),463411,51,68
420819,tools_ahat_src_heapdump_DiffedFieldValue.java,,,,"@java.lang.Override public boolean equals(java.lang.Object otherObject) { if (otherObject instanceof com.android.ahat.heapdump.DiffedFieldValue) { com.android.ahat.heapdump.DiffedFieldValue other = ((com.android.ahat.heapdump.DiffedFieldValue) (otherObject)); return (((((name.equals(other.name)) && (type.equals(other.type))) && (java.util.Objects.equals(current, other.current))) && (java.util.Objects.equals(baseline, other.baseline))) && (java.util.Objects.equals(added, other.added))) && (java.util.Objects.equals(deleted, other.deleted)); } return false; }",ff8a77cbd2e20973b5c76afbc55025ecfb4a504a,,equals(java.lang.Object),3,0,"@java.lang.Override public boolean equals(java.lang.Object otherObject) { if (otherObject instanceof com.android.ahat.heapdump.DiffedFieldValue) { com.android.ahat.heapdump.DiffedFieldValue other = ((com.android.ahat.heapdump.DiffedFieldValue) (otherObject)); return ((((name.equals(other.name)) && (type.equals(other.type))) && (java.util.Objects.equals(current, other.current))) && (java.util.Objects.equals(baseline, other.baseline))) && (java.util.Objects.equals(status, other.status)); } return false; }",a93d7da4fb95f348c14125d15f05a941a570034f,equals(java.lang.Object),387627,168,151
402813,tools_ahat_test_InstanceTest.java,16.0,"@org.junit.Test public void retainedSize() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatInstance anObject = dump.getDumpedAhatInstance(""anObject""); com.android.ahat.heapdump.AhatSnapshot snapshot = dump.getAhatSnapshot(); long size = anObject.getSize(); assertEquals(size, anObject.getTotalRetainedSize()); assertEquals(size, anObject.getRetainedSize(anObject.getHeap())); for (com.android.ahat.heapdump.AhatHeap heap : snapshot.getHeaps()) { if (!(heap.equals(anObject.getHeap()))) { assertEquals(java.lang.String.format(""For heap '%s'"", heap.getName()), 0, anObject.getRetainedSize(heap)); } } }",58eb524845b3653ffa30f63b3911f23cc12fa9da,"@org.junit.Test public void retainedSize() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatInstance anObject = dump.getDumpedAhatInstance(""anObject""); com.android.ahat.heapdump.AhatSnapshot snapshot = dump.getAhatSnapshot(); com.android.ahat.heapdump.Size size = anObject.getSize(); assertEquals(size, anObject.getTotalRetainedSize()); assertEquals(size, anObject.getRetainedSize(anObject.getHeap())); for (com.android.ahat.heapdump.AhatHeap heap : snapshot.getHeaps()) { if (!(heap.equals(anObject.getHeap()))) { assertEquals(java.lang.String.format(""For heap '%s'"", heap.getName()), new com.android.ahat.heapdump.Size(), anObject.getRetainedSize(heap)); } } }",8d923a94782cd274ec51d3176ad105eae4614bbd,retainedSize(),retainedSize(),3,16,"@org.junit.Test public void retainedSize() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatInstance anObject = dump.getDumpedAhatInstance(""anObject""); com.android.ahat.heapdump.AhatSnapshot snapshot = dump.getAhatSnapshot(); com.android.ahat.heapdump.Size size = anObject.getSize(); assertEquals(size, anObject.getTotalRetainedSize()); assertEquals(size, anObject.getRetainedSize(anObject.getHeap())); for (com.android.ahat.heapdump.AhatHeap heap : snapshot.getHeaps()) { if (!(heap.equals(anObject.getHeap()))) { assertEquals(java.lang.String.format(""For heap '%s'"", heap.getName()), Size.ZERO, anObject.getRetainedSize(heap)); } } }",79959f3a94e59045d4a4ce42f51be3ab129525ed,retainedSize(),281051,225,218
334106,service_java_com_android_server_wifi_WifiConfigStore.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void resetStoreData(boolean shareData) { for (java.util.Map.Entry<java.lang.String, com.android.server.wifi.WifiConfigStore.StoreDataInterface> entry : mStoreDataList.entrySet()) { entry.getValue().resetData(shareData); } }",7a1c09f39650f5f0dc4f5ba22bc1dccfaace58d9,,resetStoreData(boolean),5,25,"private void resetStoreData(boolean shareData) { for (java.util.Map.Entry<java.lang.String, com.android.server.wifi.WifiConfigStore.StoreData> entry : mStoreDataList.entrySet()) { entry.getValue().resetData(shareData); } }",18a15aa98cb17134061c1c78e788d53223a1bf0d,resetStoreData(boolean),384075,66,65
89697,build-system_builder_src_main_java_com_android_builder_sdk_DefaultSdkLoader.java,,,,"@java.lang.Override @com.android.annotations.NonNull public java.util.List<java.io.File> getRepositories() { java.util.List<java.io.File> repositories = com.google.common.collect.Lists.newArrayList(); java.io.File androidRepo = new java.io.File(mSdkLocation, (((((com.android.SdkConstants.FD_EXTRAS) + (java.io.File.separator)) + ""android"") + (java.io.File.separator)) + (com.android.SdkConstants.FD_M2_REPOSITORY))); if (androidRepo.isDirectory()) { repositories.add(androidRepo); } java.io.File googleRepo = new java.io.File(mSdkLocation, (((((com.android.SdkConstants.FD_EXTRAS) + (java.io.File.separator)) + ""google"") + (java.io.File.separator)) + (com.android.SdkConstants.FD_M2_REPOSITORY))); if (googleRepo.isDirectory()) { repositories.add(googleRepo); } return repositories; }",44f0d3b9e0a9d35426a8559964321d3d37ae1590,,getRepositories(),5,4,@java.lang.Override @com.android.annotations.NonNull public com.google.common.collect.ImmutableList<java.io.File> getRepositories() { return mRepositories; },60694877cf51ec0f5eeb13993ba85fe490d02c1b,getRepositories(),206494,243,40
42760,eclipse_plugins_com.android.ide.eclipse.gldebugger_src_com_android_ide_eclipse_gltrace_GLTraceCollectorDialog.java,5.0,"@java.lang.Override public void run() { if ((mTraceFileWriter) == null) { return; } while (!(mIsCancelled)) { final java.lang.String frameCount = java.lang.Integer.toString(mTraceFileWriter.getCurrentFrameCount()); double fileSize = mTraceFileWriter.getCurrentFileSize(); fileSize /= 1024 * 1024; final java.lang.String frameSize = java.lang.String.format(""%.2g MB"", fileSize); org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (mFramesCollectedLabel.isDisposed()) { return; } mFramesCollectedLabel.setText(frameCount); mTraceFileSizeLabel.setText(frameSize); mFramesCollectedLabel.pack(); mTraceFileSizeLabel.pack(); } }); try { java.lang.Thread.sleep(com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.StatusRefreshTask.REFRESH_INTERVAL); } catch (java.lang.InterruptedException e) { return; } } }",fd28362454b6ec1e2aceb840380e118d197bc7b3,@java.lang.Override public void run() { if ((mTraceFileWriter) == null) { return; } while (!(mIsCancelled)) { final java.lang.String frameCount = java.lang.Integer.toString(mTraceFileWriter.getCurrentFrameCount()); double fileSize = mTraceFileWriter.getCurrentFileSize(); fileSize /= 1024 * 1024; final java.lang.String frameSize = com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.SIZE_FORMATTER.format(fileSize); org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (mFramesCollectedLabel.isDisposed()) { return; } mFramesCollectedLabel.setText(frameCount); mTraceFileSizeLabel.setText(frameSize); mFramesCollectedLabel.pack(); mTraceFileSizeLabel.pack(); } }); try { java.lang.Thread.sleep(com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.StatusRefreshTask.REFRESH_INTERVAL); } catch (java.lang.InterruptedException e) { return; } } },ed7fc96cc2e6a180a2c39fd84cc61e0e003dc6e5,run(),run(),3,5,"@java.lang.Override public void run() { if ((mTraceFileWriter) == null) { return; } while (!(mIsCancelled)) { final java.lang.String frameCount = java.lang.Integer.toString(mTraceFileWriter.getCurrentFrameCount()); double fileSize = mTraceFileWriter.getCurrentFileSize(); fileSize /= 1024 * 1024; final java.lang.String frameSize = (com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.SIZE_FORMATTER.format(fileSize)) + "" MB""; org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (mFramesCollectedLabel.isDisposed()) { return; } mFramesCollectedLabel.setText(frameCount); mTraceFileSizeLabel.setText(frameSize); mFramesCollectedLabel.pack(); mTraceFileSizeLabel.pack(); } }); try { java.lang.Thread.sleep(com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.StatusRefreshTask.REFRESH_INTERVAL); } catch (java.lang.InterruptedException e) { return; } } }",2a61d5197406a860065fdb8c40b994c41cabfc05,run(),224979,248,253
119419,sdklib_src_main_java_com_android_sdklib_repository_remote_RemotePkgInfo.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public long getDownloadSize() { return myDownloadSize; },1e629c4708fc832ef7ce53d1b8b30643dc9eda28,,getDownloadSize(),2,6,public long getDownloadSize() { return mDownloadSize; },a0b075312685f4b08cc44ffbf30834fea5101619,getDownloadSize(),225037,13,13
108004,luni_src_main_java_javax_net_ssl_DefaultHostnameVerifier.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static int countDomainNameLabelsExcludingRoot(java.lang.String hostname) { int result = 1; int hostnameLength = hostname.length(); int delimiterIndex = hostname.indexOf('.'); while ((delimiterIndex != (-1)) && (delimiterIndex != (hostnameLength - 1))) { result++; delimiterIndex = hostname.indexOf('.', (delimiterIndex + 1)); } return result; }",dbf4c548ee395fd3c43e10a8a9e6802279f05cfc,,countDomainNameLabelsExcludingRoot(java.lang.String),3,1,private static boolean containsAtLeastTwoDomainNameLabelsExcludingRoot(java.lang.String hostname) { int delimiterIndex = hostname.indexOf('.'); if (delimiterIndex == (-1)) { return false; } if (delimiterIndex == ((hostname.length()) - 1)) { return false; } return true; },92ce5c5fae3ef09b66f645072d0bafab632a154a,containsAtLeastTwoDomainNameLabelsExcludingRoot(java.lang.String),101843,78,63
122533,jack_src_com_android_jack_lookup_JLookup.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull protected com.android.jack.ir.ast.JPackage getPackage(@javax.annotation.Nonnull java.lang.String packageName) throws com.android.jack.ir.ast.JPackageLookupException { synchronized(packages) { com.android.jack.ir.ast.JPackage found = packages.get(packageName); if (found == null) { assert com.android.jack.util.NamingTools.isPackageBinaryName(packageName); int separatorIndex = packageName.lastIndexOf(com.android.jack.lookup.JLookup.PACKAGE_SEPARATOR); com.android.jack.ir.ast.JPackage parent; java.lang.String simplePackageName; if (separatorIndex == (-1)) { parent = topLevelPackage; simplePackageName = packageName; } else { parent = getPackage(packageName.substring(0, separatorIndex)); simplePackageName = packageName.substring((separatorIndex + 1)); } if (isPhantom) { found = parent.getOrCreateSubPackage(simplePackageName); } else { found = parent.getSubPackage(simplePackageName); } packages.put(packageName, found); } return found; } }",c097e0685096805bece2318d72e20b04b334e15d,,getPackage(java.lang.String),3,15,"@javax.annotation.Nonnull protected com.android.jack.ir.ast.JPackage getPackage(@javax.annotation.Nonnull java.lang.String packageName, @javax.annotation.Nonnull com.android.jack.lookup.JLookup.Adapter<? extends com.android.jack.ir.ast.JType> adapter) throws com.android.jack.ir.ast.JPackageLookupException { synchronized(packages) { com.android.jack.ir.ast.JPackage found = packages.get(packageName); if (found == null) { assert com.android.jack.util.NamingTools.isPackageBinaryName(packageName); int separatorIndex = packageName.lastIndexOf(com.android.jack.lookup.JLookup.PACKAGE_SEPARATOR); com.android.jack.ir.ast.JPackage parent; java.lang.String simplePackageName; if (separatorIndex == (-1)) { parent = topLevelPackage; simplePackageName = packageName; } else { parent = getPackage(packageName.substring(0, separatorIndex), adapter); simplePackageName = packageName.substring((separatorIndex + 1)); } found = adapter.getPackage(parent, simplePackageName); packages.put(packageName, found); } return found; } }",7aa5407114b080334ec465dc4e627c907860bd0a,"getPackage(java.lang.String,com.android.jack.lookup.JLookup$Adapter)",272217,239,256
618774,telephony_java_android_telephony_mbms_DownloadRequest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; },dc1fd77b80a235982e2750078a88958acff74033,,fromDownloadRequest(android.telephony.mbms.DownloadRequest),3,22,"public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri, other.destinationUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; }",c4efb0e72188afb7a6a2eaf3b7b20197958e5942,fromDownloadRequest(android.telephony.mbms.DownloadRequest),525539,95,100
349432,service_java_com_android_server_wifi_WifiNative.java,116.0,"public boolean p2pGroupRemove(java.lang.String iface) { if (android.text.TextUtils.isEmpty(iface)) return false; if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.groupRemove(iface); } else { synchronized(com.android.server.wifi.WifiNative.sLock) { return doBooleanCommandNative((((""IFNAME="" + iface) + "" P2P_GROUP_REMOVE "") + iface)); } } }",4f508842b86e0893e131c3a2828c04ffa8ddd871,public boolean p2pGroupRemove(java.lang.String iface) { if (android.text.TextUtils.isEmpty(iface)) return false; return mSupplicantP2pIfaceHal.groupRemove(iface); },713db0266e446f127256bb043b3aec467cc1eca2,p2pGroupRemove(java.lang.String),p2pGroupRemove(java.lang.String),17,115,public boolean p2pGroupRemove(java.lang.String iface) { return mSupplicantP2pIfaceHal.groupRemove(iface); },9fdd10f2a6b409f1cf1c42df9ec1a66417e4a7cc,p2pGroupRemove(java.lang.String),6697,51,36
277758,dx_src_com_android_jack_dx_dex_file_ImportedCodeItem.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void visit(com.android.jack.dx.io.instructions.DecodedInstruction[] all, com.android.jack.dx.io.instructions.DecodedInstruction decodedInst) { remappedInstructions[((remappingIndex)++)] = decodedInst.withIndex(cstIndexMap.getRemappedCstBaseMethodRefIndex(file, decodedInst.getIndex()), cstIndexMap.getRemappedCstPrototypeRefIndex(file, decodedInst.getSecondIndex())); }",ab944331dcd5e54e304f29e01e6b2714ab3936e9,,"visit(com.android.jack.dx.io.instructions.DecodedInstruction[],com.android.jack.dx.io.instructions.DecodedInstruction)",15,7,"@java.lang.Override public void visit(com.android.jack.dx.io.instructions.DecodedInstruction[] all, com.android.jack.dx.io.instructions.DecodedInstruction decodedInst) { remappedInstructions[((remappingIndex)++)] = decodedInst.withIndex(cstIndexMap.getRemappedCstBaseMethodRefIndex(file, decodedInst.getFirstIndex()), cstIndexMap.getRemappedCstPrototypeRefIndex(file, decodedInst.getSecondIndex())); }",b7af95debfd294f78edef426aa47098642313058,"visit(com.android.jack.dx.io.instructions.DecodedInstruction[],com.android.jack.dx.io.instructions.DecodedInstruction)",513405,110,111
178622,src_com_android_htmlviewer_HTMLViewerActivity.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void loadUrl() { final android.content.Intent intent = getIntent(); if (intent.hasExtra(Intent.EXTRA_TITLE)) { setTitle(intent.getStringExtra(Intent.EXTRA_TITLE)); } mWebView.loadUrl(java.lang.String.valueOf(intent.getData())); },14a02e8b52d644da57c977ecabdc3e127cfe13e1,,loadUrl(),7,0,private void loadUrl() { if (mIntent.hasExtra(Intent.EXTRA_TITLE)) { setTitle(mIntent.getStringExtra(Intent.EXTRA_TITLE)); } mWebView.loadUrl(java.lang.String.valueOf(mIntent.getData())); },6ebaccd5cf9caf0f91c11595c0f6e9447c234545,loadUrl(),264284,61,54
319492,tests_src_com_android_networkrecommendation_WifiWakeupControllerTest.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void wifiNotEnabled_userDisablesWifiNearSavedNetwork_thenRemovesNetwork_thenStays() { when(mWifiManager.getConfiguredNetworks()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION), com.google.android.collect.Lists.<android.net.wifi.WifiConfiguration>newArrayList()); when(mWifiManager.getScanResults()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)).thenReturn(com.google.android.collect.Lists.<android.net.wifi.ScanResult>newArrayList()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)); when(mWifiWakeupNetworkSelector.selectNetwork(anyMap(), anyList())).thenReturn(null); com.android.networkrecommendation.Util.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.Util.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_DISABLED); com.android.networkrecommendation.Util.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mWifiManager, never()).setWifiEnabled(true); }",ca9be44d176b0d25287d8ad6de7371e37e9b7beb,,wifiNotEnabled_userDisablesWifiNearSavedNetwork_thenRemovesNetwork_thenStays(),5,7,"@org.junit.Test public void wifiNotEnabled_userDisablesWifiNearSavedNetwork_thenRemovesNetwork_thenStays() { when(mWifiManager.getConfiguredNetworks()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION), com.google.android.collect.Lists.<android.net.wifi.WifiConfiguration>newArrayList()); when(mWifiManager.getScanResults()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)).thenReturn(com.google.android.collect.Lists.<android.net.wifi.ScanResult>newArrayList()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)); when(mWifiWakeupNetworkSelector.selectNetwork(anyMap(), anyList())).thenReturn(null); com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.TestUtil.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_DISABLED); com.android.networkrecommendation.TestUtil.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mWifiManager, never()).setWifiEnabled(true); }",49188a34234e9d6a60a3185ea6d779353918bf91,wifiNotEnabled_userDisablesWifiNearSavedNetwork_thenRemovesNetwork_thenStays(),19757,422,429
335040,service_java_com_android_server_wifi_SupplicantP2pIfaceHal.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean flush() { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(""flush()""); try { result.setResult(mISupplicantP2pIface.flush()); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",274de6bc9a78cee32985eff757cd24d1beb6ff34,,flush(),23,23,"public boolean flush() { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""flush""))) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(""flush()""); try { result.setResult(mISupplicantP2pIface.flush()); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",5634d9871d9de9e9bef0391812485a6581c2a993,flush(),258141,187,189
184035,tests_java_app_src_android_aidl_tests_TestServiceClient.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkApplicationExceptions(android.aidl.tests.ITestService service) throws android.aidl.tests.TestServiceClient.TestFailException { mLog.log(""Checking application exceptions...""); for (int i = -1; i < 2; ++i) { try { service.ThrowApplicationException(i); } catch (android.os.RemoteException ex) { mLog.logAndThrow((""Service threw RemoteException: "" + (ex.toString()))); } catch (android.os.ApplicationSpecificException ex) { if ((ex.mErrorCode) != i) { mLog.logAndThrow((""Service threw wrong error code: "" + i)); } } } mLog.log(""...application exceptions work""); }",9effe843d3e3d0926c7cad8d3725456ae0666e4a,,checkApplicationExceptions(android.aidl.tests.ITestService),6,4,"private void checkServiceSpecificExceptions(android.aidl.tests.ITestService service) throws android.aidl.tests.TestServiceClient.TestFailException { mLog.log(""Checking application exceptions...""); for (int i = -1; i < 2; ++i) { try { service.ThrowServiceException(i); } catch (android.os.RemoteException ex) { mLog.logAndThrow((""Service threw RemoteException: "" + (ex.toString()))); } catch (android.os.ServiceSpecificException ex) { if ((ex.errorCode) != i) { mLog.logAndThrow((""Service threw wrong error code: "" + i)); } } } mLog.log(""...application exceptions work""); }",b96f390b3a49f67b3e0e0ab0230e8a87606681e0,checkServiceSpecificExceptions(android.aidl.tests.ITestService),407428,155,154
269973,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_channels_FileChannelTest.java,0.0,"public void test_readLByteBufferJ_Position_As_Long() throws java.lang.Exception { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(org.apache.harmony.tests.java.nio.channels.FileChannelTest.CAPACITY); try { readOnlyFileChannel.read(readBuffer, java.lang.Long.MAX_VALUE); } catch (java.io.IOException expected) { } }",6d1eb3bf8448856c5f9d2cbc2fa0cfe77918be5f,"public void test_readLByteBufferJ_Position_As_Long() throws java.lang.Exception { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(org.apache.harmony.tests.java.nio.channels.FileChannelTest.CAPACITY); try { readOnlyFileChannel.read(readBuffer, java.lang.Long.MAX_VALUE); fail(""Should have thrown""); } catch (java.io.IOException expected) { } }",bce9cb05a92fb7b6a5b0ccb92572e3d931070c7f,test_readLByteBufferJ_Position_As_Long(),test_readLByteBufferJ_Position_As_Long(),9,0,"public void test_readLByteBufferJ_Position_As_Long() throws java.lang.Exception { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(org.apache.harmony.tests.java.nio.channels.FileChannelTest.CAPACITY); try { readOnlyFileChannel.read(readBuffer, java.lang.Long.MAX_VALUE); fail(); } catch (java.io.IOException expected) { } }",a033ad6699e3622310e043badac4befba92a16f7,test_readLByteBufferJ_Position_As_Long(),50978,98,94
47692,ddms_libs_ddmuilib_src_com_android_ddmuilib_SysinfoPanel.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void readGfxInfoDataset(java.io.BufferedReader br) throws java.io.IOException { updateBarChartDataSet(com.android.ddmuilib.SysinfoPanel.BugReportParser.parseGfxInfo(br), ""Rendering time per frame""); }",b47cd4bb09588c5583f896eefef3b383dfb5adc7,,readGfxInfoDataset(java.io.BufferedReader),4,34,"private void readGfxInfoDataset(java.io.BufferedReader br) throws java.io.IOException { updateBarChartDataSet(com.android.ddmuilib.SysinfoPanel.BugReportParser.parseGfxInfo(br), ((mGfxPackageName) == null ? """" : mGfxPackageName)); }",617750019cfd334bb81759f5188e5a9c75be0eab,readGfxInfoDataset(java.io.BufferedReader),514552,57,69
134391,rpclib_src_test_java_com_android_tools_rpclib_binary_HandleTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testHandleAsKey() { java.util.Set<com.android.tools.rpclib.binary.Handle> set = new java.util.HashSet<com.android.tools.rpclib.binary.Handle>(); com.android.tools.rpclib.binary.Handle handle1 = new com.android.tools.rpclib.binary.Handle(com.android.tools.rpclib.binary.HandleTest.handleBytes); set.add(handle1); assertTrue(set.contains(handle1)); com.android.tools.rpclib.binary.Handle handle2 = new com.android.tools.rpclib.binary.Handle(com.android.tools.rpclib.binary.HandleTest.handleBytes); set.add(handle2); assertTrue(set.contains(handle2)); assertEquals(set.size(), 1); }",ca0e3d41dc0624dc9418254d771e6dc13bf3ace8,,testHandleAsKey(),2,1,"public void testHandleAsKey() { java.util.Set<com.android.tools.rpclib.binary.Handle> set = new java.util.HashSet<com.android.tools.rpclib.binary.Handle>(); com.android.tools.rpclib.binary.Handle handle1 = new com.android.tools.rpclib.binary.Handle(com.android.tools.rpclib.binary.HandleTest.handleBytes); set.add(handle1); assertTrue(set.contains(handle1)); assertEquals(1, set.size()); com.android.tools.rpclib.binary.Handle sameHandle = new com.android.tools.rpclib.binary.Handle(com.android.tools.rpclib.binary.HandleTest.handleBytes); set.add(sameHandle); assertTrue(set.contains(sameHandle)); assertEquals(1, set.size()); com.android.tools.rpclib.binary.Handle zeroHandle = new com.android.tools.rpclib.binary.Handle(new byte[20]); set.add(zeroHandle); assertTrue(set.contains(zeroHandle)); assertEquals(2, set.size()); }",657dc49289f9490032e12f695ab6327f3e53cfc9,testHandleAsKey(),447628,177,240
91995,luni_src_main_java_libcore_io_Posix.java,4.0,"public native long lseek(java.io.FileDescriptor fd, long offset, int whence) throws libcore.io.ErrnoException;",ad6d7f8fb0e7798849b6ed494aa9038f6600b690,"public native long lseek(java.io.FileDescriptor fd, long offset, int whence) throws android.os.ErrnoException;",071e141cdce5f59e03a79033ab99b2c3ae35a99e,"lseek(java.io.FileDescriptor,long,int)","lseek(java.io.FileDescriptor,long,int)",3,4,"public native long lseek(java.io.FileDescriptor fd, long offset, int whence) throws android.system.ErrnoException;",59d53e2fb33a4df5dbb2c178ba962ca124e99ab4,"lseek(java.io.FileDescriptor,long,int)",169924,29,29
303777,dx_src_com_android_jack_dx_io_DexBuffer.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@javax.annotation.Nonnull private java.util.List<java.lang.Integer> readCallSiteIds() { if ((tableOfContents.apiLevel) < (com.android.jack.dx.dex.DexFormat.API_ANDROID_O)) { java.util.Collections.emptyList(); } com.android.jack.dx.io.DexBuffer.Section callSiteIds = openInternal(tableOfContents.callSiteIds.off); java.lang.Integer[] result = new java.lang.Integer[tableOfContents.callSiteIds.size]; for (int i = 0; i < (tableOfContents.callSiteIds.size); ++i) { result[i] = java.lang.Integer.valueOf(callSiteIds.readInt()); } return java.util.Arrays.asList(result); },9daa87502a9f17c2bf3a9d5890c4767d8c2a72bd,,readCallSiteIds(),7,14,@javax.annotation.Nonnull private java.util.List<java.lang.Integer> readCallSiteIds() { if ((tableOfContents.apiLevel) < (com.android.jack.dx.dex.DexFormat.API_ANDROID_O)) { return java.util.Collections.emptyList(); } com.android.jack.dx.io.DexBuffer.Section callSiteIds = openInternal(tableOfContents.callSiteIds.off); java.lang.Integer[] result = new java.lang.Integer[tableOfContents.callSiteIds.size]; for (int i = 0; i < (tableOfContents.callSiteIds.size); ++i) { result[i] = java.lang.Integer.valueOf(callSiteIds.readInt()); } return java.util.Arrays.asList(result); },16d99c1d29685ada0800c56e4d23eaa409f35fe8,readCallSiteIds(),12627,177,178
22045,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationComposite.java,25.0,public boolean isProjectTheme() { return (mThemeCombo.getSelectionIndex()) >= (mPlatformThemeCount); },e85151b63c36000416e3675506e09969a8917587,public boolean isProjectTheme() { java.lang.String theme = mThemeCombo.getItem(mThemeCombo.getSelectionIndex()); return mProjectThemes.contains(theme); },2ded5b7ec4817ee19281a6c2fa313eb6339f517d,isProjectTheme(),isProjectTheme(),8,26,public boolean isProjectTheme() { return mIsProjectTheme.get(mThemeCombo.getSelectionIndex()).booleanValue(); },76c551bdac9c68d633033156be9fdaebbeb2bb8e,isProjectTheme(),474114,38,26
539006,tests_net_java_com_android_server_IpSecServiceTest.java,7.0,"@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); if ((IpSecManager.Status.OK) != (newUdpEncapSocket.status)) { break; } openUdpEncapSockets.add(newUdpEncapSocket); } assertTrue((((openUdpEncapSockets.size()) > 0) && ((openUdpEncapSockets.size()) < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS)))); IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); for (IpSecUdpEncapResponse openSocket : openUdpEncapSockets) { mIpSecService.closeUdpEncapsulationSocket(openSocket.resourceId); openSocket.fileDescriptor.close(); } }",17aaf751c420d8583fe2594806daedb76f17dea0,"@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); if ((IpSecManager.Status.OK) != (newUdpEncapSocket.status)) { break; } openUdpEncapSockets.add(newUdpEncapSocket); } assertTrue(""Number of open UDP encap sockets is negative"", ((openUdpEncapSockets.size()) > 0)); assertTrue(""Number of open UDP encap sockets is out of bound"", ((openUdpEncapSockets.size()) < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS))); IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); for (IpSecUdpEncapResponse openSocket : openUdpEncapSockets) { mIpSecService.closeUdpEncapsulationSocket(openSocket.resourceId); openSocket.fileDescriptor.close(); } }",a05a8a3f6e06679ed5df4e14729102332343ab05,testSocketResourceTrackerLimitation(),testSocketResourceTrackerLimitation(),3,7,"@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); if ((IpSecManager.Status.OK) != (newUdpEncapSocket.status)) { break; } openUdpEncapSockets.add(newUdpEncapSocket); } assertTrue(""No UDP encap socket was open"", (!(openUdpEncapSockets.isEmpty()))); assertTrue(""Number of open UDP encap sockets is out of bound"", ((openUdpEncapSockets.size()) < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS))); IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); for (IpSecUdpEncapResponse openSocket : openUdpEncapSockets) { mIpSecService.closeUdpEncapsulationSocket(openSocket.resourceId); openSocket.fileDescriptor.close(); } }",34e8d980b1b262ab119c36adf1f0c05f08d7421f,testSocketResourceTrackerLimitation(),78252,458,452
143100,services_core_java_com_android_server_am_ActivityManagerService.java,319.0,"private final void handleAppDiedLocked(com.android.server.am.ProcessRecord app, boolean restarting, boolean allowRestart) { int pid = app.pid; boolean kept = cleanUpApplicationRecordLocked(app, restarting, allowRestart, (-1)); if ((!kept) && (!restarting)) { removeLruProcessLocked(app); if (pid > 0) { com.android.server.am.ProcessList.remove(pid); } } if ((mProfileProc) == app) { clearProfilerLocked(); } boolean hasVisibleActivities = mStackSupervisor.handleAppDiedLocked(app); app.activities.clear(); if ((app.instrumentationClass) != null) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, (((""Crash of app "" + (app.processName)) + "" running instrumentation "") + (app.instrumentationClass))); android.os.Bundle info = new android.os.Bundle(); info.putString(""shortMsg"", ""Process crashed.""); finishInstrumentationLocked(app, Activity.RESULT_CANCELED, info); } if (!restarting) { if (!(mStackSupervisor.resumeTopActivitiesLocked())) { if (hasVisibleActivities) { mStackSupervisor.ensureActivitiesVisibleLocked(null, 0); } } } }",431255f15ec4118aa12232a8437fe00a722c0693,"private final void handleAppDiedLocked(com.android.server.am.ProcessRecord app, boolean restarting, boolean allowRestart) { int pid = app.pid; boolean kept = cleanUpApplicationRecordLocked(app, restarting, allowRestart, (-1)); if ((!kept) && (!restarting)) { removeLruProcessLocked(app); if (pid > 0) { com.android.server.am.ProcessList.remove(pid); } } if ((mProfileProc) == app) { clearProfilerLocked(); } boolean hasVisibleActivities = mStackSupervisor.handleAppDiedLocked(app); app.activities.clear(); if ((app.instrumentationClass) != null) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, (((""Crash of app "" + (app.processName)) + "" running instrumentation "") + (app.instrumentationClass))); android.os.Bundle info = new android.os.Bundle(); info.putString(""shortMsg"", ""Process crashed.""); finishInstrumentationLocked(app, Activity.RESULT_CANCELED, info); } if ((!restarting) && hasVisibleActivities) { if (!(mStackSupervisor.resumeTopActivitiesLocked())) { mStackSupervisor.ensureActivitiesVisibleLocked(null, 0); } } }",171dfcbff088b0b03b2fc28a997bed71072126d4,"handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean,boolean)","handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean,boolean)",2,321,"private final void handleAppDiedLocked(com.android.server.am.ProcessRecord app, boolean restarting, boolean allowRestart) { int pid = app.pid; boolean kept = cleanUpApplicationRecordLocked(app, restarting, allowRestart, (-1)); if ((!kept) && (!restarting)) { removeLruProcessLocked(app); if (pid > 0) { com.android.server.am.ProcessList.remove(pid); } } if ((mProfileProc) == app) { clearProfilerLocked(); } boolean hasVisibleActivities = mStackSupervisor.handleAppDiedLocked(app); app.activities.clear(); if ((app.instrumentationClass) != null) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, (((""Crash of app "" + (app.processName)) + "" running instrumentation "") + (app.instrumentationClass))); android.os.Bundle info = new android.os.Bundle(); info.putString(""shortMsg"", ""Process crashed.""); finishInstrumentationLocked(app, Activity.RESULT_CANCELED, info); } if (((!restarting) && hasVisibleActivities) && (!(mStackSupervisor.resumeTopActivitiesLocked()))) { mStackSupervisor.ensureActivitiesVisibleLocked(null, 0); } }",27c4c8d5a2a34bbc3d00e7dc29b23bdcd5522d31,"handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean,boolean)",458850,279,278
420819,tools_ahat_src_heapdump_DiffedFieldValue.java,,,,"public static com.android.ahat.heapdump.DiffedFieldValue matched(com.android.ahat.heapdump.FieldValue current, com.android.ahat.heapdump.FieldValue baseline) { return new com.android.ahat.heapdump.DiffedFieldValue(current.name, current.type, current.value, baseline.value, false, false); }",dca7b21e152630c080c0fb46837e815905812d04,,"matched(com.android.ahat.heapdump.FieldValue,com.android.ahat.heapdump.FieldValue)",3,3,"public static com.android.ahat.heapdump.DiffedFieldValue matched(com.android.ahat.heapdump.FieldValue current, com.android.ahat.heapdump.FieldValue baseline) { return new com.android.ahat.heapdump.DiffedFieldValue(current.name, current.type, current.value, baseline.value, com.android.ahat.heapdump.DiffedFieldValue.Status.MATCHED); }",67b149cd1f4a1cb2722a421ebb939d9c32a99d30,"matched(com.android.ahat.heapdump.FieldValue,com.android.ahat.heapdump.FieldValue)",387623,81,96
171820,test_004-ThreadStress_src_Main.java,6.0,@java.lang.Override public boolean perform() { try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException ignored) { } return true; },802e050b8a468b692b5f28258df1cba0f1f7d4fc,@java.lang.Override public boolean perform() { try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException ignored) { } catch (java.lang.OutOfMemoryError ignore) { } return true; },119939fd5051410c454b86aeff83fe990b7b202c,perform(),perform(),2,0,@java.lang.Override public boolean perform() { try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException ignored) { } return true; },802e050b8a468b692b5f28258df1cba0f1f7d4fc,perform(),258008,49,38
153181,test_422-type-conversion_src_Main.java,11.0,static byte $opt$CharToByte(char a) { if (Main.doThrow) throw new java.lang.Error(); return ((byte) (a)); },5e9e8074b80f79bde10bc244525a1db360ddaa27,static byte $opt$noinline$CharToByte(char a) { return ((byte) (a)); },609ca098c144e5c7a4191e43c2bc874ad41d4942,$opt$CharToByte(char),$opt$noinline$CharToByte(char),5,39,static byte $opt$noinline$CharToByte(char a) { if (Main.doThrow) throw new java.lang.Error(); return ((byte) (a)); },ce823a35bbebbaf9befc3efad05892cf523edbd4,$opt$noinline$CharToByte(char),516523,26,40
48539,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLX509Certificate.java,,,,@java.lang.Override public java.security.Principal getSubjectDN() { return null; },a8ab6f679804ef1ae7ff8d816952576e2ca566cf,,getSubjectDN(),17,38,@java.lang.Override public java.security.Principal getSubjectDN() { return getSubjectX500Principal(); },fc0fc72c8844793b8302fbed12fe8a2a1aeb9e15,getSubjectDN(),437047,21,25
153147,jack_src_com_android_jack_Options.java,2.0,public void setImportedLibraries(@javax.annotation.Nonnull java.util.List<java.io.File> importedLibraries) { this.importedLibraries = importedLibraries; },60430f09e53644cd9610a4fc37c270dca0184a82,public void setImportedLibraries(@javax.annotation.Nonnull java.util.List<java.io.File> importedLibraries) { this.importedLibraries = new java.util.ArrayList<java.io.File>(importedLibraries); },1b2bab25897a4a60368116ddca3199814e4c8c6b,setImportedLibraries(java.util.List),setImportedLibraries(java.util.List),3,2,public void setImportedLibraries(@javax.annotation.Nonnull java.util.List<java.io.File> importedLibraries) { this.importedLibraries = importedLibraries; },60430f09e53644cd9610a4fc37c270dca0184a82,setImportedLibraries(java.util.List),166094,52,37
211850,ojluni_src_main_java_sun_security_jca_ProviderList.java,2.0,public java.lang.String toString() { return java.util.Arrays.asList(configs).toString(); },60cc578999b6f12bfd511ea98d869e413dd90901,public java.lang.String toString() { return configs.toString(); },fd3f48f12cb30f5ff9790eadb656f9afc268dbcc,toString(),toString(),4,2,public java.lang.String toString() { return java.util.Arrays.asList(configs).toString(); },60cc578999b6f12bfd511ea98d869e413dd90901,toString(),291449,16,25
111075,updater_src_com_intellij_updater_Patch.java,16.0,"private void read(java.io.InputStream patchIn) throws java.io.IOException { java.util.List<com.intellij.updater.PatchAction> newActions = new java.util.ArrayList<com.intellij.updater.PatchAction>(); @java.lang.SuppressWarnings(""IOResourceOpenedButNotSafelyClosed"") java.io.DataInputStream in = new java.io.DataInputStream(patchIn); int size = in.readInt(); while ((size--) > 0) { int key = in.readInt(); com.intellij.updater.PatchAction a; switch (key) { case com.intellij.updater.Patch.CREATE_ACTION_KEY : a = new com.intellij.updater.CreateAction(in); break; case com.intellij.updater.Patch.UPDATE_ACTION_KEY : a = new com.intellij.updater.UpdateAction(in); break; case com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY : a = new com.intellij.updater.UpdateZipAction(in); break; case com.intellij.updater.Patch.DELETE_ACTION_KEY : a = new com.intellij.updater.DeleteAction(in); break; case com.intellij.updater.Patch.DELETE_ZIP_ACTION_KEY : a = new com.intellij.updater.DeleteZipAction(in); break; default : throw new java.lang.RuntimeException((""Unknown action type "" + key)); } newActions.add(a); } myActions = newActions; }",c5457af95636d51c609929e94b07439927aca9c5,"private void read(java.io.InputStream patchIn) throws java.io.IOException { java.util.List<com.intellij.updater.PatchAction> newActions = new java.util.ArrayList<com.intellij.updater.PatchAction>(); @java.lang.SuppressWarnings(""IOResourceOpenedButNotSafelyClosed"") java.io.DataInputStream in = new java.io.DataInputStream(patchIn); isBinary = in.readBoolean(); isStrict = in.readBoolean(); myOldBuild = in.readUTF(); myNewBuild = in.readUTF(); int size = in.readInt(); while ((size--) > 0) { int key = in.readInt(); com.intellij.updater.PatchAction a; switch (key) { case com.intellij.updater.Patch.CREATE_ACTION_KEY : a = new com.intellij.updater.CreateAction(this, in); break; case com.intellij.updater.Patch.UPDATE_ACTION_KEY : a = new com.intellij.updater.UpdateAction(this, in); break; case com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY : a = new com.intellij.updater.UpdateZipAction(this, in); break; case com.intellij.updater.Patch.DELETE_ACTION_KEY : a = new com.intellij.updater.DeleteAction(this, in); break; case com.intellij.updater.Patch.VALIDATE_ACTION_KEY : a = new com.intellij.updater.ValidateAction(this, in); break; default : throw new java.lang.RuntimeException((""Unknown action type "" + key)); } newActions.add(a); } myActions = newActions; }",c5e362275b5b9a66d014df08988f9cfe2cbd4811,read(java.io.InputStream),read(java.io.InputStream),7,16,"private void read(java.io.InputStream patchIn) throws java.io.IOException { java.util.List<com.intellij.updater.PatchAction> newActions = new java.util.ArrayList<com.intellij.updater.PatchAction>(); @java.lang.SuppressWarnings(""IOResourceOpenedButNotSafelyClosed"") java.io.DataInputStream in = new java.io.DataInputStream(patchIn); myOldBuild = in.readUTF(); myNewBuild = in.readUTF(); myIsBinary = in.readBoolean(); myIsStrict = in.readBoolean(); int size = in.readInt(); while ((size--) > 0) { int key = in.readInt(); com.intellij.updater.PatchAction a; switch (key) { case com.intellij.updater.Patch.CREATE_ACTION_KEY : a = new com.intellij.updater.CreateAction(this, in); break; case com.intellij.updater.Patch.UPDATE_ACTION_KEY : a = new com.intellij.updater.UpdateAction(this, in); break; case com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY : a = new com.intellij.updater.UpdateZipAction(this, in); break; case com.intellij.updater.Patch.DELETE_ACTION_KEY : a = new com.intellij.updater.DeleteAction(this, in); break; case com.intellij.updater.Patch.VALIDATE_ACTION_KEY : a = new com.intellij.updater.ValidateAction(this, in); break; default : throw new java.lang.RuntimeException((""Unknown action type "" + key)); } newActions.add(a); } myActions = newActions; }",83c581c424b05c4207921daf102103a25cdf4433,read(java.io.InputStream),121083,378,380
534821,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,,,,"@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_DisconnectAudio() { setUpAudioOnState(); reset(mHeadsetStateMachine); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioDisconnecting.class)); verify(mHeadsetService, never()).sendBroadcastAsUser(any(android.content.Intent.class), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }",30a7e37efec6b60e715f2da9f91f8c46cb30c8d5,,testStateTransition_AudioOnToAudioDisconnecting_DisconnectAudio(),28,3,"@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_DisconnectAudio() { int numBroadcastsSent = setUpAudioOnState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, mTestDevice); verify(mHeadsetService, after(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS).times(numBroadcastsSent)).sendBroadcastAsUser(any(android.content.Intent.class), eq(UserHandle.ALL), eq(HeadsetService.BLUETOOTH_PERM)); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.AudioDisconnecting.class)); }",84ccf37ebfdc451ca2dc1fcbc869dafac6be0f60,testStateTransition_AudioOnToAudioDisconnecting_DisconnectAudio(),71068,145,166
309306,common_src_main_java_org_conscrypt_SSLParametersImpl.java,24.0,"org.conscrypt.OpenSSLSessionImpl getSessionToReuse(long sslNativePointer, java.lang.String hostname, int port) throws javax.net.ssl.SSLException { org.conscrypt.OpenSSLSessionImpl sessionToReuse = null; if (client_mode) { javax.net.ssl.SSLSession cachedSession = getCachedClientSession(clientSessionContext, hostname, port); if (cachedSession != null) { if (cachedSession instanceof org.conscrypt.OpenSSLSessionImpl) { sessionToReuse = ((org.conscrypt.OpenSSLSessionImpl) (cachedSession)); } else if (cachedSession instanceof org.conscrypt.OpenSSLExtendedSessionImpl) { sessionToReuse = ((org.conscrypt.OpenSSLExtendedSessionImpl) (cachedSession)).getDelegate(); } if (sessionToReuse != null) { org.conscrypt.NativeCrypto.SSL_set_session(sslNativePointer, sessionToReuse.sslSessionNativePointer); } } } return sessionToReuse; }",5bef430fb7cba9830b278aa8a72d9d4b2bdecaa0,"org.conscrypt.OpenSSLAbstractSession getSessionToReuse(long sslNativePointer, java.lang.String hostname, int port) throws javax.net.ssl.SSLException { org.conscrypt.OpenSSLSessionImpl sessionToReuse = null; if (client_mode) { javax.net.ssl.SSLSession cachedSession = getCachedClientSession(clientSessionContext, hostname, port); if (cachedSession != null) { if (cachedSession instanceof org.conscrypt.OpenSSLExtendedSessionImpl) { cachedSession = ((org.conscrypt.OpenSSLExtendedSessionImpl) (cachedSession)).getDelegate(); } if (cachedSession instanceof org.conscrypt.OpenSSLSessionImpl) { sessionToReuse = ((org.conscrypt.OpenSSLSessionImpl) (cachedSession)); org.conscrypt.NativeCrypto.SSL_set_session(sslNativePointer, sessionToReuse.sslSessionNativePointer); } } } return sessionToReuse; }",e0e0d216d3b7290709dc0919ca26ff5449e1c22e,"getSessionToReuse(long,java.lang.String,int)","getSessionToReuse(long,java.lang.String,int)",10,25,"org.conscrypt.AbstractOpenSSLSession getSessionToReuse(long sslNativePointer, java.lang.String hostname, int port) throws javax.net.ssl.SSLException { org.conscrypt.OpenSSLSessionImpl sessionToReuse = null; if (client_mode) { javax.net.ssl.SSLSession cachedSession = getCachedClientSession(clientSessionContext, hostname, port); if (cachedSession != null) { if (cachedSession instanceof org.conscrypt.OpenSSLExtendedSessionImpl) { cachedSession = ((org.conscrypt.OpenSSLExtendedSessionImpl) (cachedSession)).getDelegate(); } if (cachedSession instanceof org.conscrypt.OpenSSLSessionImpl) { sessionToReuse = ((org.conscrypt.OpenSSLSessionImpl) (cachedSession)); org.conscrypt.NativeCrypto.SSL_set_session(sslNativePointer, sessionToReuse.sslSessionNativePointer); } } } return sessionToReuse; }",465ae20b6012fb8c19740eec777bf699599eb2d5,"getSessionToReuse(long,java.lang.String,int)",414538,207,207
579565,src_java_com_android_internal_telephony_RIL.java,7.0,"@java.lang.Override public void getDataCallList(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DATA_CALL_LIST, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataCallList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getDataCallList"", e); } } }",9af6a11171fd35dea05e2073a3bcef2aaef6b18f,"@java.lang.Override public void getDataCallList(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DATA_CALL_LIST, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataCallList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getDataCallList"", e); } } }",48c45899a530912a3ab08b81c26ef2758987c80b,getDataCallList(android.os.Message),getDataCallList(android.os.Message),3,7,"@java.lang.Override public void getDataCallList(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DATA_CALL_LIST, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataCallList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getDataCallList"", e); } } }",9af6a11171fd35dea05e2073a3bcef2aaef6b18f,getDataCallList(android.os.Message),89215,205,201
221522,espresso_core-tests_src_androidTest_java_android_support_test_espresso_matcher_ViewMatchersTest.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void testFirstMatchesByGivenMatcher() { android.view.View firstViewWithId1 = createViewWithId(R.id.testId1); android.view.View secondViewWithId1 = createViewWithId(R.id.testId1); org.hamcrest.Matcher<android.view.View> id1FirstOccurrenceMatcher = android.support.test.espresso.matcher.ViewMatchers.thatFirstMatches(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.testId1)); assertTrue(id1FirstOccurrenceMatcher.matches(firstViewWithId1)); assertFalse(id1FirstOccurrenceMatcher.matches(secondViewWithId1)); assertTrue(id1FirstOccurrenceMatcher.matches(firstViewWithId1)); },db59dd24e1c9c28ee77ee3c443ee8612e785a617,,testFirstMatchesByGivenMatcher(),4,15,@org.junit.Test public void firstMatchesByGivenMatcher() { android.view.View firstViewWithId1 = createViewWithId(R.id.testId1); android.view.View secondViewWithId1 = createViewWithId(R.id.testId1); org.hamcrest.Matcher<android.view.View> id1FirstOccurrenceMatcher = android.support.test.espresso.matcher.ViewMatchers.thatMatchesFirst(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.testId1)); assertTrue(id1FirstOccurrenceMatcher.matches(firstViewWithId1)); assertFalse(id1FirstOccurrenceMatcher.matches(secondViewWithId1)); assertTrue(id1FirstOccurrenceMatcher.matches(firstViewWithId1)); },dcec575be8e08745d2081b4476887b6ffab9edc7,firstMatchesByGivenMatcher(),474343,161,166
220630,runner_src_main_java_android_support_test_runner_MonitoringInstrumentation.java,34.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public android.app.Activity newActivity(java.lang.ClassLoader cl, java.lang.String className, android.content.Intent intent) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException { return ((this.mActivityProvider) != null) && (mActivityProvider.getActivityClass().getName().equals(className)) ? mActivityProvider.getActivity() : super.newActivity(cl, className, intent); }",233026dfda780699eb18a3310683bd1e6b2a29ec,,"newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)",6,1,"@java.lang.Override public android.app.Activity newActivity(java.lang.ClassLoader cl, java.lang.String className, android.content.Intent intent) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException { return mInterceptingActivityFactory.shouldIntercept(cl, className, intent) ? mInterceptingActivityFactory.create(cl, className, intent) : super.newActivity(cl, className, intent); }",cf88d723979701d8ef1cdc703b2bffa37aeffddc,"newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)",107443,106,103
428757,dx_tests_135-invoke-custom_src_invokecustom_InvokeCustom.java,17.0,"public static java.lang.invoke.CallSite bsmLookupTest9(java.lang.invoke.MethodHandles.Lookup caller, java.lang.String name, java.lang.invoke.MethodType type, java.lang.invoke.MethodHandle staticGetter, java.lang.invoke.MethodHandle staticSetter, java.lang.invoke.MethodHandle fieldGetter, java.lang.invoke.MethodHandle fieldSetter, java.lang.invoke.MethodHandle instanceInvoke, java.lang.invoke.MethodHandle constructor, java.lang.invoke.MethodHandle interfaceInvoke) throws java.lang.Throwable { java.lang.System.out.println(((((((((""bsmLookupTest9 ["" + staticGetter) + "", "") + staticSetter) + "", "") + fieldGetter) + "", "") + fieldSetter) + ""]"")); java.lang.System.out.println(((name + "" "") + type)); invokecustom.InvokeCustom.checkStaticFieldTest9(staticGetter, staticSetter); invokecustom.InvokeCustom instance = new invokecustom.InvokeCustom(); instance.checkFieldTest9(fieldGetter, fieldSetter); instanceInvoke.invokeExact(instance); invokecustom.InvokeCustom instance2 = ((invokecustom.InvokeCustom) (constructor.invokeExact(3))); interfaceInvoke.invoke(instance2); final java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup(); final java.lang.invoke.MethodHandle targetMH = lookup.findStatic(lookup.lookupClass(), name, type); return new java.lang.invoke.ConstantCallSite(targetMH.asType(type)); }",1ffd625df0665c0fb9083468ec9cf69e690b3b33,"public static java.lang.invoke.CallSite bsmLookupTest9(java.lang.invoke.MethodHandles.Lookup caller, java.lang.String name, java.lang.invoke.MethodType type, java.lang.invoke.MethodHandle staticGetter, java.lang.invoke.MethodHandle staticSetter, java.lang.invoke.MethodHandle fieldGetter, java.lang.invoke.MethodHandle fieldSetter, java.lang.invoke.MethodHandle instanceInvoke, java.lang.invoke.MethodHandle constructor, java.lang.invoke.MethodHandle interfaceInvoke, java.lang.invoke.MethodHandle privateInvoke) throws java.lang.Throwable { java.lang.System.out.println(((((((((""bsmLookupTest9 ["" + staticGetter) + "", "") + staticSetter) + "", "") + fieldGetter) + "", "") + fieldSetter) + ""]"")); java.lang.System.out.println(((name + "" "") + type)); invokecustom.InvokeCustom.checkStaticFieldTest9(staticGetter, staticSetter); invokecustom.InvokeCustom instance = new invokecustom.InvokeCustom(); instance.checkFieldTest9(fieldGetter, fieldSetter); instanceInvoke.invokeExact(instance); invokecustom.InvokeCustom instance2 = instance; interfaceInvoke.invoke(instance2); privateInvoke.invoke(instance2); final java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup(); final java.lang.invoke.MethodHandle targetMH = lookup.findStatic(lookup.lookupClass(), name, type); return new java.lang.invoke.ConstantCallSite(targetMH.asType(type)); }",336a7c3762e3aae1d3788a7f33c4e41a2b0ef32d,"bsmLookupTest9(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)","bsmLookupTest9(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)",6,17,"public static java.lang.invoke.CallSite bsmLookupTest9(java.lang.invoke.MethodHandles.Lookup caller, java.lang.String name, java.lang.invoke.MethodType type, java.lang.invoke.MethodHandle staticGetter, java.lang.invoke.MethodHandle staticSetter, java.lang.invoke.MethodHandle fieldGetter, java.lang.invoke.MethodHandle fieldSetter, java.lang.invoke.MethodHandle instanceInvoke, java.lang.invoke.MethodHandle constructor, java.lang.invoke.MethodHandle interfaceInvoke, java.lang.invoke.MethodHandle privateInvoke) throws java.lang.Throwable { java.lang.System.out.println(((((((((""bsmLookupTest9 ["" + staticGetter) + "", "") + staticSetter) + "", "") + fieldGetter) + "", "") + fieldSetter) + ""]"")); java.lang.System.out.println(((name + "" "") + type)); invokecustom.InvokeCustom.checkStaticFieldTest9(staticGetter, staticSetter); invokecustom.InvokeCustom instance = new invokecustom.InvokeCustom(); instance.checkFieldTest9(fieldGetter, fieldSetter); instanceInvoke.invokeExact(instance); invokecustom.InvokeCustom instance2 = ((invokecustom.InvokeCustom) (constructor.invokeExact(3))); interfaceInvoke.invoke(instance2); privateInvoke.invoke(instance2); final java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup(); final java.lang.invoke.MethodHandle targetMH = lookup.findStatic(lookup.lookupClass(), name, type); return new java.lang.invoke.ConstantCallSite(targetMH.asType(type)); }",c7afdc025138e287e0374ab38decd170f82329a2,"bsmLookupTest9(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)",42198,351,364
252478,java_tests_RsTest_src_com_android_rs_test_UT_fp_mad.java,0.0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_fp_mad s = new com.android.rs.test.ScriptC_fp_mad(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_fp_mad_test(0, 0); pRS.finish(); waitForMessage(); pRS.destroy(); }",6cca6636588617b17ded8c84e206dc91fb63d14d,"public void run() { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); com.android.rs.test.ScriptC_fp_mad s = new com.android.rs.test.ScriptC_fp_mad(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_fp_mad_test(0, 0); pRS.finish(); waitForMessage(); pRS.destroy(); }",43872ff8f02eafb6e1e4231914db5763eef9ce95,run(),run(),7,0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_fp_mad s = new com.android.rs.test.ScriptC_fp_mad(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_fp_mad_test(0, 0); pRS.finish(); waitForMessage(); pRS.destroy(); }",6cca6636588617b17ded8c84e206dc91fb63d14d,run(),379507,101,107
186211,test_vogar_target_TestRunnerRule.java,,,,"public vogar.target.TestRunner createTestRunner(java.lang.String... args) { return new vogar.target.TestRunner(properties, new java.util.ArrayList(java.util.Arrays.asList(args))); }",c1b42713af5231805c5e911f6c54c3ac174f19cb,,createTestRunner(java.lang.String[]),4,2,"public vogar.target.TestRunner createTestRunner(java.lang.String... args) { if ((properties) == null) { throw new java.lang.IllegalStateException((((""Cannot create TestRunner as test does not have an "" + ""associated @"") + (vogar.target.TestRunnerProperties.class.getName())) + "" annotation"")); } return new vogar.target.TestRunner(properties, new java.util.ArrayList(java.util.Arrays.asList(args))); }",70831f7bb38c046f2196d5cb080392c8ca541cc9,createTestRunner(java.lang.String[]),103054,50,104
534235,src_vogar_android_AndroidSdk.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void fixD8Output(java.io.File output, java.util.List<java.lang.String> inputs) throws java.io.IOException { byte[] buffer = new byte[4096]; java.io.File outputCopy = new java.io.File(((output.toString()) + "".copy"")); output.renameTo(outputCopy); inputs.add(outputCopy.toString()); try (java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(new java.io.FileOutputStream(output))) { for (java.lang.String input : inputs) { try (java.util.jar.JarInputStream inputJar = new java.util.jar.JarInputStream(new java.io.FileInputStream(input))) { for (java.util.jar.JarEntry entry = inputJar.getNextJarEntry(); entry != null; entry = inputJar.getNextJarEntry()) { if (entry.getName().endsWith("".class"")) { continue; } outputJar.putNextEntry(entry); int length = 0; while (length >= 0) { length = inputJar.read(buffer); if (length > 0) { outputJar.write(buffer, 0, length); } } outputJar.closeEntry(); } } } } finally { outputCopy.delete(); } }",9ab02e604cd929a76c5ce755b0030bfea85eed8f,,"fixD8Output(java.io.File,java.util.List)",5,0,"private void fixD8JarOutput(java.io.File output, java.util.List<java.lang.String> inputs) throws java.io.IOException { java.io.File outputCopy = new java.io.File(((output.toString()) + "".copy"")); output.renameTo(outputCopy); inputs = new java.util.ArrayList<>(inputs); inputs.add(outputCopy.toString()); byte[] buffer = new byte[4096]; try (java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(new java.io.FileOutputStream(output))) { for (java.lang.String input : inputs) { try (java.util.jar.JarInputStream inputJar = new java.util.jar.JarInputStream(new java.io.FileInputStream(input))) { for (java.util.jar.JarEntry entry = inputJar.getNextJarEntry(); entry != null; entry = inputJar.getNextJarEntry()) { if (entry.getName().endsWith("".class"")) { continue; } outputJar.putNextEntry(entry); int length; while ((length = inputJar.read(buffer)) >= 0) { if (length > 0) { outputJar.write(buffer, 0, length); } } outputJar.closeEntry(); } } } } finally { outputCopy.delete(); } }",d5ba4d11704416b7216e7198d7b319784da2eb4f,"fixD8JarOutput(java.io.File,java.util.List)",250590,269,281
73670,harmony-tests_src_test_java_org_apache_harmony_tests_java_net_DatagramSocketTest.java,54.0,"public void test_getSendBufferSize() throws java.lang.Exception { int portNumber = tests.support.Support_PortManager.getNextPortForUDP(); ds = new java.net.DatagramSocket(portNumber); ds.setSendBufferSize(134); assertTrue(""Incorrect buffer size"", ((ds.getSendBufferSize()) >= 134)); }",970d01dee22441c252f9641c0225971d2fa1d890,"public void test_getSendBufferSize() throws java.lang.Exception { int portNumber = tests.support.Support_PortManager.getNextPortForUDP(); ds = new java.net.DatagramSocket(portNumber); ds.setSendBufferSize(134); assertTrue(""Incorrect buffer size"", ((ds.getSendBufferSize()) >= 134)); ds.close(); try { ds.getSendBufferSize(); fail(""SocketException was not thrown.""); } catch (java.net.SocketException se) { } }",d7e7a5d4a672c13fa962628a24f5168770aa1027,test_getSendBufferSize(),test_getSendBufferSize(),2,40,"public void test_getSendBufferSize() throws java.lang.Exception { final java.net.DatagramSocket ds = new java.net.DatagramSocket(0); ds.setSendBufferSize(134); assertTrue(""Incorrect buffer size"", ((ds.getSendBufferSize()) >= 134)); ds.close(); try { ds.getSendBufferSize(); fail(""SocketException was not thrown.""); } catch (java.net.SocketException se) { } }",f1b9f1e197461c5efa8b0b26eba8334e42d47db8,test_getSendBufferSize(),95973,107,93
96871,tests_tests_security_src_android_security_cts_OpenSSLEarlyCCSTest.java,,,,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { forwardTlsRecords(""MiTM S->C"", serverInputStream, clientOutputStream, (injectEarlyCCS && injectIntoClient ? android.security.cts.OpenSSLEarlyCCSTest.HandshakeMessage.TYPE_CERTIFICATE : -1)); return null; }",a20edcf556ac3da137183837dd5fe108e0b616f7,,call(),4,4,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { forwardTlsRecords(""MiTM S->C"", serverInputStream, clientOutputStream, (injectEarlyCCS && injectIntoClient ? android.security.cts.OpenSSLHeartbleedTest.HandshakeMessage.TYPE_CERTIFICATE : -1)); return null; }",b9b639851c6809ab09866043d23dc097a1f668e8,call(),118101,77,77
615655,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,8.0,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",867f1afbfe3221bf227f80ad942881ca1937a525,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = 0; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",65fe26290742e691c734a2c239668ecd1d4dcf31,setUp(),setUp(),7,8,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",867f1afbfe3221bf227f80ad942881ca1937a525,setUp(),274533,183,190
144134,jack_src_com_android_jack_ir_impl_JackIrBuilder.java,37.0,"@java.lang.Override public final boolean visit(TypeDeclaration typeDecl, org.eclipse.jdt.internal.compiler.lookup.BlockScope scope) { if (((typeDecl.binding) == null) || ((typeDecl.binding.constantPoolName()) == null)) { assert false; return false; } createTypes(typeDecl); createMembers(typeDecl); return visit(typeDecl); }",f738a67288700b979187bfe5689a92e816aee799,"@java.lang.Override public final boolean visit(TypeDeclaration typeDecl, org.eclipse.jdt.internal.compiler.lookup.BlockScope scope) { if ((typeDecl.binding) == null) { return false; } if ((typeDecl.binding.constantPoolName()) == null) { assert false; return false; } createTypes(typeDecl); createMembers(typeDecl); return visit(typeDecl); }",6bbc2a054d31dc2d04e7b37f276a44b3950fc1db,"visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)","visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)",11,37,"@java.lang.Override public final boolean visit(TypeDeclaration typeDecl, org.eclipse.jdt.internal.compiler.lookup.BlockScope scope) { assert !(com.android.jack.ir.impl.JackIrBuilder.hasError(typeDecl)); if ((typeDecl.binding.constantPoolName()) == null) { assert false; return false; } createTypes(typeDecl); createMembers(typeDecl); return visit(typeDecl); }",d3eb605b50832d6f907b451b9413c5921af3a44d,"visit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,org.eclipse.jdt.internal.compiler.lookup.BlockScope)",375231,90,97
91995,luni_src_main_java_android_os_Os.java,,,,"public static int poll(android.os.StructPollfd[] fds, int timeoutMs) throws android.os.ErrnoException { return Libcore.os.poll(fds, timeoutMs); }",04b2cc2aecaceff878d33da4522a2a0e6a1c5b1a,,"poll(android.os.StructPollfd[],int)",3,60,"public static int poll(android.system.StructPollfd[] fds, int timeoutMs) throws android.system.ErrnoException { return Libcore.os.poll(fds, timeoutMs); }",764d5f9b9d1a774ac8901db03dc18f12993b1efd,"poll(android.system.StructPollfd[],int)",170012,45,45
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetEuiccInfo2() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF22030102039000""); assertEquals(""BF2203010203"", mEuiccCard.getEuiccInfo2().toHex()); verifyStoreData(channel, ""BF2200""); }",3ab479148415e676a0c4da7a9e864c706fc5e1c6,,testGetEuiccInfo2(),8,15,"@org.junit.Test public void testGetEuiccInfo2() { int channel = mockLogicalChannelResponses(""BF22030102039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getEuiccInfo2(resultCaptor, mHandler); resultCaptor.await(); assertEquals(""BF2203010203"", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, ""BF2200""); }",ec6e885b978f9a3d145576166301971e7495abf0,testGetEuiccInfo2(),396884,109,153
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,,"@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException { try { android.system.Os.sendto(mFd, data, 0, data.length, 0, dstAddr, port); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } }",3c5100fe68886a6a4967b3956e0e2bde2138bc17,,"sendTo(byte[],java.net.InetAddress,int)",15,16,"@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.lang.Exception { android.system.Os.sendto(mFd, data, 0, data.length, 0, dstAddr, port); }",19af661d7c5f181e46adafd90c22f69ab7f76325,"sendTo(byte[],java.net.InetAddress,int)",381471,83,61
155964,perflib_src_main_java_com_android_tools_perflib_heap_ArrayInstance.java,5.0,"@com.android.annotations.NonNull private byte[] asRawByteArray(int elementCount) { getBuffer().setPosition(mValuesOffset); assert (mType) != (Type.OBJECT); byte[] bytes = new byte[(java.lang.Math.min(elementCount, mLength)) * (mType.getSize())]; getBuffer().read(bytes); return bytes; }",4fbe9d2d5fdaa0b65a9092748dabc96439f1f3f3,"@com.android.annotations.NonNull private byte[] asRawByteArray(int start, int elementCount) { getBuffer().setPosition(mValuesOffset); assert (mType) != (Type.OBJECT); assert (start + elementCount) < (mLength); byte[] bytes = new byte[elementCount * (mType.getSize())]; getBuffer().readSubSequence(bytes, (start * (mType.getSize())), (elementCount * (mType.getSize()))); return bytes; }",d28744e221e2058949866fa075783e2ad944d61d,asRawByteArray(int),"asRawByteArray(int,int)",6,0,"@com.android.annotations.NonNull private byte[] asRawByteArray(int start, int elementCount) { getBuffer().setPosition(mValuesOffset); assert (mType) != (Type.OBJECT); assert (start + elementCount) <= (mLength); byte[] bytes = new byte[elementCount * (mType.getSize())]; getBuffer().readSubSequence(bytes, (start * (mType.getSize())), (elementCount * (mType.getSize()))); return bytes; }",9e62f43672cd4910305ac8da70fbc602ed6c5447,"asRawByteArray(int,int)",118629,105,105
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,22.0,"@org.junit.Test public void testLamba022() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA022).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",4bf3e4efe3d1c9120cfa9a663db2ce022b4ffcd9,"@org.junit.Test public void testLamba022() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA022).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",f5661004c04a49ca8117e2f2a24604b0fb5f32a8,testLamba022(),testLamba022(),7,22,@org.junit.Test public void testLamba022() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA022).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },bf42af68556be1ac54d321dd23cf65bd7d1a3e85,testLamba022(),466361,82,56
215441,test_525-checker-arrays-and-fields_src_Main.java,30.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static void FalseCrossOverLoop2() { Main.sArrI[20] = -2; for (int i = 0; i < (Main.sArrF.length); i++) { Main.sArrF[i] = Main.sArrI[20]; } },24ce49e2ff6469e2d1cd03d798a5bf1504434009,,FalseCrossOverLoop2(),2,0,private static void FalseCrossOverLoop2() { Main.sArrI[20] = -2; for (int i = 0; i < (Main.sArrF.length); i++) { Main.sArrF[i] = (Main.sArrI[20]) - 2; } },3a4eb7e8d4883993e20d4c41bfda97d13f466465,FalseCrossOverLoop2(),45917,59,62
14893,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_export_ApkData.java,16.0,"private void setValues(java.util.Map<java.lang.String, java.lang.String> values) { mMinor = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_MINOR)); mRelativePath = values.get(com.android.sdklib.internal.export.ApkData.PROP_PROJECT); mMinSdkVersion = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_API)); java.lang.String tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_GL); if (tmp != null) { mGlVersion = java.lang.Integer.parseInt(tmp); } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_ABI); if (tmp != null) { mAbi = tmp; } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_SCREENS); if (tmp != null) { mSupportsScreens = new com.android.sdklib.xml.ManifestData.SupportsScreens(tmp); } }",031957dbcf58e01053b62e4a73d04c3ebd6ef22b,"private void setValues(java.util.Map<java.lang.String, java.lang.String> values) { mBuildInfo = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_BUILDINFO)); mMinor = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_MINOR)); mRelativePath = values.get(com.android.sdklib.internal.export.ApkData.PROP_PROJECT); mMinSdkVersion = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_API)); java.lang.String tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_GL); if (tmp != null) { mGlVersion = java.lang.Integer.parseInt(tmp); } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_ABI); if (tmp != null) { mAbi = tmp; } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_SCREENS); if (tmp != null) { mSupportsScreens = new com.android.sdklib.xml.ManifestData.SupportsScreens(tmp); } }",796fe5e961bf1c1d60528ef562c843a5db5a1440,setValues(java.util.Map),setValues(java.util.Map),7,17,"private void setValues(java.util.Map<java.lang.String, java.lang.String> values) { mBuildInfo = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_BUILDINFO)); mMinor = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_MINOR)); mRelativePath = values.get(com.android.sdklib.internal.export.ApkData.PROP_PROJECT); mMinSdkVersion = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_API)); java.lang.String tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_GL); if (tmp != null) { try { mGlVersion = java.lang.Integer.decode(tmp); } catch (java.lang.NumberFormatException e) { } } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_ABI); if (tmp != null) { mAbi = tmp; } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_SCREENS); if (tmp != null) { mSupportsScreens = new com.android.sdklib.xml.ManifestData.SupportsScreens(tmp); } }",99538034633cb823dc45a9e775b0b902879875e9,setValues(java.util.Map),107038,304,319
89697,build-system_builder_src_main_java_com_android_builder_AndroidBuilder.java,4.0,"public void compileAidlFile(@com.android.annotations.NonNull java.io.File aidlFile, @com.android.annotations.NonNull java.io.File sourceOutputDir, @com.android.annotations.NonNull java.util.List<java.io.File> importFolders, @com.android.annotations.Nullable com.android.builder.compiling.DependencyFileProcessor dependencyFileProcessor) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(aidlFile, ""aidlFile cannot be null.""); checkNotNull(sourceOutputDir, ""sourceOutputDir cannot be null.""); checkNotNull(importFolders, ""importFolders cannot be null.""); java.lang.String aidl = mBuildTools.getPath(BuildToolInfo.PathId.AIDL); if ((aidl == null) || (!(new java.io.File(aidl).isFile()))) { throw new java.lang.IllegalStateException(""aidl is missing""); } com.android.builder.internal.compiler.AidlProcessor processor = new com.android.builder.internal.compiler.AidlProcessor(aidl, mTarget.getPath(IAndroidTarget.ANDROID_AIDL), importFolders, sourceOutputDir, (dependencyFileProcessor != null ? dependencyFileProcessor : com.android.builder.AndroidBuilder.sNoOpDependencyFileProcessor), mCmdLineRunner); processor.processFile(aidlFile); }",39c8545889be4a7be0cd251bf83999d74d251a7a,"public void compileAidlFile(@com.android.annotations.NonNull java.io.File aidlFile, @com.android.annotations.NonNull java.io.File sourceOutputDir, @com.android.annotations.NonNull java.util.List<java.io.File> importFolders, @com.android.annotations.Nullable com.android.builder.compiling.DependencyFileProcessor dependencyFileProcessor) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(aidlFile, ""aidlFile cannot be null.""); checkNotNull(sourceOutputDir, ""sourceOutputDir cannot be null.""); checkNotNull(importFolders, ""importFolders cannot be null.""); com.android.sdklib.IAndroidTarget target = mTargetInfo.getTarget(); com.android.sdklib.BuildToolInfo buildToolInfo = mTargetInfo.getBuildTools(); java.lang.String aidl = buildToolInfo.getPath(BuildToolInfo.PathId.AIDL); if ((aidl == null) || (!(new java.io.File(aidl).isFile()))) { throw new java.lang.IllegalStateException(""aidl is missing""); } com.android.builder.internal.compiler.AidlProcessor processor = new com.android.builder.internal.compiler.AidlProcessor(aidl, target.getPath(IAndroidTarget.ANDROID_AIDL), importFolders, sourceOutputDir, (dependencyFileProcessor != null ? dependencyFileProcessor : com.android.builder.AndroidBuilder.sNoOpDependencyFileProcessor), mCmdLineRunner); processor.processFile(aidlFile); }",12e82dde54df080ed2489a2ac8cf6db28c99c45e,"compileAidlFile(java.io.File,java.io.File,java.util.List,com.android.builder.compiling.DependencyFileProcessor)","compileAidlFile(java.io.File,java.io.File,java.util.List,com.android.builder.compiling.DependencyFileProcessor)",5,5,"public void compileAidlFile(@com.android.annotations.NonNull java.io.File aidlFile, @com.android.annotations.NonNull java.io.File sourceOutputDir, @com.android.annotations.NonNull java.util.List<java.io.File> importFolders, @com.android.annotations.Nullable com.android.builder.compiling.DependencyFileProcessor dependencyFileProcessor) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(aidlFile, ""aidlFile cannot be null.""); checkNotNull(sourceOutputDir, ""sourceOutputDir cannot be null.""); checkNotNull(importFolders, ""importFolders cannot be null.""); checkState(((mTargetInfo) != null), ""Cannot call compileAidlFile() before setTargetInfo() is called.""); com.android.sdklib.IAndroidTarget target = mTargetInfo.getTarget(); com.android.sdklib.BuildToolInfo buildToolInfo = mTargetInfo.getBuildTools(); java.lang.String aidl = buildToolInfo.getPath(BuildToolInfo.PathId.AIDL); if ((aidl == null) || (!(new java.io.File(aidl).isFile()))) { throw new java.lang.IllegalStateException(""aidl is missing""); } com.android.builder.internal.compiler.AidlProcessor processor = new com.android.builder.internal.compiler.AidlProcessor(aidl, target.getPath(IAndroidTarget.ANDROID_AIDL), importFolders, sourceOutputDir, (dependencyFileProcessor != null ? dependencyFileProcessor : com.android.builder.AndroidBuilder.sNoOpDependencyFileProcessor), mCmdLineRunner); processor.processFile(aidlFile); }",8daa85dfffde0ad2243da40261addc927f77e6a6,"compileAidlFile(java.io.File,java.io.File,java.util.List,com.android.builder.compiling.DependencyFileProcessor)",206505,360,387
132750,luni_src_main_java_java_text_ChoiceFormat.java,9.0,public static final double nextDouble(double value) { if (value == (java.lang.Double.POSITIVE_INFINITY)) { return value; } long bits; if (value == 0) { bits = 0; } else { bits = java.lang.Double.doubleToLongBits(value); } return java.lang.Double.longBitsToDouble((value < 0 ? bits - 1 : bits + 1)); },06c846aa2aeffcd132938c5ddcfad4084a1c720a,public static final double nextDouble(double value) { if (java.lang.Double.isInfinite(value)) { return value; } long bits; if (value == 0) { bits = 0; } else { bits = java.lang.Double.doubleToLongBits(value); } return java.lang.Double.longBitsToDouble((value < 0 ? bits - 1 : bits + 1)); },2a40ca3145faecddeeff96600335cc94a0627d94,nextDouble(double),nextDouble(double),4,9,public static final double nextDouble(double value) { return java.lang.Math.nextUp(value); },8cd5a2807cee7ef44c37068922ee261d491c5cb1,nextDouble(double),54212,79,24
18960,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_platformData_ViewClassInfo.java,14.0,public com.android.ide.eclipse.adt.internal.resources.ViewClassInfo.LayoutParamsInfo getLayoutData() { return mLayoutData; },592c202b6156bd1458b05636915aceb549738fe9,public com.android.ide.common.platformData.ViewClassInfo.LayoutParamsInfo getLayoutData() { return mLayoutData; },5bb1d87478178fcfab06a1645b8fb211c6991e1f,getLayoutData(),getLayoutData(),2,14,public com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo getLayoutData() { return mLayoutData; },7a146b8c2b6f7c8830f768f6bc52dd6b0223ab22,getLayoutData(),136336,28,29
361833,ojluni_src_main_java_java_text_DecimalFormatSymbols.java,2.0,"private static char maybeStripMarkers(java.lang.String symbol, char fallback) { final int length = symbol.length(); if (length == 1) { return symbol.charAt(0); } if (length > 1) { char first = symbol.charAt(0); if (((first == '\u200e') || (first == '\u200f')) || (first == '\u061c')) { return symbol.charAt(1); } } return fallback; }",080777e855cbf1e539652b94720852218f2eb966,"private static char maybeStripMarkers(java.lang.String symbol, char fallback) { final int length = symbol.length(); if (length == 1) { return symbol.charAt(0); } if (length > 1) { char first = symbol.charAt(0); char second = symbol.charAt(1); if (((first == '\u200e') || (first == '\u200f')) || (first == '\u061c')) { return second; } if ((length == 2) && (((second == '\u200e') || (second == '\u200f')) || (second == '\u061c'))) { return first; } } return fallback; }",1ff0912ba3735e744a5de273df5ed9d468c06854,"maybeStripMarkers(java.lang.String,char)","maybeStripMarkers(java.lang.String,char)",4,2,"public static char maybeStripMarkers(java.lang.String symbol, char fallback) { final int length = symbol.length(); if (length >= 1) { boolean sawNonMarker = false; char nonMarker = 0; for (int i = 0; i < length; i++) { final char c = symbol.charAt(i); if (((c == '\u200e') || (c == '\u200f')) || (c == '\u061c')) { continue; } if (sawNonMarker) { return fallback; } sawNonMarker = true; nonMarker = c; } if (sawNonMarker) { return nonMarker; } } return fallback; }",467633d39f29798507ebe5646b492704e490d27b,"maybeStripMarkers(java.lang.String,char)",201847,142,144
307603,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerManifestLayoutTests.java,4.0,public void testMinimalSizeDocked() throws java.lang.Exception { testMinimalSize(android.server.cts.DOCKED_STACK_ID); },08bda2f458d07232c81a71ee2eb9abf53f39501a,"public void testMinimalSizeDocked() throws java.lang.Exception { if (!(supportsMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO, ""Skipping test: no multi-window support""); return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }",fa3410c1d97d76cddce54bda3ba6199b71c77cb7,testMinimalSizeDocked(),testMinimalSizeDocked(),8,4,"public void testMinimalSizeDocked() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO, ""Skipping test: no multi-window support""); return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }",8c4f178dc8a49910e191006ceb29c757a243fa7e,testMinimalSizeDocked(),404061,84,85
340810,telecomm_java_android_telecom_ConnectionServiceAdapterServant.java,30.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onRttConnectionRemotelyTerminated(java.lang.String connectionId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { mHandler.obtainMessage(android.telecom.ConnectionServiceAdapterServant.MSG_ON_RTT_REMOTELY_TERMINATED, connectionId).sendToTarget(); }",912e41fa05246a84c31d88f8f5e2fe16b8badaa1,,"onRttConnectionRemotelyTerminated(java.lang.String,android.telecom.Logging.Session$Info)",6,4,"@java.lang.Override public void onRttSessionRemotelyTerminated(java.lang.String connectionId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { mHandler.obtainMessage(android.telecom.ConnectionServiceAdapterServant.MSG_ON_RTT_REMOTELY_TERMINATED, connectionId).sendToTarget(); }",986e5b3852f221862765b888a85e4b472966e79d,"onRttSessionRemotelyTerminated(java.lang.String,android.telecom.Logging.Session$Info)",393087,81,81
331412,hostsidetests_services_windowmanager_src_android_wm_cts_CrossAppDragAndDropTests.java,35.0,@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mDevice = getDevice(); mSourcePackageName = android.wm.cts.CrossAppDragAndDropTests.SOURCE_PACKAGE_NAME; mTargetPackageName = android.wm.cts.CrossAppDragAndDropTests.TARGET_PACKAGE_NAME; cleanupState(); },336cce740d62db52939153065e9eab00d3286e28,@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mDevice = getDevice(); mSupportsSplitScreenMultiWindow = supportsSplitScreenMultiWindow(); mSourcePackageName = android.wm.cts.CrossAppDragAndDropTests.SOURCE_PACKAGE_NAME; mTargetPackageName = android.wm.cts.CrossAppDragAndDropTests.TARGET_PACKAGE_NAME; cleanupState(); },2cd3cbfb4fc01558fb997c2e8cc14f6983c41c18,setUp(),setUp(),5,37,@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mDevice = getDevice(); if (!(supportsDragAndDrop())) { return; } mSourcePackageName = android.wm.cts.CrossAppDragAndDropTests.SOURCE_PACKAGE_NAME; mTargetPackageName = android.wm.cts.CrossAppDragAndDropTests.TARGET_PACKAGE_NAME; },e3af0427537dc6fb3bb70bb7c147cf6649a57a2f,setUp(),66973,94,88
102635,rs_java_android_renderscript_Script.java,25.0,"protected void forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc) { mRS.validate(); mRS.validateObject(ain); mRS.validateObject(aout); if ((ain == null) && (aout == null)) { throw new android.renderscript.RSIllegalArgumentException(""At least one of ain or aout is required to be non-null.""); } if (sc == null) { forEach(slot, ain, aout, v); return; } long in_id = 0; if (ain != null) { in_id = ain.getID(mRS); } long out_id = 0; if (aout != null) { out_id = aout.getID(mRS); } byte[] params = null; if (v != null) { params = v.getData(); } mRS.nScriptForEachClipped(getID(mRS), slot, in_id, out_id, params, sc.xstart, sc.xend, sc.ystart, sc.yend, sc.zstart, sc.zend); }",6fc435479f63a190724cba4efa2b80fefc482d80,"protected void forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc) { mRS.validate(); mRS.validateObject(ain); mRS.validateObject(aout); if ((ain == null) && (aout == null)) { throw new android.renderscript.RSIllegalArgumentException(""At least one of ain or aout is required to be non-null.""); } long[] in_ids = null; if (ain != null) { in_ids = new long[1]; in_ids[0] = ain.getID(mRS); } long out_id = 0; if (aout != null) { out_id = aout.getID(mRS); } byte[] params = null; if (v != null) { params = v.getData(); } int[] limits = null; if (sc != null) { limits = new int[6]; limits[0] = sc.xstart; limits[1] = sc.xend; limits[2] = sc.ystart; limits[3] = sc.yend; limits[4] = sc.zstart; limits[5] = sc.zend; } mRS.nScriptForEach(getID(mRS), slot, in_ids, out_id, params, limits); }",3303a197a713a01c56d0c9eeb73853c92612b5ec,"forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)","forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)",4,25,"protected void forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc) { mRS.validate(); mRS.validateObject(ain); mRS.validateObject(aout); if ((ain == null) && (aout == null)) { throw new android.renderscript.RSIllegalArgumentException(""At least one of ain or aout is required to be non-null.""); } long[] in_ids = null; if (ain != null) { in_ids = mInIdsBuffer; in_ids[0] = ain.getID(mRS); } long out_id = 0; if (aout != null) { out_id = aout.getID(mRS); } byte[] params = null; if (v != null) { params = v.getData(); } int[] limits = null; if (sc != null) { limits = new int[6]; limits[0] = sc.xstart; limits[1] = sc.xend; limits[2] = sc.ystart; limits[3] = sc.yend; limits[4] = sc.zstart; limits[5] = sc.zend; } mRS.nScriptForEach(getID(mRS), slot, in_ids, out_id, params, limits); }",9b4b28ed7dd0c65a6b86624541fa1ad82a671611,"forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)",162236,296,298
159876,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_ProductFlavor.java,18.0,@com.android.annotations.NonNull public void proguardFiles(java.lang.Object... proguardFileArray) { proguardFiles.addAll(project.files(proguardFileArray).files); },7c82f8d0dbbf43b83a026db9fd8e2b3d04cc951c,public void proguardFiles(java.lang.Object... proguardFileArray) { getProguardFiles().addAll(project.files(proguardFileArray).getFiles()); },7a58ac39206508423cbd2cc2844bc5fe6b10bc96,proguardFiles(java.lang.Object[]),proguardFiles(java.lang.Object[]),3,18,public void proguardFiles(@com.android.annotations.NonNull java.lang.Object... proguardFileArray) { getProguardFiles().addAll(project.files(proguardFileArray).getFiles()); },e40805c9b07716f4134870dc94ba72d8a1a81dd5,proguardFiles(java.lang.Object[]),29523,36,43
19545,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_ui_DecorComposite.java,,,,public com.android.ide.eclipse.adt.internal.editors.ui.DecorComposite setContent(com.android.ide.eclipse.adt.internal.editors.ui.IDecorContent content) { mContent = content; content.createControl(this); com.android.ide.eclipse.adt.internal.editors.ui.GridDataHelper.create(content.getControl()).hSpan(2).grab().fill(); java.lang.String t = content.getTitle(); if (t != null) { setTitle(t); } org.eclipse.swt.graphics.Image i = content.getImage(); if (i != null) { setImage(i); } return this; },dd5d892dac3af58e7bdc16029093c18c4ecac623,,setContent(com.android.ide.eclipse.adt.internal.editors.ui.IDecorContent),3,2,public com.android.ide.eclipse.adt.internal.editors.ui.DecorComposite setContent(com.android.ide.eclipse.adt.internal.editors.ui.IDecorContent content) { mContent = content; content.createControl(this); com.android.ide.eclipse.adt.internal.editors.ui.GridDataBuilder.create(content.getControl()).hSpan(2).grab().fill(); java.lang.String t = content.getTitle(); if (t != null) { setTitle(t); } org.eclipse.swt.graphics.Image i = content.getImage(); if (i != null) { setImage(i); } return this; },92d08c9f23a7ce1d1116675c8e95bc367c495b0f,setContent(com.android.ide.eclipse.adt.internal.editors.ui.IDecorContent),105514,155,155
124410,perflib_src_main_java_com_android_tools_perflib_heap_analysis_TopologicalSort.java,1.0,@com.android.annotations.NonNull public static com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> compute(@com.android.annotations.NonNull java.lang.Iterable<? extends com.android.tools.perflib.heap.Instance> roots) { com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor visitor = new com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor(); for (com.android.tools.perflib.heap.Instance root : roots) { root.accept(visitor); } com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> instances = visitor.getOrderedInstances(); Snapshot.SENTINEL_ROOT.setTopologicalOrder(0); int currentIndex = 0; for (com.android.tools.perflib.heap.Instance node : instances) { node.setTopologicalOrder((++currentIndex)); } return instances; },ca308dcd3491c677ad7e27fae1001d6ce88b6e12,@com.android.annotations.NonNull public static com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> compute(@com.android.annotations.NonNull java.lang.Iterable<com.android.tools.perflib.heap.RootObj> roots) { com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor visitor = new com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor(); for (com.android.tools.perflib.heap.Instance root : roots) { root.accept(visitor); } com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> instances = visitor.getOrderedInstances(); Snapshot.SENTINEL_ROOT.setTopologicalOrder(0); int currentIndex = 0; for (com.android.tools.perflib.heap.Instance node : instances) { node.setTopologicalOrder((++currentIndex)); } return instances; },2fa185fca6c622d4b55eb6041fb64324216cea81,compute(java.lang.Iterable),compute(java.lang.Iterable),5,1,@com.android.annotations.NonNull public static com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> compute(@com.android.annotations.NonNull java.lang.Iterable<com.android.tools.perflib.heap.RootObj> roots) { com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor visitor = new com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor(); visitor.doVisit(roots); com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> instances = visitor.getOrderedInstances(); Snapshot.SENTINEL_ROOT.setTopologicalOrder(0); int currentIndex = 0; for (com.android.tools.perflib.heap.Instance node : instances) { node.setTopologicalOrder((++currentIndex)); } return instances; },36e0e385bd0d7931d64306c0b76eab4f77972dfb,compute(java.lang.Iterable),245568,224,205
386036,tests_java_api_RSTestBackward_src_com_android_rs_testbackward_RSBackwardCompatibilityTests.java,0.0,"@org.junit.runners.Parameterized.Parameters(name = ""{0}"") public static java.lang.Iterable<?> getParams() throws java.lang.Exception { android.content.Context ctx = android.support.test.InstrumentationRegistry.getTargetContext(); int thisApiVersion = android.os.Build.VERSION.SDK_INT; if (thisApiVersion < 19) { android.util.Log.w(com.android.rs.testbackward.RSBackwardCompatibilityTests.TAG, ""API version is less than 19, no tests running""); } java.util.List<com.android.rs.testbackward.UnitTest> validUnitTests = new java.util.ArrayList<>(); if (thisApiVersion >= 19) { validUnitTests.add(new com.android.rs.testbackward.UT_alloc(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_array_alloc(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_array_init(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_atomic(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_bitfield(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_bug_char(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_check_dims(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_clamp(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_clamp_relaxed(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_constant(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_convert(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_convert_relaxed(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_copy_test(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_element(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_foreach(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_foreach_bounds(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_foreach_multi(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_fp_mad(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_int4(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel_struct(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math_agree(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math_conformance(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_min(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_noroot(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_primitives(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_refcount(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rsdebug(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rstime(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rstypes(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_sampler(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_static_globals(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_struct_field(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_struct_field_simple(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_struct(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_unsigned(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_vector(ctx)); } if (thisApiVersion >= 23) { validUnitTests.add(new com.android.rs.testbackward.UT_ctxt_default(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel2d(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel2d_oldstyle(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_kernel3d(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rsdebug_23(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_script_group2_gatherscatter(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_script_group2_nochain(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_script_group2_pointwise(ctx)); } if (thisApiVersion >= 24) { validUnitTests.add(new com.android.rs.testbackward.UT_fp16(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_fp16_globals(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math_24(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_math_fp16(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_reduce(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_reduce_backward(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_rsdebug_24(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_script_group2_float(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_single_source_alloc(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_single_source_ref_count(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_single_source_script(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_small_struct(ctx)); validUnitTests.add(new com.android.rs.testbackward.UT_small_struct_2(ctx)); } if (thisApiVersion >= 26) { validUnitTests.add(new com.android.rs.testbackward.UT_blur_validation(ctx)); } com.android.rs.testbackward.RSBackwardCompatibilityTests.checkDuplicateNames(validUnitTests); return validUnitTests; }",8af9bb7b7ecb4ae1f5d69f4eccd6e1c529cf0dcc,"@org.junit.runners.Parameterized.Parameters(name = ""{0}"") public static java.lang.Iterable<?> getParams() throws java.lang.Exception { int thisApiVersion = android.os.Build.VERSION.SDK_INT; if (thisApiVersion < 19) { android.util.Log.w(com.android.rs.testbackward.RSBackwardCompatibilityTests.TAG, ""API version is less than 19, no tests running""); } android.content.Context ctx = android.support.test.InstrumentationRegistry.getTargetContext(); java.util.ArrayList<com.android.rs.testbackward.UnitTest> validUnitTests = new java.util.ArrayList<>(); for (java.lang.Class<? extends com.android.rs.testbackward.UnitTest> testClass : com.android.rs.testbackward.RSTests.getTestClassesForCurrentAPIVersion()) { com.android.rs.testbackward.UnitTest test = testClass.getDeclaredConstructor(android.content.Context.class).newInstance(ctx); validUnitTests.add(test); } com.android.rs.testbackward.RSBackwardCompatibilityTests.checkDuplicateNames(validUnitTests); return validUnitTests; }",2727573ad62ddc5da4ac881e778b098f2267f2e3,getParams(),getParams(),5,0,"@org.junit.runners.Parameterized.Parameters(name = ""{0}"") public static java.lang.Iterable<?> getParams() throws java.lang.Exception { int thisApiVersion = android.os.Build.VERSION.SDK_INT; int minApiVersion = 21; if (thisApiVersion < minApiVersion) { android.util.Log.w(com.android.rs.testbackward.RSBackwardCompatibilityTests.TAG, java.lang.String.format(""API version is less than %d, no tests running"", minApiVersion)); } android.content.Context ctx = android.support.test.InstrumentationRegistry.getTargetContext(); java.util.List<com.android.rs.testbackward.UnitTest> validUnitTests = new java.util.ArrayList<>(); java.lang.Iterable<java.lang.Class<? extends com.android.rs.testbackward.UnitTest>> testClasses = com.android.rs.testbackward.RSTests.getTestClassesForCurrentAPIVersion(); for (java.lang.Class<? extends com.android.rs.testbackward.UnitTest> testClass : testClasses) { com.android.rs.testbackward.UnitTest test = testClass.getDeclaredConstructor(android.content.Context.class).newInstance(ctx); validUnitTests.add(test); } com.android.rs.testbackward.UnitTest.checkDuplicateNames(validUnitTests); return validUnitTests; }",c986ceaf7f29f256c75708c544442c5c30438210,getParams(),430269,255,302
420840,services_tests_servicestests_src_com_android_server_timezone_RulesManagerServiceTest.java,31.0,"@org.junit.Test public void requestInstall_asyncSuccess() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = createFakeParcelFileDescriptor(); byte[] expectedContent = com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000); configureParcelFileDescriptorReadSuccess(parcelFileDescriptor, expectedContent); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); callback.assertNoResultReceived(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); com.android.timezone.distro.TimeZoneDistro expectedDistro = new com.android.timezone.distro.TimeZoneDistro(expectedContent); configureStageInstallExpectation(expectedDistro, TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(expectedDistro); verifyPackageTrackerCalled(token, true); callback.assertResultReceived(Callback.SUCCESS); }",7941451199269a2c1697eb39d7b0d702941d0d98,"@org.junit.Test public void requestInstall_asyncSuccess() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000)); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); com.android.server.timezone.RulesManagerServiceTest.assertClosed(parcelFileDescriptor); callback.assertNoResultReceived(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); configureStageInstallExpectation(TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(); verifyPackageTrackerCalled(token, true); callback.assertResultReceived(Callback.SUCCESS); }",7434d196affd74923da5aec26f00311c0403ef80,requestInstall_asyncSuccess(),requestInstall_asyncSuccess(),5,29,"@org.junit.Test public void requestInstall_asyncSuccess() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000)); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); callback.assertNoResultReceived(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); configureStageInstallExpectation(TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); com.android.server.timezone.RulesManagerServiceTest.assertClosed(parcelFileDescriptor); verifyStageInstallCalled(); verifyPackageTrackerCalled(token, true); callback.assertResultReceived(Callback.SUCCESS); }",e0b8c8842e68ab90e5c2579cec6a78155aa505d9,requestInstall_asyncSuccess(),216740,245,245
567897,telephony_java_android_telephony_euicc_EuiccManager.java,0.0,"public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",2edb31f8adafe379d2ca88342a361d4495063db0,"public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",a34b4390b299ef5c37f46425a548bf72cbe427b9,getDefaultDownloadableSubscriptionList(android.app.PendingIntent),getDefaultDownloadableSubscriptionList(android.app.PendingIntent),2,0,"public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",c03ce8b8e6f5fe6c34504a2a942994b7c40a4b9d,getDefaultDownloadableSubscriptionList(android.app.PendingIntent),377348,88,101
137123,jack_src_com_android_jack_Jack.java,26.0,"public static void run(@javax.annotation.Nonnull com.android.jack.Options options) throws com.android.jack.IllegalOptionsException, com.android.jack.JackUserException, com.android.sched.scheduler.ProcessException, com.android.sched.util.config.ConfigurationException { boolean assertEnable = false; assert true == (assertEnable = true); if (((options.proguardFlagsFiles) != null) && (!(options.proguardFlagsFiles.isEmpty()))) { if ((options.flags) == null) { options.flags = new com.android.jack.shrob.spec.Flags(); } for (java.io.File proguardFlagsFile : options.proguardFlagsFiles) { try { com.android.jack.shrob.proguard.GrammarActions.parse(proguardFlagsFile.getPath(), ""."", options.flags); } catch (RecognitionException e) { throw new com.android.jack.IllegalOptionsException((((""Error while parsing '"" + (e.input.getSourceName())) + ""':"") + (e.line)), e); } } if (options.flags.optimize()) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING, ""Flag '-dontoptimize' not found: Proguard optimizations are not supported""); } if (options.flags.preverify()) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING, ""Flag '-dontpreverify' not found: Proguard preverification is not supported""); } options.applyShrobFlags(); } com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks(); try { options.checkValidity(hooks); com.android.sched.util.config.Config config = options.getConfig(); com.android.sched.util.config.ThreadConfig.setConfig(config); com.android.sched.util.config.ConfigPrinterFactory.getConfigPrinter().printConfig(config); com.android.sched.util.log.Event event = com.android.sched.util.log.TracerFactory.getTracer().start(JackEventType.JACK_RUN); try { if ((options.hasSanityChecks()) != assertEnable) { com.android.jack.Jack.logger.log(java.util.logging.Level.INFO, ""Jack assertion status overriden by sanity checks option""); } java.lang.ClassLoader classLoader = com.android.jack.Jack.class.getClassLoader(); classLoader.clearAssertionStatus(); classLoader.setDefaultAssertionStatus(options.hasSanityChecks()); com.android.jack.Jack.logger.log(java.util.logging.Level.INFO, ""Jack sanity checks {0}"", (options.hasSanityChecks() ? ""enabled"" : ""disabled"")); com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession(); com.android.jack.Jack.buildSession(options, hooks); if (config.get(Options.GENERATE_JACK_LIBRARY).booleanValue()) { session.setJackOutputLibrary(session.getInputFilter().getOutputJackLibrary()); } com.android.sched.scheduler.Request request = com.android.jack.Jack.createInitialRequest(); request.addFeature(com.android.jack.preprocessor.PreProcessor.class); request.addFeature(com.android.jack.scheduling.feature.Resources.class); com.android.jack.config.id.JavaVersionPropertyId.JavaVersion sourceVersion = config.get(Options.JAVA_SOURCE_VERSION); if ((sourceVersion.compareTo(JavaVersion.JAVA_7)) >= 0) { request.addFeature(com.android.jack.scheduling.feature.SourceVersion7.class); } if (config.get(Options.ENABLE_COMPILED_FILES_STATISTICS).booleanValue()) { request.addFeature(com.android.jack.scheduling.feature.CompiledTypeStats.class); request.addFeature(com.android.jack.statistics.CodeStats.class); } if (options.hasSanityChecks()) { request.addFeature(com.android.jack.transformations.SanityChecks.class); } if ((options.jarjarRulesFile) != null) { request.addFeature(com.android.jack.transformations.Jarjar.class); } if (options.dxLegacy) { request.addFeature(com.android.jack.scheduling.feature.DxLegacy.class); } if ((options.flags) != null) { if (options.flags.shrink()) { request.addFeature(com.android.jack.shrob.shrink.Shrinking.class); } if (options.flags.obfuscate()) { request.addFeature(com.android.jack.shrob.obfuscation.Obfuscation.class); } if (options.flags.printSeeds()) { request.addProduction(com.android.jack.shrob.seed.SeedFile.class); } if (!(options.flags.keepAttribute(""EnclosingMethod""))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveEnclosingMethod.class); } if (!(options.flags.keepAttribute(""InnerClasses""))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveEnclosingType.class); } if (!(options.flags.keepAttribute(""Signature""))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveGenericSignature.class); } if (!(options.flags.keepAttribute(""AnnotationDefault""))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveAnnotationDefaultValue.class); } if (!(options.flags.keepAttribute(""LocalVariableTypeTable""))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveLocalVariableGenericSignature.class); } if (!(options.flags.keepAttribute(""Exceptions""))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveThrownException.class); } if (!(options.flags.keepAttribute(""SourceFile""))) { request.addFeature(com.android.jack.shrob.obfuscation.RemoveSourceFile.class); } if (!(options.flags.keepAttribute(""LineNumberTable""))) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveLineNumber.class); } if (!(options.flags.getKeepParameterNames())) { request.addFeature(com.android.jack.shrob.obfuscation.annotation.RemoveParameterName.class); } if ((options.flags.getRenameSourceFileAttribute()) != null) { request.addFeature(com.android.jack.shrob.obfuscation.SourceFileRenaming.class); } if ((options.flags.getAdaptResourceFileContents()) != null) { request.addFeature(com.android.jack.shrob.obfuscation.resource.AdaptResourceFileContent.class); } } if (config.get(MappingPrinter.MAPPING_OUTPUT_ENABLED).booleanValue()) { request.addProduction(com.android.jack.shrob.obfuscation.Mapping.class); } if (config.get(ShrinkStructurePrinter.STRUCTURE_PRINTING).booleanValue()) { request.addProduction(com.android.jack.shrob.shrink.StructurePrinting.class); } if (config.get(MultiDexLegacy.MULTIDEX_LEGACY).booleanValue()) { request.addFeature(com.android.jack.backend.dex.MultiDexLegacy.class); } if (config.get(Options.INCREMENTAL_MODE).booleanValue()) { request.addFeature(com.android.jack.incremental.Incremental.class); } request.addInitialTagsOrMarkers(com.android.jack.Jack.getJavaSourceInitialTagSet()); request.addInitialTagsOrMarkers(com.android.jack.Jack.getJackFormatInitialTagSet()); if (config.get(Options.GENERATE_DEX_IN_LIBRARY).booleanValue()) { request.addProduction(com.android.jack.backend.dex.DexInLibraryProduct.class); } if (((options.out) != null) || ((options.outZip) != null)) { request.addProduction(com.android.jack.backend.dex.DexFileProduct.class); session.addGeneratedFileType(FileType.DEX); } if (config.get(Options.GENERATE_JAYCE_IN_LIBRARY).booleanValue()) { request.addProduction(com.android.jack.backend.jayce.JayceInLibraryProduct.class); } if (config.get(Options.GENERATE_DEPENDENCIES_IN_LIBRARY).booleanValue()) { request.addProduction(com.android.jack.analysis.dependency.DependencyInLibraryProduct.class); } com.android.sched.scheduler.ProductionSet targetProduction = request.getTargetProductions(); com.android.sched.scheduler.FeatureSet features = request.getFeatures(); com.android.sched.scheduler.PlanBuilder<com.android.jack.ir.ast.JSession> planBuilder; try { planBuilder = request.getPlanBuilder(com.android.jack.ir.ast.JSession.class); } catch (com.android.sched.scheduler.IllegalRequestException e) { throw new java.lang.AssertionError(e); } planBuilder.append(com.android.jack.preprocessor.PreProcessorApplier.class); com.android.jack.Jack.fillDexPlan(options, planBuilder); if (targetProduction.contains(com.android.jack.backend.dex.DexFileProduct.class)) { planBuilder.append(com.android.jack.backend.dex.DexFileWriter.class); } if (features.contains(com.android.jack.scheduling.feature.Resources.class)) { if (targetProduction.contains(com.android.jack.backend.dex.DexFileProduct.class)) { planBuilder.append(com.android.jack.backend.ResourceWriter.class); } if (targetProduction.contains(com.android.jack.backend.jayce.JayceInLibraryProduct.class)) { planBuilder.append(com.android.jack.resource.LibraryResourceWriter.class); } } if (targetProduction.contains(com.android.jack.backend.jayce.JayceInLibraryProduct.class)) { planBuilder.append(com.android.jack.meta.LibraryMetaWriter.class); } com.android.sched.scheduler.Plan<com.android.jack.ir.ast.JSession> plan; try { try { plan = request.buildPlan(com.android.jack.ir.ast.JSession.class); } catch (com.android.sched.scheduler.PlanNotFoundException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.scheduler.IllegalRequestException e) { throw new java.lang.AssertionError(e); } } catch (java.lang.UnsupportedOperationException e) { plan = planBuilder.getPlan(); assert (((!(targetProduction.contains(com.android.jack.backend.jayce.JayceInLibraryProduct.class))) || (targetProduction.contains(com.android.jack.backend.dex.DexFileProduct.class))) || ((plan.computeFinalTagsOrMarkers(request.getInitialTags()).contains(com.android.jack.ir.JackFormatIr.class)) && (!(targetProduction.contains(com.android.jack.backend.dex.DexInLibraryProduct.class))))) || ((targetProduction.contains(com.android.jack.backend.dex.DexInLibraryProduct.class)) && (targetProduction.contains(com.android.jack.backend.jayce.JayceInLibraryProduct.class))); } com.android.sched.scheduler.PlanPrinterFactory.getPlanPrinter().printPlan(plan); try { plan.getScheduleInstance().process(session); } finally { try { com.android.jack.library.OutputLibrary jackOutputLibrary = session.getJackOutputLibrary(); if (jackOutputLibrary != null) { jackOutputLibrary.close(); } if ((config.get(Options.GENERATE_DEX_FILE).booleanValue()) && ((config.get(Options.DEX_OUTPUT_CONTAINER_TYPE)) == (com.android.sched.vfs.Container.ZIP))) { config.get(Options.DEX_OUTPUT_ZIP).close(); } java.io.File jackLibraryOutputZip = options.getJackLibraryOutputZip(); if ((com.android.sched.util.config.ThreadConfig.get(Options.INCREMENTAL_MODE).booleanValue()) && (jackLibraryOutputZip != null)) { java.io.File incrementalFolder = options.getIncrementalFolder(); assert incrementalFolder != null; java.util.List<java.io.File> filesToCopy = new java.util.ArrayList<java.io.File>(); com.android.sched.util.log.Event timeToZip = com.android.sched.util.log.TracerFactory.getTracer().start(JackEventType.ZIP_JACK_LIBRARY_IN_INCREMENTAL); try { com.android.jack.Jack.getAllFiles(incrementalFolder, filesToCopy); com.android.jack.Jack.writeZipFile(jackLibraryOutputZip, incrementalFolder, filesToCopy); } finally { timeToZip.end(); } } } catch (com.android.jack.library.LibraryIOException e) { throw new java.lang.AssertionError(e); } catch (java.io.IOException e) { throw new java.lang.AssertionError(e); } } } finally { event.end(); } } catch (com.android.jack.NothingToDoException e1) { } finally { hooks.runHooks(); com.android.sched.util.config.ThreadConfig.unsetConfig(); } }",09015efb5d36f9fd1731ce00781f7f3336c1aa6f,"public static void run(@javax.annotation.Nonnull com.android.jack.Options options) throws com.android.jack.IllegalOptionsException, com.android.jack.JackUserException, com.android.sched.scheduler.ProcessException, com.android.sched.util.config.ConfigurationException { com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks(); try { com.android.jack.Jack.check(options, hooks); com.android.jack.Jack.subRun(options, hooks); } finally { hooks.runHooks(); com.android.sched.util.config.ThreadConfig.unsetConfig(); } }",c4f77cf6edb5176fee8e8071bb8c9e6697d244e6,run(com.android.jack.Options),run(com.android.jack.Options),8,10,"public static void checkAndRun(@javax.annotation.Nonnull com.android.jack.Options options) throws com.android.jack.IllegalOptionsException, com.android.jack.JackUserException, com.android.sched.scheduler.ProcessException, com.android.sched.util.config.ConfigurationException { com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks(); try { com.android.jack.Jack.check(options, hooks); com.android.jack.Jack.run(options, hooks); } finally { hooks.runHooks(); com.android.sched.util.config.ThreadConfig.unsetConfig(); } }",59360eada0f123854e14ec4d0518cdd7f0e50d02,checkAndRun(com.android.jack.Options),34580,148,149
140611,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_AndroidModel.java,4.0,@org.gradle.model.Unmanaged org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.internal.dsl.GroupableProductFlavor> getProductFlavors();,58a36c1e9b0ce4e0a9d130f5ea4a92cfde1c8d1e,org.gradle.model.collection.ManagedSet<com.android.build.gradle.managed.ManagedGroupableProductFlavor> getProductFlavors();,02fcba89dc00084dc53073cf584cb3128a43d4db,getProductFlavors(),getProductFlavors(),10,4,org.gradle.model.collection.ManagedSet<com.android.build.gradle.managed.ProductFlavor> getProductFlavors();,9439b1960395f87d5b4be24547f2e29b362a5ad7,getProductFlavors(),275247,32,29
146403,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_ndk_internal_NdkExtensionConvention.java,3.0,"public static void setExtensionDefault(com.android.build.gradle.ndk.managed.NdkConfig ndkConfig) { if (!(ndkConfig.getCompileSdkVersion().isEmpty())) { try { int version = java.lang.Integer.parseInt(ndkConfig.getCompileSdkVersion()); ndkConfig.setCompileSdkVersion((""android-"" + (ndkConfig.getCompileSdkVersion()))); } catch (java.lang.NumberFormatException ignored) { } } if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals(""gcc""))) && (!(ndkConfig.getToolchain().equals(""clang"")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format(""Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'."", ndkConfig.getToolchain())); } } if (ndkConfig.getToolchainVersion().isEmpty()) { ndkConfig.setToolchainVersion(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN_VERSION); } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.c""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cpp""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cc""); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }",0e04a5baf24dca06d7487b039ecac42056252094,"public static void setExtensionDefault(com.android.build.gradle.ndk.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals(""gcc""))) && (!(ndkConfig.getToolchain().equals(""clang"")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format(""Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'."", ndkConfig.getToolchain())); } } if (ndkConfig.getToolchainVersion().isEmpty()) { ndkConfig.setToolchainVersion(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN_VERSION); } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.c""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cpp""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cc""); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }",44d175649682ca0baf953f05cc108fcdf817e158,setExtensionDefault(com.android.build.gradle.ndk.managed.NdkConfig),setExtensionDefault(com.android.build.gradle.ndk.managed.NdkConfig),11,3,"public static void setExtensionDefault(com.android.build.gradle.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals(""gcc""))) && (!(ndkConfig.getToolchain().equals(""clang"")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format(""Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'."", ndkConfig.getToolchain())); } } if (ndkConfig.getToolchainVersion().isEmpty()) { ndkConfig.setToolchainVersion(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN_VERSION); } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.c""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cpp""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cc""); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }",8610c93fc2c6c607e4341180d103ce6e1569c5d5,setExtensionDefault(com.android.build.gradle.managed.NdkConfig),236464,500,498
420522,dx_src_com_android_dx_merge_IndexMap.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.dex.MethodHandle adjust(com.android.dex.MethodHandle methodHandle) { return new com.android.dex.MethodHandle(target, methodHandle.getMethodHandleType(), (methodHandle.getMethodHandleType().isField() ? adjustField(methodHandle.getFieldOrMethodId()) : adjustMethod(methodHandle.getFieldOrMethodId()))); }",9497f47bb2348489d8405b6cef6148864ef94e53,,adjust(com.android.dex.MethodHandle),4,5,"public com.android.dex.MethodHandle adjust(com.android.dex.MethodHandle methodHandle) { return new com.android.dex.MethodHandle(target, methodHandle.getMethodHandleType(), methodHandle.getUnused1(), (methodHandle.getMethodHandleType().isField() ? adjustField(methodHandle.getFieldOrMethodId()) : adjustMethod(methodHandle.getFieldOrMethodId())), methodHandle.getUnused2()); }",dc1b2d9c7a715357870002d791ba6add771f83af,adjust(com.android.dex.MethodHandle),305715,77,92
243440,test_458-checker-instruction-simplification_src_Main.java,35.0,public static short charToDoubleToShort(char value) { return ((short) ((double) (value))); },55cf652a0016f3b1e9aad8855ba896e3e784ad95,public static short charToDoubleToShort(char value) { if (Main.doThrow) { throw new java.lang.Error(); } return ((short) ((double) (value))); },c75586cdd6d529d6083d751403395b1b96eaaaf7,charToDoubleToShort(char),charToDoubleToShort(char),3,71,public static short $noinline$charToDoubleToShort(char value) { if (Main.doThrow) { throw new java.lang.Error(); } return ((short) ((double) (value))); },2fd334af7fd323dea5cbdc1f3fc0efbae283b091,$noinline$charToDoubleToShort(char),118222,42,47
400153,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String formatDateNonGregorianCalendar(java.lang.String fmt) { java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(fmt, java.util.Locale.US); libcore.java.text.SimpleDateFormatTest.NonGregorianCalendar cal = new libcore.java.text.SimpleDateFormatTest.NonGregorianCalendar(); cal.clear(); cal.setTimeZone(libcore.java.text.SimpleDateFormatTest.UTC); dateFormat.setCalendar(cal); return dateFormat.format(new java.util.Date(0)); }",c7a37a02d2b31278194c51e4231271c16980d9ea,,formatDateNonGregorianCalendar(java.lang.String),3,18,"private static java.lang.String formatDateNonGregorianCalendar(java.lang.String fmt) { java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(fmt, java.util.Locale.US); libcore.java.text.SimpleDateFormatTest.NonGregorianCalendar cal = new libcore.java.text.SimpleDateFormatTest.NonGregorianCalendar(); cal.clear(); cal.setTimeZone(libcore.java.text.SimpleDateFormatTest.UTC); dateFormat.setCalendar(cal); return dateFormat.format(new java.util.Date(0)); }",1cd79a93b1bc73bdb55bf8603a6449d1788bbef4,formatDateNonGregorianCalendar(java.lang.String),49607,116,117
169083,luni_src_main_java_java_util_Timer.java,9.0,"private void scheduleImpl(java.util.TimerTask task, long delay, long period, boolean fixed) { synchronized(impl) { if (impl.cancelled) { throw new java.lang.IllegalStateException(""Timer was canceled""); } long when = delay + (java.lang.System.currentTimeMillis()); if (when < 0) { throw new java.lang.IllegalArgumentException((""Illegal delay to start the TimerTask: "" + when)); } synchronized(task.lock) { if (task.isScheduled()) { throw new java.lang.IllegalStateException(""TimerTask is scheduled already""); } if (task.cancelled) { throw new java.lang.IllegalStateException(""TimerTask is canceled""); } task.when = when; task.period = period; task.fixedRate = fixed; } impl.insertTask(task); } }",998efaade133f06b3d6d11c07c7c28609d4ba491,"private void updatePriorityQueue(java.util.Timer.ScheduledTask taskExecuted, long timeFinished) { synchronized(scheduledTaskPriorityQueue) { scheduledTaskPriorityQueue.remove(taskExecuted); if ((taskExecuted.period) == null) { return; } taskExecuted.nextExecution = (taskExecuted.period) + (taskExecuted.isAtFixedRate ? taskExecuted.nextExecution : timeFinished); scheduledTaskPriorityQueue.add(taskExecuted); } }",c67cd624aeaed6ab74af6a275b1002f0c22fda3d,"scheduleImpl(java.util.TimerTask,long,long,boolean)","updatePriorityQueue(java.util.Timer$ScheduledTask,long)",9,0,"private void updatePriorityQueue(java.util.Timer.ScheduledTask taskExecuted, long timeFinished) { scheduledTaskPriorityQueue.remove(taskExecuted); if ((taskExecuted.period) == null) { return; } taskExecuted.nextExecution = (taskExecuted.period) + (taskExecuted.isAtFixedRate ? taskExecuted.nextExecution : timeFinished); scheduledTaskPriorityQueue.add(taskExecuted); }",c81b14aa7a7991ec907abdd10c7b29b5c5afb228,"updatePriorityQueue(java.util.Timer$ScheduledTask,long)",146881,92,84
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFmod.java,,,,"private void checkFmodFloatFloat() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmodFloatFloat(inX, out); verifyResultsFmodFloatFloat(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmodFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmodFloatFloat(inX, out); verifyResultsFmodFloatFloat(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmodFloatFloat: "" + (e.toString()))); } }",8baba66d221e5d5a61f9cb3ccb1b57acc4f62f29,,checkFmodFloatFloat(),9,1,"private void checkFmodFloatFloatFloat() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -5203834224221501348L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -5203834224221501348L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmodFloatFloatFloat(inX, out); verifyResultsFmodFloatFloatFloat(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmodFloatFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmodFloatFloatFloat(inX, out); verifyResultsFmodFloatFloatFloat(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmodFloatFloatFloat: "" + (e.toString()))); } }",d487146d5d831abcc2f9117075319c2e19c81844,checkFmodFloatFloatFloat(),142822,428,377
154415,dalvik_src_main_java_dalvik_system_DexPathList.java,6.0,"private static dalvik.system.DexPathList.Element[] makeDexElements(java.util.List<java.io.File> files, java.io.File optimizedDirectory, java.util.List<java.io.IOException> suppressedExceptions) { java.util.ArrayList<dalvik.system.DexPathList.Element> elements = new java.util.ArrayList<dalvik.system.DexPathList.Element>(); for (java.io.File file : files) { java.io.File zip = null; dalvik.system.DexFile dex = null; java.lang.String name = file.getName(); if (file.isDirectory()) { elements.add(new dalvik.system.DexPathList.Element(file, true, null, null)); } else if (file.isFile()) { if (name.endsWith(dalvik.system.DexPathList.DEX_SUFFIX)) { try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException ex) { java.lang.System.logE((""Unable to load dex file: "" + file), ex); } } else { zip = file; try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException suppressed) { suppressedExceptions.add(suppressed); } } } else { java.lang.System.logW((""ClassLoader referenced unknown path: "" + file)); } if ((zip != null) || (dex != null)) { elements.add(new dalvik.system.DexPathList.Element(file, false, zip, dex)); } } return elements.toArray(new dalvik.system.DexPathList.Element[elements.size()]); }",d38870430260d9234103c08fce38e3509ba19320,"private static dalvik.system.DexPathList.Element[] makePathElements(java.util.List<java.io.File> files, java.io.File optimizedDirectory, java.util.List<java.io.IOException> suppressedExceptions) { java.util.List<dalvik.system.DexPathList.Element> elements = new java.util.ArrayList<>(); for (java.io.File file : files) { java.io.File zip = null; java.io.File dir = new java.io.File(""""); dalvik.system.DexFile dex = null; java.lang.String path = file.getPath(); java.lang.String name = file.getName(); if (path.contains(dalvik.system.DexPathList.zipSeparator)) { java.lang.String[] split = path.split(dalvik.system.DexPathList.zipSeparator, 2); zip = new java.io.File(split[0]); dir = new java.io.File(split[1]); } else if (file.isDirectory()) { elements.add(new dalvik.system.DexPathList.Element(file, true, null, null)); } else if (file.isFile()) { if (name.endsWith(dalvik.system.DexPathList.DEX_SUFFIX)) { try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException ex) { java.lang.System.logE((""Unable to load dex file: "" + file), ex); } } else { zip = file; try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException suppressed) { suppressedExceptions.add(suppressed); } } } else { java.lang.System.logW((""ClassLoader referenced unknown path: "" + file)); } if ((zip != null) || (dex != null)) { elements.add(new dalvik.system.DexPathList.Element(dir, false, zip, dex)); } } return elements.toArray(new dalvik.system.DexPathList.Element[elements.size()]); }",3e757ecacc79a2797316f240145c76f80d1a38df,"makeDexElements(java.util.List,java.io.File,java.util.List)","makePathElements(java.util.List,java.io.File,java.util.List)",3,15,"private static dalvik.system.DexPathList.Element[] makeElements(java.util.List<java.io.File> files, java.io.File optimizedDirectory, java.util.List<java.io.IOException> suppressedExceptions, boolean ignoreDexFiles) { java.util.List<dalvik.system.DexPathList.Element> elements = new java.util.ArrayList<>(); for (java.io.File file : files) { java.io.File zip = null; java.io.File dir = new java.io.File(""""); dalvik.system.DexFile dex = null; java.lang.String path = file.getPath(); java.lang.String name = file.getName(); if (path.contains(dalvik.system.DexPathList.zipSeparator)) { java.lang.String[] split = path.split(dalvik.system.DexPathList.zipSeparator, 2); zip = new java.io.File(split[0]); dir = new java.io.File(split[1]); } else if (file.isDirectory()) { elements.add(new dalvik.system.DexPathList.Element(file, true, null, null)); } else if (file.isFile()) { if ((!ignoreDexFiles) && (name.endsWith(dalvik.system.DexPathList.DEX_SUFFIX))) { try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException ex) { java.lang.System.logE((""Unable to load dex file: "" + file), ex); } } else { zip = file; if (!ignoreDexFiles) { try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException suppressed) { suppressedExceptions.add(suppressed); } } } } else { java.lang.System.logW((""ClassLoader referenced unknown path: "" + file)); } if ((zip != null) || (dex != null)) { elements.add(new dalvik.system.DexPathList.Element(dir, false, zip, dex)); } } return elements.toArray(new dalvik.system.DexPathList.Element[elements.size()]); }",1877c919d3f24423b87e3b3adc80fb227b78f488,"makeElements(java.util.List,java.io.File,java.util.List,boolean)",463359,473,492
117292,jack_src_com_android_jack_experimental_incremental_JackIncremental.java,5.0,"@javax.annotation.Nonnull protected static java.io.File getJackFile(@javax.annotation.Nonnull java.lang.String typeName) { return new java.io.File(com.android.jack.experimental.incremental.JackIncremental.jackFilesFolder, (((FileType.JAYCE.getPrefix()) + (java.io.File.separatorChar)) + (new com.android.sched.vfs.VPath((typeName + (com.android.jack.backend.jayce.JayceFileImporter.JAYCE_FILE_EXTENSION)), com.android.jack.experimental.incremental.JackIncremental.fileSeparator).getPathAsString(java.io.File.separatorChar)))); }",0eff6fa3e46f21c894b5cf9addf62bd9e35d06f4,"@javax.annotation.Nonnull protected static com.android.sched.vfs.InputVFile getJackFile(@javax.annotation.Nonnull java.lang.String typeName) { try { assert (com.android.jack.experimental.incremental.JackIncremental.incrementalOutputLibrary) != null; return com.android.jack.experimental.incremental.JackIncremental.incrementalOutputLibrary.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(typeName, com.android.jack.experimental.incremental.JackIncremental.fileSeparator)); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { throw new java.lang.AssertionError(e); } }",2be83926754b18101a2586da8e78fd82010d095e,getJackFile(java.lang.String),getJackFile(java.lang.String),12,5,"@javax.annotation.Nonnull protected static com.android.sched.vfs.InputVFile getJackFile(@javax.annotation.Nonnull java.lang.String typeName) { try { assert (com.android.jack.experimental.incremental.JackIncremental.incrementalInputLibrary) != null; return com.android.jack.experimental.incremental.JackIncremental.incrementalInputLibrary.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(typeName, com.android.jack.experimental.incremental.JackIncremental.fileSeparator)); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { throw new java.lang.AssertionError(e); } }",8145894c6b79dcc9bf65b13c1a7dadd5874019ff,getJackFile(java.lang.String),275414,150,150
253791,luni_src_main_java_libcore_io_Posix.java,15.0,public native void fsync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,b6fb218b4c376c56bfa7bc52701cd22db5d89936,public native void fsync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,d1fefe1d97f0d430594ed7ec7fdb39a4fc16c2cd,fsync(java.io.FileDescriptor),fsync(java.io.FileDescriptor),8,14,public native void fsync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,b6fb218b4c376c56bfa7bc52701cd22db5d89936,fsync(java.io.FileDescriptor),494467,23,22
181343,core_java_android_security_net_config_XmlConfigSource.java,,,,"private android.security.net.config.CertificatesEntryRef parseCertificatesEntry(android.content.res.XmlResourceParser parser) throws android.security.net.config.XmlConfigSource.ParserException, java.io.IOException, org.xmlpull.v1.XmlPullParserException { boolean overridePins = parser.getAttributeBooleanValue(null, ""overridePins"", false); int sourceId = parser.getAttributeResourceValue(null, ""src"", (-1)); final java.lang.String sourceString = parser.getAttributeValue(null, ""src""); android.security.net.config.CertificateSource source = null; if (sourceString == null) { throw new android.security.net.config.XmlConfigSource.ParserException(parser, ""certificates element missing src attribute""); } if (sourceId != (-1)) { source = new android.security.net.config.ResourceCertificateSource(sourceId, mContext); } else if (""system"".equals(sourceString)) { source = android.security.net.config.SystemCertificateSource.getInstance(); } else if (""user"".equals(sourceString)) { source = android.security.net.config.UserCertificateSource.getInstance(); } else { throw new android.security.net.config.XmlConfigSource.ParserException(parser, (""Unknown certificates src. "" + ""Should be one of system|user|@resourceVal"")); } com.android.internal.util.XmlUtils.skipCurrentTag(parser); return new android.security.net.config.CertificatesEntryRef(source, overridePins); }",bbc2b59b8070f265d762e693a42930391994cbdf,,parseCertificatesEntry(android.content.res.XmlResourceParser),3,9,"private android.security.net.config.CertificatesEntryRef parseCertificatesEntry(android.content.res.XmlResourceParser parser) throws android.security.net.config.XmlConfigSource.ParserException, java.io.IOException, org.xmlpull.v1.XmlPullParserException { boolean overridePins = parser.getAttributeBooleanValue(null, ""overridePins"", false); int sourceId = parser.getAttributeResourceValue(null, ""src"", (-1)); java.lang.String sourceString = parser.getAttributeValue(null, ""src""); android.security.net.config.CertificateSource source = null; if (sourceString == null) { throw new android.security.net.config.XmlConfigSource.ParserException(parser, ""certificates element missing src attribute""); } if (sourceId != (-1)) { source = new android.security.net.config.ResourceCertificateSource(sourceId, mContext); } else if (""system"".equals(sourceString)) { source = android.security.net.config.SystemCertificateSource.getInstance(); } else if (""user"".equals(sourceString)) { source = android.security.net.config.UserCertificateSource.getInstance(); } else { throw new android.security.net.config.XmlConfigSource.ParserException(parser, (""Unknown certificates src. "" + ""Should be one of system|user|@resourceVal"")); } com.android.internal.util.XmlUtils.skipCurrentTag(parser); return new android.security.net.config.CertificatesEntryRef(source, overridePins); }",60fed9199628ddf7fde1bae4a14c4655fbd2b426,parseCertificatesEntry(android.content.res.XmlResourceParser),216934,337,336
542302,src_com_android_bluetooth_hfp_HeadsetSystemInterface.java,,,,"@com.android.internal.annotations.VisibleForTesting public void processSendDtmf(int dtmf, android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, ""processSendDtmf device is null""); return; } if ((mPhoneProxy) != null) { try { mPhoneProxy.sendDtmf(dtmf); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, ""Handsfree phone proxy null for sending DTMF""); } }",a0499acf29cf0e5fd858febd065c85b301a7f708,,"processSendDtmf(int,android.bluetooth.BluetoothDevice)",16,9,"@com.android.internal.annotations.VisibleForTesting public boolean sendDtmf(int dtmf, android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, ""sendDtmf device is null""); return false; } if ((mPhoneProxy) != null) { try { return mPhoneProxy.sendDtmf(dtmf); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, ""Handsfree phone proxy null for sending DTMF""); } return false; }",9fa4db8f9b0bb1a751ecabf9840e6bcffdb476a5,"sendDtmf(int,android.bluetooth.BluetoothDevice)",184700,194,197
123694,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_StackFrame_GetValues002Test.java,,,,"public void testGetValues_Int() { org.apache.harmony.jpda.tests.jdwp.StackFrame.GetValues002Test.GetValuesTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.GetValues002Test.GetValuesTester(""testGetValues_Int"", ""breakpointInt"", ""runBreakpointInt"", ""param"", JDWPConstants.Tag.INT_TAG) { @java.lang.Override public void checkValue(org.apache.harmony.jpda.tests.framework.jdwp.Value value) { assertEquals((""Incorrect value in variable "" + (getTestVariableName())), GetValues002Debuggee.INT_PARAM_VALUE, value.getIntValue()); } }; runTest(tester); }",fd9a7830912c85b2cef36872a9c0be7c34d7a900,,testGetValues_Int(),8,17,"public void testGetValues005_Int() { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester(""breakpointInt"", StackTrace002Debuggee.INT_SIGNAL); org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod(""runBreakpointInt""); methodInfo.addVariable(""param"", new org.apache.harmony.jpda.tests.framework.jdwp.Value(StackTrace002Debuggee.INT_PARAM_VALUE)); runStackFrameTest(tester); }",85c71ee627fe305c8cac36e1fb811bd14895d43c,testGetValues005_Int(),215693,172,153
253791,luni_src_main_java_libcore_io_Os.java,87.0,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;",494a0ce2a7f0aac0228246c89d393f6c8ba18c15,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws libcore.io.ErrnoException;",943493c1b49b571bf0389b1d02871a7bb7948b4d,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.util.MutableLong,long)","sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.util.MutableLong,long)",8,84,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;",494a0ce2a7f0aac0228246c89d393f6c8ba18c15,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.util.MutableLong,long)",494601,46,45
519549,tests_tests_telephony_EmbmsMiddlewareTestApp_src_android_telephony_cts_embmstestapp_CtsDownloadService.java,,,,"@java.lang.Override public void dispose(int subscriptionId) { mReceivedCalls.add(java.util.Arrays.asList(android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_CLOSE, subscriptionId)); }",3abe098cd5b86bfd09f6a9c790d7a23513a545ba,,dispose(int),6,0,"@java.lang.Override public void dispose(int subscriptionId) { android.os.Bundle b = new android.os.Bundle(); b.putString(android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_NAME, android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_CLOSE); b.putInt(android.telephony.cts.embmstestapp.CtsDownloadService.ARGUMENT_SUBSCRIPTION_ID, subscriptionId); mReceivedCalls.add(b); }",e67e489e3105271fc9e6b6b3fc245c047d42b8bc,dispose(int),1118,56,120
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,,"@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } java.lang.String nodeName = enquote(node.getId()); java.time.Instant startInstant = node.getStartInstant(); java.time.Instant endInstant = node.getEndInstant(); boolean priorityClash = node.hasPriorityClash(); java.lang.String fromTimestamp = startInstant.toString(); java.lang.String toTimestamp = (endInstant == null) ? ""..."" : endInstant.toString(); java.lang.String optionalColor = (priorityClash) ? "",color=\""red\"""" : """"; java.lang.String label = ((((((node.getZoneInfosString()) + ""\nFrom="") + fromTimestamp) + "" to "") + toTimestamp) + ""\nPeriod count="") + (node.getPeriodCount()); writeLine((((((nodeName + ""[label=\"""") + label) + ""\"""") + optionalColor) + ""];"")); for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child : node.getChildren()) { writeLine((((nodeName + "" -> "") + (enquote(child.getId()))) + "";"")); } }",6d3698274f718078e5a1ab5cb762cc9ebb56eb50,,visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree$ZoneNode),4,6,"@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if (node.isRoot()) { return; } java.lang.String nodeName = enquote(node.getId()); java.time.Instant startInstant = node.getStartInstant(); java.time.Instant endInstant = node.getEndInstant(); boolean priorityClash = node.hasPriorityClash(); java.lang.String fromTimestamp = startInstant.toString(); java.lang.String toTimestamp = endInstant.toString(); java.lang.String optionalColor = (priorityClash) ? "",color=\""red\"""" : """"; java.lang.String label = ((((((node.getZoneInfosString()) + ""\nFrom="") + fromTimestamp) + "" to "") + toTimestamp) + ""\nPeriod count="") + (node.getPeriodCount()); writeLine((((((nodeName + ""[label=\"""") + label) + ""\"""") + optionalColor) + ""];"")); for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child : node.getChildren()) { writeLine((((nodeName + "" -> "") + (enquote(child.getId()))) + "";"")); } }",2132fbf28ca1a6f1d4ac3ee4df2b8a27b12cc1fb,visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree$ZoneNode),153175,294,281
146715,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_DensitySplitOptions.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected java.util.Set<java.lang.String> getDefaultValues() { com.android.resources.Density[] values = com.android.resources.Density.values(); java.util.Set<java.lang.String> fullList = com.google.common.collect.Sets.newHashSetWithExpectedSize(((values.length) - 2)); for (com.android.resources.Density value : values) { if (((value != (com.android.resources.Density.NODPI)) && (value != (com.android.resources.Density.ANYDPI))) && (value.isRecommended())) { fullList.add(value.getResourceValue()); } } java.lang.System.out.println((""DEFAULT: "" + fullList)); return fullList; }",210778282d47900a063850cd389e2258cbfc918d,,getDefaultValues(),2,3,@java.lang.Override protected java.util.Set<java.lang.String> getDefaultValues() { com.android.resources.Density[] values = com.android.resources.Density.values(); java.util.Set<java.lang.String> fullList = com.google.common.collect.Sets.newHashSetWithExpectedSize(((values.length) - 2)); for (com.android.resources.Density value : values) { if (((value != (com.android.resources.Density.NODPI)) && (value != (com.android.resources.Density.ANYDPI))) && (value.isRecommended())) { fullList.add(value.getResourceValue()); } } return fullList; },fe31e8b95026df16fa0c143e9e0eb38f145d47a1,getDefaultValues(),355156,170,152
617334,src_java_com_android_internal_telephony_DeviceStateMonitor.java,9.0,"private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_0.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } setUnsolResponseFilter(newFilter, false); }",5cca485ac23e81e87a173a53271b16e84762b5b6,"private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } if (!(shouldTurnOffLinkCapacityEstimate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.LINK_CAPACITY_ESTIMATE; } setUnsolResponseFilter(newFilter, false); }",d23a92bd867bb4990375963d97aaf5aad20a37f2,"updateDeviceState(int,boolean)","updateDeviceState(int,boolean)",14,19,"private void onUpdateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } if (!(shouldTurnOffLinkCapacityEstimate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.LINK_CAPACITY_ESTIMATE; } if (!(shouldTurnOffPhysicalChannelConfig())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.PHYSICAL_CHANNEL_CONFIG; } setUnsolResponseFilter(newFilter, false); }",8efaa0839f153f8f5663e178cf5cf356ef108674,"onUpdateDeviceState(int,boolean)",514522,473,510
278601,tests_src_com_android_providers_telephony_TelephonyProviderTest.java,,,,@java.lang.Override protected void tearDown() throws java.lang.Exception { super.tearDown(); mContext.closeDatabase(); },e53b233ba343d3ca43f3f0464fb3b951038a10dc,,tearDown(),6,4,@java.lang.Override protected void tearDown() throws java.lang.Exception { super.tearDown(); mTelephonyProviderTestable.closeDatabase(); },84e3bafe193c6ad2dd8194e1b6535d92fd279038,tearDown(),273118,29,36
398132,src_com_android_bluetooth_avrcp_AddressedMediaPlayer.java,7.0,"boolean sendTrackChangeWithId(boolean requesting, @android.annotation.Nullable com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (((""sendTrackChangeWithId ("" + requesting) + ""): controller "") + mediaController)); byte[] track; long qid = android.media.session.MediaSession.QueueItem.UNKNOWN_ID; if (mediaController != null) { android.media.session.PlaybackState state = mediaController.getPlaybackState(); if (state != null) qid = state.getActiveQueueItemId(); } if ((!requesting) && (qid == (mLastTrackIdSent))) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (""not sending duplicate track changed id "" + qid)); return false; } track = java.nio.ByteBuffer.allocate(AvrcpConstants.UID_SIZE).putLong(qid).array(); if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (""trackChangedRsp: 0x"" + (com.android.bluetooth.Utils.byteArrayToString(track)))); int trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; if (requesting) trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_INTERIM; mMediaInterface.trackChangedRsp(trackChangedNT, track); mLastTrackIdSent = qid; return trackChangedNT == (AvrcpConstants.NOTIFICATION_TYPE_CHANGED); }",b798b589d3579b9441745189c03f996853480a18,"boolean sendTrackChangeWithId(boolean requesting, @android.annotation.Nullable com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (((""sendTrackChangeWithId ("" + requesting) + ""): controller "") + mediaController)); byte[] track; long qid = getActiveQueueItemId(mediaController); if ((!requesting) && (qid == (mLastTrackIdSent))) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (""not sending duplicate track changed id "" + qid)); return false; } track = java.nio.ByteBuffer.allocate(AvrcpConstants.UID_SIZE).putLong(qid).array(); if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (""trackChangedRsp: 0x"" + (com.android.bluetooth.Utils.byteArrayToString(track)))); int trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; if (requesting) trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_INTERIM; mMediaInterface.trackChangedRsp(trackChangedNT, track); mLastTrackIdSent = qid; return trackChangedNT == (AvrcpConstants.NOTIFICATION_TYPE_CHANGED); }",a1ed411b6d252c976890b4c97f91173ec6ed0263,"sendTrackChangeWithId(boolean,com.android.bluetooth.avrcp.MediaController)","sendTrackChangeWithId(boolean,com.android.bluetooth.avrcp.MediaController)",4,6,"boolean sendTrackChangeWithId(boolean requesting, @android.annotation.Nullable com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (((""sendTrackChangeWithId ("" + requesting) + ""): controller "") + mediaController)); long qid = getActiveQueueItemId(mediaController); byte[] track = java.nio.ByteBuffer.allocate(AvrcpConstants.UID_SIZE).putLong(qid).array(); if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (""trackChangedRsp: 0x"" + (com.android.bluetooth.Utils.byteArrayToString(track)))); int trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; if (requesting) trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_INTERIM; mMediaInterface.trackChangedRsp(trackChangedNT, track); mLastTrackIdSent = qid; return trackChangedNT == (AvrcpConstants.NOTIFICATION_TYPE_CHANGED); }",a0affb109a958e6f86611ff274127964ee1c0adf,"sendTrackChangeWithId(boolean,com.android.bluetooth.avrcp.MediaController)",336816,366,286
146403,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_managed_adaptor_AndroidConfigAdaptor.java,,,,@java.lang.Override public boolean getGeneratePngs() { return model.getGeneratePngs(); },bb1148de87fa3a3cfa52b017aaa74219d82cb59b,,getGeneratePngs(),11,29,@java.lang.Override public com.android.build.gradle.internal.dsl.PreprocessingOptions getPreprocessingOptions() { return model.getPreProcessingOptions(); },c76a9a22615776f8cca3d734ec6c58c6cc581242,getPreprocessingOptions(),236394,25,37
109038,jack_src_com_android_jack_jayce_JayceMethodLoader.java,1.0,"@javax.annotation.Nonnull private com.android.jack.jayce.MethodNode getNNode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded) throws com.android.jack.jayce.JayceFormatException, com.android.jack.jayce.JayceVersionException, java.io.IOException { com.android.jack.jayce.MethodNode methodNode = nnode.get(); if ((methodNode == null) || ((methodNode.getLevel()) != (NodeLevel.FULL))) { com.android.jack.jayce.DeclaredTypeNode declaredTypeNode = enclosingClassLoader.getNNode(NodeLevel.FULL); methodNode = declaredTypeNode.getMethodNode(loaded); } return methodNode; }",54151105f06b8670c49a1c2ebea564bee71d1bcc,"@javax.annotation.Nonnull private com.android.jack.jayce.MethodNode getNNode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded) throws com.android.jack.jayce.JayceFormatException, com.android.jack.jayce.JayceVersionException, java.io.IOException { com.android.jack.jayce.MethodNode methodNode = nnode.get(); if ((methodNode == null) || ((methodNode.getLevel()) != (NodeLevel.FULL))) { com.android.jack.jayce.DeclaredTypeNode declaredTypeNode = enclosingClassLoader.getNNode(NodeLevel.FULL, loaded.getEnclosingType().getSession()); methodNode = declaredTypeNode.getMethodNode(loaded); } return methodNode; }",83cbb45a6b3f17ea40f5adfd3d149b265791e623,getNNode(com.android.jack.ir.ast.JMethod),getNNode(com.android.jack.ir.ast.JMethod),3,1,"@javax.annotation.Nonnull private com.android.jack.jayce.MethodNode getNNode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded) throws com.android.jack.jayce.JayceFormatException, com.android.jack.jayce.JayceVersionException, java.io.IOException { com.android.jack.jayce.MethodNode methodNode = nnode.get(); if ((methodNode == null) || ((methodNode.getLevel()) != (NodeLevel.FULL))) { com.android.jack.jayce.DeclaredTypeNode declaredTypeNode = enclosingClassLoader.getNNode(NodeLevel.FULL, loaded.getEnclosingType().getSession().getUserLogger()); methodNode = declaredTypeNode.getMethodNode(loaded); } return methodNode; }",49d7112aee3eaab68806de9523ffe2b0aae9efa5,getNNode(com.android.jack.ir.ast.JMethod),402758,174,177
579565,src_java_com_android_internal_telephony_RIL.java,223.0,"@java.lang.Override public void sendDeviceState(int stateType, boolean state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_DEVICE_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" "") + stateType) + "":"") + state)); } try { radioProxy.sendDeviceState(rr.mSerial, stateType, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendDeviceState"", e); } } }",5beb0e6185d052059416f02f72615a6a027625ba,"@java.lang.Override public void sendDeviceState(int stateType, boolean state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SEND_DEVICE_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" "") + stateType) + "":"") + state)); } try { radioProxy.sendDeviceState(rr.mSerial, stateType, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendDeviceState"", e); } } }",c1a6346284ce83b45ab9b6ee83d40a8388b6b1f1,"sendDeviceState(int,boolean,android.os.Message)","sendDeviceState(int,boolean,android.os.Message)",3,223,"@java.lang.Override public void sendDeviceState(int stateType, boolean state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_DEVICE_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" "") + stateType) + "":"") + state)); } try { radioProxy.sendDeviceState(rr.mSerial, stateType, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendDeviceState"", e); } } }",5beb0e6185d052059416f02f72615a6a027625ba,"sendDeviceState(int,boolean,android.os.Message)",89341,235,231
253791,luni_src_main_java_libcore_io_Os.java,33.0,"public int ioctlFlags(java.io.FileDescriptor fd, java.lang.String interfaceName) throws android.system.ErrnoException;",e24c3e0d4dc1a49b56778f022d012753e5aebfc4,"public int ioctlFlags(java.io.FileDescriptor fd, java.lang.String interfaceName) throws libcore.io.ErrnoException;",0aed81378e6b73f50be03d017e292fd787a2d0a9,"ioctlFlags(java.io.FileDescriptor,java.lang.String)","ioctlFlags(java.io.FileDescriptor,java.lang.String)",8,32,"public int ioctlFlags(java.io.FileDescriptor fd, java.lang.String interfaceName) throws android.system.ErrnoException;",e24c3e0d4dc1a49b56778f022d012753e5aebfc4,"ioctlFlags(java.io.FileDescriptor,java.lang.String)",494655,32,31
124245,jill_tests_com_android_jill_Core.java,1.0,"@org.junit.Test public void coreToJayceFromFolder() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jill.JillTestTools.getAndroidTop()) + ""/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/""))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir(""core_"", ""_dir""); new com.android.jill.Jill(options, ""0.1"").process(options.getBinaryFile()); }",478f1f49535483b4ba52ae42b6ae0997cd0e1914,"@org.junit.Test public void coreToJayceFromFolder() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jack.test.TestingEnvironment.getAndroidRootDir().getPath()) + ""/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/""))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir(""core_"", ""_dir""); new com.android.jill.Jill(options, ""0.1"").process(options.getBinaryFile()); }",e1f68bb37559d6c85b7a78f5c87c7e7139ef975e,coreToJayceFromFolder(),coreToJayceFromFolder(),3,1,"@org.junit.Test public void coreToJayceFromFolder() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jack.test.TestsProperties.getAndroidRootDir().getPath()) + ""/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/""))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir(""core_"", ""_dir""); new com.android.jill.Jill(options, ""0.1"").process(options.getBinaryFile()); }",2a795cba378c972baf7090ad15cae5f409c91782,coreToJayceFromFolder(),151548,173,173
153812,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,11.0,"@org.junit.Test @org.junit.Ignore public void test001c() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, ""keep-first"", errOut, false, false); java.io.File myClass1 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_1); java.io.File myClass2 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_2); java.io.File myClass3 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_3); junit.framework.Assert.assertTrue(myClass1.exists()); junit.framework.Assert.assertTrue(myClass2.exists()); junit.framework.Assert.assertTrue(myClass3.exists()); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",af962b3c1f68d2e40df3ff196990c14b4a6db61a,"@org.junit.Test public void test001c() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, ""keep-first"", errOut, false, false); com.android.jack.library.InputJackLibrary outputLib = null; try { outputLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir(jackOutput); com.android.sched.vfs.InputVFile myClass1 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE1_PATH); com.android.sched.vfs.InputVFile myClass2 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE2_PATH); com.android.sched.vfs.InputVFile myClass3 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE3_PATH); checkJayceNotEmpty(myClass1); checkJayceNotEmpty(myClass2); checkJayceNotEmpty(myClass3); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { junit.framework.Assert.fail(); } finally { if (outputLib != null) { outputLib.close(); } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); } }",7cc92a3d136297719a5d459eb699f37f1aac39a6,test001c(),test001c(),9,12,"@org.junit.Test public void test001c() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, ""keep-first"", errOut, false, false); com.android.jack.library.InputJackLibrary outputLib = null; try { outputLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); com.android.sched.vfs.InputVFile myClass1 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE1_PATH); com.android.sched.vfs.InputVFile myClass2 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE2_PATH); com.android.sched.vfs.InputVFile myClass3 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE3_PATH); checkJayceNotEmpty(myClass1); checkJayceNotEmpty(myClass2); checkJayceNotEmpty(myClass3); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { junit.framework.Assert.fail(); } finally { if (outputLib != null) { outputLib.close(); } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); } }",e837b6ac61a7321e3193c0ff9371025f872fb618,test001c(),456028,335,333
34670,tests_tests_holo_src_android_holo_cts_LayoutTestActivity.java,2.0,"@java.lang.Override protected void onPreExecute() { mBitmap = getBitmap(); mReferenceBitmap = android.holo.cts.BitmapAssets.getBitmap(getApplicationContext(), mBitmapName); final int threshold = 1; mSame = compareTo(mBitmap, mReferenceBitmap, threshold); }",f224b9cf0c42579157b7d54c345391b57ef5a29c,"@java.lang.Override protected void onPreExecute() { mBitmap = getBitmap(); mReferenceBitmap = android.holo.cts.BitmapAssets.getBitmap(getApplicationContext(), mBitmapName); final float tolerance = 0.01F; mSame = compareTo(mBitmap, mReferenceBitmap, tolerance); }",4a363a7d41af2971e3f03fc40b0d6216cc53a004,onPreExecute(),onPreExecute(),3,2,"@java.lang.Override protected void onPreExecute() { mBitmap = getBitmap(); mReferenceBitmap = android.holo.cts.BitmapAssets.getBitmap(getApplicationContext(), mBitmapName); final int threshold = 1; mSame = compareTo(mBitmap, mReferenceBitmap, threshold); }",f224b9cf0c42579157b7d54c345391b57ef5a29c,onPreExecute(),342323,63,61
43220,eclipse_plugins_com.android.ide.eclipse.tests_unittests_com_android_ide_common_resources_platform_AttributeInfoTest.java,,,,"private void checkElement(java.io.File file, org.w3c.dom.Element element, java.util.Map<java.lang.String, com.android.ide.common.resources.platform.AttributeInfo> map) { org.w3c.dom.NamedNodeMap attributes = element.getAttributes(); for (int i = 0, n = attributes.getLength(); i < n; i++) { org.w3c.dom.Attr attribute = ((org.w3c.dom.Attr) (attributes.item(i))); java.lang.String uri = attribute.getNamespaceURI(); java.lang.String name = attribute.getLocalName(); java.lang.String value = attribute.getValue(); if (com.android.SdkConstants.ANDROID_URI.equals(uri)) { com.android.ide.common.resources.platform.AttributeInfo info = map.get(name); if (info == null) { java.lang.System.out.println((((""Warning: Unknown attribute '"" + name) + ""' in "") + file)); return; } if (!(info.isValid(value, null, null))) { if ((name.equals(""duration"")) || (name.equals(""exitFadeDuration""))) { return; } java.lang.String message = (((((((""In file "" + (file.getPath())) + "":\nCould not validate value \"""") + value) + ""\"" for attribute \'"") + name) + ""' where the attribute info has formats "") + (info.getFormats())) + ""\n""; java.lang.System.out.println((""\n"" + message)); fail(message); } if (((value.startsWith(""@"")) || (value.startsWith(""?""))) && (!(info.getFormats().contains(Format.REFERENCE)))) { java.lang.System.out.println((((((""Warning: Found resource reference for attribute "" + name) + "" which doesn't allow references ("") + (info.getFormats())) + ""): value was "") + value)); } } } }",161305aa55f735cf885dd02badd4a3f694290818,,"checkElement(java.io.File,org.w3c.dom.Element,java.util.Map)",2,13,"private void checkElement(java.io.File file, org.w3c.dom.Element element, java.util.Map<java.lang.String, com.android.ide.common.resources.platform.AttributeInfo> map, java.util.Set<java.lang.String> seen) { org.w3c.dom.NamedNodeMap attributes = element.getAttributes(); for (int i = 0, n = attributes.getLength(); i < n; i++) { org.w3c.dom.Attr attribute = ((org.w3c.dom.Attr) (attributes.item(i))); java.lang.String uri = attribute.getNamespaceURI(); java.lang.String name = attribute.getLocalName(); java.lang.String value = attribute.getValue(); if (com.android.SdkConstants.ANDROID_URI.equals(uri)) { com.android.ide.common.resources.platform.AttributeInfo info = map.get(name); if (info == null) { java.lang.System.out.println((((""Warning: Unknown attribute '"" + name) + ""' in "") + file)); return; } if (!(info.isValid(value, null, null))) { if ((name.equals(""duration"")) || (name.equals(""exitFadeDuration""))) { return; } java.lang.String message = (((((((""In file "" + (file.getPath())) + "":\nCould not validate value \"""") + value) + ""\"" for attribute \'"") + name) + ""' where the attribute info has formats "") + (info.getFormats())) + ""\n""; java.lang.System.out.println((""\n"" + message)); fail(message); } if (((value.startsWith(""@"")) || (value.startsWith(""?""))) && (!(info.getFormats().contains(Format.REFERENCE)))) { if (!(seen.contains(name))) { seen.add(name); java.lang.System.out.println((((((((""\"""" + name) + ""\"" with formats "") + (info.getFormats())) + "" was passed a reference ("") + value) + "") in file "") + file)); } } } } }",4c3cd94e0ccdaea7d82d2529b857facbba656ecb,"checkElement(java.io.File,org.w3c.dom.Element,java.util.Map,java.util.Set)",161235,437,466
161633,platform_platform-impl_src_com_intellij_ide_SystemHealthMonitor.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void startActivityMonitoring() { if (!(com.intellij.internal.statistic.StatisticsUploadAssistant.isSendAllowed())) { return; } com.intellij.concurrency.JobScheduler.getScheduler().scheduleAtFixedRate(new java.lang.Runnable() { private int mLastCount; @java.lang.Override public void run() { int count = com.intellij.ide.ActivityTracker.getInstance().getCount(); if (count > (mLastCount)) { int actions = count - (mLastCount); java.lang.System.out.println((""# of actions: "" + actions)); } mLastCount = count; } }, 20, 20, java.util.concurrent.TimeUnit.SECONDS); }",8f73e661a7e5a1f5de852fb5d080d4bc7339ca15,,startActivityMonitoring(),9,15,"private static void startActivityMonitoring() { com.intellij.concurrency.JobScheduler.getScheduler().scheduleAtFixedRate(new java.lang.Runnable() { @java.lang.Override public void run() { long count = com.intellij.ide.SystemHealthMonitor.ourStudioActionCount.getAndSet(0); if (count == 0) { return; } com.intellij.internal.statistic.analytics.PlatformUsageTracker.trackActivity(count); if (com.intellij.openapi.application.ApplicationManager.getApplication().isInternal()) { java.lang.System.out.printf(""%d: Activity Tracker, usage in the last minute: %d\n"", ((java.lang.System.currentTimeMillis()) % 10000), count); } } }, com.intellij.ide.SystemHealthMonitor.INTERVAL_IN_MINUTES, com.intellij.ide.SystemHealthMonitor.INTERVAL_IN_MINUTES, java.util.concurrent.TimeUnit.MINUTES); }",3f836d4376feeb5d89ff3c26a12b0d0529fd4c3d,startActivityMonitoring(),263595,148,200
626051,src_com_android_bluetooth_a2dpsink_mbs_A2dpMediaBrowserService.java,21.0,"@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""AVRCP not yet connected.""); result.sendResult(java.util.Collections.emptyList()); return; } android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""onLoadChildren parentMediaId="" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }",e87afcb15a9f96785c1980e4ebf204ef4c92abc0,"@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""AVRCP not yet connected.""); result.sendResult(java.util.Collections.emptyList()); return; } if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""onLoadChildren parentMediaId="" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }",95d881035d3a5918f46e3271f223832f348b06b0,"onLoadChildren(java.lang.String,com.android.bluetooth.a2dpsink.mbs.Result)","onLoadChildren(java.lang.String,com.android.bluetooth.a2dpsink.mbs.Result)",3,21,"@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.w(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ""AVRCP not yet connected.""); result.sendResult(java.util.Collections.emptyList()); return; } if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, (""onLoadChildren parentMediaId="" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }",9b35f87453b84d598b79b16031c09c149e1c9c25,"onLoadChildren(java.lang.String,com.android.bluetooth.a2dpsink.mbs.Result)",324313,270,270
299361,tests_wifitests_src_com_android_server_wifi_hotspot2_PasspointManagerTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void addProviderWithInvalidCredential() throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration(); config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP(); config.homeSp.fqdn = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FQDN; config.homeSp.friendlyName = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FRIENDLY_NAME; config.credential = new android.net.wifi.hotspot2.pps.Credential(); config.credential.realm = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_REALM; config.credential.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); config.credential.userCredential.username = ""username""; config.credential.userCredential.password = ""password""; config.credential.userCredential.eapType = android.net.wifi.hotspot2.pps.Credential.EAP_TLS; config.credential.userCredential.nonEapInnerMethod = ""MS-CHAP""; assertFalse(mManager.addProvider(config)); }",01f52178177e1f9037e18f4dddfc68f234382096,,addProviderWithInvalidCredential(),10,6,"@org.junit.Test public void addProviderWithInvalidCredential() throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration(); config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP(); config.homeSp.fqdn = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FQDN; config.homeSp.friendlyName = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FRIENDLY_NAME; config.credential = new android.net.wifi.hotspot2.pps.Credential(); config.credential.realm = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_REALM; config.credential.caCertificate = com.android.server.wifi.FakeKeys.CA_CERT0; config.credential.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); config.credential.userCredential.username = ""username""; config.credential.userCredential.password = ""password""; config.credential.userCredential.eapType = android.net.wifi.EAPConstants.EAP_TLS; config.credential.userCredential.nonEapInnerMethod = ""MS-CHAP""; assertFalse(mManager.addProvider(config)); }",d818e8b4067d82c063422ad75ba130166b368b08,addProviderWithInvalidCredential(),155014,279,297
253791,luni_src_main_java_libcore_io_Os.java,97.0,"public android.system.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",d12ec6a5fd9340102322758e1226679beb3a67ee,"public libcore.io.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException;",e246ea862eb7c4ca58207641a4b1558248925476,"getsockoptTimeval(java.io.FileDescriptor,int,int)","getsockoptTimeval(java.io.FileDescriptor,int,int)",8,94,"public android.system.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",d12ec6a5fd9340102322758e1226679beb3a67ee,"getsockoptTimeval(java.io.FileDescriptor,int,int)",494592,38,36
102887,jack_src_com_android_jack_analysis_tracer_ComposedTracerBrush.java,,,,@java.lang.Override public void endTraceSeed(com.android.jack.ir.ast.JField field) { composedStatus.pop(); },ddb55b591e38392d59fa657242b7caa07563ab60,,endTraceSeed(com.android.jack.ir.ast.JField),6,15,@java.lang.Override public void endTraceSeed(@javax.annotation.Nonnull com.android.jack.ir.ast.JField field) { composedStatus.pop(); },2bac820603c6dca01624edfdb6f27bc7a49d3241,endTraceSeed(com.android.jack.ir.ast.JField),103979,33,38
253791,luni_src_main_java_libcore_io_Posix.java,57.0,"public native void mkfifo(java.lang.String path, int mode) throws android.system.ErrnoException;",d79a4269fe1341d1ce3489736a2d0cf74943f0eb,"public native void mkfifo(java.lang.String path, int mode) throws libcore.io.ErrnoException;",8aa21d514e40a7c548f7371287199fe411715146,"mkfifo(java.lang.String,int)","mkfifo(java.lang.String,int)",8,54,"public native void mkfifo(java.lang.String path, int mode) throws android.system.ErrnoException;",d79a4269fe1341d1ce3489736a2d0cf74943f0eb,"mkfifo(java.lang.String,int)",494538,27,26
113636,jack_src_com_android_jack_library_FileType.java,1.0,public boolean isBinaryFile(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile v) { return v.getName().endsWith(getFileExtension()); },90e21a743fdb856328626c424cadbab49e8b7dec,public boolean isFileType(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile v) { return v.getName().endsWith(getFileExtension()); },bd99d412274a6e53b79e7a99b7e5355c2b70fa87,isBinaryFile(com.android.sched.vfs.InputVFile),isFileType(com.android.sched.vfs.InputVFile),5,6,public boolean isOfType(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile v) { return v.getName().endsWith(getFileExtension()); },c31d8a3845115f1b7ff64853f4cd1743b2ddd6ee,isOfType(com.android.sched.vfs.InputVFile),38394,35,35
243440,test_458-checker-instruction-simplification_src_Main.java,54.0,"public static int SubNeg2(int arg1, int arg2) { int temp = -arg1; return (temp - arg2) | (temp - arg2); }",9112666c5bb082a05a586c24ebfb483bae714c8e,"public static int SubNeg2(int arg1, int arg2) { if (Main.doThrow) { throw new java.lang.Error(); } int temp = -arg1; return (temp - arg2) | (temp - arg2); }",5bc11dd28f8e789481f3b659c028d0fffb872a27,"SubNeg2(int,int)","SubNeg2(int,int)",3,29,"public static int $noinline$SubNeg2(int arg1, int arg2) { if (Main.doThrow) { throw new java.lang.Error(); } int temp = -arg1; return (temp - arg2) | (temp - arg2); }",beafb327a88979b56a157b40e835141453922fb4,"$noinline$SubNeg2(int,int)",118227,49,54
106603,jack_src_com_android_jack_ecj_loader_jast_JAstBinaryType.java,7.0,@java.lang.Override public long getTagBits() { long tagBits = com.android.jack.ecj.loader.jast.AnnotationUtils.getTagBits(jDeclaredType); com.android.jack.ir.ast.JClassOrInterface enclosingType = jDeclaredType.getEnclosingType(); if ((enclosingType != null) && (!(isAnonymous()))) { com.android.jack.ecj.loader.jast.JAstBinaryType enclosing = classpathLocation.findType(enclosingType); if (enclosing != null) { if (com.android.jack.ecj.loader.jast.LoaderUtils.isDeprecated(enclosing)) { tagBits |= org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers.AccDeprecatedImplicitly; } } } return tagBits; },7c69576e65f43f3a8d1bedd158af4662adbc27b5,@java.lang.Override public long getTagBits() { long tagBits = com.android.jack.ecj.loader.jast.AnnotationUtils.getTagBits(jDeclaredType); com.android.jack.ir.ast.JClassOrInterface enclosingType = jDeclaredType.getEnclosingType(); if (((enclosingType != null) && (!(isAnonymous()))) && (enclosingType instanceof com.android.jack.ir.ast.JDefinedClassOrInterface)) { com.android.jack.ecj.loader.jast.JAstBinaryType enclosing = classpathLocation.findType(((com.android.jack.ir.ast.JDefinedClassOrInterface) (enclosingType))); if (enclosing != null) { if (com.android.jack.ecj.loader.jast.LoaderUtils.isDeprecated(enclosing)) { tagBits |= org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers.AccDeprecatedImplicitly; } } } return tagBits; },0d3eb3fbabbe1deae3f276230ad826fbf8b65aa5,getTagBits(),getTagBits(),3,7,@java.lang.Override public long getTagBits() { return com.android.jack.ecj.loader.jast.AnnotationUtils.getTagBits(jDeclaredType); },8ca6a07b56ec96c0cc68f1358059f0db3b554e41,getTagBits(),495345,207,38
79721,graphics_java_android_graphics_Canvas.java,72.0,"private static native void nativeDrawVertices(int nCanvas, int mode, int n, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, int nPaint);",4d874a6e0469309b51213a1f8849a5b0ca549542,"private static native void nativeDrawVertices(long nCanvas, int mode, int n, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, long nPaint);",9743c7f048aba91f01ce56ddc79742a60cee69b7,"nativeDrawVertices(int,int,int,float[],int,float[],int,int[],int,short[],int,int,int)","nativeDrawVertices(long,int,int,float[],int,float[],int,int[],int,short[],int,int,long)",6,79,"private static native void nativeDrawVertices(long nativeCanvas, int mode, int n, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, long nativePaint);",9222f98e3d41dfb24286437e9905c5d0232efe41,"nativeDrawVertices(long,int,int,float[],int,float[],int,int[],int,short[],int,int,long)",35639,64,64
245772,test_478-checker-clinit-check-pruning_src_Main.java,12.0,static void someStaticMethod(java.lang.Iterable<?> it) { it.iterator(); },102a2a1ab52df104ca1979f5c84c01cb2aee01a8,"static void $noinline$someStaticMethod(java.lang.Iterable<?> it) { it.iterator(); if (Main.doThrow) throw new java.lang.Error(""""); }",eba38b7a62096f8f547288812fa39dec2178a573,someStaticMethod(java.lang.Iterable),$noinline$someStaticMethod(java.lang.Iterable),6,9,"static void $noinline$someStaticMethod(java.lang.Iterable<?> it) { it.iterator(); if (Main.doThrow) { throw new java.lang.Error(""""); } }",193d670e6b9c8833fa2bb8f98eaef04a2236e505,$noinline$someStaticMethod(java.lang.Iterable),465441,38,40
503001,src_java_com_android_ims_ImsUt.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setSuppServiceIndication(android.os.Handler h, int what, java.lang.Object obj) { mSsIndicationRegistrant = new android.os.Registrant(h, what, obj); }",e4fb2827e8373418b11fa707ae7594078fe64b71,,"setSuppServiceIndication(android.os.Handler,int,java.lang.Object)",5,5,"public void registerForSuppServiceIndication(android.os.Handler h, int what, java.lang.Object obj) { mSsIndicationRegistrant = new android.os.Registrant(h, what, obj); }",d8ae4517e71ee1cf3863db1df3494545633dbe27,"registerForSuppServiceIndication(android.os.Handler,int,java.lang.Object)",202823,50,51
205067,src_com_android_bluetooth_btservice_AdapterService.java,185.0,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog((""dumpsys arguments, skipping normal dumpsys: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-java-bin"")) { dumpJava(fd); } else { dumpNative(fd, args); } } return; } writer.println(""Bluetooth Status""); writer.println(("" enabled: "" + (isEnabled()))); writer.println(("" state: "" + (getState()))); writer.println(("" address: "" + (getAddress()))); writer.println((("" name: "" + (getName())) + ""\n"")); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",9ae9afdc5328a56d30781668cc2eabc89133bc6b,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog((""dumpsys arguments, check for proto output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-java-bin"")) { dumpJava(fd); } else { dumpNative(fd, args); } return; } } writer.println(""Bluetooth Status""); writer.println(("" enabled: "" + (isEnabled()))); writer.println(("" state: "" + (getState()))); writer.println(("" address: "" + (getAddress()))); writer.println((("" name: "" + (getName())) + ""\n"")); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",feca0436736c23a568dedc17d0445a34391b7945,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])","dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",2,185,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-java-bin"")) { dumpJava(fd); } else { dumpNative(fd, args); } return; } } writer.println(""Bluetooth Status""); writer.println(("" enabled: "" + (isEnabled()))); writer.println(("" state: "" + (getState()))); writer.println(("" address: "" + (getAddress()))); writer.println((("" name: "" + (getName())) + ""\n"")); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",8ce4a78ef6236d711e2d5d460c6840fd11d26a9a,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",147026,350,351
304942,src_com_android_bluetooth_sap_SapRilReceiver.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void disconnectIndication(int var1, int var2) { }",b6bd0127c3684ef02da8d8872b430cf2f4aaaada,,"disconnectIndication(int,int)",4,19,"public void disconnectIndication(int token, int disconnectType) { android.util.Log.d(com.android.bluetooth.sap.SapRilReceiver.TAG, (((""disconnectIndication: token "" + token) + "" disconnectType "") + disconnectType)); com.android.bluetooth.sap.SapMessage sapMessage = new com.android.bluetooth.sap.SapMessage(SapMessage.ID_RIL_UNSOL_DISCONNECT_IND); sapMessage.setDisconnectionType(disconnectType); sendSapMessage(sapMessage); }",faf107b7a779c3eece12578aae32e9bc5ee34653,"disconnectIndication(int,int)",311599,14,133
95554,build-system_gradle_src_build-test_groovy_com_android_build_gradle_ManualBuildTest.java,3.0,"public void testOverlay1Content() throws java.lang.Exception { java.io.File project = buildProject(""overlay1"", BasePlugin.GRADLE_MIN_VERSION); java.io.File drawableOutput = new java.io.File(project, ""build/res/all/debug/drawable""); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, ""no_overlay.png"", com.android.build.gradle.ManualBuildTest.GREEN); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, ""type_overlay.png"", com.android.build.gradle.ManualBuildTest.GREEN); }",3166c1ba769bfec742167f7ed694266f07861030,"public void testOverlay1Content() throws java.lang.Exception { java.io.File project = buildProject(""overlay1"", BasePlugin.GRADLE_MIN_VERSION); java.io.File drawableOutput = new java.io.File(project, ((""build/"" + (com.android.build.gradle.BasePlugin.FD_I)) + ""/res/debug/drawable"")); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, ""no_overlay.png"", com.android.build.gradle.ManualBuildTest.GREEN); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, ""type_overlay.png"", com.android.build.gradle.ManualBuildTest.GREEN); }",360a9c1c416a15960fd03d4a28447a11dae59748,testOverlay1Content(),testOverlay1Content(),2,3,"public void testOverlay1Content() throws java.lang.Exception { java.io.File project = buildProject(""overlay1"", BasePlugin.GRADLE_MIN_VERSION); java.io.File drawableOutput = new java.io.File(project, ((""build/"" + (com.android.build.gradle.BasePlugin.FD_INTERMEDIATES)) + ""/res/debug/drawable"")); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, ""no_overlay.png"", com.android.build.gradle.ManualBuildTest.GREEN); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, ""type_overlay.png"", com.android.build.gradle.ManualBuildTest.GREEN); }",309b0f244928e059c8419395e8721f6a6b5b86fd,testOverlay1Content(),56560,164,167
83045,test_030-bad-finalizer_src_Main.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void finalize() { java.lang.System.out.println(""Finalizer started and spinning...""); int j = 0; long start; long end; start = java.lang.System.nanoTime(); for (int i = 0; i < 1000000; i++) j++; end = java.lang.System.nanoTime(); java.lang.System.out.println(""Finalizer done spinning.""); java.lang.System.out.println(""Finalizer sleeping forever now.""); while (true) { Main.snooze(10000); } }",c0a2a8ef04a9351e795c30aa624ee61da2223116,,finalize(),2,1,"protected void finalize() { java.lang.System.out.println(""Finalizer started and spinning...""); int j = 0; long start; long end; start = java.lang.System.nanoTime(); for (int i = 0; i < 1000000; i++) { j++; } end = java.lang.System.nanoTime(); java.lang.System.out.println(""Finalizer done spinning.""); java.lang.System.out.println(""Finalizer sleeping forever now.""); while (true) { Main.snooze(10000); } }",c44a9e15d778521c89daa67b130504c338a9165d,finalize(),207577,110,112
119600,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_utils_JacocoAgent.java,,,,"public static java.lang.String getJvmArg() { java.lang.String buildDir = java.lang.System.getenv(""PROJECT_BUILD_DIR""); buildDir = (buildDir == null) ? ""build"" : buildDir; java.io.File jacocoAgent = new java.io.File(buildDir, ""jacoco/agent.jar""); if (!(jacocoAgent.isFile())) { try { org.jacoco.agent.AgentJar.extractTo(jacocoAgent); } catch (java.io.IOException ignored) { fail(""Error extracting jacoco agent""); } } java.lang.String jvmArgs = (((""-javaagent:"" + (jacocoAgent.toString())) + ""=destfile="") + buildDir) + ""/jacoco/test.exec""; return jvmArgs; }",699f77aaacd8c6d8f0a30d20698e656801face77,,getJvmArg(),4,0,"public static java.lang.String getJvmArg() { java.lang.String buildDir = java.lang.System.getenv(""PROJECT_BUILD_DIR""); buildDir = (buildDir == null) ? ""build"" : buildDir; java.io.File jacocoAgent = new java.io.File(buildDir, ""jacoco/agent.jar""); if (!(jacocoAgent.isFile())) { try { org.jacoco.agent.AgentJar.extractTo(jacocoAgent); } catch (java.io.IOException ignored) { fail(""Error extracting jacoco agent""); } } return (((""-javaagent:"" + (jacocoAgent.toString())) + ""=destfile="") + buildDir) + ""/jacoco/test.exec""; }",7e336cd15f6fff2655f3cb3991e726ab21cb3c0d,getJvmArg(),190022,168,157
640286,tests_net_java_com_android_server_connectivity_TetheringTest.java,11.0,"private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false); }",d6b25ea0615a7db781e76663f3565e02938de105,"private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false, false); }",d8bf2a35dcf9c009b823d4f04d73a8d819d36068,buildMobileIpv4UpstreamState(),buildMobileIpv4UpstreamState(),13,49,"private static android.net.NetworkState buildMobileIPv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false, false); }",26d46386491f13da3c377035cd25442b55da7d68,buildMobileIPv4UpstreamState(),511942,43,43
19545,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_ui_GridLayoutHelper.java,,,,public com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutHelper spacing(int s) { com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutHelper.mGL.verticalSpacing = s; com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutHelper.mGL.horizontalSpacing = s; return this; },030f8696de2ed976c6b6036bc276a8673910a2e8,,spacing(int),3,2,public com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutBuilder spacing(int s) { com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutBuilder.mGL.verticalSpacing = s; com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutBuilder.mGL.horizontalSpacing = s; return this; },daf42a0c4b2cb27511fe72a4f66b21dd7b637729,spacing(int),105477,92,92
518498,system_image_uitests_app_src_main_java_com_android_devtools_systemimage_uitest_watchers_ApiDemosWatcher.java,,,,"@java.lang.Override public boolean checkForCondition() { boolean condition = false; boolean isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(""(?i)no thanks(?-i)"")).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); try { if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(""(?i)no thanks(?-i)"")).click(); condition = true; } isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(""(?i)continue(?-i)"")).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(""(?i)continue(?-i)"")).click(); condition = true; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { throw new java.lang.AssertionError(""Failed to dismiss the API Demos Test confirmation popup dialogs""); } return condition; }",4c153ade8f229e1eed5c4b0d5727d68a79532723,,checkForCondition(),2,0,"@java.lang.Override public boolean checkForCondition() { boolean condition = false; boolean isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(com.android.devtools.systemimage.uitest.watchers.ApiDemosWatcher.NO_THANKS_CASE_INSENSITIVE)).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); try { if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(com.android.devtools.systemimage.uitest.watchers.ApiDemosWatcher.NO_THANKS_CASE_INSENSITIVE)).click(); condition = true; } isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(com.android.devtools.systemimage.uitest.watchers.ApiDemosWatcher.CONTINUE_CASE_INSENSITIVE)).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(com.android.devtools.systemimage.uitest.watchers.ApiDemosWatcher.CONTINUE_CASE_INSENSITIVE)).click(); condition = true; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { throw new java.lang.AssertionError(""Failed to dismiss the API Demos Test confirmation popup dialogs""); } return condition; }",f668e4d7b274b36eb73125c7eefeae9a7b09b24d,checkForCondition(),440029,288,364
78933,src_com_google_gct_intellij_endpoints_validation_ApiNameInspection.java,4.0,"@org.jetbrains.annotations.NotNull @java.lang.Override public com.intellij.psi.PsiElementVisitor buildVisitor(@org.jetbrains.annotations.NotNull final com.intellij.codeInspection.ProblemsHolder holder, boolean isOnTheFly) { return new com.google.gct.intellij.endpoints.validation.EndpointPsiElementVisitor() { @java.lang.Override public void visitElement(com.intellij.psi.PsiElement element) { if (!(element instanceof com.intellij.psi.PsiAnnotation)) { return; } if (!(isEndpointClass(element))) { return; } com.intellij.psi.PsiAnnotation annotation = ((com.intellij.psi.PsiAnnotation) (element)); if (!(annotation.getQualifiedName().equals(GctConstants.APP_ENGINE_ANNOTATION_API))) { return; } com.intellij.psi.PsiAnnotationParameterList annotationMemberValue = annotation.getParameterList(); if (annotationMemberValue == null) { return; } if ((annotationMemberValue.getAttributes().length) == 0) { return; } java.lang.String nameValueWithQuotes = annotation.findAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_ATTRIBUTE).getText(); java.lang.String nameValue = com.google.gct.intellij.endpoints.util.EndpointUtilities.removeBeginningAndEndingQuotes(nameValueWithQuotes); if (!(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_PATTERN.matcher(nameValue).matches())) { holder.registerProblem(element, ""Invalid api name. The api name must match '[a-z]+[A-Za-z0-9]*'"", LocalQuickFix.EMPTY_ARRAY); } } }; }",8a7b3ecd83a52ebd2d61977f5804c1d91447e4ba,"@org.jetbrains.annotations.NotNull @java.lang.Override public com.google.gct.intellij.endpoints.validation.PsiElementVisitor buildVisitor(@org.jetbrains.annotations.NotNull final com.intellij.codeInspection.ProblemsHolder holder, boolean isOnTheFly) { return new com.google.gct.intellij.endpoints.validation.EndpointPsiElementVisitor() { @java.lang.Override public void visitAnnotation(com.google.gct.intellij.endpoints.validation.PsiAnnotation annotation) { if (!(annotation.getQualifiedName().equals(GctConstants.APP_ENGINE_ANNOTATION_API))) { return; } com.google.gct.intellij.endpoints.validation.PsiAnnotationMemberValue annotationMemberValue = annotation.findAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_ATTRIBUTE); if (annotationMemberValue == null) { return; } java.lang.String nameValueWithQuotes = annotationMemberValue.getText(); java.lang.String nameValue = com.google.gct.intellij.endpoints.util.EndpointUtilities.removeBeginningAndEndingQuotes(nameValueWithQuotes); if (!(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_PATTERN.matcher(nameValue).matches())) { holder.registerProblem(annotation, ""Invalid api name. The api name must match '[a-z]+[A-Za-z0-9]*'"", LocalQuickFix.EMPTY_ARRAY); } } }; }",125ba8251a982045a171d9a93ca915902687153f,"buildVisitor(com.intellij.codeInspection.ProblemsHolder,boolean)","buildVisitor(com.intellij.codeInspection.ProblemsHolder,boolean)",3,4,"@org.jetbrains.annotations.NotNull @java.lang.Override public com.intellij.psi.PsiElementVisitor buildVisitor(@org.jetbrains.annotations.NotNull final com.intellij.codeInspection.ProblemsHolder holder, boolean isOnTheFly) { return new com.google.gct.intellij.endpoints.validation.EndpointPsiElementVisitor() { @java.lang.Override public void visitAnnotation(com.intellij.psi.PsiAnnotation annotation) { if (!(annotation.getQualifiedName().equals(GctConstants.APP_ENGINE_ANNOTATION_API))) { return; } com.intellij.psi.PsiAnnotationMemberValue annotationMemberValue = annotation.findAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_ATTRIBUTE); if (annotationMemberValue == null) { return; } java.lang.String nameValueWithQuotes = annotationMemberValue.getText(); java.lang.String nameValue = com.google.gct.intellij.endpoints.util.EndpointUtilities.removeBeginningAndEndingQuotes(nameValueWithQuotes); if (!(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_PATTERN.matcher(nameValue).matches())) { holder.registerProblem(annotation, ""Invalid api name: it must start with a lower case letter and consists only of letter and digits"", LocalQuickFix.EMPTY_ARRAY); } } }; }",4798e4f7c2ad66176184b93016629e21a06f0025,"buildVisitor(com.intellij.codeInspection.ProblemsHolder,boolean)",86481,342,312
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,69.0,"private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } if ((mIccRecords) != null) { mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForNetworkLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } }",54b7b4311d6291505b2f43aadcdc3696b50e5927,"private void registerAllAppEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { log(""registerUiccCardEvents: registering for EVENT_APP_READY""); app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { log(""registerUiccCardEvents: registering for EVENT_RECORDS_LOADED""); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }",828968ff0678875f6ed1bb6730dcf2ed905d12a5,registerUiccCardEvents(),registerAllAppEvents(),13,27,"private void registerAllAppEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""registerUiccCardEvents: registering for EVENT_APP_READY""); app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""registerUiccCardEvents: registering for EVENT_RECORDS_LOADED""); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }",763c12f6cf4ac9f8c2d6bdac22da4eb259356f20,registerAllAppEvents(),424401,214,256
44462,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLECKeyPairGenerator.java,,,,"@java.lang.Override public void initialize(int keysize, java.security.SecureRandom random) { final java.lang.String name = org.apache.harmony.xnet.provider.jsse.OpenSSLECKeyPairGenerator.SIZE_TO_CURVE_NAME.get(keysize); if (name == null) { throw new java.security.InvalidParameterException((""unknown key size "" + keysize)); } group = org.apache.harmony.xnet.provider.jsse.OpenSSLECGroupContext.getCurveByName(name); }",7fedfe1fe442c98eeddcc6957785345653978c8d,,"initialize(int,java.security.SecureRandom)",9,0,"@java.lang.Override public void initialize(int keysize, java.security.SecureRandom random) { final java.lang.String name = org.apache.harmony.xnet.provider.jsse.OpenSSLECKeyPairGenerator.SIZE_TO_CURVE_NAME.get(keysize); if (name == null) { throw new java.security.InvalidParameterException((""unknown key size "" + keysize)); } final org.apache.harmony.xnet.provider.jsse.OpenSSLECGroupContext possibleGroup = org.apache.harmony.xnet.provider.jsse.OpenSSLECGroupContext.getCurveByName(name); if (possibleGroup == null) { throw new java.security.InvalidParameterException((""unknown curve "" + name)); } group = possibleGroup; }",2efff48debf4d038dbc583d0b260e445fdc4fbbd,"initialize(int,java.security.SecureRandom)",468946,122,174
295866,src_com_android_bluetooth_pbapclient_PbapClientConnectionHandler.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean connectSocket() { try { if ((mPseRec) == null) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: UUID: "" + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm()) != (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: PSM: "" + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: channel: "" + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket) != null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Could not create socket""); return false; } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Error while connecting socket"", e); return false; } }",4353c8f808b986d6825f99c1b1183fc370095cc0,,connectSocket(),9,3,"private boolean connectSocket() { try { if ((mPseRec) == null) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: UUID: "" + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm()) != (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: PSM: "" + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, (""connectSocket: channel: "" + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket) != null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Could not create socket""); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ""Error while connecting socket"", e); } return false; }",d94a5d5965a50a9e9f2d4d64445f37974274400c,connectSocket(),441783,392,389
601315,src_com_android_server_telecom_CallAudioManager.java,35.0,void toggleMute() { mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); },3ceb98036cb2fa354ce98164a75fd26a3829ba9e,"void toggleMute() { if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this, ""ignoring toggleMute for emergency call""); return; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }",35e962d1ddd73d121cfff6b82420b8d2ac3b7edc,toggleMute(),toggleMute(),4,35,"@com.android.internal.annotations.VisibleForTesting public void toggleMute() { if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this, ""ignoring toggleMute for emergency call""); return; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }",0556667b85d9d0181072dd58a1c5cac50b68210f,toggleMute(),82852,67,79
91995,luni_src_main_java_libcore_io_Posix.java,17.0,"public native void setsockoptByte(java.io.FileDescriptor fd, int level, int option, int value) throws libcore.io.ErrnoException;",1c9bd929eba825acb6bb0c90bd3ef397f35bab6f,"public native void setsockoptByte(java.io.FileDescriptor fd, int level, int option, int value) throws android.os.ErrnoException;",d221a37e49d19937b3560f745976c02d362fb07f,"setsockoptByte(java.io.FileDescriptor,int,int,int)","setsockoptByte(java.io.FileDescriptor,int,int,int)",3,19,"public native void setsockoptByte(java.io.FileDescriptor fd, int level, int option, int value) throws android.system.ErrnoException;",3f4673f62e65e2f2ce6b0612ca99d2187f10fbaf,"setsockoptByte(java.io.FileDescriptor,int,int,int)",169925,33,33
194733,jack-tests_tests_com_android_jack_java8_GwtTestPostM.java,,,,@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_34).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },412a7b5f6d0362be0ad632572de66d4b7274e16c,,testClassImplementsTwoInterfacesWithSameDefenderMethod(),9,16,@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { run(GWT_LAMBDA_TEST_34); },519f1ecd769e8ab1772a63b59be3d2d0ca0d4818,testClassImplementsTwoInterfacesWithSameDefenderMethod(),353236,66,39
526078,harnesses_tradefed_src_com_android_tradefed_util_ProcessUtil.java,,,,"@java.lang.Override public boolean run() { synchronized(mLock) { mExecutionThread = java.lang.Thread.currentThread(); if (mCancelled) { com.android.tradefed.log.LogUtil.CLog.i(""Python process was cancelled before being awaited.""); return false; } } boolean success; try { success = (mProcess.waitFor()) == 0; com.android.tradefed.log.LogUtil.CLog.i(""Python process terminates normally.""); } catch (java.lang.InterruptedException e) { success = false; com.android.tradefed.log.LogUtil.CLog.i(""Python process is interrupted.""); } return success; }",3aabc9c82faddf6e0bf27b46952b3f979bb9223e,,run(),7,6,"@java.lang.Override public boolean run() { synchronized(mLock) { mExecutionThread = java.lang.Thread.currentThread(); if (mCancelled) { com.android.tradefed.log.LogUtil.CLog.i(""Process was cancelled before being awaited.""); return false; } } boolean success; try { success = (mProcess.waitFor()) == 0; com.android.tradefed.log.LogUtil.CLog.i(""Process terminates normally.""); } catch (java.lang.InterruptedException e) { success = false; com.android.tradefed.log.LogUtil.CLog.i(""Process is interrupted.""); } return success; }",f08548287c0ed32c0dda7b7cfb5aa51ece9b3836,run(),28390,152,149
195789,src_com_android_packageinstaller_PackageInstallerActivity.java,30.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onActivityResult(int request, int result, android.content.Intent data) { if (request == (com.android.packageinstaller.PackageInstallerActivity.REQUEST_ENABLE_UNKNOWN_SOURCES)) { if ((result == (RESULT_OK)) && (isUnknownSourcesEnabled())) { initiateInstall(); } else { finish(); } } }",3819a254312dd108c479b7df11470d8810aff9f5,,"onActivityResult(int,int,android.content.Intent)",2,29,"@java.lang.Override public void onActivityResult(int request, int result, android.content.Intent data) { if (((request == (com.android.packageinstaller.PackageInstallerActivity.REQUEST_ENABLE_UNKNOWN_SOURCES)) && (result == (RESULT_OK))) && (isUnknownSourcesEnabled())) { initiateInstall(); } else { finish(); } }",f6ce978c197b27a8f3152e10bc3128ad4f21ab0d,"onActivityResult(int,int,android.content.Intent)",518750,80,77
87789,luni_src_main_java_java_text_DecimalFormatSymbols.java,29.0,public char getMinusSign() { return minusSign; },cab053dfe19131fef42b751890860aa806e9928b,public char getMinusSign() { return minusSign.charAt(0); },155cacfd9d1042a7cc0e3dff151afc8816d312f7,getMinusSign(),getMinusSign(),6,29,"public char getMinusSign() { if ((minusSign.length()) == 1) { return minusSign.charAt(0); } throw new java.lang.UnsupportedOperationException((""Minus sign spans multiple characters: "" + (minusSign))); }",1830444b5b705883c83cee0454cd99e125859278,getMinusSign(),97592,14,48
390556,src_main_java_com_android_apksig_ApkVerifier.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.nio.ByteBuffer getAndroidManifestFromApk(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections) throws com.android.apksig.apk.ApkFormatException, com.android.apksig.zip.ZipFormatException, java.io.IOException { java.util.List<com.android.apksig.internal.zip.CentralDirectoryRecord> cdRecords = com.android.apksig.internal.apk.v1.V1SchemeVerifier.parseZipCentralDirectory(apk, zipSections); java.nio.ByteBuffer result = com.android.apksig.ApkSigner.getAndroidManifestFromApk(cdRecords, apk.slice(0, zipSections.getZipCentralDirectoryOffset())); if (result == null) { throw new com.android.apksig.apk.ApkFormatException(""Missing AndroidManifest.xml""); } return result; }",a7336f81c628ef5c0981deb028c169fc10570799,,"getAndroidManifestFromApk(com.android.apksig.util.DataSource,com.android.apksig.apk.ApkUtils$ZipSections)",11,39,"private static java.nio.ByteBuffer getAndroidManifestFromApk(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections) throws com.android.apksig.apk.ApkFormatException, java.io.IOException { java.util.List<com.android.apksig.internal.zip.CentralDirectoryRecord> cdRecords = com.android.apksig.internal.apk.v1.V1SchemeVerifier.parseZipCentralDirectory(apk, zipSections); try { return com.android.apksig.ApkSigner.getAndroidManifestFromApk(cdRecords, apk.slice(0, zipSections.getZipCentralDirectoryOffset())); } catch (com.android.apksig.zip.ZipFormatException e) { throw new com.android.apksig.apk.ApkFormatException(""Failed to read AndroidManifest.xml"", e); } }",4161de4d90787e71fb07f62e9d65313ef1785c22,"getAndroidManifestFromApk(com.android.apksig.util.DataSource,com.android.apksig.apk.ApkUtils$ZipSections)",117751,199,194
591217,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,,,,"@org.junit.Test public void testFSuffix() throws com.android.euicc.telephony.UiccChannelException, com.android.internal.telephony.uicc.euicc.EuiccCardException { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523FF9F7001019000""); com.android.euicc.data.EuiccProfile[] profiles = mEuiccCard.getAllProfiles(); assertEquals(1, profiles.length); assertEquals(""987600000000005432"", profiles[0].getIccid()); assertEquals(ProfileState.ENABLED, profiles[0].getState()); verifyStoreData(channel, ""BF2D0D5C0B5A909192B79F709599BF76""); }",fe9182e8c4599b116fb66f2865ef58a681a3cf6e,,testFSuffix(),5,7,"@org.junit.Test public void testFSuffix() { int channel = mockLogicalChannelResponses(""BF2D14A012E3105A0A896700000000004523FF9F7001019000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.service.euicc.EuiccProfileInfo[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getAllProfiles(resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); android.service.euicc.EuiccProfileInfo[] profiles = resultCaptor.result; assertEquals(1, profiles.length); assertEquals(""987600000000005432"", profiles[0].getIccid()); assertEquals(EuiccProfileInfo.PROFILE_STATE_ENABLED, profiles[0].getState()); verifyStoreData(channel, ""BF2D0D5C0B5A909192B79F709599BF76""); }",8275d64fccda47b73d8f076ebaf0d826e6c97222,testFSuffix(),993,170,230
579565,src_java_com_android_internal_telephony_RIL.java,28.0,"@java.lang.Override public void getHardwareConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_HARDWARE_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getHardwareConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getHardwareConfig"", e); } } }",efced3fd9e824cffdbe806053aa925c975c1c3b2,"@java.lang.Override public void getHardwareConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_HARDWARE_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getHardwareConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getHardwareConfig"", e); } } }",8f4bb5367e3969948f06225a94229c9540ac43cf,getHardwareConfig(android.os.Message),getHardwareConfig(android.os.Message),3,28,"@java.lang.Override public void getHardwareConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_HARDWARE_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getHardwareConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getHardwareConfig"", e); } } }",efced3fd9e824cffdbe806053aa925c975c1c3b2,getHardwareConfig(android.os.Message),89317,207,203
139390,src_com_google_gct_idea_debugger_CloudLineBreakpointType.java,,,,@java.lang.Override protected javax.swing.Icon getSetIcon(boolean isMuted) { return icons.GoogleCloudToolsIcons.CLOUD_BREAKPOINT; },0581b77200cd5640ccf3ef5001306503da1e0a1b,,getSetIcon(boolean),30,2,@java.lang.Override protected javax.swing.Icon getSetIcon(boolean isMuted) { if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(myErrorMessage))) { return icons.GoogleCloudToolsIcons.CLOUD_BREAKPOINT_ERROR; } if (myIsVerified) { return icons.GoogleCloudToolsIcons.CLOUD_BREAKPOINT_CHECKED; } return icons.GoogleCloudToolsIcons.CLOUD_BREAKPOINT; },3df842bd65c394d0c29b43b5619e7c9095b9d66a,getSetIcon(boolean),250736,35,101
325584,luni_src_test_java_libcore_java_util_CollectionsTest.java,57.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static <K, V extends java.lang.Comparable<V>> void check_unmodifiableNavigableMap_keyAndValueCollections(java.util.NavigableMap<K, V> map, java.util.List<K> keysInOrder, java.util.List<V> valuesInOrder, K absentKey) { java.util.List<K> reverseKeys = libcore.java.util.CollectionsTest.reverseCopyOf(keysInOrder); libcore.java.util.CollectionsTest.check_unmodifiableSet(map.keySet(), absentKey); libcore.java.util.CollectionsTest.check_orderedSet(map.keySet(), keysInOrder); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.navigableKeySet(), keysInOrder, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingMap().descendingKeySet(), keysInOrder, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingKeySet(), reverseKeys, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableSet(map.descendingMap().keySet(), absentKey); libcore.java.util.CollectionsTest.check_orderedSet(map.descendingMap().keySet(), reverseKeys); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingMap().navigableKeySet(), reverseKeys, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableOrderedCollection(map.values(), valuesInOrder); libcore.java.util.CollectionsTest.check_orderedCollection(map.values(), valuesInOrder); libcore.java.util.CollectionsTest.check_unmodifiableOrderedCollection(map.descendingMap().values(), libcore.java.util.CollectionsTest.reverseCopyOf(valuesInOrder)); libcore.java.util.CollectionsTest.check_orderedCollection(map.descendingMap().values(), libcore.java.util.CollectionsTest.reverseCopyOf(valuesInOrder)); }",4dc354336da00e9277744e227efb595cb330d2ef,,"check_unmodifiableNavigableMap_keyAndValueCollections(java.util.NavigableMap,java.util.List,java.util.List,java.lang.Object)",4,120,"private static <K, V> void check_unmodifiableNavigableMap_collectionViews(java.util.NavigableMap<K, V> map, java.util.List<K> keysInOrder, java.util.List<V> valuesInOrder, K absentKey) { java.util.List<K> reverseKeys = libcore.java.util.CollectionsTest.reverseCopyOf(keysInOrder); libcore.java.util.CollectionsTest.check_unmodifiableSet(map.keySet(), absentKey); libcore.java.util.CollectionsTest.check_orderedSet(map.keySet(), keysInOrder); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.navigableKeySet(), keysInOrder, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingMap().descendingKeySet(), keysInOrder, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingKeySet(), reverseKeys, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableSet(map.descendingMap().keySet(), absentKey); libcore.java.util.CollectionsTest.check_orderedSet(map.descendingMap().keySet(), reverseKeys); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingMap().navigableKeySet(), reverseKeys, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableOrderedCollection(map.values(), valuesInOrder); libcore.java.util.CollectionsTest.check_orderedCollection(map.values(), valuesInOrder); libcore.java.util.CollectionsTest.check_unmodifiableOrderedCollection(map.descendingMap().values(), libcore.java.util.CollectionsTest.reverseCopyOf(valuesInOrder)); libcore.java.util.CollectionsTest.check_orderedCollection(map.descendingMap().values(), libcore.java.util.CollectionsTest.reverseCopyOf(valuesInOrder)); }",49c46d913beabfefe73f9c948bfb864a94d10697,"check_unmodifiableNavigableMap_collectionViews(java.util.NavigableMap,java.util.List,java.util.List,java.lang.Object)",516375,427,418
148495,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_Svg2Vector.java,,,,"private static void addStyleToPath(com.android.assetstudiolib.vectordrawable.vg.SVGLeaveNode path, java.lang.String value) { com.android.assetstudiolib.vectordrawable.Svg2Vector.logger.log(java.util.logging.Level.FINE, (""Style found is "" + value)); if (value != null) { java.lang.String[] parts = value.split("";""); for (int k = (parts.length) - 1; k >= 0; k--) { java.lang.String subStyle = parts[k]; java.lang.String[] nameValue = subStyle.split("":""); if ((((nameValue.length) == 2) && ((nameValue[0]) != null)) && ((nameValue[1]) != null)) { if (com.android.assetstudiolib.vectordrawable.Svg2Vector.presentationMap.containsKey(nameValue[0])) { com.android.assetstudiolib.vectordrawable.Svg2Vector.fillPresentationAttributes(path, nameValue[0], nameValue[1]); } else if (nameValue[0].equals(com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_OPACITY)) { com.android.assetstudiolib.vectordrawable.Svg2Vector.fillPresentationAttributes(path, com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_FILL_OPACITY, nameValue[1]); } } } } }",b5d308d010ce6b6bd007d172be27b6a36d9d98d0,,"addStyleToPath(com.android.assetstudiolib.vectordrawable.vg.SVGLeaveNode,java.lang.String)",11,4,"private static void addStyleToPath(com.android.assetstudiolib.vectordrawable.SvgLeafNode path, java.lang.String value) { com.android.assetstudiolib.vectordrawable.Svg2Vector.logger.log(java.util.logging.Level.FINE, (""Style found is "" + value)); if (value != null) { java.lang.String[] parts = value.split("";""); for (int k = (parts.length) - 1; k >= 0; k--) { java.lang.String subStyle = parts[k]; java.lang.String[] nameValue = subStyle.split("":""); if ((((nameValue.length) == 2) && ((nameValue[0]) != null)) && ((nameValue[1]) != null)) { if (com.android.assetstudiolib.vectordrawable.Svg2Vector.presentationMap.containsKey(nameValue[0])) { path.fillPresentationAttributes(nameValue[0], nameValue[1]); } else if (nameValue[0].equals(com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_OPACITY)) { path.fillPresentationAttributes(com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_FILL_OPACITY, nameValue[1]); } } } } }",cf88117d97e4f794dbc0a5098aacd8a2bb06ef34,"addStyleToPath(com.android.assetstudiolib.vectordrawable.SvgLeafNode,java.lang.String)",5065,303,269
124355,dx_src_com_android_dx_cf_direct_ClassPathOpener.java,10.0,"private boolean processArchive(java.io.File file) throws java.io.IOException { java.util.zip.ZipFile zip = new java.util.zip.ZipFile(file); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(40000); byte[] buf = new byte[20000]; boolean any = false; java.util.ArrayList<? extends java.util.zip.ZipEntry> entriesList = java.util.Collections.list(zip.entries()); if (sort) { java.util.Collections.sort(entriesList, new java.util.Comparator<java.util.zip.ZipEntry>() { public int compare(java.util.zip.ZipEntry a, java.util.zip.ZipEntry b) { return com.android.dx.cf.direct.ClassPathOpener.compareClassNames(a.getName(), b.getName()); } }); } consumer.onProcessArchiveStart(file); for (java.util.zip.ZipEntry one : entriesList) { if (one.isDirectory()) { continue; } java.lang.String path = one.getName(); if (filter.accept(path)) { java.io.InputStream in = zip.getInputStream(one); baos.reset(); for (; ;) { int amt = in.read(buf); if (amt < 0) { break; } baos.write(buf, 0, amt); } in.close(); byte[] bytes = baos.toByteArray(); any |= consumer.processFileBytes(path, one.getTime(), bytes); } } zip.close(); return any; }",90f82d69df54e24a520a98fd8dcbdf5fc59875b6,"private boolean processArchive(java.io.File file) throws java.io.IOException { java.util.zip.ZipFile zip = new java.util.zip.ZipFile(file); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(40000); byte[] buf = new byte[20000]; boolean any = false; java.util.ArrayList<? extends java.util.zip.ZipEntry> entriesList = java.util.Collections.list(zip.entries()); if (sort) { java.util.Collections.sort(entriesList, new java.util.Comparator<java.util.zip.ZipEntry>() { public int compare(java.util.zip.ZipEntry a, java.util.zip.ZipEntry b) { return com.android.dx.cf.direct.ClassPathOpener.compareClassNames(a.getName(), b.getName()); } }); } consumer.onProcessArchiveStart(file); for (java.util.zip.ZipEntry one : entriesList) { final boolean isDirectory = one.isDirectory(); java.lang.String path = one.getName(); if (filter.accept(path)) { final byte[] bytes; if (!isDirectory) { java.io.InputStream in = zip.getInputStream(one); baos.reset(); for (; ;) { int amt = in.read(buf); if (amt < 0) { break; } baos.write(buf, 0, amt); } in.close(); bytes = baos.toByteArray(); } else { bytes = new byte[0]; } any |= consumer.processFileBytes(path, one.getTime(), bytes); } } zip.close(); return any; }",e1bdcdab58c3824bab43b2f1698db0e4c49c5287,processArchive(java.io.File),processArchive(java.io.File),2,10,"private boolean processArchive(java.io.File file) throws java.io.IOException { java.util.zip.ZipFile zip = new java.util.zip.ZipFile(file); java.util.ArrayList<? extends java.util.zip.ZipEntry> entriesList = java.util.Collections.list(zip.entries()); if (sort) { java.util.Collections.sort(entriesList, new java.util.Comparator<java.util.zip.ZipEntry>() { public int compare(java.util.zip.ZipEntry a, java.util.zip.ZipEntry b) { return com.android.dx.cf.direct.ClassPathOpener.compareClassNames(a.getName(), b.getName()); } }); } consumer.onProcessArchiveStart(file); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(40000); byte[] buf = new byte[20000]; boolean any = false; for (java.util.zip.ZipEntry one : entriesList) { final boolean isDirectory = one.isDirectory(); java.lang.String path = one.getName(); if (filter.accept(path)) { final byte[] bytes; if (!isDirectory) { java.io.InputStream in = zip.getInputStream(one); baos.reset(); int read; while ((read = in.read(buf)) != (-1)) { baos.write(buf, 0, read); } in.close(); bytes = baos.toByteArray(); } else { bytes = new byte[0]; } any |= consumer.processFileBytes(path, one.getTime(), bytes); } } zip.close(); return any; }",4fcbe4eb3094c12bb582a8d820df9b8c5b7cbfca,processArchive(java.io.File),437651,358,349
113692,build-system_builder_src_main_java_com_android_builder_core_ApkInfoParser.java,,,,"@java.lang.Override public java.lang.String toString() { return ((((((((""ApkInfo{"" + ""mPackageName='"") + (mPackageName)) + '\'') + "", mVersionCode="") + (mVersionCode)) + "", mVersionName='"") + (mVersionName)) + '\'') + '}'; }",f95c4abd4ad49dcb913ee150e9f457f4ad82ab98,,toString(),4,1,"@java.lang.Override public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""packageName"", mPackageName).add(""versionCode"", mVersionCode).add(""versionName"", mVersionName).toString(); }",8ebc382f18ec18ab9d0828f9840c5773110b6426,toString(),440873,73,59
37559,manifmerger_src_com_android_manifmerger_ManifestMerger.java,11.0,"private java.lang.String fileLineInfo(org.w3c.dom.Node node, java.lang.String defaultName) { java.lang.String name = xmlFileName(node, defaultName); int line = com.android.manifmerger.XmlUtils.extractLineNumber(node); if (line <= 0) { return name; } else { return (name + ':') + line; } }",f10d1bd9b5db8cd30cd91c2e43c67eb74721950f,"@com.android.annotations.NonNull private com.android.manifmerger.IMergerLog.FileAndLine xmlFileAndLine(@com.android.annotations.NonNull org.w3c.dom.Node node, @com.android.annotations.Nullable java.lang.String defaultName) { java.lang.String name = xmlFileName(node, defaultName); int line = com.android.manifmerger.XmlUtils.extractLineNumber(node); return new com.android.manifmerger.IMergerLog.FileAndLine(name, line); }",90b0b3aa3f489cd8ddcb1b9b544812bd3ad418b7,"fileLineInfo(org.w3c.dom.Node,java.lang.String)","xmlFileAndLine(org.w3c.dom.Node,java.lang.String)",3,16,"@com.android.annotations.NonNull private com.android.manifmerger.IMergerLog.FileAndLine xmlFileAndLine(@com.android.annotations.NonNull org.w3c.dom.Node node) { java.lang.String name = com.android.manifmerger.XmlUtils.extractXmlFilename(node); int line = com.android.manifmerger.XmlUtils.extractLineNumber(node); return new com.android.manifmerger.IMergerLog.FileAndLine(name, line); }",3cf0f80d1575db4eb88048965275de9a119a9e1e,xmlFileAndLine(org.w3c.dom.Node),234874,124,118
83276,src_main_java_org_conscrypt_NativeCrypto.java,111.0,public static native long EVP_MD_CTX_copy(long ctx);,b3b9d085bc34ee5cc66c26e1bd02ca20fbce96cd,"public static native int EVP_MD_CTX_copy(long dst_ctx, long src_ctx);",4d79371cf95f9cae284cd7cbc8603aa0fc0dd202,EVP_MD_CTX_copy(long),"EVP_MD_CTX_copy(long,long)",5,54,"public static native int EVP_MD_CTX_copy(org.conscrypt.OpenSSLDigestContext dst_ctx, org.conscrypt.OpenSSLDigestContext src_ctx);",951b069b1cccc9827b460ea672cb9729d8b9cd3a,"EVP_MD_CTX_copy(org.conscrypt.OpenSSLDigestContext,org.conscrypt.OpenSSLDigestContext)",254618,24,42
140611,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_VariantModel.java,0.0,@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.ProductFlavor> getDefaultConfig();,195b0bee2a34bbc74a52a5a28f916aa157fcd205,@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.GradleProductFlavor> getDefaultConfig();,44e95331edfe4c3c7bff66ee113d8fa27483fa18,getDefaultConfig(),getDefaultConfig(),10,0,@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.CoreProductFlavor> getDefaultConfig();,663ccc3a8afeb914887e7b87094482ba2f29b21b,getDefaultConfig(),275066,41,41
233727,jack-tests_tests_com_android_jack_optimizations_valuepropagation_ValuePropagationTests.java,,,,"@org.junit.Test public void test004() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test004""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test004/A;""; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); compileAndValidateTypes(test, properties, new com.android.jack.optimizations.valuepropagation.Validators().insert(aType, new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert(""check()I"", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, ""A.check.no-jls.dalvik""))))); properties = properties.withPreserveJls(true); compileAndValidateTypes(test, properties, new com.android.jack.optimizations.valuepropagation.Validators().insert(aType, new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert(""check()I"", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, ""A.check.jls.dalvik""))))); }",9f01b7ca0a7ad9e5041b9c8ec558c044d7b80bce,,test004(),7,0,"@org.junit.Test public void test004() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test004""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test004/A;""; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""check()I"", dalvik(test, ""A.check.dalvik"")))); properties = properties.with(Optimizations.FieldValuePropagation.REMOVE_NULL_CHECKS.getName(), java.lang.Boolean.FALSE).with(Optimizations.FieldValuePropagation.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""check()I"", dalvik(test, ""A.check.r.n.c.dalvik"")))); }",807f8e0f390934d61a16d851f0d6dc46c2031a4b,test004(),438868,278,280
149757,services_core_java_com_android_server_am_ProviderMap.java,0.0,"boolean collectForceStopProviders(java.lang.String name, int appId, boolean doit, boolean evenPersistent, int userId, java.util.ArrayList<com.android.server.am.ContentProviderRecord> result) { boolean didSomething = collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mSingletonByClass, result); if ((!doit) && didSomething) { return true; } if (userId == (android.os.UserHandle.USER_ALL)) { for (int i = 0; i < (mProvidersByClassPerUser.size()); i++) { if (collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mProvidersByClassPerUser.valueAt(i), result)) { if (!doit) { return true; } didSomething = true; } } } else { java.util.HashMap<android.content.ComponentName, com.android.server.am.ContentProviderRecord> items = getProvidersByClass(userId); if (items != null) { didSomething |= collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, items, result); } } return didSomething; }",77c0c5bb4d9ff6b6e56ed401c0262558c0c0ce29,"boolean collectForceStopProviders(java.lang.String name, int appId, boolean doit, boolean evenPersistent, int userId, java.util.ArrayList<com.android.server.am.ContentProviderRecord> result) { boolean didSomething = false; if (name != null) { didSomething = collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mSingletonByClass, result); } if ((!doit) && didSomething) { return true; } if (userId == (android.os.UserHandle.USER_ALL)) { for (int i = 0; i < (mProvidersByClassPerUser.size()); i++) { if (collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mProvidersByClassPerUser.valueAt(i), result)) { if (!doit) { return true; } didSomething = true; } } } else { java.util.HashMap<android.content.ComponentName, com.android.server.am.ContentProviderRecord> items = getProvidersByClass(userId); if (items != null) { didSomething |= collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, items, result); } } return didSomething; }",c9ed324818783621616966855fc6845711c97a2e,"collectForceStopProviders(java.lang.String,int,boolean,boolean,int,java.util.ArrayList)","collectForceStopProviders(java.lang.String,int,boolean,boolean,int,java.util.ArrayList)",4,0,"boolean collectForceStopProviders(java.lang.String name, int appId, boolean doit, boolean evenPersistent, int userId, java.util.ArrayList<com.android.server.am.ContentProviderRecord> result) { boolean didSomething = false; if ((userId == (android.os.UserHandle.USER_ALL)) || (userId == (android.os.UserHandle.USER_OWNER))) { didSomething = collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mSingletonByClass, result); } if ((!doit) && didSomething) { return true; } if (userId == (android.os.UserHandle.USER_ALL)) { for (int i = 0; i < (mProvidersByClassPerUser.size()); i++) { if (collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mProvidersByClassPerUser.valueAt(i), result)) { if (!doit) { return true; } didSomething = true; } } } else { java.util.HashMap<android.content.ComponentName, com.android.server.am.ContentProviderRecord> items = getProvidersByClass(userId); if (items != null) { didSomething |= collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, items, result); } } return didSomething; }",ae2f58ec964090a1189cc84464486ef926713b80,"collectForceStopProviders(java.lang.String,int,boolean,boolean,int,java.util.ArrayList)",58079,268,295
92167,core_java_android_view_TextureView.java,23.0,"public void setSurfaceTexture(android.graphics.SurfaceTexture surfaceTexture) { if (surfaceTexture == null) { throw new java.lang.NullPointerException(""surfaceTexture must not be null""); } if ((mSurface) != null) { mSurface.release(); } mSurface = surfaceTexture; mUpdateSurface = true; invalidateParentIfNeeded(); }",dac31ad6f89e038e70c7a75f55e65345cf035ab1,"public void setSurfaceTexture(android.graphics.SurfaceTexture surfaceTexture) { if (surfaceTexture == null) { throw new java.lang.NullPointerException(""surfaceTexture must not be null""); } if ((mSurface) != null) { mSurface.release(); } mSurface = surfaceTexture; if (((mViewFlags) & (VISIBILITY_MASK)) == (VISIBLE)) { mSurface.setOnFrameAvailableListener(mUpdateListener); } mUpdateSurface = true; invalidateParentIfNeeded(); }",3b174ddfab84532e10118a8ca82c1fbdc03a34cd,setSurfaceTexture(android.graphics.SurfaceTexture),setSurfaceTexture(android.graphics.SurfaceTexture),3,22,"public void setSurfaceTexture(android.graphics.SurfaceTexture surfaceTexture) { if (surfaceTexture == null) { throw new java.lang.NullPointerException(""surfaceTexture must not be null""); } if ((mSurface) != null) { mSurface.release(); } mSurface = surfaceTexture; if (((mViewFlags) & (VISIBILITY_MASK)) == (VISIBLE)) { mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler); } mUpdateSurface = true; invalidateParentIfNeeded(); }",428b6116537a63482971aaffca7c4c69efd6455a,setSurfaceTexture(android.graphics.SurfaceTexture),476237,103,110
21933,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_UpdaterWindowImpl.java,9.0,"private void createPages() { mAvdManagerPage = new com.android.sdkuilib.internal.repository.AvdManagerPage(mPagesRootComposite, mUpdaterData); if ((java.lang.System.getenv(""EXPERIMENTAL"")) != null) { mPackagesPage = new com.android.sdkuilib.internal.repository.PackagesPage(mPagesRootComposite, mUpdaterData); } else { mLocalPackagePage = new com.android.sdkuilib.internal.repository.LocalPackagesPage(mPagesRootComposite, mUpdaterData); mRemotePackagesPage = new com.android.sdkuilib.internal.repository.RemotePackagesPage(mPagesRootComposite, mUpdaterData); } }",61abc4e0687602dbf3d2d778b828e36c9f9a8ff6,"private void createPages() { mAvdManagerPage = new com.android.sdkuilib.internal.repository.AvdManagerPage(mPagesRootComposite, mUpdaterData); if ((java.lang.System.getenv(""ANDROID_SDKMAN_EXP"")) != null) { mPackagesPage = new com.android.sdkuilib.internal.repository.PackagesPage(mPagesRootComposite, mUpdaterData); } else { mLocalPackagePage = new com.android.sdkuilib.internal.repository.LocalPackagesPage(mPagesRootComposite, mUpdaterData); mRemotePackagesPage = new com.android.sdkuilib.internal.repository.RemotePackagesPage(mPagesRootComposite, mUpdaterData); } }",ad793241cf08cccbf301d2b2e2fb46b9a684164b,createPages(),createPages(),8,20,"protected void createPages() { mAvdManagerPage = new com.android.sdkuilib.internal.repository.AvdManagerPage(mPagesRootComposite, mUpdaterData); mLocalPackagePage = new com.android.sdkuilib.internal.repository.LocalPackagesPage(mPagesRootComposite, mUpdaterData); mRemotePackagesPage = new com.android.sdkuilib.internal.repository.RemotePackagesPage(mPagesRootComposite, mUpdaterData); addPage(mAvdManagerPage, ""Virtual devices""); addPage(mLocalPackagePage, ""Installed packages""); addPage(mRemotePackagesPage, ""Available packages""); addExtraPages(); }",22f13b9dea142036f0cc7aca42e0c9b7c34d829c,createPages(),397695,157,143
14521,anttasks_src_com_android_ant_ApkBuilderTask.java,2.0,"private void createApk(com.android.apkbuilder.internal.ApkBuilderImpl apkBuilder, java.lang.String configName, java.lang.String resourceFilter, org.apache.tools.ant.types.Path path, java.lang.String debugPackageSuffix) throws com.android.apkbuilder.ApkBuilder.ApkCreationException, java.io.FileNotFoundException { java.lang.String filename; if ((configName != null) && (resourceFilter != null)) { filename = (((mBaseName) + ""-"") + configName) + "".ap_""; } else { filename = (mBaseName) + "".ap_""; } java.io.FileInputStream resoucePackageZipFile = new java.io.FileInputStream(new java.io.File(mOutFolder, filename)); mZipArchives.add(resoucePackageZipFile); if ((configName != null) && (resourceFilter != null)) { filename = ((mBaseName) + ""-"") + configName; } else { filename = mBaseName; } if (mSigned) { filename = filename + debugPackageSuffix; } else { filename = filename + ""-unsigned.apk""; } if ((configName == null) || (resourceFilter == null)) { if (mSigned) { java.lang.System.out.println(java.lang.String.format(""Creating %s and signing it with a debug key..."", filename)); } else { java.lang.System.out.println(java.lang.String.format(""Creating %s for release..."", filename)); } } else { if (mSigned) { java.lang.System.out.println(java.lang.String.format(""Creating %1$s (with %2$s) and signing it with a debug key..."", filename, resourceFilter)); } else { java.lang.System.out.println(java.lang.String.format(""Creating %1$s (with %2$s) for release..."", filename, resourceFilter)); } } java.io.File f = new java.io.File(mOutFolder, filename); org.apache.tools.ant.types.Path.PathElement element = path.createPathElement(); element.setLocation(f); apkBuilder.createPackage(f.getAbsoluteFile(), mZipArchives, mArchiveFiles, mJavaResources, mResourcesJars, mNativeLibraries); mZipArchives.remove(resoucePackageZipFile); }",b5418e4e7ac1193946a008aee1edf35d64577d89,"private void createApk(com.android.apkbuilder.internal.ApkBuilderImpl apkBuilder, java.lang.String outputfilename) throws com.android.apkbuilder.ApkBuilder.ApkCreationException, java.io.FileNotFoundException { java.io.FileInputStream resoucePackageZipFile = new java.io.FileInputStream(new java.io.File(mOutFolder, mResourceFile)); mZipArchives.add(resoucePackageZipFile); if (mSigned) { java.lang.System.out.println(java.lang.String.format(""Creating %s and signing it with a debug key..."", outputfilename)); } else { java.lang.System.out.println(java.lang.String.format(""Creating %s for release..."", outputfilename)); } java.io.File f = new java.io.File(mOutFolder, outputfilename); apkBuilder.createPackage(f.getAbsoluteFile(), mZipArchives, mArchiveFiles, mJavaResources, mResourcesJars, mNativeLibraries); mZipArchives.remove(resoucePackageZipFile); }",15c01e3e3acdd1d46903107cc4ffe5b5b5c0bce8,"createApk(com.android.apkbuilder.internal.ApkBuilderImpl,java.lang.String,java.lang.String,org.apache.tools.ant.types.Path,java.lang.String)","createApk(com.android.apkbuilder.internal.ApkBuilderImpl,java.lang.String)",4,2,"private void createApk(com.android.apkbuilder.internal.ApkBuilderImpl apkBuilder, java.io.File outputfile) throws com.android.apkbuilder.ApkBuilder.ApkCreationException, java.io.FileNotFoundException { java.io.FileInputStream resoucePackageZipFile = new java.io.FileInputStream(new java.io.File(mOutFolder, mResourceFile)); mZipArchives.add(resoucePackageZipFile); if (mSigned) { java.lang.System.out.println(java.lang.String.format(""Creating %s and signing it with a debug key..."", outputfile.getName())); } else { java.lang.System.out.println(java.lang.String.format(""Creating %s for release..."", outputfile.getName())); } apkBuilder.createPackage(outputfile.getAbsoluteFile(), mZipArchives, mArchiveFiles, mJavaResources, mResourcesJars, mNativeLibraries); mZipArchives.remove(resoucePackageZipFile); }",b2544fbad6998047562b69c88f8cb60b52404f2b,"createApk(com.android.apkbuilder.internal.ApkBuilderImpl,java.io.File)",360776,237,221
194752,jill_src_com_android_jill_frontend_java_MethodBodyWriter.java,40.0,"private void writeJavaMethodBody() throws java.io.IOException { if (com.android.jill.frontend.java.AsmHelper.isInterface(currentClass)) { throw new com.android.jill.JillException(((com.android.jill.frontend.java.AsmHelper.isStatic(currentMethod) ? ""static"" : ""default"") + "" method into interface is not supported"")); } sourceInfoWriter.writeDebugBegin(currentClass, startLine); writer.writeKeyword(Token.METHOD_BODY); writer.writeOpen(); writeLocals(); writeBody(); sourceInfoWriter.writeDebugEnd(currentClass, endLine); writer.writeClose(); }",18ebfabeb72543f75a24422cd13ca93c65956169,"private void writeJavaMethodBody() throws java.io.IOException { if ((com.android.jill.frontend.java.AsmHelper.isInterface(currentClass)) && (!(com.android.jill.frontend.java.AsmHelper.isStaticInit(currentMethod)))) { throw new com.android.jill.JillException(((com.android.jill.frontend.java.AsmHelper.isStatic(currentMethod) ? ""static"" : ""default"") + "" method into interface is not supported"")); } sourceInfoWriter.writeDebugBegin(currentClass, startLine); writer.writeKeyword(Token.METHOD_BODY); writer.writeOpen(); writeLocals(); writeBody(); sourceInfoWriter.writeDebugEnd(currentClass, endLine); writer.writeClose(); }",340c9eb969cacbc42f3a0c8e9501a2ffb70e06ac,writeJavaMethodBody(),writeJavaMethodBody(),2,40,"private void writeJavaMethodBody() throws java.io.IOException { sourceInfoWriter.writeDebugBegin(currentClass, startLine); writer.writeKeyword(Token.METHOD_BODY); writer.writeOpen(); writeLocals(); writeBody(); sourceInfoWriter.writeDebugEnd(currentClass, endLine); writer.writeClose(); }",c64cb610d3fb0ba61730b68861a4a94dcbc93f0f,writeJavaMethodBody(),495951,175,71
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,22.0,"public void test_getNegativePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setNegativePrefix(""--""); assertTrue(""Incorrect negative prefix"", df.getNegativePrefix().equals(""--"")); }",19ab09b5e65accb046b04bf435863d31d2c974b0,"public void testGetNegativePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setNegativePrefix(""--""); assertTrue(""Incorrect negative prefix"", df.getNegativePrefix().equals(""--"")); }",52a422b4bda5588b5ebfe1f2a05a3ac0cfbae02e,test_getNegativePrefix(),testGetNegativePrefix(),2,38,"public void test_getNegativePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setNegativePrefix(""--""); assertTrue(""Incorrect negative prefix"", df.getNegativePrefix().equals(""--"")); }",19ab09b5e65accb046b04bf435863d31d2c974b0,test_getNegativePrefix(),84392,45,46
579585,src_com_android_bluetooth_pbap_BluetoothPbapService.java,28.0,"void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(this) { mPbapStateMachine.sendMessage(PbapStateMachine.DISCONNECT); } }",5c07f926c98e80d1a942d12ccf81c96572b37e6a,"void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(this) { if (mPbapStateMachineMap.containsKey(device)) { mPbapStateMachineMap.get(device).sendMessage(PbapStateMachine.DISCONNECT); } } }",733613bf1af11dfe470418b14e97f3d26ada1f61,disconnect(android.bluetooth.BluetoothDevice),disconnect(android.bluetooth.BluetoothDevice),19,28,"void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH_ADMIN permission""); synchronized(mPbapStateMachineMap) { com.android.bluetooth.pbap.PbapStateMachine sm = mPbapStateMachineMap.get(device); if (sm != null) { sm.sendMessage(PbapStateMachine.DISCONNECT); } } }",38d848b268ee06ba76a0ea776dc1b7f081c7b267,disconnect(android.bluetooth.BluetoothDevice),517594,95,111
128670,src_com_android_nfc_cardemulation_CardEmulationManager.java,6.0,public void onUserSwitched(int userId) { mServiceCache.invalidateCache(userId); mPreferredServices.onUserSwitched(userId); },5801f346fb584a7d186243493cc2bd29d4f9dfa0,public void onUserSwitched(int userId) { mServiceCache.invalidateCache(userId); mNfcFServicesCache.invalidateCache(userId); mPreferredServices.onUserSwitched(userId); mPreferredNfcFServices.onUserSwitched(userId); },9df91ac228d2023b31707d04e14a1b64dbd9d984,onUserSwitched(int),onUserSwitched(int),10,6,public void onUserSwitched(int userId) { mServiceCache.invalidateCache(userId); mPreferredServices.onUserSwitched(userId); mHostNfcFEmulationManager.onUserSwitched(); mT3tIdentifiersCache.onUserSwitched(); mEnabledNfcFServices.onUserSwitched(userId); mNfcFServicesCache.invalidateCache(userId); },5f92093ae78c024e65f8faf293476d73b37037f1,onUserSwitched(int),148611,58,84
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.SimpleTest2.class) @org.junit.Test public void testRunner_SimpleTest2_OneMethod() throws java.lang.Exception { java.lang.String[] args = new java.lang.String[]{ ""testSimple2"" }; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(args); runner.run(); checkFilteredOutput().success(""testSimple2"").completedNormally(); }",a947090cd63243e98ea07c81a8d43bb45ca49b82,,testRunner_SimpleTest2_OneMethod(),3,11,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.SimpleTest2.class) @org.junit.Test public void testRunner_SimpleTest2_OneMethod() throws java.lang.Exception { java.lang.String[] args = new java.lang.String[]{ ""testSimple2"" }; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(args); runner.run(); expectedResults().success(""testSimple2"").completedNormally(); }",237cc03f97e24840a446cce602f7f62e4c2fcc75,testRunner_SimpleTest2_OneMethod(),130769,108,107
122734,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_charset_CharsetTest.java,48.0,"public void testIsSupported_And_ForName_NormalProvider() throws java.lang.Exception { assertTrue(java.nio.charset.Charset.isSupported(""mockCharset10"")); assertTrue(java.nio.charset.Charset.isSupported(""MockCharset11"")); assertTrue(java.nio.charset.Charset.isSupported(""MockCharset12"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset10"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset11"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset12"")); assertTrue(((java.nio.charset.Charset.forName(""mockCharset10"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset11"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset12"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset10"")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); java.nio.charset.Charset.forName(""mockCharset11""); assertTrue(((java.nio.charset.Charset.forName(""mockCharset12"")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); }",566605194abf51621c15d18b75f22856b16e5881,"public void testIsSupported_And_ForName_NormalProvider() throws java.lang.Exception { libcore.java.nio.charset.FakeCharsetProvider.setDelegate(new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProvider()); try { assertTrue(java.nio.charset.Charset.isSupported(""mockCharset10"")); assertTrue(java.nio.charset.Charset.isSupported(""MockCharset11"")); assertTrue(java.nio.charset.Charset.isSupported(""MockCharset12"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset10"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset11"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset12"")); assertTrue(((java.nio.charset.Charset.forName(""mockCharset10"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset11"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset12"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset10"")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); java.nio.charset.Charset.forName(""mockCharset11""); assertTrue(((java.nio.charset.Charset.forName(""mockCharset12"")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); } finally { libcore.java.nio.charset.FakeCharsetProvider.clearDelegate(); } }",ffaafce3e380b3a1e6464be4c89d8492461704f9,testIsSupported_And_ForName_NormalProvider(),testIsSupported_And_ForName_NormalProvider(),5,47,"public void testIsSupported_And_ForName_NormalProvider() throws java.lang.Exception { libcore.java.nio.charset.SettableCharsetProvider.setDelegate(new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProvider()); try { assertTrue(java.nio.charset.Charset.isSupported(""mockCharset10"")); assertTrue(java.nio.charset.Charset.isSupported(""MockCharset11"")); assertTrue(java.nio.charset.Charset.isSupported(""MockCharset12"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset10"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset11"")); assertTrue(java.nio.charset.Charset.isSupported(""MOCKCharset12"")); assertTrue(((java.nio.charset.Charset.forName(""mockCharset10"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset11"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset12"")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName(""mockCharset10"")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); java.nio.charset.Charset.forName(""mockCharset11""); assertTrue(((java.nio.charset.Charset.forName(""mockCharset12"")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); } finally { libcore.java.nio.charset.SettableCharsetProvider.clearDelegate(); } }",cb24606c9b1773a85cb2aa82f81dc2980bb7ad1b,testIsSupported_And_ForName_NormalProvider(),21464,392,394
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAtan2pi.java,,,,"private void checkAtan2piFloatFloat() { android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInX(inX); script.forEach_testAtan2piFloatFloat(inY, out); verifyResultsAtan2piFloatFloat(inY, inX, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtan2piFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInX(inX); scriptRelaxed.forEach_testAtan2piFloatFloat(inY, out); verifyResultsAtan2piFloatFloat(inY, inX, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtan2piFloatFloat: "" + (e.toString()))); } }",287cf230e4bc20988942d98463a97267f4509986,,checkAtan2piFloatFloat(),9,8,"private void checkAtan2piFloatFloatFloat() { android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 7270231599885695850L); android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 7270231599885695850L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInX(inX); script.forEach_testAtan2piFloatFloatFloat(inY, out); verifyResultsAtan2piFloatFloatFloat(inY, inX, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtan2piFloatFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInX(inX); scriptRelaxed.forEach_testAtan2piFloatFloatFloat(inY, out); verifyResultsAtan2piFloatFloatFloat(inY, inX, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtan2piFloatFloatFloat: "" + (e.toString()))); } }",b7f11b7ad95fae54d49e25e1639e03946d48d11b,checkAtan2piFloatFloatFloat(),143122,442,389
145486,platform_platform-impl_src_com_intellij_ide_SystemHealthMonitor.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkIBusPresent() { if (SystemInfo.isLinux) { try { java.lang.Process proc = java.lang.Runtime.getRuntime().exec(""ps -ef""); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream())); try { for (java.lang.String line = reader.readLine(); line != null; line = reader.readLine()) { if (line.contains(""ibus-daemon"")) { notifyUnsupported(""unsupported.ibus.message""); break; } } } finally { reader.close(); } } catch (java.io.IOException ex) { } } }",f0a49645a63465b47fe545cfc9f41ee459337d95,,checkIBusPresent(),3,11,"private void checkIBusPresent() { if ((SystemInfo.isLinux) || (SystemInfo.isFreeBSD)) { try { java.lang.Process proc = java.lang.Runtime.getRuntime().exec(""/bin/ps -C ibus-daemon""); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream())); try { for (java.lang.String line = reader.readLine(); line != null; line = reader.readLine()) { if (line.contains(""ibus-daemon"")) { notifyUnsupported(""unsupported.ibus.message""); break; } } } finally { reader.close(); } } catch (java.io.IOException ex) { } } }",c45c0d06b3faaa6ed48642df48fa66307e8bae64,checkIBusPresent(),425884,140,156
36941,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_IconFactory.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.NonNull public org.eclipse.swt.graphics.Image getWarningIcon(@com.android.annotations.NonNull org.eclipse.swt.graphics.Image image) { if ((mWarningIcons) != null) { org.eclipse.swt.graphics.Image combined = mWarningIcons.get(image); if (combined != null) { return combined; } } else { mWarningIcons = com.google.common.collect.Maps.newHashMap(); } org.eclipse.swt.graphics.Image combined = new com.android.ide.eclipse.adt.internal.editors.ui.ErrorImageComposite(image, true).createImage(); mWarningIcons.put(image, combined); return combined; }",724b9e34f1349a3b9a1592e6645e72dfe2de038b,,getWarningIcon(org.eclipse.swt.graphics.Image),2,6,"@com.android.annotations.NonNull public org.eclipse.swt.graphics.Image addWarningIcon(@com.android.annotations.NonNull org.eclipse.swt.graphics.Image image) { if ((mWarningIcons) != null) { org.eclipse.swt.graphics.Image combined = mWarningIcons.get(image); if (combined != null) { return combined; } } else { mWarningIcons = new java.util.IdentityHashMap<org.eclipse.swt.graphics.Image, org.eclipse.swt.graphics.Image>(); } org.eclipse.swt.graphics.Image combined = new com.android.ide.eclipse.adt.internal.editors.ui.ErrorImageComposite(image, true).createImage(); mWarningIcons.put(image, combined); return combined; }",6c29641f0bfe0b201b3ae46c09f7ed8a916259c5,addWarningIcon(org.eclipse.swt.graphics.Image),318623,157,172
145674,java_tests_ImageProcessing_jb_src_com_android_rs_image_Blur25.java,3.0,"public void runTest() { if (mUseIntrinsic) { mIntrinsic.forEach(mOutPixelsAllocation); } else { mScript.forEach_copyIn(mInPixelsAllocation, mScratchPixelsAllocation1); mScript.forEach_horz(mScratchPixelsAllocation2); mScript.forEach_vert(mOutPixelsAllocation); } }",7240b47207ae4c380cfca56327e0531dad061a8b,"public void runTest() { if (mUseIntrinsic) { mIntrinsic.forEach(mOutPixelsAllocation); } else if (mUseHalfPrecision) { mScript.forEach_copyIn_half(mInPixelsAllocation, mScratchPixelsAllocation1); mScript.forEach_horz_half(mScratchPixelsAllocation2); mScript.forEach_vert_half(mOutPixelsAllocation); } else { mScript.forEach_copyIn(mInPixelsAllocation, mScratchPixelsAllocation1); mScript.forEach_horz(mScratchPixelsAllocation2); mScript.forEach_vert(mOutPixelsAllocation); } }",837e6f62748a3cb3ddaf65337e5ae55deaed8802,runTest(),runTest(),7,3,"public void runTest() { if (mUseIntrinsic) { mIntrinsic.forEach(mOutPixelsAllocation); } else if (mUseHalfPrecision) { mScript_half.forEach_copyIn(mInPixelsAllocation, mScratchPixelsAllocation1); mScript_half.forEach_horz(mScratchPixelsAllocation2); mScript_half.forEach_vert(mOutPixelsAllocation); } else { mScript.forEach_copyIn(mInPixelsAllocation, mScratchPixelsAllocation1); mScript.forEach_horz(mScratchPixelsAllocation2); mScript.forEach_vert(mOutPixelsAllocation); } }",07f7d21d9cf5c0d2b68693eda2408f2aee44cab6,runTest(),254262,130,130
195862,test_042-new-instance_src_Main.java,0.0,static java.lang.Object newInstance() { try { java.lang.Class c = LocalClass3.CC.class; return c.newInstance(); } catch (java.lang.Exception ex) { ex.printStackTrace(); return null; } },3f361975ef991974f5dc17553a1e134710529483,static java.lang.Object newInstance() { try { java.lang.Class c = LocalClass3.CC.class; return c.newInstance(); } catch (java.lang.Exception ex) { ex.printStackTrace(java.lang.System.out); return null; } },92ba1380c9133c1cb3c8be41b8e97ef86ffff00e,newInstance(),newInstance(),3,0,static java.lang.Object newInstance() { try { java.lang.Class<?> c = LocalClass3.CC.class; return c.newInstance(); } catch (java.lang.Exception ex) { ex.printStackTrace(java.lang.System.out); return null; } },9007657f8ac495247374a2ee001f044785200d18,newInstance(),228176,59,60
139390,src_com_google_gct_idea_debugger_CloudDebugSettingsEditor.java,,,,@java.lang.Override protected void resetEditorFrom(com.google.gct.idea.debugger.CloudDebugRunConfiguration s) { },2082bcf279644a9ffa41cb66ba97b0d12e53c474,,resetEditorFrom(com.google.gct.idea.debugger.CloudDebugRunConfiguration),30,0,@java.lang.Override protected void resetEditorFrom(com.google.gct.idea.debugger.CloudDebugRunConfiguration s) { mySettingPanel.setProjectName(s.getCloudProjectName()); mySettingPanel.setShowNotifications(s.isShowNotifications()); },6db25081f99c3e6f1b0395b2e070185bde8721b8,resetEditorFrom(com.google.gct.idea.debugger.CloudDebugRunConfiguration),250727,33,59
586414,tests_net_java_com_android_server_IpSecServiceParameterizedTest.java,10.0,"@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }",e746232b54bb418fb2da4585dfc138c6a48b2d5b,"@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }",989e4fdb4d4a16e032c1c2bf01d16a9aeef90eeb,testCreateTransportModeTransform(),testCreateTransportModeTransform(),3,9,"@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }",771b9f3a9eb729f31d51f7f94ed1a9c39fe5f34d,testCreateTransportModeTransform(),47288,434,265
643941,tests_tests_telephony_src_android_telephony_embms_cts_MbmsDownloadCallbackTest.java,5.0,"public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback callback = new android.telephony.embms.cts.MbmsDownloadStateCallbackTest.TestDSCallback(android.telephony.mbms.DownloadStateCallback.ALL_UPDATES); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerStateCallback(request, mCallbackExecutor, callback); mDownloadSession.unregisterStateCallback(request, callback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(callback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(callback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadStateCallbackTest.SHORT_TIMEOUT)); }",c2e3d40d40d4f056053cc6294e9a7883bb6642fb,"public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.registerProgressListener(request, mCallbackExecutor, progressCallback); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.unregisterProgressListener(request, progressCallback); mDownloadSession.unregisterStatusListener(request, statusCallback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(statusCallback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); }",0dd9fd327930a5788a76e0c35f03781b3c1594d2,testDeregistration(),testDeregistration(),4,5,"public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.addProgressListener(request, mCallbackExecutor, progressCallback); mDownloadSession.addStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.removeProgressListener(request, progressCallback); mDownloadSession.removeStatusListener(request, statusCallback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(statusCallback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); }",99f07ae2b71be4a976a72ac00fba4a77c5e903a9,testDeregistration(),262655,274,274
596353,services_core_java_com_android_server_connectivity_NetdEventListenerService.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] packetSentCounters, int[] packetLostCounters) { if (((networkIds.length) != (packetSentCounters.length)) || ((networkIds.length) != (packetLostCounters.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, ""Invalid data FIXME""); return; } long timestamp = java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(sent, lost); } if (com.android.server.connectivity.NetdEventListenerService.DBG) { java.util.StringJoiner j = new java.util.StringJoiner("", ""); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; j.add(java.lang.String.format(""{netId=%d, sent=%d, lost=%d}"", netId, sent, lost)); } android.util.Log.d(com.android.server.connectivity.NetdEventListenerService.TAG, (""TcpSocketStatsEvent: "" + (j.toString()))); } }",aef988b332782be34de1e2965c5c9f2dfcca70c9,,"onTcpSocketStatsEvent(int[],int[],int[])",3,8,"@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] sentPackets, int[] lostPackets, int[] rttsUs, int[] sentAckDiffsMs) { if (((((networkIds.length) != (sentPackets.length)) || ((networkIds.length) != (lostPackets.length))) || ((networkIds.length) != (rttsUs.length))) || ((networkIds.length) != (sentAckDiffsMs.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, ""Mismatched lengths of TCP socket stats data arrays""); return; } long timestamp = java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = sentPackets[i]; int lost = lostPackets[i]; int rttUs = rttsUs[i]; int sentAckDiffMs = sentAckDiffsMs[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(sent, lost, rttUs, sentAckDiffMs); } }",b453aec856ca9089a9d274b78dd5311f08d32046,"onTcpSocketStatsEvent(int[],int[],int[],int[],int[])",356313,329,268
555848,telephony_java_android_telephony_ims_internal_feature_MmTelFeature.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void setSmsListener(android.telephony.ims.internal.aidl.IImsSmsListener l) throws android.os.RemoteException { synchronized(mLock) { this.setSmsListener(l); } },d5a7c2dc93358ed8d2841ee8d6a2f5ccca187441,,setSmsListener(android.telephony.ims.internal.aidl.IImsSmsListener),17,30,@java.lang.Override public void setSmsListener(android.telephony.ims.internal.aidl.IImsSmsListener l) throws android.os.RemoteException { this.setSmsListener(l); },3f266be5d1ae65835353846f66ff2d2c26288be6,setSmsListener(android.telephony.ims.internal.aidl.IImsSmsListener),374178,54,47
630005,src_com_android_providers_telephony_CarrierIdProvider.java,2.0,"private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri"" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""queryCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierIdentification.CID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierIdentification.NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException((""Invalid column "" + (projectionIn[i]))); } } return c; }",0bc11d0466e193e29e6843e4e39683c930f40503,"private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri"" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""queryCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierId.CARRIER_ID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierId.NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException((""Invalid column "" + (projectionIn[i]))); } } return c; }",7fe3155a0a09c4eceff0492568b4e30add1558ec,"queryCarrierIdForCurrentSubscription(android.net.Uri,java.lang.String[])","queryCarrierIdForCurrentSubscription(android.net.Uri,java.lang.String[])",2,2,"private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri"" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""queryCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierId.CARRIER_ID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierId.CARRIER_NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException((""Invalid column "" + (projectionIn[i]))); } } return c; }",12ce6284f97398902743b168dca772ddc740fc2e,"queryCarrierIdForCurrentSubscription(android.net.Uri,java.lang.String[])",267015,380,384
141804,jack_src_com_android_jack_analysis_dfa_reachingdefs_ReachingDefinitionsRemover.java,0.0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { bb.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); } }",0b18d477ef75927bd0012b14e72094ad0d03a401,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; for (int i = 0, len = cfg.getNodesCount(); i < len; ++i) { cfg.getNode(i).removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); } }",de4dc214ac04e2b720446d54435e0d743facfd39,run(com.android.jack.ir.ast.JMethod),run(com.android.jack.ir.ast.JMethod),12,0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { bb.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); } }",0b18d477ef75927bd0012b14e72094ad0d03a401,run(com.android.jack.ir.ast.JMethod),293699,167,162
132435,build-system_builder_src_test_java_com_android_builder_png_NinePatchAaptProcessorTestUtils.java,,,,"public static java.util.Collection<java.lang.Object[]> getNinePatches() { java.io.File pngFolder = getPngFolder(); java.io.File ninePatchFolder = new java.io.File(pngFolder, ""ninepatch""); java.io.File[] files = ninePatchFolder.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File file) { return file.getPath().endsWith(SdkConstants.DOT_9PNG); } }); if (files != null) { com.google.common.collect.ImmutableList.Builder<java.lang.Object[]> params = com.google.common.collect.ImmutableList.builder(); for (java.io.File file : files) { params.add(new java.lang.Object[]{ file, file.getName() }); } return params.build(); } return com.google.common.collect.ImmutableList.of(); }",50ba76d990623e7798e0b3a21bb178b39859bbe6,,getNinePatches(),5,3,"public static java.util.Collection<java.lang.Object[]> getNinePatches() { java.io.File pngFolder = com.android.builder.png.NinePatchAaptProcessorTestUtils.getPngFolder(); java.io.File ninePatchFolder = new java.io.File(pngFolder, ""ninepatch""); java.io.File[] files = ninePatchFolder.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File file) { return file.getPath().endsWith(SdkConstants.DOT_9PNG); } }); if (files != null) { com.google.common.collect.ImmutableList.Builder<java.lang.Object[]> params = com.google.common.collect.ImmutableList.builder(); for (java.io.File file : files) { params.add(new java.lang.Object[]{ file, file.getName() }); } return params.build(); } return com.google.common.collect.ImmutableList.of(); }",09685a00aa9521c5e422b1dde6ac7bf909e3864b,getNinePatches(),148786,208,224
36033,samples_Snake_src_com_example_android_snake_Snake.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean onTouch(android.view.View v, android.view.MotionEvent event) { if ((mSnakeView.getGameState()) == (SnakeView.RUNNING)) { float x = (event.getX()) / (v.getWidth()); float y = (event.getY()) / (v.getHeight()); short direction = 0; direction |= (x > y) ? 1 : 0; direction |= (x > (1 - y)) ? 2 : 0; mSnakeView.moveSnake(direction); } else { mSnakeView.moveSnake(com.example.android.snake.Snake.MOVE_UP); } return false; }",f72a2fb4b08a2fe874a7917d468a4d3c841f050e,,"onTouch(android.view.View,android.view.MotionEvent)",4,1,"@java.lang.Override public boolean onTouch(android.view.View v, android.view.MotionEvent event) { if ((mSnakeView.getGameState()) == (SnakeView.RUNNING)) { float x = (event.getX()) / (v.getWidth()); float y = (event.getY()) / (v.getHeight()); int direction = 0; direction = (x > y) ? 1 : 0; direction |= (x > (1 - y)) ? 2 : 0; mSnakeView.moveSnake(direction); } else { mSnakeView.moveSnake(com.example.android.snake.Snake.MOVE_UP); } return false; }",c0ddd60fbf31b50bbee6a522d7e5edf5cc1f6ca3,"onTouch(android.view.View,android.view.MotionEvent)",176611,144,144
69250,tests_src_android_os_cts_ReadElf.java,8.0,"private void readHeader() throws java.io.IOException { mType = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_TYPE)); final long shOffset = readWord(getHeaderOffset(android.security.cts.ReadElf.OFFSET_SHOFF)); final int shNumber = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_SHNUM)); final int shSize = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_SHENTSIZE)); final int shStrIndex = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_SHSTRNDX)); readSectionHeaders(shOffset, shNumber, shSize, shStrIndex); final long phOffset = readWord(getHeaderOffset(android.security.cts.ReadElf.OFFSET_PHOFF)); final int phNumber = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_PHNUM)); final int phSize = readHalf(getHeaderOffset(android.security.cts.ReadElf.OFFSET_PHENTSIZE)); readProgramHeaders(phOffset, phNumber, phSize); }",f710f8b1abf5b472374500061155bd74213e3114,"private void readHeader() throws java.io.IOException { mType = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_TYPE)); final long shOffset = readWord(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHOFF)); final int shNumber = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHNUM)); final int shSize = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHENTSIZE)); final int shStrIndex = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHSTRNDX)); readSectionHeaders(shOffset, shNumber, shSize, shStrIndex); final long phOffset = readWord(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHOFF)); final int phNumber = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHNUM)); final int phSize = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHENTSIZE)); readProgramHeaders(phOffset, phNumber, phSize); }",3da96b93567334b3d1365d0705354e6eceae7a18,readHeader(),readHeader(),2,8,"private void readHeader() throws java.io.IOException { mType = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_TYPE)); int e_machine = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_MACHINE)); if (((e_machine != (android.os.cts.ReadElf.EM_386)) && (e_machine != (android.os.cts.ReadElf.EM_MIPS))) && (e_machine != (android.os.cts.ReadElf.EM_ARM))) { throw new java.io.IOException((((""Invalid ELF e_machine: "" + e_machine) + "": "") + (mPath))); } final long shOffset = readWord(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHOFF)); final int shNumber = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHNUM)); final int shSize = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHENTSIZE)); final int shStrIndex = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHSTRNDX)); readSectionHeaders(shOffset, shNumber, shSize, shStrIndex); final long phOffset = readWord(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHOFF)); final int phNumber = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHNUM)); final int phSize = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHENTSIZE)); readProgramHeaders(phOffset, phNumber, phSize); }",16be6d01723d34abef281cc5d73e1950bd4ffaba,readHeader(),290951,270,398
323011,wifi_tests_src_android_net_wifi_hotspot2_pps_PolicyTest.java,,,,"@org.junit.Test public void validatePolicyWithoutServerUri() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy(); byte[] rawUriBytes = new byte[(android.net.wifi.hotspot2.pps.PolicyTest.MAX_URI_BYTES) + 1]; policy.policyServerUri = new java.lang.String(rawUriBytes, java.nio.charset.StandardCharsets.UTF_8); assertFalse(policy.validate()); }",be955faa42fde1ce0de411c2372776655a880252,,validatePolicyWithoutServerUri(),7,4,@org.junit.Test public void validatePolicyWithoutPolicyUpdate() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy(); policy.policyUpdate = null; assertFalse(policy.validate()); },e294af3584e9af1d819f49b271d7e03836e62d40,validatePolicyWithoutPolicyUpdate(),168306,119,67
106207,sched_src_com_android_sched_build_SchedAnnotationProcessor.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void check(@javax.annotation.Nonnull javax.lang.model.element.Element element, @javax.annotation.Nonnull javax.annotation.processing.ProcessingEnvironment env) { boolean noKeyId = true; javax.lang.model.type.TypeMirror keyIdType = env.getTypeUtils().erasure(env.getElementUtils().getTypeElement(com.android.sched.util.config.id.KeyId.class.getCanonicalName()).asType()); if (keyIdType == null) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, ((""Can not get element type '"" + (com.android.sched.util.config.id.PropertyId.class.getCanonicalName())) + ""'"")); return; } for (javax.lang.model.element.Element enclosedElement : element.getEnclosedElements()) { if (((enclosedElement.getKind()) == (javax.lang.model.element.ElementKind.FIELD)) && (env.getTypeUtils().isSubtype(env.getTypeUtils().erasure(enclosedElement.asType()), keyIdType))) { noKeyId = false; if (!(enclosedElement.getModifiers().contains(javax.lang.model.element.Modifier.STATIC))) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.WARNING, ""KeyId should be declared static"", enclosedElement); } if (!(enclosedElement.getModifiers().contains(javax.lang.model.element.Modifier.FINAL))) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, ""KeyId must be declared final"", enclosedElement); } } } if (noKeyId) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, ""Type does not contains KeyId"", element); } }",3e56e5d3eb45456ed8217dd2aad87d52a543d1f0,,"check(javax.lang.model.element.Element,javax.annotation.processing.ProcessingEnvironment)",2,9,"@java.lang.Override public void check(@javax.annotation.Nonnull javax.lang.model.element.Element element, @javax.annotation.Nonnull javax.annotation.processing.ProcessingEnvironment env) { boolean noKeyId = true; javax.lang.model.type.TypeMirror keyIdType = env.getTypeUtils().erasure(env.getElementUtils().getTypeElement(com.android.sched.util.config.id.KeyId.class.getCanonicalName()).asType()); if (keyIdType == null) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, ((""Can not get element type '"" + (com.android.sched.util.config.id.KeyId.class.getCanonicalName())) + ""'"")); return; } for (javax.lang.model.element.Element enclosedElement : element.getEnclosedElements()) { if (((enclosedElement.getKind()) == (javax.lang.model.element.ElementKind.FIELD)) && (env.getTypeUtils().isSubtype(env.getTypeUtils().erasure(enclosedElement.asType()), keyIdType))) { noKeyId = false; if (!(enclosedElement.getModifiers().contains(javax.lang.model.element.Modifier.STATIC))) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.WARNING, ""KeyId should be declared static"", enclosedElement); } if (!(enclosedElement.getModifiers().contains(javax.lang.model.element.Modifier.FINAL))) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, ""KeyId must be declared final"", enclosedElement); } } } if (noKeyId) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, ""Type does not contains KeyId"", element); } }",f261239799dc25e87fbfa8a45a99fc3b0b4ca6f3,"check(javax.lang.model.element.Element,javax.annotation.processing.ProcessingEnvironment)",278812,391,391
96275,src_com_google_gct_idea_appengine_wizard_BackendModuleWizardStep.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateDocLabels() { java.lang.String docUrl = ((java.lang.String) (myWizardState.get(""docUrl""))); com.android.tools.idea.templates.TemplateMetadata metadata = myWizardState.getTemplateMetadata(); java.lang.String title = (metadata != null) ? metadata.getTitle() : null; if ((docUrl != null) && (title != null)) { myDocPanel.setVisible(true); myDocLabel.setHyperlinkText(""Check the "", ((""\"""" + title) + ""\"" documentation""), """"); myDocLabel.setHyperlinkTarget(docUrl); } else { myDocPanel.setVisible(false); } }",b8c563a9201146cbb62f0586ac66b0f913bf6ea9,,updateDocLabels(),3,9,"private void updateDocLabels() { java.lang.String docUrl = ((java.lang.String) (myWizardState.get(com.google.gct.idea.appengine.wizard.BackendModuleWizardStep.ATTR_DOC_URL))); com.android.tools.idea.templates.TemplateMetadata metadata = myWizardState.getTemplateMetadata(); java.lang.String title = (metadata != null) ? metadata.getTitle() : null; if ((docUrl != null) && (title != null)) { myDocPanel.setVisible(true); myDocLabel.setHyperlinkText(""Check the "", ((""\"""" + title) + ""\"" documentation""), """"); myDocLabel.setHyperlinkTarget(docUrl); } else { myDocPanel.setVisible(false); } }",e80f38b2a60f3d9dff483fa3b497e992cb4a6097,updateDocLabels(),325648,145,166
52373,androidtestlib_src_com_android_test_runner_AndroidJUnitRunner.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected void onTestRunnerCreated() { },3e9926b9b9436a9b3535468b28cb9ec9fb3cd80a,,onTestRunnerCreated(),3,2,"private void addExtraListener(java.util.List<org.junit.runner.notification.RunListener> listeners, org.junit.runner.JUnitCore testRunner, java.io.PrintStream writer, java.lang.String extraListener) { if ((extraListener == null) || ((extraListener.length()) == 0)) { return; } final java.lang.Class<?> klass; try { klass = java.lang.Class.forName(extraListener); } catch (java.lang.ClassNotFoundException e) { writer.println((""Could not find extra RunListener class "" + extraListener)); return; } if (!(org.junit.runner.notification.RunListener.class.isAssignableFrom(klass))) { writer.println((""Extra listeners must extend RunListener class "" + extraListener)); return; } try { klass.getConstructor().setAccessible(true); } catch (java.lang.NoSuchMethodException e) { writer.println((""Must have no argument constructor for class "" + extraListener)); return; } final org.junit.runner.notification.RunListener l; try { l = ((org.junit.runner.notification.RunListener) (klass.newInstance())); } catch (java.lang.Throwable t) { writer.println((""Could not instantiate extra RunListener class "" + extraListener)); t.printStackTrace(writer); return; } addListener(listeners, testRunner, l); }",341b9e74140aab0850760d973ca402929c09ad23,"addExtraListener(java.util.List,org.junit.runner.JUnitCore,java.io.PrintStream,java.lang.String)",55866,8,296
426200,tests_tests_text_src_android_text_method_cts_TouchTest.java,11.0,"public void testScrollTo() throws java.lang.Throwable { final android.widget.TextView tv = new android.text.method.cts.TextViewNoIme(mActivity); tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10); runTestOnUiThread(new java.lang.Runnable() { public void run() { mActivity.setContentView(tv); tv.setSingleLine(true); tv.setLines(2); } }); getInstrumentation().waitForIdleSync(); android.text.TextPaint paint = tv.getPaint(); final android.text.Layout layout = tv.getLayout(); runTestOnUiThread(new java.lang.Runnable() { public void run() { tv.setText(android.text.method.cts.TouchTest.LONG_TEXT); } }); getInstrumentation().waitForIdleSync(); final int width = getTextWidth(android.text.method.cts.TouchTest.LONG_TEXT, paint); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, ((width - (tv.getWidth())) - 1), 0); } }); getInstrumentation().waitForIdleSync(); assertEquals(((width - (tv.getWidth())) - 1), tv.getScrollX()); assertEquals(0, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width + 100), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width - 10), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); }",556259d16413911da8df3bdefd6aad2ce0705edb,"public void testScrollTo() throws java.lang.Throwable { final android.widget.TextView tv = new android.text.method.cts.TextViewNoIme(mActivity); tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10); runTestOnUiThread(new java.lang.Runnable() { public void run() { mActivity.setContentView(tv); tv.setSingleLine(true); tv.setLines(2); } }); getInstrumentation().waitForIdleSync(); android.text.TextPaint paint = tv.getPaint(); final android.text.Layout layout = tv.getLayout(); final java.lang.StringBuilder longEnoughText = new java.lang.StringBuilder(android.text.method.cts.TouchTest.LONG_TEXT); while ((getTextWidth(longEnoughText, paint)) <= (tv.getWidth())) { longEnoughText.append(android.text.method.cts.TouchTest.LONG_TEXT); } runTestOnUiThread(new java.lang.Runnable() { public void run() { tv.setText(longEnoughText); } }); getInstrumentation().waitForIdleSync(); final int width = getTextWidth(longEnoughText, paint); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, ((width - (tv.getWidth())) - 1), 0); } }); getInstrumentation().waitForIdleSync(); assertEquals(((width - (tv.getWidth())) - 1), tv.getScrollX()); assertEquals(0, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width + 100), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width - 10), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); }",6c1404814a628de4f25225933edb36af0b301c37,testScrollTo(),testScrollTo(),3,11,"public void testScrollTo() throws java.lang.Throwable { final android.widget.TextView tv = new android.text.method.cts.TextViewNoIme(mActivity); tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10); runTestOnUiThread(new java.lang.Runnable() { public void run() { final float pixelPerSp = mActivity.getResources().getDisplayMetrics().scaledDensity; mActivity.setContentView(tv, new android.view.ViewGroup.LayoutParams(((int) (100 * pixelPerSp)), ViewGroup.LayoutParams.MATCH_PARENT)); tv.setSingleLine(true); tv.setLines(2); } }); getInstrumentation().waitForIdleSync(); android.text.TextPaint paint = tv.getPaint(); final android.text.Layout layout = tv.getLayout(); runTestOnUiThread(new java.lang.Runnable() { public void run() { tv.setText(android.text.method.cts.TouchTest.LONG_TEXT); } }); getInstrumentation().waitForIdleSync(); final int width = getTextWidth(android.text.method.cts.TouchTest.LONG_TEXT, paint); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, ((width - (tv.getWidth())) - 1), 0); } }); getInstrumentation().waitForIdleSync(); assertEquals(((width - (tv.getWidth())) - 1), tv.getScrollX()); assertEquals(0, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width + 100), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width - 10), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); }",949ffe564421b8773a583e256b44998023f87451,testScrollTo(),224098,484,477
607396,tests_unit_src_com_android_bluetooth_pbap_PbapStateMachineTest.java,0.0,"@org.junit.Before public void setUp() throws java.lang.Exception { mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""PbapTestHandlerThread""); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapTest.TEST_NOTIFICATION_ID); }",5064ac94b515ad11a9e39c87f26117d9302e4885,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""PbapTestHandlerThread""); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapStateMachineTest.TEST_NOTIFICATION_ID); }",40339dd178959063c9b4c6f092cbe73769101834,setUp(),setUp(),15,0,"@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue(""Ignore test when BluetoothPbapService is not enabled"", mTargetContext.getResources().getBoolean(R.bool.profile_supported_pbap)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""PbapTestHandlerThread""); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapStateMachineTest.TEST_NOTIFICATION_ID); }",577ef44a4d2f15c6e5b9897f0dad189248f0679c,setUp(),388262,235,291
38215,lint_libs_lint_checks_tests_src_com_android_tools_lint_checks_TypoDetectorTest.java,,,,"public void testPlainValues() throws java.lang.Exception { assertEquals((""strings.xml:10: Warning: \""throught\"" looks like a misspelling; did you mean \""thought\"" or \""through\"" or \""throughout\""?\n"" + ((((""strings.xml:12: Warning: \""Seach\"" looks like a misspelling; did you mean \""Search\""?\n"" + ""strings.xml:16: Warning: \""Tuscon\"" looks like a misspelling; did you mean \""Tucson\""?\n"") + ""strings.xml:6: Warning: \""Andriod\"" looks like a misspelling; did you mean \""Android\""?\n"") + ""strings.xml:6: Warning: \""activites\"" looks like a misspelling; did you mean \""activities\""?\n"") + ""strings.xml:8: Warning: \""Cmoputer\"" looks like a misspelling; did you mean \""Computer\""?"")), lintProject(""res/values/typos.xml=>res/values/strings.xml"")); }",767481e4c852cf0843834fec76259c0d378c167d,,testPlainValues(),3,0,"public void testPlainValues() throws java.lang.Exception { assertEquals((""strings.xml:10: Warning: \""throught\"" is a common misspelling; did you mean \""thought\"" or \""through\"" or \""throughout\"" ?\n"" + (((((""strings.xml:12: Warning: \""Seach\"" is a common misspelling; did you mean \""Search\"" ?\n"" + ""strings.xml:16: Warning: \""Tuscon\"" is a common misspelling; did you mean \""Tucson\"" ?\n"") + ""strings.xml:20: Warning: \""Ok\"" is usually capitalized as \""OK\""\n"") + ""strings.xml:6: Warning: \""Andriod\"" is a common misspelling; did you mean \""Android\"" ?\n"") + ""strings.xml:6: Warning: \""activites\"" is a common misspelling; did you mean \""activities\"" ?\n"") + ""strings.xml:8: Warning: \""Cmoputer\"" is a common misspelling; did you mean \""Computer\"" ?"")), lintProject(""res/values/typos.xml=>res/values/strings.xml"")); }",0bfa49407066f93367881defc5502e43ba6489e6,testPlainValues(),411560,234,260
89697,build-system_builder_src_main_java_com_android_builder_AndroidBuilder.java,11.0,"public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.DexOptions dexOptions) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(inputFile, ""inputFile cannot be null.""); checkNotNull(outFile, ""outFile cannot be null.""); checkNotNull(dexOptions, ""dexOptions cannot be null.""); java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); java.lang.String dx = mBuildTools.getPath(BuildToolInfo.PathId.DX); if ((dx == null) || (!(new java.io.File(dx).isFile()))) { throw new java.lang.IllegalStateException(""dx is missing""); } command.add(dx); if ((dexOptions.getJavaMaxHeapSize()) != null) { command.add((""-JXmx"" + (dexOptions.getJavaMaxHeapSize()))); } command.add(""--dex""); if (mVerboseExec) { command.add(""--verbose""); } if (dexOptions.getJumboMode()) { command.add(""--force-jumbo""); } command.add(""--output""); command.add(outFile.getAbsolutePath()); command.add(inputFile.getAbsolutePath()); mCmdLineRunner.runCmdLine(command, null); }",b1ddee08c3c6669039b2d82bc9aa14e17464302d,"public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.DexOptions dexOptions) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(inputFile, ""inputFile cannot be null.""); checkNotNull(outFile, ""outFile cannot be null.""); checkNotNull(dexOptions, ""dexOptions cannot be null.""); com.android.sdklib.BuildToolInfo buildToolInfo = mTargetInfo.getBuildTools(); java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); java.lang.String dx = buildToolInfo.getPath(BuildToolInfo.PathId.DX); if ((dx == null) || (!(new java.io.File(dx).isFile()))) { throw new java.lang.IllegalStateException(""dx is missing""); } command.add(dx); if ((dexOptions.getJavaMaxHeapSize()) != null) { command.add((""-JXmx"" + (dexOptions.getJavaMaxHeapSize()))); } command.add(""--dex""); if (mVerboseExec) { command.add(""--verbose""); } if (dexOptions.getJumboMode()) { command.add(""--force-jumbo""); } command.add(""--output""); command.add(outFile.getAbsolutePath()); command.add(inputFile.getAbsolutePath()); mCmdLineRunner.runCmdLine(command, null); }",843717f8e3f855b43822fe3b13ce3d699a082e87,"preDexLibrary(java.io.File,java.io.File,com.android.builder.DexOptions)","preDexLibrary(java.io.File,java.io.File,com.android.builder.DexOptions)",5,12,"public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.DexOptions dexOptions) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(inputFile, ""inputFile cannot be null.""); checkNotNull(outFile, ""outFile cannot be null.""); checkNotNull(dexOptions, ""dexOptions cannot be null.""); checkState(((mTargetInfo) != null), ""Cannot call preDexLibrary() before setTargetInfo() is called.""); com.android.sdklib.BuildToolInfo buildToolInfo = mTargetInfo.getBuildTools(); java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); java.lang.String dx = buildToolInfo.getPath(BuildToolInfo.PathId.DX); if ((dx == null) || (!(new java.io.File(dx).isFile()))) { throw new java.lang.IllegalStateException(""dx is missing""); } command.add(dx); if ((dexOptions.getJavaMaxHeapSize()) != null) { command.add((""-JXmx"" + (dexOptions.getJavaMaxHeapSize()))); } command.add(""--dex""); if (mVerboseExec) { command.add(""--verbose""); } if (dexOptions.getJumboMode()) { command.add(""--force-jumbo""); } command.add(""--output""); command.add(outFile.getAbsolutePath()); command.add(inputFile.getAbsolutePath()); mCmdLineRunner.runCmdLine(command, null); }",b7b9b33a56163c99c58105afda5ba6e2ab42288d,"preDexLibrary(java.io.File,java.io.File,com.android.builder.DexOptions)",206506,347,372
194132,tools_ahat_src_Sort.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public int compare(com.android.ahat.AhatSnapshot.NativeAllocation a, com.android.ahat.AhatSnapshot.NativeAllocation b) { return java.lang.Long.compare(b.size, a.size); }",d8412c31758acfa03db9d7f11002caf44c05d173,,"compare(com.android.ahat.AhatSnapshot$NativeAllocation,com.android.ahat.AhatSnapshot$NativeAllocation)",5,5,"@java.lang.Override public int compare(com.android.ahat.InstanceUtils.NativeAllocation a, com.android.ahat.InstanceUtils.NativeAllocation b) { return java.lang.Long.compare(b.size, a.size); }",05b3ded795eab9629126fa3f6b554e7926bfa9b0,"compare(com.android.ahat.InstanceUtils$NativeAllocation,com.android.ahat.InstanceUtils$NativeAllocation)",302319,59,57
655066,services_net_java_android_net_dns_ResolvUtil.java,,,,"public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException(""TLS-bypass resolution failed""); return null; } }",eba6ac9a2fb5244a4fecece30c29031d53a87119,,"blockingResolveAllLocally(android.net.Network,java.lang.String)",3,0,"public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException((name + "": TLS-bypass resolution failed"")); return null; } }",7cf62d42a1f0890ca099bcbccbf8897fd2b3cb27,"blockingResolveAllLocally(android.net.Network,java.lang.String)",219112,204,209
333623,sched_src_com_android_sched_build_SchedAnnotationProcessor.java,7.0,"@java.lang.Override @javax.annotation.Nonnull public javax.lang.model.type.TypeMirror getTypeMirror() throws com.android.sched.build.SchedAnnotationProcessor.AbortException { return com.android.sched.build.SchedAnnotationProcessor.Items.env.getTypeUtils().getDeclaredType(getTypeElement(), com.android.sched.build.SchedAnnotationProcessor.Items.env.getTypeUtils().getWildcardType(null, null)); }",cbf066571f1786117e31c806c6cb53341c309ded,"@java.lang.Override @javax.annotation.Nonnull public javax.lang.model.type.TypeMirror getTypeMirror() throws com.android.sched.build.SchedAnnotationProcessor.AbortException { javax.annotation.processing.ProcessingEnvironment localEnv = com.android.sched.build.SchedAnnotationProcessor.Items.env; assert localEnv != null; return localEnv.getTypeUtils().getDeclaredType(getTypeElement(), localEnv.getTypeUtils().getWildcardType(null, null)); }",c1b65d72fa2e7280a9705f423ac2c5bb353d9f0e,getTypeMirror(),getTypeMirror(),3,7,"@java.lang.Override @javax.annotation.Nonnull @com.android.sched.util.findbugs.SuppressFBWarnings(""NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"") public javax.lang.model.type.TypeMirror getTypeMirror() throws com.android.sched.build.SchedAnnotationProcessor.AbortException { return com.android.sched.build.SchedAnnotationProcessor.Items.env.getTypeUtils().getDeclaredType(getTypeElement(), com.android.sched.build.SchedAnnotationProcessor.Items.env.getTypeUtils().getWildcardType(null, null)); }",a7d2b36075ce2b82779f7e37118128ddd8af6c33,getTypeMirror(),221342,105,131
159584,luni_src_test_java_libcore_java_security_cert_FakeOidProvider.java,,,,"@java.lang.Override protected void engineInitVerify(java.security.PublicKey publicKey) throws java.security.InvalidKeyException { java.lang.System.out.println(""yay got it""); }",cd4ebddbeebec92b535b6c25bdc7ca373ec58585,,engineInitVerify(java.security.PublicKey),2,0,@java.lang.Override protected void engineInitVerify(java.security.PublicKey publicKey) throws java.security.InvalidKeyException { },f9a6a1255295a3a232dc4028badf5856a785f081,engineInitVerify(java.security.PublicKey),434006,45,30
555546,core_java_com_android_server_BootReceiver.java,7.0,"private static void addFileWithFootersToDropBox(android.os.DropBoxManager db, java.util.HashMap<java.lang.String, java.lang.Long> timestamps, java.lang.String headers, java.lang.String footers, java.lang.String filename, int maxSize, java.lang.String tag) throws java.io.IOException { if ((db == null) || (!(db.isTagEnabled(tag)))) return; java.io.File file = new java.io.File(filename); long fileTime = file.lastModified(); if (fileTime <= 0) return; if ((timestamps.containsKey(filename)) && ((timestamps.get(filename)) == fileTime)) { return; } timestamps.put(filename, fileTime); android.util.Slog.i(com.android.server.BootReceiver.TAG, ((((""Copying "" + filename) + "" to DropBox ("") + tag) + "")"")); db.addText(tag, ((headers + (android.os.FileUtils.readTextFile(file, maxSize, ""[[TRUNCATED]]\n""))) + footers)); }",8b18396621fb4cbeba2cbab2718a87b90a469629,"private static void addFileWithFootersToDropBox(android.os.DropBoxManager db, java.util.HashMap<java.lang.String, java.lang.Long> timestamps, java.lang.String headers, java.lang.String footers, java.lang.String filename, int maxSize, java.lang.String tag) throws java.io.IOException { if ((db == null) || (!(db.isTagEnabled(tag)))) return; java.io.File file = new java.io.File(filename); long fileTime = file.lastModified(); if (fileTime <= 0) return; if ((timestamps.containsKey(filename)) && ((timestamps.get(filename)) == fileTime)) { return; } timestamps.put(filename, fileTime); android.util.Slog.i(com.android.server.BootReceiver.TAG, ((((""Copying "" + filename) + "" to DropBox ("") + tag) + "")"")); db.addText(tag, ((headers + (android.os.FileUtils.readTextFile(file, maxSize, ""[[TRUNCATED]]\n""))) + footers)); android.util.Slog.i(com.android.server.BootReceiver.TAG, java.lang.String.format(""Copied to Dropbox: filename=%s, maxSize=%d, tag=%s"", filename, maxSize, tag)); }",5d7a3f483afc383f967d068c0310219f4428fc1d,"addFileWithFootersToDropBox(android.os.DropBoxManager,java.util.HashMap,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)","addFileWithFootersToDropBox(android.os.DropBoxManager,java.util.HashMap,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)",15,7,"private static void addFileWithFootersToDropBox(android.os.DropBoxManager db, java.util.HashMap<java.lang.String, java.lang.Long> timestamps, java.lang.String headers, java.lang.String footers, java.lang.String filename, int maxSize, java.lang.String tag) throws java.io.IOException { if ((db == null) || (!(db.isTagEnabled(tag)))) return; java.io.File file = new java.io.File(filename); long fileTime = file.lastModified(); if (fileTime <= 0) return; if ((timestamps.containsKey(filename)) && ((timestamps.get(filename)) == fileTime)) { return; } timestamps.put(filename, fileTime); android.util.Slog.i(com.android.server.BootReceiver.TAG, ((((""Copying "" + filename) + "" to DropBox ("") + tag) + "")"")); db.addText(tag, ((headers + (android.os.FileUtils.readTextFile(file, maxSize, ""[[TRUNCATED]]\n""))) + footers)); android.util.EventLog.writeEvent(DropboxLogTags.DROPBOX_FILE_COPY, filename, maxSize, tag); }",91343ef857136a991ab0fd218bfcb2e9ae2c8d35,"addFileWithFootersToDropBox(android.os.DropBoxManager,java.util.HashMap,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)",164598,297,274
124242,jack_tests_com_android_jack_test_TestingEnvironment.java,,,,@javax.annotation.Nonnull public static final java.io.File getJackRootDir() { return com.android.jack.test.TestingEnvironment.JACK_ROOT_DIR; },b5479bbaebe3aeafceb390bdc1eeffe62c794775,,getJackRootDir(),4,2,@javax.annotation.Nonnull public static final java.io.File getJackRootDir() { return com.android.jack.test.TestsProperties.JACK_ROOT_DIR; },9ab811381e5ac8a3bbdb9e59b5e2404bbc05032e,getJackRootDir(),430892,39,39
208006,test_004-checker-UnsafeTest18_src_Main.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void run() { while (!(guard2.get())); Main.load(); Main.expectEquals64((-987654321L), m.l); }",4b63df940d0b38df5765aeebd8bea7ef669fab08,,run(),5,13,"public void run() { while (!(guard2.get())); Main.load(); Main.expectEqual64((-987654321L), m.l); }",c72530c4b690d5f86ad43e013951fe49fe4bca41,run(),494874,32,32
150498,plugins_gradle_tooling-extension-impl_src_org_jetbrains_plugins_gradle_tooling_internal_ModuleExtendedModelImpl.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.String getJavaSourceCompatibility() { return myJavaSourceCompatibility; },bfbedaf00e82d5a1732f832ef5253c089a69c098,,getJavaSourceCompatibility(),2,1,@org.jetbrains.annotations.Nullable @java.lang.Override public java.lang.String getJavaSourceCompatibility() { return myJavaSourceCompatibility; },0ddca61a3eb9607844ef13a206625848c19f3472,getJavaSourceCompatibility(),122511,25,33
555560,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,2.0,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }",e703c3b90b04818df252f162f52fdd0646dfcc78,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }",9bdd569ebab419e8c19595b69079f11c00295ba6,testAesCbcHmacSha384Tcp4(),testAesCbcHmacSha384Tcp4(),9,2,"public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1); }",0151975a505e9e63ae1c6073bf01b46583854d3b,testAesCbcHmacSha384Tcp4(),439646,153,154
452700,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerTestBase.java,38.0,"protected boolean supportsMultiWindowMode() throws com.android.tradefed.device.DeviceNotAvailableException { return (!(hasDeviceFeature(""android.hardware.type.watch""))) || (android.server.cts.ActivityManagerTestBase.PRETEND_DEVICE_SUPPORTS_DOCKING); }",de2540f1715b3e6873aca918ea44aa6e9d8d345e,"protected boolean supportsMultiWindowMode() { if (!(mConfigLoaded)) { try { executeShellCommand(((""am start -n "" + ""android.server.app/."") + (SUPPORT_OBSERVER))); waitForResume(""android.server.app"", android.server.cts.SUPPORT_OBSERVER); java.util.Map map = getLogResults(android.server.cts.SUPPORT_OBSERVER); java.lang.String value = ((java.lang.String) (map.get(RESULT_KEY_HEAD))); if ((value != null) && (value.equals(""OK""))) { mConfigLoaded = true; mSupportMultiWindow = !(map.get(""config_supportsMultiWindow"").equals(""false"")); } executeShellCommand(android.server.cts.ActivityManagerTestBase.AM_FORCE_STOP_TEST_PACKAGE); clearLogs(); } catch (java.lang.Exception e) { e.printStackTrace(); } } return mSupportMultiWindow; }",faa0dbd59929752cf82b902973a25369489fa606,supportsMultiWindowMode(),supportsMultiWindowMode(),5,37,"protected boolean supportsMultiWindowMode() throws com.android.tradefed.device.DeviceNotAvailableException { return (!(hasDeviceFeature(""android.hardware.type.watch""))) || (android.server.cts.ActivityManagerTestBase.PRETEND_DEVICE_SUPPORTS_DOCKING); }",de2540f1715b3e6873aca918ea44aa6e9d8d345e,supportsMultiWindowMode(),344277,209,63
291165,src_com_android_server_telecom_ui_MissedCallNotifierImpl.java,5.0,"private android.app.PendingIntent createTelecomPendingIntent(java.lang.String action, android.net.Uri data, android.os.UserHandle userHandle) { android.content.Intent intent = new android.content.Intent(action, data, mContext, com.android.server.telecom.components.TelecomBroadcastReceiver.class); intent.putExtra(TelecomBroadcastIntentProcessor.EXTRA_USERHANDLE, userHandle); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, 0); }",1f622f1139a5dc6e1e90fba90d07a947deea670e,"private android.app.PendingIntent createTelecomPendingIntent(java.lang.String action, android.net.Uri data, android.os.UserHandle userHandle) { android.content.Intent intent = new android.content.Intent(action, data, mContext, com.android.server.telecom.components.TelecomBroadcastReceiver.class); intent.putExtra(TelecomBroadcastIntentProcessor.EXTRA_USERHANDLE, userHandle); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); }",036e60c25f23de169125595f959f37580c6759aa,"createTelecomPendingIntent(java.lang.String,android.net.Uri,android.os.UserHandle)","createTelecomPendingIntent(java.lang.String,android.net.Uri,android.os.UserHandle)",5,6,"private android.app.PendingIntent createTelecomPendingIntent(java.lang.String action, android.net.Uri data, android.os.UserHandle userHandle) { android.content.Intent intent = new android.content.Intent(action, data, mContext, com.android.server.telecom.components.TelecomBroadcastReceiver.class); intent.putExtra(TelecomBroadcastIntentProcessor.EXTRA_USERHANDLE, userHandle); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT); }",4e1a6a686165b2b0329613f3aa8fa5a1615c770c,"createTelecomPendingIntent(java.lang.String,android.net.Uri,android.os.UserHandle)",296176,118,118
503781,src_java_com_android_ims_ImsUt.java,1.0,"@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result) { if (com.android.ims.ImsUt.DBG) { log((((""queryCallBarring :: Ut="" + (miUt)) + "", cbType="") + cbType)); } synchronized(mLockObj) { try { int id = miUt.queryCallBarring(cbType); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }",21b8016e3bd864d08537fb98a48a8abe8a452bf5,"@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result) { queryCallBarring(cbType, com.android.ims.ImsUt.SERVICE_CLASS_NONE, result); }",2b2f590cfc3b5b23d1f7f609ec0e29ac2e9514d0,"queryCallBarring(int,android.os.Message)","queryCallBarring(int,android.os.Message)",2,1,"@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result) { queryCallBarring(cbType, result, com.android.ims.ImsUt.SERVICE_CLASS_NONE); }",a83970caa9d7d09e3f56c5e1b89b56df8080cc99,"queryCallBarring(int,android.os.Message)",335139,54,54
91995,luni_src_main_java_libcore_io_Posix.java,95.0,"public native libcore.io.StructLinger getsockoptLinger(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException;",d9ebb565d53583a27ecb63f1073376c26d1b7caa,"public native android.os.StructLinger getsockoptLinger(java.io.FileDescriptor fd, int level, int option) throws android.os.ErrnoException;",9d99663e47977288c868218c572c852f7ce464dd,"getsockoptLinger(java.io.FileDescriptor,int,int)","getsockoptLinger(java.io.FileDescriptor,int,int)",3,95,"public native android.system.StructLinger getsockoptLinger(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",22deed5d09f2e696df9c09fc93c2b45e7ded6551,"getsockoptLinger(java.io.FileDescriptor,int,int)",169823,39,39
258630,ojluni_src_main_java_java_lang_reflect_Executable.java,,,,"public java.lang.reflect.Type[] getGenericExceptionTypes() { throw new java.lang.UnsupportedOperationException(""Not implemented on Android.""); }",3279ddccb599a8c22f9cb7e6b6c805089ff270c6,,getGenericExceptionTypes(),13,21,"public java.lang.reflect.Type[] getGenericExceptionTypes() { throw new java.lang.UnsupportedOperationException(""Executable.getGenericExceptionTypes() not implemented""); }",892038e9081798074282bf669c3c7e513617c308,getGenericExceptionTypes(),270169,31,34
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LongTest.class, timeout = 1) @org.junit.Test public void testRunner_LongTest_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure(""test"", ""java.util.concurrent.TimeoutException\n"").aborted(); }",507ddf07da24e0c1557d4ebce32818d0380ca5fb,,testRunner_LongTest_WithTimeout(),3,8,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LongTest.class, timeout = 1) @org.junit.Test public void testRunner_LongTest_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure(""test"", ""java.util.concurrent.TimeoutException\n"").aborted(); }",7f3d0fbaa848414026fd2ca3404398e0bc00f652,testRunner_LongTest_WithTimeout(),130762,95,94
162651,ddmlib_src_main_java_com_android_ddmlib_Device.java,52.0,"@java.lang.Override public java.lang.String installRemotePackage(java.lang.String remoteFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { com.android.ddmlib.Device.InstallReceiver receiver = new com.android.ddmlib.Device.InstallReceiver(); java.lang.StringBuilder optionString = new java.lang.StringBuilder(); if (reinstall) { optionString.append(""-r ""); } if (extraArgs != null) { optionString.append(com.google.common.base.Joiner.on(' ').join(extraArgs)); } java.lang.String cmd = java.lang.String.format(""pm install %1$s \""%2$s\"""", optionString.toString(), remoteFilePath); executeShellCommand(cmd, receiver, com.android.ddmlib.Device.INSTALL_TIMEOUT_MINUTES, java.util.concurrent.TimeUnit.MINUTES); return receiver.getErrorMessage(); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { throw new com.android.ddmlib.InstallException(e); } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } }",511992975fe08d343388f1490701c3cf1a695c63,"@java.lang.Override public java.lang.String installRemotePackage(java.lang.String remoteFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { com.android.ddmlib.Device.InstallReceiver receiver = new com.android.ddmlib.Device.InstallReceiver(); java.lang.StringBuilder optionString = new java.lang.StringBuilder(); if (reinstall) { optionString.append(""-r ""); } if (extraArgs != null) { optionString.append(com.google.common.base.Joiner.on(' ').join(extraArgs)); } java.lang.String cmd = java.lang.String.format(""pm install %1$s \""%2$s\"""", optionString.toString(), remoteFilePath); executeShellCommand(cmd, receiver, com.android.ddmlib.Device.INSTALL_TIMEOUT_MINUTES, java.util.concurrent.TimeUnit.MINUTES); return receiver.getErrorMessage(); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { throw new com.android.ddmlib.InstallException(e); } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } catch (java.lang.InterruptedException e) { throw new com.android.ddmlib.InstallException(e); } }",81a25d3554e3bff6f5a8e8d3821b3e73413e4c34,"installRemotePackage(java.lang.String,boolean,java.lang.String[])","installRemotePackage(java.lang.String,boolean,java.lang.String[])",4,52,"@java.lang.Override public java.lang.String installRemotePackage(java.lang.String remoteFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { com.android.ddmlib.Device.InstallReceiver receiver = new com.android.ddmlib.Device.InstallReceiver(); java.lang.StringBuilder optionString = new java.lang.StringBuilder(); if (reinstall) { optionString.append(""-r ""); } if (extraArgs != null) { optionString.append(com.google.common.base.Joiner.on(' ').join(extraArgs)); } java.lang.String cmd = java.lang.String.format(""pm install %1$s \""%2$s\"""", optionString.toString(), remoteFilePath); executeShellCommand(cmd, receiver, com.android.ddmlib.Device.INSTALL_TIMEOUT_MINUTES, java.util.concurrent.TimeUnit.MINUTES); return receiver.getErrorMessage(); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { throw new com.android.ddmlib.InstallException(e); } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } }",511992975fe08d343388f1490701c3cf1a695c63,"installRemotePackage(java.lang.String,boolean,java.lang.String[])",353137,370,343
505034,src_com_android_stk_StkAppService.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void replaceEventList(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) != null) { for (int current : mStkContext[slotId].mSetupEventListSettings.eventList) { if (current != (com.android.stk.StkAppService.INVALID_SETUP_EVENT)) { if (((mStkContext[slotId].mCurrentCmd.getSetEventList()) == null) || (!(findEvent(current, mStkContext[slotId].mCurrentCmd.getSetEventList().eventList)))) { if (isUnregisterableEvent(current, slotId)) { unregisterEvent(current, slotId); } } } } } mStkContext[slotId].mSetupEventListSettings = mStkContext[slotId].mCurrentCmd.getSetEventList(); mStkContext[slotId].mCurrentSetupEventCmd = mStkContext[slotId].mCurrentCmd; mStkContext[slotId].mCurrentCmd = mStkContext[slotId].mMainCmd; registerEvents(slotId); }",b2db6f6ccbdcd9d0f4825f3679e382120c6d174a,,replaceEventList(int),9,25,"private void replaceEventList(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) != null) { for (int current : mStkContext[slotId].mSetupEventListSettings.eventList) { if (current != (com.android.stk.StkAppService.INVALID_SETUP_EVENT)) { if (((mStkContext[slotId].mCurrentCmd.getSetEventList()) == null) || (!(findEvent(current, mStkContext[slotId].mCurrentCmd.getSetEventList().eventList)))) { unregisterEvent(current, slotId); } } } } mStkContext[slotId].mSetupEventListSettings = mStkContext[slotId].mCurrentCmd.getSetEventList(); mStkContext[slotId].mCurrentSetupEventCmd = mStkContext[slotId].mCurrentCmd; mStkContext[slotId].mCurrentCmd = mStkContext[slotId].mMainCmd; registerEvents(slotId); }",500f93cb5f254d714080c3589a4662f86050758d,replaceEventList(int),61537,238,224
238940,jack_src_com_android_jack_shrob_proguard_GrammarActions.java,26.0,"static void field(@javax.annotation.Nonnull com.android.jack.shrob.spec.ClassSpecification classSpec, @javax.annotation.CheckForNull com.android.jack.shrob.spec.AnnotationSpecification annotationType, @javax.annotation.CheckForNull java.lang.String typeSig, java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.spec.ModifierSpecification modifier) { assert name != null; com.android.jack.shrob.spec.NameSpecification typeSignature = null; if (typeSig != null) { typeSignature = com.android.jack.shrob.proguard.GrammarActions.name(typeSig); } else { assert name.equals(""*""); } classSpec.add(new com.android.jack.shrob.spec.FieldSpecification(com.android.jack.shrob.proguard.GrammarActions.name(name), modifier, typeSignature, annotationType)); }",d534b80cf2ab40cccccbcfadeb47dc97aee9fe48,"static void field(@javax.annotation.Nonnull com.android.jack.shrob.spec.ClassSpecification classSpec, @javax.annotation.CheckForNull com.android.jack.shrob.spec.AnnotationSpecification annotationType, @javax.annotation.CheckForNull java.lang.String typeSig, java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.spec.ModifierSpecification modifier) { assert name != null; com.android.jack.shrob.spec.NameSpecification typeSignature = null; if (typeSig != null) { typeSignature = com.android.jack.shrob.proguard.GrammarActions.name(typeSig, com.android.jack.shrob.proguard.GrammarActions.NameFormat.CLASS); } else { assert name.equals(""*""); } classSpec.add(new com.android.jack.shrob.spec.FieldSpecification(com.android.jack.shrob.proguard.GrammarActions.name(name, com.android.jack.shrob.proguard.GrammarActions.NameFormat.NONE), modifier, typeSignature, annotationType)); }",9cf7baa3c69e78b657b1ca2bd3d2fb5a5cd62191,"field(com.android.jack.shrob.spec.ClassSpecification,com.android.jack.shrob.spec.AnnotationSpecification,java.lang.String,java.lang.String,com.android.jack.shrob.spec.ModifierSpecification)","field(com.android.jack.shrob.spec.ClassSpecification,com.android.jack.shrob.spec.AnnotationSpecification,java.lang.String,java.lang.String,com.android.jack.shrob.spec.ModifierSpecification)",5,24,"static void field(@javax.annotation.Nonnull com.android.jack.shrob.spec.ClassSpecification classSpec, @javax.annotation.CheckForNull com.android.jack.shrob.spec.AnnotationSpecification annotationType, @javax.annotation.CheckForNull java.lang.String typeSig, java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.spec.ModifierSpecification modifier) { assert name != null; com.android.jack.shrob.spec.NameSpecification typeSignature = null; if (typeSig != null) { typeSignature = com.android.jack.shrob.proguard.GrammarActions.name(typeSig, com.android.jack.shrob.proguard.GrammarActions.FilterSeparator.CLASS); } else { assert name.equals(""*""); } classSpec.add(new com.android.jack.shrob.spec.FieldSpecification(com.android.jack.shrob.proguard.GrammarActions.name(name, com.android.jack.shrob.proguard.GrammarActions.FilterSeparator.GENERAL), modifier, typeSignature, annotationType)); }",28d2425da752ab36cfeb6fa132db1537d63fa54d,"field(com.android.jack.shrob.spec.ClassSpecification,com.android.jack.shrob.spec.AnnotationSpecification,java.lang.String,java.lang.String,com.android.jack.shrob.spec.ModifierSpecification)",444650,244,244
177860,apps_CtsVerifier_src_com_android_cts_verifier_managedprovisioning_VpnTestActivity.java,,,,"public void vpnPrepareAndEstablish() { android.os.ParcelFileDescriptor descriptor = null; android.content.Intent newIntent = android.net.VpnService.prepare(this); if (newIntent != null) { try { descriptor = vpnService.new android.net.VpnService.Builder().addAddress(""8.8.8.8"", 30).establish(); } finally { try { descriptor.close(); populateInfo(R.string.device_owner_vpn_connection); } catch (java.lang.Exception e) { populateInfo(R.string.device_owner_no_vpn_connection); } } } else { populateInfo(R.string.device_owner_no_vpn_connection); } }",4d52307375b685cfd0603a244b401eac773cb87b,,vpnPrepareAndEstablish(),18,5,"public void establishVpn() { com.android.cts.verifier.managedprovisioning.VpnTestActivity.MyTestVpnService service = new com.android.cts.verifier.managedprovisioning.VpnTestActivity.MyTestVpnService(); descriptor = service.new android.net.VpnService.Builder().addAddress(""8.8.8.8"", 30).establish(); if ((descriptor) == null) { android.util.Log.i(com.android.cts.verifier.managedprovisioning.VpnTestActivity.TAG, ""Test succeeded: descriptor is null""); populateInfo(R.string.device_owner_no_vpn_connection); return; } android.util.Log.w(com.android.cts.verifier.managedprovisioning.VpnTestActivity.TAG, ""vpn connection established, not expected, test case fails""); try { descriptor.close(); populateInfo(R.string.device_owner_vpn_connection); } catch (java.io.IOException e) { android.util.Log.i(com.android.cts.verifier.managedprovisioning.VpnTestActivity.TAG, ""Closing vpn connection failed. Caught exception: "", e); populateInfo(R.string.device_owner_vpn_connection_close_failed); } }",9b18a509bb8f1e0f140bcd96a8396a5c031c3f30,establishVpn(),447903,151,278
252478,java_tests_RsTest_src_com_android_rs_test_UT_fp16.java,1.0,"public void run() { com.android.rs.test.Allocation A; com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); pRS.setMessageHandler(mRsMessage); com.android.rs.test.ScriptC_fp16 s = new com.android.rs.test.ScriptC_fp16(pRS); for (int nDims = 1; nDims <= 3; nDims++) { TestHalf(pRS, s, nDims); TestHalf2(pRS, s, nDims); TestHalf3(pRS, s, nDims); TestHalf4(pRS, s, nDims); } s.invoke_fp16_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",6669dbaf5ee2dae4347b49c875c334bf35f71375,"public void run() { android.renderscript.Allocation A; android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); pRS.setMessageHandler(mRsMessage); com.android.rs.test.ScriptC_fp16 s = new com.android.rs.test.ScriptC_fp16(pRS); for (int nDims = 1; nDims <= 3; nDims++) { TestHalf(pRS, s, nDims); TestHalf2(pRS, s, nDims); TestHalf3(pRS, s, nDims); TestHalf4(pRS, s, nDims); } s.invoke_fp16_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",71ec5b9340c89b9c127af07e2d8118a444b74c40,run(),run(),7,4,"public void run() { com.android.rs.test.Allocation A; com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); pRS.setMessageHandler(mRsMessage); com.android.rs.test.ScriptC_fp16 s = new com.android.rs.test.ScriptC_fp16(pRS); for (int nDims = 1; nDims <= 3; nDims++) { TestHalf(pRS, s, nDims); TestHalf2(pRS, s, nDims); TestHalf3(pRS, s, nDims); TestHalf4(pRS, s, nDims); } s.invoke_fp16_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",6669dbaf5ee2dae4347b49c875c334bf35f71375,run(),379329,172,181
54121,core_java_android_widget_TimePicker.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void updateMinuteControl() { if (is24HourView()) { if ((mMinuteSpinnerInput) != null) { mMinuteSpinnerInput.setImeOptions(EditorInfo.IME_ACTION_DONE); } } else { if ((mMinuteSpinnerInput) != null) { mMinuteSpinnerInput.setImeOptions(EditorInfo.IME_ACTION_NEXT); } } },1493259d7122db682fdfa13413d70e4daf5435ce,,updateMinuteControl(),3,30,private void updateMinuteControl() { if (is24HourView()) { mMinuteSpinnerInput.setImeOptions(EditorInfo.IME_ACTION_DONE); } else { mMinuteSpinnerInput.setImeOptions(EditorInfo.IME_ACTION_NEXT); } },53e69fafd776895b2431549d206c1d4d5c16f550,updateMinuteControl(),178346,84,58
237600,sched_src_com_android_sched_vfs_VFSToVFSWrapper.java,21.0,"private void dumpToDir(com.android.sched.vfs.VDir srcRootDir, com.android.sched.vfs.VDir destRootDir) throws com.android.sched.util.file.CannotCloseInputException, com.android.sched.util.file.CannotCloseOutputException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { for (com.android.sched.vfs.VElement element : srcRootDir.list()) { java.lang.String elementName = element.getName(); if (element.isVDir()) { com.android.sched.vfs.VDir dir = destRootDir.createVDir(elementName); dumpToDir(((com.android.sched.vfs.VDir) (element)), dir); } else { com.android.sched.vfs.VFile file = destRootDir.createVFile(elementName); try (java.io.InputStream is = ((com.android.sched.vfs.VFile) (element)).getInputStream()) { try (java.io.OutputStream os = file.getOutputStream()) { new com.android.sched.util.stream.LocationByteStreamSucker(is, os, element, file).suck(); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseOutputException(file, e); } } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseInputException(element, e); } } } }",516cf5639930214edb9385a603f8949b76f52e60,"private void dumpToDir(com.android.sched.vfs.VDir srcRootDir, com.android.sched.vfs.VDir destRootDir) throws com.android.sched.util.file.CannotCloseException, com.android.sched.util.file.CannotCloseInputException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { for (com.android.sched.vfs.VElement element : srcRootDir.list()) { java.lang.String elementName = element.getName(); if (element.isVDir()) { com.android.sched.vfs.VDir dir = destRootDir.createVDir(elementName); dumpToDir(((com.android.sched.vfs.VDir) (element)), dir); } else { com.android.sched.vfs.VFile file = destRootDir.createVFile(elementName); try (java.io.InputStream is = ((com.android.sched.vfs.VFile) (element)).getInputStream()) { try (java.io.OutputStream os = file.getOutputStream()) { new com.android.sched.util.stream.LocationByteStreamSucker(is, os, element, file).suck(); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseException(file, e); } } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseInputException(element, e); } } } }",4ae815129f59e6f9e621bafc3f0727f724529701,"dumpToDir(com.android.sched.vfs.VDir,com.android.sched.vfs.VDir)","dumpToDir(com.android.sched.vfs.VDir,com.android.sched.vfs.VDir)",4,21,"private void dumpToDir(com.android.sched.vfs.VDir srcRootDir, com.android.sched.vfs.VDir destRootDir) throws com.android.sched.util.file.CannotCloseException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { for (com.android.sched.vfs.VElement element : srcRootDir.list()) { java.lang.String elementName = element.getName(); if (element.isVDir()) { com.android.sched.vfs.VDir dir = destRootDir.createVDir(elementName); dumpToDir(((com.android.sched.vfs.VDir) (element)), dir); } else { com.android.sched.vfs.VFile file = destRootDir.createVFile(elementName); try (java.io.InputStream is = ((com.android.sched.vfs.VFile) (element)).getInputStream()) { try (java.io.OutputStream os = file.getOutputStream()) { new com.android.sched.util.stream.LocationByteStreamSucker(is, os, element, file).suck(); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseException(file, e); } } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseException(element, e); } } } }",e11b3be95e272c6e0025e8632a5de9b840496334,"dumpToDir(com.android.sched.vfs.VDir,com.android.sched.vfs.VDir)",434571,366,350
44490,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_DeviceManagerPage.java,,,,private void onRefresh(boolean b) { },23368a1a29f99a355dbcb4370c16b6648cecbade,,onRefresh(boolean),5,14,private boolean selectCellByName(com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo selected) { if (((mTable.isDisposed()) || (selected == null)) || ((selected.mDevice) == null)) { return false; } java.lang.String name = selected.mDevice.getName(); for (int n = (mTable.getItemCount()) - 1; n >= 0; n--) { org.eclipse.swt.widgets.TableItem item = mTable.getItem(n); java.lang.Object data = item.getData(); if (data instanceof com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) { com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo ci = ((com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) (data)); if (((ci != null) && ((ci.mDevice) != null)) && (name.equals(ci.mDevice.getName()))) { mTable.select(n); return true; } } } return false; },a64d9a9f62a0b6c489cc507246d2fb543b3bd548,selectCellByName(com.android.sdkuilib.internal.repository.ui.DeviceManagerPage$CellInfo),481168,10,243
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,74.0,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",9613a79b8c9c744509c781f4a856207ef5ffd93d,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",9b8b409f7f3d74ee7426464182f64330cd0d9260,testAesCbcHmacSha512Tcp6(),testAesCbcHmacSha512Tcp6(),9,85,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",a95258f59828e1faa6c76973f5ebdbc85cce3b33,testAesCbcHmacSha512Tcp6(),1898,213,213
570202,telephony_java_android_telephony_ims_stub_ImsRegistrationImplBase.java,15.0,@android.telephony.ims.internal.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } },01ded31d77043a5b11dee9db315c87d7eb3ab38f,@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } },fd4674ef2501a8bf53019d62419c8f789e3b946c,getConnectionType(),getConnectionType(),12,14,@com.android.internal.annotations.VisibleForTesting @android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech public final int getConnectionType() { synchronized(mLock) { return mConnectionType; } },a988851faef4565c3db45819edf3cb7f4bb10c9f,getConnectionType(),294248,39,51
71536,luni_src_main_java_java_security_Provider.java,2.0,public boolean supportsParameter(java.lang.Object parameter) { return true; },92911d5ba838f0aab083ac8fc141619b75e17a15,"public boolean supportsParameter(java.lang.Object parameter) { java.lang.Boolean supportsParameter = java.security.Provider.Service.sSupportsParameter.get(type); if (supportsParameter == null) { return true; } if (!supportsParameter) { throw new java.security.InvalidParameterException((""Cannot use a parameter with "" + (type))); } if ((parameter != null) && (!(parameter instanceof java.security.Key))) { throw new java.security.InvalidParameterException(""Parameter should be of type Key""); } ensureSupportedKeysInitialized(); if (((keyClasses) == null) && ((keyFormats) == null)) { return true; } java.security.Key keyParam = ((java.security.Key) (parameter)); if (((keyClasses) != null) && (isInList(keyClasses, keyParam.getClass()))) { return true; } if (((keyFormats) != null) && (isInList(keyFormats, keyParam.getFormat()))) { return true; } return false; }",702416c253674418f8cad27c3eaae8a91ac0df3d,supportsParameter(java.lang.Object),supportsParameter(java.lang.Object),4,2,"public boolean supportsParameter(java.lang.Object parameter) { java.lang.Boolean supportsParameter = java.security.Provider.Service.supportsParameterTypes.get(type); if (supportsParameter == null) { return true; } if (!supportsParameter) { throw new java.security.InvalidParameterException((""Cannot use a parameter with "" + (type))); } if ((parameter != null) && (!(parameter instanceof java.security.Key))) { throw new java.security.InvalidParameterException(""Parameter should be of type Key""); } ensureSupportedKeysInitialized(); if (((keyClasses) == null) && ((keyFormats) == null)) { return true; } java.security.Key keyParam = ((java.security.Key) (parameter)); if (((keyClasses) != null) && (java.security.Provider.Service.isInArray(keyClasses, keyParam.getClass()))) { return true; } if (((keyFormats) != null) && (java.security.Provider.Service.isInArray(keyFormats, keyParam.getFormat()))) { return true; } return false; }",b4bccfb11cda81d9c8607e7fc64b4453e85d698b,supportsParameter(java.lang.Object),334613,215,229
577942,telecomm_java_android_telecom_InCallAdapter.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void deflectCall(java.lang.String callId, java.lang.String deflectNumber) { try { mAdapter.deflectCall(callId, deflectNumber); } catch (android.os.RemoteException e) { } }",02a9ad6c00bd901ccaad8fb31ade2753cd218ad6,,"deflectCall(java.lang.String,java.lang.String)",7,23,"public void deflectCall(java.lang.String callId, android.net.Uri address) { try { mAdapter.deflectCall(callId, address); } catch (android.os.RemoteException e) { } }",f94fb7b04ce821327dc8ec5589e9a1a8b86af6ff,"deflectCall(java.lang.String,android.net.Uri)",199856,56,50
50361,builder_src_main_java_com_android_builder_internal_incremental_DependencyDataStore.java,,,,public void addData(java.util.List<com.android.builder.internal.incremental.DependencyData> dataList) { mDataList.addAll(dataList); },3d03d2164b493db647687903f2694c6993937bd1,,addData(java.util.List),3,11,"public void addData(java.util.List<com.android.builder.internal.incremental.DependencyData> dataList) { for (com.android.builder.internal.incremental.DependencyData data : dataList) { mMainFileMap.put(data.getMainFile(), data); } }",3af8a28a8a895c572eb482d471aec6c7c3d53163,addData(java.util.List),263309,39,67
91995,luni_src_main_java_libcore_io_ForwardingOs.java,87.0,"public libcore.io.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptTimeval(fd, level, option); }",fa970af16177e484401bf391c1dc441bfc6e08d8,"public android.os.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.os.ErrnoException { return os.getsockoptTimeval(fd, level, option); }",8d69c2276f9a4ceca40f6ffa80393f6d00a1c424,"getsockoptTimeval(java.io.FileDescriptor,int,int)","getsockoptTimeval(java.io.FileDescriptor,int,int)",3,87,"public android.system.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptTimeval(fd, level, option); }",36aecf5dab3c64b1a8fd8eaa4641ea2b8502912a,"getsockoptTimeval(java.io.FileDescriptor,int,int)",170459,52,52
122283,jack_src_com_android_jack_jayce_v0002_nodes_NClassType.java,6.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClass create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader) { assert (signature) != null; assert (sourceInfo) != null; java.lang.String binaryName = com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(signature); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); com.android.jack.ir.sourceinfo.SourceInfo jSourceInfo = sourceInfo.exportAsJast(new com.android.jack.jayce.v0002.io.ExportSession(loader.getLookup(), enclosingPackage.getSession(), com.android.jack.jayce.NodeLevel.STRUCTURE)); com.android.jack.ir.ast.JDefinedClass jClassType = new com.android.jack.ir.ast.JDefinedClass(jSourceInfo, simpleName, modifiers, enclosingPackage, loader); return jClassType; }",62a88f9b39ec21c3fab2501ce49f7b05e89ddc93,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClass create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader, @javax.annotation.Nonnull com.android.jack.jayce.v0002.io.JayceInternalReaderImpl in) throws java.io.IOException { modifiers = in.readInt(); signature = in.readId(); assert (signature) != null; java.lang.String binaryName = com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(signature); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); com.android.jack.ir.ast.JDefinedClass jClassType = new com.android.jack.ir.ast.JDefinedClass(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, simpleName, modifiers, enclosingPackage, loader); return jClassType; }",ded3555aa9bb7556b149d6b4f5d1bceaa7a843b7,"create(com.android.jack.ir.ast.JPackage,com.android.jack.jayce.JayceClassOrInterfaceLoader)","create(com.android.jack.ir.ast.JPackage,com.android.jack.jayce.JayceClassOrInterfaceLoader,com.android.jack.jayce.v0002.io.JayceInternalReaderImpl)",12,0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClass create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader) { assert (signature) != null; java.lang.String binaryName = com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(signature); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); com.android.jack.ir.ast.JDefinedClass jClassType = new com.android.jack.ir.ast.JDefinedClass(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, simpleName, modifiers, enclosingPackage, loader); return jClassType; }",3981066706c40c7c92ec6357cc32d31ec271dd1a,"create(com.android.jack.ir.ast.JPackage,com.android.jack.jayce.JayceClassOrInterfaceLoader)",20550,249,201
79091,luni_src_test_java_libcore_java_util_LocaleTest.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_parseSerializedExtensions() { java.util.Map<java.lang.Character, java.lang.String> extensions = new java.util.HashMap<java.lang.Character, java.lang.String>(); java.util.Locale.parseSerializedExtensions(""x-foo"", extensions); assertEquals(""foo"", extensions.get('x')); extensions.clear(); java.util.Locale.parseSerializedExtensions(""x-foo-y-bar-z-baz"", extensions); assertEquals(""foo"", extensions.get('x')); assertEquals(""bar"", extensions.get('y')); assertEquals(""baz"", extensions.get('z')); extensions.clear(); java.util.Locale.parseSerializedExtensions(""x-fooo-baar-baaz"", extensions); assertEquals(""fooo-baar-baaz"", extensions.get('x')); extensions.clear(); java.util.Locale.parseSerializedExtensions(""x-fooo-baar-baaz-y-gaaa-caar-caaz"", extensions); assertEquals(""fooo-baar-baaz"", extensions.get('x')); assertEquals(""gaaa-caar-caaz"", extensions.get('y')); }",d41b0110806c7e4dce971f25467cff22978dc8fb,,test_parseSerializedExtensions(),3,29,"public void test_Builder_setVariant() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b = new java.util.Locale.Builder(); b.setVariant(""vArIaNt-VaRiAnT-VARIANT""); assertEquals(""vArIaNt_VaRiAnT_VARIANT"", b.build().getVariant()); b = new java.util.Locale.Builder(); try { b.setVariant(""shor""); fail(); } catch (java.util.IllformedLocaleException expected) { } try { b.setVariant(""waytoolong""); fail(); } catch (java.util.IllformedLocaleException expected) { } try { b.setVariant(""foooo-foooo-fo""); fail(); } catch (java.util.IllformedLocaleException expected) { } b.setVariant(""0ABC""); assertEquals(""0ABC"", b.build().getVariant()); b = new java.util.Locale.Builder(); b.setVariant(""variant""); b.setVariant(null); assertEquals("""", b.build().getVariant()); b = new java.util.Locale.Builder(); b.setVariant(""variant""); b.setVariant(""""); assertEquals("""", b.build().getVariant()); }",26685f2272df7ac00dbb21da150ef312591ea5a8,test_Builder_setVariant(),40846,263,277
140334,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,2.0,"@java.lang.Override public void srcToExe(@javax.annotation.Nonnull java.io.File out, boolean zipFile, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); srcToCommon(args, sources); if (zipFile) { args.add(""--output-dex-zip""); } else { args.add(""--output-dex""); } args.add(out.getAbsolutePath()); args.addAll(extraJackArgs); if (withDebugInfos) { args.add(""-g""); } com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); if (!(exec.run())) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",881fc2b4357d89ef0f4ef0b14ff25e22b00ec5e7,"@java.lang.Override public void srcToExe(@javax.annotation.Nonnull java.io.File out, boolean zipFile, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); srcToCommon(args, sources); if (zipFile) { args.add(""--output-dex-zip""); } else { args.add(""--output-dex""); } args.add(out.getAbsolutePath()); args.addAll(extraJackArgs); if (withDebugInfos) { args.add(""-g""); } com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); try { if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException(""An error occured while running Jack"", e); } }",c9f3b2ccfc3fa952f8203fa84d91bcb281369609,"srcToExe(java.io.File,boolean,java.io.File[])","srcToExe(java.io.File,boolean,java.io.File[])",2,2,"@java.lang.Override public void srcToExe(@javax.annotation.Nonnull java.io.File out, boolean zipFile, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); srcToCommon(args, sources); if (zipFile) { args.add(""--output-dex-zip""); } else { args.add(""--output-dex""); } args.add(out.getAbsolutePath()); args.addAll(extraJackArgs); if (withDebugInfos) { args.add(""-g""); } com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); try { if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException(""An error occurred while running Jack"", e); } }",4caef1f5ff624e5fe8061830a23e3262dfebccab,"srcToExe(java.io.File,boolean,java.io.File[])",338784,298,298
65180,src_java_com_android_internal_telephony_uicc_UiccCardApplication.java,4.0,"private void queryFdn() { int serviceClassX; serviceClassX = ((com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_VOICE) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_DATA)) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_FAX); mCi.queryFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_FD, """", serviceClassX, mAid, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCardApplication.EVENT_QUERY_FACILITY_FDN_DONE)); }",ed782a17d72e67e23e54e7d04f6198736534a517,"public void queryFdn() { int serviceClassX; serviceClassX = ((com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_VOICE) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_DATA)) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_FAX); mCi.queryFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_FD, """", serviceClassX, mAid, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCardApplication.EVENT_QUERY_FACILITY_FDN_DONE)); }",fcc95310c05edd523d2aefaaf241bfb961b55a68,queryFdn(),queryFdn(),6,4,"void queryFdn() { int serviceClassX; serviceClassX = ((com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_VOICE) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_DATA)) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_FAX); mCi.queryFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_FD, """", serviceClassX, mAid, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCardApplication.EVENT_QUERY_FACILITY_FDN_DONE)); }",e268921ef339fe8f9246534c7a4d510fc1c0de12,queryFdn(),52845,142,141
579565,src_java_com_android_internal_telephony_RIL.java,206.0,"@java.lang.Override public void deleteSmsOnSim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DELETE_SMS_ON_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" index = "") + index)); } try { radioProxy.deleteSmsOnSim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""deleteSmsOnSim"", e); } } }",eb927ee64a436e644da676972fee93d1a9354fcb,"@java.lang.Override public void deleteSmsOnSim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_DELETE_SMS_ON_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" index = "") + index)); } try { radioProxy.deleteSmsOnSim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""deleteSmsOnSim"", e); } } }",7b84700e0313c2f445ee867a72ec8369c5eef70d,"deleteSmsOnSim(int,android.os.Message)","deleteSmsOnSim(int,android.os.Message)",3,206,"@java.lang.Override public void deleteSmsOnSim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DELETE_SMS_ON_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" index = "") + index)); } try { radioProxy.deleteSmsOnSim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""deleteSmsOnSim"", e); } } }",eb927ee64a436e644da676972fee93d1a9354fcb,"deleteSmsOnSim(int,android.os.Message)",89337,227,223
346149,service_java_com_android_server_wifi_WifiVendorHal.java,31.0,public void pauseScan() { android.hardware.wifi.V1_0.WifiStatus status; kilroy(); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { try { if ((mIWifiStaIface) == null) return; if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if ((status.code) != (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS)) return; kilroy(); mScan.paused = true; } } catch (android.os.RemoteException e) { handleRemoteException(e); } } },2947fd6404e68b2a1912d99a87cff8d76bc0ab0d,public void pauseScan() { android.hardware.wifi.V1_0.WifiStatus status; kilroy(); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { try { if ((mIWifiStaIface) == null) return; if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if (!(ok(status))) return; kilroy(); mScan.paused = true; } } catch (android.os.RemoteException e) { handleRemoteException(e); } } },34ada469f55193d28e7341b07198a01e7ddc3579,pauseScan(),pauseScan(),5,30,public void pauseScan() { android.hardware.wifi.V1_0.WifiStatus status; synchronized(com.android.server.wifi.WifiVendorHal.sLock) { try { if ((mIWifiStaIface) == null) return; if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if (!(ok(status))) return; mScan.paused = true; } } catch (android.os.RemoteException e) { handleRemoteException(e); } } },f2cfe4279b55dbab0b8a158a7fb853e7d9dd1bbf,pauseScan(),404581,139,129
594598,telephony_java_android_telephony_data_DataService.java,0.0,"public void deactivateDataCall(int cid, boolean reasonRadioShutDown, boolean isHandover, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }",496644ba773e04dda915ea6efc6381a81e0b6823,"public void deactivateDataCall(int cid, @android.telephony.data.DataService.RequestReason int reason, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }",01ed48c641ae4e97adcaa0ffd9874d42596f1788,"deactivateDataCall(int,boolean,boolean,android.telephony.data.DataServiceCallback)","deactivateDataCall(int,int,android.telephony.data.DataServiceCallback)",3,12,"public void deactivateDataCall(int cid, @android.telephony.data.DataService.DeactivateDataReason int reason, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }",838b751796be8130e0a2a02afe3d475e807e339c,"deactivateDataCall(int,int,android.telephony.data.DataServiceCallback)",429802,57,58
542981,tests_unit_src_com_android_bluetooth_hid_HidDeviceTest.java,,,,"@org.junit.Test public void testInitState() throws java.lang.Exception { org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHidDeviceService.getConnectionState(mTestDevice)); byte[] testDevice = new byte[]{ 16, 17, 18, 19, 20, 21 }; mHidDeviceService.onApplicationStateChangedFromNative(testDevice, true); mHidDeviceService.onConnectStateChangedFromNative(testDevice, 0); }",97bea178842438a1b64df40762b442926901ceb5,,testInitState(),14,3,"@org.junit.Test public void testSendReport() throws java.lang.Exception { doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).sendReport(anyInt(), any(byte[].class)); org.junit.Assert.assertEquals(false, mHidDeviceService.sendReport(mTestDevice, 0, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); mHidDeviceService.onApplicationStateChangedFromNative(mTestDevice, true); java.lang.Thread.sleep(com.android.bluetooth.hid.HidDeviceTest.TIMEOUT_MS); org.junit.Assert.assertEquals(true, mHidDeviceService.sendReport(mTestDevice, 0, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).sendReport(anyInt(), eq(com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); }",37bfc3f30b1cd85d24c6b0c1a8664503a7221df8,testSendReport(),329443,101,259
370793,tests_telephonytests_src_com_android_internal_telephony_uicc_IsimUiccRecordsTest.java,,,,"@org.junit.Test public void testBroadcastRefresh() { android.os.Message msg = new android.os.Message(); msg.what = ((java.lang.Integer) (getStaticField(com.android.internal.telephony.uicc.IsimUiccRecords.class, mIsimUiccRecords, ""EVENT_ISIM_REFRESH""))); mIsimUiccRecords.handleMessage(msg); org.mockito.ArgumentCaptor<android.content.Intent> intentCapture = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mContext).sendBroadcast(intentCapture.capture()); assertEquals(((android.content.Intent) (intentCapture.getValue())).getAction(), IsimUiccRecords.INTENT_ISIM_REFRESH); }",bf8bd3507a7d220f5d44d1d2d7dcc389600acf06,,testBroadcastRefresh(),7,2,"@org.junit.Test public void testBroadcastRefresh() { android.os.Message msg = new android.os.Message(); msg.what = IccRecords.EVENT_REFRESH; msg.obj = new android.os.AsyncResult(null, null, null); mIsimUiccRecords.handleMessage(msg); org.mockito.ArgumentCaptor<android.content.Intent> intentCapture = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mContext).sendBroadcast(intentCapture.capture()); assertEquals(((android.content.Intent) (intentCapture.getValue())).getAction(), IsimUiccRecords.INTENT_ISIM_REFRESH); }",cb98dfbebc8b07cfe45ca0d0b62b16dd1c06d101,testBroadcastRefresh(),503392,164,143
361230,luni_src_test_java_libcore_util_TimeZoneFinderTest.java,,,,private static void checkThrowsParserException(java.lang.String xml) throws java.lang.Exception { try { libcore.util.TimeZoneFinderTest.parse(xml); fail(); } catch (org.xmlpull.v1.XmlPullParserException expected) { } },d911a9e5c25c7ac76faff2f3517a886fc4d079f5,,checkThrowsParserException(java.lang.String),8,6,private static void checkValidateThrowsParserException(java.lang.String xml) throws java.lang.Exception { try { libcore.util.TimeZoneFinderTest.validate(xml); fail(); } catch (java.io.IOException expected) { } },8c20fac75c4db816460039bc29dcca4bdce8729d,checkValidateThrowsParserException(java.lang.String),429154,58,55
246162,tools_signapk_src_com_android_signapk_SignApk.java,18.0,"private static void provideJarEntry(java.util.jar.JarFile jarFile, java.util.jar.JarEntry jarEntry, com.android.apksigner.core.ApkSignerEngine.InspectJarEntryRequest request, byte[] tmpbuf) throws java.io.IOException { com.android.apksigner.core.util.DataSink dataSink = request.getDataSink(); try (java.io.InputStream in = jarFile.getInputStream(jarEntry)) { int chunkSize; while ((chunkSize = in.read(tmpbuf)) > 0) { dataSink.consume(tmpbuf, 0, chunkSize); } request.done(); } }",10396388b5ee0b7a0e0f53c29f14e79bdac53206,"private static void provideJarEntry(java.util.jar.JarFile jarFile, java.util.jar.JarEntry jarEntry, com.android.apksig.core.ApkSignerEngine.InspectJarEntryRequest request, byte[] tmpbuf) throws java.io.IOException { com.android.apksig.core.util.DataSink dataSink = request.getDataSink(); try (java.io.InputStream in = jarFile.getInputStream(jarEntry)) { int chunkSize; while ((chunkSize = in.read(tmpbuf)) > 0) { dataSink.consume(tmpbuf, 0, chunkSize); } request.done(); } }",d0aec237314a99e2f18e4881e317f2b2aae40c16,"provideJarEntry(java.util.jar.JarFile,java.util.jar.JarEntry,com.android.apksigner.core.ApkSignerEngine$InspectJarEntryRequest,byte[])","provideJarEntry(java.util.jar.JarFile,java.util.jar.JarEntry,com.android.apksig.core.ApkSignerEngine$InspectJarEntryRequest,byte[])",2,24,"private static void provideJarEntry(java.util.jar.JarFile jarFile, java.util.jar.JarEntry jarEntry, com.android.apksig.ApkSignerEngine.InspectJarEntryRequest request, byte[] tmpbuf) throws java.io.IOException { com.android.apksig.util.DataSink dataSink = request.getDataSink(); try (java.io.InputStream in = jarFile.getInputStream(jarEntry)) { int chunkSize; while ((chunkSize = in.read(tmpbuf)) > 0) { dataSink.consume(tmpbuf, 0, chunkSize); } request.done(); } }",8ae8f0b6b6b3c867ac92c54ac9d0913ed15c5f98,"provideJarEntry(java.util.jar.JarFile,java.util.jar.JarEntry,com.android.apksig.ApkSignerEngine$InspectJarEntryRequest,byte[])",171627,133,129
352755,Common_src_com_googlecode_android_scripting_facade_wifi_WifiManagerFacade.java,36.0,"@com.googlecode.android_scripting.rpc.RpcDeprecated(""wifiConnectByConfig"") @com.googlecode.android_scripting.rpc.Rpc(description = ""Connects to the network with the given configuration"") public java.lang.Boolean wifiConnect(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""config"") org.json.JSONObject config) throws org.json.JSONException { try { wifiConnectByConfig(config); } catch (java.security.GeneralSecurityException e) { java.lang.String msg = ""Caught GeneralSecurityException with the provided"" + ""configuration""; throw new java.lang.RuntimeException(msg); } return true; }",291c43bde21fd0836fc47648aa28355bf883cdeb,"@java.lang.Deprecated public java.lang.Boolean wifiConnect(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""config"") org.json.JSONObject config) throws org.json.JSONException { try { wifiConnectByConfig(config); } catch (java.security.GeneralSecurityException e) { java.lang.String msg = ""Caught GeneralSecurityException with the provided"" + ""configuration""; throw new java.lang.RuntimeException(msg); } return true; }",c07177ee270c8e66a758b28fbe7389040d6c15c5,wifiConnect(org.json.JSONObject),wifiConnect(org.json.JSONObject),2,36,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Connects to the network with the given configuration"") @java.lang.Deprecated public java.lang.Boolean wifiConnect(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""config"") org.json.JSONObject config) throws org.json.JSONException { try { wifiConnectByConfig(config); } catch (java.security.GeneralSecurityException e) { java.lang.String msg = ""Caught GeneralSecurityException with the provided"" + ""configuration""; throw new java.lang.RuntimeException(msg); } return true; }",c76a44152634e11956ebb68bff2418c23d15a5bb,wifiConnect(org.json.JSONObject),103009,106,134
52373,androidtestlib_src_com_android_test_runner_AndroidJUnitRunner.java,14.0,"private void addCoverageListener(java.util.List<org.junit.runner.notification.RunListener> list, org.junit.runner.JUnitCore testRunner) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE)) { java.lang.String coverageFilePath = getArguments().getString(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE_PATH); addListener(list, testRunner, new com.android.test.runner.listener.CoverageListener(this, coverageFilePath)); } }",e1ae14ffa726b5bd909b41b0eb9d0078cfb97b5b,"private void addCoverageListener() { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE)) { java.lang.String coverageFilePath = getArguments().getString(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE_PATH); addListener(new com.android.test.runner.listener.CoverageListener(this, coverageFilePath)); } }",9a1cef7b3ef01fa9677fa9e98d1c8f3bd3735783,"addCoverageListener(java.util.List,org.junit.runner.JUnitCore)",addCoverageListener(),3,0,"private void addCoverageListener(java.util.List<org.junit.runner.notification.RunListener> list, org.junit.runner.JUnitCore testRunner) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE)) { java.lang.String coverageFilePath = getArguments().getString(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE_PATH); addListener(list, testRunner, new com.android.test.runner.listener.CoverageListener(this, coverageFilePath)); } }",e1ae14ffa726b5bd909b41b0eb9d0078cfb97b5b,"addCoverageListener(java.util.List,org.junit.runner.JUnitCore)",55872,88,122
241171,jack_src_com_android_jack_shrob_seed_SeedFinder.java,1.0,"private synchronized void markIfNecessary(@javax.annotation.Nonnull com.android.jack.ir.ast.JNode node, @javax.annotation.Nonnull com.android.jack.shrob.spec.KeepModifier modifier) { com.android.jack.shrob.seed.SeedMarker marker = node.getMarker(com.android.jack.shrob.seed.SeedMarker.class); if (marker == null) { node.addMarker(new com.android.jack.shrob.seed.SeedMarker(modifier)); } else { com.android.jack.shrob.spec.KeepModifier previousModifier = marker.getModifier(); if (previousModifier != modifier) { marker.setModifier(new com.android.jack.shrob.spec.KeepModifier()); } } }",d73d8a8ff05ead8b5bc3f52c50469965cc64ac08,"private void markIfNecessary(@javax.annotation.Nonnull com.android.jack.ir.ast.JNode node, @javax.annotation.Nonnull com.android.jack.shrob.spec.KeepModifier modifier) { com.android.jack.shrob.seed.SeedMarker marker = node.addMarkerIfAbsent(new com.android.jack.shrob.seed.SeedMarker(modifier)); if (marker != null) { if ((marker.getModifier()) != modifier) { node.addMarker(new com.android.jack.shrob.seed.SeedMarker(new com.android.jack.shrob.spec.KeepModifier())); } } }",f26f959b8014ec98ab55f1c48ab7138140984452,"markIfNecessary(com.android.jack.ir.ast.JNode,com.android.jack.shrob.spec.KeepModifier)","markIfNecessary(com.android.jack.ir.ast.JNode,com.android.jack.shrob.spec.KeepModifier)",3,1,"private void markIfNecessary(@javax.annotation.Nonnull com.android.jack.ir.ast.JNode node, @javax.annotation.Nonnull com.android.jack.shrob.spec.KeepModifier modifier) { com.android.jack.shrob.seed.SeedMarker marker = node.addMarkerIfAbsent(new com.android.jack.shrob.seed.SeedMarker(modifier)); if (marker != null) { marker.mergeModifier(modifier); } }",51ef5b1bc75474c8d6975dd6919c3ab7b7012afc,"markIfNecessary(com.android.jack.ir.ast.JNode,com.android.jack.shrob.spec.KeepModifier)",444600,144,102
551599,src_com_android_phone_CarrierConfigLoader.java,15.0,"@java.lang.Override @android.annotation.NonNull public android.os.PersistableBundle getConfigForSubId(int subId) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); android.os.PersistableBundle retConfig = android.telephony.CarrierConfigManager.getDefaultConfig(); if (android.telephony.SubscriptionManager.isValidPhoneId(phoneId)) { android.os.PersistableBundle config = mConfigFromDefaultApp[phoneId]; if (config != null) retConfig.putAll(config); config = mConfigFromCarrierApp[phoneId]; if (config != null) retConfig.putAll(config); } return retConfig; }",02a0737357200cb69b122fa62ae6c5b9e91cb53a,"@java.lang.Override @android.annotation.NonNull public android.os.PersistableBundle getConfigForSubId(int subId) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); android.os.PersistableBundle retConfig = android.telephony.CarrierConfigManager.getDefaultConfig(); if (android.telephony.SubscriptionManager.isValidPhoneId(phoneId)) { android.os.PersistableBundle config = mConfigFromDefaultApp[phoneId]; if (config != null) { retConfig.putAll(config); retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_OVERRIDE_BOOL, true); } config = mConfigFromCarrierApp[phoneId]; if (config != null) { retConfig.putAll(config); retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_OVERRIDE_BOOL, true); } } return retConfig; }",d7c298e436f84bb3b7e69d819502ce0f6e82be30,getConfigForSubId(int),getConfigForSubId(int),6,20,"@java.lang.Override @android.annotation.NonNull public android.os.PersistableBundle getConfigForSubId(int subId) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); android.os.PersistableBundle retConfig = android.telephony.CarrierConfigManager.getDefaultConfig(); if (android.telephony.SubscriptionManager.isValidPhoneId(phoneId)) { android.os.PersistableBundle config = mConfigFromDefaultApp[phoneId]; if (config != null) { retConfig.putAll(config); retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_APPLIED_BOOL, true); } config = mConfigFromCarrierApp[phoneId]; if (config != null) { retConfig.putAll(config); retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_APPLIED_BOOL, true); } } return retConfig; }",31430ec0ea83477e302a0662a34b03a0c5348f9a,getConfigForSubId(int),121438,258,262
21795,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_AddonSitesDialog.java,,,,private void loadList() { final com.android.sdklib.internal.repository.SdkSource[] knownSources = mUpdaterData.getSources().getSources(SdkSourceCategory.USER_ADDONS); mListViewer.setInput(knownSources); mListViewer.refresh(); },c7d787ef67623d46738aaa86e76fd23aa9bc1319,,loadList(),4,5,"private void loadList() { if ((mUpdaterData) != null) { com.android.sdklib.internal.repository.SdkSource[] knownSources = mUpdaterData.getSources().getSources(SdkSourceCategory.USER_ADDONS); java.util.Arrays.sort(knownSources); org.eclipse.jface.viewers.ISelection oldSelection = mTableViewer.getSelection(); mTableViewer.setInput(knownSources); mTableViewer.refresh(); on_TableViewer_selectionChanged(null); if ((oldSelection != null) && (!(oldSelection.isEmpty()))) { mTableViewer.setSelection(oldSelection, true); } } }",7ca171e1e5c3c9b9ef67cd8ac1fd9464579ca1a7,loadList(),244696,60,141
132350,build-system_builder_src_main_java_com_android_builder_profile_ThreadRecorder.java,3.0,public static com.android.builder.profile.Recorder get() { return com.android.builder.profile.ThreadRecorder.recorder.get(); },9cca27c0170ba824dbaa2b17e8d7fae04ea8ed5f,public static com.android.builder.profile.Recorder get() { return com.android.builder.profile.ProcessRecorderFactory.isEnabled() ? com.android.builder.profile.ThreadRecorder.recorder.get() : com.android.builder.profile.ThreadRecorder.dummyRecorder; },94e7f6192c606b5a2a3029e68cb2dfd20c589cdb,get(),get(),6,3,public static com.android.builder.profile.Recorder get() { return com.android.builder.profile.ProcessRecorderFactory.isEnabled() ? com.android.builder.profile.ThreadRecorder.recorder : com.android.builder.profile.ThreadRecorder.dummyRecorder; },308afdc380559829a58ec04dc7d81c87ffc29e75,get(),2797,63,60
604366,tests_src_com_android_services_telephony_TestTelephonyConnection.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvent = event; }",807656d937f402581cb61e00b321d3411c60352a,,"sendConnectionEvent(java.lang.String,android.os.Bundle)",4,8,"@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvents.add(event); mLastConnectionEventExtras.add(extras); }",33740b4e612a7db46979e489b97944ea3b77a018,"sendConnectionEvent(java.lang.String,android.os.Bundle)",111374,35,48
584550,src_main_java_com_android_apksig_internal_apk_SigningBlockScheme_ApkSigningBlockUtils.java,,,,"public static com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo findSignature(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int blockId, com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result result) throws com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException { com.android.apksig.util.DataSource apkSigningBlock; long apkSigningBlockOffset; try { com.android.apksig.apk.ApkUtils.ApkSigningBlock apkSigningBlockInfo = com.android.apksig.apk.ApkUtils.findApkSigningBlock(apk, zipSections); apkSigningBlockOffset = apkSigningBlockInfo.getStartOffset(); apkSigningBlock = apkSigningBlockInfo.getContents(); } catch (com.android.apksig.apk.ApkSigningBlockNotFoundException e) { throw new com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignatureNotFoundException(e.getMessage(), e); } java.nio.ByteBuffer apkSigningBlockBuf = apkSigningBlock.getByteBuffer(0, ((int) (apkSigningBlock.size()))); apkSigningBlockBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); java.nio.ByteBuffer apkSignatureSchemeBlock = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.findApkSignatureSchemeBlock(apkSigningBlockBuf, blockId, result); return new com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo(apkSignatureSchemeBlock, apkSigningBlockOffset, zipSections.getZipCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectory()); }",d02adab95f54877d2f8e24b685b5181122114aee,,"findSignature(com.android.apksig.util.DataSource,com.android.apksig.apk.ApkUtils$ZipSections,int,com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils$Result)",4,34,"public static com.android.apksig.internal.apk.SignatureInfo findSignature(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int blockId, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException { com.android.apksig.util.DataSource apkSigningBlock; long apkSigningBlockOffset; try { com.android.apksig.apk.ApkUtils.ApkSigningBlock apkSigningBlockInfo = com.android.apksig.apk.ApkUtils.findApkSigningBlock(apk, zipSections); apkSigningBlockOffset = apkSigningBlockInfo.getStartOffset(); apkSigningBlock = apkSigningBlockInfo.getContents(); } catch (com.android.apksig.apk.ApkSigningBlockNotFoundException e) { throw new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException(e.getMessage(), e); } java.nio.ByteBuffer apkSigningBlockBuf = apkSigningBlock.getByteBuffer(0, ((int) (apkSigningBlock.size()))); apkSigningBlockBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); java.nio.ByteBuffer apkSignatureSchemeBlock = com.android.apksig.internal.apk.ApkSigningBlockUtils.findApkSignatureSchemeBlock(apkSigningBlockBuf, blockId, result); return new com.android.apksig.internal.apk.SignatureInfo(apkSignatureSchemeBlock, apkSigningBlockOffset, zipSections.getZipCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectory()); }",0d4b7f2e43eba6aa08ccdd4820f9d1a4fa96b5eb,"findSignature(com.android.apksig.util.DataSource,com.android.apksig.apk.ApkUtils$ZipSections,int,com.android.apksig.internal.apk.ApkSigningBlockUtils$Result)",4641,401,377
244263,sched_src_com_android_sched_vfs_DirectFS.java,11.0,@java.lang.Override public long getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) { return getNativeFile(file.getPath()).lastModified(); },b2318a681365a98b0051cf3bca86984bc6aa3df9,"@java.lang.Override public long getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) throws com.android.sched.util.file.CannotReadException { try { return java.nio.file.Files.getLastModifiedTime(getNativeFile(file.getPath()).toPath()).toMillis(); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(this, e); } }",1792f692a7a14f88f2c3ad6a0514fc0e371d3920,getLastModified(com.android.sched.vfs.ParentVFile),getLastModified(com.android.sched.vfs.ParentVFile),3,11,"@java.lang.Override @javax.annotation.Nonnull public java.nio.file.attribute.FileTime getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) throws com.android.sched.util.file.CannotGetModificationTimeException { try { return java.nio.file.Files.getLastModifiedTime(getNativeFile(file.getPath()).toPath()); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotGetModificationTimeException(this, e); } }",e5d080b413ae546462beeb07ab5305f975313bc0,getLastModified(com.android.sched.vfs.ParentVFile),403121,104,120
354498,services_core_java_com_android_server_connectivity_Tethering.java,52.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private int tether(java.lang.String iface, com.android.server.connectivity.Tethering.Mode mode) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, (""Tethering "" + iface)); synchronized(mPublicSync) { com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if (tetherState == null) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, ((""Tried to Tether an unknown iface: "" + iface) + "", ignoring"")); return android.net.ConnectivityManager.TETHER_ERROR_UNKNOWN_IFACE; } if ((tetherState.lastState) != (com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE)) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, ((""Tried to Tether an unavailable iface: "" + iface) + "", ignoring"")); return android.net.ConnectivityManager.TETHER_ERROR_UNAVAIL_IFACE; } tetherState.stateMachine.sendMessage(TetherInterfaceStateMachine.CMD_TETHER_REQUESTED, mode); return android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; } }",86651a6cbdc1b43ee73d4ec27afd17c2c0202008,,"tether(java.lang.String,com.android.server.connectivity.Tethering$Mode)",14,21,"private int tether(java.lang.String iface, int requestedState) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, (""Tethering "" + iface)); synchronized(mPublicSync) { com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if (tetherState == null) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, ((""Tried to Tether an unknown iface: "" + iface) + "", ignoring"")); return android.net.ConnectivityManager.TETHER_ERROR_UNKNOWN_IFACE; } if ((tetherState.lastState) != (com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE)) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, ((""Tried to Tether an unavailable iface: "" + iface) + "", ignoring"")); return android.net.ConnectivityManager.TETHER_ERROR_UNAVAIL_IFACE; } tetherState.stateMachine.sendMessage(TetherInterfaceStateMachine.CMD_TETHER_REQUESTED, requestedState); return android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; } }",0ff1e07b114f3ca3675fc155a0e7681662295fc8,"tether(java.lang.String,int)",125040,337,326
233353,test_vogar_target_junit4_TestRunnerJUnit4Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.LongTest.class, timeout = 1) @org.junit.Test public void testRunner_LongTest_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure(""test"", ""java.util.concurrent.TimeoutException\n"").aborted(); }",b2e72c393ed1cabf321f20248ccfda45aad26668,,testRunner_LongTest_WithTimeout(),3,13,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.LongTest.class, timeout = 1) @org.junit.Test public void testRunner_LongTest_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure(""test"", ""java.util.concurrent.TimeoutException\n"").aborted(); }",8e4b57013dd613db6599bd2497f7672dce622007,testRunner_LongTest_WithTimeout(),130812,96,95
598075,hostsidetests_jvmti_attaching_host_src_android_jvmti_cts_JvmtiAttachingHostTest.java,0.0,"private void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = (((""cmd activity start -S -W "" + agentParams) + "" -n "") + pkg) + ""/android.jvmti.JvmtiActivity""; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply != null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }",96a86109f8341d2b03e1051a2a0b0b93b54cc2d9,"private static void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = (((""cmd activity start -S -W "" + agentParams) + "" -n "") + pkg) + ""/android.jvmti.JvmtiActivity""; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply != null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }",b6b8e568b1ebcb0ca421d8bb97dde84fed2f3d61,"runAttachTestCmd(com.android.tradefed.device.ITestDevice,java.lang.String,java.lang.String)","runAttachTestCmd(com.android.tradefed.device.ITestDevice,java.lang.String,java.lang.String)",2,0,"private static void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = (((""cmd activity start -S -W "" + agentParams) + "" -n "") + pkg) + ""/android.jvmti.JvmtiActivity""; device.executeShellCommand(attachCmd, com.android.ddmlib.NullOutputReceiver.getReceiver(), 10, java.util.concurrent.TimeUnit.SECONDS, 1); }",bd186e75f62d4871f132bd18297d6c081afbbc97,"runAttachTestCmd(com.android.tradefed.device.ITestDevice,java.lang.String,java.lang.String)",444614,148,127
286959,services_tests_servicestests_src_com_android_server_connectivity_TetheringTest.java,,,,@org.junit.Test public void provisioningNotRequiredWhenCarrierConfigMissing() { setupForRequiredProvisioning(); when(mCarrierConfigManager.getConfig()).thenReturn(null); verify((!(mTethering.isTetherProvisioningRequired()))); },ee3b547b0cccc5f04a2d66070a70279cacdc93e8,,provisioningNotRequiredWhenCarrierConfigMissing(),6,3,@org.junit.Test public void toleratesCarrierConfigMissing() { setupForRequiredProvisioning(); when(mCarrierConfigManager.getConfig()).thenReturn(null); assertTrue(mTethering.isTetherProvisioningRequired()); },b89bd3a0e648f3f1fc76b8330a9da5e684c71eaa,toleratesCarrierConfigMissing(),288288,53,48
208006,test_004-checker-UnsafeTest18_src_Main.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void run() { while (!(guard1.get())); Main.full(); Main.expectEquals64((-123456789L), m.l); }",4c6f37f00a89b2c5ffbc1cc85015a7d7f762e303,,run(),5,12,"public void run() { while (!(guard1.get())); Main.full(); Main.expectEqual64((-123456789L), m.l); }",50a4a9bb6b3860cd380db8aef6e9de8ef15f0293,run(),494861,30,30
432981,luni_src_test_java_libcore_java_util_zip_ZipEntryTest.java,0.0,"public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, ""z""); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, ""a"").getBytes(); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry(""y""); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); try { assertEquals(comment, zipFile.getEntry(""x"").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry(""x"").getExtra())); assertEquals(comment, zipFile.getEntry(""y"").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry(""y"").getExtra())); } finally { zipFile.close(); } }",195a633241b91515bff88ad9605ad4e4696e9fe2,"public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, ""z""); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, ""a"").getBytes(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(mFile); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry(""y""); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); try { assertEquals(comment, zipFile.getEntry(""x"").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry(""x"").getExtra())); assertEquals(comment, zipFile.getEntry(""y"").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry(""y"").getExtra())); } finally { zipFile.close(); } }",cd700082140b7f8bcacf25efcb2b47cc345ad7c8,testCommentAndExtraInSameOrder(),testCommentAndExtraInSameOrder(),3,0,"public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, ""z""); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, ""a"").getBytes(); java.io.File f = createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry(""y""); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); try { assertEquals(comment, zipFile.getEntry(""x"").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry(""x"").getExtra())); assertEquals(comment, zipFile.getEntry(""y"").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry(""y"").getExtra())); } finally { zipFile.close(); } }",a64d78c0fdde28c091254a0535be297be4be3344,testCommentAndExtraInSameOrder(),443141,344,354
69542,luni_src_main_java_java_util_jar_JarFile.java,1.0,"public java.util.jar.Manifest getManifest() throws java.io.IOException { if (closed) { throw new java.lang.IllegalStateException(""JarFile has been closed""); } if ((manifest) != null) { return manifest; } try { java.io.InputStream is = super.getInputStream(manifestEntry); if ((verifier) != null) { verifier.addMetaEntry(manifestEntry.getName(), libcore.io.Streams.readFully(is)); is = super.getInputStream(manifestEntry); } try { manifest = new java.util.jar.Manifest(is, ((verifier) != null)); } finally { is.close(); } manifestEntry = null; } catch (java.lang.NullPointerException e) { manifestEntry = null; } return manifest; }",b8e8018a96d57ed3dd24f645024290296a3ba5cd,"public java.util.jar.Manifest getManifest() throws java.io.IOException { if (closed) { throw new java.lang.IllegalStateException(""JarFile has been closed""); } if ((manifest) != null) { return manifest; } if ((manifestBytes) == null) { return null; } manifest = new java.util.jar.Manifest(manifestBytes, ((verifier) != null)); manifestBytes = null; return manifest; }",2db8d3cf0f8687a1f18f195e5046716506e0beb6,getManifest(),getManifest(),8,1,"public java.util.jar.Manifest getManifest() throws java.io.IOException { if (closed) { throw new java.lang.IllegalStateException(""JarFile has been closed""); } if ((manifest) != null) { return manifest; } if ((manifestBytes) == null) { return null; } manifest = new java.util.jar.Manifest(manifestBytes, false); manifestBytes = null; return manifest; }",053de1dbfd3329c755ba7151d63fca5ee8013358,getManifest(),525573,95,90
568922,src_com_android_bluetooth_pbap_BluetoothPbapService.java,33.0,"@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""start()""); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); if ((mContactChangeObserver) == null) { registerReceiver(mPbapReceiver, filter); try { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Registering observer""); } mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""SQLite exception: "" + e)); } catch (java.lang.IllegalStateException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Illegal state exception, content observer is already registered""); } } return true; }",8c4699ed865573e547910475f0dc40dae40777d6,"@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""start()""); mSessionStatusHandler = new com.android.bluetooth.pbap.BluetoothPbapService.PbapHandler(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); if ((mContactChangeObserver) == null) { registerReceiver(mPbapReceiver, filter); try { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Registering observer""); } mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""SQLite exception: "" + e)); } catch (java.lang.IllegalStateException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Illegal state exception, content observer is already registered""); } } return true; }",2e003f80f18a9a5bbe05aec03148bb5486b95b02,start(),start(),15,34,"@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""start()""); mState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; mContext = this; mSessionStatusHandler = new com.android.bluetooth.pbap.BluetoothPbapService.PbapHandler(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); registerReceiver(mPbapReceiver, filter); try { mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""SQLite exception: "" + e)); } catch (java.lang.IllegalStateException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""Illegal state exception, content observer is already registered""); } return true; }",0c996b4c2cf1e6a0eb4f4bbfc44a21c49abd4d6a,start(),25812,455,411
153181,test_422-type-conversion_src_Main.java,66.0,static long $opt$DoubleToLong(double a) { if (Main.doThrow) throw new java.lang.Error(); return ((long) (a)); },07b17dada03f8d51627d5b7e7079397e8584651e,static long $opt$noinline$DoubleToLong(double a) { return ((long) (a)); },89ac45d5d6a5981d9663597a4fb37f0315b43013,$opt$DoubleToLong(double),$opt$noinline$DoubleToLong(double),5,44,static long $opt$noinline$DoubleToLong(double a) { if (Main.doThrow) throw new java.lang.Error(); return ((long) (a)); },f814ef036e9d9c10d73b3a145516645f4b2ab21f,$opt$noinline$DoubleToLong(double),516520,25,39
108211,build-system_manifest-merger_src_main_java_com_android_manifmerger_ManifestMerger2.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void performPlaceHolderSubstitution(com.android.manifmerger.ManifestMerger2.ManifestInfo manifestInfo, com.android.manifmerger.XmlDocument xmlDocument, com.android.manifmerger.MergingReport.Builder mergingReportBuilder) { java.util.Map<java.lang.String, java.lang.String> finalPlaceHolderValues = mPlaceHolderValues; if (!(mPlaceHolderValues.containsKey(""applicationId""))) { java.lang.String packageName = (manifestInfo.getMainManifestPackageName().isPresent()) ? manifestInfo.getMainManifestPackageName().get() : xmlDocument.getPackageName(); finalPlaceHolderValues = com.google.common.collect.ImmutableMap.<java.lang.String, java.lang.String>builder().putAll(mPlaceHolderValues).put(""packageName"", packageName).put(""applicationId"", packageName).build(); } com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<java.lang.String> placeHolderValueResolver = new com.android.manifmerger.ManifestMerger2.MapBasedKeyBasedValueResolver<java.lang.String>(finalPlaceHolderValues); com.android.manifmerger.PlaceholderHandler placeholderHandler = new com.android.manifmerger.PlaceholderHandler(); placeholderHandler.visit(mMergeType, xmlDocument, placeHolderValueResolver, mergingReportBuilder); }",67d074b7f9f77882339b94d5c24e401d64cb5ee9,,"performPlaceHolderSubstitution(com.android.manifmerger.ManifestMerger2$ManifestInfo,com.android.manifmerger.XmlDocument,com.android.manifmerger.MergingReport$Builder)",2,28,"private void performPlaceHolderSubstitution(com.android.manifmerger.ManifestMerger2.ManifestInfo manifestInfo, com.android.manifmerger.XmlDocument xmlDocument, com.android.manifmerger.MergingReport.Builder mergingReportBuilder) { java.util.Map<java.lang.String, java.lang.String> finalPlaceHolderValues = mPlaceHolderValues; if (!(mPlaceHolderValues.containsKey(""applicationId""))) { java.lang.String packageName = (manifestInfo.getMainManifestPackageName().isPresent()) ? manifestInfo.getMainManifestPackageName().get() : xmlDocument.getPackageName(); finalPlaceHolderValues = com.google.common.collect.ImmutableMap.<java.lang.String, java.lang.String>builder().putAll(mPlaceHolderValues).put(PlaceholderHandler.PACKAGE_NAME, packageName).put(PlaceholderHandler.APPLICATION_ID, packageName).build(); } com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<java.lang.String> placeHolderValueResolver = new com.android.manifmerger.ManifestMerger2.MapBasedKeyBasedValueResolver<java.lang.String>(finalPlaceHolderValues); com.android.manifmerger.PlaceholderHandler placeholderHandler = new com.android.manifmerger.PlaceholderHandler(); placeholderHandler.visit(mMergeType, xmlDocument, placeHolderValueResolver, mergingReportBuilder); }",5e4fd1f2248ffae9c0e6de85480a11853acd6577,"performPlaceHolderSubstitution(com.android.manifmerger.ManifestMerger2$ManifestInfo,com.android.manifmerger.XmlDocument,com.android.manifmerger.MergingReport$Builder)",267827,286,295
106646,hierarchyviewer2_hierarchyviewer2lib_src_main_java_com_android_hierarchyviewerlib_models_DumpThemeModel.java,,,,"public void add(java.lang.String name, java.lang.String value) { data.add(new com.android.hierarchyviewerlib.models.DumpThemeModel.DumpThemeModelData(name, value)); }",67460337dc45d94301e717c4151a333b53706944,,"add(java.lang.String,java.lang.String)",7,3,"public void add(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull java.lang.String value) { data.add(new com.android.hierarchyviewerlib.models.ThemeModel.ThemeModelData(name, value)); }",5d6e9d80dc9497c34ac87582194e27d782c9ece1,"add(java.lang.String,java.lang.String)",306294,48,61
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,79.0,"@org.junit.Test public void long_to_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LONG_TO_INT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",80f93a2cf4e5f5f8403d4d486467ca0465001391,"@org.junit.Test public void long_to_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LONG_TO_INT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",f52b8fdbdef425ef28c5265e7af8726bdc529d75,long_to_int(),long_to_int(),4,79,"@org.junit.Test public void long_to_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LONG_TO_INT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",104238b524ef37bb277ebbf51fbcb753eb8306e8,long_to_int(),418895,113,111
162651,ddmlib_src_main_java_com_android_ddmlib_IDevice.java,2.0,"com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",5bd4b0eb4a889c7b38ac784626f47443e8eae371,"com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException;",bc0e78e79cd67e0ffd0e463472085853d5d99c34,getSyncService(),getSyncService(),4,2,"com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",5bd4b0eb4a889c7b38ac784626f47443e8eae371,getSyncService(),352900,52,45
316743,jack_src_com_android_jack_ir_impl_ReferenceMapper.java,11.0,"private void createParameters(@javax.annotation.CheckForNull org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[] sab, @javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull java.util.Set<java.lang.String> alreadyNamedVariables) { if (sab != null) { for (int i = 0; i < (sab.length); ++i) { org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding arg = sab[i]; java.lang.String argName = java.lang.String.valueOf(arg.name); if (alreadyNamedVariables.contains(argName)) { argName += ""_"" + i; } createParameter(info, method, argName, arg.type, getModifier(arg)); alreadyNamedVariables.add(argName); } } }",4788466d62f2910381be67c89602d11d59f6d7d4,"private void createParameters(@javax.annotation.CheckForNull org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[] sab, @javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull java.util.Set<java.lang.String> alreadyNamedVariables, boolean forceToImplicit) { if (sab != null) { for (int i = 0; i < (sab.length); ++i) { org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding arg = sab[i]; java.lang.String argName = java.lang.String.valueOf(arg.name); if (alreadyNamedVariables.contains(argName)) { argName += ""_"" + i; } createParameter(info, method, argName, arg.type, ((getFinalModifier(arg)) | (forceToImplicit ? com.android.jack.ir.ast.JModifier.IMPLICIT : com.android.jack.ir.ast.JModifier.SYNTHETIC))); alreadyNamedVariables.add(argName); } } }",571f8c53122750d2d42b15a903be0be7c25fff3f,"createParameters(org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[],com.android.jack.ir.sourceinfo.SourceInfo,com.android.jack.ir.ast.JMethod,java.util.Set)","createParameters(org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[],com.android.jack.ir.sourceinfo.SourceInfo,com.android.jack.ir.ast.JMethod,java.util.Set,boolean)",16,6,"private void createParameters(@javax.annotation.CheckForNull org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[] sab, @javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull java.util.Set<java.lang.String> alreadyNamedVariables, boolean forceToImplicit) { if (sab != null) { for (int i = 0; i < (sab.length); ++i) { org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding arg = sab[i]; java.lang.String argName = java.lang.String.valueOf(arg.name); if (alreadyNamedVariables.contains(argName)) { argName += ""_"" + i; } createParameter(info, method, argName, arg.type, (((getFinalModifier(arg)) | (forceToImplicit ? com.android.jack.ir.ast.JModifier.IMPLICIT : com.android.jack.ir.ast.JModifier.SYNTHETIC)) | (com.android.jack.ir.ast.JModifier.NAME_PRESENT))); alreadyNamedVariables.add(argName); } } }",67e703fd62a5844df7a6bae073c776feb09ccca1,"createParameters(org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[],com.android.jack.ir.sourceinfo.SourceInfo,com.android.jack.ir.ast.JMethod,java.util.Set,boolean)",48737,264,282
295668,harmony-tests_src_test_java_org_apache_harmony_tests_java_util_zip_Adler32Test.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_update$ByteBuffer() { java.nio.ByteBuffer byteBuffer = java.nio.ByteBuffer.allocate(3); byteBuffer.put(((byte) (1))).put(((byte) (2))).put(((byte) (3))); byteBuffer.flip(); java.util.zip.Adler32 adl = new java.util.zip.Adler32(); byteBuffer.position(2); adl.update(byteBuffer); assertEquals(""update(ByteBuffer) failed to update the checksum to the correct value "", 262148, adl.getValue()); assertEquals(3, byteBuffer.position()); adl.reset(); java.nio.ByteBuffer directByteBuffer = java.nio.ByteBuffer.allocateDirect(3); directByteBuffer.put(((byte) (1))).put(((byte) (2))).put(((byte) (3))); directByteBuffer.flip(); directByteBuffer.position(2); adl.update(directByteBuffer); assertEquals(""update(ByteBuffer) failed to update the checksum to the correct value "", 262148, adl.getValue()); assertEquals(3, directByteBuffer.position()); }",09810d44e9e72062a2e2a6dd98eaaff01ce65578,,test_update$ByteBuffer(),4,2,"public void test_update$ByteBuffer() { java.nio.ByteBuffer byteBuffer = java.nio.ByteBuffer.wrap(new byte[]{ 1, 2, 3, 4 }); byteBuffer.position(2); assertChecksumFromByteBuffer(786440, byteBuffer); byteBuffer.flip(); byteBuffer = java.nio.ByteBuffer.allocateDirect(4).put(byteBuffer); byteBuffer.flip(); byteBuffer.position(2); assertChecksumFromByteBuffer(786440, byteBuffer); java.util.zip.Adler32 checksum = new java.util.zip.Adler32(); try { checksum.update(((java.nio.ByteBuffer) (null))); fail(); } catch (java.lang.NullPointerException expected) { } }",a02986dbe40281fe5eec1875f8bf193e9e01e897,test_update$ByteBuffer(),3971,214,138
152245,luni_src_test_java_libcore_java_lang_OldSystemTest.java,5.0,"public void test_gc() { java.lang.Runtime rt = java.lang.Runtime.getRuntime(); java.util.Vector<java.lang.StringBuffer> vec = new java.util.Vector<java.lang.StringBuffer>(); long beforeTest = rt.freeMemory(); while ((rt.freeMemory()) < ((beforeTest * 2) / 3)) { vec.add(new java.lang.StringBuffer(1000)); } long beforeGC = rt.freeMemory(); java.lang.System.gc(); long afterGC = rt.freeMemory(); assertTrue(((((""memory was not released after calling System.gc()."" + ""before gc: "") + beforeGC) + ""; after gc: "") + afterGC), (beforeGC < afterGC)); }",d67a9cbeb1b3a73c93a67195df337111f378b09d,"public void test_gc() { java.lang.Runtime rt = java.lang.Runtime.getRuntime(); java.util.Vector<java.lang.StringBuffer> vec = new java.util.Vector<java.lang.StringBuffer>(); long beforeTest = rt.freeMemory(); while ((rt.freeMemory()) < ((beforeTest * 2) / 3)) { vec.add(new java.lang.StringBuffer(1000)); } vec = null; long beforeGC = (rt.totalMemory()) - (rt.freeMemory()); rt.gc(); long afterGC = (rt.totalMemory()) - (rt.freeMemory()); assertTrue(((((""memory was not released after calling System.gc()."" + ""before gc: "") + beforeGC) + ""; after gc: "") + afterGC), (beforeGC >= afterGC)); }",99ae2eb9d7d2b734c2210b8a8cfaa930a1db622d,test_gc(),test_gc(),2,5,"public void test_gc() { java.lang.Runtime rt = java.lang.Runtime.getRuntime(); java.util.Vector<java.lang.StringBuffer> vec = new java.util.Vector<java.lang.StringBuffer>(); long beforeTest = rt.freeMemory(); while ((rt.freeMemory()) < ((beforeTest * 2) / 3)) { vec.add(new java.lang.StringBuffer(1000)); } long beforeGC = (rt.totalMemory()) - (rt.freeMemory()); vec = null; java.lang.System.gc(); java.lang.System.runFinalization(); long afterGC = (rt.totalMemory()) - (rt.freeMemory()); assertTrue(((((""memory was not released after calling System.gc()."" + ""before gc: "") + beforeGC) + ""; after gc: "") + afterGC), (beforeGC >= afterGC)); }",f8d48a5cce7f6066e149a668e55ac41bb151b614,test_gc(),118488,173,187
22026,tests_tests_hardware_src_android_hardware_cts_CameraTest.java,33.0,"private void testPreviewPictureSizesCombinationByCamera(int cameraId) throws java.lang.Exception { initializeMessageLooper(cameraId); mCamera.setPreviewDisplay(getActivity().getSurfaceView().getHolder()); android.hardware.Camera.Parameters parameters = mCamera.getParameters(); android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination callback = new android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination(); for (android.hardware.Camera.Size previewSize : parameters.getSupportedPreviewSizes()) { for (android.hardware.Camera.Size pictureSize : parameters.getSupportedPictureSizes()) { android.util.Log.v(TAG, ((((((((""Test previewSize=("" + (previewSize.width)) + "","") + (previewSize.height)) + "") pictureSize=("") + (pictureSize.width)) + "","") + (pictureSize.height)) + "")"")); mPreviewCallbackResult = false; mCamera.setPreviewCallback(callback); callback.expectedPreviewSize = previewSize; parameters.setPreviewSize(previewSize.width, previewSize.height); parameters.setPictureSize(pictureSize.width, pictureSize.height); mCamera.setParameters(parameters); assertEquals(previewSize, mCamera.getParameters().getPreviewSize()); assertEquals(pictureSize, mCamera.getParameters().getPictureSize()); mCamera.startPreview(); waitForPreviewDone(); assertTrue(mPreviewCallbackResult); mCamera.takePicture(mShutterCallback, mRawPictureCallback, mJpegPictureCallback); waitForSnapshotDone(); assertTrue(mJpegPictureCallbackResult); assertNotNull(mJpegData); android.graphics.Bitmap b = android.graphics.BitmapFactory.decodeByteArray(mJpegData, 0, mJpegData.length); assertEquals(pictureSize.width, b.getWidth()); assertEquals(pictureSize.height, b.getHeight()); b.recycle(); b = null; } } terminateMessageLooper(); }",e88f0cd33042e9693387288fab21fc2e74c3552e,"private void testPreviewPictureSizesCombinationByCamera(int cameraId) throws java.lang.Exception { initializeMessageLooper(cameraId); mCamera.setPreviewDisplay(getActivity().getSurfaceView().getHolder()); android.hardware.Camera.Parameters parameters = mCamera.getParameters(); android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination callback = new android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination(); for (android.hardware.Camera.Size previewSize : parameters.getSupportedPreviewSizes()) { for (android.hardware.Camera.Size pictureSize : parameters.getSupportedPictureSizes()) { android.util.Log.v(TAG, ((((((((""Test previewSize=("" + (previewSize.width)) + "","") + (previewSize.height)) + "") pictureSize=("") + (pictureSize.width)) + "","") + (pictureSize.height)) + "")"")); mPreviewCallbackResult = false; mCamera.setPreviewCallback(callback); callback.expectedPreviewSize = previewSize; parameters.setPreviewSize(previewSize.width, previewSize.height); parameters.setPictureSize(pictureSize.width, pictureSize.height); mCamera.setParameters(parameters); assertEquals(previewSize, mCamera.getParameters().getPreviewSize()); assertEquals(pictureSize, mCamera.getParameters().getPictureSize()); mCamera.startPreview(); waitForPreviewDone(); assertTrue(mPreviewCallbackResult); mCamera.takePicture(mShutterCallback, mRawPictureCallback, mJpegPictureCallback); waitForSnapshotDone(); assertTrue(mJpegPictureCallbackResult); assertNotNull(mJpegData); try { android.graphics.Bitmap b = android.graphics.BitmapFactory.decodeByteArray(mJpegData, 0, mJpegData.length); assertEquals(pictureSize.width, b.getWidth()); assertEquals(pictureSize.height, b.getHeight()); b.recycle(); b = null; } catch (java.lang.OutOfMemoryError e) { android.util.Log.d(TAG, ""Bitmap size exceeds VM stack size""); } } } terminateMessageLooper(); }",59b645a0efcb56fe6f5739a1914339d01391b5aa,testPreviewPictureSizesCombinationByCamera(int),testPreviewPictureSizesCombinationByCamera(int),4,33,"private void testPreviewPictureSizesCombinationByCamera(int cameraId) throws java.lang.Exception { initializeMessageLooper(cameraId); mCamera.setPreviewDisplay(getActivity().getSurfaceView().getHolder()); android.hardware.Camera.Parameters parameters = mCamera.getParameters(); android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination callback = new android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination(); for (android.hardware.Camera.Size previewSize : parameters.getSupportedPreviewSizes()) { for (android.hardware.Camera.Size pictureSize : parameters.getSupportedPictureSizes()) { android.util.Log.v(TAG, ((((((((""Test previewSize=("" + (previewSize.width)) + "","") + (previewSize.height)) + "") pictureSize=("") + (pictureSize.width)) + "","") + (pictureSize.height)) + "")"")); mPreviewCallbackResult = false; mCamera.setPreviewCallback(callback); callback.expectedPreviewSize = previewSize; parameters.setPreviewSize(previewSize.width, previewSize.height); parameters.setPictureSize(pictureSize.width, pictureSize.height); mCamera.setParameters(parameters); assertEquals(previewSize, mCamera.getParameters().getPreviewSize()); assertEquals(pictureSize, mCamera.getParameters().getPictureSize()); mCamera.startPreview(); waitForPreviewDone(); assertTrue(mPreviewCallbackResult); mCamera.takePicture(mShutterCallback, mRawPictureCallback, mJpegPictureCallback); waitForSnapshotDone(); assertTrue(mJpegPictureCallbackResult); assertNotNull(mJpegData); android.graphics.BitmapFactory.Options bmpOptions = new android.graphics.BitmapFactory.Options(); bmpOptions.inJustDecodeBounds = true; android.graphics.BitmapFactory.decodeByteArray(mJpegData, 0, mJpegData.length, bmpOptions); assertEquals(pictureSize.width, bmpOptions.outWidth); assertEquals(pictureSize.height, bmpOptions.outHeight); } } terminateMessageLooper(); }",dac7b5fa58b61fd66226da66814c450c2399f5e8,testPreviewPictureSizesCombinationByCamera(int),289243,448,442
19238,layoutlib_api_src_com_android_layoutlib_api_IImageFactory.java,,,,"java.awt.image.BufferedImage getImage(int w, int h);",5b8af72b550118150c42d03d6f2cbc2d8d1d3ea6,,"getImage(int,int)",5,0,"java.awt.image.BufferedImage getImage(int width, int height);",a8d3a63a865f281f24b480c4fbb0aa7ee7bdc69f,"getImage(int,int)",166685,15,15
319807,src_com_android_networkrecommendation_WifiNotificationController.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void handleNotificationDeleted() { mNotificationShown = false; mRecommendedNetwork = null; },c1633987c7f23c0586c7ad190a793cabb7ccf5af,,handleNotificationDeleted(),6,16,private void handleNotificationDeleted() { mNotificationShown = false; mRecommendedNetwork = null; mNotificationBadgeBitmap = null; },92327a6f258a20ec594b6326cd401decca3e4685,handleNotificationDeleted(),489900,20,27
559359,services_core_java_com_android_server_connectivity_KeepaliveTracker.java,7.0,"public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = android.net.KeepalivePacketData.nattKeepalivePacket(srcAddress, srcPort, dstAddress, com.android.server.connectivity.NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (""Created keepalive: "" + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }",93f2bc28ffd8e58a4c68e800d1bdfbbea84a7c72,"public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (((""SourceAddr: "" + srcAddrString) + ""DstAddr: "") + dstAddrString)); srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ""Couldn't parse ip addresses""); notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = new android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (""Created keepalive: "" + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }",d8c9b22cf006b25dc3fb8897b0fe144cb668babe,"startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo,int,android.os.Messenger,android.os.IBinder,java.lang.String,int,java.lang.String,int)","startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo,int,android.os.Messenger,android.os.IBinder,java.lang.String,int,java.lang.String,int)",3,7,"public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = android.net.KeepalivePacketData.nattKeepalivePacket(srcAddress, srcPort, dstAddress, com.android.server.connectivity.NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (""Created keepalive: "" + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }",93f2bc28ffd8e58a4c68e800d1bdfbbea84a7c72,"startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo,int,android.os.Messenger,android.os.IBinder,java.lang.String,int,java.lang.String,int)",252682,494,430
542302,src_com_android_bluetooth_hfp_HeadsetService.java,53.0,"@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop()""); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop() called before start()""); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }",7fbc179d3f95d6afe861b7d89c44e5dbd569ba92,"@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop()""); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop() called before start()""); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }",e704140fe684320f1cc14aa4237dc0d45d983099,stop(),stop(),16,46,"@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop()""); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""stop() called before start()""); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mNativeInterface.cleanup(); mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }",f5a214d80c958d251061f150c0e3758f4304fd64,stop(),184585,161,167
269857,luni_src_test_java_libcore_java_lang_reflect_ParameterTest.java,,,,"public void testEquals_checksExecutable() throws java.lang.Exception { java.lang.reflect.Method method0 = libcore.java.lang.reflect.ParameterTest.NonIdenticalParameters.class.getDeclaredMethod(""method0"", java.lang.String.class); java.lang.reflect.Method method1 = libcore.java.lang.reflect.ParameterTest.NonIdenticalParameters.class.getDeclaredMethod(""method1"", java.lang.String.class); java.lang.reflect.Parameter method0P0 = method0.getParameters()[0]; java.lang.reflect.Parameter method1P0 = method1.getParameters()[0]; assertFalse(method0P0.equals(method1P0)); assertFalse(method1P0.equals(method0P0)); }",17754d162731a4aa5cef22b0d1ece0ce4f45c856,,testEquals_checksExecutable(),7,11,"public void testEquals_checksExecutable() throws java.lang.Exception { java.lang.reflect.Method method0 = libcore.java.lang.reflect.ParameterTest.NonIdenticalParameters.class.getDeclaredMethod(""method0"", java.lang.String.class); java.lang.reflect.Method method1 = libcore.java.lang.reflect.ParameterTest.NonIdenticalParameters.class.getDeclaredMethod(""method1"", java.lang.String.class); java.lang.reflect.Parameter method0P0 = method0.getParameters()[0]; java.lang.reflect.Parameter method1P0 = method1.getParameters()[0]; assertFalse(method0P0.equals(method1P0)); assertFalse(method1P0.equals(method0P0)); assertTrue(method0P0.equals(method0P0)); }",cc99d17103827bec94fe3c803c56d4b768f82da1,testEquals_checksExecutable(),67189,159,172
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAbs.java,,,,"private void checkAbsInt3() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsInt3(inValue, out); verifyResultsAbsInt3(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsInt3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsInt3(inValue, out); verifyResultsAbsInt3(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsInt3: "" + (e.toString()))); } }",8d65c1f75bfae9a43992fbc8cf1693dedd53b65f,,checkAbsInt3(),9,2,"private void checkAbsInt3Uint3() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 3, -4002984334132928449L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsInt3Uint3(inValue, out); verifyResultsAbsInt3Uint3(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsInt3Uint3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsInt3Uint3(inValue, out); verifyResultsAbsInt3Uint3(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsInt3Uint3: "" + (e.toString()))); } }",8562bad1d39678bbebbdbe14222bce7f31e2d994,checkAbsInt3Uint3(),143041,321,313
579565,src_java_com_android_internal_telephony_RIL.java,108.0,"private android.telephony.RadioAccessSpecifier convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier ras) { android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = new android.hardware.radio.V1_1.RadioAccessSpecifier(); rasInHalFormat.radioAccessNetwork = ras.getRadioAccessNetwork(); java.util.List<java.lang.Integer> bands = null; switch (ras.getRadioAccessNetwork()) { case android.telephony.RadioNetworkConstants.RadioAccessNetworks.GERAN : bands = rasInHalFormat.geranBands; break; case android.telephony.RadioNetworkConstants.RadioAccessNetworks.UTRAN : bands = rasInHalFormat.utranBands; break; case android.telephony.RadioNetworkConstants.RadioAccessNetworks.EUTRAN : bands = rasInHalFormat.eutranBands; break; default : android.util.Log.wtf(com.android.internal.telephony.RIL.RILJ_LOG_TAG, ((""radioAccessNetwork "" + (ras.getRadioAccessNetwork())) + "" not supported!"")); return null; } if ((ras.getBands()) != null) { for (int band : ras.getBands()) { bands.add(band); } } if ((ras.getChannels()) != null) { for (int channel : ras.getChannels()) { rasInHalFormat.channels.add(channel); } } return rasInHalFormat; }",67fc7d1b0da297e87db20ebb9e5f34b30bf1d9fd,"private android.telephony.RadioAccessSpecifier convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier ras) { android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = new android.hardware.radio.V1_1.RadioAccessSpecifier(); rasInHalFormat.radioAccessNetwork = ras.getRadioAccessNetwork(); java.util.List<java.lang.Integer> bands = null; switch (ras.getRadioAccessNetwork()) { case android.telephony.NetworkConstants.RadioAccessNetwork.GERAN : bands = rasInHalFormat.geranBands; break; case android.telephony.NetworkConstants.RadioAccessNetwork.UTRAN : bands = rasInHalFormat.utranBands; break; case android.telephony.NetworkConstants.RadioAccessNetwork.EUTRAN : bands = rasInHalFormat.eutranBands; break; default : android.util.Log.wtf(com.android.internal.telephony.RIL.RILJ_LOG_TAG, ((""radioAccessNetwork "" + (ras.getRadioAccessNetwork())) + "" not supported!"")); return null; } if ((ras.getBands()) != null) { for (int band : ras.getBands()) { bands.add(band); } } if ((ras.getChannels()) != null) { for (int channel : ras.getChannels()) { rasInHalFormat.channels.add(channel); } } return rasInHalFormat; }",9d7279f1c82c836a1917f0b2d5c7d9dc304f5356,convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier),convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier),3,108,"private android.telephony.RadioAccessSpecifier convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier ras) { android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = new android.hardware.radio.V1_1.RadioAccessSpecifier(); rasInHalFormat.radioAccessNetwork = ras.getRadioAccessNetwork(); java.util.List<java.lang.Integer> bands = null; switch (ras.getRadioAccessNetwork()) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : bands = rasInHalFormat.geranBands; break; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : bands = rasInHalFormat.utranBands; break; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : bands = rasInHalFormat.eutranBands; break; default : android.util.Log.wtf(com.android.internal.telephony.RIL.RILJ_LOG_TAG, ((""radioAccessNetwork "" + (ras.getRadioAccessNetwork())) + "" not supported!"")); return null; } if ((ras.getBands()) != null) { for (int band : ras.getBands()) { bands.add(band); } } if ((ras.getChannels()) != null) { for (int channel : ras.getChannels()) { rasInHalFormat.channels.add(channel); } } return rasInHalFormat; }",57f6b37623c32bce151854b1ebe3697201fa3054,convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier),89272,344,347
278609,telecomm_java_android_telecom_Log.java,23.0,"public static void d(java.lang.String prefix, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.DEBUG) { android.util.Log.d(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } }",b731f0bd095928956797ff3e840ef92b94a8a0f3,"public static void d(java.lang.String prefix, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.mIsUserExtendedLoggingEnabled) { android.telecom.Log.maybeDisableLogging(); android.telecom.Log.systemLogger.i(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } else if (android.telecom.Log.DEBUG) { android.telecom.Log.systemLogger.d(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } }",b3baa23afd99dae26c601c99137f09b96f272b5f,"d(java.lang.String,java.lang.String,java.lang.Object[])","d(java.lang.String,java.lang.String,java.lang.Object[])",3,23,"public static void d(java.lang.String prefix, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.sIsUserExtendedLoggingEnabled) { android.telecom.Log.maybeDisableLogging(); android.util.Slog.i(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } else if (android.telecom.Log.DEBUG) { android.util.Slog.d(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } }",e5630090f0fe6f7cdcd1d8c826fe3fb792998783,"d(java.lang.String,java.lang.String,java.lang.Object[])",122358,156,148
341507,service_java_com_android_server_wifi_WificondControl.java,14.0,"public android.net.wifi.IClientInterface setupDriverForClientMode() { mWificond = mWifiInjector.makeWificond(); if ((mWificond) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get reference to wificond""); return null; } android.net.wifi.IClientInterface clientInterface = null; try { clientInterface = mWificond.createClientInterface(); } catch (android.os.RemoteException e1) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get IClientInterface due to remote exception""); return null; } if (clientInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Could not get IClientInterface instance from wificond""); return null; } android.os.Binder.allowBlocking(clientInterface.asBinder()); mClientInterface = clientInterface; try { mClientInterfaceName = clientInterface.getInterfaceName(); mWificondScanner = mClientInterface.getWifiScannerImpl(); mScanEventHandler = new com.android.server.wifi.WificondControl.ScanEventHandler(); mWificondScanner.subscribeScanEvents(mScanEventHandler); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to refresh wificond scanner due to remote exception""); } return clientInterface; }",529f77485d9ec9e0f24f26c98e33e3b50c44f75e,"public android.net.wifi.IClientInterface setupDriverForClientMode() { mWificond = mWifiInjector.makeWificond(); if ((mWificond) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get reference to wificond""); return null; } android.net.wifi.IClientInterface clientInterface = null; try { clientInterface = mWificond.createClientInterface(); } catch (android.os.RemoteException e1) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get IClientInterface due to remote exception""); return null; } if (clientInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Could not get IClientInterface instance from wificond""); return null; } android.os.Binder.allowBlocking(clientInterface.asBinder()); mClientInterface = clientInterface; try { mClientInterfaceName = clientInterface.getInterfaceName(); mWificondScanner = mClientInterface.getWifiScannerImpl(); mScanEventHandler = new com.android.server.wifi.WificondControl.ScanEventHandler(); mWificondScanner.subscribeScanEvents(mScanEventHandler); mPnoScanEventHandler = new com.android.server.wifi.WificondControl.PnoScanEventHandler(); mWificondScanner.subscribePnoScanEvents(mPnoScanEventHandler); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to refresh wificond scanner due to remote exception""); } return clientInterface; }",3d81a278005a8c3d3318435842cc742d915adf24,setupDriverForClientMode(),setupDriverForClientMode(),22,15,"public android.net.wifi.IClientInterface setupDriverForClientMode() { android.util.Log.d(com.android.server.wifi.WificondControl.TAG, ""Setting up driver for client mode""); mWificond = mWifiInjector.makeWificond(); if ((mWificond) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get reference to wificond""); return null; } android.net.wifi.IClientInterface clientInterface = null; try { clientInterface = mWificond.createClientInterface(); } catch (android.os.RemoteException e1) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get IClientInterface due to remote exception""); return null; } if (clientInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Could not get IClientInterface instance from wificond""); return null; } android.os.Binder.allowBlocking(clientInterface.asBinder()); mClientInterface = clientInterface; try { mClientInterfaceName = clientInterface.getInterfaceName(); mWificondScanner = mClientInterface.getWifiScannerImpl(); if ((mWificondScanner) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get WificondScannerImpl""); return null; } android.os.Binder.allowBlocking(mWificondScanner.asBinder()); mScanEventHandler = new com.android.server.wifi.WificondControl.ScanEventHandler(); mWificondScanner.subscribeScanEvents(mScanEventHandler); mPnoScanEventHandler = new com.android.server.wifi.WificondControl.PnoScanEventHandler(); mWificondScanner.subscribePnoScanEvents(mPnoScanEventHandler); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to refresh wificond scanner due to remote exception""); } return clientInterface; }",c8a3fbe4a4b1e3a45cb795a8f5e607e89b69983e,setupDriverForClientMode(),451359,372,467
287141,luni_src_test_java_libcore_java_net_InetAddressTest.java,33.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_isReachable_by_ICMP() throws java.lang.Exception { java.net.InetAddress[] inetAddresses = java.net.InetAddress.getAllByName(""www.google.com""); for (java.net.InetAddress ia : inetAddresses) { assertTrue(ia.isReachableByICMP(5000)); } final java.net.InetAddress blackholeAddress = java.net.InetAddress.getByName(""100::1""); assertFalse(blackholeAddress.isReachable(1000)); }",2c2f80fbd8f461d170353065a49eb41b28abeaa2,,test_isReachable_by_ICMP(),8,33,"public void test_isReachable_by_ICMP() throws java.lang.Exception { java.net.InetAddress[] inetAddresses = java.net.InetAddress.getAllByName(""www.google.com""); for (java.net.InetAddress ia : inetAddresses) { assertTrue(ia.isReachableByICMP((5 * 1000))); } final java.net.InetAddress blackholeAddress = java.net.InetAddress.getByName(""100::1""); assertFalse(blackholeAddress.isReachable(1000)); }",67359840095331a6aa73ec86201782f123f03ed6,test_isReachable_by_ICMP(),212249,104,107
335587,service_java_com_android_server_wifi_WifiMonitor.java,48.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void onInvitationResult(byte[] bssid, int status) { }",d47521d3e1323c5774a664d25dea507239253e51,,"onInvitationResult(byte[],int)",32,42,"public void broadcastP2pGoNegotiationFailure(java.lang.String iface, com.android.server.wifi.p2p.WifiP2pServiceImpl.P2pStatus reason) { sendMessage(iface, com.android.server.wifi.WifiMonitor.P2P_GO_NEGOTIATION_FAILURE_EVENT, reason); }",e0cad9f55638f1908312a20683aed1ba78a265db,"broadcastP2pGoNegotiationFailure(java.lang.String,com.android.server.wifi.p2p.WifiP2pServiceImpl.P2pStatus)",320165,17,77
158671,jack-tests_src_com_android_jack_test_helper_RuntimeTestHelper.java,14.0,"@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createCandidateToolchain() { com.android.jack.test.toolchain.AndroidToolchain candidateTestTools = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.AndroidToolchain.class, ignoredCandidateToolchains); candidateTestTools.setSourceLevel(level); candidateTestTools.setWithDebugInfos(withDebugInfos); return candidateTestTools; }",24c4ec2551ae9c5da1fb7cfa1512e37e1eed018c,"@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createCandidateToolchain(@javax.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> properties) { com.android.jack.test.toolchain.AndroidToolchain candidateTestTools = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.AndroidToolchain.class, ignoredCandidateToolchains); candidateTestTools.setSourceLevel(level); candidateTestTools.setWithDebugInfos(withDebugInfos); if ((properties != null) && (candidateTestTools instanceof com.android.jack.test.toolchain.JackBasedToolchain)) { com.android.jack.test.toolchain.JackBasedToolchain jackBasedToolchain = ((com.android.jack.test.toolchain.JackBasedToolchain) (candidateTestTools)); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : properties.entrySet()) { jackBasedToolchain.addProperty(entry.getKey(), entry.getValue()); } } return candidateTestTools; }",4fa1892e928bd0bc2a2cc12f0779ef3788bdf15e,createCandidateToolchain(),createCandidateToolchain(java.util.Map),3,11,"@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createCandidateToolchain() { com.android.jack.test.toolchain.AndroidToolchain candidateTestTools = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.AndroidToolchain.class, ignoredCandidateToolchains); candidateTestTools.setSourceLevel(level); candidateTestTools.setWithDebugInfos(withDebugInfos); if ((!(runtimeProperties.isEmpty())) && (candidateTestTools instanceof com.android.jack.test.toolchain.JackBasedToolchain)) { com.android.jack.test.toolchain.JackBasedToolchain jackBasedToolchain = ((com.android.jack.test.toolchain.JackBasedToolchain) (candidateTestTools)); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : runtimeProperties.entrySet()) { jackBasedToolchain.addProperty(entry.getKey(), entry.getValue()); } } return candidateTestTools; }",0d4e83e4c2d983b5a47db0d114148984a2eddd5c,createCandidateToolchain(),21986,256,234
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,46.0,"@java.lang.Override public java.io.FileDescriptor socket(int domain, int type, int protocol) throws libcore.io.ErrnoException { return tagSocket(os.socket(domain, type, protocol)); }",481cd44662a7e1005a17711c2bb6d6f4b6837691,"@java.lang.Override public java.io.FileDescriptor socket(int domain, int type, int protocol) throws android.os.ErrnoException { return tagSocket(os.socket(domain, type, protocol)); }",cbd67c1d464e95c4054cf262296ce21f9aee3a1b,"socket(int,int,int)","socket(int,int,int)",3,46,"@java.lang.Override public java.io.FileDescriptor socket(int domain, int type, int protocol) throws android.system.ErrnoException { return tagSocket(os.socket(domain, type, protocol)); }",7d455d6a7c6019073bc2a32abd5066eff32a8e3e,"socket(int,int,int)",170360,47,47
540479,core_java_android_net_IpSecAlgorithm.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,static boolean isEncryptionAlgorithm(android.net.IpSecAlgorithm algorithm) { switch (algorithm.getName()) { case android.net.IpSecAlgorithm.CRYPT_AES_CBC : return true; default : return false; } },b7c1bc5646ecd3415ccd4b22a6ce902003f0d1bb,,isEncryptionAlgorithm(android.net.IpSecAlgorithm),11,12,public boolean isEncryption() { return getName().equals(android.net.IpSecAlgorithm.CRYPT_AES_CBC); },ecb511159c1964d0f49239f1d26b133c01294aaa,isEncryption(),345416,50,27
159876,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_BuildType.java,2.0,@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.BuildType setProguardFiles(java.lang.Iterable<?> proguardFileIterable) { proguardFiles.clear(); for (java.lang.Object proguardFile : proguardFileIterable) { proguardFiles.add(project.file(proguardFile)); } return this; },3e9645c8dc53a10cbc34a88c66be6b630fa2fcf8,@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.BuildType setProguardFiles(java.lang.Iterable<?> proguardFileIterable) { getProguardFiles().clear(); for (java.lang.Object proguardFile : proguardFileIterable) { getProguardFiles().add(project.file(proguardFile)); } return this; },f90cc0d61d6f85f2bfa24424e59e682a841e1788,setProguardFiles(java.lang.Iterable),setProguardFiles(java.lang.Iterable),3,3,@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.BuildType setProguardFiles(@com.android.annotations.NonNull java.lang.Iterable<?> proguardFileIterable) { getProguardFiles().clear(); for (java.lang.Object proguardFile : proguardFileIterable) { getProguardFiles().add(project.file(proguardFile)); } return this; },3d1ba83c08fad48393daf6837f113cc7378af87a,setProguardFiles(java.lang.Iterable),29508,84,91
147751,build-system_gradle-core_src_main_groovy_com_android_build_gradle_tasks_factory_JavaCompileConfigAction.java,2.0,public org.gradle.api.file.FileCollection doCall(java.lang.Object it) { org.gradle.api.file.FileCollection classpath = scope.getGlobalScope().getProject().files(scope.getGlobalScope().getAndroidBuilder().getCompileClasspath(scope.getVariantData().getVariantConfiguration())); if (org.codehaus.groovy.runtime.DefaultGroovyMethods.asBoolean(testedVariantData)) { if ((!(testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) || (scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST))) { classpath = classpath.plus(testedVariantData.javaCompileTask.getClasspath()).plus(testedVariantData.javaCompileTask.getOutputs().getFiles()); } if ((scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST)) && (testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) { classpath = classpath.minus(scope.getGlobalScope().getProject().files(testedVariantData.getVariantConfiguration().getOutput().getJarFile())); } } return classpath; },68c8783e1d89259962cc20224a7dddaef662cc4c,public org.gradle.api.file.FileCollection doCall(java.lang.Object it) { org.gradle.api.file.FileCollection classpath = scope.getGlobalScope().getProject().files(scope.getGlobalScope().getAndroidBuilder().getCompileClasspath(scope.getVariantData().getVariantConfiguration())); if (testedVariantData != null) { if ((!(testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) || (scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST))) { classpath = classpath.plus(testedVariantData.javaCompileTask.getClasspath()).plus(testedVariantData.javaCompileTask.getOutputs().getFiles()); } if ((scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST)) && (testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) { classpath = classpath.minus(scope.getGlobalScope().getProject().files(testedVariantData.getVariantConfiguration().getOutput().getJarFile())); } } return classpath; },19748d373a9e76c918cd7f5b788abe5311a9e53a,doCall(java.lang.Object),doCall(java.lang.Object),7,1,"public org.gradle.api.file.FileCollection doCall(java.lang.Object it) { org.gradle.api.file.FileCollection classpath = scope.getJavaClasspath(); if (testedVariantData != null) { if ((!(testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) || (scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST))) { classpath = classpath.plus(testedVariantData.getScope().getJavaClasspath()).plus(scope.getGlobalScope().getProject().files(testedVariantData.getScope().getJavaOutputDir(), testedVariantData.getScope().getJavaDependencyCache())); } if ((scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST)) && (testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) { classpath = classpath.minus(scope.getGlobalScope().getProject().files(testedVariantData.getVariantConfiguration().getOutput().getJarFile())); } } return classpath; }",1c48f94395c8ed3ea7777f6a83556ee3ce6fa9c7,doCall(java.lang.Object),433473,252,242
522566,core_java_android_net_NetworkCapabilities.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static int minBandwidth(int a, int b) { if ((a == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) && (b == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED))) { return android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; } else if (a == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return b; } else if (b == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return a; } else { return java.lang.Math.min(a, b); } }",03f6cea9ef6afcb9cbef19605cd4a1a3bee6f8ef,,"minBandwidth(int,int)",5,40,"public static int minBandwidth(int a, int b) { if (a == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return b; } else if (b == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return a; } else { return java.lang.Math.min(a, b); } }",ec9c8ccef90b15e515f72226d65083142b383877,"minBandwidth(int,int)",408840,141,81
254721,Common_src_com_googlecode_android_scripting_facade_bluetooth_BluetoothPanFacade.java,,,,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Set Bluetooth Tethering"") public void bluetoothPanSetBluetoothTethering(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""enable"") boolean enable) { com.googlecode.android_scripting.facade.bluetooth.BluetoothPanFacade.sPanProfile.setBluetoothTethering(enable); }",dea3662761bb80202a1f5ddd6900d44813a4a95e,,bluetoothPanSetBluetoothTethering(boolean),8,7,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Set Bluetooth Tethering"") public void bluetoothPanSetBluetoothTethering(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""enable"") java.lang.Boolean enable) { com.googlecode.android_scripting.facade.bluetooth.BluetoothPanFacade.sPanProfile.setBluetoothTethering(enable); }",883ff3f4306a76d708a588083035c790af2f397f,bluetoothPanSetBluetoothTethering(java.lang.Boolean),181287,91,95
163452,tests_tests_hardware_src_android_hardware_camera2_cts_CaptureRequestTest.java,36.0,"private void validateSensitivity(int request, int result) { int sensitivityDelta = request - result; mCollector.expectTrue((((""Sensitivity is invalid for AE manaul control test, request: "" + request) + "" result: "") + result), ((sensitivityDelta < (android.hardware.camera2.cts.CaptureRequestTest.SENSITIVITY_ERROR_MARGIN)) && (sensitivityDelta >= 0))); }",e897b13ce1223618c4abee0ed71c4ebc9447e9c0,"private void validateSensitivity(int request, int result) { int sensitivityDelta = java.lang.Math.abs((request - result)); int sensitivityErrorMargin = ((int) (request * (android.hardware.camera2.cts.CaptureRequestTest.SENSITIVITY_ERROR_MARGIN_RATE))); mCollector.expectTrue((((""Sensitivity is invalid for AE manaul control test, request: "" + request) + "" result: "") + result), (sensitivityDelta < sensitivityErrorMargin)); }",83794680c7556e7777911236bcd2b376c3aec1df,"validateSensitivity(int,int)","validateSensitivity(int,int)",3,36,"private void validateSensitivity(int request, int result) { float sensitivityDelta = ((float) (request - result)); float sensitivityErrorMargin = request * (android.hardware.camera2.cts.CaptureRequestTest.SENSITIVITY_ERROR_MARGIN_RATE); mCollector.expectTrue((((""Sensitivity is invalid for AE manaul control test, request: "" + request) + "" result: "") + result), ((sensitivityDelta < sensitivityErrorMargin) && (sensitivityDelta >= 0))); }",06914ff502ff5ce2f38997f58416591cb29de7de,"validateSensitivity(int,int)",371606,119,118
21570,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_resources_manager_MultiResourceFile.java,1.0,"@java.lang.Override public java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem> getResources(com.android.resources.ResourceType type, com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectResources) { update(); java.util.HashMap<java.lang.String, com.android.ide.common.rendering.api.ResourceValue> list = mResourceItems.get(type); java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem> items = new java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem>(); if (list != null) { java.util.Collection<com.android.ide.common.rendering.api.ResourceValue> values = list.values(); for (com.android.ide.common.rendering.api.ResourceValue res : values) { com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem item = projectResources.findResourceItem(type, res.getName()); if (item == null) { if (type == (com.android.resources.ResourceType.ID)) { item = new com.android.ide.eclipse.adt.internal.resources.manager.IdResourceItem(res.getName(), false); } else { item = new com.android.ide.eclipse.adt.internal.resources.manager.ConfigurableResourceItem(res.getName()); } items.add(item); } item.add(this); } } return items; }",666922843f6f0819f85d500dc24575da15294771,"@java.lang.Override public java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem> getResources(com.android.resources.ResourceType type, com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository resources) { update(); java.util.HashMap<java.lang.String, com.android.ide.common.rendering.api.ResourceValue> list = mResourceItems.get(type); java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem> items = new java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem>(); if (list != null) { java.util.Collection<com.android.ide.common.rendering.api.ResourceValue> values = list.values(); for (com.android.ide.common.rendering.api.ResourceValue res : values) { com.android.util.Pair<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem, java.lang.Boolean> pair = resources.createResourceItem(type, res.getName()); com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem item = pair.getFirst(); if (pair.getSecond()) { items.add(item); } item.add(this); } } return items; }",743c5cfe298fbccdf8d410d43abe3c0e27229a3b,"getResources(com.android.resources.ResourceType,com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources)","getResources(com.android.resources.ResourceType,com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository)",6,1,@java.lang.Override public java.util.Collection<com.android.resources.ResourceType> getResourceTypes() { return mResourceTypeList; },a56f4628e9c31e76de2a8189d02b4d86782b3fda,getResourceTypes(),150650,317,32
196720,services_core_java_com_android_server_BluetoothManagerService.java,38.0,"@java.lang.Override public void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.server.BluetoothManagerService.TAG); writer.println(""Bluetooth Status""); writer.println(("" enabled: "" + (mEnable))); writer.println(("" state: "" + (mState))); writer.println(("" address: "" + (mAddress))); writer.println((("" name: "" + (mName)) + ""\n"")); writer.flush(); if ((mBluetooth) == null) { writer.println(""Bluetooth Service not connected""); } else { android.os.ParcelFileDescriptor pfd = null; try { writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : mBluetooth.getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.server.BluetoothManagerService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } writer.flush(); pfd = android.os.ParcelFileDescriptor.dup(fd); mBluetooth.dump(pfd); } catch (android.os.RemoteException re) { writer.println(""RemoteException while calling Bluetooth Service""); } catch (java.io.IOException ioe) { writer.println(""IOException attempting to dup() fd""); } finally { if (pfd != null) { try { pfd.close(); } catch (java.io.IOException ioe) { writer.println(""IOException attempting to close() fd""); } } } } }",ed3fe0726bd835708e990503a35dd1052072291b,"@java.lang.Override public void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { if ((mBluetoothBinder) == null) { writer.println(""Bluetooth Service not connected""); } else { try { mBluetoothBinder.dump(fd, args); } catch (android.os.RemoteException re) { writer.println(""RemoteException while calling Bluetooth Service""); } } }",7fda80ab9f902a1780978f00982ae503df1f3e47,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])","dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",5,38,"@java.lang.Override public void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.server.BluetoothManagerService.TAG); if ((mBluetoothBinder) == null) { writer.println(""Bluetooth Service not connected""); } else { try { mBluetoothBinder.dump(fd, args); } catch (android.os.RemoteException re) { writer.println(""RemoteException while calling Bluetooth Service""); } } }",e945fb0232316a9755c33e47d017243be6245656,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",22662,92,120
333758,tests_wifitests_src_com_android_server_wifi_SupplicantStaNetworkHalTest.java,47.0,"private void testWifiConfigurationSaveLoad(android.net.wifi.WifiConfiguration config) { assertTrue(mSupplicantNetwork.saveWifiConfiguration(config)); android.net.wifi.WifiConfiguration loadConfig = new android.net.wifi.WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtras = new java.util.HashMap<>(); assertTrue(mSupplicantNetwork.loadWifiConfiguration(loadConfig, networkExtras)); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqualForSupplicant(config, loadConfig); if ((config.updateIdentifier) != null) { assertEquals(java.lang.Integer.parseInt(config.updateIdentifier), mSupplicantVariables.updateIdentifier); } }",650754d561e0e4d01bdc392e3db8e40abaeaf57a,"private void testWifiConfigurationSaveLoad(WifiConfiguration config) { assertTrue(mSupplicantNetwork.saveWifiConfiguration(config)); WifiConfiguration loadConfig = new WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtras = new java.util.HashMap<>(); assertTrue(mSupplicantNetwork.loadWifiConfiguration(loadConfig, networkExtras)); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqualForSupplicant(config, loadConfig); if (!(android.text.TextUtils.isEmpty(config.updateIdentifier))) { assertEquals(java.lang.Integer.parseInt(config.updateIdentifier), mSupplicantVariables.updateIdentifier); } java.lang.String oppKeyCaching = config.enterpriseConfig.getFieldValue(OPP_KEY_CACHING); if (!(android.text.TextUtils.isEmpty(oppKeyCaching))) { assertEquals(((java.lang.Integer.parseInt(oppKeyCaching)) == 1 ? true : false), mSupplicantVariables.eapProactiveKeyCaching); } }",809415ca0106a2b4f9d68069c5dac7a98bbcda07,testWifiConfigurationSaveLoad(android.net.wifi.WifiConfiguration),testWifiConfigurationSaveLoad(android.net.wifi.WifiConfiguration),6,39,"private void testWifiConfigurationSaveLoad(WifiConfiguration config) { assertTrue(mSupplicantNetwork.saveWifiConfiguration(config)); WifiConfiguration loadConfig = new WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtras = new java.util.HashMap<>(); assertTrue(mSupplicantNetwork.loadWifiConfiguration(loadConfig, networkExtras)); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqualForSupplicant(config, loadConfig); assertEquals(config.configKey(), networkExtras.get(SupplicantStaNetworkHal.ID_STRING_KEY_CONFIG_KEY)); assertEquals(config.creatorUid, java.lang.Integer.parseInt(networkExtras.get(SupplicantStaNetworkHal.ID_STRING_KEY_CREATOR_UID))); if (!(android.text.TextUtils.isEmpty(config.updateIdentifier))) { assertEquals(java.lang.Integer.parseInt(config.updateIdentifier), mSupplicantVariables.updateIdentifier); } java.lang.String oppKeyCaching = config.enterpriseConfig.getFieldValue(OPP_KEY_CACHING); if (!(android.text.TextUtils.isEmpty(oppKeyCaching))) { assertEquals(((java.lang.Integer.parseInt(oppKeyCaching)) == 1 ? true : false), mSupplicantVariables.eapProactiveKeyCaching); } }",89325d25d65fb498c78fa4a77ff2979512e17430,testWifiConfigurationSaveLoad(android.net.wifi.WifiConfiguration),290441,236,308
44462,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_NativeCrypto.java,85.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static native void EC_POINT_set_affine_coordinates(int type, int groupCtx, int pointCtx, byte[] x, byte[] y);",e1ff3b97575d34cb41a7da9d9d6c33eb109a88fe,,"EC_POINT_set_affine_coordinates(int,int,int,byte[],byte[])",9,114,"public static native void EC_POINT_set_affine_coordinates(int groupCtx, int pointCtx, byte[] x, byte[] y);",0d56cd46fd1c63f452944fef94a25244c285d453,"EC_POINT_set_affine_coordinates(int,int,byte[],byte[])",468886,34,31
153229,build-system_gradle-core_src_main_groovy_com_android_build_gradle_tasks_annotations_Extractor.java,18.0,"public void removeTypedefClasses() { if ((((classDir) != null) && ((classFiles) != null)) && (!(classFiles.isEmpty()))) { int count = 0; for (java.io.File file : classFiles) { if (!(file.isAbsolute())) { file = new java.io.File(classDir, file.getPath()); } if (file.exists()) { boolean deleted = file.delete(); if (deleted) { count++; } else { com.android.build.gradle.tasks.annotations.Extractor.warning((""Could not delete typedef class "" + (file.getPath()))); } } } info(((""Deleted "" + count) + "" typedef annotation classes"")); } }",c710f3a44dfb9639ead867fb1dbfb4ba0edcc55b,"public void removeTypedefClasses() { if ((((classDir) != null) && ((classFiles) != null)) && (!(classFiles.isEmpty()))) { boolean quiet = false; boolean verbose = false; boolean dryRun = false; com.android.build.gradle.tasks.annotations.RmTypeDefs remover = new com.android.build.gradle.tasks.annotations.RmTypeDefs(this, quiet, verbose, dryRun); remover.remove(classFiles); } }",af6e81f0328fe0836d2249c2a998b9cbaf9658c1,removeTypedefClasses(),removeTypedefClasses(),4,18,"public void removeTypedefClasses() { if ((((classDir) != null) && ((typedefClasses) != null)) && (!(typedefClasses.isEmpty()))) { boolean quiet = false; boolean verbose = false; boolean dryRun = false; com.android.build.gradle.tasks.annotations.TypedefRemover remover = new com.android.build.gradle.tasks.annotations.TypedefRemover(this, quiet, verbose, dryRun); remover.remove(classDir, typedefClasses); } }",372a48f175e53ff0c502d4bdf12fe2f5c4a25602,removeTypedefClasses(),68191,106,112
144267,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_ExtraModelInfo.java,0.0,"public void registerArtifactType(@com.android.annotations.NonNull java.lang.String name, boolean isTest, int artifactType) { if ((extraArtifactMap.get(name)) != null) { throw new java.lang.IllegalArgumentException(""Artifact with name $name already registered.""); } extraArtifactMap.put(name, new com.android.build.gradle.internal.model.ArtifactMetaDataImpl(name, isTest, artifactType)); }",ef134a2a94459b76342e0fc4c5eaee0b07d61ea3,"public void registerArtifactType(@com.android.annotations.NonNull java.lang.String name, boolean isTest, int artifactType) { if ((extraArtifactMap.get(name)) != null) { throw new java.lang.IllegalArgumentException(java.lang.String.format(""Artifact with name %s already registered."", name)); } extraArtifactMap.put(name, new com.android.build.gradle.internal.model.ArtifactMetaDataImpl(name, isTest, artifactType)); }",817241826d36c5b0a21b818b6e52653a81bf0cb3,"registerArtifactType(java.lang.String,boolean,int)","registerArtifactType(java.lang.String,boolean,int)",2,0,"public void registerArtifactType(@com.android.annotations.NonNull java.lang.String name, boolean isTest, int artifactType) { if ((extraArtifactMap.get(name)) != null) { throw new java.lang.IllegalArgumentException(java.lang.String.format(""Artifact with name %1$s already registered."", name)); } extraArtifactMap.put(name, new com.android.build.gradle.internal.model.ArtifactMetaDataImpl(name, isTest, artifactType)); }",138ac60a3973dd0217fd4aed7c8090efcb2622bb,"registerArtifactType(java.lang.String,boolean,int)",351184,107,109
67243,chimpchat_src_main_java_com_android_chimpchat_core_ChimpView.java,13.0,"@java.lang.Override public int[] getAccessibilityIds() { java.util.List<java.lang.String> results = com.google.common.collect.Lists.newArrayList(queryView(""getaccessibilityids"").split("" "")); if ((results.size()) == 2) { int[] accessibilityIds = new int[2]; try { accessibilityIds[0] = java.lang.Integer.parseInt(results.get(0)); accessibilityIds[1] = java.lang.Integer.parseInt(results.get(1)); return accessibilityIds; } catch (java.lang.NumberFormatException e) { com.android.chimpchat.core.ChimpView.LOG.log(java.util.logging.Level.SEVERE, (""Error retrieving accesibility ids: "" + (e.getMessage()))); } } int[] empty = new int[]{ 0, 0 }; return empty; }",6b5c18266429d3f13e824609ad1ca1ba91cc157a,"@java.lang.Override public java.util.List<java.lang.String> getAccessibilityIds() { java.util.List<java.lang.String> results = com.google.common.collect.Lists.newArrayList(queryView(""getaccessibilityids"").split("" "")); if ((results.size()) == 2) { try { java.lang.Integer.parseInt(results.get(0)); java.lang.Long.parseLong(results.get(1)); return results; } catch (java.lang.NumberFormatException e) { com.android.chimpchat.core.ChimpView.LOG.log(java.util.logging.Level.SEVERE, (""Error retrieving accesibility ids: "" + (e.getMessage()))); } } java.util.List<java.lang.String> empty = com.google.common.collect.Lists.newArrayList(""0"", ""0""); return empty; }",a4025794073dbad3a86502b32d7a9d2620dd9bac,getAccessibilityIds(),getAccessibilityIds(),2,13,"@java.lang.Override public com.android.chimpchat.core.IChimpView.AccessibilityIds getAccessibilityIds() { java.util.List<java.lang.String> results = com.google.common.collect.Lists.newArrayList(queryView(""getaccessibilityids"").split("" "")); if ((results.size()) == 2) { try { return new com.android.chimpchat.core.IChimpView.AccessibilityIds(java.lang.Integer.parseInt(results.get(0)), java.lang.Long.parseLong(results.get(1))); } catch (java.lang.NumberFormatException e) { com.android.chimpchat.core.ChimpView.LOG.log(java.util.logging.Level.SEVERE, (""Error retrieving accesibility ids: "" + (e.getMessage()))); } } return new com.android.chimpchat.core.IChimpView.AccessibilityIds(0, 0); }",cb148879d354cb3caa36c4cbda17c4aa30d3fc42,getAccessibilityIds(),153098,193,205
579565,src_java_com_android_internal_telephony_RIL.java,204.0,"@java.lang.Override public void getSignalStrength(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIGNAL_STRENGTH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSignalStrength(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getSignalStrength"", e); } } }",01a74a346a70ba5ddcc0983306101669c684e843,"@java.lang.Override public void getSignalStrength(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIGNAL_STRENGTH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSignalStrength(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getSignalStrength"", e); } } }",c67550e9ce8ea0e1009da511787eaa19de10409d,getSignalStrength(android.os.Message),getSignalStrength(android.os.Message),3,204,"@java.lang.Override public void getSignalStrength(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIGNAL_STRENGTH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSignalStrength(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getSignalStrength"", e); } } }",01a74a346a70ba5ddcc0983306101669c684e843,getSignalStrength(android.os.Message),89344,207,203
46210,eclipse_plugins_com.android.ide.eclipse.tests_src_com_android_ide_eclipse_adt_internal_refactorings_core_RenameResourceParticipantTest.java,,,,"public void testRefactor5() throws java.lang.Exception { checkRefactoring(com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceParticipantTest.TEST_PROJECT, ""@layout/activity_main"", ""newlayout"", (""CHANGES:\n"" + ((((((((((((""-------\n"" + ""* Rename \'testRefactor5/res/layout/activity_main.xml\' to \'newlayout.xml\'\n"") + ""* Rename \'testRefactor5/res/layout-land/activity_main.xml\' to \'newlayout.xml\'\n"") + ""* MainActivity.java - /testRefactor5/src/com/example/refactoringtest/MainActivity.java\n"") + "" < setContentView(R.layout.activity_main);\n"") + "" ---\n"") + "" > setContentView(R.layout.newlayout);\n"") + ""\n"") + ""\n"") + ""* R.java - /testRefactor5/gen/com/example/refactoringtest/R.java\n"") + "" < public static final int activity_main=0x7f030000;\n"") + "" ---\n"") + "" > public static final int newlayout=0x7f030000;""))); }",4a65bfaff9bdf89208cf282710012b7d1bbebb57,,testRefactor5(),7,7,"public void testRefactor5() throws java.lang.Exception { checkRefactoring(com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceParticipantTest.TEST_PROJECT, ""@layout/activity_main"", true, ""newlayout"", (""CHANGES:\n"" + ((((((((((((""-------\n"" + ""* Rename \'testRefactor5/res/layout/activity_main.xml\' to \'newlayout.xml\'\n"") + ""* Rename \'testRefactor5/res/layout-land/activity_main.xml\' to \'newlayout.xml\'\n"") + ""* MainActivity.java - /testRefactor5/src/com/example/refactoringtest/MainActivity.java\n"") + "" < setContentView(R.layout.activity_main);\n"") + "" ---\n"") + "" > setContentView(R.layout.newlayout);\n"") + ""\n"") + ""\n"") + ""* R.java - /testRefactor5/gen/com/example/refactoringtest/R.java\n"") + "" < public static final int activity_main=0x7f030000;\n"") + "" ---\n"") + "" > public static final int newlayout=0x7f030000;""))); }",c8beef63e4f3aba37c5794503a01f1ced289062e,testRefactor5(),447544,300,302
102887,jack_src_com_android_jack_ir_ConditionnalStructurePrinter.java,,,,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (acceptFilter(type)) { stream.print(com.android.jack.ir.ConditionnalStructurePrinter.formatter.getName(type)); stream.println("":""); return true; } else { return false; } }",9e2871d66158c58509f6d368b354a3fa297fc5de,,visit(com.android.jack.ir.ast.JDefinedClassOrInterface),6,5,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (acceptFilter(type)) { stream.print(com.android.jack.util.StructurePrinter.formatter.getName(type)); stream.println("":""); return true; } else { return false; } }",ae4262695c96df4f3605367efa668238a9023b08,visit(com.android.jack.ir.ast.JDefinedClassOrInterface),103965,79,77
21492,sdkmanager_app_tests_com_android_sdkmanager_MainTest.java,1.0,"public void testDisplayAvdListOfOneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(mLog); mAvdManager.createAvd(mAvdFolder, this.getName(), mTarget, null, null, null, false, true, mLog); mLog.clear(); main.displayAvdList(mAvdManager); assertEquals(((((((((((""[P Available Android Virtual Devices:\n"" + "", P Name: "") + (this.getName())) + ""\n"") + "", P Path: "") + (mAvdFolder)) + ""\n"") + "", P Target: Android 0.0 (API level 0)\n"") + "", P Skin: HVGA\n"") + "", P Snapshot: true\n"") + ""]""), mLog.toString()); }",941c8c32338435906a7097d26dfc942acdb23dfe,"public void testDisplayAvdListOfOneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(mLog); mAvdManager.createAvd(mAvdFolder, this.getName(), mTarget, null, null, null, true, false, false, mLog); mLog.clear(); main.displayAvdList(mAvdManager); assertEquals(((((((((((""[P Available Android Virtual Devices:\n"" + "", P Name: "") + (this.getName())) + ""\n"") + "", P Path: "") + (mAvdFolder)) + ""\n"") + "", P Target: Android 0.0 (API level 0)\n"") + "", P Skin: HVGA\n"") + "", P Snapshot: true\n"") + ""]""), mLog.toString()); }",0dc7a89d84d91ee59b59bfcfe2eeac64ae9df357,testDisplayAvdListOfOneSnapshot(),testDisplayAvdListOfOneSnapshot(),4,1,"public void testDisplayAvdListOfOneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(mLog); mAvdManager.createAvd(mAvdFolder, this.getName(), mTarget, SdkConstants.ABI_ARMEABI, null, null, null, true, false, false, mLog); mLog.clear(); main.displayAvdList(mAvdManager); assertEquals(((((((((((""[P Available Android Virtual Devices:\n"" + "", P Name: "") + (this.getName())) + ""\n"") + "", P Path: "") + (mAvdFolder)) + ""\n"") + "", P Target: Android 0.0 (API level 0)\n"") + "", P Skin: HVGA\n"") + "", P Snapshot: true\n"") + ""]""), mLog.toString()); }",7f09d1625bd26196b4f9e9543315cefc335f4cbe,testDisplayAvdListOfOneSnapshot(),194395,195,205
329546,src_com_android_server_telecom_CallsManager.java,103.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean isIncomingCallPermitted(com.android.server.telecom.Call excludeCall, android.telecom.PhoneAccountHandle phoneAccountHandle) { if (phoneAccountHandle == null) { return false; } android.telecom.PhoneAccount phoneAccount = mPhoneAccountRegistrar.getPhoneAccountUnchecked(phoneAccountHandle); if (phoneAccount == null) { return false; } if (!(phoneAccount.isSelfManaged())) { return ((!(hasMaximumManagedRingingCalls(excludeCall))) && (!(hasMaximumManagedLiveCalls(excludeCall)))) && (!(hasMaximumManagedHoldingCalls(excludeCall))); } else { return (((!(hasEmergencyCall())) && (!(hasMaximumSelfManagedRingingCalls(excludeCall, phoneAccountHandle)))) && (!(hasMaximumSelfManagedCalls(excludeCall, phoneAccountHandle)))) && (!(hasManagedCalls())); } }",66abb1ab5055a5d27fda73482b1d696742a1986e,,"isIncomingCallPermitted(com.android.server.telecom.Call,android.telecom.PhoneAccountHandle)",6,127,"public boolean isIncomingCallPermitted(com.android.server.telecom.Call excludeCall, android.telecom.PhoneAccountHandle phoneAccountHandle) { if (phoneAccountHandle == null) { return false; } android.telecom.PhoneAccount phoneAccount = mPhoneAccountRegistrar.getPhoneAccountUnchecked(phoneAccountHandle); if (phoneAccount == null) { return false; } if (!(phoneAccount.isSelfManaged())) { return (!(hasMaximumManagedRingingCalls(excludeCall))) && (!(hasMaximumManagedHoldingCalls(excludeCall))); } else { return (((!(hasEmergencyCall())) && (!(hasMaximumSelfManagedRingingCalls(excludeCall, phoneAccountHandle)))) && (!(hasMaximumSelfManagedCalls(excludeCall, phoneAccountHandle)))) && (!(hasManagedCalls())); } }",10ae0235ce92b15dbce5475655c0a76ab31bf7d2,"isIncomingCallPermitted(com.android.server.telecom.Call,android.telecom.PhoneAccountHandle)",182060,187,174
79530,luni_src_main_java_java_nio_DatagramChannelImpl.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void initConnected(java.net.InetAddress remoteAddress, int remotePort, boolean updateSocketState) { connected = true; connectAddress = new java.net.InetSocketAddress(remoteAddress, remotePort); if (updateSocketState && ((socket) != null)) { socket.initConnected(remoteAddress, remotePort); } }",b418f31aba7421fc0139b60e6850da9bf4d4c5e5,,"initConnected(java.net.InetAddress,int,boolean)",11,23,"void onConnect(java.net.InetAddress remoteAddress, int remotePort, boolean updateSocketState) { connected = true; connectAddress = new java.net.InetSocketAddress(remoteAddress, remotePort); if (updateSocketState && ((socket) != null)) { socket.onConnect(remoteAddress, remotePort); } }",bed9a9a193e3de8338a7d583ce2766b824a5db64,"onConnect(java.net.InetAddress,int,boolean)",511064,68,68
488425,src_main_java_com_android_volley_NetworkResponse.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.util.Map<java.lang.String, java.lang.String> toHeaderMap(java.util.List<com.android.volley.Header> allHeaders) { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.TreeMap<>(java.lang.String.CASE_INSENSITIVE_ORDER); for (com.android.volley.Header header : allHeaders) { headers.put(header.getName(), header.getValue()); } return headers; }",86acfdb4b16c53f504e762cf28f5d0b5f3405615,,toHeaderMap(java.util.List),2,0,"private static java.util.Map<java.lang.String, java.lang.String> toHeaderMap(java.util.List<com.android.volley.Header> allHeaders) { if (allHeaders == null) { return null; } if (allHeaders.isEmpty()) { return java.util.Collections.emptyMap(); } java.util.Map<java.lang.String, java.lang.String> headers = new java.util.TreeMap<>(java.lang.String.CASE_INSENSITIVE_ORDER); for (com.android.volley.Header header : allHeaders) { headers.put(header.getName(), header.getValue()); } return headers; }",c6b0a3c1d52b7524b4f2530811d0e09838907b0f,toHeaderMap(java.util.List),264929,114,144
311525,tests_wifitests_src_com_android_server_wifi_RecommendedNetworkEvaluatorTest.java,,,,"@org.junit.Test public void testEvaluateNetworks_nullRecommendation() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(null); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1, com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2), null, null, false, false, null); junit.framework.Assert.assertNull(result); verify(mNetworkScoreManager).requestRecommendation(any(android.net.RecommendationRequest.class)); verify(mWifiConfigManager, never()).setNetworkCandidateScanResult(anyInt(), any(android.net.wifi.ScanResult.class), anyInt()); }",d1adf7e145370fd76abdebc94f648855f62713b0,,testEvaluateNetworks_nullRecommendation(),7,5,"@org.junit.Test public void testEvaluateNetworks_nullRecommendation() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(null); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL), null, null, false, false, null); junit.framework.Assert.assertNull(result); verify(mNetworkScoreManager).requestRecommendation(any(android.net.RecommendationRequest.class)); }",f6de4900ce8c2360266e1400883ee9d4448c19e9,testEvaluateNetworks_nullRecommendation(),180354,205,178
510195,test_959-invoke-polymorphic-accessors_src_Main.java,25.0,"static void getInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final int got = (v == null) ? ((int) (m.invokeExact())) : ((int) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }",70be78858361b4801dea44d89e1743fe4bebcc39,"static void getInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final int got = (v == null) ? ((int) (m.invokeExact())) : ((int) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }",160a9f4b4625da49fd3f512012f3f90f00c43421,"getInt(java.lang.invoke.MethodHandle,Main$ValueHolder,int,boolean)","getInt(java.lang.invoke.MethodHandle,Main$ValueHolder,int,boolean)",3,24,"static void getInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final int got = (v == null) ? ((int) (m.invokeExact())) : ((int) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }",1877828e24e560f7cace9a777eb075c562f20f41,"getInt(java.lang.invoke.MethodHandle,Main$ValueHolder,int,boolean)",228906,122,121
153812,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,12.0,"@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) public void test001d() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, ""keep-first"", errOut, false, true); java.io.File myClass1 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_1); java.io.File myClass2 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_2); java.io.File myClass3 = new java.io.File(jackOutput, com.android.jack.fileconflict.FileConflictTests.JACK_FILE_PATH_3); junit.framework.Assert.assertTrue(myClass1.exists()); junit.framework.Assert.assertTrue(myClass2.exists()); junit.framework.Assert.assertTrue(myClass3.exists()); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass"")); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass2"")); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass3"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); }",18094a07a40f1ea1659773e508b5a1cddc1af1eb,"@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) public void test001d() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, ""keep-first"", errOut, false, true); com.android.jack.library.InputJackLibrary outputLib = null; try { outputLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir(jackOutput); com.android.sched.vfs.InputVFile myClass1 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE1_PATH); com.android.sched.vfs.InputVFile myClass2 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE2_PATH); com.android.sched.vfs.InputVFile myClass3 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE3_PATH); checkJayceNotEmpty(myClass1); checkJayceNotEmpty(myClass2); checkJayceNotEmpty(myClass3); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { junit.framework.Assert.fail(); } finally { if (outputLib != null) { outputLib.close(); } java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass"")); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass2"")); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass3"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); } }",fdd73b9e228f0c253310e50441e55e6513247a43,test001d(),test001d(),9,13,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void test001d() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, ""keep-first"", errOut, false, true); com.android.jack.library.InputJackLibrary outputLib = null; try { outputLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); com.android.sched.vfs.InputVFile myClass1 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE1_PATH); com.android.sched.vfs.InputVFile myClass2 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE2_PATH); com.android.sched.vfs.InputVFile myClass3 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE3_PATH); checkJayceNotEmpty(myClass1); checkJayceNotEmpty(myClass2); checkJayceNotEmpty(myClass3); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { junit.framework.Assert.fail(); } finally { if (outputLib != null) { outputLib.close(); } java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass"")); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass2"")); junit.framework.Assert.assertTrue(errString.contains(""Type com.android.jack.fileconflict.test001.jack.MyClass3"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); } }",d4609ec38355180ef5d7603a64175dc169bacde9,test001d(),456038,469,453
507524,src_com_android_bluetooth_gatt_AppScanStats.java,3.0,"synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.scansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); if (!(isScanning())) { try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mScanStartTime = startTime; batteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } } ongoingScans.put(scannerId, scan); }",5b716adcbb2183b87b0ff5470c4c34da9a4e7044,"synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) { try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mScanStartTime = startTime; mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } } mOngoingScans.put(scannerId, scan); }",6d903b7a3b1b3bd68d158bc43397674cc408ae8a,"recordScanStart(android.bluetooth.le.ScanSettings,boolean,int)","recordScanStart(android.bluetooth.le.ScanSettings,boolean,int)",26,3,"synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) mScanStartTime = startTime; try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } mOngoingScans.put(scannerId, scan); }",17e24ca879f4402b342fa1032d0fd24c53c70e40,"recordScanStart(android.bluetooth.le.ScanSettings,boolean,int)",155767,402,400
21570,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_resources_manager_FrameworkResources.java,,,,@java.lang.Override public com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem[] getResources(com.android.resources.ResourceType type) { java.util.List<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem> items = mPublicResourceMap.get(type); return items.toArray(new com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem[items.size()]); },005112ea0910c711fe44ef509740029e934a3c30,,getResources(com.android.resources.ResourceType),6,3,@java.lang.Override public java.util.List<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem> getResourceItemsOfType(com.android.resources.ResourceType type) { return mPublicResourceMap.get(type); },366a849d4bf8d9100b2cbc480d79b6b3de74a8ed,getResourceItemsOfType(com.android.resources.ResourceType),150652,107,58
414159,dx_src_com_android_dx_dex_file_CallSiteIdItem.java,,,,@java.lang.Override public int compareTo(java.lang.Object o) { com.android.dx.dex.file.CallSiteIdItem other = ((com.android.dx.dex.file.CallSiteIdItem) (o)); return callSite.compareTo(other.callSite); },1ea788f3236286917290b26d6f164156c1959d05,,compareTo(java.lang.Object),20,4,@java.lang.Override public int compareTo(java.lang.Object o) { com.android.dx.dex.file.CallSiteIdItem other = ((com.android.dx.dex.file.CallSiteIdItem) (o)); return invokeDynamicRef.compareTo(other.invokeDynamicRef); },7859e4a813cd466d0c8ac02a5b4b82f2a1cf00ee,compareTo(java.lang.Object),238720,66,68
110368,updater_src_com_intellij_updater_Digester.java,5.0,public static long digestFile(java.io.File file) throws java.io.IOException { if (com.intellij.updater.Utils.isZipFile(file.getName())) { java.util.zip.ZipFile zipFile; try { zipFile = new java.util.zip.ZipFile(file); } catch (java.io.IOException e) { com.intellij.updater.Runner.printStackTrace(e); return com.intellij.updater.Digester.doDigestRegularFile(file); } try { return com.intellij.updater.Digester.doDigestZipFile(zipFile); } finally { zipFile.close(); } } return com.intellij.updater.Digester.doDigestRegularFile(file); },4231198ab9d51083af97c44293fa1bef2466802e,public static long digestFile(java.io.File file) throws java.io.IOException { if (com.intellij.updater.Utils.isZipFile(file.getName())) { java.util.zip.ZipFile zipFile; try { zipFile = new java.util.zip.ZipFile(file); } catch (java.io.IOException e) { com.intellij.updater.Runner.printStackTrace(e); return com.intellij.updater.Digester.digestRegularFile(file); } try { return com.intellij.updater.Digester.doDigestZipFile(zipFile); } finally { zipFile.close(); } } return com.intellij.updater.Digester.digestRegularFile(file); },cdbeda691d732ef0112e61c55717374e87f5c8b0,digestFile(java.io.File),digestFile(java.io.File),2,5,public static long digestFile(java.io.File file) throws java.io.IOException { if ((!(Runner.ZIP_AS_BINARY)) && (com.intellij.updater.Utils.isZipFile(file.getName()))) { java.util.zip.ZipFile zipFile; try { zipFile = new java.util.zip.ZipFile(file); } catch (java.io.IOException e) { com.intellij.updater.Runner.printStackTrace(e); return com.intellij.updater.Digester.digestRegularFile(file); } try { return com.intellij.updater.Digester.doDigestZipFile(zipFile); } finally { zipFile.close(); } } return com.intellij.updater.Digester.digestRegularFile(file); },5835364377daa23152757821f770512ef7faa52d,digestFile(java.io.File),246552,152,165
93690,src_com_google_gct_idea_appengine_wizard_BackendModuleWizardStep.java,,,,@java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { if (myUpdating) return; myUpdating = true; try { updateDataModel(); myUpdateListener.update(); } finally { myUpdating = false; } },55b3b6f2f58744355b68b46d2eb600a2780a98f7,,textChanged(javax.swing.event.DocumentEvent),3,6,@java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { if (myUpdating) { return; } myUpdating = true; try { updateDataModel(); myUpdateListener.update(); } finally { myUpdating = false; } },c3612ac8e57fcc0a5ca6922de2f9dd89f504bcf3,textChanged(javax.swing.event.DocumentEvent),413168,53,55
161350,jack-tests_tests_com_android_jack_switchstatement_SwitchstatementTests.java,1.0,"@org.junit.Test public void testCompile023() throws java.lang.Exception { properties.clear(); properties.put(""jack.optimization.enum.switch"", ""feedback""); java.lang.String packageName = ""com.android.jack.switchstatement.test023.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Switch2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum22""), false)); input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum22""), false)); input.put(""Enum1$Enum11"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum2$Enum22"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum22""), false)); input.put(""SyntheticSwitchmapClass-*"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + ""Enum1$Enum11""), true).specifyInfo((classPrefix + ""Enum2$Enum22""), true)); checkCompiledCode(packageName, input); }",628ca0dbd00dc3f60ba6ea2747d4f415b20de557,"@org.junit.Test public void testCompile023() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test023.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Switch2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum22""), false)); input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum22""), false)); input.put(""Enum1$Enum11"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum11""), false)); input.put(""Enum2$Enum22"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum22""), false)); input.put(""SyntheticSwitchmapClass-*"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + ""Enum1$Enum11""), true).specifyInfo((classPrefix + ""Enum2$Enum22""), true)); checkCompiledCode(packageName, input); }",9233f4ead0fc5c1a89edfe8f54f11a85955bab3e,testCompile023(),testCompile023(),4,1,"@org.junit.Test public void testCompile023() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test023.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Switch2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum2_""), false)); input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum2"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum2_""), false)); input.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum2$Enum2_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum2$Enum2_""), false)); input.put(""SyntheticSwitchmapClass-*"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + ""Enum1$Enum1_""), true).specifyInfo((classPrefix + ""Enum2$Enum2_""), true)); checkCompiledCode(packageName, input); }",d9c66ef682ed7f51af627965efc62e5d30cf6a96,testCompile023(),299253,435,440
548206,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,75.0,synchronized android.bluetooth.BluetoothDevice getCurrentDevice() { return mCurrentDevice; },e6b170120ad11d3bcde5c31453d9d7e7f18f039d,synchronized android.bluetooth.BluetoothDevice getDevice() { return mCurrentDevice; },256c91682c4dee98624ba6b57a8044bfe7238cad,getCurrentDevice(),getDevice(),34,22,@android.support.annotation.VisibleForTesting public synchronized android.bluetooth.BluetoothDevice getDevice() { return mDevice; },7750e9e1f2e698b6a90a07e98b4a1ef27ca81c4a,getDevice(),210759,16,25
309005,src_java_com_android_internal_telephony_ServiceStateTracker.java,124.0,"protected void onUpdateIccAvailability() { if ((mUiccController) == null) { return; } com.android.internal.telephony.uicc.UiccCardApplication newUiccApplication = getUiccCardApplication(); if ((mUiccApplcation) != newUiccApplication) { if ((mUiccApplcation) != null) { log(""Removing stale icc objects.""); mUiccApplcation.unregisterForReady(this); if ((mIccRecords) != null) { mIccRecords.unregisterForRecordsLoaded(this); } mIccRecords = null; mUiccApplcation = null; } if (newUiccApplication != null) { log(""New card found""); mUiccApplcation = newUiccApplication; mIccRecords = mUiccApplcation.getIccRecords(); if (mPhone.isPhoneTypeGsm()) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_RECORDS_LOADED, null); } } else if (mIsSubscriptionFromRuim) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_RECORDS_LOADED, null); } } } } }",7ae55fe41ab648149c3fb2194ece8803715fe93a,"protected void onUpdateIccAvailability() { if ((mUiccController) == null) { return; } com.android.internal.telephony.uicc.UiccCardApplication newUiccApplication = getUiccCardApplication(); if ((mUiccApplcation) != newUiccApplication) { mIsSimReady = false; if ((mUiccApplcation) != null) { log(""Removing stale icc objects.""); mUiccApplcation.unregisterForReady(this); mUiccApplcation.unregisterForLocked(this); if ((mIccRecords) != null) { mIccRecords.unregisterForRecordsLoaded(this); } mIccRecords = null; mUiccApplcation = null; } if (newUiccApplication != null) { log(""New card found""); mUiccApplcation = newUiccApplication; mIccRecords = mUiccApplcation.getIccRecords(); if (mPhone.isPhoneTypeGsm()) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_READY, null); mUiccApplcation.registerForLocked(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_LOCKED, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_RECORDS_LOADED, null); } } else if (mIsSubscriptionFromRuim) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_RECORDS_LOADED, null); } } } } }",0f844fcc033e26365aeb6f8a0f212f38ae83fd20,onUpdateIccAvailability(),onUpdateIccAvailability(),6,141,"protected void onUpdateIccAvailability() { if ((mUiccController) == null) { return; } com.android.internal.telephony.uicc.UiccCardApplication newUiccApplication = getUiccCardApplication(); if ((mUiccApplcation) != newUiccApplication) { if ((mUiccApplcation) != null) { log(""Removing stale icc objects.""); mUiccApplcation.unregisterForReady(this); if ((mIccRecords) != null) { mIccRecords.unregisterForRecordsLoaded(this); } mIccRecords = null; mUiccApplcation = null; } if (newUiccApplication != null) { log(""New card found""); mUiccApplcation = newUiccApplication; mIccRecords = mUiccApplcation.getIccRecords(); if (mPhone.isPhoneTypeGsm()) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_RECORDS_LOADED, null); } } else if (mIsSubscriptionFromRuim) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_RECORDS_LOADED, null); } } } } }",7ae55fe41ab648149c3fb2194ece8803715fe93a,onUpdateIccAvailability(),452550,442,388
114079,luni_src_test_java_libcore_java_net_URLConnectionTest.java,39.0,"public void testAuthenticateWithPost() throws java.lang.Exception { com.google.mockwebserver.MockResponse pleaseAuthenticate = new com.google.mockwebserver.MockResponse().setResponseCode(401).addHeader(""WWW-Authenticate: Basic realm=\""protected area\"""").setBody(""Please authenticate.""); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""Successful auth!"")); server.play(); java.net.Authenticator.setDefault(new libcore.java.net.URLConnectionTest.SimpleAuthenticator()); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl(""/"").openConnection())); connection.setDoOutput(true); byte[] requestBody = new byte[]{ 'A', 'B', 'C', 'D' }; java.io.OutputStream outputStream = connection.getOutputStream(); outputStream.write(requestBody); outputStream.close(); assertEquals(""Successful auth!"", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContainsNoneMatching(request.getHeaders(), ""Authorization: .*""); for (int i = 0; i < 3; i++) { request = server.takeRequest(); assertEquals(""POST / HTTP/1.1"", request.getRequestLine()); assertContains(request.getHeaders(), (""Authorization: Basic "" + (libcore.java.net.URLConnectionTest.SimpleAuthenticator.BASE_64_CREDENTIALS))); assertEquals(java.util.Arrays.toString(requestBody), java.util.Arrays.toString(request.getBody())); } }",5da4aa1bd7bd7ef99a3aa1959de7c25fbf2f61a5,"public void testAuthenticateWithPost() throws java.lang.Exception { com.google.mockwebserver.MockResponse pleaseAuthenticate = new com.google.mockwebserver.MockResponse().setResponseCode(401).addHeader(""WWW-Authenticate: Basic realm=\""protected area\"""").setBody(""Please authenticate.""); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""Successful auth!"")); server.play(); java.net.Authenticator.setDefault(new libcore.java.net.URLConnectionTest.SimpleAuthenticator()); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl(""/"").openConnection())); connection.setDoOutput(true); byte[] requestBody = new byte[]{ 'A', 'B', 'C', 'D' }; java.io.OutputStream outputStream = connection.getOutputStream(); outputStream.write(requestBody); outputStream.close(); assertEquals(""Successful auth!"", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); libcore.java.net.URLConnectionTest.assertContainsNoneMatching(request.getHeaders(), ""Authorization: .*""); for (int i = 0; i < 3; i++) { request = server.takeRequest(); assertEquals(""POST / HTTP/1.1"", request.getRequestLine()); libcore.java.net.URLConnectionTest.assertContains(request.getHeaders(), (""Authorization: Basic "" + (libcore.java.net.URLConnectionTest.SimpleAuthenticator.BASE_64_CREDENTIALS))); assertEquals(java.util.Arrays.toString(requestBody), java.util.Arrays.toString(request.getBody())); } }",57160af694a601d9c5a34c68dd43ece90a82388d,testAuthenticateWithPost(),testAuthenticateWithPost(),3,39,"public void testAuthenticateWithPost() throws java.lang.Exception { com.google.mockwebserver.MockResponse pleaseAuthenticate = new com.google.mockwebserver.MockResponse().setResponseCode(401).addHeader(""WWW-Authenticate: Basic realm=\""protected area\"""").setBody(""Please authenticate.""); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""Successful auth!"")); server.play(); java.net.Authenticator.setDefault(new libcore.java.net.URLConnectionTest.SimpleAuthenticator()); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl(""/"").openConnection())); connection.setDoOutput(true); byte[] requestBody = new byte[]{ 'A', 'B', 'C', 'D' }; java.io.OutputStream outputStream = connection.getOutputStream(); outputStream.write(requestBody); outputStream.close(); assertEquals(""Successful auth!"", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContainsNoneMatching(request.getHeaders(), ""Authorization: .*""); for (int i = 0; i < 3; i++) { request = server.takeRequest(); assertEquals(""POST / HTTP/1.1"", request.getRequestLine()); assertContains(request.getHeaders(), (""Authorization: Basic "" + (libcore.java.net.URLConnectionTest.SimpleAuthenticator.BASE_64_CREDENTIALS))); assertEquals(java.util.Arrays.toString(requestBody), java.util.Arrays.toString(request.getBody())); } }",5da4aa1bd7bd7ef99a3aa1959de7c25fbf2f61a5,testAuthenticateWithPost(),455169,383,363
551290,src_com_android_bluetooth_hid_HidDeviceService.java,1.0,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp()""); } if ((mAppConfig) != null) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp: failed because app configuration already exists. ""); return false; } mAppConfig = config; mCallback = callback; return registerAppNative(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }",b6ca93237f2befb0e968282ad58632c12c27b1e5,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp()""); } if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp: failed because some user already uses it. ""); return false; } mAppConfig = config; mUserUid = android.os.Binder.getCallingUid(); android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (""registerApp: caller uid="" + (mUserUid))); mCallback = callback; return registerAppNative(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }",0a228e5697dd2886584f26854ff4d8d1132e8c17,"registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration,android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.IBluetoothHidDeviceCallback)","registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration,android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.IBluetoothHidDeviceCallback)",11,34,"synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, ""registerApp(): failed because another app is registered""); return false; } mUserUid = android.os.Binder.getCallingUid(); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (""registerApp(): calling uid="" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }",b2d65a63ae44c69993d15c553f526eb12f9e2902,"registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.IBluetoothHidDeviceCallback)",80265,312,270
579565,src_java_com_android_internal_telephony_RIL.java,139.0,"@java.lang.Override public void setCLIR(int clirMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" clirMode = "") + clirMode)); } try { radioProxy.setClir(rr.mSerial, clirMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCLIR"", e); } } }",406acb3dbfb32729c2337b5a7cca17028c007e72,"@java.lang.Override public void setCLIR(int clirMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" clirMode = "") + clirMode)); } try { radioProxy.setClir(rr.mSerial, clirMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCLIR"", e); } } }",3f2b4d66237be9e334fbf78c08c1acb46a665726,"setCLIR(int,android.os.Message)","setCLIR(int,android.os.Message)",3,139,"@java.lang.Override public void setCLIR(int clirMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" clirMode = "") + clirMode)); } try { radioProxy.setClir(rr.mSerial, clirMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCLIR"", e); } } }",406acb3dbfb32729c2337b5a7cca17028c007e72,"setCLIR(int,android.os.Message)",89241,232,228
63203,core_java_android_os_CountDownTimer.java,2.0,"@java.lang.Override public void handleMessage(android.os.Message msg) { synchronized(this) { final long millisLeft = (mStopTimeInFuture) - (android.os.SystemClock.elapsedRealtime()); if (millisLeft <= 0) { onFinish(); } else if (millisLeft < (mCountdownInterval)) { sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), millisLeft); } else { long lastTickStart = android.os.SystemClock.elapsedRealtime(); onTick(millisLeft); long delay = (lastTickStart + (mCountdownInterval)) - (android.os.SystemClock.elapsedRealtime()); while (delay < 0) delay += mCountdownInterval; sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), delay); } } }",191f13c8b7768e1dbff15b16bf4668ea1c3856c7,"@java.lang.Override public void handleMessage(android.os.Message msg) { synchronized(this) { final long millisLeft = (mStopTimeInFuture) - (android.os.SystemClock.elapsedRealtime()); if (millisLeft <= 0) { onFinish(); } else if (millisLeft < (mCountdownInterval)) { sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), millisLeft); } else { long lastTickStart = android.os.SystemClock.elapsedRealtime(); onTick(millisLeft); long delay = (lastTickStart + (mCountdownInterval)) - (android.os.SystemClock.elapsedRealtime()); while (delay < 0) delay += mCountdownInterval; if (!(mCancelled)) { sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), delay); } } } }",60ca018735ecf27b2e44eb867bbe8d6a8fbf6d21,handleMessage(android.os.Message),handleMessage(android.os.Message),2,2,"@java.lang.Override public void handleMessage(android.os.Message msg) { synchronized(this) { if (mCancelled) { return; } final long millisLeft = (mStopTimeInFuture) - (android.os.SystemClock.elapsedRealtime()); if (millisLeft <= 0) { onFinish(); } else if (millisLeft < (mCountdownInterval)) { sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), millisLeft); } else { long lastTickStart = android.os.SystemClock.elapsedRealtime(); onTick(millisLeft); long delay = (lastTickStart + (mCountdownInterval)) - (android.os.SystemClock.elapsedRealtime()); while (delay < 0) delay += mCountdownInterval; sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), delay); } } }",b0141bda4e1fe6e5d754a1ae964d03d10da5ce93,handleMessage(android.os.Message),45178,169,171
402363,src_java_com_android_internal_telephony_uicc_UiccCard.java,0.0,"public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { mCi.sendEnvelopeWithStatus(contents, response); }",e2bc9d72327f9a6b45b9a284a64f442d536cc94b,"public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { getCommandsInterface().sendEnvelopeWithStatus(contents, response); }",9e68e8674004fc098f84df0b6d0c4ea6ff381d46,"sendEnvelopeWithStatus(java.lang.String,android.os.Message)","sendEnvelopeWithStatus(java.lang.String,android.os.Message)",4,0,"public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { mCi.sendEnvelopeWithStatus(contents, response); }",e2bc9d72327f9a6b45b9a284a64f442d536cc94b,"sendEnvelopeWithStatus(java.lang.String,android.os.Message)",378776,36,36
19446,ide_common_src_com_android_ide_common_layoutlib_LayoutLibrary.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.layoutlib.api.LayoutScene createScene(com.android.layoutlib.api.SceneParams params) { if ((mBridge) != null) { mBridge.createScene(params); } else if ((mLegacyBridge) != null) { return createLegacyScene(params); } return null; },d92bc82385c02a9d6866fdc77f5d5be0b62f3b47,,createScene(com.android.layoutlib.api.SceneParams),7,0,public com.android.layoutlib.api.LayoutScene createScene(com.android.layoutlib.api.SceneParams params) { if ((mBridge) != null) { return mBridge.createScene(params); } else if ((mLegacyBridge) != null) { return createLegacyScene(params); } return null; },0572c5f47e0f07980b9e8544a8ef5ec8d808c95c,createScene(com.android.layoutlib.api.SceneParams),270984,74,75
18735,tools_vm-tests_src_dot_junit_opcodes_iget_short_Test_iget_short.java,8.0,"public void testVFE3() { try { java.lang.Class.forName(""dot.junit.opcodes.iget_short.d.T_iget_short_13""); fail(""expected a verification exception""); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }",29a02e75ea933c085dd15a876bcdd2f84f29723f,"public void testVFE3() { try { dot.junit.opcodes.iget_short.d.T_iget_short_13 t = new dot.junit.opcodes.iget_short.d.T_iget_short_13(); t.run(); fail(""expected a NoSuchFieldError exception""); } catch (java.lang.NoSuchFieldError e) { } }",ad3c4824381c2f894eb3dcb3bbae617c2da3f39a,testVFE3(),testVFE3(),2,8,"public void testVFE3() { try { new dot.junit.opcodes.iget_short.d.T_iget_short_13().run(); fail(""expected a NoSuchFieldError exception""); } catch (java.lang.NoSuchFieldError e) { } }",47fbaf5d81d4db9bd2ff98056d6e134c84967f7d,testVFE3(),456353,89,60
97764,luni_src_main_java_java_util_Locale.java,36.0,"public java.lang.String getDisplayVariant(java.util.Locale locale) { if ((variantCode.length()) == 0) { return variantCode; } java.lang.String result = libcore.icu.ICU.getDisplayVariantNative(getIcuLocaleId(), locale.getIcuLocaleId()); if (result == null) { result = libcore.icu.ICU.getDisplayVariantNative(getIcuLocaleId(), java.util.Locale.getDefault().getIcuLocaleId()); } return result; }",0d10ddda401ffead890bf6b200160307994c1af0,"public java.lang.String getDisplayVariant(java.util.Locale locale) { try { java.util.Locale.Builder.normalizeAndValidateVariant(variantCode); } catch (java.util.IllformedLocaleException ilfe) { return variantCode; } java.lang.String result = libcore.icu.ICU.getDisplayVariant(this, locale); if (result == null) { result = libcore.icu.ICU.getDisplayVariant(this, java.util.Locale.getDefault()); } if (result.isEmpty()) { return variantCode; } return result; }",b01591674055ae586109c72b67bd90149bb0ac6f,getDisplayVariant(java.util.Locale),getDisplayVariant(java.util.Locale),3,36,"public java.lang.String getDisplayVariant(java.util.Locale locale) { if (variantCode.isEmpty()) { return """"; } try { java.util.Locale.Builder.normalizeAndValidateVariant(variantCode); } catch (java.util.IllformedLocaleException ilfe) { return variantCode; } java.lang.String result = libcore.icu.ICU.getDisplayVariant(this, locale); if (result == null) { result = libcore.icu.ICU.getDisplayVariant(this, java.util.Locale.getDefault()); } if (result.isEmpty()) { return variantCode; } return result; }",d1ed097edfcaf315f21a2cc2fef21de46ab8e571,getDisplayVariant(java.util.Locale),360204,127,138
622432,src_com_android_bluetooth_btservice_AdapterService.java,82.0,public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { synchronized(mProfiles) { mProfiles.remove(profile); } },4659afdc57f814f370faf4e1e9556c0781b5e9ef,"public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { android.os.Message m = mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile); mHandler.sendMessage(m); }",fd25d49587844c0e99a61f5b6b5dfed7eab0c7d4,removeProfile(com.android.bluetooth.btservice.ProfileService),removeProfile(com.android.bluetooth.btservice.ProfileService),5,82,"public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile).sendToTarget(); }",bd57395777355b217e9093506ad6c45e0d1a5414,removeProfile(com.android.bluetooth.btservice.ProfileService),212346,62,52
542302,src_com_android_bluetooth_hfp_HeadsetSystemInterface.java,,,,"void init() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHeadsetPhone.class.getName()); intent.setComponent(intent.resolveSystemService(mService.getPackageManager(), 0)); if (((intent.getComponent()) == null) || (!(mService.bindService(intent, mPhoneProxyConnection, 0)))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, ""Could not bind to Bluetooth Headset Phone Service""); } }",951854b3a3833c749cd2f2e0b5647e0c61d16c67,,init(),16,11,"synchronized void init() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHeadsetPhone.class.getName()); intent.setComponent(intent.resolveSystemService(mHeadsetService.getPackageManager(), 0)); if (((intent.getComponent()) == null) || (!(mHeadsetService.bindService(intent, mPhoneProxyConnection, 0)))) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, (""Could not bind to IBluetoothHeadsetPhone Service, intent="" + intent)); } }",b2786747109620fbedcb250a9b74aee7a36321b8,init(),184698,114,127
112777,jack_src_com_android_jack_jayce_JaycePackageLoader.java,0.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }",87086df7614e3eb8091dca441e362a297301af81,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.library.LibraryFormatException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation(), e)); } catch (com.android.jack.jayce.JayceVersionException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation(), e)); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }",76b68046a86ff515a2e49ab8fd1a2e82322ce7a4,"loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)","loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)",12,0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.library.LibraryFormatException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { com.android.jack.jayce.JaycePackageLoader.logger.log(java.util.logging.Level.SEVERE, ((""Library "" + (inputJackLibrary.getLocation().getDescription())) + "" is invalid""), e); throw new com.android.jack.load.JackLoadingException(sub.getLocation(), new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation())); } catch (com.android.jack.jayce.JayceVersionException e) { com.android.jack.jayce.JaycePackageLoader.logger.log(java.util.logging.Level.SEVERE, ((""Library "" + (inputJackLibrary.getLocation().getDescription())) + "" is invalid""), e); throw new com.android.jack.load.JackLoadingException(sub.getLocation(), new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation())); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }",918d73b815ac7853fcb28ca7b330853dd6b5f67f,"loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)",442638,381,479
151050,tests_tests_tv_src_android_media_tv_cts_TvInputManagerTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void run() { mManager.registerCallback(mCallabck, new android.os.Handler()); mManager.unregisterCallback(mCallabck); }",a680e83375df4a3ebe0848953a0b2430d403fb6d,,run(),5,6,"@java.lang.Override public void run() { try { mManager.registerCallback(mCallabck, new android.os.Handler()); mManager.unregisterCallback(mCallabck); } catch (java.lang.Exception e) { fail(); } }",e87865837e42143f914810a3932dc04a9c5ca32c,run(),227172,41,57
101167,hierarchyviewer2_hierarchyviewer2lib_src_main_java_com_android_hierarchyviewerlib_ui_EvaluateContrastDisplay.java,,,,"private static void calculateBorderColorForViewNode(com.android.hierarchyviewerlib.models.ViewNode node, int result) { org.eclipse.swt.graphics.Color borderColor; switch (result) { case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_PASS : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorPass; break; case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_FAIL : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorFail; break; case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_INDETERMINATE : default : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorIndeterminate; } com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorForViewNode.put(node, borderColor); }",57b87adf40def3d5e2b750fe703a672cc6e4da87,,"calculateBorderColorForViewNode(com.android.hierarchyviewerlib.models.ViewNode,int)",6,20,"private static void calculateBorderColorForViewNode(com.android.hierarchyviewerlib.models.ViewNode node, com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult result) { org.eclipse.swt.graphics.Color borderColor; switch (result) { case PASS : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getBorderColorPass(); break; case FAIL : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getBorderColorFail(); break; case INDETERMINATE : default : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getBorderColorIndeterminate(); } com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorForViewNode.put(node, borderColor); }",f71b42f5d7003e44a254875c4e7c7ad8a6f3f993,"calculateBorderColorForViewNode(com.android.hierarchyviewerlib.models.ViewNode,com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult)",377082,232,193
407893,src_java_com_android_internal_telephony_UiccSmsController.java,24.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void sendTextForSubscriberWithOptions(int subId, java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String parts, android.app.PendingIntent sentIntents, android.app.PendingIntent deliveryIntents, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { com.android.internal.telephony.IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId); if (iccSmsIntMgr != null) { iccSmsIntMgr.sendTextWithOptions(callingPackage, destAddr, scAddr, parts, sentIntents, deliveryIntents, persistMessage, priority, isExpectMore, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.UiccSmsController.LOG_TAG, ((""sendTextWithOptions iccSmsIntMgr is null for"" + "" Subscription: "") + subId)); } }",d68fff6bbc08e95d95a6e7cc235eecff6599d52f,,"sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)",8,2,"@java.lang.Override public void sendTextForSubscriberWithOptions(int subId, java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String parts, android.app.PendingIntent sentIntents, android.app.PendingIntent deliveryIntents, boolean persistMessage, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId); if (iccSmsIntMgr != null) { iccSmsIntMgr.sendTextWithOptions(callingPackage, destAddr, scAddr, parts, sentIntents, deliveryIntents, persistMessage, priority, expectMore, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.UiccSmsController.LOG_TAG, ((""sendTextWithOptions iccSmsIntMgr is null for"" + "" Subscription: "") + subId)); } }",5a2ceceee635e8ffad576d970b65f8cffb118304,"sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)",20166,217,221
161835,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_model_ModelBuilder.java,10.0,"private com.android.build.gradle.internal.model.JavaArtifactImpl createUnitTestsJavaArtifact(@com.android.annotations.NonNull com.android.builder.core.VariantType variantType, @com.android.annotations.NonNull BaseVariantData<? extends BaseVariantOutputData> variantData) { com.android.build.gradle.internal.model.ModelBuilder.SourceProviders sourceProviders = com.android.build.gradle.internal.model.ModelBuilder.determineSourceProviders(variantData); com.android.build.gradle.internal.model.DependenciesImpl dependencies = com.android.build.gradle.internal.model.DependenciesImpl.cloneDependencies(variantData, androidBuilder); java.util.List<java.io.File> extraGeneratedSourceFolders = variantData.getExtraGeneratedSourceFolders(); return new com.android.build.gradle.internal.model.JavaArtifactImpl(variantType.getArtifactName(), variantData.assembleVariantTask.getName(), variantData.compileTask.getName(), com.google.common.collect.Sets.newHashSet(variantData.prepareDependenciesTask.getName(), taskManager.createMockableJar.getName()), (extraGeneratedSourceFolders != null ? extraGeneratedSourceFolders : java.util.Collections.<java.io.File>emptyList()), ((variantData.javacTask) != null ? variantData.javacTask.getDestinationDir() : variantData.getScope().getJavaOutputDir()), variantData.getScope().getJavaResourcesDestinationDir(), taskManager.createMockableJar.getOutputFile(), dependencies, sourceProviders.variantSourceProvider, sourceProviders.multiFlavorSourceProvider); }",073f8d4dc1a12a5b8ee608b09955433928af2b51,"private com.android.build.gradle.internal.model.JavaArtifactImpl createUnitTestsJavaArtifact(@com.android.annotations.NonNull com.android.builder.core.VariantType variantType, @com.android.annotations.NonNull BaseVariantData<? extends BaseVariantOutputData> variantData) { com.android.build.gradle.internal.model.ModelBuilder.SourceProviders sourceProviders = com.android.build.gradle.internal.model.ModelBuilder.determineSourceProviders(variantData); com.android.build.gradle.internal.model.DependenciesImpl dependencies = com.android.build.gradle.internal.model.DependenciesImpl.cloneDependencies(variantData, androidBuilder); java.util.List<java.io.File> extraGeneratedSourceFolders = variantData.getExtraGeneratedSourceFolders(); return new com.android.build.gradle.internal.model.JavaArtifactImpl(variantType.getArtifactName(), variantData.assembleVariantTask.getName(), variantData.compileTask.getName(), com.google.common.collect.Sets.newHashSet(variantData.prepareDependenciesTask.getName(), taskManager.createMockableJar.getName()), (extraGeneratedSourceFolders != null ? extraGeneratedSourceFolders : java.util.Collections.<java.io.File>emptyList()), ((variantData.javacTask) != null ? variantData.javacTask.getDestinationDir() : variantData.getScope().getJavaOutputDir()), variantData.getScope().getJavaResourcesDestinationDir(), taskManager.getGlobalScope().getMockableAndroidJarFile(), dependencies, sourceProviders.variantSourceProvider, sourceProviders.multiFlavorSourceProvider); }",02f0dd8b5306e4189bde3f42f672713b5334d6ec,"createUnitTestsJavaArtifact(com.android.builder.core.VariantType,com.android.build.gradle.internal.variant.BaseVariantData)","createUnitTestsJavaArtifact(com.android.builder.core.VariantType,com.android.build.gradle.internal.variant.BaseVariantData)",5,10,"private com.android.build.gradle.internal.model.JavaArtifactImpl createUnitTestsJavaArtifact(@com.android.annotations.NonNull com.android.builder.core.VariantType variantType, @com.android.annotations.NonNull BaseVariantData<? extends BaseVariantOutputData> variantData) { com.android.build.gradle.internal.model.ModelBuilder.SourceProviders sourceProviders = com.android.build.gradle.internal.model.ModelBuilder.determineSourceProviders(variantData); com.android.build.gradle.internal.model.DependenciesImpl dependencies = com.android.build.gradle.internal.model.DependenciesImpl.cloneDependencies(variantData, androidBuilder); java.util.List<java.io.File> extraGeneratedSourceFolders = variantData.getExtraGeneratedSourceFolders(); return new com.android.build.gradle.internal.model.JavaArtifactImpl(variantType.getArtifactName(), variantData.assembleVariantTask.getName(), variantData.getScope().getCompileTask().getName(), com.google.common.collect.Sets.newHashSet(variantData.prepareDependenciesTask.getName(), taskManager.createMockableJar.getName()), (extraGeneratedSourceFolders != null ? extraGeneratedSourceFolders : java.util.Collections.<java.io.File>emptyList()), ((variantData.javacTask) != null ? variantData.javacTask.getDestinationDir() : variantData.getScope().getJavaOutputDir()), variantData.getScope().getJavaResourcesDestinationDir(), taskManager.getGlobalScope().getMockableAndroidJarFile(), dependencies, sourceProviders.variantSourceProvider, sourceProviders.multiFlavorSourceProvider); }",1e3874f87ba42bfab29f89dfc795b86080e0f4d2,"createUnitTestsJavaArtifact(com.android.builder.core.VariantType,com.android.build.gradle.internal.variant.BaseVariantData)",331732,348,351
125783,jack_src_com_android_jack_library_v0001_InputJackLibraryImpl.java,16.0,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) throws com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.InputVFS prefixedInputVFS = new com.android.sched.vfs.PrefixedInputVFS(baseVFS, new com.android.sched.vfs.VPath(fileType.getPrefix(), '/')); if (fileType == (com.android.jack.library.FileType.DEX)) { currentSectionVFS = new com.android.sched.vfs.MessageDigestInputVFS(prefixedInputVFS); } else { currentSectionVFS = prefixedInputVFS; } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",bdc2baea3a84fa5ec216d002da643119574b1811,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, new com.android.sched.vfs.VPath(fileType.getPrefix(), '/')); } catch (com.android.sched.util.file.CannotCreateFileException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } if (fileType == (com.android.jack.library.FileType.DEX)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",6547d64d5a6ea19423b9364b122c27e6296c2777,getSectionVFS(com.android.jack.library.FileType),getSectionVFS(com.android.jack.library.FileType),3,16,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, new com.android.sched.vfs.VPath(fileType.getPrefix(), '/')); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.DEX)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",030672ec843e242b9b755c89583ae3ed1c800294,getSectionVFS(com.android.jack.library.FileType),262594,430,349
278609,telecomm_java_android_telecom_Log.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static void maybeDisableLogging() { if (!(android.telecom.Log.mIsUserExtendedLoggingEnabled)) { return; } if ((android.telecom.Log.mUserExtendedLoggingStopTime) < (java.lang.System.currentTimeMillis())) { android.telecom.Log.mUserExtendedLoggingStopTime = 0; android.telecom.Log.mIsUserExtendedLoggingEnabled = false; } },865a60a472408f942e162f2fcb672a76051e1456,,maybeDisableLogging(),3,13,private static void maybeDisableLogging() { if (!(android.telecom.Log.sIsUserExtendedLoggingEnabled)) { return; } if ((android.telecom.Log.sUserExtendedLoggingStopTime) < (java.lang.System.currentTimeMillis())) { android.telecom.Log.sUserExtendedLoggingStopTime = 0; android.telecom.Log.sIsUserExtendedLoggingEnabled = false; } },2152cf5ab273db2973884479587d149e0ee0f0e7,maybeDisableLogging(),122368,94,94
48539,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLX509Certificate.java,,,,@java.lang.Override public java.lang.String getSigAlgName() { return null; },67e37c88f739fe996a0a2c16e4772e201284b882,,getSigAlgName(),17,39,@java.lang.Override public java.lang.String getSigAlgName() { return org.apache.harmony.security.utils.AlgNameMapper.map2AlgName(getSigAlgOID()); },b78b3e2f955884d51610035d861784c3018d142b,getSigAlgName(),437042,22,46
159710,tests_tests_hardware_src_android_hardware_camera2_cts_testcases_Camera2AndroidTestCase.java,1.0,"protected void openDevice(java.lang.String cameraId, android.hardware.camera2.cts.testcases.BlockingStateCallback listener) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, listener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); if (android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.VERBOSE) { android.util.Log.v(android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.TAG, ((""Camera "" + cameraId) + "" is opened"")); } }",de677b35c24be2f285636f62990acac6fce0beab,"protected void openDevice(java.lang.String cameraId, android.hardware.camera2.cts.testcases.BlockingStateCallback listener) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, listener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, getDisplaySize()); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); if (android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.VERBOSE) { android.util.Log.v(android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.TAG, ((""Camera "" + cameraId) + "" is opened"")); } }",470bb4803243aacd3b313fbc7b7987b279513844,"openDevice(java.lang.String,android.hardware.camera2.cts.testcases.BlockingStateCallback)","openDevice(java.lang.String,android.hardware.camera2.cts.testcases.BlockingStateCallback)",4,1,"protected void openDevice(java.lang.String cameraId, android.hardware.camera2.cts.testcases.BlockingStateCallback listener) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, listener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, getPreviewSizeBound(mWindowManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND)); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); if (android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.VERBOSE) { android.util.Log.v(android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.TAG, ((""Camera "" + cameraId) + "" is opened"")); } }",c48072c1e90063d0c8280b266c534d69bf3b9723,"openDevice(java.lang.String,android.hardware.camera2.cts.testcases.BlockingStateCallback)",204202,276,301
180501,tools_tradefed-host_tests_src_com_android_cts_tradefed_result_CtsXmlResultReporterTest.java,4.0,"public void testSinglePass() { java.util.Map<java.lang.String, java.lang.String> emptyMap = java.util.Collections.emptyMap(); final com.android.ddmlib.testrunner.TestIdentifier testId = new com.android.ddmlib.testrunner.TestIdentifier(""com.foo.FooTest"", ""testFoo""); org.easymock.EasyMock.replay(mMockBuild); mResultReporter.invocationStarted(mMockBuild); mResultReporter.testRunStarted(com.android.cts.util.AbiUtils.createId(UnitTests.ABI.getName(), ""run""), 1); mResultReporter.testStarted(testId); mResultReporter.testEnded(testId, emptyMap); mResultReporter.testRunEnded(3000, emptyMap); mResultReporter.invocationEnded(1); mResultReporter.putSummary(com.android.cts.tradefed.result.CtsXmlResultReporterTest.SUMMARY_LIST); java.lang.String output = getOutput(); assertTrue(output.contains(""<Summary failed=\""0\"" notExecuted=\""0\"" timeout=\""0\"" pass=\""1\"" />"")); assertTrue(output.contains(((""<TestPackage name=\""\"" appPackageName=\""run\"" abi=\"""" + (UnitTests.ABI.getName())) + ""\"" digest=\""\"">""))); assertTrue(output.contains(""<TestCase name=\""FooTest\"" priority=\""\"">"")); final java.lang.String testCaseTag = java.lang.String.format(""<Test name=\""%s\"" result=\""pass\"""", testId.getTestName()); assertTrue(output.contains(testCaseTag)); org.easymock.EasyMock.verify(mMockBuild); }",9c00d381689522cf41a8c8f6c27840c960dfc4e2,"public void testSinglePass() { java.util.Map<java.lang.String, java.lang.String> emptyMap = java.util.Collections.emptyMap(); final com.android.ddmlib.testrunner.TestIdentifier testId = new com.android.ddmlib.testrunner.TestIdentifier(""com.foo.FooTest"", ""testFoo""); org.easymock.EasyMock.replay(mMockBuild); mResultReporter.invocationStarted(mMockBuild); mResultReporter.testRunStarted(com.android.cts.util.AbiUtils.createId(UnitTests.ABI.getName(), ""run""), 1); mResultReporter.testStarted(testId); mResultReporter.testEnded(testId, emptyMap); mResultReporter.testRunEnded(3000, emptyMap); mResultReporter.invocationEnded(1); mResultReporter.putSummary(com.android.cts.tradefed.result.CtsXmlResultReporterTest.SUMMARY_LIST); java.lang.String output = getOutput(); final java.lang.String expectedTestOutput = java.lang.String.format((""<TestResult testPlan=\""NA\"" starttime=\""ignore\"" endtime=\""ignore\"" "" + ""version=\""%s\"" suite=\""%s\"" referenceUrl=\""%s\""> ""), com.android.cts.tradefed.result.CtsXmlResultReporter.CTS_RESULT_FILE_VERSION, ""CTS"", com.android.cts.tradefed.result.CtsXmlResultReporterTest.TEST_SUMMARY_URL); assertTrue(output.contains(""<Summary failed=\""0\"" notExecuted=\""0\"" timeout=\""0\"" pass=\""1\"" />"")); assertTrue(output.contains(((""<TestPackage name=\""\"" appPackageName=\""run\"" abi=\"""" + (UnitTests.ABI.getName())) + ""\"" digest=\""\"">""))); assertTrue(output.contains(""<TestCase name=\""FooTest\"" priority=\""\"">"")); final java.lang.String testCaseTag = java.lang.String.format(""<Test name=\""%s\"" result=\""pass\"""", testId.getTestName()); assertTrue(output.contains(testCaseTag)); org.easymock.EasyMock.verify(mMockBuild); }",9bc8654dde604003acf83f916756c4327156c432,testSinglePass(),testSinglePass(),3,4,"public void testSinglePass() { java.util.Map<java.lang.String, java.lang.String> emptyMap = java.util.Collections.emptyMap(); final com.android.ddmlib.testrunner.TestIdentifier testId = new com.android.ddmlib.testrunner.TestIdentifier(""com.foo.FooTest"", ""testFoo""); org.easymock.EasyMock.replay(mMockBuild); mResultReporter.invocationStarted(mMockBuild); mResultReporter.testRunStarted(com.android.cts.util.AbiUtils.createId(UnitTests.ABI.getName(), ""run""), 1); mResultReporter.testStarted(testId); mResultReporter.testEnded(testId, emptyMap); mResultReporter.testRunEnded(3000, emptyMap); mResultReporter.putSummary(com.android.cts.tradefed.result.CtsXmlResultReporterTest.SUMMARY_LIST); mResultReporter.invocationEnded(1); java.lang.String output = getOutput(); final java.lang.String expectedTestOutput = java.lang.String.format((""<TestResult testPlan=\""NA\"" starttime=\""ignore\"" endtime=\""ignore\"" "" + ""version=\""%s\"" suite=\""%s\"" referenceUrl=\""%s\""> ""), com.android.cts.tradefed.result.CtsXmlResultReporter.CTS_RESULT_FILE_VERSION, ""CTS"", com.android.cts.tradefed.result.CtsXmlResultReporterTest.TEST_SUMMARY_URL); assertTrue((""Found output: "" + output), output.contains(expectedTestOutput)); assertTrue(output.contains(""<Summary failed=\""0\"" notExecuted=\""0\"" timeout=\""0\"" pass=\""1\"" />"")); assertTrue(output.contains(((""<TestPackage name=\""\"" appPackageName=\""run\"" abi=\"""" + (UnitTests.ABI.getName())) + ""\"" digest=\""\"">""))); assertTrue(output.contains(""<TestCase name=\""FooTest\"" priority=\""\"">"")); final java.lang.String testCaseTag = java.lang.String.format(""<Test name=\""%s\"" result=\""pass\"""", testId.getTestName()); assertTrue(output.contains(testCaseTag)); org.easymock.EasyMock.verify(mMockBuild); }",f283418c45ec9f8194705a6f0593604d13914365,testSinglePass(),370545,470,488
174172,jack-tests_tests_com_android_jack_annotation_processor_AnnotationProcessorTests.java,4.0,"@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); }",cc3cce9aa26d82db163d7af6dc54d361f278fcdf,"@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = com.android.sched.util.collect.Lists.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>create(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); }",3dce7027b169d7e0981767211b935ed2d273fd7d,compileWithAnnotationProcessorNoAuto_classpath(),compileWithAnnotationProcessorNoAuto_classpath(),3,4,"@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(); exclude.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); }",3cd7d236d0d7e775e44dd859d5a79f09b38e14fc,compileWithAnnotationProcessorNoAuto_classpath(),251548,401,396
153147,jack_src_com_android_jack_Options.java,9.0,public void setMetaDirs(@javax.annotation.Nonnull java.util.List<java.io.File> metaDirs) { metaImport = metaDirs; },a2a0e508acd4d17eb19bdb4baec43a183ee93b32,public void setMetaDirs(@javax.annotation.Nonnull java.util.List<java.io.File> metaDirs) { metaImport = new java.util.ArrayList<java.io.File>(metaDirs); },883f95c63781e9d82bef0efb16e1c5ad3520967e,setMetaDirs(java.util.List),setMetaDirs(java.util.List),3,9,public void setMetaDirs(@javax.annotation.Nonnull java.util.List<java.io.File> metaDirs) { metaImport = metaDirs; },a2a0e508acd4d17eb19bdb4baec43a183ee93b32,setMetaDirs(java.util.List),166095,48,34
111082,build-system_builder_src_test_java_com_android_builder_internal_compiler_PreDexCacheTest.java,4.0,"@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile(""predex"", "".jar""); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(input, output, dexOptions, mBuildToolInfo, false, clr); } catch (java.lang.Exception ignored) { } }",c46410375d39b86cc8ae5f292ba180372fba3b01,"@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile(""predex"", "".jar""); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(mDxExe, input, output, dexOptions, mBuildToolInfo, false, clr); } catch (java.lang.Exception ignored) { } }",daeb316f2dce3fae1e409f41f8d4364ba14b76a6,run(),run(),8,4,"@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile(""predex"", "".jar""); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(input, output, false, dexOptions, mBuildToolInfo, false, clr); } catch (java.lang.Exception ignored) { } }",9d83b17246dcfad71367339d76c5b2e7cdc3f6d4,run(),465073,103,100
517538,tests_tests_telephony_src_android_telephony_embms_cts_MbmsStreamingSessionTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testRequestUpdateStreamingServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList(""class1"", ""class2""); mStreamingSession.requestUpdateStreamingServices(testClasses); java.util.List<android.telephony.mbms.StreamingServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.StreamingServiceInfo>) (mCallback.waitOnStreamingServicesUpdated().arg1)); assertEquals(((android.telephony.mbms.ServiceInfo) (CtsStreamingService.STREAMING_SERVICE_INFO)), ((android.telephony.mbms.ServiceInfo) (serviceInfos.get(0)))); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<java.util.List> requestStreamingServicesCalls = getMiddlewareCalls(CtsStreamingService.METHOD_REQUEST_UPDATE_STREAMING_SERVICES); assertEquals(1, requestStreamingServicesCalls.size()); assertEquals(3, requestStreamingServicesCalls.get(0).size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = ((java.util.List<java.lang.String>) (requestStreamingServicesCalls.get(0).get(2))); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); }",922c678907c147e010d49c03ab16acd6421f98e3,,testRequestUpdateStreamingServices(),4,3,"public void testRequestUpdateStreamingServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList(""class1"", ""class2""); mStreamingSession.requestUpdateStreamingServices(testClasses); java.util.List<android.telephony.mbms.StreamingServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.StreamingServiceInfo>) (mCallback.waitOnStreamingServicesUpdated().arg1)); assertEquals(((android.telephony.mbms.ServiceInfo) (CtsStreamingService.STREAMING_SERVICE_INFO)), ((android.telephony.mbms.ServiceInfo) (serviceInfos.get(0)))); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<java.util.List> requestStreamingServicesCalls = getMiddlewareCalls(CtsStreamingService.METHOD_REQUEST_UPDATE_STREAMING_SERVICES); assertEquals(1, requestStreamingServicesCalls.size()); assertEquals(3, requestStreamingServicesCalls.get(0).size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = ((java.util.List<java.lang.String>) (requestStreamingServicesCalls.get(0).get(2))); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); for (int i = 0; i < (testClasses.size()); i++) { assertEquals(testClasses.get(i), middlewareReceivedServiceClasses.get(i)); } }",88f5de41765d735fdf00ae33f2cf0894a44ba2e8,testRequestUpdateStreamingServices(),427157,281,318
115825,luni_src_test_java_libcore_javax_net_ssl_DefaultHostnameVerifierTest.java,14.0,"public void testWildcardMatchesWildcardSuffix() { assertTrue(verifier.verifyHostName(""b.c.d"", ""*.b.c.d"")); assertTrue(verifier.verifyHostName(""imap.google.com"", ""*.imap.google.com"")); }",d72bec0b02a9f2731402246f054fa593589fb0da,"public void testWildcardsRejectedForIpAddress() { assertFalse(verifier.verify(""1.2.3.4"", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""cn=*.2.3.4""))); assertFalse(verifier.verify(""1.2.3.4"", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""cn=*.2.3.4"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME, ""*.2.3.4"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, ""*.2.3.4""))); assertFalse(verifier.verify(""2001:1234::1"", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""cn=*:1234::1""))); assertFalse(verifier.verify(""2001:1234::1"", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""cn=*:1234::1"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME, ""*:1234::1"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, ""*:1234::1""))); }",7029d3c7eb1cd0819970c79f8046df54772239ec,testWildcardMatchesWildcardSuffix(),testWildcardsRejectedForIpAddress(),4,40,"public void testWildcardsRejectedForIpAddress() { assertFalse(verifyWithServerCertificate(""1.2.3.4"", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""cn=*.2.3.4""))); assertFalse(verifyWithServerCertificate(""1.2.3.4"", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""cn=*.2.3.4"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME, ""*.2.3.4"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, ""*.2.3.4""))); assertFalse(verifyWithServerCertificate(""2001:1234::1"", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""cn=*:1234::1""))); assertFalse(verifyWithServerCertificate(""2001:1234::1"", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""cn=*:1234::1"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME, ""*:1234::1"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, ""*:1234::1""))); }",048b849297b4c6949c40400e93a41ccc3be73197,testWildcardsRejectedForIpAddress(),163266,285,289
90452,src_main_java_org_conscrypt_OpenSSLEngineImpl.java,,,,"@java.lang.Override public javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus() { synchronized(stateLock) { switch (engineState) { case HANDSHAKE_WANTED : if (getUseClientMode()) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP; } case HANDSHAKE_STARTED : if ((handshakeSink.available()) > 0) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP; } case HANDSHAKE_COMPLETED : if ((handshakeSink.available()) == 0) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } case NEW : case MODE_SET : case CLOSED : case READY : case READY_HANDSHAKE_CUT_THROUGH : return javax.net.ssl.SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING; default : break; } throw new java.lang.IllegalStateException((""Unexpected engine state: "" + (engineState))); } }",30dc884f1e212ee1a960ffd3ccacd11c26147144,,getHandshakeStatus(),11,31,"@java.lang.Override public javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus() { synchronized(stateLock) { switch (engineState) { case HANDSHAKE_WANTED : if (getUseClientMode()) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP; } case HANDSHAKE_STARTED : if ((handshakeSink.available()) > 0) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP; } case HANDSHAKE_COMPLETED : if ((handshakeSink.available()) == 0) { handshakeSink = null; engineState = org.conscrypt.OpenSSLEngineImpl.EngineState.READY; return javax.net.ssl.SSLEngineResult.HandshakeStatus.FINISHED; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } case NEW : case MODE_SET : case CLOSED : case READY : case READY_HANDSHAKE_CUT_THROUGH : return javax.net.ssl.SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING; default : break; } throw new java.lang.IllegalStateException((""Unexpected engine state: "" + (engineState))); } }",afdbedbddfd45adc31189a4d457651bdfc27fb31,getHandshakeStatus(),131327,300,317
231395,tools_dexfuzz_src_dexfuzz_executors_Device.java,10.0,"public java.lang.String getHostExecutionFlags() { return java.lang.String.format(""-Xnorelocate -Ximage:%s"", getHostCoreImagePath()); }",a0e45ff69317a7856e06bd72a709de6bcf0aadbd,"public java.lang.String getHostExecutionFlags() { return java.lang.String.format(""-Xnorelocate -Ximage:%s"", getHostPICCoreImagePath()); }",6b3ca9c590dced440d95323f8340b9cd4f26e9b5,getHostExecutionFlags(),getHostExecutionFlags(),3,10,"public java.lang.String getHostExecutionFlags() { return java.lang.String.format(""-Xnorelocate -Ximage:%s"", getHostCoreImagePathNoArch()); }",53a7d72077cc6f591d36533fe0a627d660951a32,getHostExecutionFlags(),299636,40,40
387398,telephony_java_android_telephony_mbms_vendor_MbmsStreamingServiceBase.java,6.0,"@java.lang.Override public int getStreamingServices(java.lang.String appName, int subId, java.util.List<java.lang.String> serviceClasses) throws android.os.RemoteException { return 0; }",36bedfcde61cfb4a61a891e15cf2e2f170761497,"@java.lang.Override public int getStreamingServices(java.lang.String appName, int subscriptionId, java.util.List<java.lang.String> serviceClasses) throws android.telephony.mbms.MbmsException { return 0; }",11df33eccfcd87952429033aa1f1a8c91cbd36fb,"getStreamingServices(java.lang.String,int,java.util.List)","getStreamingServices(java.lang.String,int,java.util.List)",4,6,"@java.lang.Override public int getStreamingServices(java.lang.String appName, int subscriptionId, java.util.List<java.lang.String> serviceClasses) throws android.os.RemoteException { return 0; }",7292d67d7194c1b5cf6713a2080928ab16031e33,"getStreamingServices(java.lang.String,int,java.util.List)",519016,53,48
62820,builder_src_main_java_com_android_builder_DefaultBuildType.java,7.0,public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; },bf6a92363f62fa278ea7bdf96849b595d4d30207,public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); setProguardRules(that.getProguardRules()); return this; },e68af17794a7347b35b1f4787196b99a85ec2abe,initWith(com.android.builder.DefaultBuildType),initWith(com.android.builder.DefaultBuildType),9,12,public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; },bf6a92363f62fa278ea7bdf96849b595d4d30207,initWith(com.android.builder.DefaultBuildType),105392,158,146
18753,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_ControlPoint.java,,,,public com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutPoint toLayout() { return mCanvas.controlToLayout(this); },d6f3a7ce47873bc8ec0e238ffa50e0c9615cabc6,,toLayout(),4,5,"public com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutPoint toLayout() { int lx = mCanvas.getHorizontalTransform().inverseTranslate(x); int ly = mCanvas.getVerticalTransform().inverseTranslate(y); return com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutPoint.create(mCanvas, lx, ly); }",b29405841d444e02bd995b684e41f1ad25dfff56,toLayout(),403643,38,94
83593,luni_src_test_java_libcore_java_util_zip_ZipFileTest.java,20.0,"public void testDuplicateEntries() throws java.lang.Exception { java.lang.String name1 = ""test_file_name1""; java.lang.String name2 = ""test_file_name2""; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(baos); out.putNextEntry(new java.util.zip.ZipEntry(name2)); out.closeEntry(); out.putNextEntry(new java.util.zip.ZipEntry(name1)); out.closeEntry(); out.close(); byte[] buffer = baos.toByteArray(); libcore.java.util.zip.ZipFileTest.replaceBytes(buffer, name2.getBytes(), name1.getBytes()); java.io.File badZip = createTemporaryZipFile(); libcore.java.util.zip.ZipFileTest.writeBytes(badZip, buffer); try { java.util.zip.ZipFile bad = new java.util.zip.ZipFile(badZip); fail(); } catch (java.util.zip.ZipException expected) { } }",1b426fc9510ace8d178a3b9bb38823ad7421823b,"public void testDuplicateEntries() throws java.lang.Exception { java.lang.String name1 = ""test_file_name1""; java.lang.String name2 = ""test_file_name2""; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(baos); out.putNextEntry(new java.util.zip.ZipEntry(name2)); byte[] bytes; bytes = ""bad"".getBytes(java.nio.charset.Charset.forName(""UTF-8"")); int badSize = bytes.length; out.write(bytes); out.closeEntry(); out.putNextEntry(new java.util.zip.ZipEntry(name1)); bytes = ""good"".getBytes(java.nio.charset.Charset.forName(""UTF-8"")); int goodSize = bytes.length; out.write(bytes); out.closeEntry(); out.close(); byte[] buffer = baos.toByteArray(); libcore.java.util.zip.ZipFileTest.replaceBytes(buffer, name2.getBytes(), name1.getBytes()); java.io.File badZip = createTemporaryZipFile(); libcore.java.util.zip.ZipFileTest.writeBytes(badZip, buffer); try { java.util.zip.ZipFile bad = new java.util.zip.ZipFile(badZip); java.util.zip.ZipEntry entry = bad.getEntry(name1); if (entry == null) { java.lang.System.err.println(""getEntry returns no entry""); } else { long entrySize = entry.getSize(); if (entrySize == badSize) { java.lang.System.err.println(""getEntry returns the first entry it finds""); } else if (entrySize == goodSize) { java.lang.System.err.println(""getEntry returns the second entry it finds""); } java.lang.System.err.println((""Size is: "" + entrySize)); } try { bad.close(); } catch (java.lang.Exception e) { } fail(); } catch (java.util.zip.ZipException expected) { } }",b8362db3a0aac1b114c505464b37cae1421fb762,testDuplicateEntries(),testDuplicateEntries(),11,22,"public void testDuplicateEntries() throws java.lang.Exception { java.lang.String name1 = ""test_file_name1""; java.lang.String name2 = ""test_file_name2""; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(baos); out.putNextEntry(new java.util.zip.ZipEntry(name2)); out.closeEntry(); out.putNextEntry(new java.util.zip.ZipEntry(name1)); out.closeEntry(); out.close(); byte[] buffer = baos.toByteArray(); libcore.java.util.zip.ZipFileTest.replaceBytes(buffer, name2.getBytes(), name1.getBytes()); java.io.File badZip = createTemporaryZipFile(); libcore.java.util.zip.ZipFileTest.writeBytes(badZip, buffer); try { java.util.zip.ZipFile bad = new java.util.zip.ZipFile(badZip); fail(); } catch (java.util.zip.ZipException expected) { } }",1b426fc9510ace8d178a3b9bb38823ad7421823b,testDuplicateEntries(),111950,455,239
169083,luni_src_main_java_java_util_TimerTask.java,0.0,long getWhen() { synchronized(lock) { return when; } },e4306efc5a47ef72b3e2142609f5f6d190137ba4,public boolean cancel() { synchronized(cancelled) { if (cancelled[0]) return false; cancelled[0] = true; return scheduled; } },b7435316109419b9fc579d825847d54562d5844a,getWhen(),cancel(),9,5,public boolean cancel() { synchronized(lock) { if (cancelled) { return false; } cancelled = true; return scheduled; } },c5b76c3d64921fefeb2bc9ffe3064f55ad951b74,cancel(),146833,27,28
583630,src_com_android_bips_p2p_P2pPrinterConnection.java,,,,"@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ""stop()""); if ((mMdnsDiscovery) != null) mMdnsDiscovery.stop(); if ((mMdnsDiscoveryTimeout) != null) mMdnsDiscoveryTimeout.stop(); if ((mConnection) != null) mConnection.stop(); mListener = null; }",df4043b808292c87927860ed934057e23c7e5c38,,stop(),4,6,"public void close() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ""close()""); mMdnsDiscovery.stop(this); if ((mMdnsDiscoveryTimeout) != null) { mMdnsDiscoveryTimeout.cancel(); } mService.getP2pMonitor().stopDiscover(this); mService.getP2pMonitor().stopConnect(this); mListener = null; }",f9e046804b911f4f20fea807d4956359f06ed06a,close(),33380,120,119
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLdexp.java,,,,"private void checkLdexpFloat2Int2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inY, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testLdexpFloat2Int2(inX, out); verifyResultsLdexpFloat2Int2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLdexpFloat2Int2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testLdexpFloat2Int2(inX, out); verifyResultsLdexpFloat2Int2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLdexpFloat2Int2: "" + (e.toString()))); } }",d94dcf2b1f27ba0eb137a5acf8fd7e47401edca3,,checkLdexpFloat2Int2(),9,6,"private void checkLdexpFloat2Int2Float2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -3037899856122973967L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 2, -3037899856122973967L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testLdexpFloat2Int2Float2(inX, out); verifyResultsLdexpFloat2Int2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLdexpFloat2Int2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testLdexpFloat2Int2Float2(inX, out); verifyResultsLdexpFloat2Int2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLdexpFloat2Int2Float2: "" + (e.toString()))); } }",d15a75158674ede53759a819e18ad7bcfd4d4af0,checkLdexpFloat2Int2Float2(),142828,448,402
16154,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_models_PixelPerfectModel.java,,,,"public void setCrosshairLocation(int x, int y) { synchronized(this) { crosshairLocation = new org.eclipse.swt.graphics.Point(x, y); } notifyCrosshairMoved(); }",fcb880eb1f25e002a505003a5e5cc02a6bcd2d23,,"setCrosshairLocation(int,int)",5,11,"public void setCrosshairLocation(int x, int y) { synchronized(this) { crosshairLocation = new com.android.hierarchyviewerlib.models.PixelPerfectModel.Point(x, y); } notifyCrosshairMoved(); }",92d96a6478586cd60d122cbe8c1aab80b68152e8,"setCrosshairLocation(int,int)",443944,48,54
578588,apps_CtsVerifier_src_com_android_cts_verifier_notifications_NotificationListenerVerifierActivity.java,7.0,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((mNm.getEffectsSuppressor()) == null) { status = PASS; } else { status = FAIL; } } next(); },55c22923ec252b941208601cf92d8562bc821ac6,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) { status = PASS; } else { status = FAIL; } } next(); },3ba15c5b3b7371fac7521a5ee82d40a04403e2d7,accept(int),accept(int),4,5,@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { status = FAIL; } } next(); },91690765eb3bdb1d64771230609e673d50b155c0,accept(int),140696,111,94
158074,core_java_android_hardware_camera2_legacy_LegacyExceptionUtils.java,0.0,"public static int throwOnError(int errorFlag) throws android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException { switch (errorFlag) { case android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR : { return android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR; } case android.hardware.camera2.utils.CameraBinderDecorator.ENODEV : { throw new android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException(); } } if (errorFlag < 0) { throw new java.lang.UnsupportedOperationException((""Unknown error "" + errorFlag)); } return errorFlag; }",7c345cf713997bd30e1464d7971d64d96f36d63a,"public static int throwOnError(int errorFlag) throws android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException { if (errorFlag == (android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR)) { return android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR; } else if (errorFlag == (android.hardware.camera2.utils.CameraBinderDecorator.ENODEV)) { throw new android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException(); } if (errorFlag < 0) { throw new java.lang.UnsupportedOperationException((""Unknown error "" + errorFlag)); } return errorFlag; }",00bff2db744131b9ae24cd8dc789621807f618e3,throwOnError(int),throwOnError(int),7,0,"public static int throwOnError(int errorFlag) throws android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException { if (errorFlag == (android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR)) { return android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR; } else if (errorFlag == (-(ENODEV))) { throw new android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException(); } if (errorFlag < 0) { throw new java.lang.UnsupportedOperationException((""Unknown error "" + errorFlag)); } return errorFlag; }",fc9a29af2fb36fedde480c2c1be22b7bc06c4cf9,throwOnError(int),40239,147,137
163491,src_main_java_org_conscrypt_OpenSSLX509Certificate.java,33.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public org.conscrypt.OpenSSLX509Certificate deleteExtension(java.lang.String oid) { long copy = org.conscrypt.NativeCrypto.X509_dup(mContext); org.conscrypt.NativeCrypto.X509_delete_ext(copy, oid); return new org.conscrypt.OpenSSLX509Certificate(copy); }",5b0561bbdda4d6d18fe0b6cd238131c49ff79a68,,deleteExtension(java.lang.String),10,35,"public org.conscrypt.OpenSSLX509Certificate withDeletedExtension(java.lang.String oid) { org.conscrypt.OpenSSLX509Certificate copy = new org.conscrypt.OpenSSLX509Certificate(org.conscrypt.NativeCrypto.X509_dup(mContext)); org.conscrypt.NativeCrypto.X509_delete_ext(copy.getContext(), oid); return copy; }",c70d0322c1f9948ff98865e2a3ba4a5d99f92b9f,withDeletedExtension(java.lang.String),48409,79,92
48539,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLX509Certificate.java,,,,@java.lang.Override public java.math.BigInteger getSerialNumber() { return null; },c7bd1eb3c65419da5f7d2083f97b730e37d40d80,,getSerialNumber(),17,28,@java.lang.Override public java.math.BigInteger getSerialNumber() { return new java.math.BigInteger(org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_get_serialNumber(mContext)); },a82a53281856719e4398d89408137a0cbfdb176f,getSerialNumber(),437058,20,52
363260,wifi_java_android_net_wifi_aware_WifiAwareNetworkSpecifier.java,4.0,@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { return equals(other); },d6e2df3683924d2a4364cc71875619aa1aa44cf9,"@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { boolean match = equals(other); if (match) { if (((!(uidOfCallerValid)) || (!(uidOfClientValid))) || ((uidOfCaller) != (uidOfClient))) { android.util.Log.e(""WifiAwareNetworkSpecifier"", ""satisfiedBy: mismatch of calling UID!?""); return false; } } return match; }",4d3a0f9d0c578a9538d80059fca093f234f6e395,satisfiedBy(android.net.NetworkSpecifier),satisfiedBy(android.net.NetworkSpecifier),16,4,@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { return equals(other); },d6e2df3683924d2a4364cc71875619aa1aa44cf9,satisfiedBy(android.net.NetworkSpecifier),291740,97,27
22202,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_wizards_newproject_NewProjectCreationPage.java,24.0,"private void loadSamplesForTarget(com.android.sdklib.IAndroidTarget target) { java.lang.String oldChoice = null; if ((mSamplesPaths.size()) > 0) { int selIndex = mSamplesCombo.getSelectionIndex(); if (selIndex > (-1)) { oldChoice = mSamplesCombo.getItem(selIndex); } } mSamplesCombo.removeAll(); mSamplesPaths.clear(); if (target != null) { java.lang.String samplesRootPath = target.getPath(IAndroidTarget.SAMPLES); java.io.File samplesDir = new java.io.File(samplesRootPath); findSamplesManifests(samplesDir, mSamplesPaths); if ((mSamplesPaths.size()) == 0) { mSamplesCombo.add(""This target has no samples. Please select another target.""); mSamplesCombo.select(0); return; } int selIndex = 0; int i = 0; int n = samplesRootPath.length(); for (java.lang.String path : mSamplesPaths) { if ((path.length()) > n) { path = path.substring(n); if ((path.charAt(0)) == (java.io.File.separatorChar)) { path = path.substring(1); } if (path.endsWith(java.io.File.separator)) { path = path.substring(0, ((path.length()) - 1)); } path = path.replaceAll(java.util.regex.Pattern.quote(java.io.File.separator), "" > ""); } if ((oldChoice != null) && (oldChoice.equals(path))) { selIndex = i; } mSamplesCombo.add(path); i++; } mSamplesCombo.select(selIndex); } else { mSamplesCombo.add(""Please select a target.""); mSamplesCombo.select(0); } }",903dde5ee37c58412146960cdab19eda1b1c629d,"private void loadSamplesForTarget(com.android.sdklib.IAndroidTarget target) { java.lang.String oldChoice = null; if ((mSamplesPaths.size()) > 0) { int selIndex = mSamplesCombo.getSelectionIndex(); if (selIndex > (-1)) { oldChoice = mSamplesCombo.getItem(selIndex); } } mSamplesCombo.removeAll(); mSamplesPaths.clear(); if (target != null) { java.lang.String samplesRootPath = target.getPath(IAndroidTarget.SAMPLES); java.io.File samplesDir = new java.io.File(samplesRootPath); findSamplesManifests(samplesDir, mSamplesPaths); if ((mSamplesPaths.size()) == 0) { mSamplesCombo.add(""This target has no samples. Please select another target.""); mSamplesCombo.select(0); return; } int selIndex = 0; int i = 0; int n = samplesRootPath.length(); java.util.Set<java.lang.String> paths = new java.util.TreeSet<java.lang.String>(); for (java.lang.String path : mSamplesPaths) { if ((path.length()) > n) { path = path.substring(n); if ((path.charAt(0)) == (java.io.File.separatorChar)) { path = path.substring(1); } if (path.endsWith(java.io.File.separator)) { path = path.substring(0, ((path.length()) - 1)); } path = path.replaceAll(java.util.regex.Pattern.quote(java.io.File.separator), "" > ""); } if ((oldChoice != null) && (oldChoice.equals(path))) { selIndex = i; } paths.add(path); i++; } mSamplesCombo.setItems(paths.toArray(new java.lang.String[0])); mSamplesCombo.select(selIndex); } else { mSamplesCombo.add(""Please select a target.""); mSamplesCombo.select(0); } }",7acd464a6b35d84cb903ebb410b434142557d8cc,loadSamplesForTarget(com.android.sdklib.IAndroidTarget),loadSamplesForTarget(com.android.sdklib.IAndroidTarget),3,24,"private void loadSamplesForTarget(com.android.sdklib.IAndroidTarget target) { java.lang.String oldChoice = null; if ((mSamplesPaths.size()) > 0) { int selIndex = mSamplesCombo.getSelectionIndex(); if (selIndex > (-1)) { oldChoice = mSamplesCombo.getItem(selIndex); } } mSamplesCombo.removeAll(); mSamplesPaths.clear(); if (target != null) { java.lang.String samplesRootPath = target.getPath(IAndroidTarget.SAMPLES); java.io.File samplesDir = new java.io.File(samplesRootPath); findSamplesManifests(samplesDir, mSamplesPaths); if ((mSamplesPaths.size()) == 0) { mSamplesCombo.add(""This target has no samples. Please select another target.""); mSamplesCombo.select(0); return; } else { java.util.Collections.sort(mSamplesPaths); } int selIndex = 0; int i = 0; int n = samplesRootPath.length(); java.util.Set<java.lang.String> paths = new java.util.TreeSet<java.lang.String>(); for (java.lang.String path : mSamplesPaths) { if ((path.length()) > n) { path = path.substring(n); if ((path.charAt(0)) == (java.io.File.separatorChar)) { path = path.substring(1); } if (path.endsWith(java.io.File.separator)) { path = path.substring(0, ((path.length()) - 1)); } path = path.replaceAll(java.util.regex.Pattern.quote(java.io.File.separator), "" > ""); } if ((oldChoice != null) && (oldChoice.equals(path))) { selIndex = i; } paths.add(path); i++; } mSamplesCombo.setItems(paths.toArray(new java.lang.String[0])); mSamplesCombo.select(selIndex); } else { mSamplesCombo.add(""Please select a target.""); mSamplesCombo.select(0); } }",a9b0f6f4baaccff2931a57c37bca06df70cbc33f,loadSamplesForTarget(com.android.sdklib.IAndroidTarget),259277,431,446
121741,core_java_android_util_NtpTrustedTime.java,6.0,"@java.lang.Override public boolean forceRefresh() { if ((mServer) == null) { return false; } if (android.util.NtpTrustedTime.LOGD) android.util.Log.d(android.util.NtpTrustedTime.TAG, ""forceRefresh() from cache miss""); final android.net.SntpClient client = new android.net.SntpClient(); if (client.requestTime(mServer, ((int) (mTimeout)))) { mHasCache = true; mCachedNtpTime = client.getNtpTime(); mCachedNtpElapsedRealtime = client.getNtpTimeReference(); mCachedNtpCertainty = (client.getRoundTripTime()) / 2; return true; } else { return false; } }",e7d849e10ef47ebe66e93bf7b295667f80183b91,"@java.lang.Override public boolean forceRefresh() { if ("""".equals(mServer)) { return false; } if (android.util.NtpTrustedTime.LOGD) android.util.Log.d(android.util.NtpTrustedTime.TAG, ""forceRefresh() from cache miss""); final android.net.SntpClient client = new android.net.SntpClient(); if (client.requestTime(mServer, ((int) (mTimeout)))) { mHasCache = true; mCachedNtpTime = client.getNtpTime(); mCachedNtpElapsedRealtime = client.getNtpTimeReference(); mCachedNtpCertainty = (client.getRoundTripTime()) / 2; return true; } else { return false; } }",5116cffd0df1ce7eff95632f3161349602235882,forceRefresh(),forceRefresh(),2,6,"@java.lang.Override public boolean forceRefresh() { if (android.text.TextUtils.isEmpty(mServer)) { return false; } if (android.util.NtpTrustedTime.LOGD) android.util.Log.d(android.util.NtpTrustedTime.TAG, ""forceRefresh() from cache miss""); final android.net.SntpClient client = new android.net.SntpClient(); if (client.requestTime(mServer, ((int) (mTimeout)))) { mHasCache = true; mCachedNtpTime = client.getNtpTime(); mCachedNtpElapsedRealtime = client.getNtpTimeReference(); mCachedNtpCertainty = (client.getRoundTripTime()) / 2; return true; } else { return false; } }",743afb31d34656f0095ea67c15eee48e693c7e66,forceRefresh(),396611,167,170
112777,jack_src_com_android_jack_backend_jayce_JayceFileImporter.java,0.0,"public void doImport(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.backend.jayce.ImportConflictException, com.android.jack.ir.ast.JPackageLookupException, com.android.jack.ir.ast.JTypeLookupException { for (com.android.jack.library.InputJackLibrary inputJackLibrary : inputJackLibraries) { com.android.sched.vfs.InputRootVDir libraryVDir = inputJackLibrary.getInputVDir(); com.android.jack.backend.jayce.JayceFileImporter.logger.log(java.util.logging.Level.FINE, ""Importing {0}"", libraryVDir.getLocation().getDescription()); for (com.android.sched.vfs.InputVElement subFile : libraryVDir.list()) { importJayceFile(inputJackLibrary, subFile, session, """"); } } }",688e605aac4378ab09bb2c8ce026b59458b01629,"public void doImport(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.backend.jayce.ImportConflictException, com.android.jack.ir.ast.JPackageLookupException, com.android.jack.ir.ast.JTypeLookupException { for (com.android.jack.library.InputLibrary inputLibrary : inputLibraries) { com.android.sched.vfs.InputRootVDir libraryVDir = inputLibrary.getInputVDir(); com.android.jack.backend.jayce.JayceFileImporter.logger.log(java.util.logging.Level.FINE, ""Importing {0}"", libraryVDir.getLocation().getDescription()); for (com.android.sched.vfs.InputVElement subFile : libraryVDir.list()) { importJayceFile(inputLibrary, subFile, session, """"); } } }",74a4e40bfc208c5204ab89940b9e8a8c99c46f97,doImport(com.android.jack.ir.ast.JSession),doImport(com.android.jack.ir.ast.JSession),12,0,"public void doImport(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.backend.jayce.ImportConflictException, com.android.jack.ir.ast.JPackageLookupException, com.android.jack.ir.ast.JTypeLookupException { for (com.android.jack.library.InputJackLibrary jackLibrary : jackLibraries) { com.android.sched.vfs.InputRootVDir libraryVDir = jackLibrary.getInputVDir(); com.android.jack.backend.jayce.JayceFileImporter.logger.log(java.util.logging.Level.FINE, ""Importing {0}"", libraryVDir.getLocation().getDescription()); for (com.android.sched.vfs.InputVElement subFile : libraryVDir.list()) { importJayceFile(jackLibrary, subFile, session, """"); } } }",5aaa6bce50c0436209d03799ba36bfbcbf67f4f4,doImport(com.android.jack.ir.ast.JSession),442657,200,204
91712,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_model_BuildTypeImpl.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isInstrumented() { return instrumented; },6eb5d30c519702598f12daae189d84c62d42ceb9,,isInstrumented(),6,10,@java.lang.Override public boolean isTestCoverageEnabled() { return testCoverageEnabled; },3f00179041e1e6387d7255877c595c60c3a9749e,isTestCoverageEnabled(),289429,16,20
194142,apps_CtsVerifier_src_com_android_cts_verifier_managedprovisioning_DisallowAppsControlActivity.java,,,,"private void allowAppsControl() { android.content.Intent allowAppsControlIntent = new android.content.Intent(ByodHelperActivity.ACTION_RESET_USER_RESTRICTION).putExtra(ByodHelperActivity.EXTRA_PARAMETER_1, UserManager.DISALLOW_APPS_CONTROL); startActivity(allowAppsControlIntent); }",29f6d2a3edf22aa75a40a7f8ab6cdd1bb9aaed17,,allowAppsControl(),2,5,"private void allowAppsControl() { android.content.Intent allowAppsControlIntent = new android.content.Intent(ByodHelperActivity.ACTION_CLEAR_USER_RESTRICTION); allowAppsControlIntent.putExtra(ByodHelperActivity.EXTRA_PARAMETER_1, UserManager.DISALLOW_APPS_CONTROL); startActivity(allowAppsControlIntent); }",359e9ae049de6eaea907b7926a21e9327f6f275a,allowAppsControl(),33794,69,74
555848,telephony_java_android_telephony_ims_internal_feature_MmTelFeature.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int getSmsFormat() { return getSmsImplementation().getSmsFormat(); },884e20df3bd59326b8a89db32e26061daa1d7754,,getSmsFormat(),17,43,private java.lang.String getSmsFormat() { return getSmsImplementation().getSmsFormat(); },cd7c737d662ebdb6cea25a0556768044639a6412,getSmsFormat(),374176,17,21
579565,src_java_com_android_internal_telephony_RIL.java,160.0,"@java.lang.Override public void requestIsimAuthentication(java.lang.String nonce, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ISIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" nonce = "") + nonce)); } try { radioProxy.requestIsimAuthentication(rr.mSerial, convertNullToEmptyString(nonce)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""requestIsimAuthentication"", e); } } }",b1e65891cb7184c8c7b72fab545134739aea32fd,"@java.lang.Override public void requestIsimAuthentication(java.lang.String nonce, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ISIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" nonce = "") + nonce)); } try { radioProxy.requestIsimAuthentication(rr.mSerial, convertNullToEmptyString(nonce)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""requestIsimAuthentication"", e); } } }",a017320f599052028b9a833483ab5dfc7620df84,"requestIsimAuthentication(java.lang.String,android.os.Message)","requestIsimAuthentication(java.lang.String,android.os.Message)",3,160,"@java.lang.Override public void requestIsimAuthentication(java.lang.String nonce, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ISIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" nonce = "") + nonce)); } try { radioProxy.requestIsimAuthentication(rr.mSerial, convertNullToEmptyString(nonce)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""requestIsimAuthentication"", e); } } }",b1e65891cb7184c8c7b72fab545134739aea32fd,"requestIsimAuthentication(java.lang.String,android.os.Message)",89248,233,229
49448,gradle_src_fromGradle_groovy_com_android_build_gradle_internal_test_report_PackagePageRenderer.java,,,,public void execute(org.w3c.dom.Element element) { renderClasses(element); },11ff8437f8d4788b7d806bc3fd3aba5c23a757a0,,execute(org.w3c.dom.Element),3,4,@java.lang.Override public void execute(org.w3c.dom.Element element) { renderClasses(element); },24d7c87370ac4908d2367bfb00913a2cd7380413,execute(org.w3c.dom.Element),17231,22,28
105710,core_java_android_text_format_TimeFormatter.java,1.0,"private void formatInternal(java.lang.String pattern, libcore.util.ZoneInfo.WallTime wallTime, libcore.util.ZoneInfo zoneInfo) { byte[] bytes = pattern.getBytes(java.nio.charset.StandardCharsets.US_ASCII); if ((bytes.length) == 0) { return; } java.nio.ByteBuffer formatBuffer = java.nio.ByteBuffer.wrap(bytes); while ((formatBuffer.remaining()) > 0) { boolean outputCurrentByte = true; char currentByteAsChar = android.text.format.TimeFormatter.convertToChar(formatBuffer.get(formatBuffer.position())); if (currentByteAsChar == '%') { outputCurrentByte = handleToken(formatBuffer, wallTime, zoneInfo); } if (outputCurrentByte) { currentByteAsChar = android.text.format.TimeFormatter.convertToChar(formatBuffer.get(formatBuffer.position())); outputBuilder.append(currentByteAsChar); } formatBuffer.position(((formatBuffer.position()) + 1)); } }",612d3eff04ed64f0eee123065dba1a41f5181f5d,"private void formatInternal(java.lang.String pattern, libcore.util.ZoneInfo.WallTime wallTime, libcore.util.ZoneInfo zoneInfo) { byte[] bytes = pattern.getBytes(java.nio.charset.StandardCharsets.UTF_8); if ((bytes.length) == 0) { return; } java.nio.ByteBuffer formatBuffer = java.nio.ByteBuffer.wrap(bytes); while ((formatBuffer.remaining()) > 0) { boolean outputCurrentByte = true; byte currentByte = formatBuffer.get(formatBuffer.position()); if (currentByte == '%') { outputCurrentByte = handleToken(formatBuffer, wallTime, zoneInfo); } if (outputCurrentByte) { outputByte(formatBuffer.get(formatBuffer.position())); } formatBuffer.position(((formatBuffer.position()) + 1)); } }",2a0a503b62e14774efa1679f64e5369fee48b0d8,"formatInternal(java.lang.String,libcore.util.ZoneInfo$WallTime,libcore.util.ZoneInfo)","formatInternal(java.lang.String,libcore.util.ZoneInfo$WallTime,libcore.util.ZoneInfo)",4,1,"private void formatInternal(java.lang.String pattern, libcore.util.ZoneInfo.WallTime wallTime, libcore.util.ZoneInfo zoneInfo) { java.nio.CharBuffer formatBuffer = java.nio.CharBuffer.wrap(pattern); while ((formatBuffer.remaining()) > 0) { boolean outputCurrentChar = true; char currentChar = formatBuffer.get(formatBuffer.position()); if (currentChar == '%') { outputCurrentChar = handleToken(formatBuffer, wallTime, zoneInfo); } if (outputCurrentChar) { outputBuilder.append(formatBuffer.get(formatBuffer.position())); } formatBuffer.position(((formatBuffer.position()) + 1)); } }",108265f4285850110579782d911fb3cd9bada869,"formatInternal(java.lang.String,libcore.util.ZoneInfo$WallTime,libcore.util.ZoneInfo)",46529,180,150
339204,ojluni_src_main_java_java_util_Locale.java,63.0,"private static java.util.Locale initDefault(java.util.Locale.Category category) { return java.util.Locale.getInstance(java.lang.System.getProperty(category.languageKey, java.util.Locale.defaultLocale.getLanguage()), java.lang.System.getProperty(category.scriptKey, java.util.Locale.defaultLocale.getScript()), java.lang.System.getProperty(category.countryKey, java.util.Locale.defaultLocale.getCountry()), java.lang.System.getProperty(category.variantKey, java.util.Locale.defaultLocale.getVariant()), null); }",2aab3ed1fc3c99903a2560b89146f14c40bc1a22,"private static java.util.Locale initDefault(java.util.Locale.Category category) { return java.util.Locale.getInstance(java.lang.System.getProperty(category.languageKey, java.util.Locale.NoImagePreloadHolder.defaultLocale.getLanguage()), java.lang.System.getProperty(category.scriptKey, java.util.Locale.NoImagePreloadHolder.defaultLocale.getScript()), java.lang.System.getProperty(category.countryKey, java.util.Locale.NoImagePreloadHolder.defaultLocale.getCountry()), java.lang.System.getProperty(category.variantKey, java.util.Locale.NoImagePreloadHolder.defaultLocale.getVariant()), null); }",a3fb18be16e8a4aecc18a47d05014ecdadadf83a,initDefault(java.util.Locale$Category),initDefault(java.util.Locale$Category),3,63,"private static java.util.Locale initDefault(java.util.Locale.Category category) { final java.util.Locale defaultLocale = java.util.Locale.NoImagePreloadHolder.defaultLocale; return java.util.Locale.getInstance(java.lang.System.getProperty(category.languageKey, defaultLocale.getLanguage()), java.lang.System.getProperty(category.scriptKey, defaultLocale.getScript()), java.lang.System.getProperty(category.countryKey, defaultLocale.getCountry()), java.lang.System.getProperty(category.variantKey, defaultLocale.getVariant()), null); }",3aeaa9d553a98c9c330fcf736315c8cf63f53137,initDefault(java.util.Locale$Category),356690,157,133
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,28.0,"public void addF64(android.support.v8.renderscript.Double3 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addF64(new android.renderscript.Double3(v.x, v.y, v.z)); return; } addF64(v.x); addF64(v.y); addF64(v.z); }",eef41493b41f16bec13286ca01e03e817353ecd0,"public void addF64(android.support.v8.renderscript.Double3 v) { if (shouldThunk()) { mN.addF64(new android.renderscript.Double3(v.x, v.y, v.z)); return; } addF64(v.x); addF64(v.y); addF64(v.z); }",3ca53873673508b37d21e29c468d55fb60ddedce,addF64(android.support.v8.renderscript.Double3),addF64(android.support.v8.renderscript.Double3),5,27,"public void addF64(android.support.v8.renderscript.Double3 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addF64(new android.renderscript.Double3(v.x, v.y, v.z)); return; } addF64(v.x); addF64(v.y); addF64(v.z); }",eef41493b41f16bec13286ca01e03e817353ecd0,addF64(android.support.v8.renderscript.Double3),205161,80,93
158444,sdk-common_src_main_java_com_android_ide_common_res2_ResourceSet.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void processNewResourceFile(java.io.File sourceFolder, com.android.ide.common.res2.ResourceFile resourceFile) throws com.android.ide.common.res2.MergingException { if (resourceFile != null) { if ((resourceFile.getType()) == (DataFile.FileType.GENERATED_FILES)) { mGeneratedSet.processNewDataFile(sourceFolder, resourceFile, true); } else { processNewDataFile(sourceFolder, resourceFile, true); } } }",b810a2d4ef53ed3ed1b38940887c6b14c15f3550,,"processNewResourceFile(java.io.File,com.android.ide.common.res2.ResourceFile)",8,15,"private void processNewResourceFile(java.io.File sourceFolder, com.android.ide.common.res2.ResourceFile resourceFile) throws com.android.ide.common.res2.MergingException { if (resourceFile != null) { if (((resourceFile.getType()) == (DataFile.FileType.GENERATED_FILES)) && ((mGeneratedSet) != null)) { mGeneratedSet.processNewDataFile(sourceFolder, resourceFile, true); } else { processNewDataFile(sourceFolder, resourceFile, true); } } }",6d3c164dcd25cb4215ea4a9f1431b6c069845c29,"processNewResourceFile(java.io.File,com.android.ide.common.res2.ResourceFile)",237533,108,117
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLength.java,,,,"private void checkLengthFloat4() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat4(inV, out); verifyResultsLengthFloat4(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat4(inV, out); verifyResultsLengthFloat4(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat4: "" + (e.toString()))); } }",e4eded5af3dbc039430290f92730df987fc41305,,checkLengthFloat4(),9,2,"private void checkLengthFloat4Float() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 4404006062516304480L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat4Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat4Float: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat4Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat4Float: "" + (e.toString()))); } }",b162a05a472188fb51aa84a286af7bd92114d089,checkLengthFloat4Float(),143417,324,273
465279,core_java_android_bluetooth_le_AdvertisingSetParameters.java,10.0,public android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.includeTxPower = includeTxPower; return this; },49eadb3730dbc738a98a5887b6b4717fdca63185,public android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.mIncludeTxPower = includeTxPower; return this; },b6d4376367cd688b8095718ad41b72465d11a807,setIncludeTxPower(boolean),setIncludeTxPower(boolean),9,10,public android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean includeTxPower) { mIncludeTxPower = includeTxPower; return this; },e3a626abe350023fc7561d365b056181bb40b799,setIncludeTxPower(boolean),2267,40,38
95694,lint_cli_src_test_java_com_android_tools_lint_checks_PluralsDetectorTest.java,7.0,"public void test2() throws java.lang.Exception { assertEquals(("""" + (((((((((""res/values-cs/plurals3.xml:3: Error: For locale \""cs\"" (Czech) the following quantities should also be defined: few, many [MissingQuantity]\n"" + "" <plurals name=\""draft\"">\n"") + "" ^\n"") + ""res/values-zh-rCN/plurals3.xml:3: Warning: For language \""zh\"" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n"") + "" <plurals name=\""draft\"">\n"") + "" ^\n"") + ""res/values-zh-rCN/plurals3.xml:7: Warning: For language \""zh\"" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n"") + "" <plurals name=\""title_day_dialog_content\"">\n"") + "" ^\n"") + ""1 errors, 2 warnings\n"")), lintProject(""res/values-zh-rCN/plurals3.xml"", ""res/values-cs/plurals3.xml"")); }",787c4110a4a21b7a90e21266ed250343d9a6578f,"public void test2() throws java.lang.Exception { mEnabled = com.google.common.collect.Sets.newHashSet(PluralsDetector.MISSING, PluralsDetector.EXTRA); assertEquals(("""" + (((((((((""res/values-cs/plurals3.xml:3: Error: For locale \""cs\"" (Czech) the following quantities should also be defined: few, many [MissingQuantity]\n"" + "" <plurals name=\""draft\"">\n"") + "" ^\n"") + ""res/values-zh-rCN/plurals3.xml:3: Warning: For language \""zh\"" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n"") + "" <plurals name=\""draft\"">\n"") + "" ^\n"") + ""res/values-zh-rCN/plurals3.xml:7: Warning: For language \""zh\"" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n"") + "" <plurals name=\""title_day_dialog_content\"">\n"") + "" ^\n"") + ""1 errors, 2 warnings\n"")), lintProject(""res/values-zh-rCN/plurals3.xml"", ""res/values-cs/plurals3.xml"")); }",015cd2ba3b7048d050e7f4181bbb391819b8322a,test2(),test2(),2,7,"public void test2() throws java.lang.Exception { mEnabled = com.google.common.collect.Sets.newHashSet(PluralsDetector.MISSING, PluralsDetector.EXTRA); assertEquals(("""" + (((((((((""res/values-cs/plurals3.xml:3: Error: For locale \""cs\"" (Czech) the following quantities should also be defined: few [MissingQuantity]\n"" + "" <plurals name=\""draft\"">\n"") + "" ^\n"") + ""res/values-zh-rCN/plurals3.xml:3: Warning: For language \""zh\"" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n"") + "" <plurals name=\""draft\"">\n"") + "" ^\n"") + ""res/values-zh-rCN/plurals3.xml:7: Warning: For language \""zh\"" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n"") + "" <plurals name=\""title_day_dialog_content\"">\n"") + "" ^\n"") + ""1 errors, 2 warnings\n"")), lintProject(""res/values-zh-rCN/plurals3.xml"", ""res/values-cs/plurals3.xml"")); }",62d47b29ae9a61fa7ae375ee86e9b3c021b2c671,test2(),260254,283,281
42029,src_com_android_settings_wifi_p2p_WifiP2pSettings.java,19.0,private void updateDevicePref() { if ((mThisDevice) != null) { if (android.text.TextUtils.isEmpty(mThisDevice.deviceName)) { mThisDevicePref.setTitle(mThisDevice.deviceAddress); } else { mThisDevicePref.setTitle(mThisDevice.deviceName); } mThisDevicePref.setPersistent(false); mThisDevicePref.setEnabled(true); mThisDevicePref.setSelectable(false); } },23a474b705db90d0d4487ed7af2b1b784cf99938,"private void updateDevicePref() { if ((mThisDevice) != null) { if (android.text.TextUtils.isEmpty(mThisDevice.deviceName)) { mThisDevicePref.setTitle(mThisDevice.deviceAddress); } else { mThisDevicePref.setTitle(mThisDevice.deviceName); } java.lang.String[] statusArray = getResources().getStringArray(R.array.wifi_p2p_status); java.lang.StringBuffer sb = new java.lang.StringBuffer(); sb.append(statusArray[mThisDevice.status]); if (((mConnectedGroup) != null) && (!(android.text.TextUtils.isEmpty(mConnectedGroup.getNetworkName())))) { sb.append(""(""); sb.append(mConnectedGroup.getNetworkName()); sb.append("")""); } mThisDevicePref.setSummary(sb.toString()); mThisDevicePref.setPersistent(false); mThisDevicePref.setEnabled(true); mThisDevicePref.setSelectable(false); } }",6a4883ea618455a26eb9676e2e96cef4df87a6ac,updateDevicePref(),updateDevicePref(),2,21,private void updateDevicePref() { if ((mThisDevice) != null) { if (android.text.TextUtils.isEmpty(mThisDevice.deviceName)) { mThisDevicePref.setTitle(mThisDevice.deviceAddress); } else { mThisDevicePref.setTitle(mThisDevice.deviceName); } mThisDevicePref.setPersistent(false); mThisDevicePref.setEnabled(true); mThisDevicePref.setSelectable(false); } },23a474b705db90d0d4487ed7af2b1b784cf99938,updateDevicePref(),381242,213,97
360729,wifi_java_android_net_wifi_aware_WifiAwareNetworkSpecifier.java,,,,@java.lang.Override public android.net.wifi.aware.WifiAwareNetworkSpecifier createFromParcel(android.os.Parcel in) { android.net.wifi.aware.WifiAwareNetworkSpecifier ns = new android.net.wifi.aware.WifiAwareNetworkSpecifier(); ns.type = in.readInt(); ns.role = in.readInt(); ns.clientId = in.readInt(); ns.sessionId = in.readInt(); ns.peerId = in.readInt(); ns.peerMac = in.createByteArray(); ns.pmk = in.createByteArray(); ns.passphrase = in.readString(); return ns; },f353d91a688c98c20408326c0258b3b8464b9548,,createFromParcel(android.os.Parcel),15,5,"@java.lang.Override public android.net.wifi.aware.WifiAwareNetworkSpecifier createFromParcel(android.os.Parcel in) { return new android.net.wifi.aware.WifiAwareNetworkSpecifier(in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.createByteArray(), in.createByteArray(), in.readString()); }",b2800171d73f9fa498fe22e44b652b202e8f40f5,createFromParcel(android.os.Parcel),43167,132,81
175242,src_test_java_org_conscrypt_OpenSSLSocketImplTest.java,11.0,"public void test_handshake_failsWithInvalidSCT() throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection(new java.security.cert.X509Certificate[]{ cert, ca }, certKey); connection.clientHooks.ctVerifier = ctVerifier; connection.clientHooks.ctVerificationEnabled = true; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils.readTestFile(""ct-signed-timestamp-list-invalid""); try { connection.doHandshake(); fail(""SSLHandshakeException not thrown""); } catch (java.util.concurrent.ExecutionException e) { assertEquals(javax.net.ssl.SSLHandshakeException.class, e.getCause().getClass()); assertEquals(java.security.cert.CertificateException.class, e.getCause().getCause().getClass()); } }",afe215a227fe771750188c893ba3995eb0fee27d,"public void test_handshake_failsWithInvalidSCT() throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection(new java.security.cert.X509Certificate[]{ cert, ca }, certKey); connection.clientHooks.ctVerificationEnabled = true; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils.readTestFile(""ct-signed-timestamp-list-invalid""); try { connection.doHandshake(); fail(""SSLHandshakeException not thrown""); } catch (java.util.concurrent.ExecutionException e) { assertEquals(javax.net.ssl.SSLHandshakeException.class, e.getCause().getClass()); assertEquals(java.security.cert.CertificateException.class, e.getCause().getCause().getClass()); } }",a82adba4adf546bbfff0c4ed2c5e235dfe666cea,test_handshake_failsWithInvalidSCT(),test_handshake_failsWithInvalidSCT(),7,13,"public void test_handshake_failsWithInvalidSCT() throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection(new java.security.cert.X509Certificate[]{ cert, ca }, certKey, true); connection.clientHooks.ctVerificationEnabled = true; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils.readTestFile(""ct-signed-timestamp-list-invalid""); try { connection.doHandshake(); fail(""SSLHandshakeException not thrown""); } catch (java.util.concurrent.ExecutionException e) { assertEquals(javax.net.ssl.SSLHandshakeException.class, e.getCause().getClass()); assertEquals(java.security.cert.CertificateException.class, e.getCause().getCause().getClass()); } }",3577902fd4f66143d5f23c21478afe021cc14b5a,test_handshake_failsWithInvalidSCT(),94997,186,188
498031,luni_src_test_java_libcore_java_text_DecimalFormatTest.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testPerMill() { java.lang.String pattern = ""0.00\u2030""; double number = 0.1; java.text.DecimalFormatSymbols dfs; android.icu.text.DecimalFormatSymbols icuDfs; java.util.Locale locale; locale = java.util.Locale.US; dfs = new java.text.DecimalFormatSymbols(locale); assertEquals(""100.00\u2030"", new java.text.DecimalFormat(pattern, dfs).format(number)); dfs = new java.text.DecimalFormatSymbols(locale); dfs.setPerMill(';'); assertEquals(""100.00;"", new java.text.DecimalFormat(pattern, dfs).format(number)); locale = new java.util.Locale(""ar""); icuDfs = new android.icu.text.DecimalFormatSymbols(locale); assertEquals(""؉"", icuDfs.getPerMillString()); dfs = new java.text.DecimalFormatSymbols(locale); assertEquals(""١٠٠٫٠٠؉"", new java.text.DecimalFormat(pattern, dfs).format(number)); locale = new java.util.Locale(""en_US_POSIX""); icuDfs = new android.icu.text.DecimalFormatSymbols(locale); assertEquals(""0/00"", icuDfs.getPerMillString()); dfs = new java.text.DecimalFormatSymbols(locale); assertEquals(""100.00\u2030"", new java.text.DecimalFormat(pattern, dfs).format(number)); }",a5096c998f4969c7b5f3b59cd7524f6cefbe7639,,testPerMill(),12,12,"public void testPerMill() { java.lang.String pattern = ""0\u2030""; double number = 0.1; java.util.Locale locale; locale = java.util.Locale.US; { android.icu.text.DecimalFormat df = new android.icu.text.DecimalFormat(pattern, new android.icu.text.DecimalFormatSymbols(locale)); assertEquals(""100\u2030"", df.format(number)); } for (java.text.DecimalFormat df : libcore.java.text.DecimalFormatTest.createDecimalFormatInstances(locale, pattern)) { assertEquals(""100\u2030"", df.format(number)); } java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(locale); dfs.setPerMill(';'); assertEquals(""100;"", new java.text.DecimalFormat(pattern, dfs).format(number)); locale = new java.util.Locale(""ar""); { android.icu.text.DecimalFormat df = new android.icu.text.DecimalFormat(pattern, new android.icu.text.DecimalFormatSymbols(locale)); assertEquals(""\u0609"", df.getDecimalFormatSymbols().getPerMillString()); assertEquals(""\u0661\u0660\u0660\u0609"", df.format(number)); } for (java.text.DecimalFormat df : libcore.java.text.DecimalFormatTest.createDecimalFormatInstances(locale, pattern)) { assertEquals('\u0609', df.getDecimalFormatSymbols().getPerMill()); assertEquals(""\u0661\u0660\u0660\u0609"", df.format(number)); } locale = new java.util.Locale(""en_US_POSIX""); { android.icu.text.DecimalFormat df = new android.icu.text.DecimalFormat(pattern, new android.icu.text.DecimalFormatSymbols(locale)); assertEquals(""0/00"", df.getDecimalFormatSymbols().getPerMillString()); assertEquals(""1000/00"", df.format(number)); } for (java.text.DecimalFormat df : libcore.java.text.DecimalFormatTest.createDecimalFormatInstances(locale, pattern)) { assertEquals('\u2030', df.getDecimalFormatSymbols().getPerMill()); assertEquals(""100\u2030"", df.format(number)); } }",d8634d4577387c1938a004631032f683a778582c,testPerMill(),222692,298,478
220691,jack_src_com_android_jack_library_v0002_InputJackLibraryImpl.java,7.0,"@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { if (((linkedOutputJackLib) == null) && (!(originalVFS.isClosed()))) { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } } }",c355cebaab2163d87da3f398d05b90c6855bed07,"@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { if ((linkedOutputJackLib) != null) { linkedOutputJackLib.notifyToClose(); } else if (!(originalVFS.isClosed())) { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } } }",65c0f6db784eb79a95fbb44e65a15a40cbcdc46c,close(),close(),3,7,"@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { if (!(closed)) { if ((linkedOutputJackLib) != null) { linkedOutputJackLib.notifyToClose(); } else if (!(originalVFS.isClosed())) { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } } closed = true; } }",651140a0391d61eb5ee2a524c4f64633ed6dc464,close(),472716,122,132
114765,build-system_integration-test_src_test_groovy_com_android_test_common_fixture_GradleTestProject.java,8.0,"public void execute(java.util.List<java.lang.String> arguments, @com.android.annotations.Nullable java.io.OutputStream stdout, java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); connection.newBuild().forTasks(tasks).setStandardOutput(stdout).withArguments(args.toArray(new java.lang.String[args.size()])).run(); } finally { connection.close(); } }",0e1734cf78b6e90ce32dacf996b77dbf04fbb099,"@com.android.annotations.Nullable public com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, @com.android.annotations.Nullable java.io.OutputStream stdout, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); connection.newBuild().forTasks(tasks).setStandardOutput(stdout).withArguments(args.toArray(new java.lang.String[args.size()])).run(); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }",6b8cc35c18b53cc0aa6b606310dacb47db2e2092,"execute(java.util.List,java.io.OutputStream,java.lang.String[])","execute(java.util.List,java.io.OutputStream,boolean,java.lang.String[])",2,15,"@com.android.annotations.Nullable private com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, @com.android.annotations.Nullable java.io.OutputStream stdout, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); connection.newBuild().forTasks(tasks).setStandardOutput(stdout).withArguments(args.toArray(new java.lang.String[args.size()])).run(); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }",cffd114f2a2c52240abf9662e8da797c6a9f9e94,"execute(java.util.List,java.io.OutputStream,boolean,java.lang.String[])",174901,227,227
159876,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_BuildType.java,4.0,@java.lang.Override protected void _initWith(@com.android.annotations.NonNull com.android.builder.model.BaseConfig that) { super._initWith(that); shrinkResources = that.isShrinkResources(); useJack = that.useJack; },19661d65758100da2e8714d06fe36d4806961a80,@java.lang.Override protected void _initWith(@com.android.annotations.NonNull com.android.builder.model.BaseConfig that) { super._initWith(that); shrinkResources = ((com.android.build.gradle.internal.dsl.BuildType) (that)).isShrinkResources(); useJack = ((com.android.build.gradle.internal.dsl.BuildType) (that)).getUseJack(); },2dd29f22ed81f8411f19c7826a82a3f147174668,_initWith(com.android.builder.model.BaseConfig),_initWith(com.android.builder.model.BaseConfig),3,5,@java.lang.Override protected void _initWith(@com.android.annotations.NonNull com.android.builder.model.BaseConfig that) { super._initWith(that); com.android.build.gradle.internal.dsl.BuildType thatBuildType = ((com.android.build.gradle.internal.dsl.BuildType) (that)); shrinkResources = thatBuildType.isShrinkResources(); useJack = thatBuildType.getUseJack(); },44a5e55f0577c39632faad4589591070ada17e0f,_initWith(com.android.builder.model.BaseConfig),29501,98,102
61442,core_java_android_net_SSLCertificateSocketFactory.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setAlpnProtocols(byte[][] protocols) { this.mAlpnProtocols = android.net.SSLCertificateSocketFactory.toNpnProtocolsList(protocols); },84fe6d3c1cfc8e4159392fe263d2747208da52e7,,setAlpnProtocols(byte[][]),2,10,public void setAlpnProtocols(byte[][] protocols) { this.mAlpnProtocols = android.net.SSLCertificateSocketFactory.toLengthPrefixedList(protocols); },280b3c0f7168a9c92423bac159620a46c03100f5,setAlpnProtocols(byte[][]),48451,36,36
207740,luni_src_test_java_libcore_java_util_ArraysTest.java,,,,"public void test_setAll$T() { java.lang.String[] strings = new java.lang.String[3]; strings[0] = ""a""; strings[0] = ""b""; strings[0] = ""c""; java.util.Arrays.setAll(strings, ( x) -> ""a"" + x); assertEquals(""a0"", strings[0]); assertEquals(""a1"", strings[1]); assertEquals(""a2"", strings[2]); try { java.util.Arrays.setAll(strings, null); fail(); } catch (java.lang.NullPointerException e) { } }",8c522447d653f6c004fd380e49f0adcd0e162239,,test_setAll$T(),4,0,"public void test_setAll$T() { java.lang.String[] strings = new java.lang.String[3]; strings[0] = ""a""; strings[0] = ""b""; strings[0] = ""c""; java.util.Arrays.setAll(strings, ( x) -> ""a"" + x); assertEquals(""a0"", strings[0]); assertEquals(""a1"", strings[1]); assertEquals(""a2"", strings[2]); try { java.util.Arrays.setAll(strings, null); fail(); } catch (java.lang.NullPointerException e) { } try { java.util.Arrays.setAll(((java.lang.String[]) (null)), ( x) -> ""a"" + x); fail(); } catch (java.lang.NullPointerException e) { } }",c9478f584eb8f2ad3f38e30fc4a67d9a01fc4183,test_setAll$T(),450466,110,155
159496,android-studio-plugin_src_com_google_gct_idea_appengine_wizard_NewCloudModuleDynamicWizardStep.java,12.0,"@java.lang.SuppressWarnings(""unchecked"") private void initClientModuleCombo() { final java.lang.Module[] modules = com.intellij.openapi.module.ModuleManager.getInstance(myProject).getModules(); for (java.lang.Module module : modules) { final org.jetbrains.android.facet.AndroidFacet facet = org.jetbrains.android.facet.AndroidFacet.getInstance(module); if ((facet != null) && ((com.intellij.openapi.roots.ModuleRootManager.getInstance(module).getContentRoots().length) > 0)) { java.lang.String moduleNameLabel = module.getName(); if ((facet.getManifest()) != null) { final java.lang.String packageName = facet.getManifest().getPackage().getValue(); if (!(com.google.common.base.Strings.isNullOrEmpty(packageName))) { moduleNameLabel += java.lang.String.format("" (%s)"", packageName); } } myClientModuleCombo.addItem(new com.android.tools.idea.wizard.ComboBoxItem(module.getName(), moduleNameLabel, 1, 1)); } } }",0a3850f9877eec091c59c232b52f18d3f7174251,"@java.lang.SuppressWarnings(""unchecked"") private void initClientModuleCombo() { final java.lang.Module[] modules = com.intellij.openapi.module.ModuleManager.getInstance(myProject).getModules(); for (java.lang.Module module : modules) { final org.jetbrains.android.facet.AndroidFacet facet = org.jetbrains.android.facet.AndroidFacet.getInstance(module); if ((facet != null) && ((com.intellij.openapi.roots.ModuleRootManager.getInstance(module).getContentRoots().length) > 0)) { java.lang.String moduleNameLabel = module.getName(); if ((facet.getManifest()) != null) { final java.lang.String packageName = facet.getManifest().getPackage().getValue(); if (!(com.google.common.base.Strings.isNullOrEmpty(packageName))) { moduleNameLabel += java.lang.String.format("" (%s)"", packageName); } } myClientModuleCombo.addItem(new com.android.tools.idea.ui.ApiComboBoxItem(module.getName(), moduleNameLabel, 1, 1)); } } }",90f45638ea6ed297d475c9df052d3ee5a542d9e0,initClientModuleCombo(),initClientModuleCombo(),3,12,"@java.lang.SuppressWarnings(""unchecked"") private void initClientModuleCombo() { final java.lang.Module[] modules = com.intellij.openapi.module.ModuleManager.getInstance(myProject).getModules(); for (java.lang.Module module : modules) { final org.jetbrains.android.facet.AndroidFacet facet = org.jetbrains.android.facet.AndroidFacet.getInstance(module); if ((facet != null) && ((com.intellij.openapi.roots.ModuleRootManager.getInstance(module).getContentRoots().length) > 0)) { java.lang.String moduleNameLabel = module.getName(); if ((facet.getManifest()) != null) { final java.lang.String packageName = facet.getManifest().getPackage().getValue(); if (!(com.google.common.base.Strings.isNullOrEmpty(packageName))) { moduleNameLabel += java.lang.String.format("" (%s)"", packageName); } } myClientModuleCombo.addItem(new com.android.tools.idea.ui.ComboBoxItemWithApiTag(module.getName(), moduleNameLabel, 1, 1)); } } }",d7c195c59760f766d244c2de018a3fb6370fcff6,initClientModuleCombo(),259170,237,239
339044,service_java_com_android_server_wifi_WifiMonitor.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void handleWpsTimeoutEvent(java.lang.String iface) { sendMessage(iface, com.android.server.wifi.WifiMonitor.WPS_TIMEOUT_EVENT); }",db7ff660212018af7cb5e9ce7b9368946074193e,,handleWpsTimeoutEvent(java.lang.String),6,38,"public void broadcastWpsTimeoutEvent(java.lang.String iface) { sendMessage(iface, com.android.server.wifi.WifiMonitor.WPS_TIMEOUT_EVENT); }",ccb0022a7bd73ea79dd59fcf6d3cf132e75f08aa,broadcastWpsTimeoutEvent(java.lang.String),429973,40,40
148485,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_VariantManager.java,14.0,"public void addBuildType(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType) { buildType.init(signingConfigs.get(com.android.builder.core.BuilderConstants.DEBUG)); java.lang.String name = buildType.getName(); com.android.build.gradle.internal.VariantManager.checkName(name, ""BuildType""); if (productFlavors.containsKey(name)) { throw new java.lang.RuntimeException(""BuildType names cannot collide with ProductFlavor names""); } com.android.build.gradle.internal.api.DefaultAndroidSourceSet mainSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSetsContainer().maybeCreate(name))); com.android.build.gradle.internal.api.DefaultAndroidSourceSet unitTestSourceSet = null; if (variantFactory.hasTestScope()) { unitTestSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSetsContainer().maybeCreate(com.android.build.gradle.internal.VariantManager.computeSourceSetName(buildType.getName(), com.android.builder.core.VariantType.UNIT_TEST)))); } com.android.build.gradle.internal.BuildTypeData buildTypeData = new com.android.build.gradle.internal.BuildTypeData(buildType, project, mainSourceSet, unitTestSourceSet); project.getTasks().getByName(""assemble"").dependsOn(buildTypeData.getAssembleTask()); buildTypes.put(name, buildTypeData); }",30eb48d1ebde710cecbeedf11ce2be573bf6454a,"public void addBuildType(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType) { buildType.init(signingConfigs.get(com.android.builder.core.BuilderConstants.DEBUG)); java.lang.String name = buildType.getName(); com.android.build.gradle.internal.VariantManager.checkName(name, ""BuildType""); if (productFlavors.containsKey(name)) { throw new java.lang.RuntimeException(""BuildType names cannot collide with ProductFlavor names""); } com.android.build.gradle.internal.api.DefaultAndroidSourceSet mainSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSetsContainer().maybeCreate(name))); com.android.build.gradle.internal.api.DefaultAndroidSourceSet unitTestSourceSet = null; if (variantFactory.hasTestScope()) { unitTestSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSetsContainer().maybeCreate(com.android.build.gradle.internal.VariantManager.computeSourceSetName(buildType.getName(), com.android.builder.core.VariantType.UNIT_TEST)))); } com.android.build.gradle.internal.BuildTypeData buildTypeData = new com.android.build.gradle.internal.BuildTypeData(buildType, project, mainSourceSet, unitTestSourceSet); buildTypes.put(name, buildTypeData); }",ab40a088eb7cd109a6576886c85c4b265acd3138,addBuildType(com.android.build.gradle.internal.dsl.BuildType),addBuildType(com.android.build.gradle.internal.dsl.BuildType),3,0,"public void addBuildType(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.CoreBuildType buildType) { java.lang.String name = buildType.getName(); com.android.build.gradle.internal.VariantManager.checkName(name, ""BuildType""); if (productFlavors.containsKey(name)) { throw new java.lang.RuntimeException(""BuildType names cannot collide with ProductFlavor names""); } com.android.build.gradle.internal.api.DefaultAndroidSourceSet mainSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSets().maybeCreate(name))); com.android.build.gradle.internal.api.DefaultAndroidSourceSet unitTestSourceSet = null; if (variantFactory.hasTestScope()) { unitTestSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSets().maybeCreate(com.android.build.gradle.internal.VariantManager.computeSourceSetName(buildType.getName(), com.android.builder.core.VariantType.UNIT_TEST)))); } com.android.build.gradle.internal.BuildTypeData buildTypeData = new com.android.build.gradle.internal.BuildTypeData(buildType, project, mainSourceSet, unitTestSourceSet); buildTypes.put(name, buildTypeData); }",be7301cafd3fcc0bd124a5e03fc54e3fe71ef60a,addBuildType(com.android.build.gradle.internal.dsl.CoreBuildType),321253,334,309
91995,luni_src_main_java_java_lang_Runtime.java,6.0,public int availableProcessors() { return ((int) (Libcore.os.sysconf(_SC_NPROCESSORS_CONF))); },503cfff5c1a514d84f61bc98a40454ee3a2607b8,public int availableProcessors() { return ((int) (Libcore.os.sysconf(android.os.OsConstants._SC_NPROCESSORS_CONF))); },092c319afb9cacd7250ad8f4ded224cb36fa2071,availableProcessors(),availableProcessors(),3,6,public int availableProcessors() { return ((int) (Libcore.os.sysconf(android.system.OsConstants._SC_NPROCESSORS_CONF))); },9ed801d749b143ddd2ac56133789a345380c50d9,availableProcessors(),169340,38,38
70141,tests_tests_security_src_android_security_cts_SELinuxTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean runAccessCheck(java.lang.String source_type, java.lang.String target_type, java.lang.String obj_class, java.lang.String perm) { java.lang.String s_usr = ""u""; java.lang.String t_usr = ""u""; java.lang.String s_role = ""r""; java.lang.String t_role; if (obj_class.equals(""filesystem"")) { s_role = ""object_r""; t_role = ""object_r""; } else if (obj_class.equals(""process"")) { t_role = ""r""; } else { t_role = ""object_r""; } java.lang.String source = java.lang.String.format(""%s:%s:%s:s0"", s_usr, s_role, source_type); java.lang.String target = java.lang.String.format(""%s:%s:%s:s0"", t_usr, t_role, target_type); return android.security.cts.SELinuxTest.checkSELinuxAccess(source, target, obj_class, perm, """"); }",f2c9cde2ccf7de0fe7d3c4705803574fe4edb276,,"runAccessCheck(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",10,7,"private java.lang.String createAvcContext(java.lang.String domain, boolean target, java.lang.String obj_class, java.lang.String perm) { java.lang.String usr = ""u""; java.lang.String role; if ((obj_class.equals(""filesystem"")) && (perm.equals(""associate""))) { role = ""object_r""; } else if ((obj_class.equals(""process"")) || (obj_class.endsWith(""socket""))) { role = ""r""; } else if (target) { role = ""object_r""; } else { role = ""r""; } return java.lang.String.format(""%s:%s:%s:s0"", usr, role, domain); }",602ca16d954fd1ed5cb46075be67a3c718e797fe,"createAvcContext(java.lang.String,boolean,java.lang.String,java.lang.String)",476526,261,161
91995,luni_src_main_java_android_os_StructTimeval.java,,,,"public static android.os.StructTimeval fromMillis(long millis) { long tv_sec = millis / 1000; long tv_usec = (millis - (tv_sec * 1000)) * 1000; return new android.os.StructTimeval(tv_sec, tv_usec); }",4f9d9a277e9b12c370d78961e6ef0aee6e60525f,,fromMillis(long),3,1,"public static android.system.StructTimeval fromMillis(long millis) { long tv_sec = millis / 1000; long tv_usec = (millis - (tv_sec * 1000)) * 1000; return new android.system.StructTimeval(tv_sec, tv_usec); }",7281a80293bd09ed0c13fb47985b62b5344dcad9,fromMillis(long),170553,63,63
19035,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_GraphicalEditorPart.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public org.eclipse.core.resources.IResource findResourceFile(java.lang.String url) { if (!(url.startsWith(""@""))) { return null; } int typeEnd = url.indexOf('/', 1); if (typeEnd == (-1)) { return null; } java.lang.String typeName = url.substring(1, typeEnd); com.android.ide.eclipse.adt.internal.resources.ResourceType type = com.android.ide.eclipse.adt.internal.resources.ResourceType.getEnum(typeName); if (type == null) { return null; } java.lang.String name = url.substring((typeEnd + 1)); return findResourceFile(type, name); }",c506b04a8c59efaf41a87ca83ee0dac239491523,,findResourceFile(java.lang.String),2,74,"public org.eclipse.core.runtime.IPath findResourceFile(java.lang.String url) { if (!(url.startsWith(""@""))) { return null; } int typeEnd = url.indexOf('/', 1); if (typeEnd == (-1)) { return null; } int nameBegin = typeEnd + 1; int typeBegin = 1; int colon = url.lastIndexOf(':', typeEnd); boolean isFrameworkResource = false; if (colon != (-1)) { java.lang.String packageName = url.substring(typeBegin, colon); if (""android"".equals(packageName)) { isFrameworkResource = true; } typeBegin = colon + 1; } java.lang.String typeName = url.substring(typeBegin, typeEnd); com.android.ide.eclipse.adt.internal.resources.ResourceType type = com.android.ide.eclipse.adt.internal.resources.ResourceType.getEnum(typeName); if (type == null) { return null; } java.lang.String name = url.substring(nameBegin); return findResourceFile(type, name, isFrameworkResource); }",c7b14ac1e28c4f7d51f9db6a0e39a7b6f590ef51,findResourceFile(java.lang.String),260330,148,236
153424,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_managed_adaptor_ProductFlavorAdaptor.java,25.0,"@com.android.annotations.Nullable @java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArguments() { return null; }",9aa0d338174dc295c504dd9d3899c217f8cdef00,"@com.android.annotations.Nullable @java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArguments() { return com.google.common.collect.Maps.newHashMap(); }",eff80b4f2f3d131d6eb12a32659e50beca2493ec,getTestInstrumentationRunnerArguments(),getTestInstrumentationRunnerArguments(),2,25,"@com.android.annotations.NonNull @java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArguments() { return com.google.common.collect.Maps.newHashMap(); }",67e3d31c89bbde120b8c5ae2b15a96ae64ed356b,getTestInstrumentationRunnerArguments(),80567,55,55
153812,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,9.0,"@org.junit.Test public void test002f() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, ""keep-first"", errOut, false, false); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(jackOutput); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH, ""Res1""); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH, ""Res2""); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH, ""Res3""); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",56ac4d2ae4d6634d164b91a40208ee168ad65383,"@org.junit.Test public void test002f() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, ""keep-first"", errOut, false, false); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, ""Res1""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, ""Res2""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, ""Res3""); } finally { if (lib != null) { lib.close(); } } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",56a00a3ff78f80ca7fc4ee65ba3a5c9cf3382926,test002f(),test002f(),9,10,"@org.junit.Test @com.android.jack.test.junit.KnownIssue(candidate = com.android.jack.test.toolchain.IncrementalToolchain.class) public void test002f() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, ""keep-first"", errOut, false, false); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, ""Res1""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, ""Res2""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, ""Res3""); } finally { if (lib != null) { lib.close(); } } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",8208ba147b431161ce616b98a2e4fb2d16876ca6,test002f(),456041,220,250
233471,luni_src_test_java_libcore_dalvik_system_SocketTaggingTest.java,,,,"public void testServerSocketChannel() throws java.lang.Exception { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel.open(); ssc.bind(null); ssc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }",fe16aaa89c91b3d8f644f0bd3e52f8a02b7d9244,,testServerSocketChannel(),3,0,"public void testServerSocketChannel() throws java.lang.Exception { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel.open(); ssc.bind(null); assertEquals(1, tagger.getLiveDescriptors().size()); ssc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }",3aab54bc9c48b075b9a04f571c36164ffd01c2a4,testServerSocketChannel(),88483,70,81
158671,jack-tests_src_com_android_jack_test_helper_RuntimeTestHelper.java,0.0,@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createReferenceToolchain() { com.android.jack.test.toolchain.AndroidToolchain referenceTestTools = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain(com.android.jack.test.toolchain.AndroidToolchain.class); referenceTestTools.setSourceLevel(level); referenceTestTools.setWithDebugInfos(withDebugInfos); return referenceTestTools; },df0360009cf019614d5b0d577ea7c8292ca99a4b,"@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createReferenceToolchain(@javax.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> properties) { com.android.jack.test.toolchain.AndroidToolchain referenceTestTools = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain(com.android.jack.test.toolchain.AndroidToolchain.class); referenceTestTools.setSourceLevel(level); referenceTestTools.setWithDebugInfos(withDebugInfos); if ((properties != null) && (referenceTestTools instanceof com.android.jack.test.toolchain.JackBasedToolchain)) { com.android.jack.test.toolchain.JackBasedToolchain jackBasedToolchain = ((com.android.jack.test.toolchain.JackBasedToolchain) (referenceTestTools)); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : properties.entrySet()) { jackBasedToolchain.addProperty(entry.getKey(), entry.getValue()); } } return referenceTestTools; }",0f4c176d4468a1f60102d2e8740cdedcf7a784cc,createReferenceToolchain(),createReferenceToolchain(java.util.Map),3,14,"@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createReferenceToolchain() { com.android.jack.test.toolchain.AndroidToolchain referenceTestTools = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain(com.android.jack.test.toolchain.AndroidToolchain.class); referenceTestTools.setSourceLevel(level); referenceTestTools.setWithDebugInfos(withDebugInfos); if ((!(runtimeProperties.isEmpty())) && (referenceTestTools instanceof com.android.jack.test.toolchain.JackBasedToolchain)) { com.android.jack.test.toolchain.JackBasedToolchain jackBasedToolchain = ((com.android.jack.test.toolchain.JackBasedToolchain) (referenceTestTools)); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : runtimeProperties.entrySet()) { jackBasedToolchain.addProperty(entry.getKey(), entry.getValue()); } } return referenceTestTools; }",3b823affe2a1d2d5670877fc98a24049152e099f,createReferenceToolchain(),21985,249,227
238940,jack_tests_com_android_jack_shrob_proguard_GrammarActionsTest.java,,,,"@org.junit.Test public void testNamePatternClass() { com.android.jack.shrob.spec.NameSpecification spec = com.android.jack.shrob.proguard.GrammarActions.name(""a.b.*.d"", NameFormat.CLASS); junit.framework.Assert.assertTrue(spec.matches(""a.b.c.d"")); junit.framework.Assert.assertFalse(spec.matches(""a.b.c.e.d"")); junit.framework.Assert.assertTrue(spec.matches(""a.b.c/e.d"")); spec = com.android.jack.shrob.proguard.GrammarActions.name(""a.b.**.d"", NameFormat.CLASS); junit.framework.Assert.assertTrue(spec.matches(""a.b.c.d"")); junit.framework.Assert.assertTrue(spec.matches(""a.b.c.e.d"")); spec = com.android.jack.shrob.proguard.GrammarActions.name(""a.b.?.d"", NameFormat.CLASS); junit.framework.Assert.assertTrue(spec.matches(""a.b.c.d"")); junit.framework.Assert.assertFalse(spec.matches(""a.b.ce.d"")); junit.framework.Assert.assertFalse(spec.matches(""a.b...d"")); junit.framework.Assert.assertTrue(spec.matches(""a.b./.d"")); }",22ffdcd0b0aa1d6fb9ec74cb26163c03260524e8,,testNamePatternClass(),5,2,"@org.junit.Test public void testNamePatternClass() { com.android.jack.shrob.spec.NameSpecification spec = com.android.jack.shrob.proguard.GrammarActions.name(""a.b.*.d"", FilterSeparator.CLASS); junit.framework.Assert.assertTrue(spec.matches(""a.b.c.d"")); junit.framework.Assert.assertFalse(spec.matches(""a.b.c.e.d"")); junit.framework.Assert.assertTrue(spec.matches(""a.b.c/e.d"")); spec = com.android.jack.shrob.proguard.GrammarActions.name(""a.b.**.d"", FilterSeparator.CLASS); junit.framework.Assert.assertTrue(spec.matches(""a.b.c.d"")); junit.framework.Assert.assertTrue(spec.matches(""a.b.c.e.d"")); spec = com.android.jack.shrob.proguard.GrammarActions.name(""a.b.?.d"", FilterSeparator.CLASS); junit.framework.Assert.assertTrue(spec.matches(""a.b.c.d"")); junit.framework.Assert.assertFalse(spec.matches(""a.b.ce.d"")); junit.framework.Assert.assertFalse(spec.matches(""a.b...d"")); junit.framework.Assert.assertTrue(spec.matches(""a.b./.d"")); }",ed60942f6a5d7b1cc8994a9d6e7e9d4f3f18d6aa,testNamePatternClass(),444615,311,308
52373,androidtestlib_src_com_android_test_runner_AndroidJUnitRunner.java,2.0,"private void addListeners(java.util.List<org.junit.runner.notification.RunListener> listeners, org.junit.runner.JUnitCore testRunner, java.io.PrintStream writer) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_SUITE_ASSIGNMENT)) { addListener(listeners, testRunner, new com.android.test.runner.listener.SuiteAssignmentPrinter(writer)); } else { addListener(listeners, testRunner, new org.junit.internal.TextListener(writer)); addListener(listeners, testRunner, new com.android.test.runner.listener.InstrumentationResultPrinter(this)); addDelayListener(listeners, testRunner); addCoverageListener(listeners, testRunner); } }",e0711e2fae946d8cecb8aff2dcf29051567f0083,private void addListeners(java.io.PrintStream writer) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_SUITE_ASSIGNMENT)) { addListener(new com.android.test.runner.listener.SuiteAssignmentPrinter(writer)); } else { addListener(new org.junit.internal.TextListener(writer)); addListener(new com.android.test.runner.listener.InstrumentationResultPrinter(this)); addDelayListener(); addCoverageListener(); } },941269d377a6f70b0e887caf2bedc8411e81cf93,"addListeners(java.util.List,org.junit.runner.JUnitCore,java.io.PrintStream)",addListeners(java.io.PrintStream),3,1,"private void addListeners(java.util.List<org.junit.runner.notification.RunListener> listeners, org.junit.runner.JUnitCore testRunner, java.io.PrintStream writer) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_SUITE_ASSIGNMENT)) { addListener(listeners, testRunner, new com.android.test.runner.listener.SuiteAssignmentPrinter(writer)); } else { addListener(listeners, testRunner, new org.junit.internal.TextListener(writer)); addListener(listeners, testRunner, new com.android.test.runner.listener.InstrumentationResultPrinter(this)); addDelayListener(listeners, testRunner); addCoverageListener(listeners, testRunner); } addExtraListeners(listeners, testRunner, writer); }",ddc07888462ee77d210364cdb29d2488634ad8df,"addListeners(java.util.List,org.junit.runner.JUnitCore,java.io.PrintStream)",55868,106,171
376533,src_java_com_android_internal_telephony_InboundSmsHandler.java,26.0,"@java.lang.Override public boolean processMessage(android.os.Message msg) { log((""DeliveringState.processMessage:"" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : handleNewSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : handleInjectSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : com.android.internal.telephony.InboundSmsTracker inboundSmsTracker = ((com.android.internal.telephony.InboundSmsTracker) (msg.obj)); if (processMessagePart(inboundSmsTracker)) { transitionTo(mWaitingState); } else { log((""No broadcast sent on processing EVENT_BROADCAST_SMS in Delivering "" + ""state. Return to Idle state"")); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : transitionTo(mIdleState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RELEASE_WAKELOCK : mWakeLock.release(); if (!(mWakeLock.isHeld())) { loge(""mWakeLock released while delivering/broadcasting!""); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }",d06cad819a9d400dffcf4fd2d65f475bfd273083,"@java.lang.Override public boolean processMessage(android.os.Message msg) { log((""DeliveringState.processMessage:"" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : handleNewSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : handleInjectSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : com.android.internal.telephony.InboundSmsTracker inboundSmsTracker = ((com.android.internal.telephony.InboundSmsTracker) (msg.obj)); if (processMessagePart(inboundSmsTracker)) { transitionTo(mWaitingState); } else { log((""No broadcast sent on processing EVENT_BROADCAST_SMS in Delivering "" + ""state. Return to Idle state"")); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : transitionTo(mIdleState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }",2926a6e6a9670715d4522a170cb1db3fade321cd,processMessage(android.os.Message),processMessage(android.os.Message),3,26,"@java.lang.Override public boolean processMessage(android.os.Message msg) { log((""DeliveringState.processMessage:"" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : handleNewSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : handleInjectSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : com.android.internal.telephony.InboundSmsTracker inboundSmsTracker = ((com.android.internal.telephony.InboundSmsTracker) (msg.obj)); if (processMessagePart(inboundSmsTracker)) { transitionTo(mWaitingState); } else { log((""No broadcast sent on processing EVENT_BROADCAST_SMS in Delivering "" + ""state. Return to Idle state"")); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : transitionTo(mIdleState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RELEASE_WAKELOCK : mWakeLock.release(); if (!(mWakeLock.isHeld())) { loge(""mWakeLock released while delivering/broadcasting!""); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }",d06cad819a9d400dffcf4fd2d65f475bfd273083,processMessage(android.os.Message),68470,387,442
69360,luni_src_test_java_libcore_javax_net_ssl_SSLEngineTest.java,1.0,"public void test_SSLEngine_getSupportedCipherSuites_names() throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); javax.net.ssl.SSLEngine e = c.clientContext.createSSLEngine(); java.lang.String[] cipherSuites = e.getSupportedCipherSuites(); libcore.java.security.StandardNames.assertSSLEngineSupportedCipherSuites(cipherSuites); assertNotSame(cipherSuites, e.getSupportedCipherSuites()); c.close(); }",40e987472517c73af1039b5d48e75d7877dc8462,"public void test_SSLEngine_getSupportedCipherSuitesReturnsCopies() throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); javax.net.ssl.SSLEngine e = c.clientContext.createSSLEngine(); assertNotSame(e.getSupportedCipherSuites(), e.getSupportedCipherSuites()); c.close(); }",43c41a41b2fdae3da18d94746b46479a698341e6,test_SSLEngine_getSupportedCipherSuites_names(),test_SSLEngine_getSupportedCipherSuitesReturnsCopies(),3,17,"public void test_SSLEngine_getSupportedCipherSuites_returnsCopies() throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); javax.net.ssl.SSLEngine e = c.clientContext.createSSLEngine(); assertNotSame(e.getSupportedCipherSuites(), e.getSupportedCipherSuites()); c.close(); }",02bf7efdc40ee54a88da6c21dc8c86bc0e262a2d,test_SSLEngine_getSupportedCipherSuites_returnsCopies(),337811,84,85
216245,src_com_android_bluetooth_btservice_AdapterService.java,44.0,"public boolean cancelBondProcess(android.bluetooth.BluetoothDevice device) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""cancelBondProcess() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.cancelBondProcess(device); }",cb95ce7336d8d530e97c2c84b3b5cd753dbc99a5,"public boolean cancelBondProcess(android.bluetooth.BluetoothDevice device) { if (!(com.android.bluetooth.Utils.checkCallerAllowManagedProfiles(mService))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""cancelBondProcess() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.cancelBondProcess(device); }",82dbf207961825677211e31ed620a9bb3c445170,cancelBondProcess(android.bluetooth.BluetoothDevice),cancelBondProcess(android.bluetooth.BluetoothDevice),4,44,"public boolean cancelBondProcess(android.bluetooth.BluetoothDevice device) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""cancelBondProcess() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.cancelBondProcess(device); }",cb95ce7336d8d530e97c2c84b3b5cd753dbc99a5,cancelBondProcess(android.bluetooth.BluetoothDevice),248334,108,102
102152,luni_src_main_java_libcore_icu_LocaleData.java,3.0,"public static libcore.icu.LocaleData get(java.util.Locale locale) { if (locale == null) { locale = java.util.Locale.getDefault(); } java.lang.String localeName = locale.toString(); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(localeName); if (localeData != null) { return localeData; } } libcore.icu.LocaleData newLocaleData = libcore.icu.LocaleData.initLocaleData(locale); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(localeName); if (localeData != null) { return localeData; } libcore.icu.LocaleData.localeDataCache.put(localeName, newLocaleData); return newLocaleData; } }",9aedc9f6798e156fec5fadf62b43e9faab9e15be,"public static libcore.icu.LocaleData get(java.util.Locale locale) throws java.util.IllformedLocaleException { final java.lang.String languageTag = locale.toLanguageTag(); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(languageTag); if (localeData != null) { return localeData; } } libcore.icu.LocaleData newLocaleData = libcore.icu.LocaleData.initLocaleData(locale); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(languageTag); if (localeData != null) { return localeData; } libcore.icu.LocaleData.localeDataCache.put(languageTag, newLocaleData); return newLocaleData; } }",a6d74bcc81f54575c47239832659241a94d620b8,get(java.util.Locale),get(java.util.Locale),4,3,"public static libcore.icu.LocaleData get(java.util.Locale locale) { final java.lang.String languageTag = locale.toLanguageTag(); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(languageTag); if (localeData != null) { return localeData; } } libcore.icu.LocaleData newLocaleData = libcore.icu.LocaleData.initLocaleData(locale); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(languageTag); if (localeData != null) { return localeData; } libcore.icu.LocaleData.localeDataCache.put(languageTag, newLocaleData); return newLocaleData; } }",ba161df4979ba144e1a4a0c7df88efc1b3a815c4,get(java.util.Locale),303751,208,198
91995,luni_src_main_java_android_os_Os.java,,,,"public static long mmap(long address, long byteCount, int prot, int flags, java.io.FileDescriptor fd, long offset) throws android.os.ErrnoException { return Libcore.os.mmap(address, byteCount, prot, flags, fd, offset); }",798c3a92e07eb1c2941fd0c5893d6187286d5049,,"mmap(long,long,int,int,java.io.FileDescriptor,long)",3,1,"public static long mmap(long address, long byteCount, int prot, int flags, java.io.FileDescriptor fd, long offset) throws android.system.ErrnoException { return Libcore.os.mmap(address, byteCount, prot, flags, fd, offset); }",937d42ddaa77b8e318b81604f955cc669682733e,"mmap(long,long,int,int,java.io.FileDescriptor,long)",170031,64,64
632447,services_core_java_com_android_server_TelephonyRegistry.java,55.0,"private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }",ddbbd0c038849cae10e490aed49307936089b6e2,"private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }",756a4e84331090f0a58599d014f9d2aa355cfd70,"checkListenerPermission(int,java.lang.String,java.lang.String)","checkListenerPermission(int,java.lang.String,java.lang.String)",2,55,"private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (com.android.server.TelephonyRegistry.ENFORCE_COARSE_LOCATION_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }",d4ee4acebf55d8984c1e8de8d8b2d5c978df436f,"checkListenerPermission(int,java.lang.String,java.lang.String)",67518,351,263
144881,core_java_android_net_Uri.java,121.0,"public java.lang.String toSafeString() { java.lang.String scheme = getScheme(); java.lang.String ssp = getSchemeSpecificPart(); if (scheme != null) { if (((((scheme.equalsIgnoreCase(""tel"")) || (scheme.equalsIgnoreCase(""sip""))) || (scheme.equalsIgnoreCase(""sms""))) || (scheme.equalsIgnoreCase(""smsto""))) || (scheme.equalsIgnoreCase(""mailto""))) { java.lang.StringBuilder builder = new java.lang.StringBuilder(64); builder.append(scheme); builder.append(':'); if (ssp != null) { for (int i = 0; i < (ssp.length()); i++) { char c = ssp.charAt(i); if (((c == '-') || (c == '@')) || (c == '.')) { builder.append(c); } else { builder.append('x'); } } } return builder.toString(); } } java.lang.StringBuilder builder = new java.lang.StringBuilder(64); if (scheme != null) { builder.append(scheme); builder.append(':'); } if (ssp != null) { builder.append(ssp); } return builder.toString(); }",06c19325301906a14167cfe17785d26c5c61b8d6,"public java.lang.String toSafeString() { java.lang.String scheme = getScheme(); java.lang.String ssp = getSchemeSpecificPart(); if (scheme != null) { if (((((scheme.equalsIgnoreCase(""tel"")) || (scheme.equalsIgnoreCase(""sip""))) || (scheme.equalsIgnoreCase(""sms""))) || (scheme.equalsIgnoreCase(""smsto""))) || (scheme.equalsIgnoreCase(""mailto""))) { java.lang.StringBuilder builder = new java.lang.StringBuilder(64); builder.append(scheme); builder.append(':'); if (ssp != null) { for (int i = 0; i < (ssp.length()); i++) { char c = ssp.charAt(i); if (((c == '-') || (c == '@')) || (c == '.')) { builder.append(c); } else { builder.append('x'); } } } return builder.toString(); } else if (((scheme.equalsIgnoreCase(""http"")) || (scheme.equalsIgnoreCase(""https""))) || (scheme.equalsIgnoreCase(""ftp""))) { ssp = ((""//"" + (getHost())) + ((getPort()) != (-1) ? "":"" + (getPort()) : """")) + ""/...""; } } java.lang.StringBuilder builder = new java.lang.StringBuilder(64); if (scheme != null) { builder.append(scheme); builder.append(':'); } if (ssp != null) { builder.append(ssp); } return builder.toString(); }",be2ce9e0c71f415fa0659362a26eddfa2e4abc00,toSafeString(),toSafeString(),4,121,"public java.lang.String toSafeString() { java.lang.String scheme = getScheme(); java.lang.String ssp = getSchemeSpecificPart(); if (scheme != null) { if (((((scheme.equalsIgnoreCase(""tel"")) || (scheme.equalsIgnoreCase(""sip""))) || (scheme.equalsIgnoreCase(""sms""))) || (scheme.equalsIgnoreCase(""smsto""))) || (scheme.equalsIgnoreCase(""mailto""))) { java.lang.StringBuilder builder = new java.lang.StringBuilder(64); builder.append(scheme); builder.append(':'); if (ssp != null) { for (int i = 0; i < (ssp.length()); i++) { char c = ssp.charAt(i); if (((c == '-') || (c == '@')) || (c == '.')) { builder.append(c); } else { builder.append('x'); } } } return builder.toString(); } else if (((scheme.equalsIgnoreCase(""http"")) || (scheme.equalsIgnoreCase(""https""))) || (scheme.equalsIgnoreCase(""ftp""))) { ssp = ((""//"" + ((getHost()) != null ? getHost() : """")) + ((getPort()) != (-1) ? "":"" + (getPort()) : """")) + ""/...""; } } java.lang.StringBuilder builder = new java.lang.StringBuilder(64); if (scheme != null) { builder.append(scheme); builder.append(':'); } if (ssp != null) { builder.append(ssp); } return builder.toString(); }",902da306312756a4121d073f9641215afbcc27f0,toSafeString(),83220,313,324
145023,rs_java_android_renderscript_FieldPacker.java,81.0,private static int getPackedSize(java.lang.Object obj) { if (obj instanceof java.lang.Boolean) { return 1; } if (obj instanceof java.lang.Byte) { return 1; } if (obj instanceof java.lang.Short) { return 2; } if (obj instanceof java.lang.Integer) { return 4; } if (obj instanceof java.lang.Long) { return 8; } if (obj instanceof java.lang.Float) { return 4; } if (obj instanceof java.lang.Double) { return 8; } if (obj instanceof android.renderscript.Byte2) { return 2; } if (obj instanceof android.renderscript.Byte3) { return 3; } if (obj instanceof android.renderscript.Byte4) { return 4; } if (obj instanceof android.renderscript.Short2) { return 4; } if (obj instanceof android.renderscript.Short3) { return 6; } if (obj instanceof android.renderscript.Short4) { return 8; } if (obj instanceof android.renderscript.Int2) { return 8; } if (obj instanceof android.renderscript.Int3) { return 12; } if (obj instanceof android.renderscript.Int4) { return 16; } if (obj instanceof android.renderscript.Long2) { return 16; } if (obj instanceof android.renderscript.Long3) { return 24; } if (obj instanceof android.renderscript.Long4) { return 32; } if (obj instanceof android.renderscript.Float2) { return 8; } if (obj instanceof android.renderscript.Float3) { return 12; } if (obj instanceof android.renderscript.Float4) { return 16; } if (obj instanceof android.renderscript.Double2) { return 16; } if (obj instanceof android.renderscript.Double3) { return 24; } if (obj instanceof android.renderscript.Double4) { return 32; } if (obj instanceof android.renderscript.Matrix2f) { return 16; } if (obj instanceof android.renderscript.Matrix3f) { return 36; } if (obj instanceof android.renderscript.Matrix4f) { return 64; } if (obj instanceof android.renderscript.BaseObj) { if ((RenderScript.sPointerSize) == 8) { return 32; } else { return 4; } } return 0; },dfc89c07175605947e6653cb83e6cef90ef7151c,public void addSafely(java.lang.Object obj) { boolean retry; final int oldPos = mPos; do { retry = false; try { add(obj); } catch (java.lang.ArrayIndexOutOfBoundsException e) { mPos = oldPos; resize(((mLen) * 2)); retry = true; } } while (retry ); },a622fc7e728e20c7622fe0e9e79039c84dcd1381,getPackedSize(java.lang.Object),addSafely(java.lang.Object),5,36,private void addSafely(java.lang.Object obj) { boolean retry; final int oldPos = mPos; do { retry = false; try { add(obj); } catch (java.lang.ArrayIndexOutOfBoundsException e) { mPos = oldPos; resize(((mLen) * 2)); retry = true; } } while (retry ); },ee14c539dc56bb6ccc80717dab9f4b08acbab9de,addSafely(java.lang.Object),472129,74,74
55660,hierarchyviewer2_hierarchyviewer2lib_src_main_java_com_android_hierarchyviewerlib_device_DeviceBridge.java,5.0,"public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if (""DONE."".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) == ' ') { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, (""Error reading view hierarchy stream: "" + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }",51a49a473359684a9ac99e31324ad20e40acdaa1,"public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if (""DONE."".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) == ' ') { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } try { currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); } catch (java.lang.NumberFormatException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, (""NFE reading "" + (line.substring(depth)))); } currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, (""Error reading view hierarchy stream: "" + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }",7b02520817b9c3ba89014797fd59fd9718904699,"parseViewHierarchy(java.io.BufferedReader,com.android.hierarchyviewerlib.models.Window)","parseViewHierarchy(java.io.BufferedReader,com.android.hierarchyviewerlib.models.Window)",2,5,"public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if (""DONE."".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) == ' ') { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, (""Error reading view hierarchy stream: "" + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }",51a49a473359684a9ac99e31324ad20e40acdaa1,"parseViewHierarchy(java.io.BufferedReader,com.android.hierarchyviewerlib.models.Window)",132368,324,268
17573,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_DynamicContextMenu.java,6.0,"@java.lang.Override public void run() { java.lang.String label = java.lang.String.format(""Change attribute %1$s"", actions.get(0).getTitle()); if ((actions.size()) > 1) { label += java.lang.String.format("" (%1$d elements)"", actions.size()); } if (mEditor.isEditXmlModelPending()) { logError(""Action '%1$s' failed: XML changes pending, document might be corrupt."", label); return; } mEditor.wrapUndoEditXmlModel(label, new java.lang.Runnable() { public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { gre.callClosure(((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getClosure(), a2, key, (!isChecked)); } } } }); }",de1d1ea74843f41b91894bd13e2a90308bdb9ad3,"@java.lang.Override public void run() { java.lang.String label = java.lang.String.format(""Change attribute %1$s"", actions.get(0).getTitle()); if ((actions.size()) > 1) { label += java.lang.String.format("" (%1$d elements)"", actions.size()); } if (mEditor.isEditXmlModelPending()) { logError(""Action '%1$s' failed: XML changes pending, document might be corrupt."", label); return; } mEditor.wrapUndoEditXmlModel(label, new java.lang.Runnable() { public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { ((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getCallback().action(a2, key, (!isChecked)); } } } }); }",cc3e97cff42dd3b4da41a7a15f3d26d87be2eb94,run(),run(),4,6,"@java.lang.Override public void run() { java.lang.String label = java.lang.String.format(""Change attribute %1$s"", actions.get(0).getTitle()); if ((actions.size()) > 1) { label += java.lang.String.format("" (%1$d elements)"", actions.size()); } if (mEditor.isEditXmlModelPending()) { logError(""Action '%1$s' failed: XML changes pending, document might be corrupt."", label); return; } mEditor.wrapUndoEditXmlModel(label, new java.lang.Runnable() { public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { try { ((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getCallback().action(a2, key, (!isChecked)); } catch (java.lang.Exception e) { com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine gre = mCanvas.getRulesEngine(); gre.logError(""XML edit operation failed: %s"", e.toString()); } } } } }); }",4c6955273688875ad08df16d0df8a54e993c2f12,run(),301418,244,308
577903,src_com_android_server_telecom_InCallAdapter.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void deflectCall(java.lang.String callId, java.lang.String deflectNumber) { try { android.telecom.Log.startSession(LogUtils.Sessions.ICA_DEFLECT_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, ""deflectCall(%s,%s)"", callId, deflectNumber); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { mCallsManager.deflectCall(call, deflectNumber); } else { android.telecom.Log.w(this, ""deflectCall, unknown call id: %s"", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }",8200ec73b5908369156fa8da506b4b7590c6cdb9,,"deflectCall(java.lang.String,java.lang.String)",7,19,"@java.lang.Override public void deflectCall(java.lang.String callId, android.net.Uri address) { try { android.telecom.Log.startSession(LogUtils.Sessions.ICA_DEFLECT_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, ""deflectCall - %s, %s "", callId, android.telecom.Log.pii(address)); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { mCallsManager.deflectCall(call, address); } else { android.telecom.Log.w(this, ""deflectCall, unknown call id: %s"", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }",1ffc6126a55ba314c4eea3da35fdc2c56e83c4de,"deflectCall(java.lang.String,android.net.Uri)",30935,229,231
36273,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationComposite.java,97.0,private void onDockChange() { if ((computeCurrentConfig()) && ((mListener) != null)) { mListener.onConfigurationChange(); } },43ce8d9f277fd779c9fad47e217306a91d76a788,private com.android.ide.eclipse.adt.internal.sdk.LayoutDevice getSelectedDevice() { return ((com.android.ide.eclipse.adt.internal.sdk.LayoutDevice) (mDeviceCombo.getData())); },a20738008f366f66a45d87af46e1413645f26eaa,onDockChange(),getSelectedDevice(),6,64,com.android.ide.eclipse.adt.internal.sdk.LayoutDevice getSelectedDevice() { return ((com.android.ide.eclipse.adt.internal.sdk.LayoutDevice) (mDeviceCombo.getData())); },d529d75813f0a06bd629bdeeb6e365545d95c914,getSelectedDevice(),295118,52,51
465279,core_java_android_bluetooth_le_AdvertisingSetParameters.java,5.0,"public android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int primaryPhy) { if ((primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException((""bad primaryPhy "" + primaryPhy)); } this.primaryPhy = primaryPhy; return this; }",1d7d09146bd65da52e6ec9cadb9a2dd574c8f4ad,"public android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int primaryPhy) { if ((primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException((""bad primaryPhy "" + primaryPhy)); } this.mPrimaryPhy = primaryPhy; return this; }",b5608ffe2f57890b7e7f66232f79e34ab0a19b2b,setPrimaryPhy(int),setPrimaryPhy(int),9,5,"public android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int primaryPhy) { if ((primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException((""bad primaryPhy "" + primaryPhy)); } mPrimaryPhy = primaryPhy; return this; }",e190dbab175d7daf4229360ee63909ccd8ac2790,setPrimaryPhy(int),2248,104,102
364393,tests_tests_mediastress_src_android_mediastress_cts_WorkDir.java,2.0,"static final java.lang.String getMediaDirString() { return (android.mediastress.cts.WorkDir.getTopDirString()) + ""test/""; }",abaac78805903247af3c09943153b06ba00b14d5,"static final java.lang.String getMediaDirString() { android.os.Bundle bundle = android.support.test.InstrumentationRegistry.getArguments(); java.lang.String mediaDirString = bundle.getString(""media-path""); if (mediaDirString != null) { android.util.Log.w(""Using user-supplied media-path string %s"", mediaDirString); return mediaDirString + (mediaDirString.endsWith(""/"") ? """" : ""/""); } else { return (android.mediastress.cts.WorkDir.getTopDirString()) + ""test/""; } }",682ca934bfd7637dcf58031579d1d0d77ca29bda,getMediaDirString(),getMediaDirString(),2,2,"static final java.lang.String getMediaDirString() { android.os.Bundle bundle = android.support.test.InstrumentationRegistry.getArguments(); java.lang.String mediaDirString = bundle.getString(android.mediastress.cts.WorkDir.MEDIA_PATH_INSTR_ARG_KEY); if (mediaDirString != null) { return mediaDirString + (mediaDirString.endsWith(""/"") ? """" : ""/""); } else { return (android.mediastress.cts.WorkDir.getTopDirString()) + ""test/""; } }",a1efbdc1de610a413cd9b2e0304e72bd19cf724b,getMediaDirString(),289271,125,121
97322,harmony-tests_src_test_java_org_apache_harmony_tests_java_net_MulticastSocketTest.java,43.0,"public void test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6() throws java.lang.Exception { test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface(org.apache.harmony.tests.java.net.MulticastSocketTest.GOOD_IPv6, org.apache.harmony.tests.java.net.MulticastSocketTest.BAD_IPv6); }",1f0694cc15ce7ee9623c91b2aaaacc5737f37cc9,"public void test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6() throws java.lang.Exception { test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface(ipv6networkInterface, org.apache.harmony.tests.java.net.MulticastSocketTest.GOOD_IPv6, org.apache.harmony.tests.java.net.MulticastSocketTest.BAD_IPv6); }",3e487d3640e195b3611dfa5286f5bfa3ebe2ae30,test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6(),test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6(),3,43,"public void test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6() throws java.lang.Exception { test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface(ipv6NetworkInterface, org.apache.harmony.tests.java.net.MulticastSocketTest.GOOD_IPv6, org.apache.harmony.tests.java.net.MulticastSocketTest.BAD_IPv6); }",0c4f7ef1c1f48260ecbcedd7c52fd7113a035af9,test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6(),372483,92,92
377238,Common_src_com_googlecode_android_scripting_facade_telephony_ImsManagerFacade.java,9.0,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return current WFC Mode if Enabled."") public java.lang.String imsGetWfcMode() { if ((com.android.ims.ImsManager.isWfcEnabledByUser(mContext)) == false) { return TelephonyConstants.WFC_MODE_DISABLED; } return com.googlecode.android_scripting.facade.telephony.TelephonyUtils.getWfcModeString(com.android.ims.ImsManager.getWfcMode(mContext)); }",f086d6f4b6f0cdd1c51311e79402defc1a311bb8,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return current WFC Mode if Enabled."") public java.lang.String imsGetWfcMode() { if (!(com.android.ims.ImsManager.isWfcEnabledByUserForSlot())) { return TelephonyConstants.WFC_MODE_DISABLED; } return com.googlecode.android_scripting.facade.telephony.TelephonyUtils.getWfcModeString(com.android.ims.ImsManager.getWfcModeForSlot()); }",d6ba6fe594afe275143c28be568a13575834e0d5,imsGetWfcMode(),imsGetWfcMode(),4,10,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return current WFC Mode if Enabled."") public java.lang.String imsGetWfcMode() { if (!(mImsManager.isWfcEnabledByUserForSlot())) { return TelephonyConstants.WFC_MODE_DISABLED; } return com.googlecode.android_scripting.facade.telephony.TelephonyUtils.getWfcModeString(mImsManager.getWfcModeForSlot()); }",62c431256b928557063c6812cffa0411928ef8a2,imsGetWfcMode(),383423,126,114
355351,src_com_android_bluetooth_opp_BluetoothOppService.java,10.0,"private void startSocketListener() { if (com.android.bluetooth.opp.BluetoothOppService.D) android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ""start Socket Listeners""); stopListeners(); mServerSocket = com.android.bluetooth.ObexServerSockets.createInsecure(this); com.android.bluetooth.sdp.SdpManager sdpManager = com.android.bluetooth.sdp.SdpManager.getDefaultManager(); if ((sdpManager == null) || ((mServerSocket) == null)) { android.util.Log.e(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""ERROR:serversocket object is NULL sdp manager :"" + sdpManager) + "" mServerSocket:"") + (mServerSocket))); return; } sdpManager.createOppOpsRecord(""OBEX Object Push"", mServerSocket.getRfcommChannel(), mServerSocket.getL2capPsm(), 258, SdpManager.OPP_FORMAT_ALL); }",c0f2cc35c44c02be76485bad999a2e215850a911,"private void startSocketListener() { if (com.android.bluetooth.opp.BluetoothOppService.D) android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ""start Socket Listeners""); stopListeners(); mServerSocket = com.android.bluetooth.ObexServerSockets.createInsecure(this); com.android.bluetooth.sdp.SdpManager sdpManager = com.android.bluetooth.sdp.SdpManager.getDefaultManager(); if ((sdpManager == null) || ((mServerSocket) == null)) { android.util.Log.e(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""ERROR:serversocket object is NULL sdp manager :"" + sdpManager) + "" mServerSocket:"") + (mServerSocket))); return; } sdpManager.createOppOpsRecord(""OBEX Object Push"", mServerSocket.getRfcommChannel(), mServerSocket.getL2capPsm(), 258, SdpManager.OPP_FORMAT); }",7bb1eaad04bcca6da2149059e8bc10fa5b8157f6,startSocketListener(),startSocketListener(),7,10,"private void startSocketListener() { if (com.android.bluetooth.opp.BluetoothOppService.D) android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ""start Socket Listeners""); stopListeners(); mServerSocket = com.android.bluetooth.ObexServerSockets.createInsecure(this); com.android.bluetooth.sdp.SdpManager sdpManager = com.android.bluetooth.sdp.SdpManager.getDefaultManager(); if ((sdpManager == null) || ((mServerSocket) == null)) { android.util.Log.e(com.android.bluetooth.opp.BluetoothOppService.TAG, (((""ERROR:serversocket object is NULL sdp manager :"" + sdpManager) + "" mServerSocket:"") + (mServerSocket))); return; } sdpManager.createOppOpsRecord(""OBEX Object Push"", mServerSocket.getRfcommChannel(), mServerSocket.getL2capPsm(), 258, com.android.bluetooth.opp.BluetoothOppService.SUPPORTED_OPP_FORMAT); }",41ab077f821f12cf79424993bfc3253373f28027,startSocketListener(),425499,234,245
91995,luni_src_main_java_java_nio_FileChannelImpl.java,32.0,public void force(boolean metadata) throws java.io.IOException { checkOpen(); if (((mode) & (O_ACCMODE)) != (O_RDONLY)) { try { if (metadata) { Libcore.os.fsync(fd); } else { Libcore.os.fdatasync(fd); } } catch (libcore.io.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } } },94c70e14f43f8c7b1139896fa581bad89de14a83,public void force(boolean metadata) throws java.io.IOException { checkOpen(); if (((mode) & (O_ACCMODE)) != (O_RDONLY)) { try { if (metadata) { Libcore.os.fsync(fd); } else { Libcore.os.fdatasync(fd); } } catch (android.os.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } } },90596f08caccba81e55472514e82a54f647aa4c0,force(boolean),force(boolean),3,32,public void force(boolean metadata) throws java.io.IOException { checkOpen(); if (((mode) & (O_ACCMODE)) != (O_RDONLY)) { try { if (metadata) { Libcore.os.fsync(fd); } else { Libcore.os.fdatasync(fd); } } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } } },d875afc55301bb16037731017adf23da620d4e3a,force(boolean),170147,97,97
531103,src_com_android_bluetooth_hfp_HeadsetNativeInterface.java,,,,boolean connectAudio(android.bluetooth.BluetoothDevice device) { return connectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); },7fb9916addf2cf499ebd9829b6040d778e286a55,,connectAudio(android.bluetooth.BluetoothDevice),10,40,@android.support.annotation.VisibleForTesting public boolean connectAudio(android.bluetooth.BluetoothDevice device) { return connectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); },61844e946f57439e271d9b3129a4adbe6f511527,connectAudio(android.bluetooth.BluetoothDevice),386060,31,41
122283,jack_src_com_android_jack_jayce_DeclaredTypeNode.java,4.0,"@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader);",ed3b21ffee33ed3ac743e0b58e55b327a731fe24,"@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader, @javax.annotation.Nonnull com.android.jack.jayce.v0002.io.JayceInternalReaderImpl jayceInternalReaderImpl) throws java.io.IOException;",4656f8f2deaba66f63eca4a8ea0d640cd333ebe5,"create(com.android.jack.ir.ast.JPackage,com.android.jack.jayce.JayceClassOrInterfaceLoader)","create(com.android.jack.ir.ast.JPackage,com.android.jack.jayce.JayceClassOrInterfaceLoader,com.android.jack.jayce.v0002.io.JayceInternalReaderImpl)",12,0,"@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader);",ed3b21ffee33ed3ac743e0b58e55b327a731fe24,"create(com.android.jack.ir.ast.JPackage,com.android.jack.jayce.JayceClassOrInterfaceLoader)",20500,111,70
673740,Common_src_com_googlecode_android_scripting_jsonrpc_JsonBuilder.java,44.0,"private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put(""InterfaceName"", data.getInterfaceName()); info.put(""LinkAddresses"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put(""DnsServers"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put(""Domains"", data.getDomains()); info.put(""Mtu"", data.getMtu()); info.put(""Routes"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); return info; }",f500820e2971ee2426c7940b0a162ecbcf95059a,"private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put(""InterfaceName"", data.getInterfaceName()); info.put(""LinkAddresses"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put(""DnsServers"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put(""Domains"", data.getDomains()); info.put(""Mtu"", data.getMtu()); info.put(""Routes"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); info.put(""IsPrivateDnsActive"", data.isPrivateDnsActive()); info.put(""PrivateDnsServerName"", data.getPrivateDnsServerName()); return info; }",46a3c29917b9e02eff34c9c0e55abe130328d4af,buildLinkProperties(android.net.LinkProperties),buildLinkProperties(android.net.LinkProperties),3,44,"private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put(""InterfaceName"", data.getInterfaceName()); info.put(""LinkAddresses"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put(""DnsServers"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put(""Domains"", data.getDomains()); info.put(""Mtu"", data.getMtu()); info.put(""Routes"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); info.put(""IsPrivateDnsActive"", data.isPrivateDnsActive()); info.put(""PrivateDnsServerName"", data.getPrivateDnsServerName()); info.put(""ValidatedPrivateDnsServers"", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getValidatedPrivateDnsServers())); return info; }",9e34b30d6ebefa1c5bf21d12816e77c8c9e23a11,buildLinkProperties(android.net.LinkProperties),76544,200,235
79684,build-system_gradle_src_main_groovy_com_android_build_gradle_api_ApkVariant.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.util.Collection<java.io.File> getCompileLibraries();,f29d55710cac980c1acdc643fd0d3646b61e3a6f,,getCompileLibraries(),2,2,@com.android.annotations.NonNull java.util.Collection<java.io.File> getCompileLibraries();,dbde41d38a6f36380e8e71390b3df2ddcddb7695,getCompileLibraries(),452137,16,24
599176,telephony_java_android_telephony_NetworkRegistrationState.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.telephony.NetworkRegistrationState.VoiceSpecificStates getVoiceSpecificStates() { return mVoiceSpecificStates; },46c0a3cb39ae699a4511242a23d5d91909e8bdc3,,getVoiceSpecificStates(),10,3,@android.annotation.Nullable public android.telephony.VoiceSpecificRegistrationStates getVoiceSpecificStates() { return mVoiceSpecificStates; },71419c6be95d90ec2853ae189c4f95224b54193f,getVoiceSpecificStates(),445202,25,28
81416,tests_tests_renderscript_src_android_renderscript_cts_TestModf.java,,,,"private void checkModfFloatFloat() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); try { android.renderscript.Allocation outIret = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutIret(outIret); script.forEach_testModfFloatFloat(inX, out); verifyResultsModfFloatFloat(inX, outIret, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testModfFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation outIret = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutIret(outIret); scriptRelaxed.forEach_testModfFloatFloat(inX, out); verifyResultsModfFloatFloat(inX, outIret, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testModfFloatFloat: "" + (e.toString()))); } }",8962456844ea47bca7570b1f9f796c840fd9093f,,checkModfFloatFloat(),9,0,"private void checkModfFloatFloatFloat() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 4613585216829330652L); try { android.renderscript.Allocation outIret = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutIret(outIret); script.forEach_testModfFloatFloatFloat(inX, out); verifyResultsModfFloatFloatFloat(inX, outIret, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testModfFloatFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation outIret = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutIret(outIret); scriptRelaxed.forEach_testModfFloatFloatFloat(inX, out); verifyResultsModfFloatFloatFloat(inX, outIret, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testModfFloatFloatFloat: "" + (e.toString()))); } }",b1803b88ec7e756e6e41e53d0244108989bbaa26,checkModfFloatFloatFloat(),143223,468,452
275218,src_test_java_org_conscrypt_NativeCryptoTest.java,53.0,"public long beforeHandshake(long context) throws javax.net.ssl.SSLException { long s = org.conscrypt.NativeCrypto.SSL_new(context); java.util.List<java.lang.String> cipherSuites = new java.util.ArrayList<java.lang.String>(); if ((enabledCipherSuites) == null) { cipherSuites.add(""RSA-AES128-SHA""); if (pskEnabled) { cipherSuites.add(0, ""PSK-AES128-CBC-SHA""); } } else { cipherSuites.addAll(enabledCipherSuites); } org.conscrypt.NativeCrypto.SSL_set_cipher_lists(s, cipherSuites.toArray(new java.lang.String[cipherSuites.size()])); if ((channelIdPrivateKey) != null) { org.conscrypt.NativeCrypto.SSL_set1_tls_channel_id(s, channelIdPrivateKey.getNativeRef()); } return s; }",ef0bb803028db5b8a1894eb7fc9f57c9910a4465,"public long beforeHandshake(long context) throws javax.net.ssl.SSLException { long s = org.conscrypt.NativeCrypto.SSL_new(context); java.util.List<java.lang.String> cipherSuites = new java.util.ArrayList<java.lang.String>(); if ((enabledCipherSuites) == null) { cipherSuites.add(""ECDHE-RSA-AES128-SHA""); if (pskEnabled) { cipherSuites.add(0, ""ECDHE-PSK-AES128-GCM-SHA256""); } } else { cipherSuites.addAll(enabledCipherSuites); } org.conscrypt.NativeCrypto.SSL_set_cipher_lists(s, cipherSuites.toArray(new java.lang.String[cipherSuites.size()])); if ((channelIdPrivateKey) != null) { org.conscrypt.NativeCrypto.SSL_set1_tls_channel_id(s, channelIdPrivateKey.getNativeRef()); } return s; }",2a61740d52520533b288dc718f53f218d53719ab,beforeHandshake(long),beforeHandshake(long),3,54,"public long beforeHandshake(long context) throws javax.net.ssl.SSLException { long s = org.conscrypt.NativeCrypto.SSL_new(context); java.util.List<java.lang.String> cipherSuites = new java.util.ArrayList<java.lang.String>(); if ((enabledCipherSuites) == null) { cipherSuites.add(""ECDHE-RSA-AES128-SHA""); if (pskEnabled) { cipherSuites.add(0, ""PSK-AES128-CBC-SHA""); } } else { cipherSuites.addAll(enabledCipherSuites); } org.conscrypt.NativeCrypto.SSL_set_cipher_lists(s, cipherSuites.toArray(new java.lang.String[cipherSuites.size()])); if ((channelIdPrivateKey) != null) { org.conscrypt.NativeCrypto.SSL_set1_tls_channel_id(s, channelIdPrivateKey.getNativeRef()); } return s; }",ab43675ac697990517c6784872c254290282d811,beforeHandshake(long),381392,215,212
16124,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_sdk_LayoutDevice.java,10.0,void removeConfig(java.lang.String name) { mEditMap.remove(name); _seal(); },b7b626c4d4140a9a3169dd69ba7eeca95910000e,void removeConfig(java.lang.String name) { synchronized(mConfigs) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig config : mConfigs) { if (config.getName().equals(name)) { mConfigs.remove(config); _seal(); return; } } } },b6cabe4c03d8508fe1c5cbad3354aad4aab7bded,removeConfig(java.lang.String),removeConfig(java.lang.String),3,10,void removeConfig(java.lang.String name) { synchronized(mConfigs) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig config : mConfigs) { if (config.getName().equals(name)) { mConfigs.remove(config); seal(); return; } } } },e5e8e6b5fdc4d2c416b5d6f6b655d8ebb86d9f8b,removeConfig(java.lang.String),52606,75,74
18430,monkeyrunner_src_com_android_monkeyrunner_recorder_actions_FlingAction.java,,,,"@java.lang.Override public java.lang.String serialize() { float duration = ((float) (timeMs)) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple(""start"", startx, starty).addTuple(""end"", endx, endy).add(""duration"", duration).add(""steps"", steps).build(); return ""DRAG|"" + pydict; }",83a74a62ab0ea16236df0b4dc155064d50584d56,,serialize(),2,0,"@java.lang.Override public java.lang.String serialize() { float duration = (timeMs) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple(""start"", startx, starty).addTuple(""end"", endx, endy).add(""duration"", duration).add(""steps"", steps).build(); return ""DRAG|"" + pydict; }",6eeef594d149526e2f197c354f2025c9b792e85e,serialize(),229218,105,101
597795,src_java_com_android_internal_telephony_ims_ImsServiceControllerCompat.java,,,,@java.lang.Override protected java.lang.String getServiceInterface() { return com.android.internal.telephony.ims.ImsServiceControllerCompat.SERVICE_INTERFACE; },b9ddb845690c81c977d5d84eade23a767767237e,,getServiceInterface(),3,10,@java.lang.Override protected java.lang.String getServiceInterface() { return android.telephony.ims.compat.ImsService.SERVICE_INTERFACE; },025aaed064bbd6c5aeec7a1312b80f6b3de2b594,getServiceInterface(),492279,39,35
88594,src_main_java_org_conscrypt_SSLParametersImpl.java,17.0,public static javax.net.ssl.X509TrustManager getDefaultTrustManager() throws java.security.KeyManagementException { javax.net.ssl.X509TrustManager result = org.conscrypt.SSLParametersImpl.defaultTrustManager; if (result == null) { org.conscrypt.SSLParametersImpl.defaultTrustManager = result = org.conscrypt.SSLParametersImpl.createDefaultTrustManager(); } return result; },538dc7087fcca93d99c0f7fbb95c9beefe06f55d,public static javax.net.ssl.X509ExtendedTrustManager getDefaultTrustManager() throws java.security.KeyManagementException { javax.net.ssl.X509ExtendedTrustManager result = org.conscrypt.SSLParametersImpl.defaultTrustManager; if (result == null) { org.conscrypt.SSLParametersImpl.defaultTrustManager = result = org.conscrypt.SSLParametersImpl.createDefaultTrustManager(); } return result; },c606c7dcab0c1ac28231a538727b81e78b9265b5,getDefaultTrustManager(),getDefaultTrustManager(),3,24,public static javax.net.ssl.X509ExtendedTrustManager getDefaultX509TrustManager() throws java.security.KeyManagementException { javax.net.ssl.X509ExtendedTrustManager result = org.conscrypt.SSLParametersImpl.defaultX509TrustManager; if (result == null) { org.conscrypt.SSLParametersImpl.defaultX509TrustManager = result = org.conscrypt.SSLParametersImpl.createDefaultX509TrustManager(); } return result; },f9219dc0e89bf0f74443c841626b0937d1299b40,getDefaultX509TrustManager(),310405,88,96
181422,media_java_android_media_ExifInterface.java,18.0,"public long getGpsDateTime() { java.lang.String date = mAttributes.get(android.media.ExifInterface.TAG_GPS_DATESTAMP); java.lang.String time = mAttributes.get(android.media.ExifInterface.TAG_GPS_TIMESTAMP); if ((date == null) || (time == null)) return -1; java.lang.String dateTimeString = (date + ' ') + time; java.text.ParsePosition pos = new java.text.ParsePosition(0); try { java.util.Date datetime = android.media.ExifInterface.sFormatter.parse(dateTimeString, pos); if (datetime == null) return -1; return datetime.getTime(); } catch (java.lang.IllegalArgumentException ex) { return -1; } }",1141f94501b3bc2a8652383130d05ffdc3a98611,"public long getGpsDateTime() { java.lang.String date = mAttributes.get(android.media.ExifInterface.TAG_GPS_DATESTAMP); java.lang.String time = mAttributes.get(android.media.ExifInterface.TAG_GPS_TIMESTAMP); if (((date == null) || (time == null)) || ((!(date.matches("".*[1-9].*""))) && (!(time.matches("".*[1-9].*""))))) return -1; java.lang.String dateTimeString = (date + ' ') + time; java.text.ParsePosition pos = new java.text.ParsePosition(0); try { java.util.Date datetime = android.media.ExifInterface.sFormatter.parse(dateTimeString, pos); if (datetime == null) return -1; return datetime.getTime(); } catch (java.lang.IllegalArgumentException ex) { return -1; } }",37404e9c12d00d8e7596d40e94fedf2737b47045,getGpsDateTime(),getGpsDateTime(),4,18,"public long getGpsDateTime() { java.lang.String date = mAttributes.get(android.media.ExifInterface.TAG_GPS_DATESTAMP); java.lang.String time = mAttributes.get(android.media.ExifInterface.TAG_GPS_TIMESTAMP); if (((date == null) || (time == null)) || ((!(android.media.ExifInterface.sNonZeroTimePattern.matcher(date).matches())) && (!(android.media.ExifInterface.sNonZeroTimePattern.matcher(time).matches())))) return -1; java.lang.String dateTimeString = (date + ' ') + time; java.text.ParsePosition pos = new java.text.ParsePosition(0); try { java.util.Date datetime = android.media.ExifInterface.sFormatter.parse(dateTimeString, pos); if (datetime == null) return -1; return datetime.getTime(); } catch (java.lang.IllegalArgumentException ex) { return -1; } }",7c85e983a1feae9fde10d19f112e4852f077bfd9,getGpsDateTime(),76611,182,209
414159,dx_src_com_android_dx_dex_code_form_Form35c.java,0.0,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form35c.wordCount(regs)) >= 0; },ced35479e9fe2bf9d5e75e1312c3b786464ca86f,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType)) || (cst instanceof com.android.dx.rop.cst.CstInvokeDynamic))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form35c.wordCount(regs)) >= 0; },de53d0e6f8fa88da7b428fa5671e0831133439b9,isCompatible(com.android.dx.dex.code.DalvInsn),isCompatible(com.android.dx.dex.code.DalvInsn),20,0,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType)) || (cst instanceof com.android.dx.rop.cst.CstCallSiteRef))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form35c.wordCount(regs)) >= 0; },b8c4d3810f960f323b009d8c6b86489a301e64cc,isCompatible(com.android.dx.dex.code.DalvInsn),238779,254,255
512256,tests_net_java_com_android_server_connectivity_tethering_CarrierConfigChangeListenerTest.java,,,,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); mServiceContext = new com.android.server.connectivity.tethering.CarrierConfigChangeListenerTest.MockContext(mContext); mHandler = new android.os.Handler(android.os.Looper.myLooper()); mCallbackCount = 0; mListener = new com.android.server.connectivity.tethering.CarrierConfigChangeListener(mServiceContext, mHandler, () -> doCallback()); }",fc2cb0570f161287a93c97a8eb7eb6cc21d21630,,setUp(),8,2,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); mServiceContext = new android.net.util.VersionedBroadcastListenerTest.MockContext(mContext); mHandler = new android.os.Handler(android.os.Looper.myLooper()); mCallbackCount = 0; final android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(android.net.util.VersionedBroadcastListenerTest.ACTION_TEST); mListener = new android.net.util.VersionedBroadcastListener(android.net.util.VersionedBroadcastListenerTest.TAG, mServiceContext, mHandler, filter, (android.content.Intent intent) -> doCallback()); }",cdecceb80c4265bb019b89323e6a1a0dc3b63b1f,setUp(),171768,116,159
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm128Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",5f94cfff4cc89fe3c1a37961fee96c0f575d25fb,,testAesGcm128Tcp4(),9,2,"public void testAesGcm128Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }",e6929bf1f60697ce22bc3e8818088d17aabca423,testAesGcm128Tcp4(),1884,164,165
37488,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gre_ClientRulesEngine.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void addIds(org.w3c.dom.Node node, java.util.Set<java.lang.String> ids) { if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); java.lang.String id = element.getAttributeNS(com.android.ide.eclipse.adt.internal.editors.layout.gre.ANDROID_URI, com.android.ide.eclipse.adt.internal.editors.layout.gre.ATTR_ID); if (id.startsWith(com.android.ide.eclipse.adt.internal.editors.layout.gre.NEW_ID_PREFIX)) { ids.add(com.android.ide.common.layout.BaseViewRule.stripIdPrefix(id)); } } org.w3c.dom.NodeList children = node.getChildNodes(); for (int i = 0, n = children.getLength(); i < n; i++) { org.w3c.dom.Node child = children.item(i); com.android.ide.eclipse.adt.internal.editors.layout.gre.ClientRulesEngine.addIds(child, ids); } }",b205aa695b6eb0be481978d44b345de92b61a28b,,"addIds(org.w3c.dom.Node,java.util.Set)",2,17,"private static void addIds(org.w3c.dom.Node node, java.util.Set<java.lang.String> ids) { if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); java.lang.String id = element.getAttributeNS(com.android.ide.eclipse.adt.internal.editors.layout.gre.ANDROID_URI, com.android.ide.eclipse.adt.internal.editors.layout.gre.ATTR_ID); if ((id != null) && (id.startsWith(com.android.ide.eclipse.adt.internal.editors.layout.gre.NEW_ID_PREFIX))) { ids.add(com.android.ide.common.layout.BaseViewRule.stripIdPrefix(id)); } } org.w3c.dom.NodeList children = node.getChildNodes(); for (int i = 0, n = children.getLength(); i < n; i++) { org.w3c.dom.Node child = children.item(i); com.android.ide.eclipse.adt.internal.editors.layout.gre.ClientRulesEngine.addIds(child, ids); } }",8f04bde3470d5a1b41e1e1fda6d33e819a763f96,"addIds(org.w3c.dom.Node,java.util.Set)",236926,289,296
583630,src_com_android_bips_discovery_SavedDiscovery.java,,,,"boolean addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bips.discovery.DiscoveredPrinter old = find(printerUri); if (old != null) { if (printer.equals(old)) return false; mSavedPrinters.remove(old); } mSavedPrinters.add(0, printer); save(); return true; }",1a81d221c8a1d1bd2df7a06ce214fa4313bb55ee,,addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter),4,4,"boolean addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bips.discovery.DiscoveredPrinter old = find(printerUri); if (old != null) { if (printer.equals(old)) { return false; } mSavedPrinters.remove(old); } mSavedPrinters.add(0, printer); save(); return true; }",bac2e38d76745df9c33405af0e268bfcaa54a67e,addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter),33330,94,96
579565,src_java_com_android_internal_telephony_RIL.java,83.0,"@java.lang.Override public void sendSMSExpectMore(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS_EXPECT_MORE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSMSExpectMore(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendSMSExpectMore"", e); } } }",37b07a8f5ef8f9fa1a515843eece7d3eab8eff37,"@java.lang.Override public void sendSMSExpectMore(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SEND_SMS_EXPECT_MORE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSMSExpectMore(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendSMSExpectMore"", e); } } }",2e6e39a94133522927019e0147e74ebbfe33fbf5,"sendSMSExpectMore(java.lang.String,java.lang.String,android.os.Message)","sendSMSExpectMore(java.lang.String,java.lang.String,android.os.Message)",3,83,"@java.lang.Override public void sendSMSExpectMore(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS_EXPECT_MORE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSMSExpectMore(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendSMSExpectMore"", e); } } }",37b07a8f5ef8f9fa1a515843eece7d3eab8eff37,"sendSMSExpectMore(java.lang.String,java.lang.String,android.os.Message)",89256,313,309
306251,tests_wifitests_src_com_android_server_wifi_hotspot2_DomainMatcherTest.java,,,,"@org.junit.Test public void matchDomainWhenSecondaryIsSubdomainOfPrimary() throws java.lang.Exception { com.android.server.wifi.hotspot2.DomainMatcher domainMatcher = new com.android.server.wifi.hotspot2.DomainMatcher(""google.com"", java.util.Arrays.asList(""test.google.com"")); assertEquals(Match.Primary, domainMatcher.isSubDomain(""google.com"")); assertEquals(Match.Primary, domainMatcher.isSubDomain(""test.google.com"")); assertEquals(Match.Primary, domainMatcher.isSubDomain(""abcd.test.google.com"")); }",e2288584133f959a1704b55b22640aa8036eb830,,matchDomainWhenSecondaryIsSubdomainOfPrimary(),7,1,"@org.junit.Test public void matchDomainWhenSecondaryIsSubdomainOfPrimary() throws java.lang.Exception { com.android.server.wifi.hotspot2.DomainMatcher domainMatcher = new com.android.server.wifi.hotspot2.DomainMatcher(""google.com"", java.util.Arrays.asList(""test.google.com"")); assertEquals(DomainMatcher.MATCH_PRIMARY, domainMatcher.isSubDomain(""google.com"")); assertEquals(DomainMatcher.MATCH_PRIMARY, domainMatcher.isSubDomain(""test.google.com"")); assertEquals(DomainMatcher.MATCH_PRIMARY, domainMatcher.isSubDomain(""abcd.test.google.com"")); }",31ca8c757e67fc9892bbb4e318046dbd6dfbe474,matchDomainWhenSecondaryIsSubdomainOfPrimary(),64467,130,139
332037,src_com_android_server_telecom_Call.java,151.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.os.ParcelFileDescriptor getInCallToCsRttPipeForCs() { return (mInCallToConnectionServiceStreams) == null ? null : mInCallToConnectionServiceStreams[0]; },5c4d61ac37f37a4c1e58d35eb4ba753ae4fd947e,,getInCallToCsRttPipeForCs(),5,0,public android.os.ParcelFileDescriptor getInCallToCsRttPipeForCs() { return (mInCallToConnectionServiceStreams) == null ? null : mInCallToConnectionServiceStreams[com.android.server.telecom.Call.RTT_PIPE_READ_SIDE_INDEX]; },bb06a1d062329cb475c01dd20cf9815fe5d7276f,getInCallToCsRttPipeForCs(),460297,46,69
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,,"@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Exit Connecting("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }",3e4984287e50149bae0f755ccdda226980c5a761,,exit(),10,19,"@java.lang.Override public void exit() { log((((""Exit Connecting("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }",507d6d581b5c09125f90c2b01eaf3d4a6b840c0a,exit(),152151,150,99
316723,tools_ahat_src_heapdump_AhatInstance.java,11.0,public long getRetainedSize(com.android.ahat.heapdump.AhatHeap heap) { return mRetainedSizes[heap.getIndex()]; },d8d04ccef2f647549d1f24b5fa512696b261d49c,public long getRetainedSize(com.android.ahat.heapdump.AhatHeap heap) { int index = heap.getIndex(); return (index >= 0) && (index < (mRetainedSizes.length)) ? mRetainedSizes[heap.getIndex()] : 0; },cb62f11386054c4b8893d2746af21e486b1944ff,getRetainedSize(com.android.ahat.heapdump.AhatHeap),getRetainedSize(com.android.ahat.heapdump.AhatHeap),4,10,public long getRetainedSize(com.android.ahat.heapdump.AhatHeap heap) { int index = heap.getIndex(); return (0 <= index) && (index < (mRetainedSizes.length)) ? mRetainedSizes[heap.getIndex()] : 0; },48d35242a932410d49df185045ebbf94456b913f,getRetainedSize(com.android.ahat.heapdump.AhatHeap),421894,62,62
274154,src_com_android_phone_GsmUmtsCallOptions.java,1.0,"public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); }",9125dab69fd5df8d4abb17638ad16311f04c0e39,"public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); android.preference.Preference callBarringPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_BARRING_KEY); android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (prefScreen.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); android.os.PersistableBundle b = configManager.getConfig(); if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_SHOW_CALL_BARRING_UI_BOOL))) { callBarringPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); } else { prefScreen.removePreference(callBarringPref); } }",23f6ca3b710a6a08985db656ae9467ef2bd50131,"init(android.preference.PreferenceScreen,com.android.phone.SubscriptionInfoHelper)","init(android.preference.PreferenceScreen,com.android.phone.SubscriptionInfoHelper)",5,1,"public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); android.preference.Preference callBarringPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_BARRING_KEY); android.os.PersistableBundle b = null; if (subInfoHelper.hasSubId()) { b = com.android.phone.PhoneGlobals.getInstance().getCarrierConfigForSubId(subInfoHelper.getSubId()); } else { b = com.android.phone.PhoneGlobals.getInstance().getCarrierConfig(); } if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_CALL_BARRING_VISIBILITY_BOOL))) { callBarringPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); } else { prefScreen.removePreference(callBarringPref); } }",6b9f8037d7ed2fe94d8e29fe35b3a235a3817e06,"init(android.preference.PreferenceScreen,com.android.phone.SubscriptionInfoHelper)",437882,340,358
597795,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,13.0,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { when(controller.getComponentName()).thenReturn(componentName); return controller; }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }",dc10c9e0bb2236d94552324b5eaab4b055435f66,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { when(controller.getComponentName()).thenReturn(componentName); return controller; } }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }",49cc5ab342c8fdc4c5d8838be9a512b64d9d1789,testDontBindWhenNullCarrierPackage(),testDontBindWhenNullCarrierPackage(),3,13,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { when(controller.getComponentName()).thenReturn(componentName); return controller; } }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }",57c2874ac198487a638fe5f7e3d8464699c73b5c,testDontBindWhenNullCarrierPackage(),492301,450,435
19300,sdkmanager_app_tests_com_android_sdkmanager_AvdManagerTest.java,,,,"public void testCreateAvdWithSnapshot() { am.createAvd(avdFolder, this.getName(), v0_0, null, null, null, false, true, log); assertEquals(((""[P Created AVD '"" + (this.getName())) + ""\' based on Android 0.0\n]""), log.messages.toString()); assertTrue((""Expected snapshots.img in "" + (avdFolder)), new java.io.File(avdFolder, ""snapshots.img"").exists()); java.util.Map<java.lang.String, java.lang.String> map = com.android.sdklib.internal.project.ProjectProperties.parsePropertyFile(new com.android.sdklib.io.FileWrapper(avdFolder, ""config.ini""), log); assertEquals(""true"", map.get(""snapshot.present"")); }",c1d5600c81592a87681ba594d2f5399bdc00449b,,testCreateAvdWithSnapshot(),13,0,"public void testCreateAvdWithSnapshot() { mAvdManager.createAvd(mAvdFolder, this.getName(), mTarget, null, null, null, false, true, mLog); assertEquals(((""[P Created AVD '"" + (this.getName())) + ""\' based on Android 0.0\n]""), mLog.toString()); assertTrue((""Expected snapshots.img in "" + (mAvdFolder)), new java.io.File(mAvdFolder, ""snapshots.img"").exists()); java.util.Map<java.lang.String, java.lang.String> map = com.android.sdklib.internal.project.ProjectProperties.parsePropertyFile(new com.android.sdklib.io.FileWrapper(mAvdFolder, ""config.ini""), mLog); assertEquals(""true"", map.get(""snapshot.present"")); }",edc1b545d1efb6be7f8f9ca4cd637f63422a8436,testCreateAvdWithSnapshot(),29987,181,188
270260,tests_tests_media_src_android_media_cts_BassBoostTest.java,3.0,"public void test2_0SetEnabledGetEnabled() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(0); try { mBassBoost.setEnabled(true); assertTrue(""invalid state from getEnabled"", mBassBoost.getEnabled()); mBassBoost.setEnabled(false); assertFalse(""invalid state to getEnabled"", mBassBoost.getEnabled()); } catch (java.lang.IllegalStateException e) { fail(""setEnabled() in wrong state""); } finally { releaseBassBoost(); } }",c4373721de7c1c9a0544d53976aa6383f88b4711,"public void test2_0SetEnabledGetEnabled() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(1); try { mBassBoost.setEnabled(true); assertTrue(""invalid state from getEnabled"", mBassBoost.getEnabled()); mBassBoost.setEnabled(false); assertFalse(""invalid state to getEnabled"", mBassBoost.getEnabled()); } catch (java.lang.IllegalStateException e) { fail(""setEnabled() in wrong state""); } finally { releaseBassBoost(); } }",c3886474d691cc0bd29120840a582db425760cbf,test2_0SetEnabledGetEnabled(),test2_0SetEnabledGetEnabled(),5,3,"public void test2_0SetEnabledGetEnabled() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(getSessionId()); try { mBassBoost.setEnabled(true); assertTrue(""invalid state from getEnabled"", mBassBoost.getEnabled()); mBassBoost.setEnabled(false); assertFalse(""invalid state to getEnabled"", mBassBoost.getEnabled()); } catch (java.lang.IllegalStateException e) { fail(""setEnabled() in wrong state""); } finally { releaseBassBoost(); } }",6f77d6e9c180408ecef94097fdc2466605730db2,test2_0SetEnabledGetEnabled(),278705,124,126
583827,src_com_android_phone_PhoneInterfaceManager.java,166.0,"@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); setPreferredNetworkType(subId, Phone.PREFERRED_NT_MODE); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }",291675f7f9d1953732ceacb1a8b6f19ab79d99e0,"@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), ""ro.telephony.default_network"", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork))) ? java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; setPreferredNetworkType(subId, networkType); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }",1d14d436ec4c20634be1c287189d88a3da1f5a6d,factoryReset(int),factoryReset(int),4,172,"@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setUserDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), ""ro.telephony.default_network"", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork))) ? java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; setPreferredNetworkType(subId, networkType); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }",cb9677173afe6b41fbd2aac2b0c031aeb54d3af2,factoryReset(int),272393,250,250
101172,perflib_src_main_java_com_android_tools_perflib_heap_analysis_Dominators.java,,,,"private void calculate() { java.util.Map<com.android.tools.perflib.heap.Instance, java.lang.Integer> topSort = getTopologicalSort(mHeap.getRoots()); java.util.Set<com.android.tools.perflib.heap.Instance> roots = com.google.common.collect.Sets.newHashSet(); for (com.android.tools.perflib.heap.RootObj root : mHeap.getRoots()) { if ((root.getReferredInstance()) != null) { com.android.tools.perflib.heap.Instance ref = root.getReferredInstance(); idom.put(ref, ref); roots.add(ref); } } boolean changed = true; while (changed) { changed = false; for (com.android.tools.perflib.heap.Instance node : topSort.keySet()) { if (!(roots.contains(node))) { com.android.tools.perflib.heap.Instance dominator = null; for (com.android.tools.perflib.heap.Instance predecessor : node.getReferences()) { if (dominator == null) { dominator = predecessor; } else { if ((idom.get(predecessor)) != null) { com.android.tools.perflib.heap.Instance fingerA = dominator; com.android.tools.perflib.heap.Instance fingerB = predecessor; while (!(fingerA.equals(fingerB))) { if ((topSort.get(fingerA)) < (topSort.get(fingerB))) { fingerB = idom.get(fingerB); } else { fingerA = idom.get(fingerA); } } dominator = fingerA; } } } if ((idom.get(node)) != dominator) { idom.put(node, dominator); changed = true; } } } } }",6ecc78f24b25c6ff7a70d9fb230d6a917e880c61,,calculate(),5,3,"private java.util.Map<com.android.tools.perflib.heap.Instance, java.lang.Integer> buildTopologicalSort() { java.util.Map<com.android.tools.perflib.heap.Instance, java.lang.Integer> result = com.google.common.collect.Maps.newLinkedHashMap(); int currentIndex = 0; for (com.android.tools.perflib.heap.Instance node : com.google.common.collect.Lists.reverse(mPostorder)) { result.put(node, (++currentIndex)); } return result; }",c4a9301711d12ea74bb4e703563a749e100c3391,buildTopologicalSort(),504676,424,128
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,16.0,"public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { callback.onComplete(resultCode, null); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling disableProfile"", e); throw e.rethrowFromSystemServer(); } }",c7f9e28a95d18a5a840a25efcbdca97f3bb67a2b,"public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling disableProfile"", e); throw e.rethrowFromSystemServer(); } }",7312a631f03c166344239df1a253b88bdf7802c3,"disableProfile(java.lang.String,java.lang.String,boolean,android.telephony.euicc.EuiccCardManager$ResultCallback)","disableProfile(java.lang.String,java.lang.String,boolean,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",2,2,"public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling disableProfile"", e); throw e.rethrowFromSystemServer(); } }",90eb2ffb9f06e8096c1cf8cdcc5f2b0c8956df25,"disableProfile(java.lang.String,java.lang.String,boolean,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",476191,197,190
509496,src_com_android_bluetooth_mapclient_MnsService.java,2.0,"void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, ""stop()""); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }",cc642dd341a23f70a2a566ff137e8f8ed4f9607a,"void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, ""stop()""); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.sServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.sServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.sServerSockets = null; } }",71606b6ecf862fa0fad0f026bed02d4f7fcfb433,stop(),stop(),20,3,"void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, ""stop()""); mShutdown = true; cleanUpSdpRecord(); if ((com.android.bluetooth.mapclient.MnsService.sServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.sServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.sServerSockets = null; } }",010642eddda2a9b29e9f3ffe293b74709651a87d,stop(),439598,121,127
283125,luni_src_test_java_libcore_dalvik_system_SocketTaggingTest.java,5.0,"@java.lang.Override public void untag(java.io.FileDescriptor socketDescriptor) throws java.net.SocketException { libcore.dalvik.system.SocketTaggingTest.StatAndDescriptor existing = liveDescriptors.remove(socketDescriptor.getInt$()); android.system.StructStat current = libcore.dalvik.system.SocketTaggingTest.fstat(socketDescriptor); assertEquals(existing.stat.st_dev, current.st_dev); assertEquals(existing.stat.st_ino, current.st_ino); }",a2c31fc522d7b199211e5394b990dd1975332127,@java.lang.Override public void untag(java.io.FileDescriptor socketDescriptor) throws java.net.SocketException { libcore.dalvik.system.SocketTaggingTest.StatAndDescriptor existing = liveDescriptors.remove(socketDescriptor.getInt$()); },d326a7aa7cf3247eb6f129c4f84be39033576c59,untag(java.io.FileDescriptor),untag(java.io.FileDescriptor),8,5,"@java.lang.Override public void untag(java.io.FileDescriptor socketDescriptor) throws java.net.SocketException { libcore.dalvik.system.SocketTaggingTest.StatAndDescriptor existing = liveDescriptors.remove(socketDescriptor.getInt$()); android.system.StructStat current = libcore.dalvik.system.SocketTaggingTest.fstat(socketDescriptor); assertEquals(existing.stat.st_dev, current.st_dev); assertEquals(existing.stat.st_ino, current.st_ino); }",a2c31fc522d7b199211e5394b990dd1975332127,untag(java.io.FileDescriptor),427731,56,114
120480,build-system_builder_src_main_java_com_android_builder_core_VariantConfiguration.java,2.0,@com.android.annotations.NonNull public java.util.Collection<com.android.builder.dependency.JarDependency> getJars() { return mJars; },971aaebd7137b336e726382578fadd8c223b8a9f,@com.android.annotations.NonNull public java.util.Collection<com.android.builder.dependency.JarDependency> getJarDependencies() { return mJars; },6ff5c2b99c33842bb4a72b5f4ee26b3109609dbb,getJars(),getJarDependencies(),7,13,@com.android.annotations.NonNull public java.util.Collection<com.android.builder.dependency.JarDependency> getExternalJarDependencies() { return mExternalJars; },89c94e28085b48f73f298724288d80970eab106f,getExternalJarDependencies(),391904,36,38
19443,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,20.0,"public void testGetSimCountryIso() { java.lang.String countryCode = mTelephonyManager.getSimCountryIso(); assertTrue((((""Country code '"" + countryCode) + ""' did not match "") + (android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN)), java.util.regex.Pattern.matches(android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN, countryCode)); }",61c8012671e2206d386011e463c253bec972700c,"public void testGetSimCountryIso() { if ((mTelephonyManager.getPhoneType()) == (android.telephony.TelephonyManager.PHONE_TYPE_NONE)) return; java.lang.String countryCode = mTelephonyManager.getSimCountryIso(); assertTrue((((""Country code '"" + countryCode) + ""' did not match "") + (android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN)), java.util.regex.Pattern.matches(android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN, countryCode)); }",f7eaa12221313f8589bf4a820ef89f873f9f7804,testGetSimCountryIso(),testGetSimCountryIso(),2,20,"public void testGetSimCountryIso() { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); java.lang.String countryCode = mTelephonyManager.getSimCountryIso(); if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) { assertTrue((((""Country code '"" + countryCode) + ""' did not match "") + (android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN)), java.util.regex.Pattern.matches(android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN, countryCode)); } else { assertEquals("""", countryCode); } }",cefc51bc6d9b000c6febbfc72fb1f10364139780,testGetSimCountryIso(),134569,122,140
491497,dx_tests_142-const-method-handle_src_constmethodhandle_TestGenerator.java,,,,"private void generateMethodMain(org.objectweb.asm.ClassVisitor cv) { org.objectweb.asm.MethodVisitor mv = cv.visitMethod(((org.objectweb.asm.Opcodes.ACC_PUBLIC) + (org.objectweb.asm.Opcodes.ACC_STATIC)), ""main"", ""([Ljava/lang/String;)V"", null, null); java.lang.String internalName = org.objectweb.asm.Type.getInternalName(constmethodhandle.ConstTest.class); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, ""test1"", ""()Ljava/lang/invoke/MethodHandle;"", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, ""test2"", ""()Ljava/lang/invoke/MethodType;"", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs((-1), (-1)); }",03320fac2d449d5de6dcd2feb01b4970a324ce65,,generateMethodMain(org.objectweb.asm.ClassVisitor),8,2,"private void generateMethodMain(org.objectweb.asm.ClassVisitor cv) { org.objectweb.asm.MethodVisitor mv = cv.visitMethod(((org.objectweb.asm.Opcodes.ACC_PUBLIC) + (org.objectweb.asm.Opcodes.ACC_STATIC)), ""main"", ""([Ljava/lang/String;)V"", null, null); java.lang.String internalName = org.objectweb.asm.Type.getInternalName(constmethodhandle.ConstTest.class); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, ""test1"", ""()Ljava/lang/invoke/MethodHandle;"", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, ""displayMethodHandle"", ""(Ljava/lang/invoke/MethodHandle;)V"", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, ""test2"", ""()Ljava/lang/invoke/MethodType;"", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, ""displayMethodType"", ""(Ljava/lang/invoke/MethodType;)V"", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs((-1), (-1)); }",b7f8332c50d48b69d6fab711366b9fb10e58eae6,generateMethodMain(org.objectweb.asm.ClassVisitor),247237,184,244
318132,PMC_src_com_android_pmc_GattClientListener.java,,,,"@java.lang.Override public void onCharacteristicWrite(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattCharacteristic characteristic, int status) { if (writeLogForOnCharacteristicWrite()) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (""onCharacteristicWrite: "" + status)); } long timeElapse = (android.os.SystemClock.elapsedRealtime()) - (mStartWriteTime); if (timeElapse < ((mWriteTime) * 1000)) { writeCharacteristic(gatt, ((int) (timeElapse / 1000))); } }",e28d7aae745114de5dd60d92e4dcde5b9214238a,,"onCharacteristicWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)",6,16,"@java.lang.Override public void onCharacteristicWrite(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattCharacteristic characteristic, int status) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (""onCharacteristicWrite: "" + status)); long timeElapse = (android.os.SystemClock.elapsedRealtime()) - (mStartWriteTime); if (timeElapse < ((mWriteTime) * (com.android.pmc.GattClientListener.MILLSEC))) { writeCharacteristic(gatt, ((int) (timeElapse / (com.android.pmc.GattClientListener.MILLSEC)))); } }",4fe71f8c307cd38ee047f46baa17e5eecbe04987,"onCharacteristicWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)",63151,137,156
205750,tests_tests_telephony_src_android_telephony_cts_MmsTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean isSupportMMS() { return android.telephony.SmsManager.getDefault().getCarrierConfigValues().getBoolean(SmsManager.MMS_CONFIG_MMS_ENABLED, true); }",96006684dc7e9056529abeba63af232160c6894e,,isSupportMMS(),5,0,"private static boolean doesSupportMMS() { return android.telephony.SmsManager.getDefault().getCarrierConfigValues().getBoolean(SmsManager.MMS_CONFIG_MMS_ENABLED, true); }",1cf4ed2f9c735f166ffb6c82d313523e90e83b03,doesSupportMMS(),518771,42,42
18895,layoutlib_utils_src_com_android_ide_common_layoutlib_LayoutBridgeWrapper.java,,,,@java.lang.Override public boolean dispose() { return super.dispose(); },46ff241feea2afc7987f90ed7f20def846ce3dde,,dispose(),3,7,@java.lang.Override public boolean dispose() { return true; },5d92b3d7aefc379da13899e5bbae6b2efcc80145,dispose(),229049,17,15
336363,luni_src_test_java_libcore_java_util_CalendarBuilderTest.java,,,,@org.junit.Test(expected = java.lang.NullPointerException.class) public void test_setTimeZone_null() { builder.setTimeZone(null); },f73a73730a1c8254f5da914beff23e2a4ea16067,,test_setTimeZone_null(),3,14,@org.junit.Test(expected = java.lang.NullPointerException.class) public void test_setTimeZone_null() { new java.util.Calendar.Builder().setTimeZone(null); },3612bfc5b90802e7ecbaa75079712d6e3e04d2f9,test_setTimeZone_null(),98471,38,45
112176,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_model_BuildTypeImpl.java,4.0,@java.lang.Override public boolean isRenderscriptDebugBuild() { return renderscriptDebugBuild; },0d15c67af51fc3679f82404e5ae167adb6a29c62,@java.lang.Override public boolean isRenderscriptDebuggable() { return renderscriptDebugBuild; },7ea13436c00122780d7cb7730304af546cfb29fb,isRenderscriptDebugBuild(),isRenderscriptDebuggable(),5,10,@java.lang.Override public boolean isRenderscriptDebuggable() { return renderscriptDebuggable; },6ab2338e0511acef3c35507f63884cc14df893a9,isRenderscriptDebuggable(),424112,23,24
15762,ddms_libs_ddmlib_src_com_android_ddmlib_AdbHelper.java,15.0,"public static java.nio.channels.SocketChannel open(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int devicePort) throws java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createAdbForwardRequest(null, devicePort); if ((com.android.ddmlib.AdbHelper.write(adbChan, req)) == false) throw new java.io.IOException(""failed submitting request to ADB""); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) throw new java.io.IOException(""connection request rejected""); adbChan.configureBlocking(true); } catch (java.io.IOException ioe) { adbChan.close(); throw ioe; } return adbChan; }",92656996fef8df5884f880f251389b096f0e0ffd,"public static java.nio.channels.SocketChannel open(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int devicePort) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createAdbForwardRequest(null, devicePort); com.android.ddmlib.AdbHelper.write(adbChan, req); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) { throw new java.io.IOException(""connection request rejected""); } adbChan.configureBlocking(true); } finally { adbChan.close(); } return adbChan; }",459caa28825cef8e9c81656dbe3053926259f27f,"open(java.net.InetSocketAddress,com.android.ddmlib.Device,int)","open(java.net.InetSocketAddress,com.android.ddmlib.Device,int)",3,14,"public static java.nio.channels.SocketChannel open(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int devicePort) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createAdbForwardRequest(null, devicePort); com.android.ddmlib.AdbHelper.write(adbChan, req); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) { throw new java.io.IOException(""connection request rejected""); } adbChan.configureBlocking(true); } catch (com.android.ddmlib.TimeoutException e) { adbChan.close(); throw e; } catch (java.io.IOException e) { adbChan.close(); throw e; } return adbChan; }",620dee928eebe31fd297d47a7970844bf20f54df,"open(java.net.InetSocketAddress,com.android.ddmlib.Device,int)",83712,256,291
143160,hostsidetests_security_src_android_cts_security_SELinuxHostTest.java,45.0,"private void assertDomainOne(java.lang.String domain, java.lang.String executable) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> procs = android.cts.security.SELinuxHostTest.ProcessDetails.getProcMap(mDevice).get(domain); java.lang.String msg = ((((""Expected 1 process in SELinux domain \"""" + domain) + ""\"""") + "" Found \"""") + procs) + ""\""""; assertNotNull(msg, procs); assertEquals(msg, 1, procs.size()); msg = ((((((""Expected executable \"""" + executable) + ""\"" in SELinux domain \"""") + domain) + ""\"""") + ""Found: \"""") + procs) + ""\""""; assertEquals(msg, executable, procs.get(0).procTitle); }",ae466414db488bef7148a5e012c112232c6682fd,"private void assertDomainOne(java.lang.String domain, java.lang.String executable) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> procs = android.cts.security.SELinuxHostTest.ProcessDetails.getProcMap(mDevice).get(domain); java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> exeProcs = android.cts.security.SELinuxHostTest.ProcessDetails.getExeMap(mDevice).get(executable); java.lang.String msg = ((((""Expected 1 process in SELinux domain \"""" + domain) + ""\"""") + "" Found \"""") + procs) + ""\""""; assertNotNull(msg, procs); assertEquals(msg, 1, procs.size()); msg = ((((((""Expected executable \"""" + executable) + ""\"" in SELinux domain \"""") + domain) + ""\"""") + ""Found: \"""") + procs) + ""\""""; assertEquals(msg, executable, procs.get(0).procTitle); msg = ((((""Expected 1 process with executable \"""" + executable) + ""\"""") + "" Found \"""") + procs) + ""\""""; assertNotNull(msg, exeProcs); assertEquals(msg, 1, exeProcs.size()); msg = ((((((""Expected executable \"""" + executable) + ""\"" in SELinux domain \"""") + domain) + ""\"""") + ""Found: \"""") + procs) + ""\""""; assertEquals(msg, executable, exeProcs.get(0).procTitle); }",a766d7b86e508d23073696c90f563225b608172a,"assertDomainOne(java.lang.String,java.lang.String)","assertDomainOne(java.lang.String,java.lang.String)",2,45,"private void assertDomainOne(java.lang.String domain, java.lang.String executable) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> procs = android.cts.security.SELinuxHostTest.ProcessDetails.getProcMap(mDevice).get(domain); java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> exeProcs = android.cts.security.SELinuxHostTest.ProcessDetails.getExeMap(mDevice).get(executable); java.lang.String msg = ((((""Expected 1 process in SELinux domain \"""" + domain) + ""\"""") + "" Found \"""") + procs) + ""\""""; assertNotNull(msg, procs); assertEquals(msg, 1, procs.size()); msg = ((((((""Expected executable \"""" + executable) + ""\"" in SELinux domain \"""") + domain) + ""\"""") + ""Found: \"""") + procs) + ""\""""; assertEquals(msg, executable, procs.get(0).procTitle); msg = ((((""Expected 1 process with executable \"""" + executable) + ""\"""") + "" Found \"""") + procs) + ""\""""; assertNotNull(msg, exeProcs); assertEquals(msg, 1, exeProcs.size()); msg = ((((((""Expected executable \"""" + executable) + ""\"" in SELinux domain \"""") + domain) + ""\"""") + ""Found: \"""") + procs) + ""\""""; assertEquals(msg, domain, exeProcs.get(0).label); }",d212b72be41b9693fd304a2805cbbfe738a972bc,"assertDomainOne(java.lang.String,java.lang.String)",167560,347,346
619666,luni_src_test_java_libcore_java_net_URLTest.java,72.0,"public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail(""Blockguard.Policy.onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { fail(""Blockguard.Policy.onReadFromDisk""); } @java.lang.Override public void onNetwork() { fail(""Blockguard.Policy.onNetwork""); } @java.lang.Override public void onUnbufferedIO() { fail(""Blockguard.Policy.onUnbufferedIO""); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL(""http://www.google.com/""); java.net.URL url2 = new java.net.URL(""http://www.nest.com/""); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }",629fdadb20ee86717d9ce939ea4ce6e1b1d34225,"public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail(""Blockguard.Policy.onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { fail(""Blockguard.Policy.onReadFromDisk""); } @java.lang.Override public void onNetwork() { fail(""Blockguard.Policy.onNetwork""); } @java.lang.Override public void onUnbufferedIO() { fail(""Blockguard.Policy.onUnbufferedIO""); } @java.lang.Override public void onCustomSlowCall(java.lang.String name) { fail((""Blockguard.Policy.onCustomSlowCall: "" + name)); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL(""http://www.google.com/""); java.net.URL url2 = new java.net.URL(""http://www.nest.com/""); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }",d75a9f5ad9dd8e34325da5359e46393051a60c54,testHashCodeAndEqualsDoesNotPerformNetworkIo(),testHashCodeAndEqualsDoesNotPerformNetworkIo(),6,72,"public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail(""Blockguard.Policy.onWriteToDisk""); } @java.lang.Override public void onReadFromDisk() { fail(""Blockguard.Policy.onReadFromDisk""); } @java.lang.Override public void onNetwork() { fail(""Blockguard.Policy.onNetwork""); } @java.lang.Override public void onUnbufferedIO() { fail(""Blockguard.Policy.onUnbufferedIO""); } @java.lang.Override public void onExplicitGc() { fail(""Blockguard.Policy.onExplicitGc""); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL(""http://www.google.com/""); java.net.URL url2 = new java.net.URL(""http://www.nest.com/""); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }",36a06afa5e903c6106130a620ea2c4da0ec382c9,testHashCodeAndEqualsDoesNotPerformNetworkIo(),332843,305,293
91995,luni_src_main_java_libcore_io_Os.java,0.0,public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws libcore.io.ErrnoException;,42e404fe5a38a01cd8e2fab0af3bac3c65823201,public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.os.ErrnoException;,a2b2ce97cd14118e209ead470a4cd78421f5a6ad,dup(java.io.FileDescriptor),dup(java.io.FileDescriptor),3,0,public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.system.ErrnoException;,c90e425614974d497db51804af2d86bc8b4220fe,dup(java.io.FileDescriptor),170267,26,26
117292,sched_src_com_android_sched_vfs_InputVDir.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@javax.annotation.Nonnull boolean removeInputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath path);,ff4c04b3c9365285d2f5df6ecbea818781a8e7d2,,removeInputVFile(com.android.sched.vfs.VPath),12,0,@javax.annotation.Nonnull void delete(@javax.annotation.Nonnull com.android.sched.vfs.VPath path) throws com.android.sched.util.file.CannotDeleteFileException;,f568113150d9ad8af237c616386e7da2fab46e2a,delete(com.android.sched.vfs.VPath),275279,29,42
186130,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,30.0,"@org.junit.Test public void retroLambdaDefaultMethodsTest015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_015).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",ecfb9ef3c0c690a29c42910997e4d833e44ea377,"@org.junit.Test public void retroLambdaDefaultMethodsTest015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_015).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",8319cb6c11a39eebf1012bb5c6c2afc35e2b5599,retroLambdaDefaultMethodsTest015(),retroLambdaDefaultMethodsTest015(),7,30,@org.junit.Test public void retroLambdaDefaultMethodsTest015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_015).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },37ce1494e31b8c94ccdf48b6d3c380acfaec8ad9,retroLambdaDefaultMethodsTest015(),466301,91,65
424680,services_core_java_com_android_server_ConnectivityService.java,179.0,"private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); updateClat(newLp, oldLp, networkAgent); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }",ba25cff7ff81d8e918453832302c2b6799a59046,"private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); if (com.android.server.connectivity.Nat464Xlat.requiresClat(networkAgent)) { networkAgent.startClat(mNetd, mTrackerHandler); } if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }",64794e2603ab27c233f610418f6483d1a62cadb4,"updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)","updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)",17,182,"private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); updateClat(networkAgent); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }",786dbe3b6758a088537ed949d1360cf8f1273e43,"updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)",332109,301,267
116997,telecomm_java_android_telecom_ConnectionService.java,7.0,"private void conference(java.lang.String callId1, java.lang.String callId2) { android.telecom.Log.d(this, ""conference %s, %s"", callId1, callId2); android.telecom.Connection connection2 = findConnectionForAction(callId2, ""conference""); if (connection2 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Log.w(this, ""Connection2 missing in conference request %s."", callId2); return; } android.telecom.Connection connection1 = findConnectionForAction(callId1, ""conference""); if (connection1 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Conference conference1 = findConferenceForAction(callId1, ""addConnection""); if (conference1 == (getNullConference())) { android.telecom.Log.w(this, ""Connection1 or Conference1 missing in conference request %s."", callId1); } else { conference1.onMerge(connection2); } } else { onConference(connection1, connection2); } }",cb229bd7b3ae3fe95a310f2657219a3405c80ba5,"private void conference(java.lang.String callId1, java.lang.String callId2) { android.telecom.Log.d(this, ""conference %s, %s"", callId1, callId2); android.telecom.Connection connection2 = findConnectionForAction(callId2, ""conference""); android.telecom.Conference conference2 = getNullConference(); if (connection2 == (android.telecom.ConnectionService.getNullConnection())) { conference2 = findConferenceForAction(callId2, ""conference""); if (conference2 == (getNullConference())) { android.telecom.Log.w(this, ""Connection2 or Conference2 missing in conference request %s."", callId2); return; } } android.telecom.Connection connection1 = findConnectionForAction(callId1, ""conference""); if (connection1 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Conference conference1 = findConferenceForAction(callId1, ""addConnection""); if (conference1 == (getNullConference())) { android.telecom.Log.w(this, ""Connection1 or Conference1 missing in conference request %s."", callId1); } else { if (connection2 != (android.telecom.ConnectionService.getNullConnection())) { conference1.onMerge(connection2); } else { android.telecom.Log.wtf(this, (""There can only be one conference and an attempt was made to "" + ""merge two conferences."")); return; } } } else { if (conference2 != (getNullConference())) { conference2.onMerge(connection1); } else { onConference(connection1, connection2); } } }",bdd4024d19410b45737b814ebd9940acadac14fc,"conference(java.lang.String,java.lang.String)","conference(java.lang.String,java.lang.String)",2,7,"private void conference(java.lang.String callId1, java.lang.String callId2) { android.telecom.Log.d(this, ""conference %s, %s"", callId1, callId2); android.telecom.Connection connection2 = findConnectionForAction(callId2, ""conference""); if (connection2 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Log.w(this, ""Connection2 missing in conference request %s."", callId2); return; } android.telecom.Connection connection1 = findConnectionForAction(callId1, ""conference""); if (connection1 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Conference conference1 = findConferenceForAction(callId1, ""addConnection""); if (conference1 == (getNullConference())) { android.telecom.Log.w(this, ""Connection1 or Conference1 missing in conference request %s."", callId1); } else { conference1.onMerge(connection2); } } else { onConference(connection1, connection2); } }",cb229bd7b3ae3fe95a310f2657219a3405c80ba5,"conference(java.lang.String,java.lang.String)",188357,382,249
38761,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_assetstudio_ConfigureAssetSetPage.java,3.0,"private void updateFontLabel(org.eclipse.swt.graphics.Font f) { org.eclipse.swt.graphics.FontData[] fd = f.getFontData(); org.eclipse.swt.graphics.FontData primary = fd[0]; java.lang.String description = java.lang.String.format(""%1$s"", primary.getName()); mFontButton.setText(description); }",9d1719ae6c23b70339929ccac9156d461f6b3b8e,private void updateFontLabel() { mFontButton.setText(mValues.textFont.getFontName()); },d97178c74ab2a922f3e72083e146820263396a2d,updateFontLabel(org.eclipse.swt.graphics.Font),updateFontLabel(),2,7,private void updateFontLabel() { mFontButton.setText(mValues.getTextFont().getFontName()); },2a8d85dca4590a85c9ea93bef861311021282bbb,updateFontLabel(),420265,23,23
52060,luni_src_main_java_org_apache_harmony_security_provider_cert_X509CertPathImpl.java,0.0,"public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[] in, java.lang.String encoding) throws java.security.cert.CertificateException { if (!(org.apache.harmony.security.provider.cert.X509CertPathImpl.encodings.contains(encoding))) { throw new java.security.cert.CertificateException(""Unsupported encoding""); } try { if (org.apache.harmony.security.provider.cert.X509CertPathImpl.encodingsArr[0].equals(encoding)) { return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); } else { org.apache.harmony.security.pkcs7.ContentInfo ci = ((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in))); org.apache.harmony.security.pkcs7.SignedData sd = ci.getSignedData(); if (sd == null) { throw new java.security.cert.CertificateException(""Incorrect PKCS7 encoded form: missing signed data""); } java.util.List<org.apache.harmony.security.x509.Certificate> certs = sd.getCertificates(); if (certs == null) { certs = new java.util.ArrayList<org.apache.harmony.security.x509.Certificate>(); } java.util.List<org.apache.harmony.security.provider.cert.X509CertImpl> result = new java.util.ArrayList<org.apache.harmony.security.provider.cert.X509CertImpl>(); for (org.apache.harmony.security.x509.Certificate cert : certs) { result.add(new org.apache.harmony.security.provider.cert.X509CertImpl(cert)); } return new org.apache.harmony.security.provider.cert.X509CertPathImpl(result, org.apache.harmony.security.provider.cert.X509CertPathImpl.PKCS7, ci.getEncoded()); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException((""Incorrect encoded form: "" + (e.getMessage()))); } }",371260fd4fc77ff8745820227777a0c2c5c7e220,"public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[] in, java.lang.String encoding) throws java.security.cert.CertificateException { try { if (org.apache.harmony.security.provider.cert.X509CertPathImpl.PKI_PATH_NAME.equals(encoding)) { return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); } else if (org.apache.harmony.security.provider.cert.X509CertPathImpl.PKCS7_NAME.equals(encoding)) { return org.apache.harmony.security.provider.cert.X509CertPathImpl.getCertPathFromContentInfo(((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in)))); } else { throw new java.security.cert.CertificateException((""Unsupported encoding: "" + encoding)); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException(""Incorrect encoded form"", e); } }",4ae51bc02f8ba6738ae001bbcbb83f80c609421a,"getInstance(byte[],java.lang.String)","getInstance(byte[],java.lang.String)",7,0,"public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[] in, java.lang.String encoding) throws java.security.cert.CertificateException { try { final org.apache.harmony.security.provider.cert.X509CertPathImpl.Encoding encType = org.apache.harmony.security.provider.cert.X509CertPathImpl.Encoding.findByApiName(encoding); if (encType == null) { throw new java.security.cert.CertificateException((""Unsupported encoding: "" + encoding)); } switch (encType) { case PKI_PATH : return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); case PKCS7 : return org.apache.harmony.security.provider.cert.X509CertPathImpl.getCertPathFromContentInfo(((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in)))); default : throw new java.security.cert.CertificateException((""Unsupported encoding: "" + encoding)); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException(""Failed to decode CertPath"", e); } }",6d65193abbcaa705a730f5ed3d2e8829f70e997c,"getInstance(byte[],java.lang.String)",7401,271,306
114187,plugins_gradle_tooling-extension-impl_src_org_jetbrains_plugins_gradle_tooling_internal_IdeaSourceDirectoryImpl.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isGenerated() { return false; },96a716921a75e951e4ffa7f2be613d6416ac56b6,,isGenerated(),2,1,@java.lang.Override public boolean isGenerated() { return myGenerated; },5f749b27b4593253102ab75ce84c21dae33d96b6,isGenerated(),147502,16,17
60220,src_com_google_doclava_ClassInfo.java,62.0,"private boolean implementsInterface(com.google.doclava.ClassInfo cl, java.lang.String iface) { if (cl.qualifiedName().equals(iface)) { return true; } for (com.google.doclava.ClassInfo clImplements : cl.interfaces()) { if (implementsInterface(clImplements, iface)) { return true; } } if (((cl.mSuperclass) != null) && (implementsInterface(cl.mSuperclass, iface))) { return true; } return false; }",5e9674bc18bd7e4244aba882dd62609d9353e9c8,public void setPackage(com.google.doclava.PackageInfo pkg) { mContainingPackage = pkg; },40be39f409ed619ec06966aaf6f4fdb8b979c74c,"implementsInterface(com.google.doclava.ClassInfo,java.lang.String)",setPackage(com.google.doclava.PackageInfo),2,114,void setPackage(com.google.doclava.PackageInfo pkg) { mContainingPackage = pkg; },268a21e5f6cbafda6bcc027469a3d1b7641bedc6,setPackage(com.google.doclava.PackageInfo),72122,24,23
175242,src_main_java_org_conscrypt_ct_CTPolicyImpl.java,,,,"@java.lang.Override public boolean doesResultConformToPolicy(org.conscrypt.ct.CTVerificationResult result, java.security.cert.X509Certificate certificate) { java.util.Set<org.conscrypt.ct.CTLogInfo> logSet = new java.util.HashSet(); for (org.conscrypt.ct.VerifiedSCT verifiedSCT : result.getValidSCTs()) { org.conscrypt.ct.CTLogInfo log = logStore.getKnownLog(verifiedSCT.sct.getLogID()); if (log != null) { logSet.add(log); } } return (logSet.size()) >= (minimumLogCount); }",9db19fbe870cef648555354918a2064e74343865,,"doesResultConformToPolicy(org.conscrypt.ct.CTVerificationResult,java.security.cert.X509Certificate)",7,0,"@java.lang.Override public boolean doesResultConformToPolicy(org.conscrypt.ct.CTVerificationResult result, java.lang.String hostname, java.security.cert.X509Certificate[] chain) { java.util.Set<org.conscrypt.ct.CTLogInfo> logSet = new java.util.HashSet(); for (org.conscrypt.ct.VerifiedSCT verifiedSCT : result.getValidSCTs()) { org.conscrypt.ct.CTLogInfo log = logStore.getKnownLog(verifiedSCT.sct.getLogID()); if (log != null) { logSet.add(log); } } return (logSet.size()) >= (minimumLogCount); }",9b000e1b9b56a69af8934cab092a54df7d9f5cca,"doesResultConformToPolicy(org.conscrypt.ct.CTVerificationResult,java.lang.String,java.security.cert.X509Certificate[])",95068,155,163
316543,core_java_android_webkit_WebViewZygote.java,6.0,public static android.os.ZygoteProcess getProcess() { android.webkit.WebViewZygote.connectToZygoteIfNeeded(); return android.webkit.WebViewZygote.sZygote; },eb629c582b62eacf62aa2188f3b481a114d1ce69,public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.connectToZygoteIfNeeded(); return android.webkit.WebViewZygote.sZygote; } },15ad5d5c71ab409c2a050a4da41cc173b0c176cc,getProcess(),getProcess(),3,5,public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.connectToZygoteIfNeededLocked(); return android.webkit.WebViewZygote.sZygote; } },893821f4a61d37e67c0122f033c78c9119ad2bfe,getProcess(),65552,68,69
236051,jack_src_com_android_jack_jayce_JayceClassOrInterfaceLoader.java,3.0,"@javax.annotation.Nonnull com.android.jack.jayce.DeclaredTypeNode getNNode(@javax.annotation.Nonnull com.android.jack.jayce.NodeLevel minimumLevel) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = nnode.get(); if ((type == null) || (!(type.getLevel().keep(minimumLevel)))) { java.io.InputStream in = null; try { in = new java.io.BufferedInputStream(source.getInputStream()); com.android.jack.jayce.NodeLevel loadLevel = getLevelForLoading(minimumLevel); type = com.android.jack.jayce.JayceReaderFactory.get(inputJackLibrary, in).readType(loadLevel); nnode = new java.lang.ref.SoftReference<com.android.jack.jayce.DeclaredTypeNode>(type); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(inputJackLibrary.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.SEVERE, ((""Library "" + (inputJackLibrary.getLocation().getDescription())) + "" is invalid""), e); throw new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation()); } finally { try { if (in != null) { in.close(); } } catch (java.io.IOException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.WARNING, (""Failed to close input stream on "" + (source.getLocation().getDescription())), e); } } tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.NNODE_RELOAD).add(((loadCount) > 0)); (loadCount)++; } return type; }",748ac9bb5a76db1a3b5f6287ae729e77b2a3e6ed,"@javax.annotation.Nonnull com.android.jack.jayce.DeclaredTypeNode getNNode(@javax.annotation.Nonnull com.android.jack.jayce.NodeLevel minimumLevel) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = nnode.get(); if ((type == null) || (!(type.getLevel().keep(minimumLevel)))) { java.io.InputStream in = null; try { in = new java.io.BufferedInputStream(source.getInputStream()); com.android.jack.jayce.NodeLevel loadLevel = getLevelForLoading(minimumLevel); type = com.android.jack.jayce.JayceReaderFactory.get(inputJackLibrary, in).readType(loadLevel); nnode = new java.lang.ref.SoftReference<com.android.jack.jayce.DeclaredTypeNode>(type); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new com.android.jack.library.LibraryIOException(inputJackLibrary.getLocation(), e); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(inputJackLibrary.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.SEVERE, ((""Library "" + (inputJackLibrary.getLocation().getDescription())) + "" is invalid""), e); throw new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation()); } finally { try { if (in != null) { in.close(); } } catch (java.io.IOException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.WARNING, (""Failed to close input stream on "" + (source.getLocation().getDescription())), e); } } tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.NNODE_RELOAD).add(((loadCount) > 0)); (loadCount)++; } return type; }",7f5dc68e7a22562ccd6d49c564241a208c60c211,getNNode(com.android.jack.jayce.NodeLevel),getNNode(com.android.jack.jayce.NodeLevel),4,3,"@javax.annotation.Nonnull com.android.jack.jayce.DeclaredTypeNode getNNode(@javax.annotation.Nonnull com.android.jack.jayce.NodeLevel minimumLevel) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = nnode.get(); if ((type == null) || (!(type.getLevel().keep(minimumLevel)))) { java.io.InputStream in = null; try { in = new java.io.BufferedInputStream(source.getInputStream()); com.android.jack.jayce.NodeLevel loadLevel = getLevelForLoading(minimumLevel); type = com.android.jack.jayce.JayceReaderFactory.get(inputJackLibrary, in).readType(loadLevel); nnode = new java.lang.ref.SoftReference<com.android.jack.jayce.DeclaredTypeNode>(type); } catch (java.io.IOException | com.android.sched.util.file.WrongPermissionException e) { throw new com.android.jack.library.LibraryIOException(inputJackLibrary.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.SEVERE, ((""Library "" + (inputJackLibrary.getLocation().getDescription())) + "" is invalid""), e); throw new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation()); } finally { try { if (in != null) { in.close(); } } catch (java.io.IOException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.WARNING, (""Failed to close input stream on "" + (source.getLocation().getDescription())), e); } } tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.NNODE_RELOAD).add(((loadCount) > 0)); (loadCount)++; } return type; }",b2808f65dc5100e39d3a2fbd7b224998a24f50ff,getNNode(com.android.jack.jayce.NodeLevel),293521,505,479
142421,sched_src_com_android_sched_util_codec_PairListToMapCodecConverter.java,0.0,"@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.util.Map<T, U> data) throws com.android.sched.util.codec.CheckingException { codec.checkValue(context, new java.util.ArrayList<java.util.Map.Entry<T, U>>(data.entrySet())); }",ccc9cff57b22b76aa8667490fd030be9e957005d,"@java.lang.Override @javax.annotation.Nonnull protected java.util.List<com.android.sched.util.codec.PairCodec.Pair<T, U>> convertBack(@javax.annotation.Nonnull java.util.Map<T, U> data) { java.util.List<com.android.sched.util.codec.PairCodec.Pair<T, U>> list = new java.util.ArrayList<PairCodec.Pair<T, U>>(data.size()); for (java.util.Map.Entry<T, U> entry : data.entrySet()) { list.add(new com.android.sched.util.codec.PairCodec.Pair<T, U>(entry.getKey(), entry.getValue())); } return list; }",eddbf90728dda415bf8178d2d84c85bfc739f9f1,"checkValue(com.android.sched.util.codec.CodecContext,java.util.Map)",convertBack(java.util.Map),5,0,"@java.lang.Override @javax.annotation.Nonnull protected java.util.List<com.android.sched.util.codec.PairCodec.Pair<T, U>> revert(@javax.annotation.Nonnull java.util.Map<T, U> data) { java.util.List<com.android.sched.util.codec.PairCodec.Pair<T, U>> list = new java.util.ArrayList<PairCodec.Pair<T, U>>(data.size()); for (java.util.Map.Entry<T, U> entry : data.entrySet()) { list.add(new com.android.sched.util.codec.PairCodec.Pair<T, U>(entry.getKey(), entry.getValue())); } return list; }",12159c953782278949b71b4d3375971ef0b25343,revert(java.util.Map),460545,167,166
152911,tests_tests_media_src_android_media_cts_MediaSessionTest.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onPlaybackStateChanged(android.media.session.PlaybackState state) { synchronized(mWaitLock) { mOnPlaybackStateChangedCalled = true; mWaitLock.notify(); } },fd764bc75d72665bdf6164d9462a7e9b110c8f0b,,onPlaybackStateChanged(android.media.session.PlaybackState),12,7,@java.lang.Override public void onPlaybackStateChanged(android.media.session.PlaybackState state) { synchronized(mWaitLock) { mOnPlaybackStateChangedCalled = true; mPlaybackState = state; mWaitLock.notify(); } },ac1b287b629e7e17880378ce8df0d889c7ae5212,onPlaybackStateChanged(android.media.session.PlaybackState),202975,46,52
122531,jack_src_com_android_jack_ir_ast_JSession.java,29.0,public void addImportedLibrary(@javax.annotation.Nonnull com.android.jack.library.InputLibrary source) { importedLibraries.add(source); },ba14259710399721ef68b551acb1b544cc19ff4f,public void addImportedLibrary(@javax.annotation.Nonnull com.android.jack.library.InputLibrary source) { importedLibraries.add(source); libDependencies.addImportedLibrary(source); },292e810ffb94a93858d07651aad0b42e8348c21a,addImportedLibrary(com.android.jack.library.InputLibrary),addImportedLibrary(com.android.jack.library.InputLibrary),11,29,public void addImportedLibrary(@javax.annotation.Nonnull com.android.jack.library.InputLibrary source) { importedLibraries.add(source); },ba14259710399721ef68b551acb1b544cc19ff4f,addImportedLibrary(com.android.jack.library.InputLibrary),477374,41,32
83276,src_main_java_org_conscrypt_OpenSSLSignature.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private final void resetContext() { org.conscrypt.OpenSSLDigestContext ctx = new org.conscrypt.OpenSSLDigestContext(org.conscrypt.NativeCrypto.EVP_MD_CTX_create()); org.conscrypt.NativeCrypto.EVP_MD_CTX_init(ctx.getContext()); if (signing) { enableDSASignatureNonceHardeningIfApplicable(); org.conscrypt.NativeCrypto.EVP_SignInit(ctx.getContext(), evpAlgorithm); } else { org.conscrypt.NativeCrypto.EVP_VerifyInit(ctx.getContext(), evpAlgorithm); } this.ctx = ctx; }",84d02f02022c64efa066585855e57b2b223e69e1,,resetContext(),5,0,"private final void resetContext() { org.conscrypt.OpenSSLDigestContext ctxLocal = new org.conscrypt.OpenSSLDigestContext(org.conscrypt.NativeCrypto.EVP_MD_CTX_create()); org.conscrypt.NativeCrypto.EVP_MD_CTX_init(ctxLocal); if (signing) { enableDSASignatureNonceHardeningIfApplicable(); org.conscrypt.NativeCrypto.EVP_SignInit(ctxLocal, evpAlgorithm); } else { org.conscrypt.NativeCrypto.EVP_VerifyInit(ctxLocal, evpAlgorithm); } this.ctx = ctxLocal; }",55d2c1f2b83c6276159edbbcca9ce599035c08de,resetContext(),254277,146,145
14691,src_com_android_settings_SettingsSafetyLegalActivity.java,4.0,"private void showErrorAndFinish(java.lang.String url) { new android.app.AlertDialog.Builder(this).setMessage(getResources().getString(R.string.settings_safetylegal_activity_unreachable, url)).setTitle(R.string.settings_safetylegal_activity_title).setPositiveButton(android.R.string.ok, this).setOnCancelListener(this).setCancelable(true).show(); }",587f0038591b06df9afe2748e450e02b74658cd2,"private void showErrorAndFinish(java.lang.String url) { if ((mErrorDialog) != null) { mErrorDialog.setMessage(getResources().getString(R.string.settings_safetylegal_activity_unreachable, url)); mErrorDialog.show(); } else { mErrorDialog = new android.app.AlertDialog.Builder(this).setMessage(getResources().getString(R.string.settings_safetylegal_activity_unreachable, url)).setTitle(R.string.settings_safetylegal_activity_title).setPositiveButton(android.R.string.ok, this).setOnCancelListener(this).setCancelable(true).show(); } }",96907e9ca4ba5e6016f2ae84ed8e54032f059c08,showErrorAndFinish(java.lang.String),showErrorAndFinish(java.lang.String),3,3,"private void showErrorAndFinish(java.lang.String url) { if ((mErrorDialog) == null) { mErrorDialog = new android.app.AlertDialog.Builder(this).setTitle(R.string.settings_safetylegal_activity_title).setPositiveButton(android.R.string.ok, this).setOnCancelListener(this).setCancelable(true).create(); } else { if (mErrorDialog.isShowing()) { mErrorDialog.dismiss(); } } mErrorDialog.setMessage(getResources().getString(R.string.settings_safetylegal_activity_unreachable, url)); mErrorDialog.show(); }",ef1321b3e1b9c096a574e3d4746cb4e451891ca2,showErrorAndFinish(java.lang.String),77721,141,134
44742,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_RenderPreviewManager.java,31.0,"public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } } } return true; } com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }",b67c1777fb41d187c0f22cefe5a78d6854dd174b,"public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } } return true; } } com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }",3f1b7f1952d17cb78bf4d285c2fce757ceb6fe1b,click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint),click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint),2,31,"public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } return true; } } } com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }",617fb652a6a87e6605643a01707753b51961ea4c,click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint),173630,378,378
308081,services_tests_servicestests_src_com_android_server_NetworkScoreServiceTest.java,,,,"@org.junit.Test public void testSystemRunning() { when(mNetworkScorerAppManager.getActiveScorer()).thenReturn(com.android.server.NetworkScoreServiceTest.NEW_SCORER); mNetworkScoreService.systemRunning(); verify(mContext).bindServiceAsUser(com.android.server.testing.MockUtils.checkIntent(new android.content.Intent().setComponent(new android.content.ComponentName(com.android.server.NetworkScoreServiceTest.NEW_SCORER.mPackageName, com.android.server.NetworkScoreServiceTest.NEW_SCORER.mScoringServiceClassName))), any(android.content.ServiceConnection.class), eq(((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE))), eq(UserHandle.SYSTEM)); }",952e9fb549657056277d6e481c785bcbb9aaec3a,,testSystemRunning(),11,16,"@org.junit.Test public void testSystemRunning() { when(mNetworkScorerAppManager.getActiveScorer()).thenReturn(com.android.server.NetworkScoreServiceTest.NEW_SCORER); mNetworkScoreService.systemRunning(); verify(mContext).bindServiceAsUser(com.android.server.devicepolicy.MockUtils.checkIntent(new android.content.Intent().setComponent(new android.content.ComponentName(com.android.server.NetworkScoreServiceTest.NEW_SCORER.mPackageName, com.android.server.NetworkScoreServiceTest.NEW_SCORER.mScoringServiceClassName))), any(android.content.ServiceConnection.class), eq(((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE))), eq(UserHandle.SYSTEM)); }",7632f341f39b681a481ecb467dd9fa56efa2867f,testSystemRunning(),38865,183,184
379932,core_java_android_net_nsd_NsdManager.java,12.0,"private void init() { final android.os.Messenger messenger = getMessenger(); if (messenger == null) throw new java.lang.RuntimeException(""Failed to initialize""); android.os.HandlerThread t = new android.os.HandlerThread(""NsdManager""); t.start(); mHandler = new android.net.nsd.NsdManager.ServiceHandler(t.getLooper()); mAsyncChannel.connect(mContext, mHandler, messenger); try { mConnected.await(); } catch (java.lang.InterruptedException e) { android.util.Log.e(android.net.nsd.NsdManager.TAG, ""interrupted wait at init""); } }",9554439c3a751785969cfb926251ae4c36eeb951,"private void init() { final android.os.Messenger messenger = getMessenger(); if (messenger == null) { fatal(""Failed to obtain service Messenger""); } android.os.HandlerThread t = new android.os.HandlerThread(""NsdManager""); t.start(); mHandler = new android.net.nsd.NsdManager.ServiceHandler(t.getLooper()); mAsyncChannel.connect(mContext, mHandler, messenger); try { mConnected.await(); } catch (java.lang.InterruptedException e) { fatal(""Interrupted wait at init""); } }",3ee7c5c5dff85e0642dc3d4551ef6a085dbe2533,init(),init(),9,9,"private void init() { final android.os.Messenger messenger = getMessenger(); if (messenger == null) { android.net.nsd.NsdManager.fatal(""Failed to obtain service Messenger""); } android.os.HandlerThread t = new android.os.HandlerThread(""NsdManager""); t.start(); mHandler = new android.net.nsd.NsdManager.ServiceHandler(t.getLooper()); mAsyncChannel.connect(mContext, mHandler, messenger); try { mConnected.await(); } catch (java.lang.InterruptedException e) { android.net.nsd.NsdManager.fatal(""Interrupted wait at init""); } }",a861af4c348c458e4b42e2cb4fa21644e181a8a3,init(),79035,123,145
325465,tzdata_update2_src_test_libcore_tzdata_update2_TimeZoneBundleInstallerTest.java,10.0,"public void testInstall_withBadlyFormedBundleVersion() throws java.lang.Exception { java.lang.String invalidBundleVersion = ""A01.001""; byte[] versionBytes = libcore.tzdata.update2.BundleVersion.getBytes(invalidBundleVersion, libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, ""001""); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes(versionBytes); assertFalse(installer.install(bundle.getBytes())); assertNoContentInstalled(); }",ff97e1a270b2fdc26ce4da6496c71c4510a3c96c,"public void testInstall_withBadlyFormedBundleVersion() throws java.lang.Exception { java.lang.String invalidBundleVersion = ""A01.001""; byte[] versionBytes = libcore.tzdata.update2.BundleVersion.getBytes(invalidBundleVersion, libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, ""001""); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes(versionBytes); assertEquals(TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE, installer.installWithErrorCode(bundle.getBytes())); assertNoContentInstalled(); }",fd1a4eb58f8f5c12c13690e4aa946cb47edb7816,testInstall_withBadlyFormedBundleVersion(),testInstall_withBadlyFormedBundleVersion(),3,9,"public void testInstall_withBadlyFormedBundleVersion() throws java.lang.Exception { libcore.tzdata.update2.BundleVersion validBundleVersion = new libcore.tzdata.update2.BundleVersion(1, 1, libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, 1); byte[] invalidFormatVersionBytes = validBundleVersion.toBytes(); invalidFormatVersionBytes[0] = 'A'; libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes(invalidFormatVersionBytes); assertEquals(TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE, installer.installWithErrorCode(bundle.getBytes())); assertNoContentInstalled(); }",c0cdb21106c2582628cd4805ff7c869635961f23,testInstall_withBadlyFormedBundleVersion(),402062,157,171
252630,jack_src_com_android_jack_cfg_ForwardBranchResolver.java,9.0,"void addSwitchBasicBlock(@javax.annotation.Nonnull com.android.jack.cfg.SwitchBasicBlock block, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JCaseStatement> cases, @javax.annotation.CheckForNull com.android.jack.ir.ast.JStatement defaultCase) { assert block != null; assert cases != null; blocksToResolve.add(new com.android.jack.cfg.ForwardBranchResolver.SwitchBasicBlockToResolve(block, cases, defaultCase)); }",ce130ab15436aee7f3d0521f1e5a5f276295b37f,"void addSwitchBasicBlock(@javax.annotation.Nonnull com.android.jack.cfg.SwitchBasicBlock block, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JCaseStatement> cases, @javax.annotation.Nonnull com.android.jack.ir.ast.JStatement defaultCase) { assert block != null; assert cases != null; assert defaultCase != null; blocksToResolve.add(new com.android.jack.cfg.ForwardBranchResolver.SwitchBasicBlockToResolve(block, cases, defaultCase)); }",2af133747c31d7f5e479df344a9ea6b137a437af,"addSwitchBasicBlock(com.android.jack.cfg.SwitchBasicBlock,java.util.List,com.android.jack.ir.ast.JStatement)","addSwitchBasicBlock(com.android.jack.cfg.SwitchBasicBlock,java.util.List,com.android.jack.ir.ast.JStatement)",3,9,"void addSwitchBasicBlock(@javax.annotation.Nonnull com.android.jack.cfg.SwitchBasicBlock block, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JCaseStatement> cases, @javax.annotation.CheckForNull com.android.jack.ir.ast.JStatement defaultCase) { assert block != null; assert cases != null; blocksToResolve.add(new com.android.jack.cfg.ForwardBranchResolver.SwitchBasicBlockToResolve(block, cases, defaultCase)); }",ce130ab15436aee7f3d0521f1e5a5f276295b37f,"addSwitchBasicBlock(com.android.jack.cfg.SwitchBasicBlock,java.util.List,com.android.jack.ir.ast.JStatement)",524211,123,117
84294,src_com_android_mms_ui_SlideshowEditor.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String generateTextSrc(com.android.mms.model.SlideshowModel slideshow, int position) { final java.lang.String prefix = ""text_""; final java.lang.String postfix = "".txt""; java.lang.StringBuilder src = new java.lang.StringBuilder(prefix).append(position).append(postfix); boolean hasDupSrc = false; do { for (com.android.mms.model.SlideModel model : slideshow) { if (model.hasText()) { if (model.getText().getSrc().equals(src.toString())) { src = new java.lang.StringBuilder(prefix).append((position + 1)).append(postfix); hasDupSrc |= true; break; } } hasDupSrc &= false; } } while (hasDupSrc ); return src.toString(); }",8f3d323e927c426eb41e67cc6a3316324b2d9639,,"generateTextSrc(com.android.mms.model.SlideshowModel,int)",6,9,"private java.lang.String generateTextSrc(com.android.mms.model.SlideshowModel slideshow, int position) { final java.lang.String prefix = ""text_""; final java.lang.String postfix = "".txt""; java.lang.StringBuilder src = new java.lang.StringBuilder(prefix).append(position).append(postfix); boolean hasDupSrc = false; do { for (com.android.mms.model.SlideModel model : slideshow) { if (model.hasText()) { java.lang.String testSrc = model.getText().getSrc(); if ((testSrc != null) && (testSrc.equals(src.toString()))) { src = new java.lang.StringBuilder(prefix).append((position + 1)).append(postfix); hasDupSrc |= true; break; } } hasDupSrc = false; } } while (hasDupSrc ); return src.toString(); }",c1f117a9859425f5eac89a4fa5fe2153fc23005c,"generateTextSrc(com.android.mms.model.SlideshowModel,int)",213257,184,203
183690,jack_src_com_android_jack_backend_dex_DalvikProtectedInnerChecker.java,,,,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JNewArray x) { check(x.getArrayType(), x); }",db895d50c6ba2049f71092541cd3fca14cac3a1b,,endVisit(com.android.jack.ir.ast.JNewArray),13,1,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JNewArray newArray) { check(newArray.getArrayType(), newArray); }",3e7087ed732bf320587d687fe18213018839cd13,endVisit(com.android.jack.ir.ast.JNewArray),213293,42,43
527795,src_java_com_android_internal_telephony_uicc_SIMRecords.java,17.0,@java.lang.Override public int getDisplayRule(java.lang.String plmn) { int rule; if ((((mParentApp) != null) && ((mParentApp.getUiccCard()) != null)) && ((mParentApp.getUiccCard().getOperatorBrandOverride()) != null)) { rule = SPN_RULE_SHOW_PLMN; } else if ((android.text.TextUtils.isEmpty(getServiceProviderName())) || ((mSpnDisplayCondition) == (-1))) { rule = SPN_RULE_SHOW_PLMN; } else if (isOnMatchingPlmn(plmn)) { rule = SPN_RULE_SHOW_SPN; if (((mSpnDisplayCondition) & 1) == 1) { rule |= SPN_RULE_SHOW_PLMN; } } else { rule = SPN_RULE_SHOW_PLMN; if (((mSpnDisplayCondition) & 2) == 0) { rule |= SPN_RULE_SHOW_SPN; } } return rule; },b6c6c4e83ff29ee10f1853abcbed058fae162ab0,@java.lang.Override public int getDisplayRule(android.telephony.ServiceState serviceState) { int rule; if ((((mParentApp) != null) && ((mParentApp.getUiccCard()) != null)) && ((mParentApp.getUiccCard().getOperatorBrandOverride()) != null)) { rule = SPN_RULE_SHOW_PLMN; } else if ((android.text.TextUtils.isEmpty(getServiceProviderName())) || ((mSpnDisplayCondition) == (-1))) { rule = SPN_RULE_SHOW_PLMN; } else if (shouldConsiderServiceStateRoaming() ? !(serviceState.getRoaming()) : isOnMatchingPlmn(serviceState.getOperatorNumeric())) { rule = SPN_RULE_SHOW_SPN; if (((mSpnDisplayCondition) & 1) == 1) { rule |= SPN_RULE_SHOW_PLMN; } } else { rule = SPN_RULE_SHOW_PLMN; if (((mSpnDisplayCondition) & 2) == 0) { rule |= SPN_RULE_SHOW_SPN; } } return rule; },05d0d4aca10ecc6fd3525ad466cba75e5514dd9e,getDisplayRule(java.lang.String),getDisplayRule(android.telephony.ServiceState),3,34,@java.lang.Override public int getDisplayRule(android.telephony.ServiceState serviceState) { int rule; if ((((mParentApp) != null) && ((mParentApp.getUiccCard()) != null)) && ((mParentApp.getUiccCard().getOperatorBrandOverride()) != null)) { rule = SPN_RULE_SHOW_PLMN; } else if ((android.text.TextUtils.isEmpty(getServiceProviderName())) || ((mSpnDisplayCondition) == (-1))) { rule = SPN_RULE_SHOW_PLMN; } else if (useRoamingFromServiceState() ? !(serviceState.getRoaming()) : isOnMatchingPlmn(serviceState.getOperatorNumeric())) { rule = SPN_RULE_SHOW_SPN; if (((mSpnDisplayCondition) & 1) == 1) { rule |= SPN_RULE_SHOW_PLMN; } } else { rule = SPN_RULE_SHOW_PLMN; if (((mSpnDisplayCondition) & 2) == 0) { rule |= SPN_RULE_SHOW_SPN; } } return rule; },d1b372dcea1a43b23eebdc166a38bc1345bdee29,getDisplayRule(android.telephony.ServiceState),416058,252,252
323011,wifi_java_android_net_wifi_hotspot2_pps_Policy.java,,,,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(minHomeDownlinkBandwidth); dest.writeLong(minHomeUplinkBandwidth); dest.writeLong(minRoamingDownlinkBandwidth); dest.writeLong(minRoamingUplinkBandwidth); dest.writeLong(updateIntervalInMinutes); dest.writeString(updateMethod); dest.writeString(restriction); dest.writeString(policyServerUri); dest.writeString(username); dest.writeString(base64EncodedPassword); dest.writeString(trustRootCertUrl); dest.writeByteArray(trustRootCertSha256Fingerprint); dest.writeStringArray(excludedSsidList); android.net.wifi.hotspot2.pps.Policy.writeProtoPortMap(dest, requiredProtoPortMap); dest.writeInt(maximumBssLoadValue); android.net.wifi.hotspot2.pps.Policy.writeRoamingPartnerList(dest, flags, preferredRoamingPartnerList); }",bb795a76bc138c2d8e2ea00e174df42677eb674a,,"writeToParcel(android.os.Parcel,int)",7,8,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(minHomeDownlinkBandwidth); dest.writeLong(minHomeUplinkBandwidth); dest.writeLong(minRoamingDownlinkBandwidth); dest.writeLong(minRoamingUplinkBandwidth); dest.writeStringArray(excludedSsidList); android.net.wifi.hotspot2.pps.Policy.writeProtoPortMap(dest, requiredProtoPortMap); dest.writeInt(maximumBssLoadValue); android.net.wifi.hotspot2.pps.Policy.writeRoamingPartnerList(dest, flags, preferredRoamingPartnerList); dest.writeParcelable(policyUpdate, flags); }",e00cf26bc763bcbc58de9650a5519d52bda87851,"writeToParcel(android.os.Parcel,int)",168383,209,154
16610,packages_WAPPushManager_tests_src_com_android_smspush_unitTests_ReceiverService.java,,,,"@java.lang.Override public void onStart(android.content.Intent intent, int startid) { android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, ""Receiver service started""); byte[] body; byte[] header; body = intent.getByteArrayExtra(""data""); header = intent.getByteArrayExtra(""header""); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, ""header:""); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, com.android.internal.util.HexDump.dumpHexString(header)); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, ""body:""); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, com.android.internal.util.HexDump.dumpHexString(body)); com.android.smspush.unitTests.DataVerify.SetLastReceivedPdu(body); }",391b4107f55a39a28802f4e1773bc043d385a4d1,,"onStart(android.content.Intent,int)",7,2,"@java.lang.Override public int onStartCommand(android.content.Intent intent, int flags, int startId) { android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, ""Receiver service started""); byte[] body; byte[] header; body = intent.getByteArrayExtra(""data""); header = intent.getByteArrayExtra(""header""); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, ""header:""); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, com.android.internal.util.HexDump.dumpHexString(header)); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, ""body:""); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, com.android.internal.util.HexDump.dumpHexString(body)); com.android.smspush.unitTests.DataVerify.SetLastReceivedPdu(body); return START_STICKY; }",42e2c1612f50691a5539a767ddcfb9a5a5a22615,"onStartCommand(android.content.Intent,int,int)",32681,244,252
379459,telephony_java_android_telephony_TelephonyManager.java,116.0,"@android.annotation.SystemApi public java.util.List<android.service.carrier.CarrierIdentifier> getAllowedCarriers(int slotIndex) { try { com.android.internal.telephony.ITelephony service = getITelephony(); if (service != null) { return service.getAllowedCarriers(slotIndex); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#getAllowedCarriers"", e); } catch (java.lang.NullPointerException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#getAllowedCarriers"", e); } return new java.util.ArrayList<android.service.carrier.CarrierIdentifier>(0); }",c988a3180ea6f8cea684dde41efe9b3b67f28b8b,"public int setAllowedCarriers(int slotId, java.util.List<android.service.carrier.CarrierIdentifier> carriers) { try { com.android.internal.telephony.ITelephony service = getITelephony(); if (service != null) { return service.setAllowedCarriers(slotId, carriers); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#setAllowedCarriers"", e); } return -1; }",1ac5d4b55b52b5acc2ca753b722dc13da4ffcb36,getAllowedCarriers(int),"setAllowedCarriers(int,java.util.List)",4,156,"@android.annotation.SystemApi public int setAllowedCarriers(int slotIndex, java.util.List<android.service.carrier.CarrierIdentifier> carriers) { try { com.android.internal.telephony.ITelephony service = getITelephony(); if (service != null) { return service.setAllowedCarriers(slotIndex, carriers); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#setAllowedCarriers"", e); } catch (java.lang.NullPointerException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#setAllowedCarriers"", e); } return -1; }",34f1694d55c0da72e6b755b6ae1261caa4f51fbc,"setAllowedCarriers(int,java.util.List)",442521,127,178
22029,eclipse_plugins_com.android.ide.eclipse.tests_src_com_android_ide_eclipse_adt_internal_editors_layout_refactoring_ExtractStyleRefactoringTest.java,,,,"public void testExtract7() throws java.lang.Exception { checkRefactoring(""extractstyle2.xml"", ""newstyles8.xml"", ""newstyle"", true, true, 2, ""@+id/button1"", ""@+id/button2""); }",505cafcd3045ba24d89a026cbe56fc14b3dbd56a,,testExtract7(),5,2,"public void testExtract7() throws java.lang.Exception { checkRefactoring(""extractstyle2.xml"", ""newstyles8.xml"", ""newstyle"", true, true, null, 2, ""@+id/button1"", ""@+id/button2""); }",45a09fff8fe3fb2151de6abaedc7d10a29d0a60b,testExtract7(),254109,53,55
617334,src_java_com_android_internal_telephony_RIL.java,50.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : return 1; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : return 2; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : return 3; case android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000 : return 4; case android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN : return 5; case android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN : default : return 0; } },2c8b28f5423144b3c9cf3914cf9160f1fdbb8d1b,,convertRanToHalRan(int),14,131,private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : return android.hardware.radio.V1_2.AccessNetwork.GERAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : return android.hardware.radio.V1_2.AccessNetwork.UTRAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : return android.hardware.radio.V1_2.AccessNetwork.EUTRAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000 : return android.hardware.radio.V1_2.AccessNetwork.CDMA2000; case android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN : return android.hardware.radio.V1_2.AccessNetwork.IWLAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN : default : return 0; } },f15e21099b56e8d3f5328e84ca92aaadfdc689d1,convertRanToHalRan(int),514451,148,224
64540,src_com_android_providers_media_MediaProvider.java,76.0,"private void detachVolume(android.net.Uri uri) { if ((android.os.Binder.getCallingPid()) != (java.lang.Process.myPid())) { throw new java.lang.SecurityException(""Opening and closing databases not allowed.""); } java.lang.String volume = uri.getPathSegments().get(0); if (com.android.providers.media.MediaProvider.INTERNAL_VOLUME.equals(volume)) { throw new java.lang.UnsupportedOperationException(""Deleting the internal volume is not allowed""); } else if (!(com.android.providers.media.MediaProvider.EXTERNAL_VOLUME.equals(volume))) { throw new java.lang.IllegalArgumentException((""There is no volume named "" + volume)); } synchronized(mDatabases) { com.android.providers.media.MediaProvider.DatabaseHelper database = mDatabases.get(volume); if (database == null) return; try { java.io.File file = new java.io.File(database.getReadableDatabase().getPath()); file.setLastModified(java.lang.System.currentTimeMillis()); } catch (java.lang.Exception e) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, ""Can't touch database file"", e); } mDatabases.remove(volume); database.close(); } getContext().getContentResolver().notifyChange(uri, null); if (com.android.providers.media.MediaProvider.LOCAL_LOGV) android.util.Log.v(com.android.providers.media.MediaProvider.TAG, (""Detached volume: "" + volume)); }",866d9bec919a6970f19a0e439bcc3b3a344eeeb8,"private void detachVolume(android.net.Uri uri) { if ((android.os.Binder.getCallingPid()) != (java.lang.Process.myPid())) { throw new java.lang.SecurityException(""Opening and closing databases not allowed.""); } java.lang.String volume = uri.getPathSegments().get(0); if (com.android.providers.media.MediaProvider.INTERNAL_VOLUME.equals(volume)) { throw new java.lang.UnsupportedOperationException(""Deleting the internal volume is not allowed""); } else if (!(com.android.providers.media.MediaProvider.EXTERNAL_VOLUME.equals(volume))) { throw new java.lang.IllegalArgumentException((""There is no volume named "" + volume)); } try { mDatabasesLock.writeLock().lock(); com.android.providers.media.MediaProvider.DatabaseHelper database = mDatabases.get(volume); if (database == null) return; try { java.io.File file = new java.io.File(database.getReadableDatabase().getPath()); file.setLastModified(java.lang.System.currentTimeMillis()); } catch (java.lang.Exception e) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, ""Can't touch database file"", e); } mDatabases.remove(volume); database.close(); } finally { mDatabasesLock.writeLock().unlock(); } getContext().getContentResolver().notifyChange(uri, null); if (com.android.providers.media.MediaProvider.LOCAL_LOGV) android.util.Log.v(com.android.providers.media.MediaProvider.TAG, (""Detached volume: "" + volume)); }",19ca460fbf0abc023b8e8f3af43a42e717ffd1d1,detachVolume(android.net.Uri),detachVolume(android.net.Uri),4,76,"private void detachVolume(android.net.Uri uri) { if ((android.os.Binder.getCallingPid()) != (java.lang.Process.myPid())) { throw new java.lang.SecurityException(""Opening and closing databases not allowed.""); } java.lang.String volume = uri.getPathSegments().get(0); if (com.android.providers.media.MediaProvider.INTERNAL_VOLUME.equals(volume)) { throw new java.lang.UnsupportedOperationException(""Deleting the internal volume is not allowed""); } else if (!(com.android.providers.media.MediaProvider.EXTERNAL_VOLUME.equals(volume))) { throw new java.lang.IllegalArgumentException((""There is no volume named "" + volume)); } synchronized(mDatabases) { com.android.providers.media.MediaProvider.DatabaseHelper database = mDatabases.get(volume); if (database == null) return; try { java.io.File file = new java.io.File(database.getReadableDatabase().getPath()); file.setLastModified(java.lang.System.currentTimeMillis()); } catch (java.lang.Exception e) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, ""Can't touch database file"", e); } mDatabases.remove(volume); database.close(); } getContext().getContentResolver().notifyChange(uri, null); if (com.android.providers.media.MediaProvider.LOCAL_LOGV) android.util.Log.v(com.android.providers.media.MediaProvider.TAG, (""Detached volume: "" + volume)); }",866d9bec919a6970f19a0e439bcc3b3a344eeeb8,detachVolume(android.net.Uri),429275,360,344
23383,tests_tests_bluetooth_src_android_bluetooth_cts_BasicAdapterTest.java,2.0,public void test_enableDisable() { android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); for (int i = 0; i < 5; i++) { disable(adapter); enable(adapter); } },ee83554f3c4bea329269cbafd1d4a7c5838d37fd,public void test_enableDisable() { if (!(isSupport)) { return; } android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); for (int i = 0; i < 5; i++) { disable(adapter); enable(adapter); } },2b8256f102757f6af883d33dc5b9bab73aaa0a44,test_enableDisable(),test_enableDisable(),2,3,public void test_enableDisable() { if (!(mHasBluetooth)) { return; } android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); for (int i = 0; i < 5; i++) { disable(adapter); enable(adapter); } },19fb9a8439145e8b2bf88989f7ef0a8db7c6b6cd,test_enableDisable(),288202,55,56
309003,hostsidetests_services_windowmanager_src_android_wm_cts_CrossAppDragAndDropTests.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected boolean supportsMultiWindow() throws com.android.tradefed.device.DeviceNotAvailableException { return (hasDeviceFeature(""android.software.multiwindow"")) || (android.wm.cts.CrossAppDragAndDropTests.PRETEND_DEVICE_SUPPORTS_MULTIWINDOW); }",c0331a8d0d866a6e81b079575ea2988799310f02,,supportsMultiWindow(),13,22,"protected boolean supportsMultiWindowMode() { if (!(android.wm.cts.CrossAppDragAndDropTests.mConfigLoaded)) { try { executeShellCommand(((""am start -n "" + ""android.wm.cts.dndsourceapp/."") + (SUPPORT_OBSERVER))); waitForResume(""android.wm.cts.dndsourceapp"", SUPPORT_OBSERVER); java.util.Map map = getLogResults(SUPPORT_OBSERVER); java.lang.String value = ((java.lang.String) (map.get(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DROP_RESULT))); if ((value != null) && (value.equals(""OK""))) { android.wm.cts.CrossAppDragAndDropTests.mConfigLoaded = true; android.wm.cts.CrossAppDragAndDropTests.mSupportMultiWindow = !(map.get(""config_supportsMultiWindow"").equals(""false"")); } executeShellCommand(AM_FORCE_STOP_TEST_PACKAGE); clearLogs(); } catch (java.lang.Exception e) { e.printStackTrace(); } } return android.wm.cts.CrossAppDragAndDropTests.mSupportMultiWindow; }",a54ef8288029501372aa419dae6ae3470910a8c8,supportsMultiWindowMode(),55481,63,269
97268,gradle-import_src_main_java_com_android_tools_gradle_eclipse_GradleImport.java,67.0,"public void importProjects(@com.android.annotations.NonNull java.util.List<java.io.File> projectDirs) throws java.io.IOException { mSummary = new com.android.tools.gradle.eclipse.ImportSummary(this); mProjectMap.clear(); mHandledJars.clear(); mWarnings.clear(); mErrors.clear(); mWorkspaceProjects = null; mRootModules = java.util.Collections.emptyList(); mModules = com.google.common.collect.Sets.newHashSet(); for (java.io.File file : projectDirs) { if (file.isFile()) { assert !(file.isDirectory()); file = file.getParentFile(); } guessWorkspace(file); if (com.android.tools.gradle.eclipse.GradleImport.isAdtProjectDir(file)) { guessSdk(file); guessNdk(file); try { com.android.tools.gradle.eclipse.EclipseProject.getProject(this, file); } catch (com.android.tools.gradle.eclipse.GradleImport.ImportException e) { return; } catch (java.lang.Exception e) { reportError(null, file, e.toString(), false); return; } } else { reportError(null, file, (""Not a recognized project: "" + file), false); return; } } java.util.Set<com.android.tools.gradle.eclipse.EclipseProject> projects = com.google.common.collect.Sets.newHashSet(mProjectMap.values()); mRootModules = com.android.tools.gradle.eclipse.EclipseProject.performImport(this, projects); for (com.android.tools.gradle.eclipse.ImportModule module : mRootModules) { mModules.add(module); mModules.addAll(module.getAllDependencies()); } }",e5b5f45df1f75fccf217cd8f1b9001c4f2622760,"public void importProjects(@com.android.annotations.NonNull java.util.List<java.io.File> projectDirs) throws java.io.IOException { mSummary = new com.android.tools.gradle.eclipse.ImportSummary(this); mProjectMap.clear(); mHandledJars.clear(); mWarnings.clear(); mErrors.clear(); mWorkspaceProjects = null; mRootModules = java.util.Collections.emptyList(); mModules = com.android.tools.gradle.eclipse.Sets.newHashSet(); for (java.io.File file : projectDirs) { if (file.isFile()) { assert !(file.isDirectory()); file = file.getParentFile(); } guessWorkspace(file); if (com.android.tools.gradle.eclipse.GradleImport.isAdtProjectDir(file)) { guessSdk(file); guessNdk(file); try { com.android.tools.gradle.eclipse.EclipseProject.getProject(this, file); } catch (com.android.tools.gradle.eclipse.GradleImport.ImportException e) { return; } catch (java.lang.Exception e) { reportError(null, file, e.toString(), false); return; } } else { reportError(null, file, (""Not a recognized project: "" + file), false); return; } } java.util.Set<com.android.tools.gradle.eclipse.EclipseProject> projects = com.android.tools.gradle.eclipse.Sets.newHashSet(mProjectMap.values()); mRootModules = com.android.tools.gradle.eclipse.EclipseProject.performImport(this, projects); for (com.android.tools.gradle.eclipse.ImportModule module : mRootModules) { mModules.add(module); mModules.addAll(module.getAllDependencies()); } }",e543651600de54f6b048b89d555b09be0520c723,importProjects(java.util.List),importProjects(java.util.List),3,67,"public void importProjects(@com.android.annotations.NonNull java.util.List<java.io.File> projectDirs) throws java.io.IOException { mSummary = new com.android.tools.gradle.eclipse.ImportSummary(this); mProjectMap.clear(); mHandledJars.clear(); mWarnings.clear(); mErrors.clear(); mWorkspaceProjects = null; mRootModules = java.util.Collections.emptyList(); mModules = com.google.common.collect.Sets.newHashSet(); for (java.io.File file : projectDirs) { if (file.isFile()) { assert !(file.isDirectory()); file = file.getParentFile(); } guessWorkspace(file); if (com.android.tools.gradle.eclipse.GradleImport.isAdtProjectDir(file)) { guessSdk(file); guessNdk(file); try { com.android.tools.gradle.eclipse.EclipseProject.getProject(this, file); } catch (com.android.tools.gradle.eclipse.GradleImport.ImportException e) { return; } catch (java.lang.Exception e) { reportError(null, file, e.toString(), false); return; } } else { reportError(null, file, (""Not a recognized project: "" + file), false); return; } } java.util.Set<com.android.tools.gradle.eclipse.EclipseProject> projects = com.google.common.collect.Sets.newHashSet(mProjectMap.values()); mRootModules = com.android.tools.gradle.eclipse.EclipseProject.performImport(this, projects); for (com.android.tools.gradle.eclipse.ImportModule module : mRootModules) { mModules.add(module); mModules.addAll(module.getAllDependencies()); } }",e5b5f45df1f75fccf217cd8f1b9001c4f2622760,importProjects(java.util.List),482435,386,382
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,28.0,"public void test_parse_with_multiplier() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getNumberInstance(java.util.Locale.ENGLISH))); java.lang.Number result; format.setMultiplier(100); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 100: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 100: "" + result), 9.223372036854776E16, result.doubleValue()); format.setMultiplier(1000); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 1000: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 1000: "" + result), 9.223372036854776E15, result.doubleValue()); format.setMultiplier(10000); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 10000: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 10000: "" + result), 9.223372036854776E14, result.doubleValue()); }",609066b92d7eede5548ea61a427f9061f89873fe,"public void testParse_withMultiplier() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getNumberInstance(java.util.Locale.ENGLISH))); java.lang.Number result; format.setMultiplier(100); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 100: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 100: "" + result), 9.223372036854776E16, result.doubleValue()); format.setMultiplier(1000); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 1000: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 1000: "" + result), 9.223372036854776E15, result.doubleValue()); format.setMultiplier(10000); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 10000: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 10000: "" + result), 9.223372036854776E14, result.doubleValue()); }",36d43ff8a662c3fe8ffd1398f075d05354904ce0,test_parse_with_multiplier(),testParse_withMultiplier(),2,60,"public void test_parse_withMultiplier() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getNumberInstance(java.util.Locale.ENGLISH))); java.lang.Number result; format.setMultiplier(100); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 100: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 100: "" + result), 9.223372036854776E16, result.doubleValue()); format.setMultiplier(1000); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 1000: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 1000: "" + result), 9.223372036854776E15, result.doubleValue()); format.setMultiplier(10000); result = format.parse(""9223372036854775807"", new java.text.ParsePosition(0)); assertEquals((""Wrong result type multiplier 10000: "" + result), java.lang.Double.class, result.getClass()); assertEquals((""Wrong result for multiplier 10000: "" + result), 9.223372036854776E14, result.doubleValue()); }",3e9a9b753ee69787e81989bac1246f7dcf22d2e9,test_parse_withMultiplier(),84405,272,273
465279,core_java_android_bluetooth_le_PeriodicAdvertisingParameters.java,0.0,public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.includeTxPower = includeTxPower; return this; },d46f714773bab9165d8a044d5682b2bec1619fd8,public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.mIncludeTxPower = includeTxPower; return this; },20088678ae0a2274e42cbba99d0904678d49e553,setIncludeTxPower(boolean),setIncludeTxPower(boolean),9,0,public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean includeTxPower) { mIncludeTxPower = includeTxPower; return this; },cbc0842e0b4e244ac7345906bc661eae1542fb9f,setIncludeTxPower(boolean),2097,40,38
293829,tests_src_com_android_server_telecom_tests_BasicCallTests.java,28.0,"@android.test.suitebuilder.annotation.MediumTest public void testSendCallEventNull() throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall(""650-555-1212"", mPhoneAccountA0.getAccountHandle(), mConnectionServiceFixtureA); assertEquals(Call.STATE_ACTIVE, mInCallServiceFixtureX.getCall(ids.mCallId).getState()); mInCallServiceFixtureX.mInCallAdapter.sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null); verify(mConnectionServiceFixtureA.getTestDouble(), timeout(com.android.server.telecom.tests.TEST_TIMEOUT)).sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null); }",30c06f91008b76abfe9f71adf8ea961709e62d73,"@android.test.suitebuilder.annotation.MediumTest public void testSendCallEventNull() throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall(""650-555-1212"", mPhoneAccountA0.getAccountHandle(), mConnectionServiceFixtureA); assertEquals(Call.STATE_ACTIVE, mInCallServiceFixtureX.getCall(ids.mCallId).getState()); mInCallServiceFixtureX.mInCallAdapter.sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null); verify(mConnectionServiceFixtureA.getTestDouble(), timeout(com.android.server.telecom.tests.TEST_TIMEOUT)).sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null, any()); }",c62de3682937a128cbfc8a932932d9cc9802b598,testSendCallEventNull(),testSendCallEventNull(),13,29,"@android.test.suitebuilder.annotation.MediumTest public void testSendCallEventNull() throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall(""650-555-1212"", mPhoneAccountA0.getAccountHandle(), mConnectionServiceFixtureA); assertEquals(Call.STATE_ACTIVE, mInCallServiceFixtureX.getCall(ids.mCallId).getState()); mInCallServiceFixtureX.mInCallAdapter.sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null); verify(mConnectionServiceFixtureA.getTestDouble(), timeout(com.android.server.telecom.tests.TEST_TIMEOUT)).sendCallEvent(eq(ids.mConnectionId), eq(com.android.server.telecom.tests.BasicCallTests.TEST_EVENT), isNull(android.os.Bundle.class), any()); }",1e2975c8ac83f624ce5b8761e6f8d9d0fc7377f1,testSendCallEventNull(),344489,206,219
124242,jack-tests_src_com_android_jack_test_toolchain_AbstractTestTools.java,30.0,"@javax.annotation.Nonnull public static java.io.File getRuntimeEnvironmentRootDir(@javax.annotation.Nonnull java.lang.String rtName) { java.lang.String rtLocationPath = com.android.jack.test.toolchain.AbstractTestTools.testsProperties.getProperty(((com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX) + rtName)); if (rtLocationPath == null) { throw new com.android.jack.test.toolchain.TestConfigurationException((((((""Location for runtime '"" + rtName) + ""' is not specified. Set property '"") + (com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX)) + rtName) + ""'"")); } java.io.File rtLocation = new java.io.File(rtLocationPath); if (!(rtLocation.exists())) { throw new com.android.jack.test.toolchain.TestConfigurationException(((((""Location for runtime "" + rtName) + "" does not exist: '"") + rtLocationPath) + ""'"")); } if (!(rtLocation.isDirectory())) { throw new com.android.jack.test.toolchain.TestConfigurationException(((((""Location for runtime "" + rtName) + "" is not a directory: '"") + rtLocationPath) + ""'"")); } return rtLocation; }",702b00162756ecff95f3ffc766a59cf9e432b81f,"@javax.annotation.Nonnull public static java.io.File getRuntimeEnvironmentRootDir(@javax.annotation.Nonnull java.lang.String rtName) { java.lang.String rtLocationPath = com.android.jack.test.TestingEnvironment.getProperty(((com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX) + rtName)); if (rtLocationPath == null) { throw new com.android.jack.test.TestConfigurationException((((((""Location for runtime '"" + rtName) + ""' is not specified. Set property '"") + (com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX)) + rtName) + ""'"")); } java.io.File rtLocation = new java.io.File(rtLocationPath); if (!(rtLocation.exists())) { throw new com.android.jack.test.TestConfigurationException(((((""Location for runtime "" + rtName) + "" does not exist: '"") + rtLocationPath) + ""'"")); } if (!(rtLocation.isDirectory())) { throw new com.android.jack.test.TestConfigurationException(((((""Location for runtime "" + rtName) + "" is not a directory: '"") + rtLocationPath) + ""'"")); } return rtLocation; }",9b9f164d99ccdcbd9e31fda0b1741e03f3833e13,getRuntimeEnvironmentRootDir(java.lang.String),getRuntimeEnvironmentRootDir(java.lang.String),4,30,"@javax.annotation.Nonnull public static java.io.File getRuntimeEnvironmentRootDir(@javax.annotation.Nonnull java.lang.String rtName) { java.lang.String rtLocationPath = com.android.jack.test.TestsProperties.getProperty(((com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX) + rtName)); if (rtLocationPath == null) { throw new com.android.jack.test.TestConfigurationException((((((""Location for runtime '"" + rtName) + ""' is not specified. Set property '"") + (com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX)) + rtName) + ""'"")); } java.io.File rtLocation = new java.io.File(rtLocationPath); if (!(rtLocation.exists())) { throw new com.android.jack.test.TestConfigurationException(((((""Location for runtime "" + rtName) + "" does not exist: '"") + rtLocationPath) + ""'"")); } if (!(rtLocation.isDirectory())) { throw new com.android.jack.test.TestConfigurationException(((((""Location for runtime "" + rtName) + "" is not a directory: '"") + rtLocationPath) + ""'"")); } return rtLocation; }",50a49fbe6cb067aa45210e13a67dccb2642cd2f9,getRuntimeEnvironmentRootDir(java.lang.String),431005,279,279
382172,services_core_java_com_android_server_connectivity_Tethering.java,68.0,"private void handleInterfaceServingStateActive(int mode, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who) { if ((mNotifyList.indexOf(who)) < 0) { mNotifyList.add(who); mIPv6TetheringCoordinator.addActiveDownstream(who, mode); } if (mode == (com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED)) { mForwardedDownstreams.add(who); } else { mForwardedDownstreams.remove(who); } }",a91e1b491d91b041bc75849b885ca2637763234b,"private void handleInterfaceServingStateActive(int mode, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who) { if ((mNotifyList.indexOf(who)) < 0) { mNotifyList.add(who); mIPv6TetheringCoordinator.addActiveDownstream(who, mode); } if (mode == (com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED)) { mForwardedDownstreams.add(who); } else { mForwardedDownstreams.remove(who); } if ((who.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { int wifiMode = android.net.wifi.WifiManager.IFACE_IP_MODE_CONFIGURATION_ERROR; switch (mode) { case com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED : wifiMode = android.net.wifi.WifiManager.IFACE_IP_MODE_TETHERED; break; case com.android.server.connectivity.tethering.IControlsTethering.STATE_LOCAL_ONLY : wifiMode = android.net.wifi.WifiManager.IFACE_IP_MODE_LOCAL_ONLY; break; } if (wifiMode != (android.net.wifi.WifiManager.IFACE_IP_MODE_CONFIGURATION_ERROR)) { getWifiManager().updateInterfaceIpState(who.interfaceName(), wifiMode); } } }",394fca4ceb80e88f840c5a4b705e5a82e07a0716,"handleInterfaceServingStateActive(int,com.android.server.connectivity.tethering.TetherInterfaceStateMachine)","handleInterfaceServingStateActive(int,com.android.server.connectivity.tethering.TetherInterfaceStateMachine)",3,68,"private void handleInterfaceServingStateActive(int mode, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who) { if ((mNotifyList.indexOf(who)) < 0) { mNotifyList.add(who); mIPv6TetheringCoordinator.addActiveDownstream(who, mode); } if (mode == (com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED)) { mForwardedDownstreams.add(who); } else { mForwardedDownstreams.remove(who); } if ((who.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { final android.net.wifi.WifiManager mgr = getWifiManager(); final java.lang.String iface = who.interfaceName(); switch (mode) { case com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED : mgr.updateInterfaceIpState(iface, WifiManager.IFACE_IP_MODE_TETHERED); break; case com.android.server.connectivity.tethering.IControlsTethering.STATE_LOCAL_ONLY : mgr.updateInterfaceIpState(iface, WifiManager.IFACE_IP_MODE_LOCAL_ONLY); break; default : android.util.Log.wtf(com.android.server.connectivity.Tethering.TAG, (""Unknown active serving mode: "" + mode)); break; } } }",a04a632fab2333096dbd8d7a74699a28deca0278,"handleInterfaceServingStateActive(int,com.android.server.connectivity.tethering.TetherInterfaceStateMachine)",344868,326,332
141690,sched_src_com_android_sched_util_config_id_DefaultFactoryPropertyId.java,7.0,"@javax.annotation.Nonnull public static <T> com.android.sched.util.config.id.DefaultFactoryPropertyId<T> create(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.lang.String description, @javax.annotation.Nonnull java.lang.Class<T> type) { return new com.android.sched.util.config.id.DefaultFactoryPropertyId<T>(name, description, new com.android.sched.util.codec.DefaultFactorySelector<T>(type)); }",c4783a609b1b9d7fd921fba193459576777943da,"@javax.annotation.Nonnull public static <T> com.android.sched.util.config.id.DefaultFactoryPropertyId<T> create(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.lang.String description, @javax.annotation.Nonnull java.lang.String varName, @javax.annotation.Nonnull java.lang.Class<T> type) { return new com.android.sched.util.config.id.DefaultFactoryPropertyId<T>(name, description, new com.android.sched.util.codec.DefaultFactorySelector<T>(type)); }",a36886740acd51b79bc0344e97010a51d86dd243,"create(java.lang.String,java.lang.String,java.lang.Class)","create(java.lang.String,java.lang.String,java.lang.String,java.lang.Class)",3,7,"@javax.annotation.Nonnull public static <T> com.android.sched.util.config.id.DefaultFactoryPropertyId<T> create(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.lang.String description, @javax.annotation.Nonnull java.lang.Class<T> type) { return new com.android.sched.util.config.id.DefaultFactoryPropertyId<T>(name, description, new com.android.sched.util.codec.DefaultFactorySelector<T>(type)); }",c4783a609b1b9d7fd921fba193459576777943da,"create(java.lang.String,java.lang.String,java.lang.Class)",396765,135,121
152861,perflib_src_main_java_com_android_tools_perflib_heap_ClassObj.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean getIsSoftReferenceType() { return mIsSoftReferenceClass; },704e4d613a1e5ce43c83365666ec5c3d76a72c6f,,getIsSoftReferenceType(),6,7,@java.lang.Override public boolean getIsSoftReference() { return mIsSoftReference; },c9063d1e0a248b17ecc00ee8da4e9ce3bb5d8014,getIsSoftReference(),375481,22,21
229824,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_VpnTest.java,0.0,"public void testVpn() throws java.lang.Exception { if (!(verifyVpnStatus())) { com.android.devtools.systemimage.uitest.utils.AppManager.installApp(mInstrumentation, ""FredVPN.apk""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""TestVPN""); mDevice.registerWatcher(com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher.class.getName(), new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(mDevice)); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.VpnTest.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); assertTrue(""Failed to find the VPN lock icon after starting VPN!"", verifyVpnStatus()); mDevice.removeWatcher(com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher.class.getName()); } com.android.devtools.systemimage.uitest.utils.AppManager.uninstallApp(mInstrumentation, ""TestVPN"", null); }",578a4a6c7c75d81825039580c120fc2bcbb54a0b,"@org.junit.Test public void testVpn() throws java.lang.Exception { mInstrumentation = testRule.getInstrumentation(); mDevice = testRule.getDevice(); if (!(verifyVpnStatus())) { com.android.devtools.systemimage.uitest.utils.AppManager.installApp(mInstrumentation, ""FredVPN.apk""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""TestVPN""); mDevice.registerWatcher(com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher.class.getName(), new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(mDevice)); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.VpnTest.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); junit.framework.Assert.assertTrue(""Failed to find the VPN lock icon after starting VPN!"", verifyVpnStatus()); mDevice.removeWatcher(com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher.class.getName()); } com.android.devtools.systemimage.uitest.utils.AppManager.uninstallApp(mInstrumentation, ""TestVPN"", null); }",0812ddf3e341db7c7fff0fbc13818d79fb7185e5,testVpn(),testVpn(),5,1,"private static boolean verifyVpnStatus(android.support.test.uiautomator.UiDevice device) { device.openNotification(); boolean isTrue = device.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.res(com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_LOCK_ICON_RES)), java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); device.pressHome(); return isTrue; }",c2417fa5bef9e1d629fcd102d82398ab1ae339ba,verifyVpnStatus(android.support.test.uiautomator.UiDevice),154707,300,133
529041,ojluni_src_test_java_time_tck_java_time_zone_TCKZoneRules.java,23.0,"public void test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12() { java.time.zone.ZoneRules test = pacificApia(); java.time.Instant instantBefore = java.time.LocalDate.of(1879, 7, 2).atStartOfDay(java.time.ZoneOffset.UTC).toInstant(); java.time.zone.ZoneOffsetTransition trans = test.nextTransition(instantBefore); assertEquals(trans.getDateTimeBefore(), java.time.LocalDateTime.of(1879, 7, 5, 0, 0)); assertEquals(trans.getDateTimeAfter(), java.time.LocalDateTime.of(1879, 7, 4, 0, 0)); assertEquals(trans.isGap(), false); assertEquals(trans.isOverlap(), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((+12), 33, 4)), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56))), true); assertEquals(trans.getDuration(), java.time.Duration.ofHours((-24))); assertEquals(trans.getInstant(), java.time.LocalDateTime.of(1879, 7, 4, 0, 0).toInstant(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56)))); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.of(1879, 7, 4, 23, 0, 0, 0, java.time.ZoneId.of(""Pacific/Apia"")); assertEquals(zdt.plusHours(2).toLocalDateTime(), java.time.LocalDateTime.of(1879, 7, 4, 1, 0, 0)); }",54b200289c42ee62c9c836786e7c20f7c42a5cb3,"public void test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12() { java.time.zone.ZoneRules test = pacificApia(); java.time.Instant instantBefore = java.time.LocalDate.of(1892, 7, 2).atStartOfDay(java.time.ZoneOffset.UTC).toInstant(); java.time.zone.ZoneOffsetTransition trans = test.nextTransition(instantBefore); assertEquals(trans.getDateTimeBefore(), java.time.LocalDateTime.of(1892, 7, 5, 0, 0)); assertEquals(trans.getDateTimeAfter(), java.time.LocalDateTime.of(1892, 7, 4, 0, 0)); assertEquals(trans.isGap(), false); assertEquals(trans.isOverlap(), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((+12), 33, 4)), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56))), true); assertEquals(trans.getDuration(), java.time.Duration.ofHours((-24))); assertEquals(trans.getInstant(), java.time.LocalDateTime.of(1892, 7, 4, 0, 0).toInstant(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56)))); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.of(1892, 7, 4, 23, 0, 0, 0, java.time.ZoneId.of(""Pacific/Apia"")); assertEquals(zdt.plusHours(2).toLocalDateTime(), java.time.LocalDateTime.of(1879, 7, 4, 1, 0, 0)); }",17f196f2acf887ad542df62885016dd7fcbdcfb8,test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12(),test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12(),2,23,"public void test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12() { java.time.zone.ZoneRules test = pacificApia(); java.time.Instant instantBefore = java.time.LocalDate.of(1892, 7, 2).atStartOfDay(java.time.ZoneOffset.UTC).toInstant(); java.time.zone.ZoneOffsetTransition trans = test.nextTransition(instantBefore); assertEquals(trans.getDateTimeBefore(), java.time.LocalDateTime.of(1892, 7, 5, 0, 0)); assertEquals(trans.getDateTimeAfter(), java.time.LocalDateTime.of(1892, 7, 4, 0, 0)); assertEquals(trans.isGap(), false); assertEquals(trans.isOverlap(), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((+12), 33, 4)), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56))), true); assertEquals(trans.getDuration(), java.time.Duration.ofHours((-24))); assertEquals(trans.getInstant(), java.time.LocalDateTime.of(1892, 7, 4, 0, 0).toInstant(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56)))); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.of(1892, 7, 4, 23, 0, 0, 0, java.time.ZoneId.of(""Pacific/Apia"")); assertEquals(zdt.plusHours(2).toLocalDateTime(), java.time.LocalDateTime.of(1892, 7, 4, 1, 0, 0)); }",f1590b0f5f6c29b7cc1ad3e2e514e2d4e5ed0533,test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12(),21516,351,351
41115,src_java_com_android_internal_telephony_uicc_UiccController.java,5.0,public static synchronized com.android.internal.telephony.uicc.UiccController getInstance(com.android.internal.telephony.PhoneBase phone) { if ((com.android.internal.telephony.uicc.UiccController.mInstance) == null) { com.android.internal.telephony.uicc.UiccController.mInstance = new com.android.internal.telephony.uicc.UiccController(phone); } else if (phone != null) { com.android.internal.telephony.uicc.UiccController.mInstance.setNewPhone(phone); } return com.android.internal.telephony.uicc.UiccController.mInstance; },f431ee8d71664b1fe91f26396a67eebeeb1c5836,"public static synchronized com.android.internal.telephony.uicc.UiccController make(android.content.Context c, com.android.internal.telephony.CommandsInterface ci) { if ((com.android.internal.telephony.uicc.UiccController.mInstance) != null) { throw new java.lang.RuntimeException(""UiccController.make() should only be called once""); } com.android.internal.telephony.uicc.UiccController.mInstance = new com.android.internal.telephony.uicc.UiccController(c, ci); return com.android.internal.telephony.uicc.UiccController.mInstance; }",f999b70714208a82f65110e9ec749c35429e5474,getInstance(com.android.internal.telephony.PhoneBase),"make(android.content.Context,com.android.internal.telephony.CommandsInterface)",22,3,"public static com.android.internal.telephony.uicc.UiccController make(android.content.Context c, com.android.internal.telephony.CommandsInterface ci) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { if ((com.android.internal.telephony.uicc.UiccController.mInstance) != null) { throw new java.lang.RuntimeException(""UiccController.make() should only be called once""); } com.android.internal.telephony.uicc.UiccController.mInstance = new com.android.internal.telephony.uicc.UiccController(c, ci); return com.android.internal.telephony.uicc.UiccController.mInstance; } }",368ff3c0fedfda3367e6bdb403c4a8cdf38f2151,"make(android.content.Context,com.android.internal.telephony.CommandsInterface)",499804,143,164
134300,rs_java_android_renderscript_RenderScript.java,228.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"synchronized void nAllocation1DElementData(long id, int xoff, int mip, int compIdx, byte[] d, int sizeBytes) { validate(); rsnAllocation1DElementData(mContext, id, xoff, mip, compIdx, d, sizeBytes); }",ba2337972b5e265ad10ae09e95de807ca5a6af5e,,"nAllocation1DElementData(long,int,int,int,byte[],int)",6,112,"synchronized void nScriptIntrinsicBLAS_Z(long id, int func, int TransA, int TransB, int Side, int Uplo, int Diag, int M, int N, int K, double alphaX, double alphaY, long A, long B, double betaX, double betaY, long C, int incX, int incY, int KL, int KU) { validate(); rsnScriptIntrinsicBLAS_Z(mContext, id, func, TransA, TransB, Side, Uplo, Diag, M, N, K, alphaX, alphaY, A, B, betaX, betaY, C, incX, incY, KL, KU); }",442dd3bc5b8e12fa6319d94a7030040b7e01c89d,"nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)",486944,64,164
36031,ddms_libs_ddmuilib_src_com_android_ddmuilib_logcat_LogCatReceiver.java,5.0,"private void processLogLines(java.lang.String[] lines) { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> messages = mLogCatMessageParser.processLogLines(lines, mPidToNameMapper); if ((messages.size()) > 0) { for (com.android.ddmuilib.logcat.LogCatMessage m : messages) { mLogMessages.appendMessage(m); } sendMessageReceivedEvent(messages); } }",018827fc0a35d0f2fb468c04a7d6dee1fc64da5a,"private void processLogLines(java.lang.String[] lines) { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> messages = mLogCatMessageParser.processLogLines(lines, mPidToNameMapper); if ((messages.size()) > 0) { int nDeleted = mLogMessages.appendMessages(messages); sendMessageReceivedEvent(messages, nDeleted); } }",9ea1d434dcf4ec2ec21a62c1ec1ce3641f6e8f99,processLogLines(java.lang.String[]),processLogLines(java.lang.String[]),10,5,"private void processLogLines(java.lang.String[] lines) { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> newMessages = mLogCatMessageParser.processLogLines(lines, mPidToNameMapper); if ((newMessages.size()) > 0) { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> deletedMessages; synchronized(mLogMessages) { deletedMessages = mLogMessages.ensureSpace(newMessages.size()); mLogMessages.appendMessages(newMessages); } sendLogChangedEvent(newMessages, deletedMessages); } }",b0c096c389e4fc136ec5be8d07f911d0733bf3dd,processLogLines(java.lang.String[]),433827,92,141
237621,jack-tests_tests_com_android_jack_java8_DefaultMethodTest.java,1.0,@org.junit.Test public void testDefaultMethod012() throws java.lang.Exception { run(DEFAULTMETHOD012); },e4ec7a5c5b8a60672495073b8bb543b3c6ef8711,@org.junit.Test @java.lang.Runtime public void testDefaultMethod012() throws java.lang.Exception { run(DEFAULTMETHOD012); },90df13e3b30a0defb1319af8cf1cf2a6dab42f4c,testDefaultMethod012(),testDefaultMethod012(),11,1,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void testDefaultMethod012() throws java.lang.Exception { run(DEFAULTMETHOD012); },11a91bcad562a7615bd042936ebd9a04721879bb,testDefaultMethod012(),273909,33,41
148495,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_vg_VDPath.java,,,,"public static void transform(float a, float b, float c, float d, float e, float f, com.android.assetstudiolib.vectordrawable.vg.VDPath.Node[] nodes) { float[] pre = new float[2]; for (int i = 0; i < (nodes.length); i++) { nodes[i].transform(a, b, c, d, e, f, pre); } }",38188e7bd20654bb14163be6cf7627646c837202,,"transform(float,float,float,float,float,float,com.android.assetstudiolib.vectordrawable.vg.VDPath$Node[])",11,5,"public static void transform(float a, float b, float c, float d, float e, float f, com.android.assetstudiolib.vectordrawable.VdPath.Node[] nodes) { float[] pre = new float[2]; for (int i = 0; i < (nodes.length); i++) { nodes[i].transform(a, b, c, d, e, f, pre); } }",9ce172475140e3f18a459007c801508dcd0cc286,"transform(float,float,float,float,float,float,com.android.assetstudiolib.vectordrawable.VdPath$Node[])",5068,93,90
114532,dx_src_com_android_dx_command_dexer_Main.java,43.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.android.dx.dex.file.ClassDefItem call() { long now = java.lang.System.nanoTime(); com.android.dx.dex.file.ClassDefItem clazz = com.android.dx.command.dexer.Main.translateClass(name, bytes, classFile); com.android.dx.command.dexer.Main.translateTime += (java.lang.System.nanoTime()) - now; com.android.dx.command.dexer.Main.methodDefs += classFile.getMethods().size(); com.android.dx.command.dexer.Main.fieldDefs += classFile.getFields().size(); return clazz; }",6c961e7b6e0f1f24a65d65ca5ba5f49226a17a78,,call(),6,3,"@java.lang.Override public com.android.dx.dex.file.ClassDefItem call() { com.android.dx.dex.file.ClassDefItem clazz = com.android.dx.command.dexer.Main.translateClass(bytes, classFile); return clazz; }",f6da76fbc52aced4f1d81d5492dc64e82a464273,call(),237072,150,63
243440,test_458-checker-instruction-simplification_src_Main.java,7.0,public static int Shl0(int arg) { return arg << 0; },3f8869b803cc8e431ca92b10454bf271b673d43f,public static int Shl0(int arg) { if (Main.doThrow) { throw new java.lang.Error(); } return arg << 0; },a8ffbad3e28b04e8b0d5c4bec096c35d256a5e4d,Shl0(int),Shl0(int),3,12,public static int $noinline$Shl0(int arg) { if (Main.doThrow) { throw new java.lang.Error(); } return arg << 0; },a16241eb63785430951d8beaf93e6b077ef54af5,$noinline$Shl0(int),118190,32,37
160904,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_ndk_internal_NdkNamingScheme.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.lang.String getNdkBuildTaskName(@com.android.annotations.NonNull org.gradle.nativeplatform.NativeBinarySpec binary) { return com.android.build.gradle.ndk.internal.NdkNamingScheme.getTaskName(binary, ""build"", ""Ndk""); }",680bc44f9d13f1715d7bfba78015effc8800d33e,,getNdkBuildTaskName(org.gradle.nativeplatform.NativeBinarySpec),2,9,"public static java.lang.String getNdkBuildTaskName(@com.android.annotations.NonNull org.gradle.nativeplatform.NativeBinarySpec binary) { return com.android.build.gradle.ndk.internal.NdkNamingScheme.getTaskName(binary, ""ndkBuild""); }",068fe52762be2e81cc3d29868739cf050ef2d08e,getNdkBuildTaskName(org.gradle.nativeplatform.NativeBinarySpec),102029,65,62
400153,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,40.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testDisplayNamesOnNonGregorianCalendar() { assertEquals(""Jan"", formatDateNonGregorianCalendar(""MMM"")); assertEquals(""Jan"", formatDateNonGregorianCalendar(""LLL"")); assertEquals(""Thu"", formatDateNonGregorianCalendar(""EEE"")); assertEquals(""Thu"", formatDateNonGregorianCalendar(""ccc"")); }",95faa47bc8c6b4a5d8489d6fa20c18df37d5ddfc,,testDisplayNamesOnNonGregorianCalendar(),3,14,"public void testDisplayNamesOnNonGregorianCalendar() { assertEquals(""Jan"", libcore.java.text.SimpleDateFormatTest.formatDateNonGregorianCalendar(""MMM"")); assertEquals(""Jan"", libcore.java.text.SimpleDateFormatTest.formatDateNonGregorianCalendar(""LLL"")); assertEquals(""Thu"", libcore.java.text.SimpleDateFormatTest.formatDateNonGregorianCalendar(""EEE"")); assertEquals(""Thu"", libcore.java.text.SimpleDateFormatTest.formatDateNonGregorianCalendar(""ccc"")); }",0169a7bf4e5c235d8acbae40fa47243531cee639,testDisplayNamesOnNonGregorianCalendar(),49620,61,97
155012,sched_src_com_android_sched_util_Version.java,,,,"public boolean isOlderThan(int release, int subRelease) { return ((this.releaseCode) > release) || (((this.releaseCode) == release) && ((this.subReleaseCode) > subRelease)); }",6020dfcb5336b8126fec5547392b62baffe2c19b,,"isOlderThan(int,int)",14,3,public boolean isOlderThan(@javax.annotation.Nonnull com.android.sched.util.Version other) throws com.android.sched.util.UncomparableVersion { return (compareTo(other)) < 0; },adc3694576b13faf50fa64e3a7b7aa5fb0213f3b,isOlderThan(com.android.sched.util.Version),215301,51,44
338210,tests_wifitests_src_com_android_server_wifi_SupplicantStaIfaceHalTest.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testSetWpsDeviceType() throws java.lang.Exception { java.lang.String validDeviceType = ""10-0050F204-5""; java.lang.String invalidDeviceType1 = ""10-02050F204-5""; java.lang.String invalidDeviceType2 = ""102-0050F204-5""; when(mISupplicantStaIfaceMock.setWpsDeviceType(any(byte[].class))).thenReturn(mStatusSuccess); executeAndValidateInitializationSequence(false, false, false); assertTrue(mDut.setWpsDeviceType(validDeviceType)); assertFalse(mDut.setWpsDeviceType(invalidDeviceType1)); assertFalse(mDut.setWpsDeviceType(invalidDeviceType2)); }",f0baeace4aac2caf20c895340fb6f8a4f35878d7,,testSetWpsDeviceType(),7,13,"@org.junit.Test public void testSetWpsDeviceType() throws java.lang.Exception { java.lang.String validDeviceTypeStr = ""10-0050F204-5""; byte[] expectedDeviceType = new byte[]{ 0, 10, 0, 80, ((byte) (242)), 4, 0, 5 }; java.lang.String invalidDeviceType1Str = ""10-02050F204-5""; java.lang.String invalidDeviceType2Str = ""10-0050F204-534""; when(mISupplicantStaIfaceMock.setWpsDeviceType(any(byte[].class))).thenReturn(mStatusSuccess); executeAndValidateInitializationSequence(false, false, false); assertTrue(mDut.setWpsDeviceType(validDeviceTypeStr)); verify(mISupplicantStaIfaceMock).setWpsDeviceType(eq(expectedDeviceType)); assertFalse(mDut.setWpsDeviceType(invalidDeviceType1Str)); assertFalse(mDut.setWpsDeviceType(invalidDeviceType2Str)); }",9ee98a552fc20b21058bae7b2b441f06d2e81311,testSetWpsDeviceType(),203479,173,235
540924,services_core_java_com_android_server_IpSecService.java,54.0,protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return mUserQuotaTracker.getUserRecord(this.uid).transform; },fc61421d165516cb0e7dcbfc093392d885aa1d9f,@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().transformQuotaTracker; },59828ca046322fa435e670f2e9053cfd9b93c6db,getResourceTracker(),getResourceTracker(),6,49,@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().mTransformQuotaTracker; },48014f64cb787113fbf54b51f8693dda962ad53a,getResourceTracker(),180073,32,33
243440,test_458-checker-instruction-simplification_src_Main.java,42.0,public static short shortToCharToShort(short value) { return ((short) ((char) (value))); },6d67e57534079c6d04700b846792056d7cb8653e,public static short shortToCharToShort(short value) { if (Main.doThrow) { throw new java.lang.Error(); } return ((short) ((char) (value))); },586c3e0ed27c1ee95baddfe5cfa1c063bae633e0,shortToCharToShort(short),shortToCharToShort(short),3,66,public static short $noinline$shortToCharToShort(short value) { if (Main.doThrow) { throw new java.lang.Error(); } return ((short) ((char) (value))); },5550279ded444d12866d3c23991ffdb7d572d8a0,$noinline$shortToCharToShort(short),118213,42,47
87794,build-system_manifest-merger_src_test_java_com_android_manifmerger_XmlElementTest.java,0.0,"public void testDiff6() throws java.lang.Exception { java.lang.String reference = """" + (((((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" xmlns:tools=\""http://schemas.android.com/tools\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <activity android:name=\""activityOne\"" "") + "" android:configChanges=\""locale\"">\n"") + ""\n"") + "" <intent-filter android:label=\""@string/foo\""/>\n"") + ""\n"") + "" </activity>\n"") + ""</manifest>""); java.lang.String other = """" + ((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" xmlns:tools=\""http://schemas.android.com/tools\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <activity android:name=\""activityOne\"" "") + "" android:configChanges=\""locale\""/>\n"") + ""\n"") + ""</manifest>""); com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff6()""), reference); com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff6()""), other); assertFalse(refDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, ""com.example.lib3.activityOne"").get().compareTo(otherDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, ""com.example.lib3.activityOne"").get(), mergingReport)); }",5efe2e53a5a3511c182a69def62e61f51058d760,"public void testDiff6() throws java.lang.Exception { java.lang.String reference = """" + (((((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" xmlns:tools=\""http://schemas.android.com/tools\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <activity android:name=\""activityOne\"" "") + "" android:configChanges=\""locale\"">\n"") + ""\n"") + "" <intent-filter android:label=\""@string/foo\""/>\n"") + ""\n"") + "" </activity>\n"") + ""</manifest>""); java.lang.String other = """" + ((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" xmlns:tools=\""http://schemas.android.com/tools\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <activity android:name=\""activityOne\"" "") + "" android:configChanges=\""locale\""/>\n"") + ""\n"") + ""</manifest>""); com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff6()""), reference); com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff6()""), other); assertTrue(refDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, ""com.example.lib3.activityOne"").get().compareTo(otherDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, ""com.example.lib3.activityOne"").get(), mergingReport).isPresent()); }",fdcea9e5b72fa325616ddfb4f769faab2c8e538b,testDiff6(),testDiff6(),5,1,"public void testDiff6() throws java.lang.Exception { java.lang.String reference = """" + (((((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" xmlns:tools=\""http://schemas.android.com/tools\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <activity android:name=\""activityOne\"" "") + "" android:configChanges=\""locale\"">\n"") + ""\n"") + "" <intent-filter android:label=\""@string/foo\""/>\n"") + ""\n"") + "" </activity>\n"") + ""</manifest>""); java.lang.String other = """" + ((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" xmlns:tools=\""http://schemas.android.com/tools\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <activity android:name=\""activityOne\"" "") + "" android:configChanges=\""locale\""/>\n"") + ""\n"") + ""</manifest>""); com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff6()""), reference); com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff6()""), other); assertTrue(refDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, ""com.example.lib3.activityOne"").get().compareTo(otherDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, ""com.example.lib3.activityOne"").get()).isPresent()); }",d7e11baa2bc8be01dd2b6af53cb45a7afeb6d0b0,testDiff6(),132647,444,442
340832,src_com_android_server_telecom_ConnectionServiceWrapper.java,75.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onRttConnectionRemotelyTerminated(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { }",82dbc495443ceb3bfab1b9cf5f22a2984461a204,,"onRttConnectionRemotelyTerminated(java.lang.String,android.telecom.Logging.Session$Info)",8,51,"@java.lang.Override public void onRttSessionRemotelyTerminated(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { }",57dde0e580c737db2d6a9d9fa4812def74695e01,"onRttSessionRemotelyTerminated(java.lang.String,android.telecom.Logging.Session$Info)",219969,46,46
14241,tests_appsecurity-tests_test-apps_InstrumentationAppDiffCert_src_com_android_cts_instrumentationdiffcertapp_InstrumentationFailToRunTest.java,0.0,"public void testInstrumentationNotAllowed() { fail(""instrumentating app with different cert should fail""); }",07ffab2c07eb965fc1cb5ed3e1369a8db919cdb6,"public void testInstrumentationNotAllowed() { android.content.Context myContext = getInstrumentation().getContext(); android.content.ComponentName appDiffCertInstrumentation = new android.content.ComponentName(myContext, com.android.cts.instrumentationdiffcertapp.EmptyInstrumentation.class); try { getInstrumentation().getContext().startInstrumentation(appDiffCertInstrumentation, null, new android.os.Bundle()); fail(""could launch instrumentation""); } catch (java.lang.SecurityException e) { } }",00fdddc942162d9156c12f7a78ef76374ea3f789,testInstrumentationNotAllowed(),testInstrumentationNotAllowed(),2,0,"public void testInstrumentationNotAllowed() { android.content.Context myContext = getInstrumentation().getContext(); android.content.ComponentName appDiffCertInstrumentation = new android.content.ComponentName(myContext, android.app.Instrumentation.class); try { getInstrumentation().getContext().startInstrumentation(appDiffCertInstrumentation, null, new android.os.Bundle()); fail(""could launch instrumentation""); } catch (java.lang.SecurityException e) { } }",6aa0724c8fe7c712dd8eba231120ed94b6d0b13e,testInstrumentationNotAllowed(),431698,102,93
236743,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_AppTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testBookmarkWebSiteInBrowser() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Browser""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.BROWSER_URL_TEXT_FIELD_RES)).click(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.BROWSER_URL_TEXT_FIELD_RES)).clearTextField(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.BROWSER_URL_TEXT_FIELD_RES)).setText(""espn.com""); device.pressEnter(); device.pressMenu(); device.findObject(new android.support.test.uiautomator.UiSelector().text(""Save to bookmarks"")).click(); device.findObject(new android.support.test.uiautomator.UiSelector().text(""OK"")).click(); device.pressMenu(); device.findObject(new android.support.test.uiautomator.UiSelector().text(""Bookmarks"")).click(); assertTrue(((device.findObject(new android.support.test.uiautomator.UiSelector().text(""Bookmarks"")).exists()) && (device.findObject(new android.support.test.uiautomator.UiSelector().textContains(""ESPN: The Worldwide Leader in Sports"")).exists()))); }",83b1c58b82a13af436abf8c2d9a12f48c2fc3825,,testBookmarkWebSiteInBrowser(),7,0,"@org.junit.Test public void bookmarkWebSiteInBrowser() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Browser""); android.support.test.uiautomator.UiObject textField = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.BROWSER_URL_TEXT_FIELD_RES)); textField.click(); textField.clearTextField(); textField.setText(""espn.com""); device.pressEnter(); device.pressMenu(); device.findObject(new android.support.test.uiautomator.UiSelector().text(""Save to bookmarks"")).click(); device.findObject(new android.support.test.uiautomator.UiSelector().text(""OK"")).click(); device.pressMenu(); device.findObject(new android.support.test.uiautomator.UiSelector().text(""Bookmarks"")).click(); assertTrue(""Cannot find ESPN bookmark"", ((device.findObject(new android.support.test.uiautomator.UiSelector().text(""Bookmarks"")).exists()) && (device.findObject(new android.support.test.uiautomator.UiSelector().textContains(""ESPN"").resourceId(Res.BROWSER_BOOKMARKS_LABEL_RES)).exists()))); }",a844d3b284ce9ce57bb053c8cfb014fafcdb53cc,bookmarkWebSiteInBrowser(),306662,376,338
478957,test_567-checker-compare_src_Main.java,29.0,"private static int compareBooleans(boolean x, boolean y) { return java.lang.Integer.compare((x ? 1 : 0), (y ? 1 : 0)); }",eb764cbf965eba3dfab80b36d580eb33994ec920,"private static int compareBooleans(boolean x, boolean y) { try { java.lang.Class<?> c = java.lang.Class.forName(""Smali""); java.lang.reflect.Method m = c.getMethod(""compareBooleans"", boolean.class, boolean.class); return ((java.lang.Integer) (m.invoke(null, x, y))); } catch (java.lang.Exception ex) { throw new java.lang.Error(ex); } }",b6c60d4798349453a3283ffd81fa407f62ad8f1b,"compareBooleans(boolean,boolean)","compareBooleans(boolean,boolean)",5,30,"private static int compareBooleans(boolean x, boolean y) { return java.lang.Integer.compare((x ? 1 : 0), (y ? 1 : 0)); }",eb764cbf965eba3dfab80b36d580eb33994ec920,"compareBooleans(boolean,boolean)",189332,104,39
17745,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_repository_SdkSources.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean hasSource(com.android.sdklib.internal.repository.SdkSourceCategory category, com.android.sdklib.internal.repository.SdkSource source) { java.util.ArrayList<com.android.sdklib.internal.repository.SdkSource> list = mSources.get(category); if (list != null) { for (com.android.sdklib.internal.repository.SdkSource s : list) { if (s.equals(source)) { return true; } } } return false; }",10ea8f8f39f155686d0688402b05068c47556208,,"hasSource(com.android.sdklib.internal.repository.SdkSourceCategory,com.android.sdklib.internal.repository.SdkSource)",3,2,"public boolean hasSourceUrl(com.android.sdklib.internal.repository.SdkSourceCategory category, com.android.sdklib.internal.repository.SdkSource source) { java.util.ArrayList<com.android.sdklib.internal.repository.SdkSource> list = mSources.get(category); if (list != null) { for (com.android.sdklib.internal.repository.SdkSource s : list) { if (s.equals(source)) { return true; } } } return false; }",11ccef44a559d1e1e6d99661169734e9eb3e6134,"hasSourceUrl(com.android.sdklib.internal.repository.SdkSourceCategory,com.android.sdklib.internal.repository.SdkSource)",435927,114,115
223594,jack_src_com_android_jack_optimizations_modifiers_FieldFinalizer.java,,,,"private void removeNonJlsCompliantFields(com.android.jack.ir.ast.JDefinedClass thisClass, java.util.Set<com.android.jack.ir.ast.JField> fields) { com.android.jack.optimizations.modifiers.FieldFinalizer.FinalizingPhase.Analyzer analyzer = new com.android.jack.optimizations.modifiers.FieldFinalizer.FinalizingPhase.Analyzer(fields); for (com.android.jack.ir.ast.JMethod method : thisClass.getMethods()) { if (com.android.jack.optimizations.modifiers.FieldFinalizer.isConstructor(method)) { analyzer.setMethod(method); analyzer.analyze(); if (fields.isEmpty()) { return; } } } }",51bf14dc2fd5157347aab173390fb608b6e20b88,,"removeNonJlsCompliantFields(com.android.jack.ir.ast.JDefinedClass,java.util.Set)",10,10,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((!(preserveJls)) || (!(com.android.jack.optimizations.modifiers.FieldFinalizer.isConstructor(method)))) { return; } com.android.jack.ir.ast.JDefinedClassOrInterface type = method.getEnclosingType(); if (!(type instanceof com.android.jack.ir.ast.JDefinedClass)) { return; } com.android.jack.optimizations.modifiers.FieldFinalizer.ConstructorsAnalysisPhase.Analyzer analyzer = new com.android.jack.optimizations.modifiers.FieldFinalizer.ConstructorsAnalysisPhase.Analyzer(type.getFields(), method); if (!(analyzer.isEmpty())) { analyzer.analyze(); } }",eef160ebb4bf378abbd44fa223416a7b6a317695,run(com.android.jack.ir.ast.JMethod),177730,160,174
112176,build-system_builder_src_main_java_com_android_builder_core_DefaultProductFlavor.java,31.0,@java.lang.Override @com.android.annotations.Nullable public java.lang.Boolean getRenderscriptSupportMode() { return mRenderscriptSupportMode; },080f7cdc09fbf2ebebf75b57f03171cff9a9f500,@java.lang.Override @com.android.annotations.Nullable public java.lang.Boolean getRenderscriptSupportModeEnabled() { return mRenderscriptSupportMode; },67638ea541d3b65000c4fcc40d058c75f785db37,getRenderscriptSupportMode(),getRenderscriptSupportModeEnabled(),5,2,@java.lang.Override @com.android.annotations.Nullable public java.lang.Boolean getRenderscriptSupportModeEnabled() { return mRenderscriptSupportModeEnabled; },7eec8fb3211e585c9361bc3c93ec29fcd6a0dc88,getRenderscriptSupportModeEnabled(),424235,36,37
346149,service_java_com_android_server_wifi_WifiVendorHal.java,100.0,"public int startSendingOffloadedPacket(int slot, byte[] srcMac, com.android.server.connectivity.KeepalivePacketData keepAlivePacket, int periodInMs) { android.util.Log.d(com.android.server.wifi.WifiVendorHal.TAG, (((""startSendingOffloadedPacket slot="" + slot) + "" periodInMs="") + periodInMs)); java.util.ArrayList<java.lang.Byte> data = com.android.server.wifi.util.NativeUtil.byteArrayToArrayList(keepAlivePacket.data); short protocol = ((short) (keepAlivePacket.protocol)); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return -1; try { android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.startSendingKeepAlivePackets(slot, data, protocol, srcMac, keepAlivePacket.dstMac, periodInMs); if ((status.code) != (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS)) return -1; return 0; } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return -1; } } }",a676fcc898f2a6dedb899eeb32278c6b03f3a4c2,"public int startSendingOffloadedPacket(int slot, byte[] srcMac, com.android.server.connectivity.KeepalivePacketData keepAlivePacket, int periodInMs) { mLog.d((((""startSendingOffloadedPacket slot="" + slot) + "" periodInMs="") + periodInMs)); java.util.ArrayList<java.lang.Byte> data = com.android.server.wifi.util.NativeUtil.byteArrayToArrayList(keepAlivePacket.data); short protocol = ((short) (keepAlivePacket.protocol)); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return -1; try { android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.startSendingKeepAlivePackets(slot, data, protocol, srcMac, keepAlivePacket.dstMac, periodInMs); if (!(ok(status))) return -1; return 0; } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return -1; } } }",a7c82856d2c8f31123b2d6a3f6e3d94b01cd8d6d,"startSendingOffloadedPacket(int,byte[],com.android.server.connectivity.KeepalivePacketData,int)","startSendingOffloadedPacket(int,byte[],com.android.server.connectivity.KeepalivePacketData,int)",5,102,"public int startSendingOffloadedPacket(int slot, byte[] srcMac, com.android.server.connectivity.KeepalivePacketData keepAlivePacket, int periodInMs) { enter(""slot=% periodInMs=%"").c(slot).c(periodInMs).flush(); java.util.ArrayList<java.lang.Byte> data = com.android.server.wifi.util.NativeUtil.byteArrayToArrayList(keepAlivePacket.data); short protocol = ((short) (keepAlivePacket.protocol)); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return -1; try { android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.startSendingKeepAlivePackets(slot, data, protocol, srcMac, keepAlivePacket.dstMac, periodInMs); if (!(ok(status))) return -1; return 0; } catch (android.os.RemoteException e) { handleRemoteException(e); return -1; } } }",17bc00e675cc9dcdeb8ae067bac217e4eb3d48db,"startSendingOffloadedPacket(int,byte[],com.android.server.connectivity.KeepalivePacketData,int)",404540,232,220
90400,core_java_com_android_internal_os_ZygoteInit.java,26.0,"private static boolean startSystemServer() throws com.android.internal.os.ZygoteInit.MethodAndArgsCaller, java.lang.RuntimeException { long capabilities = com.android.internal.os.ZygoteInit.posixCapabilitiesAsBits(OsConstants.CAP_KILL, OsConstants.CAP_NET_ADMIN, OsConstants.CAP_NET_BIND_SERVICE, OsConstants.CAP_NET_BROADCAST, OsConstants.CAP_NET_RAW, OsConstants.CAP_SYS_MODULE, OsConstants.CAP_SYS_NICE, OsConstants.CAP_SYS_RESOURCE, OsConstants.CAP_SYS_TIME, OsConstants.CAP_SYS_TTY_CONFIG); java.lang.String[] args = new java.lang.String[]{ ""--setuid=1000"", ""--setgid=1000"", ""--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007"", ((""--capabilities="" + capabilities) + "","") + capabilities, ""--runtime-init"", ""--nice-name=system_server"", ""com.android.server.SystemServer"" }; com.android.internal.os.ZygoteConnection.Arguments parsedArgs = null; int pid; try { parsedArgs = new com.android.internal.os.ZygoteConnection.Arguments(args); com.android.internal.os.ZygoteConnection.applyDebuggerSystemProperty(parsedArgs); com.android.internal.os.ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs); pid = com.android.internal.os.Zygote.forkSystemServer(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids, parsedArgs.debugFlags, null, parsedArgs.permittedCapabilities, parsedArgs.effectiveCapabilities); } catch (java.lang.IllegalArgumentException ex) { throw new java.lang.RuntimeException(ex); } if (pid == 0) { com.android.internal.os.ZygoteInit.handleSystemServerProcess(parsedArgs); } return true; }",1770b030f0dbb1b0704d2fbc4dc2a4ae23a998b8,"private static boolean startSystemServer() throws com.android.internal.os.ZygoteInit.MethodAndArgsCaller, java.lang.RuntimeException { long capabilities = com.android.internal.os.ZygoteInit.posixCapabilitiesAsBits(OsConstants.CAP_KILL, OsConstants.CAP_NET_ADMIN, OsConstants.CAP_NET_BIND_SERVICE, OsConstants.CAP_NET_BROADCAST, OsConstants.CAP_NET_RAW, OsConstants.CAP_SYS_MODULE, OsConstants.CAP_SYS_NICE, OsConstants.CAP_SYS_RESOURCE, OsConstants.CAP_SYS_TIME, OsConstants.CAP_SYS_TTY_CONFIG, OsConstants.CAP_BLOCK_SUSPEND); java.lang.String[] args = new java.lang.String[]{ ""--setuid=1000"", ""--setgid=1000"", ""--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007"", ((""--capabilities="" + capabilities) + "","") + capabilities, ""--runtime-init"", ""--nice-name=system_server"", ""com.android.server.SystemServer"" }; com.android.internal.os.ZygoteConnection.Arguments parsedArgs = null; int pid; try { parsedArgs = new com.android.internal.os.ZygoteConnection.Arguments(args); com.android.internal.os.ZygoteConnection.applyDebuggerSystemProperty(parsedArgs); com.android.internal.os.ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs); pid = com.android.internal.os.Zygote.forkSystemServer(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids, parsedArgs.debugFlags, null, parsedArgs.permittedCapabilities, parsedArgs.effectiveCapabilities); } catch (java.lang.IllegalArgumentException ex) { throw new java.lang.RuntimeException(ex); } if (pid == 0) { com.android.internal.os.ZygoteInit.handleSystemServerProcess(parsedArgs); } return true; }",a65a1ae5c0c901221747dd2189a90fb5cd70dd67,startSystemServer(),startSystemServer(),3,26,"private static boolean startSystemServer() throws com.android.internal.os.ZygoteInit.MethodAndArgsCaller, java.lang.RuntimeException { long capabilities = com.android.internal.os.ZygoteInit.posixCapabilitiesAsBits(OsConstants.CAP_BLOCK_SUSPEND, OsConstants.CAP_KILL, OsConstants.CAP_NET_ADMIN, OsConstants.CAP_NET_BIND_SERVICE, OsConstants.CAP_NET_BROADCAST, OsConstants.CAP_NET_RAW, OsConstants.CAP_SYS_MODULE, OsConstants.CAP_SYS_NICE, OsConstants.CAP_SYS_RESOURCE, OsConstants.CAP_SYS_TIME, OsConstants.CAP_SYS_TTY_CONFIG); java.lang.String[] args = new java.lang.String[]{ ""--setuid=1000"", ""--setgid=1000"", ""--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007"", ((""--capabilities="" + capabilities) + "","") + capabilities, ""--runtime-init"", ""--nice-name=system_server"", ""com.android.server.SystemServer"" }; com.android.internal.os.ZygoteConnection.Arguments parsedArgs = null; int pid; try { parsedArgs = new com.android.internal.os.ZygoteConnection.Arguments(args); com.android.internal.os.ZygoteConnection.applyDebuggerSystemProperty(parsedArgs); com.android.internal.os.ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs); pid = com.android.internal.os.Zygote.forkSystemServer(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids, parsedArgs.debugFlags, null, parsedArgs.permittedCapabilities, parsedArgs.effectiveCapabilities); } catch (java.lang.IllegalArgumentException ex) { throw new java.lang.RuntimeException(ex); } if (pid == 0) { com.android.internal.os.ZygoteInit.handleSystemServerProcess(parsedArgs); } return true; }",e594040fd3ca4fc91dc66622db5ec6f1adc971d3,startSystemServer(),394632,479,479
151051,tests_tests_tv_src_android_media_tv_cts_TvInputServiceTest.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void verifyCommandDispatchKeyDown() { mTvView.dispatchKeyEvent(new android.view.KeyEvent(android.view.KeyEvent.ACTION_DOWN, android.view.KeyEvent.KEYCODE_K)); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvInputServiceTest.TIME_OUT) { @java.lang.Override protected boolean check() { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession; return (session != null) && ((session.mKeyDownCount) > 0); } }.run(); }",00fe5846a15b1ae411287f91ca23bae6d7cf15ab,,verifyCommandDispatchKeyDown(),4,26,"public void verifyCommandDispatchKeyDown() { resetCounts(); mTvView.dispatchKeyEvent(new android.view.KeyEvent(android.view.KeyEvent.ACTION_DOWN, android.view.KeyEvent.KEYCODE_K)); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvInputServiceTest.TIME_OUT) { @java.lang.Override protected boolean check() { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession; return (session != null) && ((session.mKeyDownCount) > 0); } }.run(); }",b220019ed6f57773089166fb1c2ff598fbf0eeaa,verifyCommandDispatchKeyDown(),386915,164,167
510195,test_959-invoke-polymorphic-accessors_src_Main.java,16.0,"static void getChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final char got; if (v == null) { got = ((char) (m.invokeExact())); } else { got = ((char) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }",4cbcbee653636fed1f81cb97593867855ad40415,"static void getChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final char got; if (v == null) { got = ((char) (m.invokeExact())); } else { got = ((char) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }",7e9ef7b540715eb97a5136baefc578571344cda2,"getChar(java.lang.invoke.MethodHandle,Main$ValueHolder,char,boolean)","getChar(java.lang.invoke.MethodHandle,Main$ValueHolder,char,boolean)",3,16,"static void getChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final char got; if (v == null) { got = ((char) (m.invokeExact())); } else { got = ((char) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }",1aabb1220e418b0ab0311392a0fa3f3c6de4f46e,"getChar(java.lang.invoke.MethodHandle,Main$ValueHolder,char,boolean)",228917,129,128
567897,telephony_java_android_telephony_euicc_EuiccManager.java,5.0,"public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { mController.switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",ba87a865e655beabe5456c756d34a22f8c99f09d,"public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",b44de9374f3afb5ca79e68de7e16af02c7fd54cb,"switchToSubscription(int,android.app.PendingIntent)","switchToSubscription(int,android.app.PendingIntent)",2,5,"public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",12082844fbdf03b19f5e363ac6c19bec149cb105,"switchToSubscription(int,android.app.PendingIntent)",377335,89,102
216374,jack_src_com_android_jack_optimizations_DefUsesChainsSimplifier.java,5.0,"@javax.annotation.Nonnull private static java.util.Map<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> collectDefinitions(@javax.annotation.Nonnull com.android.jack.cfg.ControlFlowGraph cfg) { java.util.Map<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> defs = com.google.common.collect.Maps.newIdentityHashMap(); for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { for (com.android.jack.ir.ast.JStatement stmt : bb.getStatements()) { com.android.jack.analysis.DefinitionMarker dm = com.android.jack.util.ThreeAddressCodeFormUtils.getDefinitionMarker(stmt); if (dm != null) { com.android.jack.ir.ast.JVariable variable = dm.getDefinedVariable(); if (!(defs.containsKey(variable))) { defs.put(variable, new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo()); } defs.get(variable).defs.add(dm); } for (com.android.jack.ir.ast.JVariableRef ref : com.android.jack.util.OptimizationTools.getUsedVariables(stmt)) { com.android.jack.ir.ast.JVariable variable = ref.getTarget(); if (!(defs.containsKey(variable))) { defs.put(variable, new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo()); } defs.get(variable).refStmts.add(stmt); } } } return defs; }",979aa982d899d448cde5bd9dd7265d15fd3d5f27,"@javax.annotation.Nonnull private static java.util.LinkedHashMap<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> collectDefinitions(@javax.annotation.Nonnull com.android.jack.cfg.ControlFlowGraph cfg) { java.util.LinkedHashMap<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> defs = com.google.common.collect.Maps.newLinkedHashMap(); for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { for (com.android.jack.ir.ast.JStatement stmt : bb.getStatements()) { com.android.jack.analysis.DefinitionMarker dm = com.android.jack.util.ThreeAddressCodeFormUtils.getDefinitionMarker(stmt); if (dm != null) { com.android.jack.ir.ast.JVariable variable = dm.getDefinedVariable(); if (!(defs.containsKey(variable))) { defs.put(variable, new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo(variable)); } defs.get(variable).defs.add(dm); } for (com.android.jack.ir.ast.JVariableRef ref : com.android.jack.util.OptimizationTools.getUsedVariables(stmt)) { com.android.jack.ir.ast.JVariable variable = ref.getTarget(); if (!(defs.containsKey(variable))) { defs.put(variable, new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo(variable)); } defs.get(variable).refStmts.add(stmt); } } } return defs; }",73498100f922bd10590c0f4b8d4375ba384a717c,collectDefinitions(com.android.jack.cfg.ControlFlowGraph),collectDefinitions(com.android.jack.cfg.ControlFlowGraph),2,7,"@javax.annotation.Nonnull private static java.util.LinkedHashMap<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> collectDefinitions(@javax.annotation.Nonnull com.android.jack.cfg.ControlFlowGraph cfg) { java.util.LinkedHashMap<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> defs = com.google.common.collect.Maps.newLinkedHashMap(); for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { for (com.android.jack.ir.ast.JStatement stmt : bb.getStatements()) { com.android.jack.analysis.DefinitionMarker dm = com.android.jack.util.ThreeAddressCodeFormUtils.getDefinitionMarker(stmt); if (dm != null) { com.android.jack.ir.ast.JVariable variable = dm.getDefinedVariable(); com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo info = defs.get(variable); if (info == null) { info = new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo(variable); defs.put(variable, info); } info.defs.add(dm); } for (com.android.jack.ir.ast.JVariableRef ref : com.android.jack.util.OptimizationTools.getUsedVariables(stmt)) { com.android.jack.ir.ast.JVariable variable = ref.getTarget(); com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo info = defs.get(variable); if (info == null) { info = new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo(variable); defs.put(variable, info); } info.refStmts.add(stmt); } } } return defs; }",5540fce3c01246ac589a75b3b0598abec6bce749,collectDefinitions(com.android.jack.cfg.ControlFlowGraph),374779,400,448
151671,jack-tests_tests_com_android_jack_experimental_incremental_DependenciesTest008.java,1.0,"@org.junit.Test public void testDependency001() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.setIsApiTest(); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ((""public class A { \n"" + "" public static class B { public void m() {} } \n"") + "" public static void main(String[] args) {new B().m();} } \n""))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJackFiles().size()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + (""public class A { \n"" + "" public static void main(String[] args) {new B().m();} } \n""))); try { ite.incrementalBuildFromFolder(); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { junit.framework.Assert.assertEquals(0, ite.getJackFiles().size()); } }",1a7f01407d85d17f4d909b40694d0c4b00623763,"@org.junit.Test public void testDependency001() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.setIsApiTest(); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ((""public class A { \n"" + "" public static class B { public void m() {} } \n"") + "" public static void main(String[] args) {new B().m();} } \n""))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJayceSize()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + (""public class A { \n"" + "" public static void main(String[] args) {new B().m();} } \n""))); try { ite.incrementalBuildFromFolder(); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { junit.framework.Assert.assertEquals(0, ite.getJayceSize()); } }",e41ef9f43cf14f6c9bde47df991fdf4260078cd9,testDependency001(),testDependency001(),5,1,"@org.junit.Test public void testDependency001() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.setIsApiTest(); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ((""public class A { \n"" + "" public static class B { public void m() {} } \n"") + "" public static void main(String[] args) {new B().m();} } \n""))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJayceCount()); ite.addJavaFile(""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + (""public class A { \n"" + "" public static void main(String[] args) {new B().m();} } \n""))); try { ite.incrementalBuildFromFolder(); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { junit.framework.Assert.assertEquals(0, ite.getJayceCount()); } }",3e38e43b85a7be308a65069b53c95a79891819a1,testDependency001(),461370,294,294
170040,luni_src_main_java_libcore_io_ClassPathURLStreamHandler.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.zip.ZipEntry findEntryWithDirectoryFallback(java.lang.String entryName) { java.util.zip.ZipEntry entry = jarFile.findEntry(entryName); if ((entry == null) && (!(entryName.endsWith(""/"")))) { entry = jarFile.findEntry((entryName + ""/"")); } return entry; }",cd4c6eb3f5775b03d1688855141a30f009694cdd,,findEntryWithDirectoryFallback(java.lang.String),4,9,"static java.util.zip.ZipEntry findEntryWithDirectoryFallback(java.util.jar.StrictJarFile jarFile, java.lang.String entryName) { java.util.zip.ZipEntry entry = jarFile.findEntry(entryName); if ((entry == null) && (!(entryName.endsWith(""/"")))) { entry = jarFile.findEntry((entryName + ""/"")); } return entry; }",4ca7c39b1ecd8193ab31f4514621d9afeb73c3cf,"findEntryWithDirectoryFallback(java.util.jar.StrictJarFile,java.lang.String)",237032,76,86
96228,build-system_manifest-merger_src_main_java_com_android_manifmerger_XmlLoader.java,7.0,"public static com.android.manifmerger.XmlDocument load(com.android.manifmerger.KeyResolver<java.lang.String> selectors, com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<com.android.manifmerger.ManifestMerger2.SystemProperty> systemPropertyResolver, java.lang.String displayName, java.io.File xmlFile) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(xmlFile)); com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser(); org.w3c.dom.Document domDocument = positionXmlParser.parse(inputStream); return domDocument != null ? new com.android.manifmerger.XmlDocument(positionXmlParser, new com.android.manifmerger.XmlLoader.FileSourceLocation(displayName, xmlFile), selectors, systemPropertyResolver, domDocument.getDocumentElement()) : null; }",4e9159e8dd6eb83c8d1e43f11ec6de8fba81d9cf,"public static com.android.manifmerger.XmlDocument load(com.android.manifmerger.KeyResolver<java.lang.String> selectors, com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<com.android.manifmerger.ManifestTask.SystemProperty> systemPropertyResolver, java.lang.String displayName, java.io.File xmlFile) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(xmlFile)); com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser(); org.w3c.dom.Document domDocument = positionXmlParser.parse(inputStream); return domDocument != null ? new com.android.manifmerger.XmlDocument(positionXmlParser, new com.android.manifmerger.XmlLoader.FileSourceLocation(displayName, xmlFile), selectors, systemPropertyResolver, domDocument.getDocumentElement()) : null; }",a8f9faede067e1ec7be41f6092c023ba596baffb,"load(com.android.manifmerger.KeyResolver,com.android.manifmerger.PlaceholderHandler$KeyBasedValueResolver,java.lang.String,java.io.File)","load(com.android.manifmerger.KeyResolver,com.android.manifmerger.PlaceholderHandler$KeyBasedValueResolver,java.lang.String,java.io.File)",8,7,"public static com.android.manifmerger.XmlDocument load(com.android.manifmerger.KeyResolver<java.lang.String> selectors, com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<com.android.manifmerger.ManifestMerger2.SystemProperty> systemPropertyResolver, java.lang.String displayName, java.io.File xmlFile) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(xmlFile)); com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser(); org.w3c.dom.Document domDocument = positionXmlParser.parse(inputStream); return domDocument != null ? new com.android.manifmerger.XmlDocument(positionXmlParser, new com.android.manifmerger.XmlLoader.FileSourceLocation(displayName, xmlFile), selectors, systemPropertyResolver, domDocument.getDocumentElement()) : null; }",4e9159e8dd6eb83c8d1e43f11ec6de8fba81d9cf,"load(com.android.manifmerger.KeyResolver,com.android.manifmerger.PlaceholderHandler$KeyBasedValueResolver,java.lang.String,java.io.File)",352432,242,242
526563,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,36.0,"private com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl outputZipSectionsInternal(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd, boolean apkSigningBlockPaddingSupported) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { checkNotClosed(); checkV1SigningDoneIfEnabled(); if (!(mV2SigningEnabled)) { return null; } invalidateV2Signature(); com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> result = com.android.apksig.internal.apk.v2.V2SchemeSigner.generateApkSigningBlock(zipEntries, zipCentralDirectory, zipEocd, mV2SignerConfigs, apkSigningBlockPaddingSupported); byte[] apkSigningBlock = result.getFirst(); int padSizeBeforeApkSigningBlock = result.getSecond(); mAddV2SignatureRequest = new com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl(apkSigningBlock, padSizeBeforeApkSigningBlock); return mAddV2SignatureRequest; }",4502117df53b67b3e7ad8d0ca3ca872d1c4fbfe9,"private com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl outputZipSectionsInternal(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd, boolean apkSigningBlockPaddingSupported) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { checkNotClosed(); checkV1SigningDoneIfEnabled(); if (!(mV2SigningEnabled)) { return null; } invalidateV2Signature(); java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> v2SignerConfigs = createV2SignerConfigs(apkSigningBlockPaddingSupported); com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> result = com.android.apksig.internal.apk.v2.V2SchemeSigner.generateApkSigningBlock(zipEntries, zipCentralDirectory, zipEocd, v2SignerConfigs, apkSigningBlockPaddingSupported); byte[] apkSigningBlock = result.getFirst(); int padSizeBeforeApkSigningBlock = result.getSecond(); mAddV2SignatureRequest = new com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl(apkSigningBlock, padSizeBeforeApkSigningBlock); return mAddV2SignatureRequest; }",450728f738199bba487cf124bf6d30319e1cfaa8,"outputZipSectionsInternal(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,boolean)","outputZipSectionsInternal(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,boolean)",2,36,"private com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl outputZipSectionsInternal(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd, boolean apkSigningBlockPaddingSupported) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { checkNotClosed(); checkV1SigningDoneIfEnabled(); if (!(mV2SigningEnabled)) { return null; } invalidateV2Signature(); java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> v2SignerConfigs = getV2SignerConfigs(); com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> result = com.android.apksig.internal.apk.v2.V2SchemeSigner.generateApkSigningBlock(zipEntries, zipCentralDirectory, zipEocd, v2SignerConfigs, apkSigningBlockPaddingSupported); byte[] apkSigningBlock = result.getFirst(); int padSizeBeforeApkSigningBlock = result.getSecond(); mAddV2SignatureRequest = new com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl(apkSigningBlock, padSizeBeforeApkSigningBlock); return mAddV2SignatureRequest; }",02399ced1595731d335032371dbee3677b4c3013,"outputZipSectionsInternal(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,boolean)",93161,315,309
367154,src_com_android_bluetooth_avrcp_AddressedMediaPlayer.java,6.0,"void getFolderItemsNowPlaying(byte[] bdaddr, com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd reqObj, com.android.bluetooth.avrcp.MediaController mediaController) { java.util.List<android.media.session.MediaSession.QueueItem> tempItems; java.util.List<android.media.session.MediaSession.QueueItem> mNowPlayingItems = mNowPlayingListManager.getNowPlayingList(); if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""getFolderItemsNowPlaying""); if (mNowPlayingItems != null) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.i(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""sending cached now playing list""); getFolderItemsFilterAttr(bdaddr, reqObj, mNowPlayingItems, AvrcpConstants.BTRC_SCOPE_FILE_SYSTEM, reqObj.mStartItem, reqObj.mEndItem); } else if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""mediaController = null, sending internal error response""); mMediaInterface.folderItemsRsp(bdaddr, AvrcpConstants.RSP_INTERNAL_ERR, null); } else { mNowPlayingItems = mediaController.getQueue(); if (mNowPlayingItems == null) { android.util.Log.w(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ((""Received Now playing list is null from: "" + (mediaController.getPackageName())) + "", sending internal error response"")); mMediaInterface.folderItemsRsp(bdaddr, AvrcpConstants.RSP_INTERNAL_ERR, null); } else { mNowPlayingListManager.setNowPlayingList(mNowPlayingItems); getFolderItemsFilterAttr(bdaddr, reqObj, mNowPlayingItems, AvrcpConstants.BTRC_SCOPE_NOW_PLAYING, reqObj.mStartItem, reqObj.mEndItem); } } }",26079023421fc590b4f165fcd208417b827a690c,"void getFolderItemsNowPlaying(byte[] bdaddr, com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd reqObj, com.android.bluetooth.avrcp.MediaController mediaController) { java.util.List<android.media.session.MediaSession.QueueItem> items = mNowPlayingList; if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""getFolderItemsNowPlaying""); if (items == null) { if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""mediaController = null, sending no available players response""); mMediaInterface.folderItemsRsp(bdaddr, AvrcpConstants.RSP_NO_AVBL_PLAY, null); return; } items = mediaController.getQueue(); if (items == null) { android.util.Log.i(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ((""null queue from "" + (mediaController.getPackageName())) + "", constructing current-item list"")); android.media.MediaMetadata metadata = mediaController.getMetadata(); android.media.session.MediaSession.QueueItem current = getCurrentQueueItem(mediaController); items = new java.util.ArrayList<android.media.session.MediaSession.QueueItem>(); items.add(current); } } getFolderItemsFilterAttr(bdaddr, reqObj, items, AvrcpConstants.BTRC_SCOPE_NOW_PLAYING, reqObj.mStartItem, reqObj.mEndItem); }",7f74f98f38112674eeb8395104a23b2881b6000e,"getFolderItemsNowPlaying(byte[],com.android.bluetooth.avrcp.AvrcpCmd$FolderItemsCmd,com.android.bluetooth.avrcp.MediaController)","getFolderItemsNowPlaying(byte[],com.android.bluetooth.avrcp.AvrcpCmd$FolderItemsCmd,com.android.bluetooth.avrcp.MediaController)",10,7,"void getFolderItemsNowPlaying(byte[] bdaddr, com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd reqObj, com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""getFolderItemsNowPlaying""); if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ""mediaController = null, sending no available players response""); mMediaInterface.folderItemsRsp(bdaddr, AvrcpConstants.RSP_NO_AVBL_PLAY, null); return; } java.util.List<android.media.session.MediaSession.QueueItem> items = getNowPlayingList(mediaController); getFolderItemsFilterAttr(bdaddr, reqObj, items, AvrcpConstants.BTRC_SCOPE_NOW_PLAYING, reqObj.mStartItem, reqObj.mEndItem, mediaController); }",843ba3ca645aa5457b9c7156c81922221e85bb1b,"getFolderItemsNowPlaying(byte[],com.android.bluetooth.avrcp.AvrcpCmd$FolderItemsCmd,com.android.bluetooth.avrcp.MediaController)",157241,372,249
528464,src_com_android_server_telecom_bluetooth_BluetoothRouteManager.java,35.0,"@java.lang.Override public void enter() { android.bluetooth.BluetoothDevice erroneouslyConnectedDevice = getBluetoothAudioConnectedDevice(); if (erroneouslyConnectedDevice != null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, (""Entering AudioOff state but device %s appears to be connected. "" + ""Disconnecting.""), erroneouslyConnectedDevice); disconnectAudio(); } cleanupStatesForDisconnectedDevices(); }",39b817b7214147fe3aa88f6917d52110d0a0054e,"@java.lang.Override public void enter() { android.bluetooth.BluetoothDevice erroneouslyConnectedDevice = getBluetoothAudioConnectedDevice(); if (erroneouslyConnectedDevice != null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, (""Entering AudioOff state but device %s appears to be connected. "" + ""Disconnecting.""), erroneouslyConnectedDevice); disconnectAudio(); } cleanupStatesForDisconnectedDevices(); mListener.onBluetoothAudioDisconnected(); }",31f95fef9eba71294aabd98ed95a5d5b8a0405ce,enter(),enter(),3,35,"@java.lang.Override public void enter() { android.bluetooth.BluetoothDevice erroneouslyConnectedDevice = getBluetoothAudioConnectedDevice(); if (erroneouslyConnectedDevice != null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, (""Entering AudioOff state but device %s appears to be connected. "" + ""Disconnecting.""), erroneouslyConnectedDevice); disconnectAudio(); } cleanupStatesForDisconnectedDevices(); if ((mListener) != null) { mListener.onBluetoothAudioDisconnected(); } }",8d15fe0379b4a7fe43d1b5e65932ddd9eeabb68b,enter(),404853,115,126
586986,tests_net_java_android_net_MacAddressTest.java,7.0,"@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format(""expected type of %s to be %s, but got %s"", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).addressType()); } } }",3560ec57139a39a8d3bcc20dfc283ba5f3c75d3b,"@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221).of(MacAddress.TYPE_UNSPECIFIED, 0, 0, 0, 0, 0, 0) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format(""expected type of %s to be %s, but got %s"", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).getAddressType()); } } }",9eebc51f3848756efff7301e40b3f303dd8e4c5f,testMacAddrTypes(),testMacAddrTypes(),4,7,"@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format(""expected type of %s to be %s, but got %s"", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).getAddressType()); } } }",63fb2aeb62e1ed5730aeb9578d4c08447dcba17a,testMacAddrTypes(),122819,470,455
576543,luni_src_test_java_libcore_java_lang_StringTest.java,35.0,"public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = ""\ufffd\ufffd!""; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName(""UTF-8"").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, ""UTF-8"")); }",59f1be4658e871f45c7a9402cfde266088a0d32b,"public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = ""\ufffd\ufffd\ufffd!""; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName(""UTF-8"").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, ""UTF-8"")); }",f3154d9e829f3bf3179dea023986e5cc92f6d9c9,test_23831(),test_23831(),14,36,"public void test_69599767() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = ""\ufffd\ufffd\ufffd!""; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName(""UTF-8"").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, ""UTF-8"")); }",cb0abbf37765ba753b7b305806cab1bd3e5844d5,test_69599767(),206138,153,154
354595,core_java_android_net_ConnectivityManager.java,114.0,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException(""null NetworkCallback""); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException(""null NetworkCapabilities""); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }",d866d3a892da7f31c1d43824ad9ebc8acad77b17,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { com.android.internal.util.Preconditions.checkArgument((callback != null), ""null NetworkCallback""); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), ""null NetworkCapabilities""); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if ((callback.networkRequest) != null) { android.util.Log.e(android.net.ConnectivityManager.TAG, ""NetworkCallback was already registered""); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }",ffeb7f92d9279f900356fa2674fa0cafd384cfb4,"sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)","sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)",11,115,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { com.android.internal.util.Preconditions.checkArgument((callback != null), ""null NetworkCallback""); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), ""null NetworkCapabilities""); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (callback.isRegistered()) { android.util.Log.e(android.net.ConnectivityManager.TAG, ""NetworkCallback was already registered""); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }",c0611a614714042f87d3b5ce031e97fa6ac355e0,"sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)",476363,317,313
307603,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerAppConfigurationTests.java,3.0,"public void testConfigurationUpdatesWhenRotatingWhileDocked() throws java.lang.Exception { setDeviceRotation(0); launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes orientationASizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); setDeviceRotation(1); final android.server.cts.ReportedSizes orientationBSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesRotate(orientationASizes, orientationBSizes); }",c8f7361c7fdb1af9db9f5b6efc9ec328fca7bba5,"public void testConfigurationUpdatesWhenRotatingWhileDocked() throws java.lang.Exception { if (!(supportsMultiWindow())) { return; } setDeviceRotation(0); launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes orientationASizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); setDeviceRotation(1); final android.server.cts.ReportedSizes orientationBSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesRotate(orientationASizes, orientationBSizes); }",01555274a8d486385bbf115457e8fce81a5453f4,testConfigurationUpdatesWhenRotatingWhileDocked(),testConfigurationUpdatesWhenRotatingWhileDocked(),8,3,"public void testConfigurationUpdatesWhenRotatingWhileDocked() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no multi-window support""); return; } setDeviceRotation(0); launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes orientationASizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); setDeviceRotation(1); final android.server.cts.ReportedSizes orientationBSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesRotate(orientationASizes, orientationBSizes); }",77010c34f8d4a83e5037ae729d200ff586e262d2,testConfigurationUpdatesWhenRotatingWhileDocked(),404040,204,239
207011,luni_src_test_java_libcore_java_lang_SystemTest.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSystem_setSecurityManager_notNull_throwsException() { try { java.lang.System.setSecurityManager(new java.lang.SecurityManager()); fail((""Expected "" + (java.lang.SecurityException.class.getName()))); } catch (java.lang.SecurityException e) { } }",b34f0011602f4eb1c767f0432a9ab1d36795f8e5,,testSystem_setSecurityManager_notNull_throwsException(),6,10,"public void testSystem_setSecurityManager_notNull_throwsException() { try { java.lang.System.setSecurityManager(new java.lang.SecurityManager()); fail((""Expected "" + (java.lang.SecurityException.class.getName()))); } catch (java.lang.SecurityException expected) { } }",128133d633930a3e5f9c9aa6be39a60bdc8294ff,testSystem_setSecurityManager_notNull_throwsException(),207592,64,64
38771,tests_083-jit-regressions_src_ZeroTests.java,,,,"public void longDivTest() throws java.lang.Exception { for (int i = 0; i < 500; i++) { if (!(div1())) { java.lang.System.out.println(""longDivTest failed.""); return; } } for (int i = 0; i < 500; i++) { if (!(div2())) { java.lang.System.out.println(""longDivTest failed.""); return; } } for (int i = 0; i < 500; i++) { if (!(div3())) { java.lang.System.out.println(""longDivTest failed.""); return; } } java.lang.System.out.println(""longDivTest passes""); }",5b6e13d8835cc5e561fd4cbe05c3212f8974ee4d,,longDivTest(),3,3,"public void longDivTest() throws java.lang.Exception { ZeroTests.longTest(""longDivTest"", true); }",d28fc61252f719155e63d545d61c179746d98e47,longDivTest(),228368,146,28
354972,src_java_com_android_internal_telephony_uicc_SIMRecords.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void setDisplayName() { com.android.internal.telephony.uicc.SubscriptionManager subManager = com.android.internal.telephony.uicc.SubscriptionManager.from(mContext); int[] subId = subManager.getSubId(mParentApp.getPhoneId()); if ((subId == null) || ((subId.length) <= 0)) { log((""subId not valid for Phone "" + (mParentApp.getPhoneId()))); return; } android.telephony.SubscriptionInfo subInfo = subManager.getActiveSubscriptionInfo(subId[0]); if ((subInfo != null) && ((subInfo.getNameSource()) != (SubscriptionManager.NAME_SOURCE_USER_INPUT))) { java.lang.CharSequence oldSubName = subInfo.getDisplayName(); java.lang.String newCarrierName = mTelephonyManager.getSimOperatorName(subId[0]); if ((!(android.text.TextUtils.isEmpty(newCarrierName))) && (!(newCarrierName.equals(oldSubName)))) { log((((""sim name["" + (mParentApp.getPhoneId())) + ""] = "") + newCarrierName)); com.android.internal.telephony.SubscriptionController.getInstance().setDisplayName(newCarrierName, subId[0]); } } else { log(((((""SUB["" + (mParentApp.getPhoneId())) + ""] "") + (subId[0])) + "" SubInfo not created yet"")); } }",32ed98c146a47f431b50d429a476da4c70055aa9,,setDisplayName(),2,42,"private void setDisplayName() { android.telephony.SubscriptionManager subManager = android.telephony.SubscriptionManager.from(mContext); int[] subId = subManager.getSubId(mParentApp.getPhoneId()); if ((subId == null) || ((subId.length) <= 0)) { log((""subId not valid for Phone "" + (mParentApp.getPhoneId()))); return; } android.telephony.SubscriptionInfo subInfo = subManager.getActiveSubscriptionInfo(subId[0]); if ((subInfo != null) && ((subInfo.getNameSource()) != (android.telephony.SubscriptionManager.NAME_SOURCE_USER_INPUT))) { java.lang.CharSequence oldSubName = subInfo.getDisplayName(); java.lang.String newCarrierName = mTelephonyManager.getSimOperatorName(subId[0]); if ((!(android.text.TextUtils.isEmpty(newCarrierName))) && (!(newCarrierName.equals(oldSubName)))) { log((((""sim name["" + (mParentApp.getPhoneId())) + ""] = "") + newCarrierName)); com.android.internal.telephony.SubscriptionController.getInstance().setDisplayName(newCarrierName, subId[0]); } } else { log(((((""SUB["" + (mParentApp.getPhoneId())) + ""] "") + (subId[0])) + "" SubInfo not created yet"")); } }",4f50723de84a077352b60be092b823e7265b2df8,setDisplayName(),296765,302,292
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,51.0,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",417606c934c6f74a4d2fc5d56bad4850f2fb1c60,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",e8798faf6061d9fe6c6fc033c7f904a12ad987e0,testAesCbcHmacSha256Udp6(),testAesCbcHmacSha256Udp6(),15,77,"public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",c09bbf5e07c6e4debf1b67b1eaeecc5e3b602d15,testAesCbcHmacSha256Udp6(),381528,189,181
341048,src_com_android_gallery3d_glrenderer_GLPaint.java,0.0,public void setLineWidth(float width) { junit.framework.Assert.assertTrue((width >= 0)); mLineWidth = width; },d59956dac50325bfbe990ec82a20cce1bfb536ec,public void setLineWidth(float width) { if (width < 0) { throw new java.lang.AssertionError(); } mLineWidth = width; },df54d3fed3b8aab7dd745f076de5abe8d76132e6,setLineWidth(float),setLineWidth(float),2,0,public void setLineWidth(float width) { com.android.gallery3d.common.Utils.assertTrue((width >= 0)); mLineWidth = width; },e6901e53793d6018e6e3e909f5241aca877feb7b,setLineWidth(float),316915,32,35
93693,sdk-common_src_main_java_com_android_ide_common_repository_GradleCoordinate.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.String toString() { return java.lang.Integer.toString(myNumber); },61553029a50a6a75eca6d45671a66bcbc8be983d,,toString(),2,6,@java.lang.Override public java.lang.String toString() { return java.lang.Integer.toString(mNumber); },d0e4ddcbeb2c3ed7f607f427efe84e10b47a43b5,toString(),406787,29,29
156655,src_vogar_commands_VmCommandBuilder.java,11.0,"public vogar.commands.Command build() { vogar.commands.Command.Builder builder = new vogar.commands.Command.Builder(log); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : env.entrySet()) { builder.env(entry.getKey(), entry.getValue()); } builder.args(vmCommand); if (classpathViaProperty) { builder.args((""-Djava.class.path="" + (classpath))); } else { builder.args(""-classpath"", classpath.toString()); } if (!(bootClasspath.isEmpty())) { builder.args((""-Xbootclasspath/a:"" + (bootClasspath))); } if ((userDir) != null) { builder.args((""-Duser.dir="" + (userDir))); } if ((temp) != null) { builder.args((""-Djava.io.tmpdir="" + (temp))); } if ((debugPort) != null) { builder.args(((""-Xrunjdwp:transport=dt_socket,address="" + (debugPort)) + "",server=y,suspend=y"")); } builder.args(vmArgs); builder.args(mainClass); builder.args(args); builder.tee(output); builder.maxLength(maxLength); return builder.build(); }",31edc36d2340f60390d9829789d866281f8487c2,"public vogar.commands.Command build() { vogar.commands.Command.Builder builder = new vogar.commands.Command.Builder(log); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : env.entrySet()) { builder.env(entry.getKey(), entry.getValue()); } builder.args(vmCommand); if (classpathViaProperty) { builder.args((""-Djava.class.path="" + (classpath))); } else { builder.args(""-classpath"", classpath.toString()); } if (!(bootClasspath.isEmpty())) { builder.args((""-Xbootclasspath/a:"" + (bootClasspath))); } if ((userDir) != null) { builder.args((""-Duser.dir="" + (userDir))); } if ((debugPort) != null) { builder.args(((""-Xrunjdwp:transport=dt_socket,address="" + (debugPort)) + "",server=y,suspend=y"")); } builder.args(vmArgs); builder.args(mainClass); builder.args(args); builder.tee(output); builder.maxLength(maxLength); return builder.build(); }",f6f2ca24a28e214364421ded6d1b1a4f73b31b1f,build(),build(),3,12,"public vogar.commands.Command build() { vogar.commands.Command.Builder builder = new vogar.commands.Command.Builder(log); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : env.entrySet()) { builder.env(entry.getKey(), entry.getValue()); } builder.args(vmCommand); if (classpathViaProperty) { builder.args((""-Djava.class.path="" + (classpath))); } else { builder.args(""-classpath"", classpath.toString()); } if (!(bootClasspath.isEmpty())) { builder.args((""-Xbootclasspath/a:"" + (bootClasspath))); } if ((userDir) != null) { builder.args((""-Duser.dir="" + (userDir))); } if ((temp) != null) { builder.args((""-Djava.io.tmpdir="" + (temp))); } if ((debugPort) != null) { builder.args(((""-Xrunjdwp:transport=dt_socket,address="" + (debugPort)) + "",server=y,suspend=y"")); } builder.args(vmArgs); builder.args(mainClass); builder.args(args); builder.tee(output); builder.maxLength(maxLength); return builder.build(); }",31edc36d2340f60390d9829789d866281f8487c2,build(),271432,257,283
355269,samples_ToyVpn_src_com_example_android_toyvpn_ToyVpnService.java,7.0,"private void handshake(java.nio.channels.DatagramChannel tunnel) throws java.lang.Exception { java.nio.ByteBuffer packet = java.nio.ByteBuffer.allocate(1024); packet.put(((byte) (0))).put(mSharedSecret).flip(); for (int i = 0; i < 3; ++i) { packet.position(0); tunnel.write(packet); } packet.clear(); for (int i = 0; i < 50; ++i) { java.lang.Thread.sleep(100); int length = tunnel.read(packet); if ((length > 0) && ((packet.get(0)) == 0)) { configure(new java.lang.String(packet.array(), 1, (length - 1)).trim()); return; } } throw new java.lang.IllegalStateException(""Timed out""); }",09ac35cf200c08d99856d22975340a3cae4c8e5f,@java.lang.Override public synchronized void onDisconnect(int connectionId) { mThreads.remove(connectionId); },1e89f78c0e52ac19f3be52681559cfe3a0aa6b6c,handshake(java.nio.channels.DatagramChannel),onDisconnect(int),7,9,private void setConnectingThread(final java.lang.Thread thread) { final java.lang.Thread oldThread = mConnectingThread.getAndSet(thread); if (oldThread != null) { oldThread.interrupt(); } },8bec55a9d32b342c5186f0fddc9c1d696b6b2488,setConnectingThread(java.lang.Thread),471594,26,47
586118,tests_net_java_com_android_server_ConnectivityServiceTest.java,157.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testBasicDnsConfigurationPushed() throws java.lang.Exception { mCellNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_CELLULAR); mCellNetworkAgent.connect(false); waitForIdle(); final android.net.LinkProperties cellLp = new android.net.LinkProperties(); cellLp.setInterfaceName(""test_rmnet_data0""); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); com.android.server.ConnectivityServiceTest.assertEmpty(mStringArrayCaptor.getValue()); reset(mNetworkManagementService); cellLp.addDnsServer(java.net.InetAddress.getByName(""2001:db8::1"")); cellLp.addDnsServer(java.net.InetAddress.getByName(""192.0.2.1"")); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); assertEquals(2, mStringArrayCaptor.getValue().length); assertTrue(com.android.internal.util.ArrayUtils.containsAll(mStringArrayCaptor.getValue(), new java.lang.String[]{ ""2001:db8::1"", ""192.0.2.1"" })); reset(mNetworkManagementService); }",3c8beba7b10c4919527e5a7f79c6c31866875e7f,,testBasicDnsConfigurationPushed(),3,111,"@org.junit.Test public void testBasicDnsConfigurationPushed() throws java.lang.Exception { mCellNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_CELLULAR); waitForIdle(); verify(mNetworkManagementService, never()).setDnsConfigurationForNetwork(anyInt(), any(), any()); final android.net.LinkProperties cellLp = new android.net.LinkProperties(); cellLp.setInterfaceName(""test_rmnet_data0""); mCellNetworkAgent.sendLinkProperties(cellLp); mCellNetworkAgent.connect(false); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); com.android.server.ConnectivityServiceTest.assertEmpty(mStringArrayCaptor.getValue()); reset(mNetworkManagementService); cellLp.addDnsServer(java.net.InetAddress.getByName(""2001:db8::1"")); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); assertEquals(1, mStringArrayCaptor.getValue().length); assertTrue(com.android.internal.util.ArrayUtils.contains(mStringArrayCaptor.getValue(), ""2001:db8::1"")); reset(mNetworkManagementService); cellLp.addDnsServer(java.net.InetAddress.getByName(""192.0.2.1"")); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); assertEquals(2, mStringArrayCaptor.getValue().length); assertTrue(com.android.internal.util.ArrayUtils.containsAll(mStringArrayCaptor.getValue(), new java.lang.String[]{ ""2001:db8::1"", ""192.0.2.1"" })); reset(mNetworkManagementService); }",2f95a3bba2f485d031f169d4a836fd4c7bef942c,testBasicDnsConfigurationPushed(),72453,308,419
69531,luni_src_test_java_libcore_util_ZoneInfoDBTest.java,5.0,"public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.DEFAULT_FILE_1, ""r""); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.DEFAULT_FILE_1, libcore.util.ZoneInfoDBTest.DEFAULT_FILE_2); assertEquals(""9999z"", data.getVersion()); assertEquals(java.util.TimeZone.getAvailableIDs().length, data.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }",56743a0ac6933f256509d79700f43cc38471462a,"public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.DEFAULT_FILE_2, ""r""); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.DEFAULT_FILE_1, libcore.util.ZoneInfoDBTest.DEFAULT_FILE_2); assertEquals(""9999z"", data.getVersion()); assertEquals(java.util.TimeZone.getAvailableIDs().length, data.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }",ac0569f199e275c73cbcf7b0b7c59963118ad957,testGoodOverrideFile(),testGoodOverrideFile(),2,5,"public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT, ""r""); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.TZDATA_IN_DATA, libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); assertEquals(""9999z"", data.getVersion()); assertEquals(java.util.TimeZone.getAvailableIDs().length, data.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }",1e848f85f6283fd7fc16f4bf6202f3edd385f67d,testGoodOverrideFile(),24104,252,263
20706,ide_common_src_com_android_ide_common_rendering_StaticRenderSession.java,1.0,@java.lang.Override public com.android.ide.common.rendering.api.ViewInfo getRootView() { return mRootViewInfo; },75864390a62c98ea8e2f15ed8015e9167ac912ce,@java.lang.Override public java.util.List<com.android.ide.common.rendering.api.ViewInfo> getRootView() { return mRootViewInfo; },97a85fae26d4776e40470738e45273d5c0ffd6a3,getRootView(),getRootView(),3,0,@java.lang.Override public java.util.List<com.android.ide.common.rendering.api.ViewInfo> getRootViews() { return mRootViewInfo; },d2a0cc5ad04dcbc07065a56a68ede8225e8ec81a,getRootViews(),406935,41,41
353974,services_core_java_com_android_server_connectivity_Vpn.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.internal.annotations.GuardedBy(""this"") private void setVpnForcedWithExemptionsLocked(boolean enforce, @android.annotation.Nullable java.util.List<java.lang.String> exemptedPackages) { final java.util.Set<android.net.UidRange> removedRanges = new android.util.ArraySet(mBlockedUsers); final java.util.Set<android.net.UidRange> addedRanges; if (enforce) { addedRanges = createUserAndRestrictedProfilesRanges(mUserHandle, null, exemptedPackages); removedRanges.removeAll(addedRanges); addedRanges.removeAll(mBlockedUsers); } else { addedRanges = java.util.Collections.<android.net.UidRange>emptySet(); } setAllowOnlyVpnForUids(false, removedRanges); setAllowOnlyVpnForUids(true, addedRanges); }",8a0259ddfd5513c98cbfcf37bdfecd817fc914dc,,"setVpnForcedWithExemptionsLocked(boolean,java.util.List)",3,6,"@com.android.internal.annotations.GuardedBy(""this"") private void setVpnForcedWithExemptionsLocked(boolean enforce, @android.annotation.Nullable java.util.List<java.lang.String> exemptedPackages) { final java.util.Set<android.net.UidRange> removedRanges = new android.util.ArraySet(mBlockedUsers); java.util.Set<android.net.UidRange> addedRanges = java.util.Collections.emptySet(); if (enforce) { addedRanges = createUserAndRestrictedProfilesRanges(mUserHandle, null, exemptedPackages); removedRanges.removeAll(addedRanges); addedRanges.removeAll(mBlockedUsers); } setAllowOnlyVpnForUids(false, removedRanges); setAllowOnlyVpnForUids(true, addedRanges); }",d5860aa941815fae067737326e13fc5a3de35aa9,"setVpnForcedWithExemptionsLocked(boolean,java.util.List)",127041,196,181
146715,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_SplitOptions.java,6.0,@com.android.annotations.NonNull public java.util.Set<java.lang.String> getApplicableFilters(@com.android.annotations.NonNull java.util.Set<java.lang.String> allFilters) { if (!(enable)) { return java.util.Collections.singleton(null); } java.util.Set<java.lang.String> results = (reset) ? com.google.common.collect.Sets.<java.lang.String>newHashSetWithExpectedSize(((allFilters.size()) + 1)) : com.google.common.collect.Sets.newHashSet(allFilters); if ((exclude) != null) { results.removeAll(exclude); } if ((include) != null) { for (java.lang.String inc : include) { if (allFilters.contains(inc)) { results.add(inc); } } } return results; },34ddc5d98af9a38d20c87da4c2a46c9ce14ceadc,"@com.android.annotations.NonNull public java.util.Set<java.lang.String> getApplicableFilters() { if (!(enable)) { return java.util.Collections.singleton(null); } java.util.Set<java.lang.String> results = com.google.common.collect.Sets.newHashSetWithExpectedSize(values.size()); for (java.lang.String value : values) { if (allowedValues.contains(value)) { java.lang.System.out.println((""FOUND: "" + value)); results.add(value); } else { java.lang.System.out.println((""NOT: "" + value)); } } return results; }",b3fc29af6b47eaddb623b7d5f1639efa1864353f,getApplicableFilters(java.util.Set),getApplicableFilters(),2,5,@com.android.annotations.NonNull public java.util.Set<java.lang.String> getApplicableFilters() { if (!(enable)) { return java.util.Collections.singleton(null); } java.util.Set<java.lang.String> results = com.google.common.collect.Sets.newHashSetWithExpectedSize(values.size()); for (java.lang.String value : values) { if (allowedValues.contains(value)) { results.add(value); } } return results; },8826a9c2bae7d9092a94b66b888bec5933dfc197,getApplicableFilters(),355161,148,111
179575,tests_tests_net_src_android_net_wifi_cts_WifiManagerTest.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isLocationEnabled() { return (Settings.Secure.getInt(getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)) != (Settings.Secure.LOCATION_MODE_OFF); }",ed3df6df292f58a4655d9a81d8c8df1cc18578bb,,isLocationEnabled(),5,19,"private boolean isLocationEnabled() { return (Settings.Secure.getInt(getContext().getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)) != (Settings.Secure.LOCATION_MODE_OFF); }",1312616dcf35b3304cb698eeeec7f699772970ca,isLocationEnabled(),158777,49,51
142363,jack_src_com_android_jack_cfg_CfgBuilder.java,5.0,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock catchBlock) { super.visit(catchBlock); assert currentStmts.isEmpty(); java.util.List<com.android.jack.ir.ast.JStatement> catchStmts = catchBlock.getStatements(); assert (catchStmts.size()) >= 1; accept(catchStmts.get(0)); assert (cfg) != null; com.android.jack.cfg.CatchBasicBlock catchBasicBlock = new com.android.jack.cfg.CatchBasicBlock(cfg, currentStmts, catchBlock.getCatchTypes(), catchBlock.getCatchVar()); setBlockOfStatement(catchBasicBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(getConcreteStatement(catchBlock)); if (nextStatement != null) { forwardBranchResolver.addForwardBranch(ForwardBranchKind.BRANCH, catchBasicBlock, nextStatement); } accept(catchStmts.subList(1, catchStmts.size())); return false; }",ab50c7eade9739b98c14022828e3305bf9236d26,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock catchBlock) { super.visit(catchBlock); assert currentStmts.isEmpty(); java.util.List<com.android.jack.ir.ast.JStatement> catchStmts = catchBlock.getStatements(); assert (catchStmts.size()) >= 1; accept(catchStmts.get(0)); assert (cfg) != null; com.android.jack.cfg.CatchBasicBlock catchBasicBlock = new com.android.jack.cfg.CatchBasicBlock(cfg, currentStmts, catchBlock.getCatchTypes(), catchBlock.getCatchVar()); setBlockOfStatement(catchBasicBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(getConcreteStatement(catchBlock)); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(catchBasicBlock, nextStatement); } accept(catchStmts.subList(1, catchStmts.size())); return false; }",322e5ead65633a2b3c05c77dd3c313fe5a13d2cd,visit(com.android.jack.ir.ast.JCatchBlock),visit(com.android.jack.ir.ast.JCatchBlock),6,9,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock catchBlock) { super.visit(catchBlock); assert currentStmts.isEmpty(); java.util.List<com.android.jack.ir.ast.JStatement> catchStmts = catchBlock.getStatements(); assert (catchStmts.size()) >= 1; accept(catchStmts.get(0)); com.android.jack.cfg.CatchBasicBlock catchBasicBlock = new com.android.jack.cfg.CatchBasicBlock(((basicBlockId)++), currentStmts, catchBlock.getCatchTypes(), catchBlock.getCatchVar()); setBlockOfStatement(catchBasicBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(getConcreteStatement(catchBlock)); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(catchBasicBlock, nextStatement); } accept(catchStmts.subList(1, catchStmts.size())); return false; }",3d1eccf119f265dacd3dd389247b26927cfd2585,visit(com.android.jack.ir.ast.JCatchBlock),321126,236,233
328818,services_core_java_com_android_server_connectivity_tethering_UpstreamNetworkMonitor.java,6.0,"private void handleNetCap(android.net.Network network, android.net.NetworkCapabilities newNc) { if (!(mNetworkMap.containsKey(network))) { return; } if (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.VDBG) { android.util.Log.d(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.TAG, java.lang.String.format(""EVENT_ON_CAPABILITIES for %s: %s"", network, newNc)); } final android.net.NetworkState prev = mNetworkMap.get(network); mNetworkMap.put(network, new android.net.NetworkState(null, prev.linkProperties, newNc, network, null, null)); notifyTarget(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES, network); }",a6c072450c7a0c38ffe2ee345ef66b0fbf14c826,"private void handleNetCap(android.net.Network network, android.net.NetworkCapabilities newNc) { android.net.NetworkState newState = null; final android.net.NetworkState prev = mNetworkMap.get(network); if (prev == null) { newState = new android.net.NetworkState(null, null, newNc, network, null, null); } else if (!(newNc.equals(prev.networkCapabilities))) { newState = new android.net.NetworkState(null, prev.linkProperties, newNc, network, null, null); } else { return; } if (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.VDBG) { android.util.Log.d(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.TAG, java.lang.String.format(""EVENT_ON_CAPABILITIES for %s: %s"", network, newNc)); } mNetworkMap.put(network, newState); notifyTarget(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES, network); }",92293056f7adb4d8e42284ce06a5f7373d52423d,"handleNetCap(android.net.Network,android.net.NetworkCapabilities)","handleNetCap(android.net.Network,android.net.NetworkCapabilities)",3,5,"private void handleNetCap(android.net.Network network, android.net.NetworkCapabilities newNc) { final android.net.NetworkState prev = mNetworkMap.get(network); if ((prev == null) || (newNc.equals(prev.networkCapabilities))) { return; } if (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.VDBG) { android.util.Log.d(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.TAG, java.lang.String.format(""EVENT_ON_CAPABILITIES for %s: %s"", network, newNc)); } mNetworkMap.put(network, new android.net.NetworkState(null, prev.linkProperties, newNc, network, null, null)); notifyTarget(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES, network); }",7709d5faa083e3e76efd2214e85b9e645175f3bb,"handleNetCap(android.net.Network,android.net.NetworkCapabilities)",334640,258,211
121951,sdk-common_src_main_java_com_android_ide_common_process_DefaultProcessExecutor.java,,,,"@com.android.annotations.NonNull @java.lang.Override public com.android.ide.common.process.ProcessResult execute(@com.android.annotations.NonNull com.android.ide.common.process.ProcessInfo processInfo, @com.android.annotations.NonNull com.android.ide.common.process.ProcessOutputHandler processOutputHandler) { java.util.List<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); command.add(processInfo.getExecutable()); command.addAll(processInfo.getArgs()); java.lang.String commandString = com.google.common.base.Joiner.on(' ').join(command); mLogger.info((""command: "" + commandString)); try { java.lang.ProcessBuilder processBuilder = new java.lang.ProcessBuilder(command); java.util.Map<java.lang.String, java.lang.Object> envVariableMap = processInfo.getEnvironment(); if (!(envVariableMap.isEmpty())) { java.util.Map<java.lang.String, java.lang.String> env = processBuilder.environment(); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : envVariableMap.entrySet()) { env.put(entry.getKey(), entry.getValue().toString()); } } java.lang.Process process = processBuilder.start(); com.android.ide.common.process.ProcessOutput output = processOutputHandler.createOutput(); int exitCode = com.android.ide.common.process.DefaultProcessExecutor.grabProcessOutput(process, output); processOutputHandler.handleOutput(output); return new com.android.ide.common.process.ProcessResultImpl(commandString, exitCode); } catch (java.io.IOException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } catch (java.lang.InterruptedException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } catch (com.android.ide.common.process.ProcessException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } }",28c5420ccbfb9974b0f19ece2d91ca75561e5429,,"execute(com.android.ide.common.process.ProcessInfo,com.android.ide.common.process.ProcessOutputHandler)",6,0,"@com.android.annotations.NonNull @java.lang.Override public com.android.ide.common.process.ProcessResult execute(@com.android.annotations.NonNull com.android.ide.common.process.ProcessInfo processInfo, @com.android.annotations.NonNull com.android.ide.common.process.ProcessOutputHandler processOutputHandler) { java.util.List<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); command.add(processInfo.getExecutable()); command.addAll(processInfo.getArgs()); java.lang.String commandString = com.google.common.base.Joiner.on(' ').join(command); mLogger.info((""command: "" + commandString)); try { java.lang.ProcessBuilder processBuilder = new java.lang.ProcessBuilder(command); java.util.Map<java.lang.String, java.lang.Object> envVariableMap = processInfo.getEnvironment(); if (!(envVariableMap.isEmpty())) { java.util.Map<java.lang.String, java.lang.String> env = processBuilder.environment(); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : envVariableMap.entrySet()) { env.put(entry.getKey(), entry.getValue().toString()); } } java.lang.Process process = processBuilder.start(); com.android.ide.common.process.ProcessOutput output = processOutputHandler.createOutput(); int exitCode = com.android.ide.common.process.DefaultProcessExecutor.grabProcessOutput(process, output); processOutputHandler.handleOutput(output); return new com.android.ide.common.process.ProcessResultImpl(commandString, exitCode); } catch (java.io.IOException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } catch (com.android.ide.common.process.ProcessException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } }",fce3c990e151504ecf7dd55a92a9fc78bf66dd91,"execute(com.android.ide.common.process.ProcessInfo,com.android.ide.common.process.ProcessOutputHandler)",265632,481,491
248351,ojluni_src_main_java_java_text_DateFormatSymbols.java,0.0,"public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if ((obj == null) || ((getClass()) != (obj.getClass()))) return false; java.text.DateFormatSymbols that = ((java.text.DateFormatSymbols) (obj)); return (((((((((((((((java.util.Arrays.equals(eras, that.eras)) && (java.util.Arrays.equals(months, that.months))) && (java.util.Arrays.equals(shortMonths, that.shortMonths))) && (java.util.Arrays.equals(tinyMonths, that.tinyMonths))) && (java.util.Arrays.equals(weekdays, that.weekdays))) && (java.util.Arrays.equals(shortWeekdays, that.shortWeekdays))) && (java.util.Arrays.equals(tinyWeekdays, that.tinyWeekdays))) && (java.util.Arrays.equals(standAloneMonths, that.standAloneMonths))) && (java.util.Arrays.equals(shortStandAloneMonths, that.shortStandAloneMonths))) && (java.util.Arrays.equals(tinyStandAloneMonths, that.tinyStandAloneMonths))) && (java.util.Arrays.equals(standAloneWeekdays, that.standAloneWeekdays))) && (java.util.Arrays.equals(shortStandAloneWeekdays, that.shortStandAloneWeekdays))) && (java.util.Arrays.equals(tinyStandAloneWeekdays, that.tinyStandAloneWeekdays))) && (java.util.Arrays.equals(ampms, that.ampms))) && (java.util.Arrays.deepEquals(getZoneStringsWrapper(), that.getZoneStringsWrapper()))) && ((((localPatternChars) != null) && (localPatternChars.equals(that.localPatternChars))) || (((localPatternChars) == null) && ((that.localPatternChars) == null))); }",4ddf8fa02d6aa5256f4e47ec111bee3e7a7378f8,"public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if ((obj == null) || ((getClass()) != (obj.getClass()))) return false; java.text.DateFormatSymbols that = ((java.text.DateFormatSymbols) (obj)); if (!(((((((((((((((java.util.Arrays.equals(eras, that.eras)) && (java.util.Arrays.equals(months, that.months))) && (java.util.Arrays.equals(shortMonths, that.shortMonths))) && (java.util.Arrays.equals(tinyMonths, that.tinyMonths))) && (java.util.Arrays.equals(weekdays, that.weekdays))) && (java.util.Arrays.equals(shortWeekdays, that.shortWeekdays))) && (java.util.Arrays.equals(tinyWeekdays, that.tinyWeekdays))) && (java.util.Arrays.equals(standAloneMonths, that.standAloneMonths))) && (java.util.Arrays.equals(shortStandAloneMonths, that.shortStandAloneMonths))) && (java.util.Arrays.equals(tinyStandAloneMonths, that.tinyStandAloneMonths))) && (java.util.Arrays.equals(standAloneWeekdays, that.standAloneWeekdays))) && (java.util.Arrays.equals(shortStandAloneWeekdays, that.shortStandAloneWeekdays))) && (java.util.Arrays.equals(tinyStandAloneWeekdays, that.tinyStandAloneWeekdays))) && (java.util.Arrays.equals(ampms, that.ampms))) && ((((localPatternChars) != null) && (localPatternChars.equals(that.localPatternChars))) || (((localPatternChars) == null) && ((that.localPatternChars) == null))))) { return false; } if ((((zoneStrings) == null) && ((that.zoneStrings) == null)) && (java.util.Objects.equals(locale, that.locale))) { return true; } return java.util.Arrays.deepEquals(getZoneStringsWrapper(), that.getZoneStringsWrapper()); }",58288975383cb53572b94abcc5fb386efadb9cd7,equals(java.lang.Object),equals(java.lang.Object),6,0,"public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if ((obj == null) || ((getClass()) != (obj.getClass()))) return false; java.text.DateFormatSymbols that = ((java.text.DateFormatSymbols) (obj)); if (!(((((((((((((((java.util.Arrays.equals(eras, that.eras)) && (java.util.Arrays.equals(months, that.months))) && (java.util.Arrays.equals(shortMonths, that.shortMonths))) && (java.util.Arrays.equals(tinyMonths, that.tinyMonths))) && (java.util.Arrays.equals(weekdays, that.weekdays))) && (java.util.Arrays.equals(shortWeekdays, that.shortWeekdays))) && (java.util.Arrays.equals(tinyWeekdays, that.tinyWeekdays))) && (java.util.Arrays.equals(standAloneMonths, that.standAloneMonths))) && (java.util.Arrays.equals(shortStandAloneMonths, that.shortStandAloneMonths))) && (java.util.Arrays.equals(tinyStandAloneMonths, that.tinyStandAloneMonths))) && (java.util.Arrays.equals(standAloneWeekdays, that.standAloneWeekdays))) && (java.util.Arrays.equals(shortStandAloneWeekdays, that.shortStandAloneWeekdays))) && (java.util.Arrays.equals(tinyStandAloneWeekdays, that.tinyStandAloneWeekdays))) && (java.util.Arrays.equals(ampms, that.ampms))) && ((((localPatternChars) != null) && (localPatternChars.equals(that.localPatternChars))) || (((localPatternChars) == null) && ((that.localPatternChars) == null))))) { return false; } if (((!(isZoneStringsSet)) && (!(that.isZoneStringsSet))) && (java.util.Objects.equals(locale, that.locale))) { return true; } return java.util.Arrays.deepEquals(getZoneStringsWrapper(), that.getZoneStringsWrapper()); }",0f57bc8cb5e8c57554c9b4f735e9eb10b3d364da,equals(java.lang.Object),323155,485,486
655279,tzlookup_generator_src_test_java_com_android_libcore_timezone_tzlookup_zonetree_ZoneOffsetPeriodTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testSplitLastPeriod() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZone honoluluTz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone(""Pacific/Honolulu""))); int honoluluRawOffset = -36000000; int honoluluDstOffset = 0; java.lang.String honoluluOldName = null; java.lang.String honoluluNewName = ""Hawaii-Aleutian Standard Time""; java.time.Instant startInstant = java.time.Instant.EPOCH; java.time.Instant endInstant = java.time.Instant.ofEpochSecond(631152000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod honoluluPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, honoluluTz, startInstant, endInstant); java.time.Instant partitionInstant = java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.splitAtTime(honoluluPeriod, timeZoneNames, honoluluTz, partitionInstant); assertEquals(startInstant, shards[0].getStartInstant()); assertEquals(partitionInstant, shards[0].getEndInstant()); assertEquals(honoluluRawOffset, shards[0].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[0].getDstOffsetMillis()); assertEquals(honoluluOldName, shards[0].getName()); assertEquals(partitionInstant, shards[1].getStartInstant()); assertEquals(endInstant, shards[1].getEndInstant()); assertEquals(honoluluRawOffset, shards[1].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[1].getDstOffsetMillis()); assertEquals(honoluluNewName, shards[1].getName()); }",12b60335d15d4ec9c5874dbbcaa34533a769b442,,testSplitLastPeriod(),5,2,"@org.junit.Test public void testSplitAtTime() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZone honoluluTz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone(""Pacific/Honolulu""))); int honoluluRawOffset = -36000000; int honoluluDstOffset = 0; java.lang.String honoluluOldName = null; java.lang.String honoluluNewName = ""Hawaii-Aleutian Standard Time""; java.time.Instant startInstant = java.time.Instant.EPOCH; java.time.Instant endInstant = java.time.Instant.ofEpochSecond(631152000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod honoluluPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, honoluluTz, startInstant, endInstant); java.time.Instant partitionInstant = java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.splitAtTime(honoluluPeriod, timeZoneNames, honoluluTz, partitionInstant); assertEquals(startInstant, shards[0].getStartInstant()); assertEquals(partitionInstant, shards[0].getEndInstant()); assertEquals(honoluluRawOffset, shards[0].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[0].getDstOffsetMillis()); assertEquals(honoluluOldName, shards[0].getName()); assertEquals(partitionInstant, shards[1].getStartInstant()); assertEquals(endInstant, shards[1].getEndInstant()); assertEquals(honoluluRawOffset, shards[1].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[1].getDstOffsetMillis()); assertEquals(honoluluNewName, shards[1].getName()); }",7e42d9fe0d8f011f3f9cd96a8da8514abbe92dd3,testSplitAtTime(),336046,488,488
131593,core_java_com_android_internal_os_RuntimeInit.java,12.0,"public static final void main(java.lang.String[] argv) { if (((argv.length) == 2) && (argv[1].equals(""application""))) { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""RuntimeInit: Starting application""); com.android.internal.os.RuntimeInit.redirectLogStreams(); } else { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""RuntimeInit: Starting tool""); } com.android.internal.os.RuntimeInit.commonInit(); com.android.internal.os.RuntimeInit.nativeFinishInit(); if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""Leaving RuntimeInit!""); }",bf51b310f3f7ede361c62579ca41759a04bce0a6,"public static final void main(java.lang.String[] argv) { com.android.internal.os.RuntimeInit.enableDebuggingFeatures(); if (((argv.length) == 2) && (argv[1].equals(""application""))) { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""RuntimeInit: Starting application""); com.android.internal.os.RuntimeInit.redirectLogStreams(); } else { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""RuntimeInit: Starting tool""); } com.android.internal.os.RuntimeInit.commonInit(); com.android.internal.os.RuntimeInit.nativeFinishInit(); if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""Leaving RuntimeInit!""); }",12a9a21a440aabc61afa75f3577badc5e765a1e6,main(java.lang.String[]),main(java.lang.String[]),5,13,"public static final void main(java.lang.String[] argv) { com.android.internal.os.RuntimeInit.enableDdms(); if (((argv.length) == 2) && (argv[1].equals(""application""))) { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""RuntimeInit: Starting application""); com.android.internal.os.RuntimeInit.redirectLogStreams(); } else { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""RuntimeInit: Starting tool""); } com.android.internal.os.RuntimeInit.commonInit(); com.android.internal.os.RuntimeInit.nativeFinishInit(); if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""Leaving RuntimeInit!""); }",1a352c6f081301e7e19a032d03f6ccae13574bcf,main(java.lang.String[]),71139,226,227
153181,test_422-type-conversion_src_Main.java,25.0,static float $opt$LongToFloat(long a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); },efd7728d65ddebf0a98cb062afe134b4b11bb61f,static float $opt$noinline$LongToFloat(long a) { return ((float) (a)); },9afb1906ecfc346a92746557365b0bd90de89a81,$opt$LongToFloat(long),$opt$noinline$LongToFloat(long),5,4,static float $opt$noinline$LongToFloat(long a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); },0ffdce4fc74660ff6423a12ffc8c3f543594c33e,$opt$noinline$LongToFloat(long),516571,26,40
298179,src_java_com_android_internal_telephony_RIL.java,54.0,private com.android.internal.telephony.RILRequest findAndRemoveRequestFromList(int serial) { com.android.internal.telephony.RILRequest rr = null; synchronized(mRequestList) { rr = mRequestList.get(serial); if (rr != null) { mRequestList.remove(serial); } } return rr; },cedd582005ce6662023f81321f72d84892ad556c,private com.android.internal.telephony.RILRequest findAndRemoveRequestFromList(int serial) { com.android.internal.telephony.RILRequest rr = null; synchronized(mRequestList) { rr = mRequestList.get(serial); if (rr != null) { mRequestList.remove(serial); } } if (rr != null) { } return rr; },888453a3bc8cf7b176c7f8d2f15d0ba7274aaeda,findAndRemoveRequestFromList(int),findAndRemoveRequestFromList(int),14,44,private com.android.internal.telephony.RILRequest findAndRemoveRequestFromList(int serial) { com.android.internal.telephony.RILRequest rr = null; synchronized(mRequestList) { rr = mRequestList.get(serial); if (rr != null) { mRequestList.remove(serial); } } return rr; },cedd582005ce6662023f81321f72d84892ad556c,findAndRemoveRequestFromList(int),44414,87,79
188706,jack-tests_tests_com_android_jack_java8_EcjInterfaceMethodsTest.java,3.0,"@java.lang.Override public void runConformTest(java.lang.String[] srcDescription) { try { java.io.File sourceFolder = buildSourceFolder(srcDescription); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JillBasedToolchain.class); java.io.File dexOutDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); com.android.jack.test.toolchain.JackBasedToolchain jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, excludeList); jackToolchain.addToClasspath(jackToolchain.getDefaultBootClasspath()); jackToolchain.setSourceLevel(SourceLevel.JAVA_8); jackToolchain.srcToExe(dexOutDir, false, sourceFolder); } catch (java.lang.Exception e) { e.printStackTrace(); junit.framework.Assert.fail(); } }",3f3dfcab90d57034c4c8402b3e8a84ebe19e2f4c,"@java.lang.Override public void runConformTest(java.lang.String[] srcDescription) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, excludeList); try { java.io.File sourceFolder = buildSourceFolder(srcDescription); java.io.File dexOutDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); jackToolchain.addToClasspath(jackToolchain.getDefaultBootClasspath()); jackToolchain.setSourceLevel(SourceLevel.JAVA_8); jackToolchain.srcToExe(dexOutDir, false, sourceFolder); } catch (java.lang.Exception e) { e.printStackTrace(); junit.framework.Assert.fail(); } }",66a9ec447b0461144f479e02d2fbd3a9451ca432,runConformTest(java.lang.String[]),runConformTest(java.lang.String[]),2,3,"@java.lang.Override public void runConformTest(java.lang.String[] srcDescription) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jackToolchain = null; try { jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, excludeList); } catch (org.junit.internal.AssumptionViolatedException e) { return; } try { java.io.File sourceFolder = buildSourceFolder(srcDescription); java.io.File dexOutDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); jackToolchain.addToClasspath(jackToolchain.getDefaultBootClasspath()); jackToolchain.setSourceLevel(SourceLevel.JAVA_8); jackToolchain.srcToExe(dexOutDir, false, sourceFolder); } catch (java.lang.Exception e) { e.printStackTrace(); junit.framework.Assert.fail(); } }",b94e575188b37352f455accd4e86cc3540bc8f97,runConformTest(java.lang.String[]),144764,280,309
108152,sched_src_com_android_sched_util_file_OutputZipFile.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void close() throws java.io.IOException { if (hasEntries) { super.close(); } else { subStream.close(); } },b95efd622a92d244caec97d256a09909aabf5703,,close(),3,0,@java.lang.Override public void close() throws java.io.IOException { if (hasEntries) { super.close(); } else { out.close(); } },d764b02c59f242a3fb2f3a06786ae863380b45da,close(),183397,37,36
223057,jack_src_com_android_jack_transformations_ast_BoostLockedRegionPriority.java,,,,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSynchronizedBlock jSyncBock) { if (!(jSyncBock.getLockExpr().getType().isSameType(ams))) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(jSyncBock.getParent()); tr.append(new com.android.jack.transformations.request.PrependStatement(jSyncBock.getSynchronizedBlock(), makeBoostCall(jSyncBock.getSourceInfo()))); tr.append(new com.android.jack.transformations.request.AppendStatement(jSyncBock.getSynchronizedBlock(), makeResetCall(jSyncBock.getSourceInfo()))); tr.commit(); java.lang.System.out.println(""Inserted boost / reset Calls.""); }",2c90dc1082f11066b599ee4b04ffe54c248457dd,,endVisit(com.android.jack.ir.ast.JSynchronizedBlock),12,2,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSynchronizedBlock jSyncBock) { if (!(jSyncBock.getLockExpr().getType().isSameType(lockClass))) { return; } tr.append(new com.android.jack.transformations.request.PrependStatement(jSyncBock.getSynchronizedBlock(), makeRequestCall(jSyncBock.getSourceInfo()))); com.android.jack.ir.ast.JTryStatement tryStmt = makeTryStatement(jSyncBock.getSourceInfo(), jSyncBock); tr.append(new com.android.jack.transformations.request.Replace(jSyncBock, tryStmt)); }",7d3377eace25d4ebfc17ae347b2390af9ce8acbf,endVisit(com.android.jack.ir.ast.JSynchronizedBlock),273729,197,157
161552,test_441-checker-inliner_src_Main.java,13.0,public static void main(java.lang.String[] args) { Main.InlineVoid(); if ((Main.InlineInt()) != 4) { throw new java.lang.Error(); } if ((Main.InlineWide()) != 8L) { throw new java.lang.Error(); } if ((Main.InlineParameter(42)) != 42) { throw new java.lang.Error(); } if ((Main.InlineWideParameter(4294967297L)) != 4294967297L) { throw new java.lang.Error(); } if ((Main.InlineReferenceParameter(Main.class)) != (Main.class)) { throw new java.lang.Error(); } if ((Main.InlineAdd()) != 8) { throw new java.lang.Error(); } if (((Main.InlineFieldAccess()) != 43) || ((Main.InlineFieldAccess()) != 44)) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(true)) != 4) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(false)) != 2) { throw new java.lang.Error(); } },44d4516341de9431a2860dff66940283afb02967,public static void main(java.lang.String[] args) { Main.InlineVoid(); if ((Main.InlineInt()) != 4) { throw new java.lang.Error(); } if ((Main.InlineWide()) != 8L) { throw new java.lang.Error(); } if ((Main.InlineParameter(42)) != 42) { throw new java.lang.Error(); } if ((Main.InlineWideParameter(4294967297L)) != 4294967297L) { throw new java.lang.Error(); } if ((Main.InlineReferenceParameter(Main.class)) != (Main.class)) { throw new java.lang.Error(); } if ((Main.InlineAdd()) != 8) { throw new java.lang.Error(); } if (((Main.InlineFieldAccess()) != 43) || ((Main.InlineFieldAccess()) != 44)) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(true)) != 4) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(false)) != 2) { throw new java.lang.Error(); } if ((Main.InlinedIntrinsicsAreStillIntrinsic()) != 1) { throw new java.lang.Error(); } },c886bc234a5755dbf95c68518177f3c3ad16e126,main(java.lang.String[]),main(java.lang.String[]),2,14,public static void main(java.lang.String[] args) { Main.InlineVoid(); if ((Main.InlineInt()) != 4) { throw new java.lang.Error(); } if ((Main.InlineWide()) != 8L) { throw new java.lang.Error(); } if ((Main.InlineParameter(42)) != 42) { throw new java.lang.Error(); } if ((Main.InlineWideParameter(4294967297L)) != 4294967297L) { throw new java.lang.Error(); } if ((Main.InlineReferenceParameter(Main.class)) != (Main.class)) { throw new java.lang.Error(); } if ((Main.InlineAdd()) != 8) { throw new java.lang.Error(); } if (((Main.InlineFieldAccess()) != 43) || ((Main.InlineFieldAccess()) != 44)) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(true)) != 4) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(false)) != 2) { throw new java.lang.Error(); } if ((Main.InlinedIntrinsicsAreStillIntrinsic()) != 1) { throw new java.lang.Error(); } if ((Main.returnAbs((-1))) != 1) { throw new java.lang.Error(); } },41c657687c4a8989a2373bd86f78fd46ae1b71c5,main(java.lang.String[]),496571,272,295
633505,services_core_java_com_android_server_ConnectivityService.java,106.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onPrivateDnsValidationEvent(int netId, java.lang.String ipAddress, java.lang.String hostname, boolean validated) { try { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_PRIVATE_DNS_VALIDATION_UPDATE, new com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate(netId, java.net.InetAddress.parseNumericAddress(ipAddress), hostname, validated))); } catch (java.lang.IllegalArgumentException e) { } }",b3e7e5b306bb201f89e633cf7adbef5816612155,,"onPrivateDnsValidationEvent(int,java.lang.String,java.lang.String,boolean)",10,230,"@java.lang.Override public void onPrivateDnsValidationEvent(int netId, java.lang.String ipAddress, java.lang.String hostname, boolean validated) { try { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_PRIVATE_DNS_VALIDATION_UPDATE, new com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate(netId, java.net.InetAddress.parseNumericAddress(ipAddress), hostname, validated))); } catch (java.lang.IllegalArgumentException e) { com.android.server.ConnectivityService.loge(""Error parsing ip address in validation event""); } }",fc2a1c01fce793ec31d45bd8a2f58e3940830abf,"onPrivateDnsValidationEvent(int,java.lang.String,java.lang.String,boolean)",130608,118,138
586414,services_core_java_com_android_server_IpSecService.java,45.0,"@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SA with ID: "" + (mResourceId))); } } getResourceTracker().give(); }",a433d09b0a30e7975582b67ea2b08ea8869b378b,"@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi, 0, 0); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SA with ID: "" + (mResourceId))); } } getResourceTracker().give(); }",507c018bb4512d2b1f19b749ae66d4ce38fc6763,freeUnderlyingResources(),freeUnderlyingResources(),3,49,"@java.lang.Override public void freeUnderlyingResources() { int spi = mSpi.getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mConfig.getSourceAddress(), mConfig.getDestinationAddress(), spi, mConfig.getMarkValue(), mConfig.getMarkMask()); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, (""Failed to delete SA with ID: "" + (mResourceId))); } getResourceTracker().give(); }",9627165c779a42d2b18d21a6487f3110e6627c5d,freeUnderlyingResources(),47279,152,139
511542,src_com_android_bluetooth_gatt_ScanManager.java,62.0,void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { mActivityManager.removeOnUidImportanceListener(mUidImportanceListener); } if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } },66fb59fbb1bc8c66c5a06c4a9d2d7a2624c718e6,"void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { try { mActivityManager.removeOnUidImportanceListener(mUidImportanceListener); } catch (java.lang.IllegalArgumentException e) { android.util.Log.e(com.android.bluetooth.gatt.ScanManager.TAG, ""exception when invoking removeOnUidImportanceListener"", e); } } if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } }",4ca08ba2a54d98e03c0a8eca3e4f6e589788b2f4,cleanup(),cleanup(),2,62,"void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { try { mActivityManager.removeOnUidImportanceListener(mUidImportanceListener); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.gatt.ScanManager.TAG, ""exception when invoking removeOnUidImportanceListener"", e); } } if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } }",3f736c8b6cfc8b5c465497ae3da5f33cadf2be71,cleanup(),230540,186,186
128670,src_com_android_nfc_cardemulation_RegisteredT3tIdentifiersCache.java,,,,"public void onPreferredNfcFServiceChanged() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""Preferred NFC-F service changed.""); synchronized(mLock) { generateT3tIdentifiersCacheLocked(); } }",897aaaaa1cadaf40635d068c8aaf4eb444a7ddbf,,onPreferredNfcFServiceChanged(),10,0,"public void onEnabledForegroundNfcFServiceChanged(android.content.ComponentName component) { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""Enabled foreground service changed.""); synchronized(mLock) { if (component != null) { if ((mEnabledForegroundService) != null) { return; } mEnabledForegroundService = component; } else { if ((mEnabledForegroundService) == null) { return; } mEnabledForegroundService = null; } generateForegroundT3tIdentifiersCacheLocked(); } }",43a641f74a07178a45b700f6afd727ce6d24d783,onEnabledForegroundNfcFServiceChanged(android.content.ComponentName),148751,88,149
588944,src_com_android_bluetooth_opp_BluetoothOppService.java,8.0,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("" onConnect BluetoothSocket :"" + socket) + "" \n :device :"") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); return true; }",cb4da57f5f5fdd67b1057a595d5035b2926410d8,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("" onConnect BluetoothSocket :"" + socket) + "" \n :device :"") + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); mAcceptNewConnect = false; return true; }",395210b9f1944dc6926cf17fb0311a2920646442,"onConnect(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothSocket)","onConnect(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothSocket)",6,8,"@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("" onConnect BluetoothSocket :"" + socket) + "" \n :device :"") + device)); } if (!(mAcceptNewConnections)) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (("" onConnect BluetoothSocket :"" + socket) + "" rejected"")); return false; } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); mAcceptNewConnections = false; return true; }",373163a4089fecdd82a388ed29f42da04d53c4eb,"onConnect(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothSocket)",339536,180,231
179752,apps_CtsVerifier_src_com_android_cts_verifier_managedprovisioning_ByodHelperActivity.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void scheduleTimeout() { mHandler.removeMessages(com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT); mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT), mTimeout); }",d73827ba19ce5521b7ba92b4fa1098f4f12123cc,,scheduleTimeout(),5,14,"private void scheduleTimeout() { mHandler.removeMessages(com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT); mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT), com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT_MILLISEC); }",adf19410bb18dab068fb3dcd5db6d149fa1d8998,scheduleTimeout(),268302,68,89
536511,core_java_android_net_NetworkRequest.java,18.0,"public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeParcelable(networkCapabilities, flags); dest.writeInt(legacyType); dest.writeInt(requestId); dest.writeString(type.name()); }",f7a55a0ec1ebd9f65e517711e38abed835c7f489,"public void writeToParcel(android.os.Parcel dest, int flags) { if ((networkCapabilities) != null) { dest.writeInt(1); networkCapabilities.writeToParcel(dest, flags); } else { dest.writeInt(0); } dest.writeInt(legacyType); dest.writeInt(requestId); dest.writeString(type.name()); }",a2f0254365f695fc4f927c98faa7d91093653d35,"writeToParcel(android.os.Parcel,int)","writeToParcel(android.os.Parcel,int)",3,18,"public void writeToParcel(android.os.Parcel dest, int flags) { networkCapabilities.writeToParcel(dest, flags); dest.writeInt(legacyType); dest.writeInt(requestId); dest.writeString(type.name()); }",58c3461c60f2bd189c7d19924d9dfe8e24ce36ec,"writeToParcel(android.os.Parcel,int)",329651,70,48
577277,core_java_android_net_NetworkCapabilities.java,10.0,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); }",f453dc9a6abdbfb3fa1313367422ceebd7ed461d,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(new android.util.ArraySet(mAllowedUids)); }",5e98ed8cccd5ae20d2207cd6c485ec6749ec3dc5,"writeToParcel(android.os.Parcel,int)","writeToParcel(android.os.Parcel,int)",13,11,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(new android.util.ArraySet(mUids)); }",d656db3be876b4a4d1f310bafd435f86c4e311f1,"writeToParcel(android.os.Parcel,int)",122847,106,105
150805,services_core_java_com_android_server_pm_UserManagerService.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean canAddMoreManagedProfiles() { com.android.server.pm.UserManagerService.checkManageUsersPermission(""check if more managed profiles can be added.""); synchronized(mPackagesLock) { if ((numberOfUsersOfTypeLocked(UserInfo.FLAG_MANAGED_PROFILE, true)) >= (com.android.server.pm.UserManagerService.MAX_MANAGED_PROFILES)) { return false; } } int usersCount = getAliveUsersExcludingGuestsCount(); return (usersCount == 1) || (usersCount < (android.os.UserManager.getMaxSupportedUsers())); }",626e6c27d678480bdd6ae1fd9e0c1204ae729a83,,canAddMoreManagedProfiles(),3,8,"@java.lang.Override public boolean canAddMoreManagedProfiles() { com.android.server.pm.UserManagerService.checkManageUsersPermission(""check if more managed profiles can be added.""); if (android.app.ActivityManager.isLowRamDeviceStatic()) { return false; } synchronized(mPackagesLock) { if ((numberOfUsersOfTypeLocked(UserInfo.FLAG_MANAGED_PROFILE, true)) >= (com.android.server.pm.UserManagerService.MAX_MANAGED_PROFILES)) { return false; } int usersCount = getAliveUsersExcludingGuestsCountLocked(); return (usersCount == 1) || (usersCount < (android.os.UserManager.getMaxSupportedUsers())); } }",994888f35bf07ea0a023f5f5c969f67c9067083c,canAddMoreManagedProfiles(),242602,132,152
161350,jack-tests_tests_com_android_jack_switchstatement_SwitchstatementTests.java,35.0,"@org.junit.Test public void testCompile021() throws java.lang.Exception { properties.clear(); properties.put(""jack.optimization.enum.switch"", ""feedback""); java.lang.String packageName = ""com.android.jack.switchstatement.test021.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java_lang_Thread$State"", true)); checkCompiledCode(packageName, input); }",bbd342d60f097a065796d1fd7e7c52764eb132b2,"@org.junit.Test public void testCompile021() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test021.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java_lang_Thread$State"", false)); input.put(""SyntheticSwitchmapClass-*"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java_lang_Thread$State"", true)); checkCompiledCode(packageName, input); }",5bdc52a99cc02494a21a8f1fc48aa849781c4f97,testCompile021(),testCompile021(),4,34,"@org.junit.Test public void testCompile021() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test021.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java_lang_Thread$State"", true)); checkCompiledCode(packageName, input); }",a5adf78ed9e49a6ff727ade2a647a92ef1ddb735,testCompile021(),299262,193,149
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,19.0,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, com.android.rs.test.Int2 javaResult, com.android.rs.test.Int2 rsResult) { final boolean success = ((javaResult.x) == (rsResult.x)) && ((javaResult.y) == (rsResult.y)); java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success && (t != null)) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + "": java ("") + (javaResult.x)) + "", "") + (javaResult.y)) + "")"") + "", rs ("") + (rsResult.x)) + "", "") + (rsResult.y)) + "")"") + "": "") + status)); return success; }",38266a3bd76b3669b99509ee879022ce5a7d6163,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, android.renderscript.Int2 javaRslt, android.renderscript.Int2 rsRslt) { final boolean success = ((javaRslt.x) == (rsRslt.x)) && ((javaRslt.y) == (rsRslt.y)); java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success && (t != null)) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + "": java ("") + (javaRslt.x)) + "", "") + (javaRslt.y)) + "")"") + "", rs ("") + (rsRslt.x)) + "", "") + (rsRslt.y)) + "")"") + "": "") + status)); return success; }",2d074ad4004f97d7b65aca982879eb8d4f03e81e,"result(java.lang.String,com.android.rs.test.UT_reduce$timing,com.android.rs.test.Int2,com.android.rs.test.Int2)","result(java.lang.String,com.android.rs.test.UT_reduce$timing,android.renderscript.Int2,android.renderscript.Int2)",7,22,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, com.android.rs.test.Int2 javaResult, com.android.rs.test.Int2 rsResult) { final boolean success = ((javaResult.x) == (rsResult.x)) && ((javaResult.y) == (rsResult.y)); java.lang.String status = (success) ? ""PASSED"" : ""FAILED""; if (success && (t != null)) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + "": java ("") + (javaResult.x)) + "", "") + (javaResult.y)) + "")"") + "", rs ("") + (rsResult.x)) + "", "") + (rsResult.y)) + "")"") + "": "") + status)); return success; }",38266a3bd76b3669b99509ee879022ce5a7d6163,"result(java.lang.String,com.android.rs.test.UT_reduce$timing,com.android.rs.test.Int2,com.android.rs.test.Int2)",379422,241,227
174849,src_com_android_providers_telephony_MmsSmsDatabaseHelper.java,35.0,"public static void updateThread(android.database.sqlite.SQLiteDatabase db, long thread_id) { if (thread_id < 0) { com.android.providers.telephony.MmsSmsDatabaseHelper.updateAllThreads(db, null, null); return; } db.beginTransaction(); try { int rows = db.delete(MmsSmsProvider.TABLE_THREADS, (""_id = ? AND _id NOT IN"" + ("" (SELECT thread_id FROM sms "" + "" UNION SELECT thread_id FROM pdu)"")), new java.lang.String[]{ java.lang.String.valueOf(thread_id) }); if (rows > 0) { com.android.providers.telephony.MmsSmsDatabaseHelper.removeUnferencedCanonicalAddresses(db); } else { db.execSQL(((((((((((((((((((((((("" UPDATE threads SET message_count = "" + ("" (SELECT COUNT(sms._id) FROM sms LEFT JOIN threads "" + "" ON threads._id = "")) + (android.provider.Telephony.Sms.THREAD_ID)) + "" WHERE "") + (android.provider.Telephony.Sms.THREAD_ID)) + "" = "") + thread_id) + "" AND sms."") + (android.provider.Telephony.Sms.TYPE)) + "" != 3) + "") + "" (SELECT COUNT(pdu._id) FROM pdu LEFT JOIN threads "") + "" ON threads._id = "") + (android.provider.Telephony.Mms.THREAD_ID)) + "" WHERE "") + (android.provider.Telephony.Mms.THREAD_ID)) + "" = "") + thread_id) + "" AND (m_type=132 OR m_type=130 OR m_type=128)"") + "" AND "") + (android.provider.Telephony.Mms.MESSAGE_BOX)) + "" != 3) "") + "" WHERE threads._id = "") + thread_id) + "";"")); db.execSQL((((((((((((((((((((("" UPDATE threads"" + ((((("" SET"" + "" date ="") + "" (SELECT date FROM"") + "" (SELECT date * 1000 AS date, thread_id FROM pdu"") + "" UNION SELECT date, thread_id FROM sms)"") + "" WHERE thread_id = "")) + thread_id) + "" ORDER BY date DESC LIMIT 1),"") + "" snippet ="") + "" (SELECT snippet FROM"") + "" (SELECT date * 1000 AS date, sub AS snippet, thread_id FROM pdu"") + "" UNION SELECT date, body AS snippet, thread_id FROM sms)"") + "" WHERE thread_id = "") + thread_id) + "" ORDER BY date DESC LIMIT 1),"") + "" snippet_cs ="") + "" (SELECT snippet_cs FROM"") + "" (SELECT date * 1000 AS date, sub_cs AS snippet_cs, thread_id FROM pdu"") + "" UNION SELECT date, 0 AS snippet_cs, thread_id FROM sms)"") + "" WHERE thread_id = "") + thread_id) + "" ORDER BY date DESC LIMIT 1)"") + "" WHERE threads._id = "") + thread_id) + "";"")); java.lang.String query = (((""SELECT thread_id FROM sms WHERE type="" + (Telephony.TextBasedSmsColumns.MESSAGE_TYPE_FAILED)) + "" AND thread_id = "") + thread_id) + "" LIMIT 1""; int setError = 0; android.database.Cursor c = db.rawQuery(query, null); if (c != null) { try { setError = c.getCount(); } finally { c.close(); } } java.lang.String errorQuery = ""SELECT error FROM threads WHERE _id = "" + thread_id; c = db.rawQuery(errorQuery, null); if (c != null) { try { if (c.moveToNext()) { int curError = c.getInt(0); if (curError != setError) { db.execSQL((((""UPDATE threads SET error="" + setError) + "" WHERE _id = "") + thread_id)); } } } finally { c.close(); } } } db.setTransactionSuccessful(); } catch (java.lang.Throwable ex) { android.util.Log.e(com.android.providers.telephony.MmsSmsDatabaseHelper.TAG, ex.getMessage(), ex); } finally { db.endTransaction(); } }",6a02bde296aa7f835034fbae1569d1bafc17549a,"public static void updateThread(android.database.sqlite.SQLiteDatabase db, long thread_id) { if (thread_id < 0) { com.android.providers.telephony.MmsSmsDatabaseHelper.updateAllThreads(db, null, null); return; } com.android.providers.telephony.MmsSmsDatabaseHelper.updateAllThreads(db, ""(thread_id = ?)"", new java.lang.String[]{ java.lang.String.valueOf(thread_id) }); }",1afdc6112927dd59a9ac8c1871966282a70fb64b,"updateThread(android.database.sqlite.SQLiteDatabase,long)","updateThread(android.database.sqlite.SQLiteDatabase,long)",6,34,"public static void updateThread(android.database.sqlite.SQLiteDatabase db, long thread_id) { if (thread_id < 0) { com.android.providers.telephony.MmsSmsDatabaseHelper.updateThreads(db, null, null); return; } com.android.providers.telephony.MmsSmsDatabaseHelper.updateThreads(db, ""(thread_id = ?)"", new java.lang.String[]{ java.lang.String.valueOf(thread_id) }); }",09d3446175cab62085c09d8d597aa8c9495c5fe3,"updateThread(android.database.sqlite.SQLiteDatabase,long)",116485,104,102
330335,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerManifestLayoutTests.java,4.0,"public void testMinimalSizeDocked() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO, ""Skipping test: no multi-window support""); return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }",8c4f178dc8a49910e191006ceb29c757a243fa7e,"public void testMinimalSizeDocked() throws java.lang.Exception { if ((!(supportsMultiWindowMode())) || (!(supportsSplitScreenMultiWindow()))) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO, ""Skipping test: no multi-window support""); return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }",314cc8519857b51e1e9cd65dc3a1c243058d7a9a,testMinimalSizeDocked(),testMinimalSizeDocked(),2,4,"public void testMinimalSizeDocked() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO, ""Skipping test: no multi-window support""); return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }",c16ab40f81068942497cadd60989ffe7450625aa,testMinimalSizeDocked(),224271,95,86
640733,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,,,,"void sendMediaKeyEvent(int key, int state) { com.android.bluetooth.avrcp.MediaPlayerList.d((((""sendMediaKeyEvent: key="" + key) + "" state="") + state)); int action = (state == 0) ? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.Helpers.avrcpPassthroughToKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }",43421708479fd605cb171a3b4645b6578ee31645,,"sendMediaKeyEvent(int,int)",8,22,"void sendMediaKeyEvent(int key, int state) { com.android.bluetooth.avrcp.MediaPlayerList.d((((""sendMediaKeyEvent: key="" + key) + "" state="") + state)); int action = (state == 0) ? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.AvrcpPassthrough.toKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }",f6bd2b74115c3be3a6fbe7cb9e57c3a8ee65391a,"sendMediaKeyEvent(int,int)",427541,123,122
124160,sched_src_com_android_sched_vfs_MessageDigestFS.java,,,,"@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file) throws com.android.sched.util.file.WrongPermissionException { assert (mdFactory) != null; return new java.security.DigestOutputStream(vfs.openWrite(file), mdFactory.create()) { @java.lang.Override public void close() throws java.io.IOException { super.close(); com.android.sched.vfs.MessageDigestFS.this.digest = new java.lang.String(com.android.sched.vfs.MessageDigestFS.encode(getMessageDigest().digest())); } }; }",b7de7364613ee13c7fdebad4c1e96b9765470643,,openWrite(com.android.sched.vfs.BaseVFile),5,4,@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull final com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) { throw new java.lang.UnsupportedOperationException(); },7107db6cbf699ab730b681ac0b86ac29a9930156,openWrite(com.android.sched.vfs.MessageDigestFS$MessageDigestVFile),215268,148,53
41534,sdkmanager_libs_sdklib_src_com_android_sdklib_SdkManager.java,4.0,"public void reloadSdk(com.android.sdklib.ISdkLog log) { java.util.ArrayList<com.android.sdklib.IAndroidTarget> list = new java.util.ArrayList<com.android.sdklib.IAndroidTarget>(); com.android.sdklib.SdkManager.loadPlatforms(mOsSdkPath, list, log); com.android.sdklib.SdkManager.loadAddOns(mOsSdkPath, list, log); java.util.Collections.sort(list); setTargets(list.toArray(new com.android.sdklib.IAndroidTarget[list.size()])); initializeSamplePaths(log); }",f6cac152084c9e937acb136cb88a94a7f69d9143,"public void reloadSdk(com.android.utils.ILogger log) { java.util.ArrayList<com.android.sdklib.IAndroidTarget> list = new java.util.ArrayList<com.android.sdklib.IAndroidTarget>(); com.android.sdklib.SdkManager.loadPlatforms(mOsSdkPath, list, log); com.android.sdklib.SdkManager.loadAddOns(mOsSdkPath, list, log); java.util.Collections.sort(list); setTargets(list.toArray(new com.android.sdklib.IAndroidTarget[list.size()])); initializeSamplePaths(log); }",bc17ff5400084bed3ac31709e441ed26503d17c6,reloadSdk(com.android.sdklib.ISdkLog),reloadSdk(com.android.utils.ILogger),2,24,"public void reloadSdk(com.android.utils.ILogger log) { mTargetDirs.clear(); java.util.ArrayList<com.android.sdklib.IAndroidTarget> targets = new java.util.ArrayList<com.android.sdklib.IAndroidTarget>(); com.android.sdklib.SdkManager.loadPlatforms(mOsSdkPath, targets, mTargetDirs, log); com.android.sdklib.SdkManager.loadAddOns(mOsSdkPath, targets, mTargetDirs, log); java.util.Collections.sort(targets); setTargets(targets.toArray(new com.android.sdklib.IAndroidTarget[targets.size()])); initializeSamplePaths(log); }",fc8d95dfa55a436f03590bb33c28d06b002a6bff,reloadSdk(com.android.utils.ILogger),361047,141,158
152974,jack-tests_src_com_android_jack_test_junit_ExcludeReferenceToolchain.java,,,,java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>[] value() default { };,aa395212c16c913baaabae2c0951eb181850ce34,,value(),7,1,java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>[] candidate() default { };,6b7acbc06cc4024190c9850b2cc0786d1471ba2f,candidate(),40825,28,28
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAbs.java,,,,"private void checkAbsShort4() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U16_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsShort4(inValue, out); verifyResultsAbsShort4(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsShort4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U16_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsShort4(inValue, out); verifyResultsAbsShort4(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsShort4: "" + (e.toString()))); } }",9602d65d3b3086bab1dd8848a355b66ecbabb987,,checkAbsShort4(),9,12,"private void checkAbsShort4Ushort4() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.SIGNED_16, 4, 2570957184536780775L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_16, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsShort4Ushort4(inValue, out); verifyResultsAbsShort4Ushort4(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsShort4Ushort4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_16, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsShort4Ushort4(inValue, out); verifyResultsAbsShort4Ushort4(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsShort4Ushort4: "" + (e.toString()))); } }",47646e01d6d2b95540a52516a21b600007041a3c,checkAbsShort4Ushort4(),143032,326,319
384015,telephony_java_android_telephony_MbmsStreamingManager.java,13.0,public void dispose() { },1d9ca8ad4c4f3a3ea13a2a9bf15c681112d26742,"public void dispose() { synchronized(this) { if ((mService) == null) { return; } try { mService.dispose(mAppName, mSubscriptionId); } catch (android.os.RemoteException e) { } } }",bdbca5c4774517cd79075e870c56f3bc95e3b83f,dispose(),dispose(),4,12,"public synchronized void dispose() { if ((mService) == null) { return; } try { mService.dispose(mAppName, mSubscriptionId); } catch (android.os.RemoteException e) { } mService = null; }",5df60e07557976cd2f05d339d1bd788adebdd9a1,dispose(),222006,51,51
433565,PMC_src_com_android_pmc_PMCMainActivity.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void startUSBTethering() { com.android.pmc.PMCMainActivity.OnStartTetheringCallback tetherCallback = new com.android.pmc.PMCMainActivity.OnStartTetheringCallback(); mConnManager.startTethering(ConnectivityManager.TETHERING_USB, true, tetherCallback); if (uTethered) { mBtnStart.setEnabled(false); mRadioGroup.setFocusable(false); mTextView.setText(""Started usb tethering""); } }",fa61f57f59570eee3ef5c11cd3074750c72c4ef2,,startUSBTethering(),7,23,"private void startUSBTethering() { com.android.pmc.PMCMainActivity.OnStartTetheringCallback tetherCallback = new com.android.pmc.PMCMainActivity.OnStartTetheringCallback(); mConnManager.startTethering(ConnectivityManager.TETHERING_USB, true, tetherCallback); try { java.lang.Thread.sleep(mProvisionCheckSleep); } catch (java.lang.InterruptedException e) { android.util.Log.d(com.android.pmc.PMCMainActivity.TAG, ""Sleep exception after enabling USB tethering""); } if (mTethered) { mBtnStart.setEnabled(false); mRadioGroup.setFocusable(false); mTextView.setText(""Started usb tethering""); } }",21e457cf8b664cff162dec46ab2759f5ead77f45,startUSBTethering(),340476,114,174
465279,core_java_android_bluetooth_BluetoothAdapter.java,31.0,public void onBluetoothStateChange(boolean on);,e8cfea758fc5cf13b7a8c97a49e05b90b0cc6263,void onBluetoothStateChange(boolean on);,6ff571f7d1600f4b7eb4ff8c77d1a9ef4fd32b21,onBluetoothStateChange(boolean),onBluetoothStateChange(boolean),9,31,public void onBluetoothStateChange(boolean on);,e8cfea758fc5cf13b7a8c97a49e05b90b0cc6263,onBluetoothStateChange(boolean),2101,8,9
358174,wifi_java_android_net_wifi_WifiScanner.java,1.0,"public void startTrackingBssids(android.net.wifi.WifiScanner.BssidInfo[] bssidInfos, int apLostThreshold, android.net.wifi.WifiScanner.BssidListener listener) { com.android.internal.util.Preconditions.checkNotNull(listener, ""listener cannot be null""); int key = addListener(listener); if (key == (android.net.wifi.WifiScanner.INVALID_KEY)) return; validateChannel(); android.net.wifi.WifiScanner.HotlistSettings settings = new android.net.wifi.WifiScanner.HotlistSettings(); settings.bssidInfos = bssidInfos; settings.apLostThreshold = apLostThreshold; mAsyncChannel.sendMessage(android.net.wifi.WifiScanner.CMD_SET_HOTLIST, 0, key, settings); }",580c90f969fdf50254afa3d32ce801b3d91fb48e,"public void startTrackingBssids(android.net.wifi.WifiScanner.BssidInfo[] bssidInfos, int apLostThreshold, android.net.wifi.WifiScanner.BssidListener listener) { }",82f2fd83b6c3e3b30cc73b0bd1b424556926fdf0,"startTrackingBssids(android.net.wifi.WifiScanner$BssidInfo[],int,android.net.wifi.WifiScanner$BssidListener)","startTrackingBssids(android.net.wifi.WifiScanner$BssidInfo[],int,android.net.wifi.WifiScanner$BssidListener)",4,1,"public void startTrackingBssids(android.net.wifi.WifiScanner.BssidInfo[] bssidInfos, int apLostThreshold, android.net.wifi.WifiScanner.BssidListener listener) { throw new java.lang.UnsupportedOperationException(); }",dc85eb9ff2b9f2f64c37381e62cbdf35a9879ab8,"startTrackingBssids(android.net.wifi.WifiScanner$BssidInfo[],int,android.net.wifi.WifiScanner$BssidListener)",367068,53,62
253791,luni_src_main_java_libcore_io_Os.java,11.0,"public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.system.ErrnoException, java.io.InterruptedIOException;",99b883890f3405c1e897e871a2ad08da5f803e87,"public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws java.io.InterruptedIOException, libcore.io.ErrnoException;",efb729631746b2e52ff09686294f157986103654,"writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])","writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])",8,11,"public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.system.ErrnoException, java.io.InterruptedIOException;",99b883890f3405c1e897e871a2ad08da5f803e87,"writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])",494607,46,45
107255,jack_src_com_android_jack_preprocessor_AddAnnotationStep.java,0.0,"@java.lang.Override public void apply() { for (java.lang.Object candidate : toAnnotate) { if (candidate instanceof com.android.jack.ir.ast.Annotable) { com.android.jack.ir.ast.Annotable annotable = ((com.android.jack.ir.ast.Annotable) (candidate)); if ((annotable.getAnnotation(annotation)) == null) { com.android.jack.ir.ast.JAnnotationLiteral literal = new com.android.jack.ir.ast.JAnnotationLiteral(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, annotation.getRetentionPolicy(), annotation); annotable.addAnnotation(literal); literal.updateParents(((com.android.jack.ir.ast.JNode) (annotable))); } } } }",d19b9f482e10edd9deb8dba8a8a6e761944d9e6e,"@java.lang.Override public void apply() { for (java.lang.Object candidate : toAnnotate) { if (candidate instanceof com.android.jack.ir.ast.Annotable) { com.android.jack.ir.ast.Annotable annotable = ((com.android.jack.ir.ast.Annotable) (candidate)); if (annotable.getAnnotation(annotation).isEmpty()) { com.android.jack.ir.ast.JAnnotationLiteral literal = new com.android.jack.ir.ast.JAnnotationLiteral(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, annotation.getRetentionPolicy(), annotation); annotable.addAnnotation(literal); literal.updateParents(((com.android.jack.ir.ast.JNode) (annotable))); } } } }",e769d13e219b66a8ee487f9d42cf88e3bcfa4d0d,apply(),apply(),3,0,"@java.lang.Override public void apply() { for (java.lang.Object candidate : toAnnotate) { if (candidate instanceof com.android.jack.ir.ast.Annotable) { com.android.jack.ir.ast.Annotable annotable = ((com.android.jack.ir.ast.Annotable) (candidate)); if (annotable.getAnnotations(annotation).isEmpty()) { com.android.jack.ir.ast.JAnnotationLiteral literal = new com.android.jack.ir.ast.JAnnotationLiteral(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, annotation.getRetentionPolicy(), annotation); annotable.addAnnotation(literal); literal.updateParents(((com.android.jack.ir.ast.JNode) (annotable))); } } } }",1fe3138b572c6e7b582b9e74cecb04fe571b7b7e,apply(),134838,176,176
161052,sched_src_com_android_sched_vfs_UnionVFS.java,,,,@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.VPath getPath() { return wrappedFiles.get(0).getPath(); },e1fcb4d47580238aa3f6cba598cd809ac4e21316,,getPath(),15,35,@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.VPath getPath() { return wrappedFile.getPath(); },95847fa8b00e65fec44313c2b502328145f65478,getPath(),316825,36,34
205175,src_com_android_bluetooth_gatt_ContextMap.java,22.0,"void stopScan() { (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long currTime = (stopTime) - (startTime); minScanTime = java.lang.Math.min(currTime, minScanTime); maxScanTime = java.lang.Math.max(currTime, maxScanTime); totalScanTime += currTime; lastScans.add(currTime); if ((lastScans.size()) > (com.android.bluetooth.gatt.ContextMap.ScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setInitiator(appName); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); synchronized(mScanEvents) { if ((mScanEvents.size()) == (com.android.bluetooth.gatt.ContextMap.NUM_SCAN_EVENTS_KEPT)) mScanEvents.remove(0); mScanEvents.add(scanEvent); } }",1948a04ddd39ce6b6b1487ad299dfb2b059995a5,"void stopScan() { (this.scansStopped)++; if (!(isScanning)) return; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long currTime = (stopTime) - (startTime); minScanTime = java.lang.Math.min(currTime, minScanTime); maxScanTime = java.lang.Math.max(currTime, maxScanTime); totalScanTime += currTime; lastScans.add(currTime); if ((lastScans.size()) > (com.android.bluetooth.gatt.ContextMap.ScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setInitiator(appName); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); synchronized(mScanEvents) { if ((mScanEvents.size()) == (com.android.bluetooth.gatt.ContextMap.NUM_SCAN_EVENTS_KEPT)) mScanEvents.remove(0); mScanEvents.add(scanEvent); } }",c21d9f83675315ef9d0ebab52074d251f7bba3a3,stopScan(),stopScan(),4,3,"void recordScanStop() { if (!(isScanning)) return; (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long currTime = (stopTime) - (startTime); isOpportunisticScan = false; isBackgroundScan = false; minScanTime = java.lang.Math.min(currTime, minScanTime); maxScanTime = java.lang.Math.max(currTime, maxScanTime); totalScanTime += currTime; lastScans.add(currTime); if ((lastScans.size()) > (com.android.bluetooth.gatt.ContextMap.ScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setInitiator(appName); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); synchronized(mScanEvents) { if ((mScanEvents.size()) == (com.android.bluetooth.gatt.ContextMap.NUM_SCAN_EVENTS_KEPT)) mScanEvents.remove(0); mScanEvents.add(scanEvent); } }",6ab26c0920e587735925cc026f4a64e08c0dd8c4,recordScanStop(),170782,305,321
44640,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_project_LibraryClasspathContainerInitializer.java,8.0,"public static boolean updateProjects(org.eclipse.jdt.core.IJavaProject[] androidProjects) { try { int projectCount = androidProjects.length; org.eclipse.jdt.core.IClasspathContainer[] containers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; for (int i = 0; i < projectCount; i++) { containers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateLibraryContainer(androidProjects[i]); } org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), androidProjects, containers, new org.eclipse.core.runtime.NullProgressMonitor()); return true; } catch (org.eclipse.jdt.core.JavaModelException e) { return false; } }",d8431c120672ffbbb78c1c90deecc0cb1229b29b,"public static boolean updateProjects(org.eclipse.jdt.core.IJavaProject[] androidProjects) { try { int projectCount = androidProjects.length; org.eclipse.jdt.core.IClasspathContainer[] libraryContainers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; org.eclipse.jdt.core.IClasspathContainer[] dependencyContainers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; for (int i = 0; i < projectCount; i++) { libraryContainers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateLibraryContainer(androidProjects[i]); dependencyContainers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateDependencyContainer(androidProjects[i]); } org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), androidProjects, libraryContainers, new org.eclipse.core.runtime.NullProgressMonitor()); org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_DEPENDENCIES), androidProjects, dependencyContainers, new org.eclipse.core.runtime.NullProgressMonitor()); return true; } catch (org.eclipse.jdt.core.JavaModelException e) { return false; } }",50f35f7560cce21929ab17af518a3f49e6860e2b,updateProjects(org.eclipse.jdt.core.IJavaProject[]),updateProjects(org.eclipse.jdt.core.IJavaProject[]),3,7,"public static boolean updateProjects(org.eclipse.jdt.core.IJavaProject[] androidProjects) { try { int projectCount = androidProjects.length; org.eclipse.jdt.core.IClasspathContainer[] libraryContainers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; org.eclipse.jdt.core.IClasspathContainer[] dependencyContainers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; for (int i = 0; i < projectCount; i++) { libraryContainers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateLibraryContainer(androidProjects[i]); dependencyContainers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateDependencyContainer(androidProjects[i]); } org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_PRIVATE_LIBRARIES), androidProjects, libraryContainers, new org.eclipse.core.runtime.NullProgressMonitor()); org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_DEPENDENCIES), androidProjects, dependencyContainers, new org.eclipse.core.runtime.NullProgressMonitor()); return true; } catch (org.eclipse.jdt.core.JavaModelException e) { return false; } }",495989ec0e3ec235e198c5b6ddd656f5627037aa,updateProjects(org.eclipse.jdt.core.IJavaProject[]),174960,333,335
559360,core_java_android_net_IpSecTransform.java,10.0,"public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, (""Removing Transform with Id "" + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); svc.deleteTransportModeTransform(mResourceId); stopKeepalive(); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }",aa846d0568e67b5fb4c8d7c1cb65d6fff961acef,"public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, (""Removing Transform with Id "" + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); synchronized(mKeepaliveCallback) { if ((mKeepalive) != null) { stopNattKeepalive(); } } svc.deleteTransportModeTransform(mResourceId); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }",0b4f25fbc7a7c0de8b7c748ae99d73260185a206,close(),close(),9,9,"public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, (""Removing Transform with Id "" + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); svc.deleteTransform(mResourceId); stopNattKeepalive(); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }",8b1386a332a6dcbaea3a18914d150b3ddc709ed3,close(),140270,170,147
211850,ojluni_src_main_java_sun_security_jca_ProviderList.java,16.0,public int size() { return configs.length; },bf4f3e86448a0b05480ecada645a249f5490f039,public int size() { return configs.size(); },d657c013fcc160ec9a25068aff797594d0f5e16e,size(),size(),4,17,public int size() { return configs.length; },bf4f3e86448a0b05480ecada645a249f5490f039,size(),291433,11,11
236560,server_jack-server_src_com_android_jack_server_JackHttpServer.java,41.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void exitIdleMode() { },c15cb14ffc73e41091a5abc915a2691c451b8369,,exitIdleMode(),13,24,"private void setServerMode(@javax.annotation.Nonnull com.android.jack.server.ServerMode newMode) { synchronized(lock) { if (this.serverMode.equals(newMode)) { return; } com.android.jack.server.ServerMode oldMode = this.serverMode; this.serverMode = newMode; com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.INFO, (((""Server mode changing from "" + oldMode) + "" to "") + newMode)); com.android.jack.server.JackHttpServer.ServerModeWatcher watcher = modeWatchers.get(newMode); if (watcher != null) { watcher.changedMode(oldMode, newMode); } } }",e16aafe7664abc4528670aeac0427f456c165ff3,setServerMode(com.android.jack.server.ServerMode),417493,8,164
39410,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_launch_junit_runtime_TestCollector.java,8.0,"@java.lang.Override public void testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { }",ba07a41148fbe21826c9cc280ed37f17c6b943cf,"@java.lang.Override public void testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { java.lang.System.out.println((""test failed: "" + test)); }",4f79851fdaebea3ac3ba66b20a5fcb9d4826c804,"testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure,com.android.ddmlib.testrunner.TestIdentifier,java.lang.String)","testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure,com.android.ddmlib.testrunner.TestIdentifier,java.lang.String)",3,8,"@java.lang.Override public void testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { }",ba07a41148fbe21826c9cc280ed37f17c6b943cf,"testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure,com.android.ddmlib.testrunner.TestIdentifier,java.lang.String)",292166,76,58
21570,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_resources_manager_ResourceFile.java,3.0,"public abstract java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.ProjectResourceItem> getResources(com.android.resources.ResourceType type, com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources projectResources);",a262e057ce42811df13804fcb0acedb1bec3e54a,"public abstract java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem> getResources(com.android.resources.ResourceType type, com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository resources);",3258bab44dc34b185f605b4398d66c8134a5772d,"getResources(com.android.resources.ResourceType,com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources)","getResources(com.android.resources.ResourceType,com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository)",6,2,public final com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository getRepository() { return mFolder.getRepository(); },47e326d824a5bc845ea86f519bdeab23f141910e,getRepository(),150794,60,32
16553,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_HierarchyViewerDirector.java,7.0,"public void deviceConnected(final com.android.ddmlib.IDevice device) { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { executeInBackground(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); return; } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } } }); return; } } loadViewServerInfoAndWindows(device); } }",ae7e5073653c2aa051ca4742303d802337f700a6,"public void deviceConnected(final com.android.ddmlib.IDevice device) { executeInBackground(""Connecting device"", new java.lang.Runnable() { public void run() { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); return; } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } return; } } loadViewServerInfoAndWindows(device); } } }); }",d001bc252ee35e2f8baebe074ede7ea942419efe,deviceConnected(com.android.ddmlib.IDevice),deviceConnected(com.android.ddmlib.IDevice),14,33,"public void deviceConnected(final com.android.ddmlib.IDevice device) { executeInBackground(""Connecting device"", new java.lang.Runnable() { public void run() { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } return; } } loadViewServerInfoAndWindows(device); } } }); }",be5676c45e7144c72a09e4210c61b0edd4e0e649,deviceConnected(com.android.ddmlib.IDevice),450811,297,240
73670,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_channels_DatagramChannelTest.java,79.0,"public void testReadWrite_NonBlock_Normal() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.configureBlocking(false); this.channel2.configureBlocking(false); this.channel1.socket().bind(localAddr2); this.channel1.connect(localAddr1); this.channel2.socket().bind(localAddr1); this.channel2.connect(localAddr2); readWriteReadData(this.channel1, sourceArray, this.channel2, targetArray, org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, ""testReadWrite_NonBlock_Normal""); }",aa80953e31215d29683c645ce91d30840d8fd04e,"public void testReadWrite_NonBlock_Normal() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.configureBlocking(false); this.channel2.configureBlocking(false); this.channel1.socket().bind(datagramSocket2Address); this.channel1.connect(datagramSocket1Address); this.channel2.socket().bind(datagramSocket1Address); this.channel2.connect(datagramSocket2Address); readWriteReadData(this.channel1, sourceArray, this.channel2, targetArray, org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, ""testReadWrite_NonBlock_Normal""); }",5a3c9d8a5096378a3876e03619d38cd361a74308,testReadWrite_NonBlock_Normal(),testReadWrite_NonBlock_Normal(),2,79,"public void testReadWrite_NonBlock_Normal() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.configureBlocking(false); this.channel2.configureBlocking(false); channel1.connect(channel2Address); channel2.connect(channel1Address); readWriteReadData(this.channel1, sourceArray, this.channel2, targetArray, org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, ""testReadWrite_NonBlock_Normal""); }",43c15280f4f94d5c65789c2e6b491b7de884822d,testReadWrite_NonBlock_Normal(),95879,232,196
22971,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_actions_AddCompatibilityJarAction.java,,,,"private org.eclipse.core.resources.IResource copyJarIntoProject(org.eclipse.core.resources.IProject project, java.io.File jarPath, org.eclipse.core.runtime.IProgressMonitor monitor) throws java.io.IOException, org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IResource res = project.findMember(SdkConstants.FD_NATIVE_LIBS); if (res == null) { org.eclipse.core.resources.IFolder resFolder = project.getFolder(SdkConstants.FD_NATIVE_LIBS); resFolder.create(IResource.FORCE, true, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1)); res = resFolder; } org.eclipse.core.runtime.IPath resPath = (res == null) ? null : res.getLocation(); java.io.File osResDir = (resPath == null) ? null : resPath.toFile(); java.io.File destPath = new java.io.File(osResDir, jarPath.getName()); copyFile(jarPath, destPath); return project.findMember((((com.android.sdklib.SdkConstants.FD_NATIVE_LIBS) + (com.android.ide.eclipse.adt.AdtConstants.WS_SEP)) + (destPath.getName()))); }",97e591e0bdb0c7913cbcc4917c713b4e90061912,,"copyJarIntoProject(org.eclipse.core.resources.IProject,java.io.File,org.eclipse.core.runtime.IProgressMonitor)",7,6,"private org.eclipse.core.resources.IResource copyJarIntoProject(org.eclipse.core.resources.IProject project, java.io.File jarPath, org.eclipse.core.runtime.IProgressMonitor monitor) throws java.io.IOException, org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IFolder resFolder = project.getFolder(SdkConstants.FD_NATIVE_LIBS); if (!(resFolder.exists())) { resFolder.create(IResource.FORCE, true, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1)); } org.eclipse.core.resources.IFile destFile = resFolder.getFile(jarPath.getName()); org.eclipse.core.runtime.IPath loc = destFile.getLocation(); java.io.File destPath = loc.toFile(); if ((!(destPath.isFile())) || (!(isSameFile(jarPath, destPath)))) { copyFile(jarPath, destPath); } return destFile; }",dca5cd169472bea50b35a07cea9026243970af98,"copyJarIntoProject(org.eclipse.core.resources.IProject,java.io.File,org.eclipse.core.runtime.IProgressMonitor)",415573,296,217
19506,src_com_cooliris_media_PhotoAppWidgetProvider.java,3.0,"public android.graphics.Bitmap getPhoto(int appWidgetId) { android.database.Cursor c = null; android.graphics.Bitmap bitmap = null; try { android.database.sqlite.SQLiteDatabase db = getReadableDatabase(); java.lang.String selection = java.lang.String.format(""%s=%d"", com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.FIELD_APPWIDGET_ID, appWidgetId); c = db.query(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.TABLE_PHOTOS, com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.PHOTOS_PROJECTION, selection, null, null, null, null, null); if ((c != null) && (com.cooliris.media.PhotoAppWidgetProvider.LOGD)) { android.util.Log.d(com.cooliris.media.PhotoAppWidgetProvider.TAG, (""getPhoto query count="" + (c.getCount()))); } if ((c != null) && (c.moveToFirst())) { byte[] data = c.getBlob(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.INDEX_PHOTO_BLOB); if (data != null) { bitmap = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length); } } } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.cooliris.media.PhotoAppWidgetProvider.TAG, ""Could not load photo from database"", e); } finally { if (c != null) { c.close(); } } return bitmap; }",c1be8de4d533c9283503fa0b0858dceff768f2bc,"public android.graphics.Bitmap getPhoto(int appWidgetId) { android.database.Cursor c = null; android.graphics.Bitmap bitmap = null; try { android.database.sqlite.SQLiteDatabase db = getReadableDatabase(); java.lang.String[] selectionArgs = new java.lang.String[]{ com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.FIELD_APPWIDGET_ID, java.lang.String.valueOf(appWidgetId) }; c = db.query(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.TABLE_PHOTOS, com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.PHOTOS_PROJECTION, ""?=?"", selectionArgs, null, null, null, null); if ((c != null) && (com.cooliris.media.PhotoAppWidgetProvider.LOGD)) { android.util.Log.d(com.cooliris.media.PhotoAppWidgetProvider.TAG, (""getPhoto query count="" + (c.getCount()))); } if ((c != null) && (c.moveToFirst())) { byte[] data = c.getBlob(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.INDEX_PHOTO_BLOB); if (data != null) { bitmap = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length); } } } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.cooliris.media.PhotoAppWidgetProvider.TAG, ""Could not load photo from database"", e); } finally { if (c != null) { c.close(); } } return bitmap; }",c0af1fa45a32bd49f0873279918a74262c91f28c,getPhoto(int),getPhoto(int),2,3,"public android.graphics.Bitmap getPhoto(int appWidgetId) { android.database.Cursor c = null; android.graphics.Bitmap bitmap = null; try { android.database.sqlite.SQLiteDatabase db = getReadableDatabase(); java.lang.String[] selectionArgs = new java.lang.String[]{ java.lang.String.valueOf(appWidgetId) }; c = db.query(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.TABLE_PHOTOS, com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.PHOTOS_PROJECTION, ((com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.FIELD_APPWIDGET_ID) + ""=?""), selectionArgs, null, null, null, null); if ((c != null) && (com.cooliris.media.PhotoAppWidgetProvider.LOGD)) { android.util.Log.d(com.cooliris.media.PhotoAppWidgetProvider.TAG, (""getPhoto query count="" + (c.getCount()))); } if ((c != null) && (c.moveToFirst())) { byte[] data = c.getBlob(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.INDEX_PHOTO_BLOB); if (data != null) { bitmap = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length); } } } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.cooliris.media.PhotoAppWidgetProvider.TAG, ""Could not load photo from database"", e); } finally { if (c != null) { c.close(); } } return bitmap; }",122db4d96fb2c8173a183ba8a6a6422986e6bb97,getPhoto(int),255680,356,358
162651,ddmlib_src_main_java_com_android_ddmlib_Device.java,51.0,"@java.lang.Override public java.lang.String installPackage(java.lang.String packageFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { java.lang.String remoteFilePath = syncPackageToDevice(packageFilePath); java.lang.String result = installRemotePackage(remoteFilePath, reinstall, extraArgs); removeRemotePackage(remoteFilePath); return result; } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.SyncException e) { throw new com.android.ddmlib.InstallException(e); } }",a2c6c36e67ba01070e6990927c016ff13902c38a,"@java.lang.Override public java.lang.String installPackage(java.lang.String packageFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { java.lang.String remoteFilePath = syncPackageToDevice(packageFilePath); java.lang.String result = installRemotePackage(remoteFilePath, reinstall, extraArgs); removeRemotePackage(remoteFilePath); return result; } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.SyncException e) { throw new com.android.ddmlib.InstallException(e); } catch (java.lang.InterruptedException e) { throw new com.android.ddmlib.InstallException(e); } }",3d97f32d515d7f71594d6d59c904104528b66cd6,"installPackage(java.lang.String,boolean,java.lang.String[])","installPackage(java.lang.String,boolean,java.lang.String[])",4,51,"@java.lang.Override public java.lang.String installPackage(java.lang.String packageFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { java.lang.String remoteFilePath = syncPackageToDevice(packageFilePath); java.lang.String result = installRemotePackage(remoteFilePath, reinstall, extraArgs); removeRemotePackage(remoteFilePath); return result; } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.SyncException e) { throw new com.android.ddmlib.InstallException(e); } }",a2c6c36e67ba01070e6990927c016ff13902c38a,"installPackage(java.lang.String,boolean,java.lang.String[])",353184,244,217
22268,monkeyrunner_src_com_android_monkeyrunner_adb_AdbMonkeyDevice.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.monkeyrunner.easy.HierarchyViewer getHierarchyViewer() { return new com.android.monkeyrunner.easy.HierarchyViewer(device); },65684776a3965db57fe63ceb659242cbe2691cd6,,getHierarchyViewer(),8,12,@java.lang.Override public com.android.monkeyrunner.easy.HierarchyViewer getHierarchyViewer() { return new com.android.monkeyrunner.easy.HierarchyViewer(device); },42e8bc72f7ccf9c5ebb3eb508a19b77ecdacdfd7,getHierarchyViewer(),81198,34,40
91709,src_com_android_providers_media_MediaProvider.java,1.0,"@java.lang.Override public int bulkInsert(android.net.Uri uri, android.content.ContentValues[] values) { int match = com.android.providers.media.MediaProvider.URI_MATCHER.match(uri); if (match == (com.android.providers.media.MediaProvider.VOLUMES)) { return super.bulkInsert(uri, values); } com.android.providers.media.MediaProvider.DatabaseHelper helper = getDatabaseForUri(uri); if (helper == null) { throw new java.lang.UnsupportedOperationException((""Unknown URI: "" + uri)); } android.database.sqlite.SQLiteDatabase db = helper.getWritableDatabase(); if (db == null) { throw new java.lang.IllegalStateException((""Couldn't open database for "" + uri)); } if ((match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID)) || (match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID_MEMBERS))) { return playlistBulkInsert(db, uri, values); } else if (match == (com.android.providers.media.MediaProvider.MTP_OBJECT_REFERENCES)) { int handle = java.lang.Integer.parseInt(uri.getPathSegments().get(2)); return setObjectReferences(helper, db, handle, values); } db.beginTransaction(); java.util.ArrayList<java.lang.Long> notifyRowIds = new java.util.ArrayList<java.lang.Long>(); int numInserted = 0; try { int len = values.length; for (int i = 0; i < len; i++) { if ((values[i]) != null) { insertInternal(uri, match, values[i], notifyRowIds); } } numInserted = len; db.setTransactionSuccessful(); } finally { db.endTransaction(); } notifyMtp(notifyRowIds); getContext().getContentResolver().notifyChange(uri, null); return numInserted; }",956114d175ef4b4df84d4b162baa6cf4feafa1b2,"@java.lang.Override public int bulkInsert(android.net.Uri uri, android.content.ContentValues[] values) { int match = com.android.providers.media.MediaProvider.URI_MATCHER.match(uri); if (match == (com.android.providers.media.MediaProvider.VOLUMES)) { return super.bulkInsert(uri, values); } com.android.providers.media.MediaProvider.DatabaseHelper helper = getDatabaseForUri(uri); if (helper == null) { throw new java.lang.UnsupportedOperationException((""Unknown URI: "" + uri)); } android.database.sqlite.SQLiteDatabase db = helper.getWritableDatabase(); if (db == null) { throw new java.lang.IllegalStateException((""Couldn't open database for "" + uri)); } if ((match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID)) || (match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID_MEMBERS))) { return playlistBulkInsert(db, uri, values); } else if (match == (com.android.providers.media.MediaProvider.MTP_OBJECT_REFERENCES)) { int handle = java.lang.Integer.parseInt(uri.getPathSegments().get(2)); return setObjectReferences(helper, db, handle, values); } db.beginTransaction(); java.util.ArrayList<java.lang.Long> notifyRowIds = new java.util.ArrayList<java.lang.Long>(); int numInserted = 0; try { int len = values.length; for (int i = 0; i < len; i++) { if ((values[i]) != null) { insertInternal(uri, match, values[i], notifyRowIds); } } numInserted = len; db.setTransactionSuccessful(); } finally { db.endTransaction(); } if (uri != null) { if (uri.toString().contains(""content://media/external"")) { notifyMtp(notifyRowIds); } } getContext().getContentResolver().notifyChange(uri, null); return numInserted; }",104ad6537bd6e1c596efd939d9b8db6ce81205c3,"bulkInsert(android.net.Uri,android.content.ContentValues[])","bulkInsert(android.net.Uri,android.content.ContentValues[])",2,1,"@java.lang.Override public int bulkInsert(android.net.Uri uri, android.content.ContentValues[] values) { int match = com.android.providers.media.MediaProvider.URI_MATCHER.match(uri); if (match == (com.android.providers.media.MediaProvider.VOLUMES)) { return super.bulkInsert(uri, values); } com.android.providers.media.MediaProvider.DatabaseHelper helper = getDatabaseForUri(uri); if (helper == null) { throw new java.lang.UnsupportedOperationException((""Unknown URI: "" + uri)); } android.database.sqlite.SQLiteDatabase db = helper.getWritableDatabase(); if (db == null) { throw new java.lang.IllegalStateException((""Couldn't open database for "" + uri)); } if ((match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID)) || (match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID_MEMBERS))) { return playlistBulkInsert(db, uri, values); } else if (match == (com.android.providers.media.MediaProvider.MTP_OBJECT_REFERENCES)) { int handle = java.lang.Integer.parseInt(uri.getPathSegments().get(2)); return setObjectReferences(helper, db, handle, values); } db.beginTransaction(); java.util.ArrayList<java.lang.Long> notifyRowIds = new java.util.ArrayList<java.lang.Long>(); int numInserted = 0; try { int len = values.length; for (int i = 0; i < len; i++) { if ((values[i]) != null) { insertInternal(uri, match, values[i], notifyRowIds); } } numInserted = len; db.setTransactionSuccessful(); } finally { db.endTransaction(); } if (uri != null) { if (uri.toString().startsWith(""content://media/external/"")) { notifyMtp(notifyRowIds); } } getContext().getContentResolver().notifyChange(uri, null); return numInserted; }",c1c513285f78c2c87025cc7a0b9a86fd3ab5ed18,"bulkInsert(android.net.Uri,android.content.ContentValues[])",340701,450,451
255183,src_test_java_org_conscrypt_ClientSessionContextTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSerializeSession_NullOCSPResponses() throws java.lang.Exception { org.conscrypt.OpenSSLSessionImpl mockSession = mock(org.conscrypt.OpenSSLSessionImpl.class); when(mockSession.getId()).thenReturn(new byte[]{ 17, 9, 3, 32 }); when(mockSession.getPeerHost()).thenReturn(""ssl.example.com""); when(mockSession.getPeerPort()).thenReturn(443); when(mockSession.getEncoded()).thenReturn(new byte[]{ 1, 2, 3 }); when(mockSession.getStatusResponses()).thenReturn(null); java.security.cert.Certificate mockCert = mock(java.security.cert.Certificate.class); when(mockCert.getEncoded()).thenReturn(new byte[]{ 5, 6, 7, 16 }); when(mockSession.getPeerCertificates()).thenReturn(new java.security.cert.Certificate[]{ mockCert }); org.conscrypt.SSLClientSessionCache mockCache = mock(org.conscrypt.SSLClientSessionCache.class); org.conscrypt.ClientSessionContext context = new org.conscrypt.ClientSessionContext(); context.setPersistentCache(mockCache); context.putSession(mockSession); verify(mockCache).putSessionData(eq(mockSession), any(byte[].class)); }",c2b396cad4c36c7360b246427212e7ca9547925c,,testSerializeSession_NullOCSPResponses(),2,5,"public void testSerializeSession_NoStatusResponses() throws java.lang.Exception { org.conscrypt.OpenSSLSessionImpl mockSession = mock(org.conscrypt.OpenSSLSessionImpl.class); when(mockSession.getId()).thenReturn(new byte[]{ 17, 9, 3, 32 }); when(mockSession.getPeerHost()).thenReturn(""ssl.example.com""); when(mockSession.getPeerPort()).thenReturn(443); when(mockSession.getEncoded()).thenReturn(new byte[]{ 1, 2, 3 }); when(mockSession.getStatusResponses()).thenReturn(java.util.Collections.<byte[]>emptyList()); java.security.cert.Certificate mockCert = mock(java.security.cert.Certificate.class); when(mockCert.getEncoded()).thenReturn(new byte[]{ 5, 6, 7, 16 }); when(mockSession.getPeerCertificates()).thenReturn(new java.security.cert.Certificate[]{ mockCert }); org.conscrypt.SSLClientSessionCache mockCache = mock(org.conscrypt.SSLClientSessionCache.class); org.conscrypt.ClientSessionContext context = new org.conscrypt.ClientSessionContext(); context.setPersistentCache(mockCache); context.putSession(mockSession); verify(mockCache).putSessionData(eq(mockSession), any(byte[].class)); }",4f41c7335de957ef2d0ddd3c8fe818c9bce3e709,testSerializeSession_NoStatusResponses(),379886,277,286
91995,luni_src_main_java_libcore_io_ForwardingOs.java,108.0,"public java.io.FileDescriptor open(java.lang.String path, int flags, int mode) throws libcore.io.ErrnoException { return os.open(path, flags, mode); }",720dc02cf6a56de27f87b92737ae1be394d22488,"public java.io.FileDescriptor open(java.lang.String path, int flags, int mode) throws android.os.ErrnoException { return os.open(path, flags, mode); }",480dd3985fd1d00b076878c6e96e6f0697469ec3,"open(java.lang.String,int,int)","open(java.lang.String,int,int)",3,108,"public java.io.FileDescriptor open(java.lang.String path, int flags, int mode) throws android.system.ErrnoException { return os.open(path, flags, mode); }",73a0788677969cfafd6321e62d5e5d2fd6e12bdb,"open(java.lang.String,int,int)",170489,42,42
105273,ddmlib_src_main_java_com_android_ddmlib_DeviceMonitor.java,10.0,"private void queryNewDeviceForInfo(com.android.ddmlib.Device device) { try { device.executeShellCommand(GetPropReceiver.GETPROP_COMMAND, new com.android.ddmlib.GetPropReceiver(device)); queryNewDeviceForMountingPoint(device, IDevice.MNT_EXTERNAL_STORAGE); queryNewDeviceForMountingPoint(device, IDevice.MNT_DATA); queryNewDeviceForMountingPoint(device, IDevice.MNT_ROOT); if (device.isEmulator()) { com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.getConsole(device); if (console != null) { device.setAvdName(console.getAvdName()); console.close(); } } } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Connection timeout getting info for device %s"", device.getSerialNumber())); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Adb rejected command to get device %1$s info: %2$s"", device.getSerialNumber(), e.getMessage())); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Adb shell command took too long returning info for device %s"", device.getSerialNumber())); } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""IO Error getting info for device %s"", device.getSerialNumber())); } }",8fcc63464ffd99f812cf4c205a7f66a7a80bc98d,"private void queryNewDeviceForInfo(com.android.ddmlib.Device device) { try { device.fetchProperties(); queryNewDeviceForMountingPoint(device, IDevice.MNT_EXTERNAL_STORAGE); queryNewDeviceForMountingPoint(device, IDevice.MNT_DATA); queryNewDeviceForMountingPoint(device, IDevice.MNT_ROOT); if (device.isEmulator()) { com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.getConsole(device); if (console != null) { device.setAvdName(console.getAvdName()); console.close(); } } } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Connection timeout getting info for device %s"", device.getSerialNumber())); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Adb rejected command to get device %1$s info: %2$s"", device.getSerialNumber(), e.getMessage())); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Adb shell command took too long returning info for device %s"", device.getSerialNumber())); } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""IO Error getting info for device %s"", device.getSerialNumber())); } }",1cf1f8e336c8420962341cf6806eb78f3cf23dbf,queryNewDeviceForInfo(com.android.ddmlib.Device),queryNewDeviceForInfo(com.android.ddmlib.Device),6,10,"private void queryNewDeviceForInfo(com.android.ddmlib.Device device) { try { queryProperties(device); queryNewDeviceForMountingPoint(device, IDevice.MNT_EXTERNAL_STORAGE); queryNewDeviceForMountingPoint(device, IDevice.MNT_DATA); queryNewDeviceForMountingPoint(device, IDevice.MNT_ROOT); if (device.isEmulator()) { com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.getConsole(device); if (console != null) { device.setAvdName(console.getAvdName()); console.close(); } } } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Connection timeout getting info for device %s"", device.getSerialNumber())); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Adb rejected command to get device %1$s info: %2$s"", device.getSerialNumber(), e.getMessage())); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Adb shell command took too long returning info for device %s"", device.getSerialNumber())); } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""IO Error getting info for device %s"", device.getSerialNumber())); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""Interrupted getting info for device %s"", device.getSerialNumber())); } catch (java.util.concurrent.ExecutionException e) { com.android.ddmlib.Log.w(""DeviceMonitor"", java.lang.String.format(""ExecutionException getting info for device %s"", device.getSerialNumber())); } }",4f11e42428172962bad5b6341cccff38d1d6a166,queryNewDeviceForInfo(com.android.ddmlib.Device),290140,378,477
55646,builder_src_main_java_com_android_builder_DefaultManifestParser.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public int getTargetSdkVersion(@com.android.annotations.NonNull java.io.File manifestFile) { try { java.lang.Object value = com.android.xml.AndroidManifest.getTargetSdkVersion(new com.android.io.FileWrapper(manifestFile)); if (value != null) { return ((java.lang.Integer) (value)); } else { return -1; } } catch (javax.xml.xpath.XPathExpressionException e) { } catch (com.android.io.StreamException e) { throw new java.lang.RuntimeException(e); } return -1; },de77527ee19ce2f224f219b66d377bd75a35b7e0,,getTargetSdkVersion(java.io.File),2,1,@java.lang.Override public int getTargetSdkVersion(@com.android.annotations.NonNull java.io.File manifestFile) { try { java.lang.Integer value = com.android.xml.AndroidManifest.getTargetSdkVersion(new com.android.io.FileWrapper(manifestFile)); if (value != null) { return value; } else { return -1; } } catch (javax.xml.xpath.XPathExpressionException e) { } catch (com.android.io.StreamException e) { throw new java.lang.RuntimeException(e); } return -1; },d306cd9fa77cc538b60b0f33b2a303536df78186,getTargetSdkVersion(java.io.File),283974,131,122
194695,ojluni_src_main_java_sun_nio_ch_FileChannelImpl.java,0.0,"public int write(java.nio.ByteBuffer src) throws java.io.IOException { ensureOpen(); if (!(writable)) throw new java.nio.channels.NonWritableChannelException(); synchronized(positionLock) { int n = 0; int ti = -1; java.lang.Object traceContext = sun.misc.IoTrace.fileWriteBegin(path); try { begin(); ti = threads.add(); if (!(isOpen())) return 0; do { n = sun.nio.ch.IOUtil.write(fd, src, (-1), nd); } while ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen()) ); return sun.nio.ch.IOStatus.normalize(n); } finally { threads.remove(ti); end((n > 0)); sun.misc.IoTrace.fileWriteEnd(traceContext, (n > 0 ? n : 0)); assert sun.nio.ch.IOStatus.check(n); } } }",73e729e9e35975ade46c0ff69dff44488788c5b7,"public int write(java.nio.ByteBuffer src) throws java.io.IOException { ensureOpen(); if (!(writable)) throw new java.nio.channels.NonWritableChannelException(); synchronized(positionLock) { int n = 0; int ti = -1; java.lang.Object traceContext = sun.misc.IoTrace.fileWriteBegin(path); try { begin(); ti = threads.add(); if (!(isOpen())) return 0; dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); do { n = sun.nio.ch.IOUtil.write(fd, src, (-1), nd); } while ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen()) ); return sun.nio.ch.IOStatus.normalize(n); } finally { threads.remove(ti); end((n > 0)); sun.misc.IoTrace.fileWriteEnd(traceContext, (n > 0 ? n : 0)); assert sun.nio.ch.IOStatus.check(n); } } }",03b23a39107cd6feee546ea7f01b9d5ddb2ef24c,write(java.nio.ByteBuffer),write(java.nio.ByteBuffer),5,0,"public int write(java.nio.ByteBuffer src) throws java.io.IOException { ensureOpen(); if (!(writable)) throw new java.nio.channels.NonWritableChannelException(); synchronized(positionLock) { int n = 0; int ti = -1; java.lang.Object traceContext = sun.misc.IoTrace.fileWriteBegin(path); try { begin(); ti = threads.add(); if (!(isOpen())) return 0; do { n = sun.nio.ch.IOUtil.write(fd, src, (-1), nd); } while ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen()) ); return sun.nio.ch.IOStatus.normalize(n); } finally { threads.remove(ti); end((n > 0)); sun.misc.IoTrace.fileWriteEnd(traceContext, (n > 0 ? n : 0)); assert sun.nio.ch.IOStatus.check(n); } } }",73e729e9e35975ade46c0ff69dff44488788c5b7,write(java.nio.ByteBuffer),396734,229,213
52241,draw9patch_src_main_java_com_android_draw9patch_ui_ImageViewer.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void computeEditHighlightRegions() { editHightlightRegions.clear(); java.awt.Rectangle r = null; int f = editSegment.first; int s = editSegment.second; int min = java.lang.Math.min(f, s); int diff = java.lang.Math.abs((f - s)); switch (editRegion) { case LEFT_PATCH : editPatchRegion = displayCoordinates(new java.awt.Rectangle(0, min, 1, diff)); editHightlightRegions.addAll(getHorizontalHighlightRegions(0, min, image.getWidth(), diff)); break; case RIGHT_PADDING : editPatchRegion = displayCoordinates(new java.awt.Rectangle(((image.getWidth()) - 1), min, 1, diff)); editHightlightRegions.addAll(getHorizontalHighlightRegions(0, min, image.getWidth(), diff)); break; case TOP_PATCH : editPatchRegion = displayCoordinates(new java.awt.Rectangle(min, 0, diff, 1)); editHightlightRegions.addAll(getVerticalHighlightRegions(min, 0, diff, image.getHeight())); break; case BOTTOM_PADDING : editPatchRegion = displayCoordinates(new java.awt.Rectangle(min, ((image.getHeight()) - 1), diff, 1)); editHightlightRegions.addAll(getVerticalHighlightRegions(min, 0, diff, image.getHeight())); } }",bad35c054ad62a5676f12402735a99b10877b357,,computeEditHighlightRegions(),13,9,"private void computeEditHighlightRegions() { editHighlightRegions.clear(); int f = editSegment.first; int s = editSegment.second; int min = java.lang.Math.min(f, s); int diff = java.lang.Math.abs((f - s)); int imageWidth = image.getWidth(); int imageHeight = image.getHeight(); switch (editRegion) { case LEFT_PATCH : editPatchRegion = displayCoordinates(new java.awt.Rectangle(0, min, 1, diff)); editHighlightRegions.addAll(getHorizontalHighlightRegions(0, min, imageWidth, diff)); break; case RIGHT_PADDING : editPatchRegion = displayCoordinates(new java.awt.Rectangle((imageWidth - 1), min, 1, diff)); editHighlightRegions.addAll(getHorizontalHighlightRegions(0, min, imageWidth, diff)); break; case TOP_PATCH : editPatchRegion = displayCoordinates(new java.awt.Rectangle(min, 0, diff, 1)); editHighlightRegions.addAll(getVerticalHighlightRegions(min, 0, diff, imageHeight)); break; case BOTTOM_PADDING : editPatchRegion = displayCoordinates(new java.awt.Rectangle(min, (imageHeight - 1), diff, 1)); editHighlightRegions.addAll(getVerticalHighlightRegions(min, 0, diff, imageHeight)); default : assert false : editRegion; } }",03de6132486956e0a8a10964b6b6c7c625f33f31,computeEditHighlightRegions(),307256,293,292
497930,src_com_android_settings_accounts_AccountTypePreferenceLoader.java,4.0,"public void updatePreferenceIntents(android.support.v7.preference.PreferenceGroup prefs, final java.lang.String acccountType, android.accounts.Account account) { final android.content.pm.PackageManager pm = mFragment.getActivity().getPackageManager(); for (int i = 0; i < (prefs.getPreferenceCount());) { android.support.v7.preference.Preference pref = prefs.getPreference(i); if (pref instanceof android.support.v7.preference.PreferenceGroup) { updatePreferenceIntents(((android.support.v7.preference.PreferenceGroup) (pref)), acccountType, account); } android.content.Intent intent = pref.getIntent(); if (intent != null) { if (intent.getAction().equals(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS)) { pref.setOnPreferenceClickListener(new com.android.settings.accounts.AccountTypePreferenceLoader.FragmentStarter(com.android.settings.location.LocationSettings.class.getName(), R.string.location_settings_title)); } else { android.content.pm.ResolveInfo ri = pm.resolveActivityAsUser(intent, PackageManager.MATCH_DEFAULT_ONLY, mUserHandle.getIdentifier()); if (ri == null) { prefs.removePreference(pref); continue; } intent.putExtra(com.android.settings.accounts.AccountTypePreferenceLoader.ACCOUNT_KEY, account); intent.setFlags(((intent.getFlags()) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); pref.setOnPreferenceClickListener(new android.support.v7.preference.Preference.OnPreferenceClickListener() { @java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { android.content.Intent prefIntent = preference.getIntent(); if (isSafeIntent(pm, prefIntent, acccountType)) { mFragment.getActivity().startActivityAsUser(prefIntent, mUserHandle); } else { android.util.Log.e(com.android.settings.accounts.AccountTypePreferenceLoader.TAG, ((""Refusing to launch authenticator intent because"" + ""it exploits Settings permissions: "") + prefIntent)); } return true; } }); } } i++; } }",11c70e8a7d0307df3e12e9b94b3520b86a788cf3,"public void updatePreferenceIntents(android.support.v7.preference.PreferenceGroup prefs, final java.lang.String acccountType, android.accounts.Account account) { final android.content.pm.PackageManager pm = mFragment.getActivity().getPackageManager(); for (int i = 0; i < (prefs.getPreferenceCount());) { android.support.v7.preference.Preference pref = prefs.getPreference(i); if (pref instanceof android.support.v7.preference.PreferenceGroup) { updatePreferenceIntents(((android.support.v7.preference.PreferenceGroup) (pref)), acccountType, account); } android.content.Intent intent = pref.getIntent(); if (intent != null) { if (android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS.equals(intent.getAction())) { pref.setOnPreferenceClickListener(new com.android.settings.accounts.AccountTypePreferenceLoader.FragmentStarter(com.android.settings.location.LocationSettings.class.getName(), R.string.location_settings_title)); } else { android.content.pm.ResolveInfo ri = pm.resolveActivityAsUser(intent, PackageManager.MATCH_DEFAULT_ONLY, mUserHandle.getIdentifier()); if (ri == null) { prefs.removePreference(pref); continue; } intent.putExtra(com.android.settings.accounts.AccountTypePreferenceLoader.ACCOUNT_KEY, account); intent.setFlags(((intent.getFlags()) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); pref.setOnPreferenceClickListener(new android.support.v7.preference.Preference.OnPreferenceClickListener() { @java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { android.content.Intent prefIntent = preference.getIntent(); if (isSafeIntent(pm, prefIntent, acccountType)) { mFragment.getActivity().startActivityAsUser(prefIntent, mUserHandle); } else { android.util.Log.e(com.android.settings.accounts.AccountTypePreferenceLoader.TAG, ((""Refusing to launch authenticator intent because"" + ""it exploits Settings permissions: "") + prefIntent)); } return true; } }); } } i++; } }",eccc8c096f725b1e0a845cda051218f8bcef7fb6,"updatePreferenceIntents(android.support.v7.preference.PreferenceGroup,java.lang.String,android.accounts.Account)","updatePreferenceIntents(android.support.v7.preference.PreferenceGroup,java.lang.String,android.accounts.Account)",4,4,"public void updatePreferenceIntents(android.support.v7.preference.PreferenceGroup prefs, final java.lang.String acccountType, android.accounts.Account account) { final android.content.pm.PackageManager pm = mFragment.getActivity().getPackageManager(); for (int i = 0; i < (prefs.getPreferenceCount());) { android.support.v7.preference.Preference pref = prefs.getPreference(i); if (pref instanceof android.support.v7.preference.PreferenceGroup) { updatePreferenceIntents(((android.support.v7.preference.PreferenceGroup) (pref)), acccountType, account); } android.content.Intent intent = pref.getIntent(); if (intent != null) { if (android.text.TextUtils.equals(intent.getAction(), android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS)) { pref.setOnPreferenceClickListener(new com.android.settings.accounts.AccountTypePreferenceLoader.FragmentStarter(com.android.settings.location.LocationSettings.class.getName(), R.string.location_settings_title)); } else { android.content.pm.ResolveInfo ri = pm.resolveActivityAsUser(intent, PackageManager.MATCH_DEFAULT_ONLY, mUserHandle.getIdentifier()); if (ri == null) { prefs.removePreference(pref); continue; } intent.putExtra(com.android.settings.accounts.AccountTypePreferenceLoader.ACCOUNT_KEY, account); intent.setFlags(((intent.getFlags()) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); pref.setOnPreferenceClickListener(new android.support.v7.preference.Preference.OnPreferenceClickListener() { @java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { android.content.Intent prefIntent = preference.getIntent(); if (isSafeIntent(pm, prefIntent, acccountType)) { mFragment.getActivity().startActivityAsUser(prefIntent, mUserHandle); } else { android.util.Log.e(com.android.settings.accounts.AccountTypePreferenceLoader.TAG, ((""Refusing to launch authenticator intent because"" + ""it exploits Settings permissions: "") + prefIntent)); } return true; } }); } } i++; } }",2d49b096c5b31341921470893d691746f32b0d5f,"updatePreferenceIntents(android.support.v7.preference.PreferenceGroup,java.lang.String,android.accounts.Account)",316843,475,481
236560,server_jack-server_src_com_android_jack_server_JackHttpServer.java,42.0,private long startingTask(@javax.annotation.Nonnull com.android.jack.server.ServerInfo info) throws com.android.jack.server.JackHttpServer.ServerClosedException { long id; synchronized(lock) { if (shuttingDown) { throw new com.android.jack.server.JackHttpServer.ServerClosedException(); } id = info.totalLocal; (info.totalLocal)++; if ((info.currentLocal) == 0) { cancelTimer(); } (info.currentLocal)++; if ((info.currentLocal) > (info.maxLocal)) { info.maxLocal = info.currentLocal; } } return id; },39f8de779090940b53e1a0bf8d8f4c82177ccbb0,private long startingTask(@javax.annotation.Nonnull com.android.jack.server.ServerInfo info) throws com.android.jack.server.JackHttpServer.ServerClosedException { long id; synchronized(lock) { if (shuttingDown) { throw new com.android.jack.server.JackHttpServer.ServerClosedException(); } id = info.totalLocal; (info.totalLocal)++; if ((info.currentLocal) == 0) { cancelTimer(); exitIdleMode(); } (info.currentLocal)++; if ((info.currentLocal) > (info.maxLocal)) { info.maxLocal = info.currentLocal; } } return id; },d7c74653529da4cf3936dc9f289896eb32b0218c,startingTask(com.android.jack.server.ServerInfo),startingTask(com.android.jack.server.ServerInfo),13,47,private long startingTask(@javax.annotation.Nonnull com.android.jack.server.ServerInfo info) throws com.android.jack.server.JackHttpServer.ServerClosedException { long id; synchronized(lock) { if (shuttingDown) { throw new com.android.jack.server.JackHttpServer.ServerClosedException(); } id = info.totalLocal; (info.totalLocal)++; setServerMode(ServerMode.WORK); (info.currentLocal)++; if ((info.currentLocal) > (info.maxLocal)) { info.maxLocal = info.currentLocal; } } return id; },d16f15bfeee68b146238e613f186c01c00590cd3,startingTask(com.android.jack.server.ServerInfo),417497,145,135
548206,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,81.0,"synchronized int getConnectionState(android.bluetooth.BluetoothDevice device) { if ((mCurrentDevice) == null) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } if (!(mCurrentDevice.equals(device))) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; } com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState == (mDisconnecting)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, (""getConnectionState: bad currentState: "" + currentState)); return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }",92b0e89715f72e1f79463b1248964fe971f253ba,synchronized int getConnectionState() { com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState == (mDisconnecting)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; },6d7888a97c882c7cac7d9d486a198f94188fd645,getConnectionState(android.bluetooth.BluetoothDevice),getConnectionState(),34,13,@android.support.annotation.VisibleForTesting public synchronized int getConnectionState() { com.android.bluetooth.hfp.HeadsetStateMachine.HeadsetStateBase state = ((com.android.bluetooth.hfp.HeadsetStateMachine.HeadsetStateBase) (getCurrentState())); if (state == null) { return android.bluetooth.BluetoothHeadset.STATE_DISCONNECTED; } return state.getConnectionStateInt(); },549e1dc17351d8f040af27afb94135e9b87d30ab,getConnectionState(),210763,123,87
243440,test_458-checker-instruction-simplification_src_Main.java,53.0,public static int doubleConditionEqualZero(double d) { return (d > 42.0) != false ? 13 : 54; },712ee3b9925aa2c1e32dd2d295a73d181503cdf5,public static int doubleConditionEqualZero(double d) { if (Main.doThrow) { throw new java.lang.Error(); } return (d > 42.0) != false ? 13 : 54; },ea0f0432cfa72b511c1b5e31a02f05defb662a56,doubleConditionEqualZero(double),doubleConditionEqualZero(double),3,34,public static int $noinline$doubleConditionEqualZero(double d) { if (Main.doThrow) { throw new java.lang.Error(); } return (d > 42.0) != false ? 13 : 54; },d025b6a0ff7de53342527ecc48801b3264cec6a9,$noinline$doubleConditionEqualZero(double),118236,48,53
321635,src_com_android_networkrecommendation_WifiWakeupController.java,3.0,"private void handleConfiguredNetworksChanged() { java.util.List<android.net.wifi.WifiConfiguration> wifiConfigurations = mWifiManager.getConfiguredNetworks(); if (wifiConfigurations == null) { return; } mSavedNetworks.clear(); mSavedSsids.clear(); for (int i = 0; i < (wifiConfigurations.size()); i++) { android.net.wifi.WifiConfiguration wifiConfiguration = wifiConfigurations.get(i); if ((((wifiConfiguration.status) != (WifiConfiguration.Status.ENABLED)) || (wifiConfiguration.ephemeral)) || (wifiConfiguration.useExternalScores)) { continue; } if ((wifiConfiguration.hasNoInternetAccess()) || (wifiConfiguration.noInternetAccessExpected)) { continue; } java.lang.String ssid = android.net.wifi.WifiInfo.removeDoubleQuotes(wifiConfiguration.SSID); if (android.text.TextUtils.isEmpty(ssid)) { continue; } mSavedNetworks.put(ssid, wifiConfiguration); mSavedSsids.add(ssid); } mSavedSsidsInLastScan.retainAll(mSavedSsids); }",e4173bfa50d83e69ac18592fad30ae789dcbdb1b,"private void handleConfiguredNetworksChanged() { java.util.List<android.net.wifi.WifiConfiguration> wifiConfigurations = mWifiManager.getConfiguredNetworks(); if (wifiConfigurations == null) { return; } mSavedNetworks.clear(); mSavedSsids.clear(); for (int i = 0; i < (wifiConfigurations.size()); i++) { android.net.wifi.WifiConfiguration wifiConfiguration = wifiConfigurations.get(i); if (((wifiConfiguration.status) != (WifiConfiguration.Status.ENABLED)) || (wifiConfiguration.useExternalScores)) { continue; } if (wifiConfiguration.hasNoInternetAccess()) { continue; } java.lang.String ssid = com.android.networkrecommendation.WifiConfigurationUtil.removeDoubleQuotes(wifiConfiguration); if (android.text.TextUtils.isEmpty(ssid)) { continue; } mSavedNetworks.put(ssid, wifiConfiguration); mSavedSsids.add(ssid); } mSavedSsidsInLastScan.retainAll(mSavedSsids); }",f2dd57c5f07b5f2ff48c45545fd80f46070031e3,handleConfiguredNetworksChanged(),handleConfiguredNetworksChanged(),5,3,"private void handleConfiguredNetworksChanged() { java.util.List<android.net.wifi.WifiConfiguration> wifiConfigurations = mWifiManager.getConfiguredNetworks(); if (wifiConfigurations == null) { return; } mSavedNetworks.clear(); mSavedSsids.clear(); for (int i = 0; i < (wifiConfigurations.size()); i++) { android.net.wifi.WifiConfiguration wifiConfiguration = wifiConfigurations.get(i); if (((wifiConfiguration.status) != (WifiConfiguration.Status.ENABLED)) || (wifiConfiguration.useExternalScores)) { continue; } if ((wifiConfiguration.hasNoInternetAccess()) || (wifiConfiguration.isNoInternetAccessExpected())) { continue; } java.lang.String ssid = com.android.networkrecommendation.WifiConfigurationUtil.removeDoubleQuotes(wifiConfiguration); if (android.text.TextUtils.isEmpty(ssid)) { continue; } mSavedNetworks.put(ssid, wifiConfiguration); mSavedSsids.add(ssid); } mSavedSsidsInLastScan.retainAll(mSavedSsids); }",e73d8e175cf2f4bfc522369732e40bc878364247,handleConfiguredNetworksChanged(),106718,232,244
593046,src_java_com_android_internal_telephony_euicc_EuiccCardController.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); }",53e6e0c92639f2d1a53b591fc6d0c0afe7ba567d,,onResult(android.service.euicc.EuiccProfileInfo[]),8,6,"@java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] result) { try { callback.onComplete(EuiccCardManager.RESULT_OK, result); } catch (android.os.RemoteException exception) { throw exception.rethrowFromSystemServer(); } }",78c740378360ce894168b3c32ff57e42431a835b,onResult(android.service.euicc.EuiccProfileInfo[]),495765,45,67
509905,apps_CtsVerifier_src_com_android_cts_verifier_camera_its_ItsService.java,47.0,"public void openCameraDevice(int cameraId) throws com.android.cts.verifier.camera.its.ItsException { com.android.cts.verifier.camera.its.Logt.i(com.android.cts.verifier.camera.its.ItsService.TAG, java.lang.String.format(""Opening camera %d"", cameraId)); java.lang.String[] devices; try { devices = mCameraManager.getCameraIdList(); if ((devices == null) || ((devices.length) == 0)) { throw new com.android.cts.verifier.camera.its.ItsException(""No camera devices""); } } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to get device ID list"", e); } try { mCamera = mBlockingCameraManager.openCamera(devices[cameraId], mCameraListener, mCameraHandler); mCameraCharacteristics = mCameraManager.getCameraCharacteristics(devices[cameraId]); android.util.Size maxYuvSize = com.android.cts.verifier.camera.its.ItsUtils.getYuvOutputSizes(mCameraCharacteristics)[0]; int quota = (((maxYuvSize.getWidth()) * (maxYuvSize.getHeight())) * 2) * 3; mSocketQueueQuota = new java.util.concurrent.Semaphore(quota, true); } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to open camera"", e); } catch (com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to open camera (after blocking)"", e); } mSocketRunnableObj.sendResponse(""cameraOpened"", """"); }",db6f9e69515320464ce2824fc80e51bc42ba5104,"public void openCameraDevice(int cameraId) throws com.android.cts.verifier.camera.its.ItsException { com.android.cts.verifier.camera.its.Logt.i(com.android.cts.verifier.camera.its.ItsService.TAG, java.lang.String.format(""Opening camera %d"", cameraId)); java.lang.String[] devices; try { devices = mCameraManager.getCameraIdList(); if ((devices == null) || ((devices.length) == 0)) { throw new com.android.cts.verifier.camera.its.ItsException(""No camera devices""); } if ((mMemoryQuota) == (-1)) { for (java.lang.String camId : devices) { android.hardware.camera2.CameraCharacteristics chars = mCameraManager.getCameraCharacteristics(camId); android.util.Size maxYuvSize = com.android.cts.verifier.camera.its.ItsUtils.getYuvOutputSizes(mCameraCharacteristics)[0]; int quota = (((maxYuvSize.getWidth()) * (maxYuvSize.getHeight())) * 4) * 3; if (quota > (mMemoryQuota)) { mMemoryQuota = quota; } } } } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to get device ID list"", e); } try { mCamera = mBlockingCameraManager.openCamera(devices[cameraId], mCameraListener, mCameraHandler); mCameraCharacteristics = mCameraManager.getCameraCharacteristics(devices[cameraId]); mSocketQueueQuota = new java.util.concurrent.Semaphore(mMemoryQuota, true); } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to open camera"", e); } catch (com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to open camera (after blocking)"", e); } mSocketRunnableObj.sendResponse(""cameraOpened"", """"); }",c08e31938932ae7828b384a745723f3d6e1a0dd2,openCameraDevice(int),openCameraDevice(int),2,47,"public void openCameraDevice(int cameraId) throws com.android.cts.verifier.camera.its.ItsException { com.android.cts.verifier.camera.its.Logt.i(com.android.cts.verifier.camera.its.ItsService.TAG, java.lang.String.format(""Opening camera %d"", cameraId)); java.lang.String[] devices; try { devices = mCameraManager.getCameraIdList(); if ((devices == null) || ((devices.length) == 0)) { throw new com.android.cts.verifier.camera.its.ItsException(""No camera devices""); } if ((mMemoryQuota) == (-1)) { for (java.lang.String camId : devices) { android.hardware.camera2.CameraCharacteristics chars = mCameraManager.getCameraCharacteristics(camId); android.util.Size maxYuvSize = com.android.cts.verifier.camera.its.ItsUtils.getYuvOutputSizes(chars)[0]; int quota = (((maxYuvSize.getWidth()) * (maxYuvSize.getHeight())) * 4) * 3; if (quota > (mMemoryQuota)) { mMemoryQuota = quota; } } } } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to get device ID list"", e); } try { mCamera = mBlockingCameraManager.openCamera(devices[cameraId], mCameraListener, mCameraHandler); mCameraCharacteristics = mCameraManager.getCameraCharacteristics(devices[cameraId]); mSocketQueueQuota = new java.util.concurrent.Semaphore(mMemoryQuota, true); } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to open camera"", e); } catch (com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException e) { throw new com.android.cts.verifier.camera.its.ItsException(""Failed to open camera (after blocking)"", e); } mSocketRunnableObj.sendResponse(""cameraOpened"", """"); }",f65400ab13d6e1dd86d20d90103f0a914336f27a,openCameraDevice(int),231676,489,487
90190,build-system_builder_src_main_java_com_android_builder_internal_compiler_PreDexCache.java,,,,@java.lang.Override public int hashCode() { int result = mSourceFile.hashCode(); result = (31 * result) + (mBuildToolsRevision.hashCode()); return result; },8438885928b4fb9a7b87bfbcf60cc4d4d38a4d3f,,hashCode(),5,6,"@java.lang.Override public int hashCode() { return com.google.common.base.Objects.hashCode(mSourceFile, mBuildToolsRevision); }",f5ca986f9cad89d227bdf62ebc518c1cc3662b59,hashCode(),515856,39,33
303520,src_java_com_android_internal_telephony_DefaultPhoneNotifier.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void notifySimActivationStateChanged(com.android.internal.telephony.Phone sender, android.telephony.SimActivationState activationState) { try { mRegistry.notifySimActivationStateChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), activationState); } catch (android.os.RemoteException ex) { } }",f937898ef9941c9f6bd62df5a690cbf20e4a42cc,,"notifySimActivationStateChanged(com.android.internal.telephony.Phone,android.telephony.SimActivationState)",15,14,"@java.lang.Override public void notifyDataActivationStateChanged(com.android.internal.telephony.Phone sender, int activationState) { try { mRegistry.notifySimActivationStateChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), PhoneConstants.SIM_ACTIVATION_TYPE_DATA, activationState); } catch (android.os.RemoteException ex) { } }",c02aa0aadc953e6976056ca7a673b061629920b9,"notifyDataActivationStateChanged(com.android.internal.telephony.Phone,int)",510564,75,83
20204,sdkmanager_app_src_com_android_sdkmanager_CommandLineProcessor.java,30.0,"protected void define(com.android.sdkmanager.CommandLineProcessor.Mode mode, boolean mandatory, java.lang.String verb, java.lang.String directObject, java.lang.String shortName, java.lang.String longName, java.lang.String description, java.lang.Object defaultValue) { assert !(mandatory && (mode == (com.android.sdkmanager.CommandLineProcessor.Mode.BOOLEAN))); if (directObject == null) { directObject = com.android.sdkmanager.CommandLineProcessor.NO_VERB_OBJECT; } java.lang.String key = (((verb + ""/"") + directObject) + ""/"") + longName; mArguments.put(key, new com.android.sdkmanager.CommandLineProcessor.Arg(mode, mandatory, verb, directObject, shortName, longName, description, defaultValue)); }",1f6f2018061f9d8a8c1b1442a6ef29fb060e182b,"protected void define(com.android.sdkmanager.CommandLineProcessor.Mode mode, boolean mandatory, java.lang.String verb, java.lang.String directObject, java.lang.String shortName, java.lang.String longName, java.lang.String description, java.lang.Object defaultValue) { assert !(mandatory && (mode == (com.android.sdkmanager.CommandLineProcessor.Mode.BOOLEAN))); assert shortName != null; assert longName != null; assert ((shortName != null) && ((shortName.length()) > 0)) || ((longName != null) && ((longName.length()) > 0)); if (directObject == null) { directObject = com.android.sdkmanager.CommandLineProcessor.NO_VERB_OBJECT; } java.lang.String key = (((verb + ""/"") + directObject) + ""/"") + longName; mArguments.put(key, new com.android.sdkmanager.CommandLineProcessor.Arg(mode, mandatory, verb, directObject, shortName, longName, description, defaultValue)); }",9db4cfccd8c622b1d8f57be738c23717820266e5,"define(com.android.sdkmanager.CommandLineProcessor$Mode,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)","define(com.android.sdkmanager.CommandLineProcessor$Mode,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)",4,30,"protected void define(com.android.sdkmanager.CommandLineProcessor.Mode mode, boolean mandatory, java.lang.String verb, java.lang.String directObject, java.lang.String shortName, java.lang.String longName, java.lang.String description, java.lang.Object defaultValue) { assert !(mandatory && (mode == (com.android.sdkmanager.CommandLineProcessor.Mode.BOOLEAN))); assert shortName != null; assert longName != null; assert ((shortName.length()) > 0) || ((longName.length()) > 0); if (directObject == null) { directObject = com.android.sdkmanager.CommandLineProcessor.NO_VERB_OBJECT; } java.lang.String key = (((verb + ""/"") + directObject) + ""/"") + longName; mArguments.put(key, new com.android.sdkmanager.CommandLineProcessor.Arg(mode, mandatory, verb, directObject, shortName, longName, description, defaultValue)); }",720d51c9c5e7f49a5044a4088749c543c342ec96,"define(com.android.sdkmanager.CommandLineProcessor$Mode,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)",199796,230,214
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAbs.java,,,,"private void verifyResultsAbsInt4(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 4]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 4]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 4; j++) { android.renderscript.cts.TestAbs.ArgumentsIntUint args = new android.renderscript.cts.TestAbs.ArgumentsIntUint(); args.inValue = arrayInValue[((i * 4) + j)]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int actualOut = arrayOut[((i * 4) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals((((((((((((((((((""Incorrect output for checkAbsInt4"" + (relaxed ? ""_relaxed"" : """")) + "" @["") + i) + "", "") + j) + ""] with ulf:"") + ulf) + "".\n"") + ""Input inValue:"") + (args.inValue)) + ""\n"") + ""Expected output out:"") + (args.out)) + ""\n"") + ""Actual output out:"") + actualOut) + ""\n""), args.out, actualOut, ulpf); } } }",2b8e06acae3e4ea2385f7239afda385a4cf7e781,,"verifyResultsAbsInt4(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",9,7,"private void verifyResultsAbsInt4Uint4(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 4]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 4]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 4; j++) { android.renderscript.cts.TestAbs.ArgumentsIntUint args = new android.renderscript.cts.TestAbs.ArgumentsIntUint(); args.inValue = arrayInValue[((i * 4) + j)]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 4) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format(""Input inValue: %d"", args.inValue)); message.append(""\n""); message.append(java.lang.String.format(""Expected output out: %x"", args.out)); message.append(""\n""); message.append(java.lang.String.format(""Actual output out: %x"", arrayOut[((i * 4) + j)])); if ((args.out) != (arrayOut[((i * 4) + j)])) { message.append("" FAIL""); } message.append(""\n""); assertTrue((((""Incorrect output for checkAbsInt4Uint4"" + (relaxed ? ""_relaxed"" : """")) + "":\n"") + (message.toString())), valid); } } } }",0b50cf456114a25fe7951c1682a999b838d615f9,"verifyResultsAbsInt4Uint4(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",143034,373,432
592395,services_core_java_com_android_server_pm_PackageDexOptimizer.java,11.0,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = ((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0); return adjustDexoptFlags(dexFlags); }",42afd0b94b6cf9ae53d1a4e01166ec3c63799e06,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = (((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | (info.isSystemApp() ? com.android.server.pm.Installer.DEXOPT_DISABLE_HIDDEN_API_CHECKS : 0); return adjustDexoptFlags(dexFlags); }",9121a12ac04322e5f68c02235bd541ac3d2ab336,"getDexFlags(android.content.pm.ApplicationInfo,java.lang.String,com.android.server.pm.dex.DexoptOptions)","getDexFlags(android.content.pm.ApplicationInfo,java.lang.String,com.android.server.pm.dex.DexoptOptions)",6,11,"private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (info.isAllowedToUseHiddenApi()) ? com.android.server.pm.Installer.DEXOPT_DISABLE_HIDDEN_API_CHECKS : 0; int dexFlags = (((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | hiddenApiFlag; return adjustDexoptFlags(dexFlags); }",3b7445e4e8a1265b195761dede1d8b01736daa8d,"getDexFlags(android.content.pm.ApplicationInfo,java.lang.String,com.android.server.pm.dex.DexoptOptions)",292630,314,325
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,18.0,"public void skip(int i) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.skip(i); return; } int res = (mPos) + i; if ((res < 0) || (res > (mLen))) { throw new android.support.v8.renderscript.RSIllegalArgumentException((""out of range argument: "" + i)); } mPos = res; }",047a421379bef71ea809deb3d7422684a0a00e44,"public void skip(int i) { if (shouldThunk()) { mN.skip(i); return; } int res = (mPos) + i; if ((res < 0) || (res > (mLen))) { throw new android.support.v8.renderscript.RSIllegalArgumentException((""out of range argument: "" + i)); } mPos = res; }",3e3a04fbcdb74242301f97bd38ef174473c9cb2f,skip(int),skip(int),5,17,"public void skip(int i) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.skip(i); return; } int res = (mPos) + i; if ((res < 0) || (res > (mLen))) { throw new android.support.v8.renderscript.RSIllegalArgumentException((""out of range argument: "" + i)); } mPos = res; }",047a421379bef71ea809deb3d7422684a0a00e44,skip(int),205138,85,98
91995,luni_src_main_java_libcore_io_Os.java,11.0,public void fsync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,4e6a25af28e3c4e8ca8337e6a16cf8f97ccb40cd,public void fsync(java.io.FileDescriptor fd) throws android.os.ErrnoException;,f03bf0fe7b2c50c49c609630de91023cbb091a2a,fsync(java.io.FileDescriptor),fsync(java.io.FileDescriptor),3,12,public void fsync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,9d84be61ecdac6f2b686f15309c6c1c9ebed8eba,fsync(java.io.FileDescriptor),170182,21,21
354498,services_core_java_com_android_server_connectivity_Tethering.java,75.0,@java.lang.Override public void enter() { turnOnMasterTetherSettings(); simChange.startListening(); mUpstreamNetworkMonitor.start(); mOffloadController.start(); chooseUpstreamType(true); mTryCell = false; },d06be13d09a18a7509d4466c115cb0c41d74a233,@java.lang.Override public void enter() { turnOnMasterTetherSettings(); simChange.startListening(); mUpstreamNetworkMonitor.start(); mOffloadController.start(); if (upstreamWanted()) { chooseUpstreamType(true); mTryCell = false; } },f1d1c7f296ea90cef3be52bb8cc5cc90a2f6ec38,enter(),enter(),14,78,@java.lang.Override public void enter() { turnOnMasterTetherSettings(); simChange.startListening(); mUpstreamNetworkMonitor.start(); mOffloadController.start(); if (upstreamWanted()) { mUpstreamWanted = true; chooseUpstreamType(true); mTryCell = false; } },4b1913a5d95c5adf8575112104766de2a06f2cbf,enter(),125039,60,67
91995,luni_src_main_java_libcore_io_Os.java,22.0,"public int write(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer) throws java.io.InterruptedIOException, libcore.io.ErrnoException;",68e4d73ec24c5b3ea8e378e32f386f1c1d0cd967,"public int write(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer) throws android.os.ErrnoException, java.io.InterruptedIOException;",59ea5a4e0527c07bac46bad90a8b69a988d4f497,"write(java.io.FileDescriptor,java.nio.ByteBuffer)","write(java.io.FileDescriptor,java.nio.ByteBuffer)",3,22,"public int write(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer) throws android.system.ErrnoException, java.io.InterruptedIOException;",00aaf532b3e5d4751a0099954bddf72fb6864f00,"write(java.io.FileDescriptor,java.nio.ByteBuffer)",170233,34,34
204826,jack-tests_tests_com_android_jack_java8_lambda_test037_jack_Tests.java,,,,public int testAdd(int a) { com.android.jack.java8.lambda.test037.jack.I i = () -> a + (field); return i.addOutsideValue(); },acbeba80361b82dbad845cf6c5ea94fef94d26b3,,testAdd(int),8,0,@org.junit.Test public void test001() { com.android.jack.java8.lambda.test037.jack.I i = ((com.android.jack.java8.lambda.test037.jack.I & java.io.Serializable) (() -> 10)); },5a83ae620fd362b648f114030e265dd87d75ce06,test001(),22849,44,62
323011,wifi_tests_src_android_net_wifi_hotspot2_pps_PolicyTest.java,,,,"@org.junit.Test public void validatePolicyWithInvalidServerUri() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy(); byte[] rawUriBytes = new byte[(android.net.wifi.hotspot2.pps.PolicyTest.MAX_URI_BYTES) + 1]; policy.policyServerUri = new java.lang.String(rawUriBytes, java.nio.charset.StandardCharsets.UTF_8); assertFalse(policy.validate()); }",8de9993ee536e1154a8bb5016e957828c3f9d177,,validatePolicyWithInvalidServerUri(),7,14,@org.junit.Test public void validatePolicyWithInvalidPolicyUpdate() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy(); policy.policyUpdate = new android.net.wifi.hotspot2.pps.UpdateParameter(); assertFalse(policy.validate()); },39d221bd394fddcfab3ce898ad7a12f7f9a39822,validatePolicyWithInvalidPolicyUpdate(),168299,120,81
589613,services_core_java_com_android_server_net_NetworkStatsService.java,65.0,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException(((""Calling package "" + (mCallingPackage)) + "" cannot access tag information from a different uid"")); } }",169258c00842e9c0c01683bd72d7cad9ad083cc1,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_ALL, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException(((""Calling package "" + (mCallingPackage)) + "" cannot access tag information from a different uid"")); } }",157d8af33b06733ad857e2b540b44a5c9d81b8a2,"getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)","getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)",6,65,"@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException(((""Calling package "" + (mCallingPackage)) + "" cannot access tag information from a different uid"")); } }",169258c00842e9c0c01683bd72d7cad9ad083cc1,"getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)",53458,209,183
96683,gradle-import_src_main_java_com_android_tools_gradle_eclipse_GradleImport.java,45.0,"private void exportGradleWrapper(@com.android.annotations.NonNull java.io.File destDir) throws java.io.IOException { if (((mGradleWrapperLocation) != null) && (mGradleWrapperLocation.exists())) { java.io.File gradlewDest = new java.io.File(destDir, ""gradlew""); copyDir(new java.io.File(mGradleWrapperLocation, ""gradlew""), gradlewDest, null); boolean madeExecutable = gradlewDest.setExecutable(true); if (!madeExecutable) { reportWarning(((com.android.tools.gradle.eclipse.ImportModule) (null)), gradlewDest, ""Could not make gradle wrapper script executable""); } copyDir(new java.io.File(mGradleWrapperLocation, ""gradlew.bat""), new java.io.File(destDir, ""gradlew.bat""), null); copyDir(new java.io.File(mGradleWrapperLocation, ""gradle""), new java.io.File(destDir, ""gradle""), null); } }",fe55df500780be644226445b76fb02a8c23a05dd,"private void exportGradleWrapper(@com.android.annotations.NonNull java.io.File destDir) throws java.io.IOException { if (((mGradleWrapperLocation) != null) && (mGradleWrapperLocation.exists())) { java.io.File gradlewDest = new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX); copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX), gradlewDest, null); boolean madeExecutable = gradlewDest.setExecutable(true); if (!madeExecutable) { reportWarning(((com.android.tools.gradle.eclipse.ImportModule) (null)), gradlewDest, ""Could not make gradle wrapper script executable""); } copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FN_GRADLE_WRAPPER_WIN), new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_WIN), null); copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX), new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX), null); } }",6731bb0a40f5ddc309ad9ccd28757fc914f28122,exportGradleWrapper(java.io.File),exportGradleWrapper(java.io.File),10,45,"private void exportGradleWrapper(@com.android.annotations.NonNull java.io.File destDir) throws java.io.IOException { if (((mGradleWrapperLocation) != null) && (mGradleWrapperLocation.exists())) { java.io.File gradlewDest = new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX); copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX), gradlewDest, null); boolean madeExecutable = gradlewDest.setExecutable(true); if (!madeExecutable) { reportWarning(((com.android.tools.gradle.eclipse.ImportModule) (null)), gradlewDest, ""Could not make gradle wrapper script executable""); } copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FN_GRADLE_WRAPPER_WIN), new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_WIN), null); copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FD_GRADLE), new java.io.File(destDir, com.android.SdkConstants.FD_GRADLE), null); } }",ecf3364fcbe8ac5e24272ce0b01577628b264db6,exportGradleWrapper(java.io.File),386188,296,288
243440,test_458-checker-instruction-simplification_src_Main.java,13.0,public static int intConditionNotEqualOne(int i) { return (i > 42) == (Main.$inline$true()) ? 13 : 54; },0b90495255e75e18f48d9774488eb4aa2de988f5,public static int intConditionNotEqualOne(int i) { if (Main.doThrow) { throw new java.lang.Error(); } return (i > 42) == (Main.$inline$true()) ? 13 : 54; },ec71510a0a4036d4990b28c96f7f8b8980e1de79,intConditionNotEqualOne(int),intConditionNotEqualOne(int),3,18,public static int $noinline$intConditionNotEqualOne(int i) { if (Main.doThrow) { throw new java.lang.Error(); } return (i > 42) == (Main.$inline$true()) ? 13 : 54; },138ffd1fbcaa68724b0705ee6f624093977763a2,$noinline$intConditionNotEqualOne(int),118173,52,57
640285,tests_net_java_com_android_server_connectivity_TetheringTest.java,47.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }",0c4acc39bcfdf1bd380d168c8f2bd004ea74d21f,,sendIPv6TetherUpdates(android.net.NetworkState),10,21,"private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.ipv6CoordinatorNotifyList) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }",d2827c39417877d918dda5097801ff8ff8244524,sendIPv6TetherUpdates(android.net.NetworkState),251123,223,222
434740,src_java_com_android_internal_telephony_PhoneSubInfoController.java,36.0,"public java.lang.String[] getIsimImpu() { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, ""Requires READ_PRIVILEGED_PHONE_STATE""); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpu(); } else { return null; } }",f13a1bd04a3fdbb2859183427d1d4999d23f3b88,"public java.lang.String[] getIsimImpu(int subId) { com.android.internal.telephony.Phone phone = getPhone(subId); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, ""Requires READ_PRIVILEGED_PHONE_STATE""); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpu(); } else { return null; } }",847ff0758e79e9749b44c0f992877c481adabb00,getIsimImpu(),getIsimImpu(int),2,3,"public java.lang.String[] getIsimImpu(int subId) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone != null) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, ""Requires READ_PRIVILEGED_PHONE_STATE""); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpu(); } else { return null; } } else { loge((""getIsimImpu phone is null for Subscription:"" + subId)); return null; } }",6b84975dcc8c050afb08fe8609a9a448299ebaef,getIsimImpu(int),169277,123,156
175765,luni_src_main_java_java_math_BigInt.java,17.0,"void putBigEndian(byte[] a, boolean neg) { this.makeValid(); java.math.NativeBN.BN_bin2bn(a, a.length, neg, this.bignum); }",efc8eb72e43636c046624cff82cddb45b4c8c604,"void putBigEndian(byte[] a, boolean neg) { this.makeValid(); java.math.NativeBN.BN_bin2bn(a, a.length, neg, this.nativePtr); }",220cb8d336fd691aa8fca962ab0ddd2a2eebbec9,"putBigEndian(byte[],boolean)","putBigEndian(byte[],boolean)",10,17,"void putBigEndian(byte[] a, boolean neg) { this.makeValid(); java.math.NativeBN.BN_bin2bn(a, a.length, neg, this.bignum); }",efc8eb72e43636c046624cff82cddb45b4c8c604,"putBigEndian(byte[],boolean)",337166,48,48
42617,ddms_libs_ddmlib_src_com_android_ddmlib_HandleHello.java,1.0,"private static void handleHELO(com.android.ddmlib.Client client, java.nio.ByteBuffer data) { int version; int pid; int vmIdentLen; int appNameLen; java.lang.String vmIdent; java.lang.String appName; version = data.getInt(); pid = data.getInt(); vmIdentLen = data.getInt(); appNameLen = data.getInt(); vmIdent = getString(data, vmIdentLen); appName = getString(data, appNameLen); com.android.ddmlib.Log.d(""ddm-hello"", ((((((((""HELO: v="" + version) + "", pid="") + pid) + "", vm='"") + vmIdent) + ""', app='"") + appName) + ""'"")); com.android.ddmlib.ClientData cd = client.getClientData(); synchronized(cd) { if ((cd.getPid()) == pid) { cd.setVmIdentifier(vmIdent); cd.setClientDescription(appName); cd.isDdmAware(true); } else { com.android.ddmlib.Log.e(""ddm-hello"", ((((""Received pid ("" + pid) + "") does not match client pid ("") + (cd.getPid())) + "")"")); } } client = checkDebuggerPortForAppName(client, appName); if (client != null) { client.update(Client.CHANGE_NAME); } }",4b0b56b19603fe86c48cee997a2494a1f52f370b,"private static void handleHELO(com.android.ddmlib.Client client, java.nio.ByteBuffer data) { int version; int pid; int vmIdentLen; int appNameLen; java.lang.String vmIdent; java.lang.String appName; version = data.getInt(); pid = data.getInt(); vmIdentLen = data.getInt(); appNameLen = data.getInt(); vmIdent = getString(data, vmIdentLen); appName = getString(data, appNameLen); int userId = -1; boolean validUserId = false; if (data.hasRemaining()) { try { userId = data.getInt(); validUserId = true; } catch (java.nio.BufferUnderflowException e) { } } com.android.ddmlib.Log.d(""ddm-hello"", ((((((((""HELO: v="" + version) + "", pid="") + pid) + "", vm='"") + vmIdent) + ""', app='"") + appName) + ""'"")); com.android.ddmlib.ClientData cd = client.getClientData(); synchronized(cd) { if ((cd.getPid()) == pid) { cd.setVmIdentifier(vmIdent); cd.setClientDescription(appName); cd.isDdmAware(true); if (validUserId) { cd.setUserId(userId); } } else { com.android.ddmlib.Log.e(""ddm-hello"", ((((""Received pid ("" + pid) + "") does not match client pid ("") + (cd.getPid())) + "")"")); } } client = checkDebuggerPortForAppName(client, appName); if (client != null) { client.update(Client.CHANGE_NAME); } }",465cceae70b50b593fe83e7d86a4185271ceeab3,"handleHELO(com.android.ddmlib.Client,java.nio.ByteBuffer)","handleHELO(com.android.ddmlib.Client,java.nio.ByteBuffer)",2,1,"private static void handleHELO(com.android.ddmlib.Client client, java.nio.ByteBuffer data) { int version; int pid; int vmIdentLen; int appNameLen; java.lang.String vmIdent; java.lang.String appName; version = data.getInt(); pid = data.getInt(); vmIdentLen = data.getInt(); appNameLen = data.getInt(); vmIdent = getString(data, vmIdentLen); appName = getString(data, appNameLen); int userId = -1; boolean validUserId = false; if (data.hasRemaining()) { try { userId = data.getInt(); validUserId = true; } catch (java.nio.BufferUnderflowException e) { int expectedPacketLength = (20 + (appNameLen * 2)) + (vmIdentLen * 2); com.android.ddmlib.Log.e(""ddm-hello"", ""Insufficient data in HELO chunk to retrieve user id.""); com.android.ddmlib.Log.e(""ddm-hello"", (""Actual chunk length: "" + (data.capacity()))); com.android.ddmlib.Log.e(""ddm-hello"", (""Expected chunk length: "" + expectedPacketLength)); } } com.android.ddmlib.Log.d(""ddm-hello"", ((((((((""HELO: v="" + version) + "", pid="") + pid) + "", vm='"") + vmIdent) + ""', app='"") + appName) + ""'"")); com.android.ddmlib.ClientData cd = client.getClientData(); synchronized(cd) { if ((cd.getPid()) == pid) { cd.setVmIdentifier(vmIdent); cd.setClientDescription(appName); cd.isDdmAware(true); if (validUserId) { cd.setUserId(userId); } } else { com.android.ddmlib.Log.e(""ddm-hello"", ((((""Received pid ("" + pid) + "") does not match client pid ("") + (cd.getPid())) + "")"")); } } client = checkDebuggerPortForAppName(client, appName); if (client != null) { client.update(Client.CHANGE_NAME); } }",2762b4fd64d2cd68c5f857174c98d0e416ef04b1,"handleHELO(com.android.ddmlib.Client,java.nio.ByteBuffer)",371165,370,481
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,,android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); },d5288fffd214619b010ec204aad732a77417af00,,getServiceComponent(),4,5,public android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); },b7cc5ca32c19d5c999a96ba6c3705850615dcf8a,getServiceComponent(),302987,17,18
594260,telephony_java_android_telephony_euicc_EuiccManager.java,14.0,"public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",5f68ae412a44b7c913e2f6ca38a5689b7d081faa,"public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",e492d0442dcc33fb28eb68b60f5d4de108835ce1,"deleteSubscription(int,android.app.PendingIntent)","deleteSubscription(int,android.app.PendingIntent)",3,14,"public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",d8f7a7e4a260540fd0c488e01ee4930cec9a2108,"deleteSubscription(int,android.app.PendingIntent)",409155,116,88
43133,eclipse_plugins_com.android.ide.eclipse.gldebugger_src_com_android_ide_eclipse_gltrace_views_SaveImageAction.java,,,,"@java.lang.Override public void run() { org.eclipse.swt.widgets.FileDialog fd = new org.eclipse.swt.widgets.FileDialog(mImageCanvas.getShell(), org.eclipse.swt.SWT.SAVE); fd.setFilterExtensions(new java.lang.String[]{ ""*.png"" }); if ((com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath) != null) { fd.setFilterPath(com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath); } java.lang.String path = fd.open(); if (path == null) { return; } com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath = new java.io.File(path).getParent(); mImageCanvas.exportImageTo(path); }",7e80cb33a4e6bc2c47fac6d355645a88238f8823,,run(),2,0,"@java.lang.Override public void run() { org.eclipse.swt.widgets.FileDialog fd = new org.eclipse.swt.widgets.FileDialog(mImageCanvas.getShell(), org.eclipse.swt.SWT.SAVE); fd.setFilterExtensions(new java.lang.String[]{ ""*.png"" }); if ((com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath) != null) { fd.setFilterPath(com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath); } java.lang.String path = fd.open(); if (path == null) { return; } java.io.File f = new java.io.File(path); com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath = f.getParent(); mImageCanvas.exportImageTo(f); }",ccc2be377d90e39ce5272108464f507e28842120,run(),159180,192,201
396032,services_core_java_com_android_server_connectivity_tethering_TetherInterfaceStateMachine.java,3.0,"@java.lang.Override public boolean processMessage(android.os.Message message) { if (super.processMessage(message)) return true; maybeLogMessage(this, message.what); switch (message.what) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, ""CMD_TETHER_REQUESTED while in local hotspot mode.""); break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_CONNECTION_CHANGED : break; default : return false; } return true; }",df648421492d86040f02af0f59db870357fb09e4,"@java.lang.Override public boolean processMessage(android.os.Message message) { if (super.processMessage(message)) return true; maybeLogMessage(this, message.what); switch (message.what) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : mLog.error(""CMD_TETHER_REQUESTED while in local-only hotspot mode.""); break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_CONNECTION_CHANGED : break; default : return false; } return true; }",8a240ea9737ded5e040651e94df460e1a403a741,processMessage(android.os.Message),processMessage(android.os.Message),10,3,"@java.lang.Override public boolean processMessage(android.os.Message message) { if (super.processMessage(message)) return true; maybeLogMessage(this, message.what); switch (message.what) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : mLog.e(""CMD_TETHER_REQUESTED while in local-only hotspot mode.""); break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_CONNECTION_CHANGED : break; default : return false; } return true; }",3ccf635293917a74b022b55c6a41055d1819bfcd,processMessage(android.os.Message),12963,141,141
151365,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_AndroidComponentModelTestPlugin.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void execute(com.android.build.gradle.model.AndroidBinary androidBinary) { com.android.build.gradle.model.DefaultAndroidBinary binary = ((com.android.build.gradle.model.DefaultAndroidBinary) (androidBinary)); if (!(binary.getBuildType().getName().equals(BuilderConstants.DEBUG))) { return; } com.android.build.gradle.internal.variant.BaseVariantData testedVariantData = binary.getVariantData(); assert testedVariantData != null : ""Internal error: tested variant must be created before test variant.""; com.android.build.gradle.internal.variant.TestVariantData testVariantData = variantManager.createTestVariantData(testedVariantData, com.android.build.gradle.model.ANDROID_TEST); variantManager.getVariantDataList().add(testVariantData); variantManager.createTasksForVariantData(new com.android.build.gradle.model.TaskCollectionBuilderAdaptor(tasks), testVariantData); }",551be311424faf1095ec0da67f8de7ded8cf07a3,,execute(com.android.build.gradle.model.AndroidBinary),3,1,"@java.lang.Override public void execute(com.android.build.gradle.model.AndroidBinary androidBinary) { com.android.build.gradle.model.DefaultAndroidBinary binary = ((com.android.build.gradle.model.DefaultAndroidBinary) (androidBinary)); if (!(binary.getBuildType().getName().equals(BuilderConstants.DEBUG))) { return; } com.android.build.gradle.internal.variant.BaseVariantData testedVariantData = binary.getVariantData(); com.google.common.base.Preconditions.checkState((testedVariantData != null), ""Internal error: tested variant must be created before test variant.""); com.android.build.gradle.internal.variant.TestVariantData testVariantData = variantManager.createTestVariantData(testedVariantData, com.android.build.gradle.model.ANDROID_TEST); variantManager.getVariantDataList().add(testVariantData); variantManager.createTasksForVariantData(new com.android.build.gradle.model.TaskCollectionBuilderAdaptor(tasks), testVariantData); }",5e8394d16592b475aa2fcae03e0bd45596971ba9,execute(com.android.build.gradle.model.AndroidBinary),492677,219,231
679301,deviceside_src_com_android_graphics_benchmark_device_GraphicsBenchmarkTest.java,0.0,"private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Launching "" + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), 10000); android.os.Looper.loop(); mReport.end(); }",fb7b724b2d554bee9cb0e827a6b2c3a605b2a346,"private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Launching "" + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), mApk.getRunTime()); android.os.Looper.loop(); mReport.end(); }",168ac70ddc3f9713ce143de8e9a36e3d3f0d7bdc,startApp(com.android.graphics.benchmark.ApkInfo),startApp(com.android.graphics.benchmark.ApkInfo),7,0,"private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (""Launching "" + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> { if (!(mGotIntent)) { mHandler.getLooper().quit(); } }, mApk.getRunTime()); android.os.Looper.loop(); mReport.end(); }",405d3d3aebc69e6c2d9e3d4c4ebebf7aab297c4a,startApp(com.android.graphics.benchmark.ApkInfo),176563,210,221
150519,src_junit_framework_Assert.java,16.0,"public static void assertEquals(java.lang.String message, java.lang.Object expected, java.lang.Object actual) { if (actual == null ? expected != null : !(actual.equals(expected))) { junit.framework.Assert.fail(message, (((""expected "" + expected) + "" but was "") + actual)); } }",147c54fe79041b90ed983d45436bf3fb399e06a1,"public static void assertEquals(java.lang.String message, java.lang.Object expected, java.lang.Object actual) { if (actual == null ? expected != null : !(expected.equals(actual))) { junit.framework.Assert.fail(message, (((""expected "" + expected) + "" but was "") + actual)); } }",045c02580d1ae26caa548c5224106ed28b599793,"assertEquals(java.lang.String,java.lang.Object,java.lang.Object)","assertEquals(java.lang.String,java.lang.Object,java.lang.Object)",3,16,"public static void assertEquals(java.lang.String message, java.lang.Object expected, java.lang.Object actual) { if ((expected == null) && (actual == null)) { return; } if ((expected != null) && (expected.equals(actual))) { return; } junit.framework.Assert.fail(message, (((""expected "" + expected) + "" but was "") + actual)); }",ee82b27bba25e74f55f831d150f767c7bbb058c1,"assertEquals(java.lang.String,java.lang.Object,java.lang.Object)",13667,75,91
18960,eclipse_plugins_com.android.ide.eclipse.tests_unittests_com_android_ide_eclipse_adt_internal_sdk_LayoutParamsParserTest.java,2.0,"public final void testGetLayoutParamsInfo() throws java.lang.Exception { com.android.ide.eclipse.adt.internal.resources.ViewClassInfo.LayoutParamsInfo info1 = _getLayoutParamsInfo(mock_android.view.ViewGroup.LayoutParams.class); assertNotNull(info1); assertNull(info1.getSuperClass()); com.android.ide.eclipse.adt.internal.resources.ViewClassInfo.LayoutParamsInfo info2 = _getLayoutParamsInfo(mock_android.widget.LinearLayout.LayoutParams.class); assertNotNull(info2); assertSame(info1, info2.getSuperClass()); com.android.ide.eclipse.adt.internal.resources.ViewClassInfo.LayoutParamsInfo info3 = _getLayoutParamsInfo(mock_android.widget.TableLayout.LayoutParams.class); assertNotNull(info3); assertNotSame(info1, info3.getSuperClass()); assertNotSame(info2, info3.getSuperClass()); assertSame(info1, info3.getSuperClass().getSuperClass()); }",ced826fb3e5e8fc0bf4ac3fe13b441480a43c0d6,"public final void testGetLayoutParamsInfo() throws java.lang.Exception { com.android.ide.common.platformData.ViewClassInfo.LayoutParamsInfo info1 = _getLayoutParamsInfo(mock_android.view.ViewGroup.LayoutParams.class); assertNotNull(info1); assertNull(info1.getSuperClass()); com.android.ide.common.platformData.ViewClassInfo.LayoutParamsInfo info2 = _getLayoutParamsInfo(mock_android.widget.LinearLayout.LayoutParams.class); assertNotNull(info2); assertSame(info1, info2.getSuperClass()); com.android.ide.common.platformData.ViewClassInfo.LayoutParamsInfo info3 = _getLayoutParamsInfo(mock_android.widget.TableLayout.LayoutParams.class); assertNotNull(info3); assertNotSame(info1, info3.getSuperClass()); assertNotSame(info2, info3.getSuperClass()); assertSame(info1, info3.getSuperClass().getSuperClass()); }",18eea6a8cc94cd20d787bf2cb434a57ed5ae845d,testGetLayoutParamsInfo(),testGetLayoutParamsInfo(),2,2,"public final void testGetLayoutParamsInfo() throws java.lang.Exception { com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info1 = _getLayoutParamsInfo(mock_android.view.ViewGroup.LayoutParams.class); assertNotNull(info1); assertNull(info1.getSuperClass()); com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info2 = _getLayoutParamsInfo(mock_android.widget.LinearLayout.LayoutParams.class); assertNotNull(info2); assertSame(info1, info2.getSuperClass()); com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info3 = _getLayoutParamsInfo(mock_android.widget.TableLayout.LayoutParams.class); assertNotNull(info3); assertNotSame(info1, info3.getSuperClass()); assertNotSame(info2, info3.getSuperClass()); assertSame(info1, info3.getSuperClass().getSuperClass()); }",475dbf8686681cf01fb929c4985d22940f9cfa6d,testGetLayoutParamsInfo(),136518,189,192
638866,harnesses_tradefed_tests_src_com_android_tradefed_testtype_VtsMultiDeviceTestTest.java,5.0,"public void testRunNormalInput() { mProcessHelper = com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockProcessHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(createMockRunUtil(""which"")); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } }",4a15dd41a4ff7ad34d23566a09789e6b0c153b94,public void testRunNormalInput() { mVtsPythonRunnerHelper = createMockVtsPythonRunnerHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setVtsPythonRunnerHelper(mVtsPythonRunnerHelper); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } },30687629151006a3065fc65184c7be829d1c96a2,testRunNormalInput(),testRunNormalInput(),7,5,@org.junit.Test public void testRunNormalInput() { mVtsPythonRunnerHelper = createMockVtsPythonRunnerHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } },230c1ea470acfe91b6a316b66c2edf57ed0af3de,testRunNormalInput(),88286,135,122
354829,service_java_com_android_server_wifi_hotspot2_PasspointManager.java,5.0,"public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { if (scanResult == null) { return null; } Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }",c7547b802a77742cd6d4c367f8046b078b485875,"public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { if (scanResult == null) { android.util.Log.e(com.android.server.wifi.hotspot2.PasspointManager.TAG, ""Attempt to get matching config for a null ScanResult""); return null; } Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { android.util.Log.d(com.android.server.wifi.hotspot2.PasspointManager.TAG, (""No provider found for "" + (scanResult.SSID))); return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }",5291e8e09eb984a9088006d8bf28bf086ff67552,getMatchingWifiConfig(android.net.wifi.ScanResult),getMatchingWifiConfig(android.net.wifi.ScanResult),4,6,"public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { if (scanResult == null) { android.util.Log.e(com.android.server.wifi.hotspot2.PasspointManager.TAG, ""Attempt to get matching config for a null ScanResult""); return null; } Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }",37921dfbc8676d5c836b80fa5fd1928ff46c176a,getMatchingWifiConfig(android.net.wifi.ScanResult),500370,207,170
81416,tests_tests_renderscript_src_android_renderscript_cts_TestModf.java,,,,public void testModf() { checkModfFloatFloat(); checkModfFloat2Float2(); checkModfFloat3Float3(); checkModfFloat4Float4(); },9a8cc54c65dd400e692ce9f6f7508d256f94ad4c,,testModf(),9,2,public void testModf() { checkModfFloatFloatFloat(); checkModfFloat2Float2Float2(); checkModfFloat3Float3Float3(); checkModfFloat4Float4Float4(); },f2c21461fe24b5d9fcb4878c6d4d8c285013e7fd,testModf(),143219,38,45
577822,harnesses_tradefed_src_com_android_tradefed_util_ProcessHelper.java,4.0,"@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessHelper.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } mBuffer.append(charBuffer, 0, readCount); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(""%s: %s"", getName(), e.toString()); } }",5254fe453a95b9b56f5f16e623eae8fe33e1c345,"@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessHelper.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } java.lang.String newRead = new java.lang.String(charBuffer, 0, readCount); int newLineLen = 0; if (newRead.endsWith(""\r\n"")) { newLineLen = 2; } else if (newRead.endsWith(""\n"")) { newLineLen = 1; } if ((mOutputType) == (com.android.tradefed.util.ProcessHelper.ReaderThread.TYPE_STDOUT)) { com.android.tradefed.log.LogUtil.CLog.i(newRead.substring(0, ((newRead.length()) - newLineLen))); } else if ((mOutputType) == (com.android.tradefed.util.ProcessHelper.ReaderThread.TYPE_STDERR)) { com.android.tradefed.log.LogUtil.CLog.e(newRead.substring(0, ((newRead.length()) - newLineLen))); } mBuffer.append(newRead); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(""%s: %s"", getName(), e.toString()); } }",b0082864e0dc989473650c526f950b7e60368dbe,run(),run(),6,4,"@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessHelper.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } java.lang.String newRead = new java.lang.String(charBuffer, 0, readCount); int newLineLen = 0; if (newRead.endsWith(""\r\n"")) { newLineLen = 2; } else if (newRead.endsWith(""\n"")) { newLineLen = 1; } java.lang.String newReadPrint = newRead.substring(0, ((newRead.length()) - newLineLen)); switch (mLogType) { case STDOUT : com.android.tradefed.log.LogUtil.CLog.i(newReadPrint); break; case STDERR : com.android.tradefed.log.LogUtil.CLog.e(newReadPrint); break; } mBuffer.append(newRead); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(""%s: %s"", getName(), e.toString()); } }",967a3480a6eda5b85b4ee8afc488f55275b31b15,run(),1942,323,282
588293,luni_src_main_java_libcore_util_NativeAllocationRegistry.java,3.0,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException(""nativePtr is null""); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, new libcore.util.NativeAllocationRegistry.CleanerThunk(nativePtr)); return new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); }",d2a7e66ff58516f193cf280235ed5301f693144c,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException(""nativePtr is null""); } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); libcore.util.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); thunk.setNativePtr(nativePtr); return result; }",7c18cb799e49a249000ac689a81da5a7aef1992b,"registerNativeAllocation(java.lang.Object,long)","registerNativeAllocation(java.lang.Object,long)",3,3,"public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException(""referent is null""); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException(""nativePtr is null""); } libcore.util.NativeAllocationRegistry.CleanerThunk thunk; libcore.util.NativeAllocationRegistry.CleanerRunner result; try { thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.VirtualMachineError vme) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw vme; } thunk.setNativePtr(nativePtr); return result; }",07c719927f705aa17d230da7333a13b84c0047be,"registerNativeAllocation(java.lang.Object,long)",117194,220,224
340810,telecomm_java_android_telecom_ConnectionService.java,90.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onRemoteRttUpgradeRequest(android.telecom.Connection c) { java.lang.String id = mIdByConnection.get(c); if (id != null) { mAdapter.onRemoteRttUpgradeRequest(id); } },a2228273c531076b5380a6b1c23dce13d325b640,,onRemoteRttUpgradeRequest(android.telecom.Connection),6,4,@java.lang.Override public void onRemoteRttRequest(android.telecom.Connection c) { java.lang.String id = mIdByConnection.get(c); if (id != null) { mAdapter.onRemoteRttRequest(id); } },b4576e186fbea7c6d68fe433c937730550073332,onRemoteRttRequest(android.telecom.Connection),393688,61,59
104232,perflib_src_main_java_com_android_tools_perflib_heap_HprofParser.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int readUnsignedByte() throws java.io.IOException { return (mInput.readByte()) & 255; },cfd98e1b2a735f184cae75c49736d6a5f7512a62,,readUnsignedByte(),5,14,private int readUnsignedByte() throws java.io.IOException { return com.google.common.primitives.UnsignedBytes.toInt(mInput.readByte()); },382c3dcf96d0a3d5d74ad1bc6ee21fa8e9ecad52,readUnsignedByte(),381650,23,33
593334,telephony_java_android_telephony_SignalStrength.java,8.0,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }",af60b3b23d7d8f16b6b73fdee661ff65df1a7bb1,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mTdScdmaRscp); out.writeInt(mLteRsrpBoost); out.writeInt((mIsGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }",98e06621c0dde8d8424ce9921e3f859dfe3a15fd,"writeToParcel(android.os.Parcel,int)","writeToParcel(android.os.Parcel,int)",6,8,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mTdScdmaRscp); out.writeInt(mLteRsrpBoost); out.writeBoolean(mIsGsm); out.writeBoolean(mUseOnlyRsrpForLteLevel); out.writeIntArray(mLteRsrpThresholds); }",4ee656b7bf3aa4b0fac6ac1200783a51bc8182fb,"writeToParcel(android.os.Parcel,int)",31232,209,213
91995,luni_src_main_java_java_io_File.java,25.0,public long getFreeSpace() { try { libcore.io.StructStatVfs sb = Libcore.os.statvfs(path); return (sb.f_bfree) * (sb.f_bsize); } catch (libcore.io.ErrnoException errnoException) { return 0; } },deb628748666dc1a5e2495e6daa61760bf6d20d1,public long getFreeSpace() { try { android.os.StructStatVfs sb = Libcore.os.statvfs(path); return (sb.f_bfree) * (sb.f_bsize); } catch (android.os.ErrnoException errnoException) { return 0; } },f40078cf5b4c1e23450119daa10a1e6929cc2479,getFreeSpace(),getFreeSpace(),3,25,public long getFreeSpace() { try { android.system.StructStatVfs sb = Libcore.os.statvfs(path); return (sb.f_bfree) * (sb.f_bsize); } catch (android.system.ErrnoException errnoException) { return 0; } },d1dd4f9a8aa454e4c04fbf965e9aa1cddcc8c23b,getFreeSpace(),169400,66,66
215844,src_com_android_bluetooth_gatt_ScanManager.java,72.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void regularScanTimeout() { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if ((client.settings.getScanMode()) != (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC)) { logd((""apanicke: clientif set to opp: "" + (client.clientIf))); setOpportunisticScanClient(client); client.stats.setScanTimeout(); } } logd(""apanicke: stop scan""); gattClientScanNative(false); }",9180d476247b9b9a9376861c99c80d1c5c4f44cc,,regularScanTimeout(),15,14,"void regularScanTimeout() { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if ((!(isOpportunisticScanClient(client))) && (!(isFirstMatchScanClient(client)))) { logd((""clientIf set to scan opportunisticly: "" + (client.clientIf))); setOpportunisticScanClient(client); client.stats.setScanTimeout(); } } configureRegularScanParams(); if ((numRegularScanClients()) == 0) { logd(""stop scan""); gattClientScanNative(false); } }",78dc77157f4c04976a0fc51b4d18a2f362865008,regularScanTimeout(),219392,126,129
590253,tests_tests_jvmti_attaching_src_android.jvmti.attaching.cts_AttachingTest.java,32.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.BeforeClass public static void prepareAgent() throws java.lang.Exception { android.jvmti.attaching.cts.AttachingTest.sAgentFile = android.jvmti.attaching.cts.AttachingTest.copyAgentToFile(""jvmtiattachingtestagent""); }",03734b660d0c05ca7fe728489306d2edc5bc5023,,prepareAgent(),2,11,"private static java.io.File copyAgentToFile(java.lang.String lib) throws java.lang.Exception { java.lang.ClassLoader cl = android.jvmti.attaching.cts.AttachingTest.class.getClassLoader(); assertTrue((cl instanceof dalvik.system.BaseDexClassLoader)); java.io.File copiedAgent = java.io.File.createTempFile(""agent"", "".so""); try (java.io.InputStream is = new java.io.FileInputStream(((dalvik.system.BaseDexClassLoader) (cl)).findLibrary(lib))) { try (java.io.OutputStream os = new java.io.FileOutputStream(copiedAgent)) { byte[] buffer = new byte[64 * 1024]; while (true) { int numRead = is.read(buffer); if (numRead == (-1)) { break; } os.write(buffer, 0, numRead); } } } return copiedAgent; }",135ee9907abdcd5dcc0482d8b35a4195521e241a,copyAgentToFile(java.lang.String),245668,68,198
528430,tests_src_com_android_bluetooth_btservice_PhonePolicyTest.java,0.0,"@org.junit.Test public void testAdapterOnAutoConnect() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice(""00:01:02:03:04:05""); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mockAdapterService.isQuietModeEnabled()).thenReturn(false); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = device; when(mockAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED); intent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); injector.onReceive(null, intent); verify(mockHeadsetService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).connect(eq(device)); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).connect(eq(device)); }",5551a4c2ec565cff614c1a449241b8c3e903af3e,"@org.junit.Test public void testAdapterOnAutoConnect() { when(mAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mAdapterService.isQuietModeEnabled()).thenReturn(false); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = mTestDevice; when(mAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED); intent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); injector.onReceive(null, intent); executeDelayedMessages(1); verify(mHeadsetService, times(1)).connect(eq(mTestDevice)); verify(mA2dpService, times(1)).connect(eq(mTestDevice)); }",df2274e8a70d4c1238e30b03a6cbc06b2c78b432,testAdapterOnAutoConnect(),testAdapterOnAutoConnect(),4,0,"@org.junit.Test public void testAdapterOnAutoConnect() { when(mAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mAdapterService.isQuietModeEnabled()).thenReturn(false); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = mTestDevice; when(mAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED); intent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); injector.onReceive(null, intent); executePendingMessages(1); verify(mHeadsetService, times(1)).connect(eq(mTestDevice)); verify(mA2dpService, times(1)).connect(eq(mTestDevice)); }",b6d051eb5860e7eefc8110e9d7cebd4b234eee4b,testAdapterOnAutoConnect(),227156,288,288
335040,service_java_com_android_server_wifi_WifiNative.java,156.0,"public boolean p2pFind() { return doBooleanCommand(""P2P_FIND""); }",da4dd704626a95b002f2dddc2e56a00a818b00c4,"public boolean p2pFind() { if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.find(); } else { return doBooleanCommand(""P2P_FIND""); } }",5080df3135fb4bae2359dfd24090583d5609131d,p2pFind(),p2pFind(),23,158,"public boolean p2pFind() { if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.find(); } else { return doBooleanCommand(""P2P_FIND""); } }",d040a4cff8a264bf811c9a1ea4e9b301738c55c0,p2pFind(),258392,77,81
81416,tests_tests_renderscript_src_android_renderscript_cts_TestRemainder.java,,,,"private void checkRemainderFloat2Float2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testRemainderFloat2Float2(inX, out); verifyResultsRemainderFloat2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRemainderFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testRemainderFloat2Float2(inX, out); verifyResultsRemainderFloat2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRemainderFloat2Float2: "" + (e.toString()))); } }",7ac65f3aa3d687fb6aba2c028f0d1590aa4c2070,,checkRemainderFloat2Float2(),9,0,"private void checkRemainderFloat2Float2Float2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 1109059158663849578L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 1109059158663849578L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testRemainderFloat2Float2Float2(inX, out); verifyResultsRemainderFloat2Float2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRemainderFloat2Float2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testRemainderFloat2Float2Float2(inX, out); verifyResultsRemainderFloat2Float2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRemainderFloat2Float2Float2: "" + (e.toString()))); } }",47d9a28e53e667cfd3cc62a87a4c09837e914e91,checkRemainderFloat2Float2Float2(),142656,436,388
157783,sdk-common_src_main_java_com_android_ide_common_rendering_HardwareConfigHelper.java,12.0,"@java.lang.SuppressWarnings(""SuspiciousNameCombination"") @com.android.annotations.NonNull public com.android.ide.common.rendering.api.HardwareConfig getConfig() { com.android.sdklib.devices.Screen screen = mDevice.getDefaultHardware().getScreen(); int x = screen.getXDimension(); int y = screen.getYDimension(); int width; int height; if (x > y) { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = x; height = y; } else { width = y; height = x; } } else { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = y; height = x; } else { width = x; height = y; } } if ((mOverrideRenderHeight) != (-1)) { width = mOverrideRenderWidth; } if ((mOverrideRenderHeight) != (-1)) { height = mOverrideRenderHeight; } if ((mMaxRenderWidth) != (-1)) { width = mMaxRenderWidth; } if ((mMaxRenderHeight) != (-1)) { height = mMaxRenderHeight; } return new com.android.ide.common.rendering.api.HardwareConfig(width, height, screen.getPixelDensity(), ((float) (screen.getXdpi())), ((float) (screen.getYdpi())), screen.getSize(), mScreenOrientation, ((mDevice.getDefaultHardware().getButtonType()) == (com.android.sdklib.devices.ButtonType.SOFT))); }",e732cde84921d0b92274299c86a31afb61c629a7,"@java.lang.SuppressWarnings(""SuspiciousNameCombination"") @com.android.annotations.NonNull public com.android.ide.common.rendering.api.HardwareConfig getConfig() { com.android.sdklib.devices.Screen screen = mDevice.getDefaultHardware().getScreen(); int x = screen.getXDimension(); int y = screen.getYDimension(); int width; int height; if (x > y) { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = x; height = y; } else { width = y; height = x; } } else { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = y; height = x; } else { width = x; height = y; } } if ((mOverrideRenderHeight) != (-1)) { width = mOverrideRenderWidth; } if ((mOverrideRenderHeight) != (-1)) { height = mOverrideRenderHeight; } if ((mMaxRenderWidth) != (-1)) { width = mMaxRenderWidth; } if ((mMaxRenderHeight) != (-1)) { height = mMaxRenderHeight; } com.android.resources.ScreenRound roundness = mDevice.getDefaultHardware().getScreen().getScreenRound(); return new com.android.ide.common.rendering.api.HardwareConfig(width, height, screen.getPixelDensity(), ((float) (screen.getXdpi())), ((float) (screen.getYdpi())), screen.getSize(), mScreenOrientation, roundness, ((mDevice.getDefaultHardware().getButtonType()) == (com.android.sdklib.devices.ButtonType.SOFT))); }",5d3f65bf38a39e45440ce1d02062c13df0c79f8c,getConfig(),getConfig(),4,12,"@java.lang.SuppressWarnings(""SuspiciousNameCombination"") @com.android.annotations.NonNull public com.android.ide.common.rendering.api.HardwareConfig getConfig() { com.android.sdklib.devices.Screen screen = mDevice.getDefaultHardware().getScreen(); int x = screen.getXDimension(); int y = screen.getYDimension(); int width; int height; if (x > y) { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = x; height = y; } else { width = y; height = x; } } else { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = y; height = x; } else { width = x; height = y; } } if ((mOverrideRenderHeight) != (-1)) { width = mOverrideRenderWidth; } if ((mOverrideRenderHeight) != (-1)) { height = mOverrideRenderHeight; } if ((mMaxRenderWidth) != (-1)) { width = mMaxRenderWidth; } if ((mMaxRenderHeight) != (-1)) { height = mMaxRenderHeight; } return new com.android.ide.common.rendering.api.HardwareConfig(width, height, screen.getPixelDensity(), ((float) (screen.getXdpi())), ((float) (screen.getYdpi())), screen.getSize(), mScreenOrientation, mDevice.getDefaultHardware().getScreen().getScreenRound(), ((mDevice.getDefaultHardware().getButtonType()) == (com.android.sdklib.devices.ButtonType.SOFT))); }",118139abeac3bc6ed8ecdfcfad05d8b3da6fe009,getConfig(),92747,380,366
79530,luni_src_main_java_java_nio_SocketChannelImpl.java,33.0,private void initLocalAddressAndPort() { java.net.SocketAddress sa; try { sa = Libcore.os.getsockname(fd); } catch (libcore.io.ErrnoException errnoException) { throw new java.lang.AssertionError(errnoException); } java.net.InetSocketAddress isa = ((java.net.InetSocketAddress) (sa)); localAddress = isa.getAddress(); localPort = isa.getPort(); if ((socket) != null) { socket.socketImpl().initLocalPort(localPort); } },6cc447ea39ecf813eb92fa880c60bb6d42048107,"void initConnected(java.net.InetSocketAddress address, int status, boolean updateSocketState) { this.status = status; connectAddress = address; if (((status == (java.nio.SocketChannelImpl.SOCKET_STATUS_CONNECTED)) && updateSocketState) && ((socket) != null)) { socket.initConnected(connectAddress.getAddress(), connectAddress.getPort()); } }",277b25cf69d87df3cd9d7d293b6cec1057b7b3ef,initLocalAddressAndPort(),"initConnected(java.net.InetSocketAddress,int,boolean)",11,22,"void onConnectStatusChanged(java.net.InetSocketAddress address, int status, boolean updateSocketState) { this.status = status; connectAddress = address; if (((status == (java.nio.SocketChannelImpl.SOCKET_STATUS_CONNECTED)) && updateSocketState) && ((socket) != null)) { socket.onConnect(connectAddress.getAddress(), connectAddress.getPort()); } }",89c1a193ec25f5b2fae8e8a6bebdaba9c6a303cd,"onConnectStatusChanged(java.net.InetSocketAddress,int,boolean)",511105,81,83
64400,keystore_tests_src_android_security_AndroidKeyPairGeneratorTest.java,1.0,"public void testKeyPairGenerator_GenerateKeyPair_Unencrypted_Success() throws java.lang.Exception { mGenerator.initialize(new android.security.KeyPairGeneratorSpec.Builder(getContext()).setAlias(android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1).setSubject(android.security.AndroidKeyPairGeneratorTest.TEST_DN_1).setSerialNumber(android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1).setStartDate(android.security.AndroidKeyPairGeneratorTest.NOW).setEndDate(android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS).build()); final java.security.KeyPair pair = mGenerator.generateKeyPair(); assertNotNull(""The KeyPair returned should not be null"", pair); assertKeyPairCorrect(pair, android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1, android.security.AndroidKeyPairGeneratorTest.TEST_DN_1, android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1, android.security.AndroidKeyPairGeneratorTest.NOW, android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS); }",a2ca50ca587b7e714a3377404bfc2bfe7bf6bb4a,"public void testKeyPairGenerator_GenerateKeyPair_EC_Unencrypted_Success() throws java.lang.Exception { mGenerator.initialize(new android.security.KeyPairGeneratorSpec.Builder(getContext()).setAlias(android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1).setKeyType(""EC"").setSubject(android.security.AndroidKeyPairGeneratorTest.TEST_DN_1).setSerialNumber(android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1).setStartDate(android.security.AndroidKeyPairGeneratorTest.NOW).setEndDate(android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS).build()); final java.security.KeyPair pair = mGenerator.generateKeyPair(); assertNotNull(""The KeyPair returned should not be null"", pair); assertKeyPairCorrect(pair, android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1, ""EC"", android.security.AndroidKeyPairGeneratorTest.TEST_DN_1, android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1, android.security.AndroidKeyPairGeneratorTest.NOW, android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS); }",7f02417fc4a8e35d853607751bec4bc3e0e3d7fc,testKeyPairGenerator_GenerateKeyPair_Unencrypted_Success(),testKeyPairGenerator_GenerateKeyPair_EC_Unencrypted_Success(),4,12,"public void testKeyPairGenerator_GenerateKeyPair_EC_Unencrypted_Success() throws java.lang.Exception { mGenerator.initialize(new android.security.KeyPairGeneratorSpec.Builder(getContext()).setAlias(android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1).setKeyType(""EC"").setSubject(android.security.AndroidKeyPairGeneratorTest.TEST_DN_1).setSerialNumber(android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1).setStartDate(android.security.AndroidKeyPairGeneratorTest.NOW).setEndDate(android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS).build()); final java.security.KeyPair pair = mGenerator.generateKeyPair(); assertNotNull(""The KeyPair returned should not be null"", pair); assertKeyPairCorrect(pair, android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1, ""EC"", 256, null, android.security.AndroidKeyPairGeneratorTest.TEST_DN_1, android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1, android.security.AndroidKeyPairGeneratorTest.NOW, android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS); }",1441c56d046d24d258d8e6a12d408e418e4321d7,testKeyPairGenerator_GenerateKeyPair_EC_Unencrypted_Success(),25082,226,230
113236,build-system_gradle_src_main_groovy_com_android_build_gradle_tasks_ResourceUsageAnalyzer.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void recordCssUrl(@com.android.annotations.Nullable com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource from, @com.android.annotations.NonNull java.lang.String value) { if (!(referencedUrl(from, value))) { referencedString(value); } }",3559bb76ab0015d27d8568eade6a73f7c54cf5f9,,"recordCssUrl(com.android.build.gradle.tasks.ResourceUsageAnalyzer$Resource,java.lang.String)",3,1,"private void recordCssUrl(@com.android.annotations.Nullable com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource from, @com.android.annotations.NonNull java.lang.String value) { if (!(referencedUrl(from, value))) { referencedString(value); mFoundWebContent = true; } }",b682d439b3b66465720d47fbb074dd4570958bd9,"recordCssUrl(com.android.build.gradle.tasks.ResourceUsageAnalyzer$Resource,java.lang.String)",276750,63,69
17090,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationComposite.java,23.0,"private void createToggle(org.eclipse.swt.widgets.Composite parent) { final org.eclipse.swt.widgets.Button b = new org.eclipse.swt.widgets.Button(parent, ((org.eclipse.swt.SWT.TOGGLE) | (org.eclipse.swt.SWT.FLAT))); if ((mUiTooltip) != null) { b.setToolTipText(mUiTooltip); } if ((mImage) != null) { b.setImage(mImage); } if ((mUiLabel) != null) { b.setText(mUiLabel); } b.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { @java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { onSelected(b.getSelection()); } }); }",e7fe11987efc1fbfbdd5cd7f4262e25e7e4805c4,"private void createButton(org.eclipse.swt.widgets.Composite parent) { int style = org.eclipse.swt.SWT.FLAT; if (mIsToggle) { style |= org.eclipse.swt.SWT.TOGGLE; } final org.eclipse.swt.widgets.Button b = new org.eclipse.swt.widgets.Button(parent, style); if ((mUiTooltip) != null) { b.setToolTipText(mUiTooltip); } if ((mImage) != null) { b.setImage(mImage); } if ((mUiLabel) != null) { b.setText(mUiLabel); } b.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { @java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { onSelected(b.getSelection()); } }); }",03c4a6f4b4f4d4a211a0880b494910ea8e8872d3,createToggle(org.eclipse.swt.widgets.Composite),createButton(org.eclipse.swt.widgets.Composite),4,46,"private void createButton(org.eclipse.swt.widgets.Composite parent) { int style = org.eclipse.swt.SWT.FLAT; if (mIsToggle) { style |= org.eclipse.swt.SWT.TOGGLE; } mButton = new org.eclipse.swt.widgets.Button(parent, style); if ((mUiTooltip) != null) { mButton.setToolTipText(mUiTooltip); } if ((mImage) != null) { mButton.setImage(mImage); } if ((mUiLabel) != null) { mButton.setText(mUiLabel); } if ((mIsToggle) && (mDefaultValue)) { mButton.setSelection(true); } mButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { @java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { onSelected(mButton.getSelection()); } }); }",fca555b9ab704a0d571ea8698d45f7bfb7b08884,createButton(org.eclipse.swt.widgets.Composite),303537,190,207
36213,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_repository_packages_FullRevision.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.NonNull public static com.android.sdklib.internal.repository.packages.FullRevision parseRevision(@com.android.annotations.NonNull java.lang.String revision) throws java.lang.NumberFormatException { if (revision == null) { throw new java.lang.NumberFormatException(""revision is <null>""); } java.lang.Throwable cause = null; try { java.util.regex.Matcher m = com.android.sdklib.internal.repository.packages.FullRevision.FULL_REVISION_PATTERN.matcher(revision); if ((m != null) && (m.matches())) { int major = java.lang.Integer.parseInt(m.group(1)); java.lang.String s = m.group(2); int minor = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.IMPLICIT_MINOR_REV : java.lang.Integer.parseInt(s); s = m.group(3); int micro = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.IMPLICIT_MICRO_REV : java.lang.Integer.parseInt(s); s = m.group(4); int preview = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW : java.lang.Integer.parseInt(s); return new com.android.sdklib.internal.repository.packages.FullRevision(major, minor, micro, preview); } } catch (java.lang.Throwable t) { cause = t; } java.lang.NumberFormatException n = new java.lang.NumberFormatException((""Invalid full revision: "" + revision)); if (cause != null) { n.initCause(cause); } throw n; }",cfdb51ca90941308d1f7b956cbf9041692679232,,parseRevision(java.lang.String),2,9,"@com.android.annotations.NonNull public static com.android.sdklib.internal.repository.packages.FullRevision parseRevision(@com.android.annotations.NonNull java.lang.String revision) throws java.lang.NumberFormatException { if (revision == null) { throw new java.lang.NumberFormatException(""revision is <null>""); } java.lang.Throwable cause = null; try { java.util.regex.Matcher m = com.android.sdklib.internal.repository.packages.FullRevision.FULL_REVISION_PATTERN.matcher(revision); if ((m != null) && (m.matches())) { int major = java.lang.Integer.parseInt(m.group(1)); java.lang.String s = m.group(2); int minor = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.IMPLICIT_MINOR_REV : java.lang.Integer.parseInt(s); s = m.group(3); int micro = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.IMPLICIT_MICRO_REV : java.lang.Integer.parseInt(s); s = m.group(4); int preview = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW : java.lang.Integer.parseInt(s); return new com.android.sdklib.internal.repository.packages.FullRevision(major, minor, micro, preview); } } catch (java.lang.Throwable t) { cause = t; } java.lang.NumberFormatException n = new java.lang.NumberFormatException((""Invalid full revision: "" + revision)); n.initCause(cause); throw n; }",3932f49b386731a0b1ae8c7bbb8f5bc0a049d2d5,parseRevision(java.lang.String),377329,393,385
150173,perflib_src_main_java_com_android_tools_perflib_heap_ArrayInstance.java,3.0,@java.lang.Override public final int getSize() { return (mLength) * (mType.getSize()); },958e34f380979f3c66dc83e9183fb1b8b6071ff4,@java.lang.Override public final int getSize() { return (mLength) * (mType.getSize(mHeap.mSnapshot)); },55b1e4df18905f9c23f3799e58f73f55fbc9ea8a,getSize(),getSize(),2,3,@java.lang.Override public final int getSize() { return (mLength) * (mHeap.mSnapshot.getTypeSize(mType)); },da611cf46aac39e3338f9c49bc0e9c60d541fe80,getSize(),500240,32,33
384432,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,55.0,"public void test_applyPattern() { java.text.DecimalFormat format = new java.text.DecimalFormat(""#.#""); assertEquals(""Wrong pattern 1"", ""#0.#"", format.toPattern()); format = new java.text.DecimalFormat(""#.""); assertEquals(""Wrong pattern 2"", ""#0."", format.toPattern()); format = new java.text.DecimalFormat(""#""); assertEquals(""Wrong pattern 3"", ""#"", format.toPattern()); format = new java.text.DecimalFormat("".#""); assertEquals(""Wrong pattern 4"", ""#.0"", format.toPattern()); format = new java.text.DecimalFormat(); format.setMinimumIntegerDigits(0); format.setMinimumFractionDigits(0); format.setMaximumFractionDigits(0); format.applyPattern(""00.0#""); assertEquals(""Minimum integer digits not set"", 2, format.getMinimumIntegerDigits()); assertEquals(""Minimum fraction digits not set"", 1, format.getMinimumFractionDigits()); assertEquals(""Maximum fraction digits not set"", 2, format.getMaximumFractionDigits()); try { format.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { format.applyPattern(""%#,##,###,####'""); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyPattern(""#.##0.00""); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",8a28295fe93f4bad36ff13701db87ef7a97f6944,"public void test_applyPattern() { java.text.DecimalFormat format = new java.text.DecimalFormat(""#.#""); assertEquals(""Wrong pattern 1"", ""0.#"", format.toPattern()); format = new java.text.DecimalFormat(""#.""); assertEquals(""Wrong pattern 2"", ""0."", format.toPattern()); format = new java.text.DecimalFormat(""#""); assertEquals(""Wrong pattern 3"", ""0"", format.toPattern()); format = new java.text.DecimalFormat("".#""); assertEquals(""Wrong pattern 4"", ""#.0"", format.toPattern()); format = new java.text.DecimalFormat(); format.setMinimumIntegerDigits(0); format.setMinimumFractionDigits(0); format.setMaximumFractionDigits(0); format.applyPattern(""00.0#""); assertEquals(""Minimum integer digits not set"", 2, format.getMinimumIntegerDigits()); assertEquals(""Minimum fraction digits not set"", 1, format.getMinimumFractionDigits()); assertEquals(""Maximum fraction digits not set"", 2, format.getMaximumFractionDigits()); try { format.applyPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { format.applyPattern(""%#,##,###,####'""); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyPattern(""#.##0.00""); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",4a85c102a51ee96e34d7aa8b408a571f4cd1654d,test_applyPattern(),test_applyPattern(),18,55,"public void test_applyPattern() { java.text.DecimalFormat format = new java.text.DecimalFormat(""#.#""); assertEquals(""Wrong pattern 1"", ""0.#"", format.toPattern()); format = new java.text.DecimalFormat(""#.""); assertEquals(""Wrong pattern 2"", ""0."", format.toPattern()); format = new java.text.DecimalFormat(""#""); assertEquals(""Wrong pattern 3"", ""0"", format.toPattern()); format = new java.text.DecimalFormat("".#""); assertEquals(""Wrong pattern 4"", ""#.0"", format.toPattern()); format = new java.text.DecimalFormat(); format.setMinimumIntegerDigits(0); format.setMinimumFractionDigits(0); format.setMaximumFractionDigits(0); format.applyPattern(""00.0#""); assertEquals(""Minimum integer digits not set"", 2, format.getMinimumIntegerDigits()); assertEquals(""Minimum fraction digits not set"", 1, format.getMinimumFractionDigits()); assertEquals(""Maximum fraction digits not set"", 2, format.getMaximumFractionDigits()); try { format.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { format.applyPattern(""%#,##,###,####'""); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyPattern(""#.##0.00""); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",e3fcfbb9b916cc34d477f1fa9c566c1623872617,test_applyPattern(),387122,274,274
148495,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_vg_VDTree.java,,,,public void add(java.lang.Object pathOrGroup) { mCurrentGroup.add(pathOrGroup); },d8aeac29f2a5e7f65e0d82abd490376e47a6368a,,add(java.lang.Object),11,0,void add(com.android.assetstudiolib.vectordrawable.VdElement pathOrGroup) { mCurrentGroup.add(pathOrGroup); },8ac6bc701d34e6d27081de82a71a13cdd020da6f,add(com.android.assetstudiolib.vectordrawable.VdElement),5078,25,33
79091,luni_src_test_java_libcore_java_util_LocaleTest.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_Builder_setLanguageTag_singleSubtag() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b.setLanguageTag(""en""); java.util.Locale l = b.build(); assertEquals(""en"", l.getLanguage()); b = new java.util.Locale.Builder(); b.setLanguageTag(""eng""); l = b.build(); assertEquals(""eng"", l.getLanguage()); b = new java.util.Locale.Builder(); try { b.setLanguageTag(""a""); fail(); } catch (java.util.IllformedLocaleException ifle) { } }",0d35cf541e32cd0a652c5613a2aa2e02bc0a2e50,,test_Builder_setLanguageTag_singleSubtag(),3,26,"public void test_Builder_setLanguageTag_malformedTags() { try { libcore.java.util.LocaleTest.fromLanguageTag(""a"", true); fail(); } catch (java.util.IllformedLocaleException ifle) { } try { libcore.java.util.LocaleTest.fromLanguageTag(""en-US-BA"", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag(""en-FOOOO-BA"", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag(""en-US-POSIX-P2"", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag(""en-Latn-US-P2"", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag(""en-f-f"", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag(""en-f"", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag(""en-f-fooobaaaz"", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag(""en-9-baa"", true); fail(); } catch (java.util.IllformedLocaleException expected) { } }",09d6ecba98f33d1ceac7d38839066d70cdafbaa4,test_Builder_setLanguageTag_malformedTags(),40851,134,400
110944,jack_src_com_android_jack_library_OutputLibraryLocation.java,,,,@java.lang.Override public final boolean equals(java.lang.Object obj) { return (obj instanceof com.android.jack.library.OutputLibraryLocation) && (((com.android.jack.library.OutputLibraryLocation) (obj)).outputLibrary.equals(outputLibrary)); },c767db9f5f72e1ae51e89730809b65b4bcf9a3d0,,equals(java.lang.Object),4,0,@java.lang.Override public abstract boolean equals(java.lang.Object obj);,517c16182a532e06510c93d1410f9aed34e0719d,equals(java.lang.Object),492667,63,19
295866,src_com_android_bluetooth_pbapclient_PbapClientConnectionHandler.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.bluetooth.pbapclient.PbapClientConnectionHandler.Builder setContext(android.content.Context cntxt) { this.context = cntxt; return this; },c6a6acade4b658791b3dd5c0a18acd80cfacd756,,setContext(android.content.Context),9,0,public com.android.bluetooth.pbapclient.PbapClientConnectionHandler.Builder setContext(android.content.Context context) { this.context = context; return this; },1a84bae0612885f4643f0e35fae8cce627de9d06,setContext(android.content.Context),441789,41,39
341943,test_913-heaps_src_Main.java,4.0,"private static void doFollowReferencesTestImpl(Main.A root, int stopAfter, int followSet, java.lang.Object asRoot, Main.Verifier v, java.lang.String additionalEnabled) { java.lang.String[] lines = Main.followReferences(0, null, root, stopAfter, followSet, asRoot); v.process(lines, additionalEnabled); }",93aabc97264ef69f87d87483ca89cf7083f50858,"private static void doFollowReferencesTestImpl(Main.A root, java.lang.Class<?> klass, int stopAfter, int followSet, java.lang.Object asRoot, Main.Verifier v, java.lang.String additionalEnabled) { java.lang.String[] lines = Main.followReferences(0, klass, root, stopAfter, followSet, asRoot); if (klass == null) { v.process(lines, additionalEnabled); } else { java.util.Arrays.sort(lines); for (java.lang.String l : lines) { java.lang.System.out.println(l); } } }",8687897bb6bc989b71668a21d6743b4f7ad33bfb,"doFollowReferencesTestImpl(Main$A,int,int,java.lang.Object,Main$Verifier,java.lang.String)","doFollowReferencesTestImpl(Main$A,java.lang.Class,int,int,java.lang.Object,Main$Verifier,java.lang.String)",2,2,public static native java.lang.String followReferencesPrimitiveArray(java.lang.Object initialObject);,7d4d9033f653e50735c5fa6378b812c8e36c8b35,followReferencesPrimitiveArray(java.lang.Object),84001,135,21
146466,sched_src_com_android_sched_util_config_cli_TokenIterator.java,8.0,"@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = tokenizers.peek(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if (((allowFileRefInFile) && (!(tokenizer.sval.isEmpty()))) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = tokenizers.peek(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(locations.peek(), tokenizer.lineno())); } } } catch (java.io.IOException e) { tokenizers.clear(); tokenizers.push(null); index = args.length; throw new com.android.sched.util.file.CannotReadException(locations.peek()); } tokenizers.pop(); tokenizer = tokenizers.peek(); locations.pop(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if (((allowFileRefInArray) && (!(args[index].isEmpty()))) && ((args[index].charAt(0)) == (filePrefix))) { pushFileTokenizer(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], locations.peek()); } } }",e345374d4218410fb9648eb89607e538f8a6f8d2,"@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = sources.peek().tokenizer; while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if (((allowFileRefInFile) && (!(tokenizer.sval.isEmpty()))) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = sources.peek().tokenizer; continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(sources.peek().location, tokenizer.lineno())); } } } catch (java.io.IOException e) { try { throw new com.android.sched.util.file.CannotReadException(sources.peek().location); } finally { sources.clear(); sources.push(null); index = args.length; } } com.android.sched.util.file.InputStreamFile file = sources.peek().file; assert file != null; try { file.getInputStream().close(); } catch (java.io.IOException e) { com.android.sched.util.config.cli.TokenIterator.logger.log(java.util.logging.Level.FINE, (""Cannot close "" + (file.getLocation()))); } sources.pop(); tokenizer = sources.peek().tokenizer; } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if (((allowFileRefInArray) && (!(args[index].isEmpty()))) && ((args[index].charAt(0)) == (filePrefix))) { pushFileTokenizer(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], sources.peek().location); } } }",9c64fe16247ecb62389955bb516d1291df783c31,getNext(),getNext(),4,6,"@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = sources.getCurrentTokenizer(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if (((allowFileRefInFile) && (!(tokenizer.sval.isEmpty()))) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { sources.push(tokenizer.sval.substring(1)); tokenizer = sources.getCurrentTokenizer(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(sources.getCurrentLocation(), tokenizer.lineno())); } } } catch (java.io.IOException e) { try { throw new com.android.sched.util.file.CannotReadException(sources.getCurrentLocation()); } finally { sources.clear(); sources.push(new com.android.sched.util.location.NoLocation()); index = args.length; } } sources.pop(); tokenizer = sources.getCurrentTokenizer(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if (((allowFileRefInArray) && (!(args[index].isEmpty()))) && ((args[index].charAt(0)) == (filePrefix))) { sources.push(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], sources.getCurrentLocation()); } } }",a05ab4918ff59f0a2fba49c3b81bfecfb941ae40,getNext(),186940,506,427
510195,test_959-invoke-polymorphic-accessors_src_Main.java,9.0,"static void setFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }",6702d190b54176b19e8bcda7cf28f58439472527,"static void setFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }",192f728fe248068f3fdc2b5f4b6f59ca63c0bc49,"setFloat(java.lang.invoke.MethodHandle,Main$ValueHolder,float,boolean)","setFloat(java.lang.invoke.MethodHandle,Main$ValueHolder,float,boolean)",3,8,"static void setFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }",86c6431214b8e56f43fda9d6545a4da6e461d076,"setFloat(java.lang.invoke.MethodHandle,Main$ValueHolder,float,boolean)",228872,104,103
195841,wifi_java_android_net_wifi_WifiSsid.java,2.0,"public java.lang.String getHexString() { java.lang.String out = ""0x""; byte[] ssidbytes = getOctets(); for (int i = 0; i < (octets.size()); i++) { out += java.lang.String.format(java.util.Locale.US, ""%02x"", ssidbytes[i]); } return out; }",8b3c48faea94e1bf5b891b0004a7bbc73a904bfc,"public java.lang.String getHexString() { java.lang.String out = ""0x""; byte[] ssidbytes = getOctets(); for (int i = 0; i < (octets.size()); i++) { out += java.lang.String.format(java.util.Locale.US, ""%02x"", ssidbytes[i]); } return i ? out : android.net.wifi.WifiSsid.NONE; }",ffb619503beac7ae436bdc6801b0c58db305caaa,getHexString(),getHexString(),7,2,"public java.lang.String getHexString() { java.lang.String out = ""0x""; byte[] ssidbytes = getOctets(); for (int i = 0; i < (octets.size()); i++) { out += java.lang.String.format(java.util.Locale.US, ""%02x"", ssidbytes[i]); } return (octets.size()) > 0 ? out : null; }",2cebc722fb7ea96737d90a08e58be81212472468,getHexString(),289934,101,98
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void checkClzUint2() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, 0, 500); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUint2(inValue, out); verifyResultsClzUint2(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUint2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUint2(inValue, out); verifyResultsClzUint2(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUint2: "" + (e.toString()))); } }",6fee86ed8e5a11e1bb66a16e3d3f5554b2c6ccdf,,checkClzUint2(),9,30,"private void checkClzUint2Uint2() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.UNSIGNED_32, 2, 7914955399628281024L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUint2Uint2(inValue, out); verifyResultsClzUint2Uint2(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUint2Uint2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUint2Uint2(inValue, out); verifyResultsClzUint2Uint2(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUint2Uint2: "" + (e.toString()))); } }",d0a9e104e955c42ccdd031c62aa5416c2666ca07,checkClzUint2Uint2(),143443,331,326
245772,test_478-checker-clinit-check-pruning_src_Main.java,31.0,static void inlinedForNull(java.lang.Iterable<?> it) { if (it != null) { it.iterator(); } },856259d5e03634ada24265f718b8d18a7d03503f,"static void inlinedForNull(java.lang.Iterable<?> it) { if (it != null) { if (Main.doThrow) throw new java.lang.Error(""""); } }",52ecc35894dccc3d4e154c759eb71cfba5841c3a,inlinedForNull(java.lang.Iterable),inlinedForNull(java.lang.Iterable),6,31,"static void inlinedForNull(java.lang.Iterable<?> it) { if (it != null) { if (Main.doThrow) { throw new java.lang.Error(""""); } } }",717866aa5bc88cd4118412bd813266f8652b241f,inlinedForNull(java.lang.Iterable),465426,38,40
301782,system_image_uitests_app_src_main_java_com_android_devtools_systemimage_uitest_utils_DeveloperOptionsManager.java,0.0,"public static boolean isDeveloperOptionsEnabled(android.app.Instrumentation instrumentation) throws android.support.test.uiautomator.UiObjectNotFoundException { return com.android.devtools.systemimage.uitest.utils.SettingsUtil.scrollToItem(instrumentation, ""Developer options""); }",11542f5d11599f522d2a1b5df7aa107534f903a0,"public static boolean isDeveloperOptionsEnabled(final android.app.Instrumentation instrumentation) throws android.support.test.uiautomator.UiObjectNotFoundException { com.android.devtools.systemimage.uitest.utils.SettingsUtil.findItem(instrumentation, ""Developer options"").waitForExists(5000); return com.android.devtools.systemimage.uitest.utils.SettingsUtil.scrollToItem(instrumentation, ""Developer options""); }",954fb38dc62093c3ce1447f2917cef91ff534375,isDeveloperOptionsEnabled(android.app.Instrumentation),isDeveloperOptionsEnabled(android.app.Instrumentation),2,0,"public static boolean isDeveloperOptionsEnabled(final android.app.Instrumentation instrumentation) throws android.support.test.uiautomator.UiObjectNotFoundException { com.android.devtools.systemimage.uitest.utils.SettingsUtil.findItem(instrumentation, ""Developer options"").waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(5L, java.util.concurrent.TimeUnit.SECONDS)); return com.android.devtools.systemimage.uitest.utils.SettingsUtil.scrollToItem(instrumentation, ""Developer options""); }",68b71b208b2deaf1c699727dcf4d2db746cf05c8,isDeveloperOptionsEnabled(android.app.Instrumentation),21173,89,114
298117,tests_src_com_android_server_telecom_tests_CallAudioRouteStateMachineTest.java,15.0,"@android.test.suitebuilder.annotation.MediumTest public void testUserBluetoothSwitchOff() { com.android.server.telecom.CallAudioRouteStateMachine stateMachine = new com.android.server.telecom.CallAudioRouteStateMachine(mContext, mockCallsManager, mockBluetoothManager, mockWiredHeadsetManager, mockStatusBarNotifier, mAudioServiceFactory, true); when(mockBluetoothManager.isBluetoothAudioConnectedOrPending()).thenReturn(false); when(mockBluetoothManager.isBluetoothAvailable()).thenReturn(true); when(mockAudioManager.isSpeakerphoneOn()).thenReturn(true); android.telecom.CallAudioState initState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); stateMachine.initialize(initState); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.ACTIVE_FOCUS); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BASELINE_ROUTE); android.telecom.CallAudioState expectedEndState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_EARPIECE, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verifyNewSystemCallAudioState(initState, expectedEndState); resetMocks(); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.CONNECT_BLUETOOTH); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); assertEquals(expectedEndState, stateMachine.getCurrentCallAudioState()); }",7b717871abc2b2d6730298978bceb8e11a5d9cc7,"@android.test.suitebuilder.annotation.MediumTest public void testUserBluetoothSwitchOff() { com.android.server.telecom.CallAudioRouteStateMachine stateMachine = new com.android.server.telecom.CallAudioRouteStateMachine(mContext, mockCallsManager, mockBluetoothRouteManager, mockWiredHeadsetManager, mockStatusBarNotifier, mAudioServiceFactory, true); when(mockBluetoothRouteManager.isBluetoothAudioConnectedOrPending()).thenReturn(false); when(mockBluetoothRouteManager.isBluetoothAvailable()).thenReturn(true); when(mockAudioManager.isSpeakerphoneOn()).thenReturn(true); android.telecom.CallAudioState initState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); stateMachine.initialize(initState); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.ACTIVE_FOCUS); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BASELINE_ROUTE); android.telecom.CallAudioState expectedEndState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_EARPIECE, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verifyNewSystemCallAudioState(initState, expectedEndState); resetMocks(); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.CONNECT_BLUETOOTH); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); assertEquals(expectedEndState, stateMachine.getCurrentCallAudioState()); }",16374dcc23a7c4ac323b128c7a84c41eed53d921,testUserBluetoothSwitchOff(),testUserBluetoothSwitchOff(),7,17,"@android.test.suitebuilder.annotation.MediumTest public void testUserBluetoothSwitchOff() { com.android.server.telecom.CallAudioRouteStateMachine stateMachine = new com.android.server.telecom.CallAudioRouteStateMachine(mContext, mockCallsManager, mockBluetoothRouteManager, mockWiredHeadsetManager, mockStatusBarNotifier, mAudioServiceFactory, mMockInterruptionFilterProxy, true); when(mockBluetoothRouteManager.isBluetoothAudioConnectedOrPending()).thenReturn(false); when(mockBluetoothRouteManager.isBluetoothAvailable()).thenReturn(true); when(mockAudioManager.isSpeakerphoneOn()).thenReturn(true); android.telecom.CallAudioState initState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); stateMachine.initialize(initState); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.ACTIVE_FOCUS); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BASELINE_ROUTE); android.telecom.CallAudioState expectedEndState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_EARPIECE, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verifyNewSystemCallAudioState(initState, expectedEndState); assertEquals(NotificationManager.INTERRUPTION_FILTER_ALARMS, mMockInterruptionFilterProxy.getCurrentInterruptionFilter()); resetMocks(false); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.CONNECT_BLUETOOTH); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); assertEquals(expectedEndState, stateMachine.getCurrentCallAudioState()); }",c9fd040ad429ad70b8ea46da08bf1d3164fb2766,testUserBluetoothSwitchOff(),58900,458,494
50376,common_src_test_java_com_android_utils_SdkUtilsTest.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testParseDoubleWithDefault() throws java.lang.Exception { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(1000.0, com.android.utils.SdkUtils.parseLocalizedDouble(""1000"", 0)); assertEquals(2.0, com.android.utils.SdkUtils.parseLocalizedDouble(""2x"", 3)); assertEquals(4.0, com.android.utils.SdkUtils.parseLocalizedDouble("""", 4)); assertEquals(5.0, com.android.utils.SdkUtils.parseLocalizedDouble(""test"", 5)); java.util.Locale.setDefault(java.util.Locale.FRANCE); assertEquals(1000.0, com.android.utils.SdkUtils.parseLocalizedDouble(""1000"", (-1))); assertEquals(8.0, com.android.utils.SdkUtils.parseLocalizedDouble("""", 8)); }",4ba45e51c102a9692c29b953e7abeea3fa120384,,testParseDoubleWithDefault(),3,3,"public void testParseDoubleWithDefault() throws java.lang.Exception { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(1000.0, com.android.utils.SdkUtils.parseLocalizedDouble(""1000"", 0)); assertEquals(2.0, com.android.utils.SdkUtils.parseLocalizedDouble(""2x"", 3)); assertEquals(0.0, com.android.utils.SdkUtils.parseLocalizedDouble("""", 4)); assertEquals(5.0, com.android.utils.SdkUtils.parseLocalizedDouble(""test"", 5)); java.util.Locale.setDefault(java.util.Locale.FRANCE); assertEquals(1000.0, com.android.utils.SdkUtils.parseLocalizedDouble(""1000"", (-1))); assertEquals(0.0, com.android.utils.SdkUtils.parseLocalizedDouble("""", 8)); }",f1bb2aa2ef8d59d738adce07d85b122d5824667a,testParseDoubleWithDefault(),491241,172,170
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,public com.android.internal.telephony.IccCardApplicationStatus.PersoSubState getPersoSubState() { return mPersoSubState; },0920b5c236d154201be5e81cc6f28d645acba1ba,,getPersoSubState(),22,18,public com.android.internal.telephony.IccCardApplicationStatus.PersoSubState getPersoSubState() { synchronized(mLock) { return mPersoSubState; } },272d7c9d85e2106ff7346f745620229df83444f5,getPersoSubState(),499260,34,41
482797,core_java_android_os_Process.java,24.0,"public static final android.os.Process.ProcessStartResult start(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int debugFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.os.Process.zygoteProcess.start(processClass, niceName, uid, gid, gids, debugFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }",1f16f8a3cb4fd47ee9e64112d5fd49e794c576e9,"public static final android.os.Process.ProcessStartResult start(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int artFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.os.Process.zygoteProcess.start(processClass, niceName, uid, gid, gids, artFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }",252b211c32cd5c7c1e453db4efdd3ee158a4072f,"start(java.lang.String,java.lang.String,int,int,int[],int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])","start(java.lang.String,java.lang.String,int,int,int[],int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",3,24,"public static final android.os.Process.ProcessStartResult start(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.os.Process.zygoteProcess.start(processClass, niceName, uid, gid, gids, runtimeFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }",49cd38fa556c452cbed09dc2b0299da2ab54e381,"start(java.lang.String,java.lang.String,int,int,int[],int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",502334,170,170
120304,jack_src_com_android_jack_ir_ast_JNode.java,2.0,@java.lang.Override public final java.lang.String toString() { com.android.jack.util.DefaultTextOutput out = new com.android.jack.util.DefaultTextOutput(true); com.android.jack.ir.impl.ToStringGenerationVisitor v = new com.android.jack.ir.impl.ToStringGenerationVisitor(out); v.accept(this); return out.toString(); },b12a125c2902735c8e42e7b0e4312820519d67eb,"@java.lang.Override public final java.lang.String toString() { java.lang.String str; com.android.jack.util.DefaultTextOutput out = new com.android.jack.util.DefaultTextOutput(true); com.android.jack.ir.impl.ToStringGenerationVisitor v = new com.android.jack.ir.impl.ToStringGenerationVisitor(out); v.accept(this); str = out.toString(); com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = getSourceInfo(); if (sourceInfo != (com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN)) { str += ("" ("" + (getSourceInfo().toString())) + "")""; } return str; }",fe7916ba3f2f2fabf9cd29bacd6cb6b04e81d2dc,toString(),toString(),2,2,@java.lang.Override public final java.lang.String toString() { com.android.jack.util.DefaultTextOutput out = new com.android.jack.util.DefaultTextOutput(true); com.android.jack.ir.impl.ToStringGenerationVisitor v = new com.android.jack.ir.impl.ToStringGenerationVisitor(out); v.accept(this); return out.toString(); },b12a125c2902735c8e42e7b0e4312820519d67eb,toString(),427197,159,89
353683,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,8.0,"private static void assertCdmaDeviceId(java.lang.String deviceId) { if ((deviceId.length()) == 14) { android.telephony.cts.TelephonyManagerTest.assertMeidFormat(deviceId); } else if ((deviceId.length()) == 8) { android.telephony.cts.TelephonyManagerTest.assertHexadecimalEsnFormat(deviceId); } else { fail(""device id on CDMA must be 14-digit hex MEID or 8-digit hex ESN.""); } }",a420e7639f93c91825dd960c60787f0341419651,"private static void assertMeid(java.lang.String meid) { if ((meid.length()) == 14) { android.telephony.cts.TelephonyManagerTest.assertMeidFormat(meid); } else if ((meid.length()) == 8) { android.telephony.cts.TelephonyManagerTest.assertHexadecimalEsnFormat(meid); } else { fail(""device id on CDMA must be 14-digit hex MEID or 8-digit hex ESN.""); } }",0ed1f5417bea69578e870d72e468c7d0b1006fcc,assertCdmaDeviceId(java.lang.String),assertMeid(java.lang.String),5,6,"private static void assertMeidEsn(java.lang.String id) { if ((id.length()) == 14) { android.telephony.cts.TelephonyManagerTest.assertMeidFormat(id); } else if ((id.length()) == 8) { android.telephony.cts.TelephonyManagerTest.assertHexadecimalEsnFormat(id); } else { fail(""device id on CDMA must be 14-digit hex MEID or 8-digit hex ESN.""); } }",c6386486b2efd8253ad069f089d8ed53b56f558e,assertMeidEsn(java.lang.String),166700,110,108
328671,service_java_com_android_server_wifi_WifiNative.java,58.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.net.wifi.IClientInterface setupDriverForClientMode(android.net.wifi.IWificond wificond) { return mWificondControl.setupDriverForClientMode(wificond); },4a03eef16955743e8fa14cd04d3e6c203c7c80bd,,setupDriverForClientMode(android.net.wifi.IWificond),22,119,public void setWificondControl(com.android.server.wifi.WificondControl wificondControl) { mWificondControl = wificondControl; },d191c5165f0e5a43f25f04a9bf0f0cc463c8df8c,setWificondControl(com.android.server.wifi.WificondControl),28461,45,33
22391,telephony_java_com_android_internal_telephony_IccPhoneBookInterfaceManager.java,11.0,"public boolean updateAdnRecordsInEfByIndex(int efid, java.lang.String newTag, java.lang.String newPhoneNumber, int index, java.lang.String pin2) { if ((phone.getContext().checkCallingOrSelfPermission(android.Manifest.permission.WRITE_CONTACTS)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException(""Requires android.permission.WRITE_CONTACTS permission""); } if (com.android.internal.telephony.IccPhoneBookInterfaceManager.DBG) logd((((((((((((""updateAdnRecordsInEfByIndex: efid="" + efid) + "" Index="") + index) + "" ==> "") + ""("") + newTag) + "","") + newPhoneNumber) + "")"") + "" pin2="") + pin2)); synchronized(mLock) { checkThread(); success = false; android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.IccPhoneBookInterfaceManager.EVENT_UPDATE_DONE); com.android.internal.telephony.AdnRecord newAdn = new com.android.internal.telephony.AdnRecord(newTag, newPhoneNumber); adnCache.updateAdnByIndex(efid, newAdn, index, pin2, response); try { mLock.wait(); } catch (java.lang.InterruptedException e) { logd(""interrupted while trying to update by index""); } } return success; }",7ebfbc83a2b6348d2e4ad439a91e95e16bcc13b7,"public boolean updateAdnRecordsInEfByIndex(int efid, java.lang.String newTag, java.lang.String newPhoneNumber, int index, java.lang.String pin2) { if ((phone.getContext().checkCallingOrSelfPermission(android.Manifest.permission.WRITE_CONTACTS)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException(""Requires android.permission.WRITE_CONTACTS permission""); } if (com.android.internal.telephony.IccPhoneBookInterfaceManager.DBG) logd((((((((((((""updateAdnRecordsInEfByIndex: efid="" + efid) + "" Index="") + index) + "" ==> "") + ""("") + newTag) + "","") + newPhoneNumber) + "")"") + "" pin2="") + pin2)); synchronized(mLock) { checkThread(); success = false; java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean(false); android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.IccPhoneBookInterfaceManager.EVENT_UPDATE_DONE, status); com.android.internal.telephony.AdnRecord newAdn = new com.android.internal.telephony.AdnRecord(newTag, newPhoneNumber); adnCache.updateAdnByIndex(efid, newAdn, index, pin2, response); while (!(status.get())) { try { mLock.wait(); } catch (java.lang.InterruptedException e) { logd(""interrupted while trying to update by index""); } } } return success; }",c0b70358ee886a2c32e358581ced606c547d3800,"updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)","updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)",3,10,"public boolean updateAdnRecordsInEfByIndex(int efid, java.lang.String newTag, java.lang.String newPhoneNumber, int index, java.lang.String pin2) { if ((phone.getContext().checkCallingOrSelfPermission(android.Manifest.permission.WRITE_CONTACTS)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException(""Requires android.permission.WRITE_CONTACTS permission""); } if (com.android.internal.telephony.IccPhoneBookInterfaceManager.DBG) logd((((((((((((""updateAdnRecordsInEfByIndex: efid="" + efid) + "" Index="") + index) + "" ==> "") + ""("") + newTag) + "","") + newPhoneNumber) + "")"") + "" pin2="") + pin2)); synchronized(mLock) { checkThread(); success = false; java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean(false); android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.IccPhoneBookInterfaceManager.EVENT_UPDATE_DONE, status); com.android.internal.telephony.AdnRecord newAdn = new com.android.internal.telephony.AdnRecord(newTag, newPhoneNumber); adnCache.updateAdnByIndex(efid, newAdn, index, pin2, response); waitForResult(status); } return success; }",797b2fdb616233d6b611ae9238bcdcc4e3d46df4,"updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)",152216,370,336
584815,src_java_com_android_internal_telephony_uicc_IccRecords.java,40.0,protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && (mLockedRecordsRequested); },932442e4f649cf8a183e97e479edb1921d91e6fc,protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)); },2f2851081ab0904526b52e0068093b3a0c4884f8,getLockedRecordsLoaded(),getLockedRecordsLoaded(),3,40,protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_LOCKED)); },a62d2cd8cc806f482bc924646d2bd72f7bb3fef8,getLockedRecordsLoaded(),500821,57,55
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,8.0,"@java.lang.Override public void fchmod(java.io.FileDescriptor fd, int mode) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchmod(fd, mode); }",aa63a43776f2e167335bdfb334a97556c21f28fc,"@java.lang.Override public void fchmod(java.io.FileDescriptor fd, int mode) throws android.os.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchmod(fd, mode); }",bc3768e791edc9e2ee4989a250a4fb13578afb05,"fchmod(java.io.FileDescriptor,int)","fchmod(java.io.FileDescriptor,int)",3,9,"@java.lang.Override public void fchmod(java.io.FileDescriptor fd, int mode) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchmod(fd, mode); }",8c15030c7657f36dc5513bc93e202af65577e0d9,"fchmod(java.io.FileDescriptor,int)",170369,58,58
346896,tests_tests_net_src_android_net_wifi_aware_cts_SingleDeviceTest.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"boolean waitForCallback(int callback) { java.util.Iterator<java.lang.Integer> it = mCallbackQueue.iterator(); while (it.hasNext()) { if ((it.next()) == callback) { it.remove(); return true; } } mCurrentWaitForCallback = callback; mBlocker = new java.util.concurrent.CountDownLatch(1); try { return mBlocker.await(android.net.wifi.aware.cts.SingleDeviceTest.WAIT_FOR_AWARE_CHANGE, java.util.concurrent.TimeUnit.SECONDS); } catch (java.lang.InterruptedException e) { return false; } }",b7662598fc1cad8b0037ba68b610fda195e264aa,,waitForCallback(int),6,18,"boolean waitForCallback(int callback) { synchronized(mLocalLock) { boolean found = mCallbackQueue.remove(callback); if (found) { return true; } mCurrentWaitForCallback = callback; mBlocker = new java.util.concurrent.CountDownLatch(1); } try { return mBlocker.await(android.net.wifi.aware.cts.SingleDeviceTest.WAIT_FOR_AWARE_CHANGE_SECS, java.util.concurrent.TimeUnit.SECONDS); } catch (java.lang.InterruptedException e) { return false; } }",435a85825deffff3048e118689213aedabf7cbbf,waitForCallback(int),186950,136,120
526078,harnesses_tradefed_src_com_android_tradefed_util_ProcessUtil.java,,,,"public void cleanUp() { if (isRunning()) { com.android.tradefed.log.LogUtil.CLog.e(""Kill the running process.""); mProcess.destroy(); } try { mStdinWriter.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStdoutReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStderrReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } com.android.tradefed.util.ProcessUtil.joinThread(mStdoutThread, com.android.tradefed.util.ProcessUtil.THREAD_JOIN_TIMEOUT_MSECS); com.android.tradefed.util.ProcessUtil.joinThread(mStderrThread, com.android.tradefed.util.ProcessUtil.THREAD_JOIN_TIMEOUT_MSECS); }",14b16f539ad932b2a030ca5b755938b37363c4ee,,cleanUp(),7,0,"public void cleanUp() { try { for (int pollCount = 0; isRunning(); pollCount++) { if (pollCount >= (com.android.tradefed.util.ProcessHelper.DESTROY_PROCESS_MAX_POLL_COUNT)) { com.android.tradefed.log.LogUtil.CLog.e(""Cannot destroy the process.""); break; } if (pollCount == 0) { com.android.tradefed.log.LogUtil.CLog.w(""Kill the running process.""); mProcess.destroy(); } else { java.lang.Thread.sleep(com.android.tradefed.util.ProcessHelper.DESTROY_PROCESS_POLL_INTERVAL_MSECS); } } } catch (java.lang.InterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { closeStdin(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStdoutReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStderrReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } com.android.tradefed.util.ProcessHelper.joinThread(mStdoutThread, com.android.tradefed.util.ProcessHelper.THREAD_JOIN_TIMEOUT_MSECS); com.android.tradefed.util.ProcessHelper.joinThread(mStderrThread, com.android.tradefed.util.ProcessHelper.THREAD_JOIN_TIMEOUT_MSECS); }",71acc2f8e3e2e8bc869d7b742e8e49d939455729,cleanUp(),28398,253,395
296799,jack_src_com_android_jack_ir_ast_cfg_CFGExpressionValidator.java,,,,public static void validate(@javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlockElement element) { new com.android.jack.ir.ast.cfg.CFGExpressionValidator().accept(element); },4e29bfe0603af0eade554b5d4220be34dcb22af8,,validate(com.android.jack.ir.ast.cfg.JBasicBlockElement),2,0,public static void validate(@javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlockElement element) { new com.android.jack.ir.ast.cfg.CfgExpressionValidator().accept(element); },1107be6a4732d052a517f0f6fbceefe05a7ec9ec,validate(com.android.jack.ir.ast.cfg.JBasicBlockElement),255762,51,51
103652,sdkmanager_sdkuilib_src_main_java_com_android_sdkuilib_internal_widgets_AvdCreationPresenter.java,,,,void onDeviceSelection() { com.android.sdklib.devices.Device currentDevice = getSelectedDevice(); if (currentDevice != null) { fillDeviceProperties(currentDevice); } toggleCameras(); validatePage(); },cc88a602d392b44cfb3f559b464257b0def63442,,onDeviceSelection(),2,55,void onDeviceComboChanged() { com.android.sdklib.devices.Device currentDevice = getSelectedDevice(); if (currentDevice != null) { fillDeviceProperties(currentDevice); } toggleCameras(); validatePage(); },d78453fab6a52ade9841741197cf26fbb3141b04,onDeviceComboChanged(),67154,48,49
20840,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_build_nonjava_AidlGenerator.java,,,,"private boolean parseAidlOutput(java.util.ArrayList<java.lang.String> lines, org.eclipse.core.resources.IFile file) { if ((lines.size()) == 0) { return false; } java.util.regex.Matcher m; for (int i = 0; i < (lines.size()); i++) { java.lang.String p = lines.get(i); m = com.android.ide.eclipse.adt.internal.build.nonjava.AidlGenerator.sAidlPattern1.matcher(p); if (m.matches()) { java.lang.String lineStr = m.group(2); java.lang.String msg = m.group(3); int line = 0; try { line = java.lang.Integer.parseInt(lineStr); } catch (java.lang.NumberFormatException e) { return true; } com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.markResource(file, AndroidConstants.MARKER_AIDL, msg, line, IMarker.SEVERITY_ERROR); continue; } return true; } return false; }",79f368f7e53bf9c4da35ae588a55195b51d9776d,,"parseAidlOutput(java.util.ArrayList,org.eclipse.core.resources.IFile)",4,5,"private boolean parseAidlOutput(java.util.ArrayList<java.lang.String> lines, org.eclipse.core.resources.IFile file) { if ((lines.size()) == 0) { return false; } java.util.regex.Matcher m; for (int i = 0; i < (lines.size()); i++) { java.lang.String p = lines.get(i); m = com.android.ide.eclipse.adt.internal.build.AidlGenerator.sAidlPattern1.matcher(p); if (m.matches()) { java.lang.String lineStr = m.group(2); java.lang.String msg = m.group(3); int line = 0; try { line = java.lang.Integer.parseInt(lineStr); } catch (java.lang.NumberFormatException e) { return true; } com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.markResource(file, AndroidConstants.MARKER_AIDL, msg, line, IMarker.SEVERITY_ERROR); continue; } return true; } return false; }",30c8d0983d4bafd7d4d8aebc2390583b8eef3e14,"parseAidlOutput(java.util.ArrayList,org.eclipse.core.resources.IFile)",479570,241,238
237621,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,9.0,@org.junit.Test public void retroLambdaDefaultMethodsTest024() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_024); },fc154fc8e4594e791a3296916886ed8ee12f4826,@org.junit.Test @java.lang.Runtime public void retroLambdaDefaultMethodsTest024() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_024); },254aff5dd7f650c16d9b45871f9b897953d46997,retroLambdaDefaultMethodsTest024(),retroLambdaDefaultMethodsTest024(),11,9,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void retroLambdaDefaultMethodsTest024() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_024); },89acf8b556991edb555f4c2232a913778e3b023a,retroLambdaDefaultMethodsTest024(),273877,44,52
224502,src_com_android_services_telephony_TelephonyConnection.java,69.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isManageConferenceCallSupported() { return mIsManageConferenceCallSupported; },f3eabf2866c4ebd2b7a3428cc485f30a9352af05,,isManageConferenceCallSupported(),8,75,public boolean isManageImsConferenceCallSupported() { return mIsManageImsConferenceCallSupported; },9f99af4fbee590d0fc3c88c5d78eee7ac8edbc1d,isManageImsConferenceCallSupported(),210156,18,22
253791,luni_src_main_java_libcore_io_ForwardingOs.java,66.0,"public int fcntlVoid(java.io.FileDescriptor fd, int cmd) throws android.system.ErrnoException { return os.fcntlVoid(fd, cmd); }",c4820c74d7a20f1fafb1e855a80138a1bb3b7719,"public int fcntlVoid(java.io.FileDescriptor fd, int cmd) throws libcore.io.ErrnoException { return os.fcntlVoid(fd, cmd); }",6fb988dd934cdb2d772ad71fef214f56631efb86,"fcntlVoid(java.io.FileDescriptor,int)","fcntlVoid(java.io.FileDescriptor,int)",8,63,"public int fcntlVoid(java.io.FileDescriptor fd, int cmd) throws android.system.ErrnoException { return os.fcntlVoid(fd, cmd); }",c4820c74d7a20f1fafb1e855a80138a1bb3b7719,"fcntlVoid(java.io.FileDescriptor,int)",494791,40,39
367559,test_906-iterate-heap_src_Main.java,6.0,"private static void doTestPrimitiveFieldsIntegral() { Main.IntObject intObject = new Main.IntObject(); Main.setTag(intObject, 10000); java.lang.System.out.println(Main.iterateThroughHeapPrimitiveFields(10000)); java.lang.System.out.println(Main.getTag(intObject)); }",2bb35f4d41aac19c523f0670a646271767a0ac2e,"private static void doTestPrimitiveFieldsIntegral() { art.Test906.IntObject intObject = new art.Test906.IntObject(); art.Main.setTag(intObject, 10000); java.lang.System.out.println(art.Test906.iterateThroughHeapPrimitiveFields(10000)); java.lang.System.out.println(art.Main.getTag(intObject)); }",5fe7e4a961e4e5cef3f20c1575b4ff0ba99ce35d,doTestPrimitiveFieldsIntegral(),doTestPrimitiveFieldsIntegral(),2,6,"private static void doTestPrimitiveFieldsIntegral() { art.Test906.IntObject intObject = new art.Test906.IntObject(); art.Test906.setTag(intObject, 10000); java.lang.System.out.println(art.Test906.iterateThroughHeapPrimitiveFields(10000)); java.lang.System.out.println(art.Test906.getTag(intObject)); }",eb55d18e1918b844f1000a43274fcfe0311ef136,doTestPrimitiveFieldsIntegral(),298563,86,90
144280,services_core_java_com_android_server_pm_Installer.java,5.0,"public int dexopt(java.lang.String apkPath, int uid, boolean isPublic, java.lang.String pkgName, java.lang.String instructionSet, boolean vmSafeMode, boolean debuggable) { if (!(com.android.server.pm.Installer.isValidInstructionSet(instructionSet))) { android.util.Slog.e(com.android.server.pm.Installer.TAG, (""Invalid instruction set: "" + instructionSet)); return -1; } return mInstaller.dexopt(apkPath, uid, isPublic, pkgName, instructionSet, vmSafeMode, debuggable); }",a53b2b225dfeae405205f7c979ae0d1d5ad2b280,"public int dexopt(java.lang.String apkPath, int uid, boolean isPublic, java.lang.String pkgName, java.lang.String instructionSet, int dexoptStatus, boolean vmSafeMode, boolean debuggable) { if (!(com.android.server.pm.Installer.isValidInstructionSet(instructionSet))) { android.util.Slog.e(com.android.server.pm.Installer.TAG, (""Invalid instruction set: "" + instructionSet)); return -1; } return mInstaller.dexopt(apkPath, uid, isPublic, pkgName, instructionSet, dexoptStatus, vmSafeMode, debuggable); }",6d49fa0f04beee11dad1e9a4a772fe1de6dcd9f1,"dexopt(java.lang.String,int,boolean,java.lang.String,java.lang.String,boolean,boolean)","dexopt(java.lang.String,int,boolean,java.lang.String,java.lang.String,int,boolean,boolean)",3,3,"public int dexopt(java.lang.String apkPath, int uid, boolean isPublic, java.lang.String pkgName, java.lang.String instructionSet, int dexoptNeeded, boolean vmSafeMode, boolean debuggable, @android.annotation.Nullable java.lang.String outputPath) { if (!(com.android.server.pm.Installer.isValidInstructionSet(instructionSet))) { android.util.Slog.e(com.android.server.pm.Installer.TAG, (""Invalid instruction set: "" + instructionSet)); return -1; } return mInstaller.dexopt(apkPath, uid, isPublic, pkgName, instructionSet, dexoptNeeded, vmSafeMode, debuggable, outputPath); }",3b829bb52bc8f539f7cade665530bb53cae13c5b,"dexopt(java.lang.String,int,boolean,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.String)",123662,144,161
245614,luni_src_test_java_libcore_java_math_BigDecimalTest.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testMultiply_near64BitOverflow_negative() { assertEquals(""-9223372036854775808"", libcore.java.math.BigDecimalTest.multiply(java.lang.Long.MIN_VALUE, 1).toString()); assertEquals(""-9223372036854775808"", libcore.java.math.BigDecimalTest.multiply(((java.lang.Long.MIN_VALUE) / 2), 2).toString()); assertEquals(""-9223372036854775808"", libcore.java.math.BigDecimalTest.multiply((-(1L << 31)), (1L << 32)).toString()); assertEquals(""-9223372036854775807"", libcore.java.math.BigDecimalTest.multiply((-42128471623L), 218934409L).toString()); assertEquals(""-9223372036854775810"", libcore.java.math.BigDecimalTest.multiply(((-((java.lang.Long.MIN_VALUE) / 2)) + 1), (-2)).toString()); }",ae24b0609ed89abc0d9b0027127d3cdf2d59039f,,testMultiply_near64BitOverflow_negative(),8,6,"public void testMultiply_near64BitOverflow_negative() { assertEquals(""-9223372036854775808"", libcore.java.math.BigDecimalTest.bigMultiply(java.lang.Long.MIN_VALUE, 1).toString()); assertEquals(""-9223372036854775808"", libcore.java.math.BigDecimalTest.bigMultiply(((java.lang.Long.MIN_VALUE) / 2), 2).toString()); assertEquals(""-9223372036854775808"", libcore.java.math.BigDecimalTest.bigMultiply((-(1L << 31)), (1L << 32)).toString()); assertEquals(""-9223372036854775807"", libcore.java.math.BigDecimalTest.bigMultiply((-42128471623L), 218934409L).toString()); assertEquals(""-9223372036854775810"", libcore.java.math.BigDecimalTest.bigMultiply(((-((java.lang.Long.MIN_VALUE) / 2)) + 1), (-2)).toString()); }",b84a9475cb6fed00e3d8bc8fe687c17fcf3e055c,testMultiply_near64BitOverflow_negative(),85102,195,200
354544,service_java_com_android_server_wifi_WifiVendorHal.java,59.0,"public boolean configureRoaming(com.android.server.wifi.WifiNative.RoamingConfig config) { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return boolResult(false); try { android.hardware.wifi.V1_0.StaRoamingConfig roamingConfig = new android.hardware.wifi.V1_0.StaRoamingConfig(); if ((config.blacklistBssids) != null) { for (java.lang.String bssid : config.blacklistBssids) { byte[] mac = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); roamingConfig.bssidBlacklist.add(mac); } } if ((config.whitelistSsids) != null) { for (java.lang.String ssidStr : config.whitelistSsids) { java.lang.String unquotedSsidStr = android.net.wifi.WifiInfo.removeDoubleQuotes(ssidStr); int len = unquotedSsidStr.length(); if (len > 32) { mLog.err(""configureRoaming: skip invalid SSID %"").r(unquotedSsidStr).flush(); continue; } byte[] ssid = new byte[len]; for (int i = 0; i < len; i++) { ssid[i] = ((byte) (unquotedSsidStr.charAt(i))); } roamingConfig.ssidWhitelist.add(ssid); } } android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.configureRoaming(roamingConfig); if (!(ok(status))) return false; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } return true; } }",98e655e42e00e5db337d4eedeb7039493c119b55,"public boolean configureRoaming(com.android.server.wifi.WifiNative.RoamingConfig config) { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return boolResult(false); try { android.hardware.wifi.V1_0.StaRoamingConfig roamingConfig = new android.hardware.wifi.V1_0.StaRoamingConfig(); if ((config.blacklistBssids) != null) { for (java.lang.String bssid : config.blacklistBssids) { byte[] mac = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); roamingConfig.bssidBlacklist.add(mac); } } if ((config.whitelistSsids) != null) { for (java.lang.String ssidStr : config.whitelistSsids) { java.lang.String unquotedSsidStr = android.net.wifi.WifiInfo.removeDoubleQuotes(ssidStr); int len = unquotedSsidStr.length(); if (len > 32) { mLog.err(""configureRoaming: skip invalid SSID %"").r(unquotedSsidStr).flush(); continue; } byte[] ssid = new byte[len]; for (int i = 0; i < len; i++) { ssid[i] = ((byte) (unquotedSsidStr.charAt(i))); } roamingConfig.ssidWhitelist.add(ssid); } } android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.configureRoaming(roamingConfig); if (!(ok(status))) return false; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } catch (java.lang.IllegalArgumentException e) { mLog.err(""Illegal argument"").flush(); return false; } return true; } }",647c404d6ee6031cc157856e35b362d57d03cfa4,configureRoaming(com.android.server.wifi.WifiNative$RoamingConfig),configureRoaming(com.android.server.wifi.WifiNative$RoamingConfig),14,59,"public boolean configureRoaming(com.android.server.wifi.WifiNative.RoamingConfig config) { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return boolResult(false); try { android.hardware.wifi.V1_0.StaRoamingConfig roamingConfig = new android.hardware.wifi.V1_0.StaRoamingConfig(); if ((config.blacklistBssids) != null) { for (java.lang.String bssid : config.blacklistBssids) { byte[] mac = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); roamingConfig.bssidBlacklist.add(mac); } } if ((config.whitelistSsids) != null) { for (java.lang.String ssidStr : config.whitelistSsids) { java.lang.String unquotedSsidStr = android.net.wifi.WifiInfo.removeDoubleQuotes(ssidStr); int len = unquotedSsidStr.length(); if (len > 32) { mLog.err(""configureRoaming: skip invalid SSID %"").r(unquotedSsidStr).flush(); continue; } byte[] ssid = new byte[len]; for (int i = 0; i < len; i++) { ssid[i] = ((byte) (unquotedSsidStr.charAt(i))); } roamingConfig.ssidWhitelist.add(ssid); } } android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.configureRoaming(roamingConfig); if (!(ok(status))) return false; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } catch (java.lang.IllegalArgumentException e) { mLog.err(""Illegal argument for roaming configuration"").c(e.toString()).flush(); return false; } return true; } }",21c800b9d8babb2bf6e4d93dbbcfd91d56030c60,configureRoaming(com.android.server.wifi.WifiNative$RoamingConfig),501160,460,473
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,2.0,"public void getAllProfiles(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(resultCode, profiles); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getAllProfiles"", e); throw e.rethrowFromSystemServer(); } }",b8a70c30e09a024146c0860ca1ffbe9cb48b598c,"public void requestAllProfiles(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { executor.execute(() -> callback.onComplete(resultCode, profiles)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getAllProfiles"", e); throw e.rethrowFromSystemServer(); } }",750ee8886a440f365132f1776c21fc182b940a19,"getAllProfiles(java.lang.String,android.telephony.euicc.EuiccCardManager$ResultCallback)","requestAllProfiles(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",2,32,"public void requestAllProfiles(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { executor.execute(() -> callback.onComplete(resultCode, profiles)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getAllProfiles"", e); throw e.rethrowFromSystemServer(); } }",1efce5e27951c49b9e53a33e244cf0f283705782,"requestAllProfiles(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",476198,204,197
128670,nci_src_com_android_nfc_dhimpl_NativeNfcManager.java,47.0,private void notifyHostEmuDeactivated() { mListener.onHostCardEmulationDeactivated(); },074d7dc5ea1ae54fab76fa6f263ab96bc682beab,private void notifyHostEmuDeactivated(int type) { mListener.onHostCardEmulationDeactivated(type); },6daf4e2b70ffe3274bda47563413610b593ce218,notifyHostEmuDeactivated(),notifyHostEmuDeactivated(int),10,28,private void notifyHostEmuDeactivated(int technology) { mListener.onHostCardEmulationDeactivated(technology); },19abd295961f0d80c28525dc25e703f38daea7ed,notifyHostEmuDeactivated(int),148482,26,28
128670,src_com_android_nfc_cardemulation_CardEmulationManager.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean stopCreatingSensfResDuringActivationForService(int userId, android.content.ComponentName service, boolean stop) throws android.os.RemoteException { com.android.nfc.NfcPermissions.validateUserId(userId); com.android.nfc.NfcPermissions.enforceUserPermissions(mContext); if (!(isNfcFServiceInstalled(userId, service))) { return false; } return false; }",3e7e24781111ede5d49a9602ff2a74f02ff562d1,,"stopCreatingSensfResDuringActivationForService(int,android.content.ComponentName,boolean)",10,5,"@java.lang.Override public boolean enableNfcFForegroundService(android.content.ComponentName service) throws android.os.RemoteException { com.android.nfc.NfcPermissions.enforceUserPermissions(mContext); if (isNfcFServiceInstalled(android.os.UserHandle.getCallingUserId(), service)) { return mEnabledNfcFServices.registerEnabledForegroundService(service, android.os.Binder.getCallingUid()); } return false; }",407c9046bdfef601af99c67788a7e32d052c3135,enableNfcFForegroundService(android.content.ComponentName),148607,94,99
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,27.0,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",56c94cb5d4298afe070b3de25e7328e0dc79680e,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",f109bd4f330bbde45790a1b6553cd23747e7b4ce,testAesCbcHmacSha1Tcp6(),testAesCbcHmacSha1Tcp6(),9,27,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",dbfe7d8f6ad6459ce59109873532e314e09f8a75,testAesCbcHmacSha1Tcp6(),1878,213,213
79530,luni_src_main_java_java_net_PlainDatagramSocketImpl.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override protected void initDisconnected() { super.initDisconnected(); connectedPort = -1; connectedAddress = null; isNativeConnected = false; },a3696d956b2694a3bb08fdb16b903b1aca0f747d,,initDisconnected(),11,2,@java.lang.Override protected void onDisconnect() { connectedPort = -1; connectedAddress = null; isNativeConnected = false; },3351bb2e75bed5995b0679f29474fe8740db964d,onDisconnect(),511131,33,28
253791,luni_src_main_java_libcore_io_Posix.java,17.0,"public native int poll(android.system.StructPollfd[] fds, int timeoutMs) throws android.system.ErrnoException;",8440752dcb8339891751beafe0acf2f37e81e63b,"public native int poll(libcore.io.StructPollfd[] fds, int timeoutMs) throws libcore.io.ErrnoException;",6c4fbc4829fe4eeac2727242ef690112dfd14131,"poll(android.system.StructPollfd[],int)","poll(libcore.io.StructPollfd[],int)",8,36,"public native int poll(android.system.StructPollfd[] fds, int timeoutMs) throws android.system.ErrnoException;",8440752dcb8339891751beafe0acf2f37e81e63b,"poll(android.system.StructPollfd[],int)",494527,31,29
558960,src_java_com_android_internal_telephony_uicc_UiccCard.java,43.0,"public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? null : carrierPrivilegeRules.getCarrierPackageNamesForIntent(packageManager, intent); }",fb80f856b7fe0f76123cb38d7788a148166fdd2f,"public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? null : carrierPrivilegeRules.getCarrierPackageNamesForIntent(packageManager, intent); } else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPackageNamesForIntent(packageManager, intent); } else { return null; } } }",7eae6e7391cd652c5401715fef3137621c6b14e2,"getCarrierPackageNamesForIntent(android.content.pm.PackageManager,android.content.Intent)","getCarrierPackageNamesForIntent(android.content.pm.PackageManager,android.content.Intent)",8,29,"@java.lang.Deprecated public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPackageNamesForIntent(packageManager, intent); } else { return null; } }",d4565fd5e203099c9dbcc99df52a6387a74f6e5b,"getCarrierPackageNamesForIntent(android.content.pm.PackageManager,android.content.Intent)",47920,158,80
146882,keystore_tests_src_android_security_KeyPairGeneratorSpecTest.java,6.0,"public void testConstructor_NullStartDate_Failure() throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, null, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); fail(""Should throw IllegalArgumentException when startDate is null""); } catch (java.lang.IllegalArgumentException success) { } }",fe92d589db4a648f3a948dfb30dc35b3d0c8835d,"public void testConstructor_NullStartDate_Failure() throws java.lang.Exception { android.security.KeyPairGeneratorSpec spec = new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, null, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); assertEquals(android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_NOT_BEFORE, spec.getStartDate()); }",568c2f2d8152916b6f5087e8df9ee177c4055024,testConstructor_NullStartDate_Failure(),testConstructor_NullStartDate_Failure(),3,2,"public void testConstructor_NullStartDate_Success() throws java.lang.Exception { android.security.KeyPairGeneratorSpec spec = new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, null, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); assertEquals(android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_NOT_BEFORE, spec.getStartDate()); }",534651f38a4f8ad6c118992c2948f3b3ea142465,testConstructor_NullStartDate_Success(),161603,120,120
90966,luni_src_test_java_libcore_java_nio_channels_FileIOInterruptTest.java,,,,"public void testChannelRead_exceptionOnCloseWhenBlocked() throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoWriter fifoWriter = new libcore.java.nio.channels.FileIOInterruptTest.FifoWriter(fifoFile); fifoWriter.start(); java.io.FileInputStream fis = new java.io.FileInputStream(fifoFile); java.nio.channels.FileChannel fileInputChannel = fis.getChannel(); libcore.java.nio.channels.FileIOInterruptTest.ChannelReader channelReader = new libcore.java.nio.channels.FileIOInterruptTest.ChannelReader(fileInputChannel); java.lang.Thread channelReaderThread = libcore.java.nio.channels.FileIOInterruptTest.createAndStartThread(""ChannelReader"", channelReader); channelReader.waitForThreadToBlock(); fileInputChannel.close(); libcore.java.nio.channels.FileIOInterruptTest.waitToDie(channelReaderThread); assertSame(java.nio.channels.AsynchronousCloseException.class, channelReader.ioe.getClass()); assertFalse(channelReader.wasInterrupted); fifoWriter.tidyUp(); }",3f2da148a48f56552610ae51df8b898d2ef41efe,,testChannelRead_exceptionOnCloseWhenBlocked(),7,36,"private void testChannelRead_exceptionOnCloseWhenBlocked(libcore.java.nio.channels.FileIOInterruptTest.ChannelReader.Method method) throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoWriter fifoWriter = new libcore.java.nio.channels.FileIOInterruptTest.FifoWriter(fifoFile); fifoWriter.start(); java.io.FileInputStream fis = new java.io.FileInputStream(fifoFile); java.nio.channels.FileChannel fileInputChannel = fis.getChannel(); libcore.java.nio.channels.FileIOInterruptTest.ChannelReader channelReader = new libcore.java.nio.channels.FileIOInterruptTest.ChannelReader(fileInputChannel, method); java.lang.Thread channelReaderThread = libcore.java.nio.channels.FileIOInterruptTest.createAndStartThread(""ChannelReader"", channelReader); channelReader.waitForThreadToBlock(); fileInputChannel.close(); libcore.java.nio.channels.FileIOInterruptTest.waitToDie(channelReaderThread); assertSame(java.nio.channels.AsynchronousCloseException.class, channelReader.ioe.getClass()); assertFalse(channelReader.wasInterrupted); fifoWriter.tidyUp(); }",fa174fbaf3011cfcbf33894c3a6f51e18fa51bc7,testChannelRead_exceptionOnCloseWhenBlocked(libcore.java.nio.channels.FileIOInterruptTest$ChannelReader$Method),329363,243,264
157133,apps_CtsVerifier_src_com_android_cts_verifier_camera_orientation_CameraOrientationActivity.java,9.0,"private Camera.Size getOptimalPreviewSize(java.util.List<android.hardware.Camera.Size> sizes, int w, int h) { final double ASPECT_TOLERANCE = 0.1; double targetRatio = ((double) (640)) / ((double) (480)); if (sizes == null) return null; android.hardware.Camera.Size optimalSize = null; int minDiff = java.lang.Integer.MAX_VALUE; int curDiff; int targetHeight = h; int targetWidth = w; boolean aspectRatio = true; while (true) { for (android.hardware.Camera.Size size : sizes) { if (aspectRatio) { double ratio = ((double) (size.width)) / (size.height); if ((java.lang.Math.abs((ratio - targetRatio))) > ASPECT_TOLERANCE) { continue; } } curDiff = (java.lang.Math.abs(((size.height) - targetHeight))) + (java.lang.Math.abs(((size.width) - targetWidth))); if (((curDiff < minDiff) && ((size.height) <= targetHeight)) && ((size.width) <= targetWidth)) { optimalSize = size; minDiff = curDiff; } } if (optimalSize == null) { aspectRatio = false; continue; } else { break; } } return optimalSize; }",cebaa2fb5d82710c2bebed3911fe5c137b7ff47d,"private Camera.Size getOptimalPreviewSize(java.util.List<android.hardware.Camera.Size> sizes, int w, int h) { final double ASPECT_TOLERANCE = 0.1; double targetRatio = ((double) (640)) / ((double) (480)); if (sizes == null) return null; android.hardware.Camera.Size optimalSize = null; int minDiff = java.lang.Integer.MAX_VALUE; int curDiff; int targetHeight = h; int targetWidth = w; boolean aspectRatio = true; boolean maintainCeiling = true; if ((sizes.size()) == 0) return null; while (true) { for (android.hardware.Camera.Size size : sizes) { if (aspectRatio) { double ratio = ((double) (size.width)) / (size.height); if ((java.lang.Math.abs((ratio - targetRatio))) > ASPECT_TOLERANCE) { continue; } } curDiff = (java.lang.Math.abs(((size.height) - targetHeight))) + (java.lang.Math.abs(((size.width) - targetWidth))); if (((maintainCeiling && (curDiff < minDiff)) && ((size.height) <= targetHeight)) && ((size.width) <= targetWidth)) { optimalSize = size; minDiff = curDiff; } else if ((maintainCeiling == false) && (curDiff < minDiff)) { optimalSize = size; minDiff = curDiff; } } if ((optimalSize == null) && (aspectRatio == true)) { aspectRatio = false; } else if (maintainCeiling == true) { maintainCeiling = false; } else { break; } } return optimalSize; }",bb5a327800873ceea95a50e3817255060dce179a,"getOptimalPreviewSize(java.util.List,int,int)","getOptimalPreviewSize(java.util.List,int,int)",3,9,"private Camera.Size getOptimalPreviewSize(java.util.List<android.hardware.Camera.Size> sizes, int w, int h) { final double ASPECT_TOLERANCE = 0.1; double targetRatio = ((double) (640)) / ((double) (480)); if (sizes == null) return null; android.hardware.Camera.Size optimalSize = null; int minDiff = java.lang.Integer.MAX_VALUE; int curDiff; int targetHeight = h; int targetWidth = w; boolean aspectRatio = true; boolean maintainCeiling = true; while (true) { for (android.hardware.Camera.Size size : sizes) { if (aspectRatio) { double ratio = ((double) (size.width)) / (size.height); if ((java.lang.Math.abs((ratio - targetRatio))) > ASPECT_TOLERANCE) { continue; } } curDiff = (java.lang.Math.abs(((size.height) - targetHeight))) + (java.lang.Math.abs(((size.width) - targetWidth))); if (((maintainCeiling && (curDiff < minDiff)) && ((size.height) <= targetHeight)) && ((size.width) <= targetWidth)) { optimalSize = size; minDiff = curDiff; } else if ((maintainCeiling == false) && (curDiff < minDiff)) { optimalSize = size; minDiff = curDiff; } } if ((optimalSize == null) && (aspectRatio == true)) { aspectRatio = false; } else if (maintainCeiling == true) { maintainCeiling = false; } else { break; } } return optimalSize; }",a22c6d93329717298520d6b52cd6b48bd61c3fbe,"getOptimalPreviewSize(java.util.List,int,int)",74387,396,383
326133,PMC_src_com_android_pmc_A2dpReceiver.java,,,,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(intent.getAction().equals(com.android.pmc.A2dpReceiver.A2DP_INTENT))) return; boolean alarm = intent.hasExtra(com.android.pmc.A2dpReceiver.A2DP_ALARM); if (alarm) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, ""Received Alarm broadcast message""); handleAlarm(intent); } else { processParameters(intent); android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, ""Received PMC command message""); } }",672ba9de19d8b80d1d8027529e82e63d637cb3cc,,"onReceive(android.content.Context,android.content.Intent)",10,4,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(intent.getAction().equals(com.android.pmc.A2dpReceiver.A2DP_INTENT))) return; boolean alarm = intent.hasExtra(com.android.pmc.A2dpReceiver.A2DP_ALARM); if (alarm) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, ""Received Alarm broadcast message""); handleAlarm(intent); } else { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, ""Received PMC command message""); processParameters(intent); } }",14364c55407264143e9fab0a022e40830466be67,"onReceive(android.content.Context,android.content.Intent)",227683,157,157
100294,services_java_com_android_server_am_BaseErrorDialog.java,1.0,public void handleMessage(android.os.Message msg) { if ((msg.what) == 0) { mConsuming = false; setEnabled(true); } },de972948b27d8d52df49a862d8525712c288b7cb,public void handleMessage(android.os.Message msg) { if ((msg.what) == 0) { mConsuming = false; setEnabled(true); } else if ((msg.what) == (-1)) { setEnabled(false); } },85d57a1ffd61d13e183cd2bb3dc9691f71a257db,handleMessage(android.os.Message),handleMessage(android.os.Message),4,1,public void handleMessage(android.os.Message msg) { if ((msg.what) == (com.android.server.am.BaseErrorDialog.ENABLE_BUTTONS)) { mConsuming = false; setEnabled(true); } else if ((msg.what) == (com.android.server.am.BaseErrorDialog.DISABLE_BUTTONS)) { setEnabled(false); } },51f731520f0bf1632a32edde61a28ee74c1d4977,handleMessage(android.os.Message),192563,56,88
40248,core_java_android_os_storage_StorageManager.java,15.0,public void registerListener(android.os.storage.StorageEventListener listener) { if (listener == null) { return; } synchronized(mListeners) { mListeners.add(new android.os.storage.StorageManager.ListenerDelegate(listener)); } },e73029c4fbbc8f4912e198349f0691cdc1932e27,"public void registerListener(android.os.storage.StorageEventListener listener) { if (listener == null) { return; } synchronized(mListeners) { if (((mBinderListener) == null) && ((mMountService) != null)) { try { mBinderListener = new android.os.storage.StorageManager.MountServiceBinderListener(); mMountService.registerListener(mBinderListener); } catch (android.os.RemoteException rex) { android.util.Log.e(android.os.storage.StorageManager.TAG, ""Register mBinderListener failed""); return; } } mListeners.add(new android.os.storage.StorageManager.ListenerDelegate(listener)); } }",db58c4656d4bc28bbba24543b2d09d594f0a9596,registerListener(android.os.storage.StorageEventListener),registerListener(android.os.storage.StorageEventListener),3,15,"public void registerListener(android.os.storage.StorageEventListener listener) { if (listener == null) { return; } synchronized(mListeners) { if ((mBinderListener) == null) { try { mBinderListener = new android.os.storage.StorageManager.MountServiceBinderListener(); mMountService.registerListener(mBinderListener); } catch (android.os.RemoteException rex) { android.util.Log.e(android.os.storage.StorageManager.TAG, ""Register mBinderListener failed""); return; } } mListeners.add(new android.os.storage.StorageManager.ListenerDelegate(listener)); } }",c79bc3862a8be03def5c8e16aadd11d65abd5668,registerListener(android.os.storage.StorageEventListener),30212,148,139
542981,src_com_android_bluetooth_hid_HidDeviceService.java,13.0,"private synchronized void onConnectStateChanged(byte[] address, int state) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((""onConnectStateChanged(): address="" + (java.util.Arrays.toString(address))) + "" state="") + state)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED); msg.obj = address; msg.arg1 = state; mHandler.sendMessage(msg); }",8048e499af545211f5e95c8e70769e5224bed755,"synchronized void onConnectStateChangedFromNative(byte[] address, int state) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((""onConnectStateChanged(): address="" + (java.lang.String.format(""%02x"", java.util.Arrays.toString(address)))) + "" state="") + state)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED); msg.obj = address; msg.arg1 = state; mHandler.sendMessage(msg); }",8a6e43d1b2a203aa7bbbd71193c31167aeb30571,"onConnectStateChanged(byte[],int)","onConnectStateChangedFromNative(byte[],int)",14,14,"synchronized void onConnectStateChangedFromNative(android.bluetooth.BluetoothDevice device, int state) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, (((""onConnectStateChanged(): device="" + device) + "" state="") + state)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED); msg.obj = device; msg.arg1 = state; mHandler.sendMessage(msg); }",dd6543b90401df66e093f4928e05c59cfda00d92,"onConnectStateChangedFromNative(android.bluetooth.BluetoothDevice,int)",329384,155,139
138213,rs_java_android_renderscript_Allocation.java,33.0,"public void setFromFieldPacker(int xoff, int yoff, int component_number, android.renderscript.FieldPacker fp) { setFromFieldPacker(xoff, yoff, 0, component_number, fp); }",8c0d089a1d3a91d56e7d940676badc06082c68fa,"public void setFromFieldPacker(int xoff, int yoff, int zoff, int w, int h, int d, android.renderscript.FieldPacker fp) { mRS.validate(); int eSize = mType.mElement.getBytesSize(); final byte[] data = fp.getData(); int data_length = fp.getPos(); int count = (w * h) * d; if ((eSize * count) != data_length) { throw new android.renderscript.RSIllegalArgumentException(((((""Field packer length "" + data_length) + "" not divisible by element size "") + eSize) + ""."")); } if ((mCurrentDimZ) > 0) { copy3DRangeFromUnchecked(xoff, yoff, zoff, w, h, d, data, Element.DataType.SIGNED_8, data.length); } else if ((mCurrentDimY) > 0) { copy2DRangeFromUnchecked(xoff, yoff, w, h, data, Element.DataType.SIGNED_8, data.length); } else { copy1DRangeFromUnchecked(xoff, w, data); } }",dcaf48d3047872d356190ba66f486ec7288ddf8e,"setFromFieldPacker(int,int,int,android.renderscript.FieldPacker)","setFromFieldPacker(int,int,int,int,int,int,android.renderscript.FieldPacker)",4,96,public void setAutoPadding(boolean useAutoPadding) { mAutoPadding = useAutoPadding; },b8622983d5fdd9d624e747e896a0d8da63be5c31,setAutoPadding(boolean),265307,257,21
119672,sched_src_com_android_sched_vfs_InputOutputZipVDir.java,7.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVFile createOutputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath path) throws com.android.sched.util.file.CannotCreateFileException { java.io.File file = new java.io.File(dir, path.getPathAsString(ZipUtils.ZIP_SEPARATOR)); if ((!(file.getParentFile().mkdirs())) && (!(file.getParentFile().isDirectory()))) { throw new com.android.sched.util.file.CannotCreateFileException(new com.android.sched.util.location.DirectoryLocation(file.getParentFile())); } assert !(path.equals(VPath.ROOT)); java.lang.String newEntryName = path.getPathAsString(ZipUtils.ZIP_SEPARATOR); java.lang.String parentEntryName = zipEntry.getName(); if (!(parentEntryName.isEmpty())) { newEntryName = parentEntryName + newEntryName; } return new com.android.sched.vfs.InputOutputZipVFile(vfs, file, new java.util.zip.ZipEntry(newEntryName)); }",53f8fd4f14b15de89c9c4cb622352403e0394589,"@java.lang.Override @javax.annotation.Nonnull public synchronized com.android.sched.vfs.OutputVFile createOutputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath path) throws com.android.sched.util.file.CannotCreateFileException { assert !(vfs.isClosed()); java.io.File file = new java.io.File(dir, path.getPathAsString(ZipUtils.ZIP_SEPARATOR)); if ((!(file.getParentFile().mkdirs())) && (!(file.getParentFile().isDirectory()))) { throw new com.android.sched.util.file.CannotCreateFileException(new com.android.sched.util.location.DirectoryLocation(file.getParentFile())); } assert !(path.equals(VPath.ROOT)); java.lang.String newEntryName = path.getPathAsString(ZipUtils.ZIP_SEPARATOR); java.lang.String parentEntryName = zipEntry.getName(); if (!(parentEntryName.isEmpty())) { newEntryName = parentEntryName + newEntryName; } return new com.android.sched.vfs.InputOutputZipVFile(vfs, file, new java.util.zip.ZipEntry(newEntryName)); }",ec0f6436ab9424ec615c3e1e4d1679984f87abd2,createOutputVFile(com.android.sched.vfs.VPath),createOutputVFile(com.android.sched.vfs.VPath),4,7,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVFile createOutputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath path) throws com.android.sched.util.file.CannotCreateFileException { assert !(vfs.isClosed()); java.io.File file = new java.io.File(dir, path.getPathAsString(ZipUtils.ZIP_SEPARATOR)); if ((!(file.getParentFile().mkdirs())) && (!(file.getParentFile().isDirectory()))) { throw new com.android.sched.util.file.CannotCreateFileException(new com.android.sched.util.location.DirectoryLocation(file.getParentFile())); } assert !(path.equals(VPath.ROOT)); java.lang.String newEntryName = path.getPathAsString(ZipUtils.ZIP_SEPARATOR); java.lang.String parentEntryName = zipEntry.getName(); if (!(parentEntryName.isEmpty())) { newEntryName = parentEntryName + newEntryName; } return new com.android.sched.vfs.InputOutputZipVFile(vfs, file, new java.util.zip.ZipEntry(newEntryName)); }",bb99a725f761bb5540ec23cd20e7580b662843ff,createOutputVFile(com.android.sched.vfs.VPath),176208,260,259
258270,jack-tests_tests_com_android_jack_optimizations_valuepropagation_ValuePropagationTests.java,10.0,"@org.junit.Test @java.lang.Runtime public void test103() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test103""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/D;""; java.lang.String foo = ((""foo("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")"") + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR); compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""A.foo.dalvik""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""B.foo.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""D.foo.dalvik"")))); }",7791eed9cf219229cb58566b48ae87f75cf76064,"@org.junit.Test @java.lang.Runtime public void test103() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test103""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/D;""; java.lang.String foo = ((""foo("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")"") + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR); compileAndValidate(defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""A.foo.dalvik""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""B.foo.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""D.foo.dalvik""))), test); }",5163b945112a6aa2564e92d35e149b07bdcedd0b,test103(),test103(),5,10,"@org.junit.Test @java.lang.Runtime public void test103() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test103""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test103/jack/D;""; java.lang.String foo = ((""foo("" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + "")"") + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR); compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""A.foo.dalvik""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""B.foo.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, ""D.foo.dalvik"")))); }",7791eed9cf219229cb58566b48ae87f75cf76064,test103(),32061,400,400
241967,jack_src_com_android_jack_optimizations_inlining_InlineCloneStatementVisitor.java,,,,"@java.lang.Override @javax.annotation.Nonnull protected com.android.jack.ir.ast.JStatement updateCatchBlockList(@javax.annotation.Nonnull com.android.jack.ir.ast.JStatement clonedStmt, @javax.annotation.Nonnull com.android.jack.ir.ast.JStatement orignalStmt) { com.android.jack.ir.ast.JStatement result = super.updateCatchBlockList(clonedStmt, orignalStmt); for (com.android.jack.ir.ast.JCatchBlock catchBlock : callSiteStmt.getJCatchBlocks()) { result.appendCatchBlock(catchBlock); } return result; }",b1e8093fcf99b5eeb788bd959575182b2be52895,,"updateCatchBlockList(com.android.jack.ir.ast.JStatement,com.android.jack.ir.ast.JStatement)",28,4,"@javax.annotation.Nonnull @java.lang.Override protected java.lang.String cloneLocalName(@javax.annotation.Nonnull java.lang.String orgName) { return (super.cloneLocalName(orgName)) + ""_cloned""; }",4b6e2d3d53fccf6fe930b223e249167b08644b59,cloneLocalName(java.lang.String),487213,145,52
83276,src_main_java_org_conscrypt_OpenSSLMessageDigestJDK.java,2.0,"@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { org.conscrypt.NativeCrypto.EVP_DigestUpdate(getCtx(), input, offset, len); }",0c5d7c5ba52faa34ff04fdf3cd1087742b7dd76f,"@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { org.conscrypt.OpenSSLDigestContext ctxRef = ctx; org.conscrypt.NativeCrypto.EVP_DigestUpdate(ctxRef.getContext(), input, offset, len); }",d663765e74102e8b4e3d7f13a148b73012d2e99b,"engineUpdate(byte[],int,int)","engineUpdate(byte[],int,int)",5,2,"@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { org.conscrypt.NativeCrypto.EVP_DigestUpdate(ctx, input, offset, len); }",b2eab3373569be363aca6c58392f7f1381cb4768,"engineUpdate(byte[],int,int)",254669,64,46
57611,luni_src_test_java_tests_api_java_util_TimerTest.java,26.0,"public void test_Constructor() { java.util.Timer t = null; try { t = new java.util.Timer(); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }",8122fd072f5a601d3b60506083e2fad4a65ee6a4,"public void test_Constructor() throws java.lang.InterruptedException { java.util.Timer t = null; try { t = new java.util.Timer(); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }",94b7d62bdc16f18215045272476a7fb93c85f218,test_Constructor(),test_Constructor(),2,26,"public void test_Constructor() throws java.lang.Exception { java.util.Timer t = null; try { t = new java.util.Timer(); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }",7bc7048e4506835ff5a79fff689f69a4fe2c5e5a,test_Constructor(),91748,105,104
374866,telephony_java_android_telephony_TelephonyManager.java,71.0,public android.os.PersistableBundle getCarrierConfig() { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService(android.telephony.CarrierConfigManager.class); return carrierConfigManager.getConfigForSubId(mSubId); },7cd2f61b13323e04d3cd7a74234bd297a8380e6f,public android.os.PersistableBundle getCarrierConfig() { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService(android.telephony.CarrierConfigManager.class); return carrierConfigManager.getConfigForSubId(getSubId()); },2d7fad57312bc8de19f61156f7d5dbe9c805b911,getCarrierConfig(),getCarrierConfig(),3,72,@android.annotation.WorkerThread public android.os.PersistableBundle getCarrierConfig() { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService(android.telephony.CarrierConfigManager.class); return carrierConfigManager.getConfigForSubId(getSubId()); },68277617ec451a874d00b17d919e8be5b64a9c73,getCarrierConfig(),172277,55,61
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,83.0,"@org.junit.Test public void xor_long() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(XOR_LONG).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",1a49ae622534b2f789c65e1e93a471872d794600,"@org.junit.Test public void xor_long() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(XOR_LONG).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",95420b9f4544ffdad24eeb5893c4952e2e983786,xor_long(),xor_long(),4,83,"@org.junit.Test public void xor_long() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(XOR_LONG).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",1eff735fa5c4ab168c821482d729e8dcbe0ca311,xor_long(),418873,110,108
36632,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_UpdaterData.java,38.0,"@java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } if ((oldSettings.getForceHttp()) != (controller.getSettings().getForceHttp())) { refreshSources(false); } }",6489a2c90981b4c86f64653025937958070b5bb3,"@java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } if (((oldSettings.getForceHttp()) != (controller.getSettings().getForceHttp())) || ((oldSettings.getEnablePreviews()) != (controller.getSettings().getEnablePreviews()))) { refreshSources(false); } }",3b6ddb0b97dc5fb93af55a1aa75cde2c2ca04932,"onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController,com.android.sdkuilib.internal.repository.SettingsController$Settings)","onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController,com.android.sdkuilib.internal.repository.SettingsController$Settings)",5,38,"@java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } }",356f3a2575e7a2a53241829cfeb347d5452ccb7e,"onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController,com.android.sdkuilib.internal.repository.SettingsController$Settings)",92631,193,145
161932,platform_bootstrap_src_com_intellij_idea_Main.java,6.0,"@java.lang.SuppressWarnings(""MethodNamesDifferingOnlyByCase"") public static void main(java.lang.String[] args) { if (((args.length) == 1) && (""%f"".equals(args[0]))) { args = com.intellij.idea.Main.NO_ARGS; } com.intellij.idea.Main.setFlags(args); if (com.intellij.idea.Main.isHeadless()) { java.lang.System.setProperty(com.intellij.idea.Main.AWT_HEADLESS, java.lang.Boolean.TRUE.toString()); } else if (java.awt.GraphicsEnvironment.isHeadless()) { com.intellij.idea.Main.showMessage(""Startup Error"", ""Unable to detect graphics environment"", true); java.lang.System.exit(com.intellij.idea.Main.NO_GRAPHICS); } else if ((args.length) == 0) { try { com.intellij.idea.Main.installPatch(); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage(""Update Failed"", t); java.lang.System.exit(com.intellij.idea.Main.UPDATE_FAILED); } } try { com.intellij.ide.Bootstrap.main(args, ((com.intellij.idea.Main.class.getName()) + ""Impl""), ""start""); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage(""Start Failed"", t); java.lang.System.exit(com.intellij.idea.Main.STARTUP_EXCEPTION); } }",9483f59c295d682547846fc8f07835dc79ab1240,"@java.lang.SuppressWarnings(""MethodNamesDifferingOnlyByCase"") public static void main(java.lang.String[] args) { if (((args.length) == 1) && (""%f"".equals(args[0]))) { args = com.intellij.idea.Main.NO_ARGS; } com.intellij.idea.Main.setFlags(args); if (com.intellij.idea.Main.isHeadless()) { java.lang.System.setProperty(com.intellij.idea.Main.AWT_HEADLESS, java.lang.Boolean.TRUE.toString()); } else if (java.awt.GraphicsEnvironment.isHeadless()) { com.intellij.idea.Main.showMessage(""Startup Error"", ""Unable to detect graphics environment"", true); java.lang.System.exit(com.intellij.idea.Main.NO_GRAPHICS); } else if ((args.length) == 0) { try { com.intellij.idea.Main.installPatch(); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage(""Update Failed"", t); java.lang.System.exit(com.intellij.idea.Main.UPDATE_FAILED); } } com.intellij.idea.Main.createRecordFile(); try { com.intellij.ide.Bootstrap.main(args, ((com.intellij.idea.Main.class.getName()) + ""Impl""), ""start""); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage(""Start Failed"", t); java.lang.System.exit(com.intellij.idea.Main.STARTUP_EXCEPTION); } }",0d9a71d2cd7963a514da8c898abb656365a927dd,main(java.lang.String[]),main(java.lang.String[]),7,8,"@java.lang.SuppressWarnings(""MethodNamesDifferingOnlyByCase"") public static void main(java.lang.String[] args) { if (((args.length) == 1) && (""%f"".equals(args[0]))) { args = com.intellij.idea.Main.NO_ARGS; } com.intellij.idea.Main.setFlags(args); if (com.intellij.idea.Main.isHeadless()) { java.lang.System.setProperty(com.intellij.idea.Main.AWT_HEADLESS, java.lang.Boolean.TRUE.toString()); } else if (java.awt.GraphicsEnvironment.isHeadless()) { com.intellij.idea.Main.showMessage(""Startup Error"", ""Unable to detect graphics environment"", true); java.lang.System.exit(com.intellij.idea.Main.NO_GRAPHICS); } else if ((args.length) == 0) { try { com.intellij.idea.Main.installPatch(); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage(""Update Failed"", t); java.lang.System.exit(com.intellij.idea.Main.UPDATE_FAILED); } } if (com.intellij.idea.Main.shouldReportCrashes()) { com.intellij.idea.Main.createRecordFile(); } try { com.intellij.ide.Bootstrap.main(args, ((com.intellij.idea.Main.class.getName()) + ""Impl""), ""start""); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage(""Start Failed"", t); java.lang.System.exit(com.intellij.idea.Main.STARTUP_EXCEPTION); } }",3515964741e4ae29b48a11639c1e9432f8bc8b3e,main(java.lang.String[]),141433,359,376
23591,apps_CtsVerifier_src_com_android_cts_verifier_bluetooth_MessageTestActivity.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { setResult(com.android.cts.verifier.bluetooth.RESULT_CANCELED); finish(); }",6ba151f1d5cba869e41b0e8332b2b5c0134c834b,,"onClick(android.content.DialogInterface,int)",2,7,"@java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { com.android.cts.verifier.TestResult.setFailedResult(this); finish(); }",2b90deba0b1c3fdcd4db5f0c6f3dbb847a492913,"onClick(android.content.DialogInterface,int)",37833,42,41
73731,gradle-import_src_main_java_com_android_tools_gradle_eclipse_EclipseProject.java,40.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void initJni() throws java.io.IOException { java.io.File jniDir = new java.io.File(mDir, ""jni""); if (!(jniDir.exists())) { return; } if (mNdkProject) { mNativeSources = jniDir; java.io.File makefile = new java.io.File(jniDir, ""Android.mk""); if (makefile.exists()) { java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(""\\s*LOCAL_MODULE\\s*:=\\s*(\\S+)\\s*""); for (java.lang.String line : com.google.common.io.Files.readLines(makefile, Charsets.UTF_8)) { java.util.regex.Matcher matcher = pattern.matcher(line); if (matcher.matches()) { mNativeModuleName = matcher.group(1); if ((mNativeLibs) != null) { java.lang.String libName = (""lib"" + (mNativeModuleName)) + "".so""; java.util.ListIterator<java.io.File> iterator = mNativeLibs.listIterator(); while (iterator.hasNext()) { java.io.File lib = iterator.next(); if (libName.equals(lib.getName())) { iterator.remove(); } } if (mNativeLibs.isEmpty()) { mNativeLibs = null; } } break; } } } } else { mImporter.reportWarning(this, getClassPathFile(), (""Project contains a jni directory, but does not have an Eclipse C/C++ "" + ""nature: malformed NDK project?"")); } }",61d81526b088af603c3007586e84f11ecef5846b,,initJni(),4,10,"private void initJni() throws java.io.IOException { java.io.File jniDir = new java.io.File(mDir, ""jni""); if (!(jniDir.exists())) { return; } if (mNdkProject) { mNativeSources = jniDir; java.io.File makefile = new java.io.File(jniDir, ""Android.mk""); if (makefile.exists()) { java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(""\\s*LOCAL_MODULE\\s*:=\\s*(\\S+)\\s*""); for (java.lang.String line : com.google.common.io.Files.readLines(makefile, Charsets.UTF_8)) { java.util.regex.Matcher matcher = pattern.matcher(line); if (matcher.matches()) { mNativeModuleName = matcher.group(1); if ((mNativeLibs) != null) { java.lang.String libName = (""lib"" + (mNativeModuleName)) + "".so""; java.util.ListIterator<java.io.File> iterator = mNativeLibs.listIterator(); while (iterator.hasNext()) { java.io.File lib = iterator.next(); if (libName.equals(lib.getName())) { iterator.remove(); } } if (mNativeLibs.isEmpty()) { mNativeLibs = null; } } break; } } } } }",bfb148c3705fb73457a8df8ca9566f7e9a736388,initJni(),467461,356,312
440538,luni_src_test_java_libcore_java_text_DecimalFormatTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSetGroupingSeparator() { int number = 1234; java.text.DecimalFormat df; java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); dfs.setGroupingSeparator(' '); df = new java.text.DecimalFormat(""#,##0.00;-#,##0.00"", dfs); assertEquals(""1 234.00"", df.format(number)); df = new java.text.DecimalFormat(""¤#,##0.00;¤-#,##0.00"", dfs); assertEquals(""$1 234.00"", df.format(number)); }",745af76bd0807848345bc478020f7c62513b7f54,,testSetGroupingSeparator(),5,6,"public void testSetGroupingSeparator() { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); dfs.setGroupingSeparator(' '); assertEquals(""1 234.00"", new java.text.DecimalFormat(""#,##0.00"", dfs).format(1234)); assertEquals(""$1 234.00"", new java.text.DecimalFormat(""¤#,##0.00"", dfs).format(1234)); }",cfabb9914c7f6572f5a6f1ee739ea7f30e0f8360,testSetGroupingSeparator(),409134,130,96
31042,dalvik_src_main_java_dalvik_system_Zygote.java,10.0,"public static int forkAndSpecialize(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits) { dalvik.system.Zygote.preFork(); int pid = dalvik.system.Zygote.nativeForkAndSpecialize(uid, gid, gids, debugFlags, rlimits); dalvik.system.Zygote.postFork(); return pid; }",64ac32b4243d993c5c3dac3b4a06584bae7dd037,"public static int forkAndSpecialize(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits, java.lang.String SEInfo, java.lang.String niceName) { dalvik.system.Zygote.preFork(); int pid = dalvik.system.Zygote.nativeForkAndSpecialize(uid, gid, gids, debugFlags, rlimits, SEInfo, niceName); dalvik.system.Zygote.postFork(); return pid; }",8f581280c08e5bb85f882204d7b793c954b4c84b,"forkAndSpecialize(int,int,int[],int,int[][])","forkAndSpecialize(int,int,int[],int,int[][],java.lang.String,java.lang.String)",2,7,"public static int forkAndSpecialize(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits, java.lang.String seInfo, java.lang.String niceName) { dalvik.system.Zygote.preFork(); int pid = dalvik.system.Zygote.nativeForkAndSpecialize(uid, gid, gids, debugFlags, rlimits, seInfo, niceName); dalvik.system.Zygote.postFork(); return pid; }",8b852d2bde4bf6508556363d95b36c0de1899b9c,"forkAndSpecialize(int,int,int[],int,int[][],java.lang.String,java.lang.String)",288496,117,117
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,32.0,"public void test_hashCode() { java.text.DecimalFormat df1 = new java.text.DecimalFormat(); java.text.DecimalFormat df2 = ((java.text.DecimalFormat) (df1.clone())); assertTrue(""Hash codes of equals object are not equal"", ((df2.hashCode()) == (df1.hashCode()))); }",7cde41a82c6712634c6675378c30b48444b98d6b,"public void testHashCode() { java.text.DecimalFormat df1 = new java.text.DecimalFormat(); java.text.DecimalFormat df2 = ((java.text.DecimalFormat) (df1.clone())); assertTrue(""Hash codes of equals object are not equal"", ((df2.hashCode()) == (df1.hashCode()))); }",2f48b33a18ffefa566ba463b99089f355863edcf,test_hashCode(),testHashCode(),2,15,"public void test_hashCode() { java.text.DecimalFormat df1 = new java.text.DecimalFormat(); java.text.DecimalFormat df2 = ((java.text.DecimalFormat) (df1.clone())); assertTrue(""Hash codes of equals object are not equal"", ((df2.hashCode()) == (df1.hashCode()))); }",7cde41a82c6712634c6675378c30b48444b98d6b,test_hashCode(),84390,67,68
57611,luni_src_test_java_tests_api_java_util_TimerTest.java,12.0,"public void test_ConstructorZ() { java.util.Timer t = null; try { t = new java.util.Timer(true); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }",70b8f715495f24de38a8a08d5d8b51b6332f63ce,"public void test_ConstructorZ() throws java.lang.InterruptedException { java.util.Timer t = null; try { t = new java.util.Timer(true); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }",bc34e6c10c5e1e92995efd14f6a3d323d73d03c7,test_ConstructorZ(),test_ConstructorZ(),2,12,"public void test_ConstructorZ() throws java.lang.Exception { java.util.Timer t = null; try { t = new java.util.Timer(true); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }",04d553e45fea60c74129b4964626601a11c522fb,test_ConstructorZ(),91733,108,107
149516,jack-tests_tests_com_android_jack_annotation_processor_AnnotationProcessorTests.java,4.0,"@org.junit.Test public void compileWithAnnotationProcessorReuseClassOut() throws java.lang.Exception { java.io.File classesOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getAutoProcessors(); { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); jack.setAnnotationProcessorPath(processors.getPath()); jack.addResource(classesOut); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); } { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); jack.setAnnotationProcessorPath(processors.getPath()); jack.addResource(classesOut); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); } com.android.jack.library.InputJackLibrary libOut = com.android.jack.library.JackLibraryFactory.getInputLibrary(new com.android.sched.vfs.DirectFS(new com.android.sched.util.file.Directory(jackOut.getPath(), null, com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST, com.android.sched.util.file.FileOrDirectory.Permission.READ, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE), com.android.sched.util.file.FileOrDirectory.Permission.READ)); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath(""rscGeneratedFile0"", '/')); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath(""rscGeneratedFile1"", '/')); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); }",cc6ab1d7228c53bc820e907fe612b4d54009b695,"@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = com.android.jack.library.JackLibraryFactory.getInputLibrary(new com.android.sched.vfs.DirectFS(new com.android.sched.util.file.Directory(jackOut.getPath(), null, com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST, com.android.sched.util.file.FileOrDirectory.Permission.READ, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE), com.android.sched.util.file.FileOrDirectory.Permission.READ)); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); }",044e6b737df38e5fd9e2bf3406bd64209ab3ecbd,compileWithAnnotationProcessorReuseClassOut(),compileWithAnnotationProcessorNoAuto_classpath(),7,6,"@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); }",cc3cce9aa26d82db163d7af6dc54d361f278fcdf,compileWithAnnotationProcessorNoAuto_classpath(),36825,428,314
127845,v8_renderscript_java_src_android_support_v8_renderscript_Script.java,14.0,"public void setVar(int index, int v) { mRS.nScriptSetVarI(getID(mRS), index, v); }",c88610baf7013f329671ac4b8f3b1de283ff2e60,"public void setVar(int index, double v) { if (mUseIncSupp) { mRS.nIncScriptSetVarD(getID(mRS), index, v); } else { mRS.nScriptSetVarD(getID(mRS), index, v); } }",08154921bd43556cc501bd464952b8c01ce65f6a,"setVar(int,int)","setVar(int,double)",8,5,"public void setVar(int index, boolean v) { mRS.nScriptSetVarI(getID(mRS), index, (v ? 1 : 0), mUseIncSupp); }",0c1ff97527e448d49ce2b51154782ae24959e635,"setVar(int,boolean)",314323,63,43
163082,jack-tests_tests_com_android_jack_switchstatement_SwitchstatementTests.java,36.0,"@org.junit.Test public void testCompile021() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test021.jack""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); { input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java-lang-Thread$State"", true)); } checkCompiledCode(packageName, input); }",a60fb2c98b9ea75e93efc8143b7e38def1c692c8,"@org.junit.Test public void testCompile021() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test021.jack""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input1 = com.google.common.collect.Maps.newHashMap(); { input1.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java-lang-Thread$State"", true)); } java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input2 = com.google.common.collect.Maps.newHashMap(); { input2.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java-lang-Thread$State"", true)); } compileCode(packageName, input1, input2); }",8b90624e4bdaae5a589a4a775f8115265b37f08b,testCompile021(),testCompile021(),5,14,"@org.junit.Test public void testCompile021a() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test021.jack""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java-lang-Thread$State"", true)); compileCode(packageName, input); }",d3acaac765bdce75fef5b13349218b3107ce3459,testCompile021a(),137806,220,132
273674,service_java_com_android_server_wifi_WifiStateMachine.java,268.0,public int syncGetSupportedFeatures(com.android.internal.util.AsyncChannel channel) { android.os.Message resultMsg = channel.sendMessageSynchronously(com.android.server.wifi.WifiStateMachine.CMD_GET_SUPPORTED_FEATURES); int supportedFeatureSet = resultMsg.arg1; resultMsg.recycle(); return supportedFeatureSet; },3cabc9257dd946332debf10542ab27f8cfa52829,"public int syncGetSupportedFeatures(com.android.internal.util.AsyncChannel channel) { android.os.Message resultMsg = channel.sendMessageSynchronously(com.android.server.wifi.WifiStateMachine.CMD_GET_SUPPORTED_FEATURES); int supportedFeatureSet = resultMsg.arg1; resultMsg.recycle(); boolean disableRtt = android.os.SystemProperties.getBoolean(""config.disable_rtt"", false); if (disableRtt) { supportedFeatureSet &= ~((WifiManger.WIFI_FEATURE_D2D_RTT) | (WifiManger.WIFI_FEATURE_D2AP_RTT)); } return supportedFeatureSet; }",33974159010d46a78495850290dbebbdf8d0b977,syncGetSupportedFeatures(com.android.internal.util.AsyncChannel),syncGetSupportedFeatures(com.android.internal.util.AsyncChannel),9,225,"public int syncGetSupportedFeatures(com.android.internal.util.AsyncChannel channel) { android.os.Message resultMsg = channel.sendMessageSynchronously(com.android.server.wifi.WifiStateMachine.CMD_GET_SUPPORTED_FEATURES); int supportedFeatureSet = resultMsg.arg1; resultMsg.recycle(); boolean disableRtt = mPropertyService.getBoolean(""config.disable_rtt"", false); if (disableRtt) { supportedFeatureSet &= ~((android.net.wifi.WifiManager.WIFI_FEATURE_D2D_RTT) | (android.net.wifi.WifiManager.WIFI_FEATURE_D2AP_RTT)); } return supportedFeatureSet; }",326b93e578631f8a23ec993245d83c72af07de7f,syncGetSupportedFeatures(com.android.internal.util.AsyncChannel),260762,143,151
314694,common_host-side_tradefed_src_com_android_compatibility_common_tradefed_result_TestRunHandler.java,,,,"private static java.lang.String mapToString(java.util.Map<java.lang.String, java.lang.Integer> map) { java.lang.StringBuilder sb = new java.lang.StringBuilder(""""); for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry : map.entrySet()) { sb.append(java.lang.String.format(""%s %d\n"", entry.getKey(), entry.getValue())); } return sb.toString(); }",11f7bb8bc962dc721098ca0095d8ead8745ef2f7,,mapToString(java.util.Map),7,2,"private static java.lang.String mapToString(java.util.Map<java.lang.String, java.lang.Integer> map) { java.lang.StringBuilder sb = new java.lang.StringBuilder(""""); for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry : map.entrySet()) { sb.append(java.lang.String.format(""%s%s%d\n"", entry.getKey(), com.android.compatibility.common.tradefed.result.TestRunHandler.MAP_DELIMITER, entry.getValue())); } return sb.toString(); }",89e10e5f5da3c2c53365a8168cc73b685ea85738,mapToString(java.util.Map),193333,108,132
605576,src_com_android_bluetooth_btservice_AdapterService.java,16.0,"private void dumpJava(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog log = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); log.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(log); } try { java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd); java.lang.String protoOutString = android.util.Base64.encodeToString(log.toByteArray(), Base64.DEFAULT); protoOut.write(protoOutString.getBytes(java.nio.charset.StandardCharsets.UTF_8)); protoOut.close(); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } }",2d95b0c07a7d35fdeaaa275454896b03b43c7da1,"private void dumpMetrics(java.io.FileDescriptor fd) { android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ""dumpMetrics""); com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics, native metrics size is "" + (nativeMetricsBytes.length))); try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""Problem parsing metrics Protobuf: "" + (ex.getMessage()))); return; } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics, combined metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } }",53d9b457021d785b09dfc5a31506cb9ced813c27,dumpJava(java.io.FileDescriptor),dumpMetrics(java.io.FileDescriptor),9,176,"private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog((""dumpMetrics: native metrics size is "" + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""dumpMetrics: problem parsing metrics protobuf, "" + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); debugLog((""dumpMetrics: combined metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog((""dumpMetrics: error writing combined protobuf to fd, "" + (e.getMessage()))); } }",e4cd37ddd35245e6056c0a7360c9694bc8d2b4b1,dumpMetrics(java.io.FileDescriptor),202476,348,307
97322,harmony-tests_src_test_java_org_apache_harmony_tests_java_net_MulticastSocketTest.java,8.0,"public void test_getNetworkInterface() throws java.io.IOException { java.net.MulticastSocket mss = new java.net.MulticastSocket(0); java.net.NetworkInterface theInterface = mss.getNetworkInterface(); assertTrue((""network interface returned wrong network interface when not set:"" + theInterface), theInterface.getInetAddresses().hasMoreElements()); java.net.InetAddress firstAddress = ((java.net.InetAddress) (theInterface.getInetAddresses().nextElement())); assertTrue(firstAddress.isAnyLocalAddress()); mss.setNetworkInterface(networkInterface1); assertEquals(""getNetworkInterface did not return interface set by setNeworkInterface"", networkInterface1, mss.getNetworkInterface()); mss.setNetworkInterface(loopbackInterface); assertEquals(""getNetworkInterface did not return network interface set by second setNetworkInterface call"", loopbackInterface, mss.getNetworkInterface()); mss.close(); mss = new java.net.MulticastSocket(0); if ((IPV6networkInterface1) != null) { mss.setNetworkInterface(IPV6networkInterface1); assertEquals(""getNetworkInterface did not return interface set by setNeworkInterface"", IPV6networkInterface1, mss.getNetworkInterface()); } mss = new java.net.MulticastSocket(0); java.util.Enumeration addresses = networkInterface1.getInetAddresses(); if (addresses.hasMoreElements()) { firstAddress = ((java.net.InetAddress) (addresses.nextElement())); mss.setInterface(firstAddress); assertEquals(""getNetworkInterface did not return interface set by setInterface"", networkInterface1, mss.getNetworkInterface()); } mss.close(); }",17bcd7276ac8af8e77eb9af6590412ebf00feb27,"public void test_getNetworkInterface() throws java.io.IOException { java.net.MulticastSocket mss = new java.net.MulticastSocket(0); java.net.NetworkInterface theInterface = mss.getNetworkInterface(); assertTrue((""network interface returned wrong network interface when not set:"" + theInterface), theInterface.getInetAddresses().hasMoreElements()); java.net.InetAddress firstAddress = theInterface.getInetAddresses().nextElement(); assertTrue(firstAddress.isAnyLocalAddress()); mss.setNetworkInterface(ipv4NetworkInterface); assertEquals(""getNetworkInterface did not return interface set by setNeworkInterface"", ipv4NetworkInterface, mss.getNetworkInterface()); mss.setNetworkInterface(loopbackInterface); assertEquals((""getNetworkInterface did not return network interface set by second"" + "" setNetworkInterface call""), loopbackInterface, mss.getNetworkInterface()); mss.close(); if ((ipv6networkInterface) != null) { mss = new java.net.MulticastSocket(0); mss.setNetworkInterface(ipv6networkInterface); assertEquals(""getNetworkInterface did not return interface set by setNeworkInterface"", ipv6networkInterface, mss.getNetworkInterface()); mss.close(); } mss = new java.net.MulticastSocket(0); java.util.Enumeration addresses = ipv4NetworkInterface.getInetAddresses(); if (addresses.hasMoreElements()) { firstAddress = ((java.net.InetAddress) (addresses.nextElement())); mss.setInterface(firstAddress); assertEquals(""getNetworkInterface did not return interface set by setInterface"", ipv4NetworkInterface, mss.getNetworkInterface()); } mss.close(); }",2387d386fe08cb74bb188645710b5c7964b8e915,test_getNetworkInterface(),test_getNetworkInterface(),3,8,"public void test_getNetworkInterface() throws java.io.IOException { java.net.MulticastSocket mss = new java.net.MulticastSocket(0); java.net.NetworkInterface theInterface = mss.getNetworkInterface(); assertTrue((""network interface returned wrong network interface when not set:"" + theInterface), theInterface.getInetAddresses().hasMoreElements()); java.net.InetAddress firstAddress = theInterface.getInetAddresses().nextElement(); assertTrue(firstAddress.isAnyLocalAddress()); mss.setNetworkInterface(ipv4NetworkInterface); assertEquals(""getNetworkInterface did not return interface set by setNeworkInterface"", ipv4NetworkInterface, mss.getNetworkInterface()); mss.setNetworkInterface(loopbackInterface); assertEquals((""getNetworkInterface did not return network interface set by second"" + "" setNetworkInterface call""), loopbackInterface, mss.getNetworkInterface()); mss.close(); if ((ipv6NetworkInterface) != null) { mss = new java.net.MulticastSocket(0); mss.setNetworkInterface(ipv6NetworkInterface); assertEquals(""getNetworkInterface did not return interface set by setNeworkInterface"", ipv6NetworkInterface, mss.getNetworkInterface()); mss.close(); } mss = new java.net.MulticastSocket(0); java.util.Enumeration addresses = ipv4NetworkInterface.getInetAddresses(); if (addresses.hasMoreElements()) { firstAddress = ((java.net.InetAddress) (addresses.nextElement())); mss.setInterface(firstAddress); assertEquals(""getNetworkInterface did not return interface set by setInterface"", ipv4NetworkInterface, mss.getNetworkInterface()); } mss.close(); }",d4c9480461ab30280bfda0053f81a1759244bf89,test_getNetworkInterface(),372466,335,335
343730,telephony_java_android_telephony_ims_ImsService.java,5.0,"@java.lang.Override public void removeImsFeature(int slotId, int feature) throws android.os.RemoteException { synchronized(mFeatures) { onRemoveImsFeatureInternal(slotId, feature); } }",6c4eabf549a2ad1c7b3ec53691c4cb9deeec0ce0,"@java.lang.Override public void removeImsFeature(int slotId, int feature) throws android.os.RemoteException { synchronized(mFeatures) { enforceCallingOrSelfPermission(android.telephony.ims.MODIFY_PHONE_STATE, ""createImsFeature""); onRemoveImsFeatureInternal(slotId, feature); } }",fe1f30a492ff7fc49151c42cbe77383b4a7a258d,"removeImsFeature(int,int)","removeImsFeature(int,int)",2,5,"@java.lang.Override public void removeImsFeature(int slotId, int feature) throws android.os.RemoteException { synchronized(mFeatures) { enforceCallingOrSelfPermission(android.telephony.ims.MODIFY_PHONE_STATE, ""removeImsFeature""); onRemoveImsFeatureInternal(slotId, feature); } }",2093fa7bbed761f41f99740dbafedcc61ebd45f5,"removeImsFeature(int,int)",295710,71,71
238940,jack_src_com_android_jack_shrob_proguard_GrammarActions.java,0.0,"@javax.annotation.Nonnull private static java.lang.String convertNameToPattern(@javax.annotation.Nonnull java.lang.String name) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (int i = 0; i < (name.length()); i++) { char c = name.charAt(i); switch (c) { case '?' : sb.append(""[^/]""); break; case '*' : int j = i + 1; if ((j < (name.length())) && ((name.charAt(j)) == '*')) { sb.append("".*""); i++; } else { sb.append(""[^/]*""); } break; case '$' : sb.append(""\\$""); break; default : sb.append(c); break; } } return sb.toString(); }",e67ede77a07ebb1159e4514c7e158b5e3e0566dd,"@javax.annotation.Nonnull private static java.lang.String convertNameToPattern(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.proguard.GrammarActions.NameFormat format) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (int i = 0; i < (name.length()); i++) { char c = name.charAt(i); switch (c) { case '?' : com.android.jack.shrob.proguard.GrammarActions.appendPatternNotSeparator(format, sb); break; case '*' : int j = i + 1; if ((j < (name.length())) && ((name.charAt(j)) == '*')) { sb.append("".*""); i++; } else { com.android.jack.shrob.proguard.GrammarActions.appendPatternNotSeparator(format, sb); sb.append(""*""); } break; case '$' : sb.append(""\\$""); break; default : sb.append(c); break; } } return sb.toString(); }",a2346a57cade6dc8dbba7d0a049026d7d221c8fe,convertNameToPattern(java.lang.String),"convertNameToPattern(java.lang.String,com.android.jack.shrob.proguard.GrammarActions$NameFormat)",5,30,"@javax.annotation.Nonnull private static java.lang.String convertNameToPattern(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.proguard.GrammarActions.FilterSeparator separator) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (int i = 0; i < (name.length()); i++) { char c = name.charAt(i); switch (c) { case '?' : sb.append(separator.singleCharWilcard); break; case '*' : int j = i + 1; if ((j < (name.length())) && ((name.charAt(j)) == '*')) { sb.append("".*""); i++; } else { sb.append(separator.multipleCharWildcard); } break; case '$' : sb.append(""\\$""); break; default : sb.append(c); break; } } return sb.toString(); }",e0551a9fa131f002268d3538bb5628af89cec47d,"convertNameToPattern(java.lang.String,com.android.jack.shrob.proguard.GrammarActions$FilterSeparator)",444637,238,208
205814,core_java_android_bluetooth_BluetoothGattService.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeParcelable(new android.os.ParcelUuid(mUuid), 0); out.writeInt(mInstanceId); out.writeInt(mServiceType); out.writeTypedArray(mCharacteristics.toArray(new android.bluetooth.BluetoothGattCharacteristic[0]), 0); android.bluetooth.BluetoothGattIncludedService[] includedServices = new android.bluetooth.BluetoothGattIncludedService[mIncludedServices.size()]; int i = 0; for (android.bluetooth.BluetoothGattService s : mIncludedServices) { includedServices[i] = new android.bluetooth.BluetoothGattIncludedService(s.getUuid(), s.getInstanceId(), s.getType()); i++; } out.writeTypedArray(includedServices, 0); }",24b06237c0bbf38fb0a777074f77b7321d2649db,,"writeToParcel(android.os.Parcel,int)",7,15,"@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeParcelable(new android.os.ParcelUuid(mUuid), 0); out.writeInt(mInstanceId); out.writeInt(mServiceType); out.writeTypedList(mCharacteristics); java.util.ArrayList<android.bluetooth.BluetoothGattIncludedService> includedServices = new java.util.ArrayList<android.bluetooth.BluetoothGattIncludedService>(mIncludedServices.size()); for (android.bluetooth.BluetoothGattService s : mIncludedServices) { includedServices.add(new android.bluetooth.BluetoothGattIncludedService(s.getUuid(), s.getInstanceId(), s.getType())); } out.writeTypedList(includedServices); }",3134701daf1877b8806a84565915805a55b86369,"writeToParcel(android.os.Parcel,int)",215637,159,158
128680,sched_src_com_android_sched_vfs_CachedDirectFS.java,,,,"@javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }",fb3b70a21c6c0ff1930c992c4df300b7a7bcde66,,openWrite(com.android.sched.vfs.ParentVFile),5,18,"@javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }",97770b38575c5495b61cad00d62fc1415a4b9811,openWrite(com.android.sched.vfs.CachedDirectFS$CachedParentVFile),7580,150,155
81416,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,,,,public static void computeAcospi(android.renderscript.cts.TestAcospi.ArgumentsFloatFloat args) { args.ulf = 5; args.ulfRelaxed = 128; args.out = ((float) ((java.lang.Math.acos(args.in)) / (java.lang.Math.PI))); },78cc7705a608efe06979244e04d87f023b2785f0,,computeAcospi(android.renderscript.cts.TestAcospi$ArgumentsFloatFloat),9,11,public static void computeAcospi(android.renderscript.cts.TestAcospi.ArgumentsFloatFloat args) { args.ulf = 5; args.ulfRelaxed = 128; args.out = ((float) ((java.lang.StrictMath.acos(args.in)) / (java.lang.StrictMath.PI))); },562ec92022107b4f06f5d9f7321f8175de833694,computeAcospi(android.renderscript.cts.TestAcospi$ArgumentsFloatFloat),142492,78,80
583630,src_com_android_bips_discovery_ManualDiscovery.java,6.0,"@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStop""); }",92edc600b02ac2f0a6dbc7146dbbde1d2f3ed132,"@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStop""); mWifiMonitor.stop(); allPrintersLost(); }",41421a5f8c531de0601d0cb8ee064da6eaa825f8,onStop(),onStop(),4,6,"@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, ""onStop""); mWifiMonitor.close(); allPrintersLost(); }",cec3bb4fbdc848fef77beb92e6a83b655245ad1b,onStop(),33303,63,63
252478,java_tests_RsTest_src_com_android_rs_test_UT_kernel3d.java,1.0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel3d s = new com.android.rs.test.ScriptC_kernel3d(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",6e176dd08d58a7cc4c8b651679927c8b57c62384,"public void run() { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel3d s = new com.android.rs.test.ScriptC_kernel3d(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",e3beb6f30ad11bb0923cb689e3505f0a503e362a,run(),run(),7,1,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel3d s = new com.android.rs.test.ScriptC_kernel3d(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",6e176dd08d58a7cc4c8b651679927c8b57c62384,run(),379370,139,145
18960,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_descriptors_DescriptorsUtils.java,1.0,"public static boolean containsAttribute(java.util.ArrayList<com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor> attributes, java.lang.String nsUri, com.android.ide.eclipse.adt.internal.resources.AttributeInfo info) { java.lang.String xmlLocalName = info.getName(); for (com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor desc : attributes) { if (desc.getXmlLocalName().equals(xmlLocalName)) { if ((nsUri == (desc.getNamespaceUri())) || ((nsUri != null) && (nsUri.equals(desc.getNamespaceUri())))) { return true; } } } return false; }",4de88992e1fece46b7dcb43bf9cac3ed0530d849,"public static boolean containsAttribute(java.util.ArrayList<com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor> attributes, java.lang.String nsUri, com.android.ide.common.platformData.AttributeInfo info) { java.lang.String xmlLocalName = info.getName(); for (com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor desc : attributes) { if (desc.getXmlLocalName().equals(xmlLocalName)) { if ((nsUri == (desc.getNamespaceUri())) || ((nsUri != null) && (nsUri.equals(desc.getNamespaceUri())))) { return true; } } } return false; }",9df00be7ac3d75415b00195ed6cd4cd515c859d4,"containsAttribute(java.util.ArrayList,java.lang.String,com.android.ide.eclipse.adt.internal.resources.AttributeInfo)","containsAttribute(java.util.ArrayList,java.lang.String,com.android.ide.common.platformData.AttributeInfo)",2,10,"public static boolean containsAttribute(java.util.ArrayList<com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor> attributes, java.lang.String nsUri, com.android.ide.common.resources.platform.AttributeInfo info) { java.lang.String xmlLocalName = info.getName(); for (com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor desc : attributes) { if (desc.getXmlLocalName().equals(xmlLocalName)) { if ((nsUri == (desc.getNamespaceUri())) || ((nsUri != null) && (nsUri.equals(desc.getNamespaceUri())))) { return true; } } } return false; }",235b0a992345717f273ae98f97700b84ca10884a,"containsAttribute(java.util.ArrayList,java.lang.String,com.android.ide.common.resources.platform.AttributeInfo)",136360,159,160
439218,tools_ahat_src_heapdump_AhatClassInstance.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override com.android.ahat.heapdump.ReferenceIterator getReferences() { final com.android.ahat.heapdump.AhatInstance src = this; java.util.List<com.android.ahat.heapdump.Reference> refs = new java.util.AbstractList<com.android.ahat.heapdump.Reference>() { @java.lang.Override public int size() { return mFieldValues.length; } @java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { boolean strong = (!(field.name.equals(""referent""))) || (!(isInstanceOfClass(""java.lang.ref.Reference""))); return new com.android.ahat.heapdump.Reference(src, (""."" + (field.name)), value.asAhatInstance(), strong); } return null; } }; return new com.android.ahat.heapdump.ReferenceIterator(refs); }",169cbb4795da2353e6c4a397ea20b1d55b65ab2b,,getReferences(),2,16,"@java.lang.Override com.android.ahat.heapdump.ReferenceIterator getReferences() { java.util.List<com.android.ahat.heapdump.Reference> refs = new java.util.AbstractList<com.android.ahat.heapdump.Reference>() { @java.lang.Override public int size() { return mFieldValues.length; } @java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { boolean strong = (!(field.name.equals(""referent""))) || (!(isInstanceOfClass(""java.lang.ref.Reference""))); com.android.ahat.heapdump.AhatInstance ref = value.asAhatInstance(); return new com.android.ahat.heapdump.Reference(com.android.ahat.heapdump.AhatClassInstance.this, (""."" + (field.name)), ref, strong); } return null; } }; return new com.android.ahat.heapdump.ReferenceIterator(refs); }",4add8338d36fc4f609eae5e35f42828a7e6b83f0,getReferences(),327880,266,280
141078,jack_src_com_android_jack_reporting_SdkReporter.java,0.0,"@java.lang.Override protected void printFilteredProblem(@javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel, @javax.annotation.Nonnull java.lang.String message, @javax.annotation.CheckForNull java.lang.String fileName, int startLine, int endLine, int startColumn, int endColumn) { java.lang.StringBuffer messageBuffer = new java.lang.StringBuffer(problemLevel.toString()); messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (fileName != null) { messageBuffer.append(fileName); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startLine >= 0) { messageBuffer.append(startLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endLine >= 0) { messageBuffer.append(endLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startColumn >= 0) { messageBuffer.append(startColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endColumn >= 0) { messageBuffer.append(endColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); messageBuffer.append(message); reporterStream.println(messageBuffer.toString()); }",87efc2b93cf5e0b48c81e73bf68318d15aecd7fc,"@java.lang.Override protected void printFilteredProblem(@javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel, @javax.annotation.Nonnull java.lang.String message, @javax.annotation.CheckForNull java.lang.String fileName, int startLine, int endLine, int startColumn, int endColumn) { java.lang.StringBuffer messageBuffer = new java.lang.StringBuffer(problemLevel.toString()); messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (fileName != null) { messageBuffer.append(fileName); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startLine >= 0) { messageBuffer.append(startLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endLine >= 0) { messageBuffer.append(endLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startColumn >= 0) { messageBuffer.append(startColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endColumn >= 0) { messageBuffer.append(endColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); messageBuffer.append(message); java.io.PrintStream printer = streamByLevel.get(problemLevel); if (printer == null) { printer = reporterStream; } printer.println(messageBuffer.toString()); }",486bb30108fe1c5d130c1486873202e66c42eb33,"printFilteredProblem(com.android.jack.reporting.Reportable.ProblemLevel,java.lang.String,java.lang.String,int,int,int,int)","printFilteredProblem(com.android.jack.reporting.Reportable.ProblemLevel,java.lang.String,java.lang.String,int,int,int,int)",3,0,"@java.lang.Override protected void printFilteredProblem(@javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel, @javax.annotation.Nonnull java.lang.String message, @javax.annotation.CheckForNull java.lang.String fileName, int startLine, int endLine, int startColumn, int endColumn) { java.lang.StringBuffer messageBuffer = new java.lang.StringBuffer(problemLevel.toString()); messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (fileName != null) { messageBuffer.append(fileName); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startLine >= 0) { messageBuffer.append(startLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endLine >= 0) { messageBuffer.append(endLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startColumn >= 0) { messageBuffer.append(startColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endColumn >= 0) { messageBuffer.append(endColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); messageBuffer.append(message); java.io.PrintStream printer = streamByLevel.get(problemLevel); if (printer == null) { printer = streamByDefault; } printer.println(messageBuffer.toString()); }",3897c62fcfefe03bf9ab17e78bdbc474f040f4a5,"printFilteredProblem(com.android.jack.reporting.Reportable.ProblemLevel,java.lang.String,java.lang.String,int,int,int,int)",67459,342,343
233353,test_vogar_target_junit4_TestRunnerJUnit4Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.FailTest.class) @org.junit.Test public void testRunner_FailTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure(""failure"", ""java.lang.AssertionError: failed.\n"").success(""success"").success(""throwAnotherExpectedException"").failure(""throwException"", ""java.lang.RuntimeException: exception\n"").success(""throwExpectedException"").completedNormally(); }",1f0a88db682ca22d2d2b5f9f459fa6d3f8c4b985,,testRunner_FailTest(),3,17,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.FailTest.class) @org.junit.Test public void testRunner_FailTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure(""failure"", ""java.lang.AssertionError: failed.\n"").success(""success"").success(""throwAnotherExpectedException"").failure(""throwException"", ""java.lang.RuntimeException: exception\n"").success(""throwExpectedException"").completedNormally(); }",8f3c08a825b259a316482857fbea0a90ac6d3716,testRunner_FailTest(),130797,125,124
280402,emu_test_test_console_Server_app_src_androidTest_java_com_android_devtools_server_Server.java,0.0,"@java.lang.Override public void setUp() throws android.os.RemoteException, android.support.test.uiautomator.UiObjectNotFoundException { getInstrumentation().getUiAutomation().getRootInActiveWindow(); mContext = getInstrumentation().getContext(); mDevice = android.support.test.uiautomator.UiDevice.getInstance(getInstrumentation()); if (!(mDevice.isScreenOn())) { mDevice.wakeUp(); mDevice.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.res(""android"", ""glow_pad_view"")), 10000); mDevice.swipe(560, 1500, 560, 1000, 40); } mDevice.pressHome(); }",b4513e0857c076a89932494a9be3a507841c763f,"@org.junit.Before public void setUp() throws android.os.RemoteException, android.support.test.uiautomator.UiObjectNotFoundException { android.support.test.uiautomator.UiDevice mDevice = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if (!(mDevice.isScreenOn())) { mDevice.wakeUp(); mDevice.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.res(""android"", ""glow_pad_view"")), 10000); mDevice.swipe(560, 1500, 560, 1000, 40); } mDevice.pressHome(); }",85e4047ba598541b65568dd5b05b2889eec3cbfd,setUp(),setUp(),2,0,"@org.junit.Before public void setUp() throws android.os.RemoteException { android.support.test.uiautomator.UiDevice mDevice = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if (!(mDevice.isScreenOn())) { mDevice.wakeUp(); mDevice.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.res(""android"", ""glow_pad_view"")), 10000); mDevice.swipe(560, 1500, 560, 1000, 40); } mDevice.pressHome(); }",9c3fea30ba5359eb76c504cb46989930fb8eb225,setUp(),311886,156,140
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,,"@java.lang.Override public void send(byte[] data) throws java.io.IOException { mSocket.send(new java.net.DatagramPacket(data, data.length)); }",cc32070137352d184a851caa574a7793675d3474,,send(byte[]),15,11,"@java.lang.Override public void send(byte[] data) throws java.lang.Exception { mSocket.send(new java.net.DatagramPacket(data, data.length)); }",eddc10d9466547ac5dc1000798de46aa1eddf08a,send(byte[]),381456,41,41
207541,apps_CtsVerifier_src_com_android_cts_verifier_usb_UsbAccessoryTestActivity.java,8.0,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if ((com.android.cts.verifier.usb.UsbAccessoryTestActivity.ACTION_USB_PERMISSION.equals(intent.getAction())) || (UsbManager.ACTION_USB_ACCESSORY_ATTACHED.equals(intent.getAction()))) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { openAccessory(accessory); } else { android.util.Log.i(com.android.cts.verifier.usb.UsbAccessoryTestActivity.TAG, ""Permission denied...""); } mPermissionRequestPending = false; } }",3c9698db65b967d4f6fec23cfe7ecd5142950ea4,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if ((com.android.cts.verifier.usb.UsbAccessoryTestActivity.ACTION_USB_PERMISSION.equals(intent.getAction())) || (UsbManager.ACTION_USB_ACCESSORY_ATTACHED.equals(intent.getAction()))) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { openAccessory(accessory); } else { android.util.Log.i(com.android.cts.verifier.usb.UsbAccessoryTestActivity.TAG, ""Permission denied...""); } mPermissionRequestPending = false; } else if (UsbManager.ACTION_USB_ACCESSORY_DETACHED.equals(intent.getAction())) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if ((accessory != null) && (accessory.equals(mAccessory))) { closeAccessory(); } } }",736441291729a53fab5c7b1aa5356d7a8c27996d,"onReceive(android.content.Context,android.content.Intent)","onReceive(android.content.Context,android.content.Intent)",3,8,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (com.android.cts.verifier.usb.UsbAccessoryTestActivity.ACTION_USB_PERMISSION.equals(intent.getAction())) { if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); openAccessory(accessory); } else { android.util.Log.i(com.android.cts.verifier.usb.UsbAccessoryTestActivity.TAG, ""Permission denied...""); } mPermissionRequestPending = false; } else if (UsbManager.ACTION_USB_ACCESSORY_DETACHED.equals(intent.getAction())) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if (accessory.equals(mAccessory)) { closeAccessory(); mDisconnectDialog.dismiss(); mConnectDialog.show(); } } }",7b50b3eb709dcc805fc6843266cb4e6e426b6a4c,"onReceive(android.content.Context,android.content.Intent)",440192,261,239
353288,src_com_android_server_telecom_ui_IncomingCallNotifier.java,,,,"private void showIncomingCallNotification(com.android.server.telecom.Call call) { android.telecom.Log.i(this, ""showIncomingCallNotification showCall = %s"", call); java.lang.String name = """"; if ((call.getCallerDisplayNamePresentation()) == (android.telecom.TelecomManager.PRESENTATION_ALLOWED)) { name = call.getCallerDisplayName(); } if (android.text.TextUtils.isEmpty(name)) { name = call.getName(); } android.app.Notification.Builder builder = getNotificationBuilder(call.getTargetPhoneAccountLabel(), name, call.getPhoneNumber()); mNotificationManager.notify(com.android.server.telecom.ui.IncomingCallNotifier.NOTIFICATION_INCOMING_CALL, builder.build()); }",7f876cd6ab09f2ff56b23e1b10947a8d9732a496,,showIncomingCallNotification(com.android.server.telecom.Call),5,13,"private void showIncomingCallNotification(com.android.server.telecom.Call call) { android.telecom.Log.i(this, ""showIncomingCallNotification showCall = %s"", call); android.app.Notification.Builder builder = getNotificationBuilder(call, mCallsManagerProxy.getActiveCall()); mNotificationManager.notify(com.android.server.telecom.ui.IncomingCallNotifier.NOTIFICATION_TAG, com.android.server.telecom.ui.IncomingCallNotifier.NOTIFICATION_INCOMING_CALL, builder.build()); }",a9a9d0f0a2c83390f03cecd3546f0825b5d1749a,showIncomingCallNotification(com.android.server.telecom.Call),62347,174,124
313740,tests_wifitests_src_com_android_server_wifi_aware_WifiAwareHalTest.java,40.0,"@org.junit.Before public void setup() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); com.android.server.wifi.aware.WifiAwareHalTest.resetWifiAwareNative(); com.android.server.wifi.HalMockUtils.initHalMockLibrary(); com.android.server.wifi.aware.WifiAwareHalMock.initAwareHalMockLibrary(mDut); com.android.server.wifi.aware.WifiAwareNative.initAwareHandlersNative(com.android.server.wifi.WifiNative.class, WifiNative.sWlan0Index); com.android.server.wifi.HalMockUtils.setHalMockObject(mAwareHalMock); com.android.server.wifi.aware.WifiAwareHalTest.installMockAwareStateManager(mAwareStateManager); }",a850ce19317119ccf57b13ebcef2b3fa75258474,"@org.junit.Before public void setup() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mMockInjector.getWifiAwareStateManager()).thenReturn(mAwareStateManager); mDut = new com.android.server.wifi.aware.WifiAwareNative(mMockInjector, false); when(mMockInjector.getWifiAwareNative()).thenReturn(mDut); com.android.server.wifi.HalMockUtils.initHalMockLibrary(); com.android.server.wifi.aware.WifiAwareHalMock.initAwareHalMockLibrary(mDut); com.android.server.wifi.aware.WifiAwareNative.initAwareHandlersNative(com.android.server.wifi.WifiNative.class, WifiNative.sWlan0Index); com.android.server.wifi.HalMockUtils.setHalMockObject(mAwareHalMock); }",0c0b2137c09943f4604b1dadb4833876203f0b69,setup(),setup(),7,40,"@org.junit.Before public void setup() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mDut = new com.android.server.wifi.aware.WifiAwareNative(false); mDut.setStateManager(mAwareStateManager); com.android.server.wifi.HalMockUtils.initHalMockLibrary(); com.android.server.wifi.aware.WifiAwareHalMock.initAwareHalMockLibrary(mDut); com.android.server.wifi.aware.WifiAwareNative.initAwareHandlersNative(com.android.server.wifi.WifiNative.class, WifiNative.sWlan0Index); com.android.server.wifi.HalMockUtils.setHalMockObject(mAwareHalMock); }",cf85f8b284f98a0c02afcd6051331b5bb0ab2f9a,setup(),339079,198,168
286919,src_main_java_org_conscrypt_NativeCrypto.java,47.0,"public static java.lang.String[] checkEnabledProtocols(java.lang.String[] protocols) { if (protocols == null) { throw new java.lang.IllegalArgumentException(""protocols == null""); } for (int i = 0; i < (protocols.length); i++) { java.lang.String protocol = protocols[i]; if (protocol == null) { throw new java.lang.IllegalArgumentException(((""protocols["" + i) + ""] == null"")); } if (((!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_1)))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_2)))) { throw new java.lang.IllegalArgumentException(((""protocol "" + protocol) + "" is not supported"")); } } return protocols; }",497c7f4c46cd63ee95936814e6f64c363b039faa,"public static java.lang.String[] checkEnabledProtocols(java.lang.String[] protocols) { if (protocols == null) { throw new java.lang.IllegalArgumentException(""protocols == null""); } protocols = org.conscrypt.Platform.filterProtocolsIfNeeded(protocols); for (int i = 0; i < (protocols.length); i++) { java.lang.String protocol = protocols[i]; if (protocol == null) { throw new java.lang.IllegalArgumentException(((""protocols["" + i) + ""] == null"")); } if (((!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_1)))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_2)))) { throw new java.lang.IllegalArgumentException(((""protocol "" + protocol) + "" is not supported"")); } } return protocols; }",5ac568d21fc305e7703db64a5a8d6796ee76c430,checkEnabledProtocols(java.lang.String[]),checkEnabledProtocols(java.lang.String[]),7,47,"public static java.lang.String[] checkEnabledProtocols(java.lang.String[] protocols) { if (protocols == null) { throw new java.lang.IllegalArgumentException(""protocols == null""); } for (java.lang.String protocol : protocols) { if (protocol == null) { throw new java.lang.IllegalArgumentException(""protocols contains null""); } if ((((!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_1)))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_2)))) && (!(protocol.equals(org.conscrypt.NativeCrypto.OBSOLETE_PROTOCOL_SSLV3)))) { throw new java.lang.IllegalArgumentException(((""protocol "" + protocol) + "" is not supported"")); } } return protocols; }",1d6b7ad041c59213bfd6233bc876ec343328138c,checkEnabledProtocols(java.lang.String[]),422871,217,204
487020,tools_ahat_src_StaticHandler.java,0.0,"@java.lang.Override public void handle(com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { java.lang.ClassLoader loader = com.android.ahat.StaticHandler.class.getClassLoader(); java.io.InputStream is = loader.getResourceAsStream(mResourceName); if (is == null) { exchange.getResponseHeaders().add(""Content-Type"", ""text/html""); exchange.sendResponseHeaders(404, 0); java.io.PrintStream ps = new java.io.PrintStream(exchange.getResponseBody()); com.android.ahat.HtmlDoc doc = new com.android.ahat.HtmlDoc(ps, com.android.ahat.DocString.text(""ahat""), com.android.ahat.DocString.uri(""style.css"")); doc.big(com.android.ahat.DocString.text(""Resource not found."")); doc.close(); } else { exchange.getResponseHeaders().add(""Content-Type"", mContentType); exchange.sendResponseHeaders(200, 0); java.io.OutputStream os = exchange.getResponseBody(); com.google.common.io.ByteStreams.copy(is, os); os.close(); } }",94c3d4da3d097a90ee49c618dc1778b017aef972,"@java.lang.Override public void handle(com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { java.lang.ClassLoader loader = com.android.ahat.StaticHandler.class.getClassLoader(); java.io.InputStream is = loader.getResourceAsStream(mResourceName); if (is == null) { exchange.getResponseHeaders().add(""Content-Type"", ""text/html""); exchange.sendResponseHeaders(404, 0); java.io.PrintStream ps = new java.io.PrintStream(exchange.getResponseBody()); com.android.ahat.HtmlDoc doc = new com.android.ahat.HtmlDoc(ps, com.android.ahat.DocString.text(""ahat""), com.android.ahat.DocString.uri(""style.css"")); doc.big(com.android.ahat.DocString.text(""Resource not found."")); doc.close(); } else { exchange.getResponseHeaders().add(""Content-Type"", mContentType); exchange.sendResponseHeaders(200, 0); java.io.OutputStream os = exchange.getResponseBody(); int read; byte[] buf = new byte[4096]; while ((read = is.read(buf)) > 0) { os.write(buf, 0, read); } is.close(); os.close(); } }",03000e3284d91d02f2e031956226d3a802ba688b,handle(com.sun.net.httpserver.HttpExchange),handle(com.sun.net.httpserver.HttpExchange),5,0,"@java.lang.Override public void handle(com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { java.lang.ClassLoader loader = com.android.ahat.StaticHandler.class.getClassLoader(); java.io.InputStream is = loader.getResourceAsStream(mResourceName); if (is == null) { exchange.getResponseHeaders().add(""Content-Type"", ""text/html""); exchange.sendResponseHeaders(404, 0); java.io.PrintStream ps = new java.io.PrintStream(exchange.getResponseBody()); com.android.ahat.HtmlDoc doc = new com.android.ahat.HtmlDoc(ps, com.android.ahat.DocString.text(""ahat""), com.android.ahat.DocString.uri(""style.css"")); doc.big(com.android.ahat.DocString.text(""Resource not found."")); doc.close(); } else { exchange.getResponseHeaders().add(""Content-Type"", mContentType); exchange.sendResponseHeaders(200, 0); java.io.OutputStream os = exchange.getResponseBody(); int read; byte[] buf = new byte[4096]; while ((read = is.read(buf)) >= 0) { os.write(buf, 0, read); } is.close(); os.close(); } }",291d582210ab9d189694f7c3a402f02cd93eb7a5,handle(com.sun.net.httpserver.HttpExchange),431999,276,275
252341,jack-tests_src_com_android_jack_test_toolchain_EmbeddedJillBasedToolchain.java,9.0,"@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, getClasspathAsString(), in); if (zipFiles) { commandLine.add(""--output-jack""); } else { commandLine.add(""--output-jack-dir""); } commandLine.add(out.getAbsolutePath()); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",a89deff2ad32e9cfa46d6b19fe708e3b642c823c,"@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, getClasspathAsString(), in); if (zipFiles) { commandLine.add(""--output-jack""); commandLine.add(out.getAbsolutePath()); } else { if ((incrementalFolder) != null) { throw new java.lang.UnsupportedOperationException(); } addPropertiesForOutputJackDir(commandLine, out); } com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",9295708c6491dd0f52af4144f93de782dce6eb5e,"libToLib(java.io.File[],java.io.File,boolean)","libToLib(java.io.File[],java.io.File,boolean)",4,9,"@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, getClasspathAsString(), in); addOutputJack(commandLine, out, zipFiles); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",67e640e3628e9fcfe489ec7038b21edc32acc655,"libToLib(java.io.File[],java.io.File,boolean)",33745,245,198
531103,src_com_android_bluetooth_hfp_HeadsetNativeInterface.java,,,,"private void onUnknownAt(java.lang.String atString, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_UNKNOWN_AT); event.valueString = atString; event.device = getDevice(address); sendMessageToService(event); }",b10f55b0ac2c141437d4e8846735e4bf539f502c,,"onUnknownAt(java.lang.String,byte[])",10,30,"private void onUnknownAt(java.lang.String atString, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_UNKNOWN_AT, atString, getDevice(address)); sendMessageToService(event); }",79e5b6fcd6db163210b3948e33a0c7ddd744234c,"onUnknownAt(java.lang.String,byte[])",386056,86,77
144134,jack_src_com_android_jack_frontend_java_JAstBuilder.java,3.0,"private void createTypes(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) { com.android.jack.ir.impl.EcjSourceTypeLoader.createType(refMap, enclosingPackage, typeDeclaration.binding, typeDeclaration, new com.android.sched.util.location.FileLocation(new java.io.File(new java.lang.String(typeDeclaration.compilationResult.fileName)))); if ((typeDeclaration.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes) { createTypes(enclosingPackage, refMap, memberType); } } }",3650687b0e872db2680c58cbeab1bdd52c04bf9d,"private void createTypes(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) { if ((typeDeclaration.binding) == null) { return; } com.android.jack.ir.impl.EcjSourceTypeLoader.createType(refMap, enclosingPackage, typeDeclaration.binding, typeDeclaration, new com.android.sched.util.location.FileLocation(new java.io.File(new java.lang.String(typeDeclaration.compilationResult.fileName)))); if ((typeDeclaration.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes) { createTypes(enclosingPackage, refMap, memberType); } } }",cd58fdaab704923919204d96f04cd46d5825ad41,"createTypes(com.android.jack.ir.ast.JPackage,com.android.jack.ir.impl.ReferenceMapper,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)","createTypes(com.android.jack.ir.ast.JPackage,com.android.jack.ir.impl.ReferenceMapper,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)",11,3,"private void createTypes(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) { if ((hasErrors) || (com.android.jack.ir.impl.JackIrBuilder.hasError(typeDeclaration))) { hasErrors = true; return; } com.android.jack.ir.impl.EcjSourceTypeLoader.createType(refMap, enclosingPackage, typeDeclaration.binding, typeDeclaration, new com.android.sched.util.location.FileLocation(new java.io.File(new java.lang.String(typeDeclaration.compilationResult.fileName)))); if ((typeDeclaration.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes) { createTypes(enclosingPackage, refMap, memberType); } } }",f6a6dd46f75347fe116a9c9e642c79311f5dfece,"createTypes(com.android.jack.ir.ast.JPackage,com.android.jack.ir.impl.ReferenceMapper,org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)",375167,207,229
51243,src_java_com_android_internal_telephony_cdma_CDMAPhone.java,99.0,"@java.lang.Override public void dispose() { synchronized(com.android.internal.telephony.PhoneProxy.lockForRadioTechnologyChange) { super.dispose(); log(""dispose""); unregisterForRuimRecordEvents(); mCM.unregisterForAvailable(this); mCM.unregisterForOffOrNotAvailable(this); mCM.unregisterForOn(this); mSST.unregisterForNetworkAttached(this); mCM.unSetOnSuppServiceNotification(this); removeCallbacks(mExitEcmRunnable); mPendingMmis.clear(); mCT.dispose(); mDataConnectionTracker.dispose(); mSST.dispose(); mCdmaSSM.dispose(this); mSMS.dispose(); mRuimPhoneBookInterfaceManager.dispose(); mRuimSmsInterfaceManager.dispose(); mSubInfo.dispose(); mEriManager.dispose(); } }",4c7c918d179fd942a85fd042814d96703ec7f514,"@java.lang.Override public void dispose() { synchronized(com.android.internal.telephony.PhoneProxy.lockForRadioTechnologyChange) { super.dispose(); log(""dispose""); unregisterForRuimRecordEvents(); mCM.unregisterForAvailable(this); mCM.unregisterForOffOrNotAvailable(this); mCM.unregisterForOn(this); mSST.unregisterForNetworkAttached(this); mCM.unSetOnSuppServiceNotification(this); mCM.unregisterForExitEmergencyCallbackMode(this); removeCallbacks(mExitEcmRunnable); mPendingMmis.clear(); mCT.dispose(); mDataConnectionTracker.dispose(); mSST.dispose(); mCdmaSSM.dispose(this); mSMS.dispose(); mRuimPhoneBookInterfaceManager.dispose(); mRuimSmsInterfaceManager.dispose(); mSubInfo.dispose(); mEriManager.dispose(); } }",9d413c8a7af485b78e00f9c7210c94c1af598174,dispose(),dispose(),3,99,"@java.lang.Override public void dispose() { synchronized(com.android.internal.telephony.PhoneProxy.lockForRadioTechnologyChange) { super.dispose(); log(""dispose""); unregisterForRuimRecordEvents(); mCi.unregisterForAvailable(this); mCi.unregisterForOffOrNotAvailable(this); mCi.unregisterForOn(this); mSST.unregisterForNetworkAttached(this); mCi.unSetOnSuppServiceNotification(this); mCi.unregisterForExitEmergencyCallbackMode(this); removeCallbacks(mExitEcmRunnable); mPendingMmis.clear(); mCT.dispose(); mDcTracker.dispose(); mSST.dispose(); mCdmaSSM.dispose(this); mSMS.dispose(); mRuimPhoneBookInterfaceManager.dispose(); mRuimSmsInterfaceManager.dispose(); mSubInfo.dispose(); mEriManager.dispose(); } }",4d0f31285b2e10958025bba6f37df83d76223010,dispose(),142011,202,207
530666,tests_unit_src_com_android_bluetooth_a2dp_A2dpStateMachineTest.java,,,,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class.getDeclaredMethod(""setAdapterService"", com.android.bluetooth.btservice.AdapterService.class); method.setAccessible(true); method.invoke(mAdapterService, mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""A2dpStateMachineTestHandlerThread""); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); mA2dpStateMachine.start(); }",daa9a25f1b1dc452a943d8c5f48e6e7f3cf3cdd3,,setUp(),6,0,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class.getDeclaredMethod(""setAdapterService"", com.android.bluetooth.btservice.AdapterService.class); method.setAccessible(true); method.invoke(mAdapterService, mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice(""00:01:02:03:04:05""); mHandlerThread = new android.os.HandlerThread(""A2dpStateMachineTestHandlerThread""); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); mA2dpStateMachine.sConnectTimeoutMs = 1000; mA2dpStateMachine.start(); }",d08dad1d288a347dae3e78c6db91c47b05a8d4f2,setUp(),280670,214,225
420404,src_main_java_com_android_vts_servlet_VtsCoverageAlertJobServlet.java,,,,"private java.lang.String getFooter(java.lang.String link) { return (((""<br><br>For details, visit the"" + "" <a href='"") + link) + ""'>"") + ""VTS dashboard.</a>""; }",ddf7859f2fa7124d7aaa5f55ee3c1b29615d2ebf,,getFooter(java.lang.String),5,1,"private static java.lang.String getFooter(java.lang.String link) { return (((""<br><br>For details, visit the"" + "" <a href='"") + link) + ""'>"") + ""VTS dashboard.</a>""; }",d8175f77181860b9dee234e195fbe246b888f350,getFooter(java.lang.String),157664,59,60
128670,src_com_android_nfc_cardemulation_RegisteredNfcFServicesCache.java,,,,"void dump(java.util.ArrayList<android.nfc.cardemulation.NfcFServiceInfo> services) { for (android.nfc.cardemulation.NfcFServiceInfo service : services) { if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DEBUG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, service.toString()); } }",eb0d9f579fae9addaa9624860be434a1f8110b06,,dump(java.util.ArrayList),10,15,"void dump(java.util.ArrayList<android.nfc.cardemulation.NfcFServiceInfo> services) { for (android.nfc.cardemulation.NfcFServiceInfo service : services) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, service.toString()); } }",d17a6e45a1706d289cba71ee3ae52b8ca1a26f90,dump(java.util.ArrayList),148758,105,83
23568,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_project_ProjectHelper.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void build(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IProgressMonitor monitor, boolean enablePostC) throws org.eclipse.core.runtime.CoreException { if (enablePostC) { java.util.Map<java.lang.String, java.lang.String> args = new java.util.TreeMap<java.lang.String, java.lang.String>(); args.put(AdtConstants.FULL_BUILD_REQUESTED, """"); org.eclipse.core.resources.IProjectDescription desc = project.getDescription(); org.eclipse.core.resources.ICommand[] commands = desc.getBuildSpec(); for (int i = 0; i < (commands.length); ++i) { project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, commands[i].getBuilderName(), args, monitor); } } else { project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, monitor); } }",3bea35b7e59daf3b9af4a15dd33c7bea9656369c,,"build(org.eclipse.core.resources.IProject,org.eclipse.core.runtime.IProgressMonitor,boolean)",12,7,"public static void build(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IProgressMonitor monitor, boolean fullBuild) throws org.eclipse.core.runtime.CoreException { project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, monitor); if (fullBuild) { java.util.Map<java.lang.String, java.lang.String> args = new java.util.TreeMap<java.lang.String, java.lang.String>(); args.put(PostCompilerBuilder.POST_C_REQUESTED, """"); project.build(IncrementalProjectBuilder.FULL_BUILD, PostCompilerBuilder.ID, args, monitor); } }",2984cad821317d7ee0103190695a7e92bec16ff1,"build(org.eclipse.core.resources.IProject,org.eclipse.core.runtime.IProgressMonitor,boolean)",189521,205,144
295313,hostsidetests_devicepolicy_app_ManagedProfile_src_com_android_cts_managedprofile_CameraPolicyTest.java,5.0,public void testIsCameraEnabledInPrimaryProfile() throws java.lang.Exception { assertFalse(mDevicePolicyManager.getCameraDisabled(mPrimaryAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); checkCanOpenCamera(true); },09db429d6ccfe6250589ce8c001d33770bd7ae8d,public void testIsCameraEnabledInPrimaryProfile() throws java.lang.Exception { assertFalse(mDevicePolicyManager.getCameraDisabled(mPrimaryAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); waitUntilCameraPolicyEnforced(true); checkCanOpenCamera(true); },9e6f86b13871362f26483557a825ad55fb704c58,testIsCameraEnabledInPrimaryProfile(),testIsCameraEnabledInPrimaryProfile(),4,5,public void testIsCameraEnabledInPrimaryProfile() throws java.lang.Exception { assertFalse(mDevicePolicyManager.getCameraDisabled(mPrimaryAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); checkCanOpenCamera(true); },09db429d6ccfe6250589ce8c001d33770bd7ae8d,testIsCameraEnabledInPrimaryProfile(),28973,65,56
332463,src_com_android_server_telecom_Call.java,177.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isChildCall() { return mIsChildCall; },c8f2eaf1dca27d1f5e6d0369812f52a7efc3b1f5,,isChildCall(),4,194,public boolean isDisconnectingChildCall() { return mIsDisconnectingChildCall; },46cee125e3025c3b895fd7a4a56f5832ce043552,isDisconnectingChildCall(),415884,14,18
540316,src_com_android_bluetooth_a2dp_A2dpService.java,53.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.android.bluetooth.a2dp.A2dpStateMachine getStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""getStateMachine failed: device cannot be null""); return null; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Maximum number of A2DP state machines reached: "" + (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES))); return null; } if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""Creating a new state machine for "" + device)); } sm = com.android.bluetooth.a2dp.A2dpStateMachine.make(device, this, this, mA2dpNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }",0b23010138b541a0d140cf6d596f7575a06f4537,,getStateMachine(android.bluetooth.BluetoothDevice),9,32,"private com.android.bluetooth.a2dp.A2dpStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ""getOrCreateStateMachine failed: device cannot be null""); return null; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Maximum number of A2DP state machines reached: "" + (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES))); return null; } if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""Creating a new state machine for "" + device)); } sm = com.android.bluetooth.a2dp.A2dpStateMachine.make(device, this, this, mA2dpNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }",1e19a057d5a437c3ababd084ed94bbe7fa20dd54,getOrCreateStateMachine(android.bluetooth.BluetoothDevice),280231,338,338
55083,gradle-model_src_test_java_com_android_build_gradle_model_AndroidProjectTest.java,5.0,"public void testMigrated() { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), ""migrated""); connector.forProjectDirectory(projectDir); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { com.android.build.gradle.model.AndroidProject model = connection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull(""empty model!"", model); assertEquals(""migrated"", model.getName()); assertFalse(model.isLibrary()); com.android.build.gradle.model.ProductFlavorContainer defaultConfig = model.getDefaultConfig(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, ""main"", defaultConfig.getSourceProvider()).setJavaDir(""src"").setResourcesDir(""src"").setAidlDir(""src"").setRenderscriptDir(""src"").setResDir(""res"").setAssetsDir(""assets"").setManifestFile(""AndroidManifest.xml"").test(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, ""instrumentTest"", defaultConfig.getTestSourceProvider()).setJavaDir(""tests/java"").setResourcesDir(""tests/resources"").setAidlDir(""tests/aidl"").setJniDir(""tests/jni"").setRenderscriptDir(""tests/rs"").setResDir(""tests/res"").setAssetsDir(""tests/assets"").setManifestFile(""tests/AndroidManifest.xml"").test(); } finally { connection.close(); } }",e7ff7dc7e6938bfaae811c22328198c1679e5132,"public void testMigrated() { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), ""migrated""); connector.forProjectDirectory(projectDir); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { com.android.build.gradle.model.AndroidProject model = connection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull(""Model Object"", model); assertEquals(""Model Name"", ""migrated"", model.getName()); assertFalse(""Library Project"", model.isLibrary()); com.android.build.gradle.model.ProductFlavorContainer defaultConfig = model.getDefaultConfig(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, ""main"", defaultConfig.getSourceProvider()).setJavaDir(""src"").setResourcesDir(""src"").setAidlDir(""src"").setRenderscriptDir(""src"").setResDir(""res"").setAssetsDir(""assets"").setManifestFile(""AndroidManifest.xml"").test(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, ""instrumentTest"", defaultConfig.getTestSourceProvider()).setJavaDir(""tests/java"").setResourcesDir(""tests/resources"").setAidlDir(""tests/aidl"").setJniDir(""tests/jni"").setRenderscriptDir(""tests/rs"").setResDir(""tests/res"").setAssetsDir(""tests/assets"").setManifestFile(""tests/AndroidManifest.xml"").test(); } finally { connection.close(); } }",d4d3afb32b9ab16d1b7e9176a9558cfa02efedea,testMigrated(),testMigrated(),5,7,"public void testMigrated() { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), ""migrated""); connector.forProjectDirectory(projectDir); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { com.android.build.gradle.model.AndroidProject model = connection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull(""Model Object null-check"", model); assertEquals(""Model Name"", ""migrated"", model.getName()); assertFalse(""Library Project"", model.isLibrary()); com.android.build.gradle.model.ProductFlavorContainer defaultConfig = model.getDefaultConfig(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, ""main"", defaultConfig.getSourceProvider()).setJavaDir(""src"").setResourcesDir(""src"").setAidlDir(""src"").setRenderscriptDir(""src"").setResDir(""res"").setAssetsDir(""assets"").setManifestFile(""AndroidManifest.xml"").test(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, ""instrumentTest"", defaultConfig.getTestSourceProvider()).setJavaDir(""tests/java"").setResourcesDir(""tests/resources"").setAidlDir(""tests/aidl"").setJniDir(""tests/jni"").setRenderscriptDir(""tests/rs"").setResDir(""tests/res"").setAssetsDir(""tests/assets"").setManifestFile(""tests/AndroidManifest.xml"").test(); } finally { connection.close(); } }",54a85e53551ed8e0894831180cdd1d09f1538eb7,testMigrated(),521544,374,377
100743,perflib_src_main_java_com_android_tools_perflib_heap_HprofParser.java,1.0,"private int loadInstanceDump() throws java.io.IOException { long id = readId(); int stackId = mInput.readInt(); com.android.tools.perflib.heap.StackTrace stack = mState.getStackTrace(stackId); long classId = readId(); int remaining = mInput.readInt(); com.android.tools.perflib.heap.ClassInstance instance = new com.android.tools.perflib.heap.ClassInstance(id, stack, classId); instance.loadFieldData(mInput, remaining); instance.setHeap(mState.mCurrentHeap); mState.addInstance(id, instance); return ((((mIdSize) + 4) + (mIdSize)) + 4) + remaining; }",7536484f25af2bb52c9b7b2dd240674545d1d539,"private int loadInstanceDump() throws java.io.IOException { long id = readId(); int stackId = mInput.readInt(); com.android.tools.perflib.heap.StackTrace stack = mState.getStackTrace(stackId); final long classId = readId(); int remaining = mInput.readInt(); final com.android.tools.perflib.heap.ClassInstance instance = new com.android.tools.perflib.heap.ClassInstance(id, stack); final byte[] data = new byte[remaining]; mInput.readFully(data); final java.io.DataInputStream stream = new java.io.DataInputStream(new java.io.ByteArrayInputStream(data)); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.RESOLVE_CLASSES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { instance.setClass(mState.findClass(classId)); return null; } })); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.RESOLVE_VALUES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.android.tools.perflib.heap.ClassObj clazz = instance.getClassObj(); while (clazz != null) { for (com.android.tools.perflib.heap.Field field : clazz.getFields()) { instance.addField(field, readValue(stream, instance, field.getType())); } clazz = clazz.getSuperClassObj(); } return null; } })); instance.setHeap(mState.mCurrentHeap); mState.addInstance(id, instance); return ((((mIdSize) + 4) + (mIdSize)) + 4) + remaining; }",c372d5dfd6ffd5528352d2ceb0a158c3633ccca6,loadInstanceDump(),loadInstanceDump(),6,1,"private int loadInstanceDump() throws java.io.IOException { long id = readId(); int stackId = mInput.readInt(); com.android.tools.perflib.heap.StackTrace stack = mState.getStackTrace(stackId); final long classId = readId(); int remaining = mInput.readInt(); final com.android.tools.perflib.heap.ClassInstance instance = new com.android.tools.perflib.heap.ClassInstance(id, stack); final byte[] data = new byte[remaining]; mInput.readFully(data); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.ResolvePriority.CLASSES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { instance.setClass(mState.findClass(classId)); return null; } })); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.ResolvePriority.VALUES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { java.io.DataInputStream stream = new java.io.DataInputStream(new java.io.ByteArrayInputStream(data)); com.android.tools.perflib.heap.ClassObj clazz = instance.getClassObj(); while (clazz != null) { for (com.android.tools.perflib.heap.Field field : clazz.getFields()) { instance.addField(field, readValue(stream, instance, field.getType())); } clazz = clazz.getSuperClassObj(); } return null; } })); instance.setHeap(mState.mCurrentHeap); mState.addInstance(id, instance); return ((((mIdSize) + 4) + (mIdSize)) + 4) + remaining; }",7b2bcac6f0b0c65df91d681db8a3f47595b5f142,loadInstanceDump(),20331,439,436
64461,ddmlib_src_main_java_com_android_ddmlib_Client.java,38.0,"public void toggleMethodProfiling() { boolean canStream = mClientData.hasFeature(ClientData.FEATURE_PROFILING_STREAMING); try { if ((mClientData.getMethodProfilingStatus()) == (com.android.ddmlib.ClientData.MethodProfilingStatus.ON)) { if (canStream) { com.android.ddmlib.HandleProfiling.sendMPSE(this); } else { com.android.ddmlib.HandleProfiling.sendMPRE(this); } } else { int bufferSize = ((com.android.ddmlib.DdmPreferences.getProfilerBufferSizeMb()) * 1024) * 1024; if (canStream) { com.android.ddmlib.HandleProfiling.sendMPSS(this, bufferSize, 0); } else { java.lang.String file = (""/sdcard/"" + (mClientData.getClientDescription().replaceAll(""\\:.*"", """"))) + (DdmConstants.DOT_TRACE); com.android.ddmlib.HandleProfiling.sendMPRS(this, file, bufferSize, 0); } } } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""ddms"", ""Toggle method profiling failed""); } }",edd63bd7de6ea534d19fcbb9005ebbc543b11490,"public void toggleMethodProfiling() { try { switch (mClientData.getMethodProfilingStatus()) { case TRACER_ON : stopMethodProfiling(); break; case SAMPLER_ON : stopMethodSampling(); break; case OFF : startMethodProfiling(); break; } } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""ddms"", ""Toggle method profiling failed""); } }",845b89e63a0dcd984b0477e474d31a7dfe8d64b9,toggleMethodProfiling(),toggleMethodProfiling(),2,39,"public void toggleMethodProfiling() { try { switch (mClientData.getMethodProfilingStatus()) { case TRACER_ON : stopMethodTracer(); break; case SAMPLER_ON : stopSamplingProfiler(); break; case OFF : startMethodTracer(); break; } } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""ddms"", ""Toggle method profiling failed""); } }",eea30658f21cd112db57fe1f3184cc951a418507,toggleMethodProfiling(),165978,93,93
505857,services_core_java_com_android_server_connectivity_IpConnectivityMetrics.java,20.0,"private void cmdList(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { final java.util.ArrayList<android.net.ConnectivityMetricsEvent> events; synchronized(mLock) { events = new java.util.ArrayList(mBuffer); } if (((args.length) > 1) && (args[1].equals(""proto""))) { for (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent ev : com.android.server.connectivity.IpConnectivityEventBuilder.toProto(events)) { pw.print(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.listAsProtos(pw); } return; } for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.list(pw); } }",d7a022cd8495e938b05f774670e4e4e3f6861c06,"private void cmdList(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { final java.util.ArrayList<android.net.ConnectivityMetricsEvent> events; synchronized(mLock) { events = new java.util.ArrayList(mBuffer); } if (((args.length) > 1) && (args[1].equals(""proto""))) { for (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent ev : com.android.server.connectivity.IpConnectivityEventBuilder.toProto(events)) { pw.print(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.listAsProtos(pw); } mDefaultNetworkMonitor.listEventsAsProto(pw); return; } for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.list(pw); } mDefaultNetworkMonitor.listEvents(pw); }",0e3922c530c23a6714263218f06e058a44a35d6b,"cmdList(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])","cmdList(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",22,4,"private void cmdList(java.io.PrintWriter pw) { pw.println(""metrics events:""); final java.util.List<android.net.ConnectivityMetricsEvent> events = getEvents(); for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } pw.println(""""); if ((mNetdListener) != null) { mNetdListener.list(pw); } pw.println(""""); mDefaultNetworkMetrics.listEvents(pw); }",429f346360d2db7867dd7f830dbddc94c9067949,cmdList(java.io.PrintWriter),244265,234,106
181883,test_442-checker-constant-folding_src_Main.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static int StaticConditionNulls() { java.lang.Object a = null; java.lang.Object b = null; return a == b ? 5 : 2; },9478cbcafb91a3e0fce22defdf612e8cfbdeb5c0,,StaticConditionNulls(),2,24,public static int StaticConditionNulls() { java.lang.Object a = Main.getNull(); java.lang.Object b = Main.getNull(); return a == b ? 5 : 2; },ed579662c76de02a1748dcac82b638241d2bf2f0,StaticConditionNulls(),350343,36,42
285003,tools_ahat_src_Sort.java,6.0,"@java.lang.Override public int compare(com.android.ahat.Site.ObjectsInfo a, com.android.ahat.Site.ObjectsInfo b) { java.lang.String aName = com.android.ahat.AhatSnapshot.getClassName(a.classObj); java.lang.String bName = com.android.ahat.AhatSnapshot.getClassName(b.classObj); return aName.compareTo(bName); }",ee38d80d62a130fefb40c1f50b6981172c641d8b,"@java.lang.Override public int compare(com.android.ahat.heapdump.Site.ObjectsInfo a, com.android.ahat.heapdump.Site.ObjectsInfo b) { java.lang.String aName = a.classObj.getClassName(); java.lang.String bName = b.classObj.getClassName(); return aName.compareTo(bName); }",1de31dcf748b96428d7d4088c0dfb6612d894ddc,"compare(com.android.ahat.Site$ObjectsInfo,com.android.ahat.Site$ObjectsInfo)","compare(com.android.ahat.heapdump.Site$ObjectsInfo,com.android.ahat.heapdump.Site$ObjectsInfo)",7,6,"@java.lang.Override public int compare(com.android.ahat.heapdump.Site.ObjectsInfo a, com.android.ahat.heapdump.Site.ObjectsInfo b) { java.lang.String aName = a.getClassName(); java.lang.String bName = b.getClassName(); return aName.compareTo(bName); }",9522c5fcdce3cd335aac7945812e54dfc0c538b1,"compare(com.android.ahat.heapdump.Site$ObjectsInfo,com.android.ahat.heapdump.Site$ObjectsInfo)",183577,83,77
537552,tests_net_java_com_android_server_IpSecServiceRefcountedResourceTest.java,,,,"@org.junit.Test public void testBinderDeathAfterCleanupAndReleaseDoesNothing() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.binderDied(); assertResourceState(refcountedResource, (-1), 2, 1, 1, 1); }",03c58fdbe55a5e55dc85f29bada8cbb0c30261f7,,testBinderDeathAfterCleanupAndReleaseDoesNothing(),9,3,"@org.junit.Test public void testBinderDeathAfterCleanupAndReleaseDoesNothing() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.userRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.binderDied(); assertResourceState(refcountedResource, (-1), 2, 1, 1, 1); }",de67cc5096b09c1cb3bceda89ff27ff8d4eb95a5,testBinderDeathAfterCleanupAndReleaseDoesNothing(),78037,116,115
640733,src_com_android_bluetooth_newavrcp_MediaPlayerWrapper.java,18.0,"boolean isMetadataSynced() { if ((getQueue()) != null) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } if ((currItem == null) || (!(currItem.getDescription().equals(getMetadata().getDescription())))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Metadata currently out of sync for "" + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current queueItem: "" + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current metadata : "" + (getMetadata().getDescription()))); } return false; } } return true; }",c25350c07a27adddd5c7a3c0d0df7109df2d0b49,"boolean isMetadataSynced() { if (((getQueue()) != null) && ((getActiveQueueID()) != (-1))) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } com.android.bluetooth.avrcp.Metadata qitem = com.android.bluetooth.avrcp.Util.toMetadata(currItem); com.android.bluetooth.avrcp.Metadata mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); qitem.mediaId = """"; mdata.mediaId = """"; if ((currItem == null) || (!(qitem.equals(mdata)))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Metadata currently out of sync for "" + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current queueItem: "" + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current metadata : "" + (getMetadata().getDescription()))); } return false; } } return true; }",c08ff169105fa5ebdcad634a6c34446f2da4be8a,isMetadataSynced(),isMetadataSynced(),8,18,"boolean isMetadataSynced() { if (((getQueue()) != null) && ((getActiveQueueID()) != (-1))) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } com.android.bluetooth.avrcp.Metadata qitem = com.android.bluetooth.avrcp.Util.toMetadata(currItem); com.android.bluetooth.avrcp.Metadata mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); if ((currItem == null) || (!(qitem.equals(mdata)))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Metadata currently out of sync for "" + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current queueItem: "" + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current metadata : "" + (getMetadata().getDescription()))); } return false; } } return true; }",8665e9e184365fb6213a5b66fefbcdc0c77b0be5,isMetadataSynced(),427553,321,307
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,17.0,public void addObj(android.support.v8.renderscript.BaseObj obj) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { if (obj != null) { mN.addObj(obj.getNObj()); } else { mN.addObj(null); } return; } if (obj != null) { addI32(obj.getID(null)); } else { addI32(0); } },dbd41eabed4bd215ca0f8ebc7f89626dea47d2d4,public void addObj(android.support.v8.renderscript.BaseObj obj) { if (shouldThunk()) { if (obj != null) { mN.addObj(obj.getNObj()); } else { mN.addObj(null); } return; } if (obj != null) { addI32(obj.getID(null)); } else { addI32(0); } },bd8606811df6b00cd652ec791bd6ad1c5dade2ba,addObj(android.support.v8.renderscript.BaseObj),addObj(android.support.v8.renderscript.BaseObj),5,16,public void addObj(android.support.v8.renderscript.BaseObj obj) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { if (obj != null) { mN.addObj(obj.getNObj()); } else { mN.addObj(null); } return; } if (obj != null) { addI32(obj.getID(null)); } else { addI32(0); } },dbd41eabed4bd215ca0f8ebc7f89626dea47d2d4,addObj(android.support.v8.renderscript.BaseObj),205183,87,100
139310,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_AndroidModel.java,4.0,@org.gradle.model.Unmanaged org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.internal.dsl.BuildType> getBuildTypes();,00a85c2d9aa0d9dcd44b39134b9ccbb39212c1c0,org.gradle.model.collection.ManagedSet<com.android.build.gradle.managed.ManagedBuildType> getBuildTypes();,2c7e2dd1affbe72fff54cb5df592bac1bb684648,getBuildTypes(),getBuildTypes(),11,4,org.gradle.model.collection.ManagedSet<com.android.build.gradle.managed.BuildType> getBuildTypes();,a58f585f5ecafa3919c3f97469fe866878c0a6f2,getBuildTypes(),253364,29,28
561230,core_tests_coretests_src_android_service_euicc_EuiccProfileInfoTest.java,,,,"@org.junit.Test public void testBuilder_BasedOnAnotherProfile() { android.service.euicc.EuiccProfileInfo p = new android.service.euicc.EuiccProfileInfo.Builder().setIccid(""21430000000000006587"").setNickname(""profile nickname"").setProfileName(""profile name"").setServiceProviderName(""service provider"").setOperatorId(new android.service.euicc.OperatorId(new byte[]{ 35, 69, 103 }, new byte[]{ 1, 2, 3 }, new byte[]{ 4, 5 })).setState(EuiccProfileInfo.ProfileState.ENABLED).setProfileClass(EuiccProfileInfo.ProfileClass.OPERATIONAL).setPolicyRules(EuiccProfileInfo.PolicyRule.DO_NOT_DELETE).setUiccAccessRule(new android.telephony.UiccAccessRule[]{ new android.telephony.UiccAccessRule(new byte[0], null, 0) }).build(); android.service.euicc.EuiccProfileInfo copied = new android.service.euicc.EuiccProfileInfo.Builder(p).build(); assertEquals(p, copied); assertEquals(p.hashCode(), copied.hashCode()); }",82db227692f849b33a711d206d8dfe3dc8e90f1a,,testBuilder_BasedOnAnotherProfile(),8,3,"@org.junit.Test public void testBuilder_BasedOnAnotherProfile() { android.service.euicc.EuiccProfileInfo p = new android.service.euicc.EuiccProfileInfo.Builder().setIccid(""21430000000000006587"").setNickname(""profile nickname"").setProfileName(""profile name"").setServiceProviderName(""service provider"").setCarrierIdentifier(new android.service.carrier.CarrierIdentifier(new byte[]{ 35, 69, 103 }, ""123"", ""45"")).setState(EuiccProfileInfo.PROFILE_STATE_ENABLED).setProfileClass(EuiccProfileInfo.PROFILE_CLASS_OPERATIONAL).setPolicyRules(EuiccProfileInfo.POLICY_RULE_DO_NOT_DELETE).setUiccAccessRule(new android.telephony.UiccAccessRule[]{ new android.telephony.UiccAccessRule(new byte[0], null, 0) }).build(); android.service.euicc.EuiccProfileInfo copied = new android.service.euicc.EuiccProfileInfo.Builder(p).build(); assertEquals(p, copied); assertEquals(p.hashCode(), copied.hashCode()); }",56a4feb46f86601d575a791f3475d741dba52eb3,testBuilder_BasedOnAnotherProfile(),314722,262,255
114079,luni_src_test_java_libcore_java_net_URLConnectionTest.java,187.0,"public void testClientConfiguredGzipContentEncoding() throws java.lang.Exception { byte[] bodyBytes = gzip(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"".getBytes(""UTF-8"")); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(bodyBytes).addHeader(""Content-Encoding: gzip"").addHeader((""Content-Length: "" + (bodyBytes.length)))); server.play(); java.net.URLConnection connection = server.getUrl(""/"").openConnection(); connection.addRequestProperty(""Accept-Encoding"", ""gzip""); java.io.InputStream gunzippedIn = new java.util.zip.GZIPInputStream(connection.getInputStream()); assertEquals(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"", readAscii(gunzippedIn, java.lang.Integer.MAX_VALUE)); assertEquals(bodyBytes.length, connection.getContentLength()); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContains(request.getHeaders(), ""Accept-Encoding: gzip""); }",c064e0fd151e41754b21cbe66c07061115a4c73e,"public void testClientConfiguredGzipContentEncoding() throws java.lang.Exception { byte[] bodyBytes = gzip(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"".getBytes(""UTF-8"")); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(bodyBytes).addHeader(""Content-Encoding: gzip"").addHeader((""Content-Length: "" + (bodyBytes.length)))); server.play(); java.net.URLConnection connection = server.getUrl(""/"").openConnection(); connection.addRequestProperty(""Accept-Encoding"", ""gzip""); java.io.InputStream gunzippedIn = new java.util.zip.GZIPInputStream(connection.getInputStream()); assertEquals(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"", readAscii(gunzippedIn, java.lang.Integer.MAX_VALUE)); assertEquals(bodyBytes.length, connection.getContentLength()); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); libcore.java.net.URLConnectionTest.assertContains(request.getHeaders(), ""Accept-Encoding: gzip""); }",1977728453b4c2508a161b10610c6fbc918f746b,testClientConfiguredGzipContentEncoding(),testClientConfiguredGzipContentEncoding(),3,186,"public void testClientConfiguredGzipContentEncoding() throws java.lang.Exception { byte[] bodyBytes = gzip(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"".getBytes(""UTF-8"")); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(bodyBytes).addHeader(""Content-Encoding: gzip"").addHeader((""Content-Length: "" + (bodyBytes.length)))); server.play(); java.net.URLConnection connection = server.getUrl(""/"").openConnection(); connection.addRequestProperty(""Accept-Encoding"", ""gzip""); java.io.InputStream gunzippedIn = new java.util.zip.GZIPInputStream(connection.getInputStream()); assertEquals(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"", readAscii(gunzippedIn, java.lang.Integer.MAX_VALUE)); assertEquals(bodyBytes.length, connection.getContentLength()); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContains(request.getHeaders(), ""Accept-Encoding: gzip""); }",c064e0fd151e41754b21cbe66c07061115a4c73e,testClientConfiguredGzipContentEncoding(),455342,208,198
410379,src_vogar_android_HostRuntime.java,5.0,"@java.lang.Override public java.util.Set<vogar.tasks.Task> installTasks() { java.util.Set<vogar.tasks.Task> result = new java.util.HashSet<vogar.tasks.Task>(); for (java.io.File classpathElement : run.classpath.getElements()) { java.lang.String name = run.basenameOfJar(classpathElement); java.io.File localDex = run.localDexFile(name); result.add(createCreateDexJarTask(run.classpath, classpathElement, name, null, localDex)); } result.add(new vogar.tasks.MkdirTask(run.mkdir, dalvikCache())); return result; }",3f2b5ece4354c2bb9f3d0787c1d1174ed7d7e679,"@java.lang.Override public java.util.Set<vogar.tasks.Task> installTasks() { java.util.Set<vogar.tasks.Task> result = new java.util.HashSet<vogar.tasks.Task>(); for (java.io.File classpathElement : run.classpath.getElements()) { java.lang.String name = run.basenameOfJar(classpathElement); java.io.File localDex = run.localDexFile(name); java.io.File localDesugarTempDir = run.localDesugarTempDir(name); result.add(createCreateDexJarTask(run.classpath, classpathElement, name, null, localDex, localDesugarTempDir)); } result.add(new vogar.tasks.MkdirTask(run.mkdir, dalvikCache())); return result; }",3d9fd6352472ef67ea0768b95ba9593076f16756,installTasks(),installTasks(),6,5,"@java.lang.Override public java.util.Set<vogar.tasks.Task> installTasks() { java.util.Set<vogar.tasks.Task> result = new java.util.HashSet<vogar.tasks.Task>(); for (java.io.File classpathElement : run.classpath.getElements()) { java.lang.String name = run.basenameOfJar(classpathElement); java.io.File localDex = run.localDexFile(name); java.io.File localTempDir = run.localDir(name); result.add(createCreateDexJarTask(run.classpath, classpathElement, name, null, localDex, localTempDir)); } result.add(new vogar.tasks.MkdirTask(run.mkdir, dalvikCache())); return result; }",e74ca5e8a11ebeb8b10465ab37c945d2a49b1ffd,installTasks(),22745,180,174
161052,sched_src_com_android_sched_vfs_UnionVFS.java,,,,"@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { if (!(isWritable())) { throw new java.lang.UnsupportedOperationException(); } com.android.sched.vfs.BaseVFile wrappedFile = file.getWrappedFiles().get(0); boolean wrappedFileIsWritable = wrappedFile.getVFS().getCapabilities().contains(Capabilities.WRITE); if (!wrappedFileIsWritable) { try { loadWritableFile(file); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } } return file.getWrappedFiles().get(0).getOutputStream(append); }",00c8f51398e5776a0aa0c1aebf060280f7e783b9,,"openWrite(com.android.sched.vfs.UnionVFS$UnionVFile,boolean)",15,23,"@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { if (!(isWritable())) { throw new java.lang.UnsupportedOperationException(); } synchronized(file) { if (!(file.isWritable())) { try { loadWritableFile(file); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } } } return file.getWrappedFile().getOutputStream(append); }",cb1641ace9855aaa6d613d558db5da1408dd9752,"openWrite(com.android.sched.vfs.UnionVFS$UnionVFile,boolean)",316811,179,141
79530,luni_src_main_java_java_net_Socket.java,40.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void initConnected(java.net.InetAddress remoteAddress, int remotePort) { isConnected = true; impl.initConnected(remoteAddress, remotePort); }",81a3de5eeda87fcf6597820fe1e6f0b5b98a8508,,"initConnected(java.net.InetAddress,int)",11,49,"public void onConnect(java.net.InetAddress remoteAddress, int remotePort) { isConnected = true; impl.onConnect(remoteAddress, remotePort); }",fc65fb5b65c3492d9b8959a677cd41a4d0a4ea7e,"onConnect(java.net.InetAddress,int)",511044,34,34
510369,src_main_java_com_android_apksig_internal_apk_v2_V2SchemeVerifier.java,25.0,"private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance(""X.509""); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException(""Failed to obtain X.509 CertificateFactory"", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }",c58e9134a555c13560b70038d1a8f235a817db9a,"private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify, int maxSdkVersion, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance(""X.509""); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException(""Failed to obtain X.509 CertificateFactory"", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }",f1c5c2780d29b616134cfcb59eac0e02e180404c,"parseSigners(java.nio.ByteBuffer,java.util.Set,com.android.apksig.internal.apk.v2.V2SchemeVerifier$Result)","parseSigners(java.nio.ByteBuffer,java.util.Set,int,com.android.apksig.internal.apk.v2.V2SchemeVerifier$Result)",9,0,"private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws com.android.apksig.internal.apk.v2.V2SchemeVerifier.SignatureNotFoundException, java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance(""X.509""); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException(""Failed to obtain X.509 CertificateFactory"", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, minSdkVersion, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }",08a1656dde82482d9dfa66e9d3d7aef673b50a2f,"parseSigners(java.nio.ByteBuffer,java.util.Set,int,int,com.android.apksig.internal.apk.v2.V2SchemeVerifier$Result)",274343,467,496
71102,src_com_android_mms_ui_ClassZeroActivity.java,6.0,"@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().setBackgroundDrawableResource(R.drawable.class_zero_background); byte[] pdu = getIntent().getByteArrayExtra(""pdu""); java.lang.String format = getIntent().getStringExtra(""format""); mMessage = android.telephony.SmsMessage.createFromPdu(pdu, format); java.lang.CharSequence messageChars = mMessage.getMessageBody(); java.lang.String message = messageChars.toString(); if (android.text.TextUtils.isEmpty(message)) { finish(); return; } if ((message.length()) < (com.android.mms.ui.ClassZeroActivity.BUFFER_OFFSET)) messageChars = ((com.android.mms.ui.ClassZeroActivity.BUFFER) + message) + (com.android.mms.ui.ClassZeroActivity.BUFFER); long now = android.os.SystemClock.uptimeMillis(); mDialog = new android.app.AlertDialog.Builder(this).setMessage(messageChars).setPositiveButton(R.string.save, mSaveListener).setNegativeButton(android.R.string.cancel, mCancelListener).setCancelable(false).show(); mTimerSet = now + (com.android.mms.ui.ClassZeroActivity.DEFAULT_TIMER); if (icicle != null) { mTimerSet = icicle.getLong(com.android.mms.ui.ClassZeroActivity.TIMER_FIRE, mTimerSet); } }",0f882fe46c758d6a0b6b5a45f42c86e2ee274c4f,"@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().setBackgroundDrawableResource(R.drawable.class_zero_background); if ((messageQueue) == null) { messageQueue = new java.util.ArrayList<android.telephony.SmsMessage>(); } byte[] pdu = getIntent().getByteArrayExtra(""pdu""); java.lang.String format = getIntent().getStringExtra(""format""); android.telephony.SmsMessage rawMessage = android.telephony.SmsMessage.createFromPdu(pdu, format); java.lang.CharSequence messageChars = rawMessage.getMessageBody(); java.lang.String message = messageChars.toString(); if (android.text.TextUtils.isEmpty(message)) { if ((messageQueue.size()) == 0) { finish(); } return; } messageQueue.add(rawMessage); if ((messageQueue.size()) == 1) { displayZeroMessage(rawMessage); } if (icicle != null) { mTimerSet = icicle.getLong(com.android.mms.ui.ClassZeroActivity.TIMER_FIRE, mTimerSet); } }",864fbc40d2ddf2a1b6bdbbf89c05ffaa1607173b,onCreate(android.os.Bundle),onCreate(android.os.Bundle),7,5,"@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().setBackgroundDrawableResource(R.drawable.class_zero_background); if ((mMessageQueue) == null) { mMessageQueue = new java.util.ArrayList<android.telephony.SmsMessage>(); } if (!(queueMsgFromIntent(getIntent()))) { return; } if ((mMessageQueue.size()) == 1) { displayZeroMessage(mMessageQueue.get(0)); } if (icicle != null) { mTimerSet = icicle.getLong(com.android.mms.ui.ClassZeroActivity.TIMER_FIRE, mTimerSet); } }",a072a6c04e4c061e2959ee4fad69c98b443d2508,onCreate(android.os.Bundle),361055,262,167
349230,src_java_com_android_internal_telephony_ServiceStateTracker.java,72.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int convertRILRegStateToServiceState(int regState) { switch (regState) { case android.hardware.radio.V1_0.RegState.NOT_REG_MT_NOT_SEARCHING_OP : return android.telephony.ServiceState.RIL_REG_STATE_NOT_REG; case android.hardware.radio.V1_0.RegState.REG_HOME : return android.telephony.ServiceState.RIL_REG_STATE_HOME; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_SEARCHING_OP : return android.telephony.ServiceState.RIL_REG_STATE_SEARCHING; case android.hardware.radio.V1_0.RegState.REG_DENIED : return android.telephony.ServiceState.RIL_REG_STATE_DENIED; case android.hardware.radio.V1_0.RegState.UNKNOWN : return android.telephony.ServiceState.RIL_REG_STATE_UNKNOWN; case android.hardware.radio.V1_0.RegState.REG_ROAMING : return android.telephony.ServiceState.RIL_REG_STATE_ROAMING; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_NOT_SEARCHING_OP_EM : return android.telephony.ServiceState.RIL_REG_STATE_NOT_REG_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_SEARCHING_OP_EM : return android.telephony.ServiceState.RIL_REG_STATE_SEARCHING_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.REG_DENIED_EM : return android.telephony.ServiceState.RIL_REG_STATE_DENIED_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.UNKNOWN_EM : return android.telephony.ServiceState.RIL_REG_STATE_UNKNOWN_EMERGENCY_CALL_ENABLED; default : return android.telephony.ServiceState.REGISTRATION_STATE_NOT_REGISTERED_AND_NOT_SEARCHING; } },3fea209d5e787d973c4c666d43c3e787647a5902,,convertRILRegStateToServiceState(int),7,48,private int getRegStateFromHalRegState(int regState) { switch (regState) { case android.hardware.radio.V1_0.RegState.NOT_REG_MT_NOT_SEARCHING_OP : return android.telephony.ServiceState.RIL_REG_STATE_NOT_REG; case android.hardware.radio.V1_0.RegState.REG_HOME : return android.telephony.ServiceState.RIL_REG_STATE_HOME; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_SEARCHING_OP : return android.telephony.ServiceState.RIL_REG_STATE_SEARCHING; case android.hardware.radio.V1_0.RegState.REG_DENIED : return android.telephony.ServiceState.RIL_REG_STATE_DENIED; case android.hardware.radio.V1_0.RegState.UNKNOWN : return android.telephony.ServiceState.RIL_REG_STATE_UNKNOWN; case android.hardware.radio.V1_0.RegState.REG_ROAMING : return android.telephony.ServiceState.RIL_REG_STATE_ROAMING; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_NOT_SEARCHING_OP_EM : return android.telephony.ServiceState.RIL_REG_STATE_NOT_REG_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_SEARCHING_OP_EM : return android.telephony.ServiceState.RIL_REG_STATE_SEARCHING_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.REG_DENIED_EM : return android.telephony.ServiceState.RIL_REG_STATE_DENIED_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.UNKNOWN_EM : return android.telephony.ServiceState.RIL_REG_STATE_UNKNOWN_EMERGENCY_CALL_ENABLED; default : return android.telephony.ServiceState.REGISTRATION_STATE_NOT_REGISTERED_AND_NOT_SEARCHING; } },0982b998898aa41f051b5172369897398f880077,getRegStateFromHalRegState(int),446587,493,492
298006,wifi_tests_src_android_net_wifi_hotspot2_pps_CredentialTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void validateEapTtlsUserCredentialWithMismatchFingerprint() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); cred.userCredential.username = ""username""; cred.userCredential.password = ""password""; cred.userCredential.eapType = Credential.EAP_TLS; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential(); cred.certCredential.certType = ""x509v3""; cred.certCredential.certSha256FingerPrint = new byte[32]; java.util.Arrays.fill(cred.certCredential.certSha256FingerPrint, ((byte) (0))); cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; cred.clientCertificateChain = new java.security.cert.X509Certificate[]{ android.net.wifi.FakeKeys.CLIENT_CERT }; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1; assertFalse(cred.validate()); }",5c3ccb18871353ddd2b9f6c809c91779ed599e40,,validateEapTtlsUserCredentialWithMismatchFingerprint(),8,5,"@org.junit.Test public void validateCertCredentialWithMismatchFingerprint() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential(); cred.certCredential.certType = ""x509v3""; cred.certCredential.certSha256FingerPrint = new byte[32]; java.util.Arrays.fill(cred.certCredential.certSha256FingerPrint, ((byte) (0))); cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; cred.clientCertificateChain = new java.security.cert.X509Certificate[]{ android.net.wifi.FakeKeys.CLIENT_CERT }; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1; assertFalse(cred.validate()); }",fe8d23be0b677ebc7d41aee8bd3699d57575d7b0,validateCertCredentialWithMismatchFingerprint(),484608,286,220
96415,build-system_gradle-model_src_test_java_com_android_build_gradle_model_AndroidProjectTest.java,25.0,"public void testLibTestDep() { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject(""libTestDep""); com.android.builder.model.AndroidProject model = projectData.model; java.util.Collection<com.android.builder.model.Variant> variants = model.getVariants(); com.android.builder.model.Variant debugVariant = com.android.build.gradle.model.AndroidProjectTest.getVariant(variants, ""debug""); assertNotNull(debugVariant); java.util.Collection<com.android.builder.model.AndroidArtifact> extraAndroidArtifact = debugVariant.getExtraAndroidArtifacts(); com.android.builder.model.AndroidArtifact testArtifact = com.android.build.gradle.model.AndroidProjectTest.getAndroidArtifact(extraAndroidArtifact, com.android.build.gradle.model.ARTIFACT_ANDROID_TEST); assertNotNull(testArtifact); com.android.builder.model.Dependencies testDependencies = testArtifact.getDependencies(); java.util.Collection<java.io.File> jars = testDependencies.getJars(); assertEquals(2, jars.size()); for (java.io.File f : jars) { assertTrue(((f.getName().equals(""guava-11.0.2.jar"")) || (f.getName().equals(""jsr305-1.3.9.jar"")))); } }",2a8a12f69dc05feba8cc7fa8b5ab7dc512fd78ae,"public void testLibTestDep() { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject(""libTestDep""); com.android.builder.model.AndroidProject model = projectData.model; java.util.Collection<com.android.builder.model.Variant> variants = model.getVariants(); com.android.builder.model.Variant debugVariant = com.android.build.gradle.model.AndroidProjectTest.getVariant(variants, ""debug""); assertNotNull(debugVariant); java.util.Collection<com.android.builder.model.AndroidArtifact> extraAndroidArtifact = debugVariant.getExtraAndroidArtifacts(); com.android.builder.model.AndroidArtifact testArtifact = com.android.build.gradle.model.AndroidProjectTest.getAndroidArtifact(extraAndroidArtifact, com.android.build.gradle.model.ARTIFACT_ANDROID_TEST); assertNotNull(testArtifact); com.android.builder.model.Dependencies testDependencies = testArtifact.getDependencies(); java.util.Collection<java.io.File> jars = testDependencies.getJavaLibraries(); assertEquals(2, jars.size()); for (java.io.File f : jars) { assertTrue(((f.getName().equals(""guava-11.0.2.jar"")) || (f.getName().equals(""jsr305-1.3.9.jar"")))); } }",0d83c7394880a27e2a7a76cc441fc37bd77ca748,testLibTestDep(),testLibTestDep(),4,25,"public void testLibTestDep() { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject(""libTestDep""); com.android.builder.model.AndroidProject model = projectData.model; java.util.Collection<com.android.builder.model.Variant> variants = model.getVariants(); com.android.builder.model.Variant debugVariant = com.android.build.gradle.model.AndroidProjectTest.getVariant(variants, ""debug""); assertNotNull(debugVariant); java.util.Collection<com.android.builder.model.AndroidArtifact> extraAndroidArtifact = debugVariant.getExtraAndroidArtifacts(); com.android.builder.model.AndroidArtifact testArtifact = com.android.build.gradle.model.AndroidProjectTest.getAndroidArtifact(extraAndroidArtifact, com.android.build.gradle.model.ARTIFACT_ANDROID_TEST); assertNotNull(testArtifact); com.android.builder.model.Dependencies testDependencies = testArtifact.getDependencies(); java.util.Collection<com.android.builder.model.JavaLibrary> javaLibraries = testDependencies.getJavaLibraries(); assertEquals(2, javaLibraries.size()); for (com.android.builder.model.JavaLibrary lib : javaLibraries) { java.io.File f = lib.getJarFile(); assertTrue(((f.getName().equals(""guava-11.0.2.jar"")) || (f.getName().equals(""jsr305-1.3.9.jar"")))); } }",1b2da98d1a36d779020b6707285ccf2fb6ea41aa,testLibTestDep(),28310,290,315
441634,telephony_java_android_telephony_MbmsStreamingManager.java,3.0,"private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsStreamingManager.MBMS_STREAMING_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mCallbackToApp, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, ""Service died before initialization""); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, ""Runtime exception during initialization""); try { mCallbackToApp.error(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); } catch (android.os.RemoteException e1) { } return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { try { mCallbackToApp.error(result, ""Error returned during initialization""); } catch (android.os.RemoteException e) { } return; } mService.set(streamingService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { mService.set(null); } }); }",ab5418e45b5f36299606a1d02c9b1c4049ef8a18,"private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsStreamingManager.MBMS_STREAMING_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mCallbackToApp, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, ""Service died before initialization""); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, ""Runtime exception during initialization""); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, ""Error returned during initialization""); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } try { streamingService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, ""Middleware lost during initialization""); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } mService.set(streamingService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsStreamingManager.sIsInitialized = false; mService.set(null); } }); }",8429f7f3f120245c40e1c537929b6559c4617ada,bindAndInitialize(),bindAndInitialize(),6,3,"private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsStreamingManager.MBMS_STREAMING_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mInternalCallback, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, ""Service died before initialization""); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized.set(false); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, ""Runtime exception during initialization""); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized.set(false); return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, ""Error returned during initialization""); android.telephony.MbmsStreamingManager.sIsInitialized.set(false); return; } try { streamingService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, ""Middleware lost during initialization""); android.telephony.MbmsStreamingManager.sIsInitialized.set(false); return; } mService.set(streamingService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsStreamingManager.sIsInitialized.set(false); mService.set(null); } }); }",6c53a4e625b19c8c145727638cdcc28a44aa12b6,bindAndInitialize(),409203,480,489
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_ThreadOnlyModifierTest.java,,,,"public void testMethodEntry() { logWriter.println(""testMethodEntry started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long threadID = getFilteredThreadId(); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setThreadOnlyMethodEntry(org.apache.harmony.jpda.tests.jdwp.EventModifiers.ThreadOnlyModifierTest.TEST_CLASS_NAME, threadID); checkReplyPacket(reply, ""Failed to set METHOD_ENTRY with thread only modifier""); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForThreadEvent(JDWPConstants.EventKind.METHOD_ENTRY, requestID, threadID); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.METHOD_ENTRY, requestID); checkReplyPacket(reply, (""Failed to clear event "" + requestID)); logWriter.println(""testMethodEntry done""); }",0438ba9b158095cc7c6d706922d43752f4e7e107,,testMethodEntry(),3,1,"public void testMethodEntry() { logWriter.println(""testMethodEntry started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createMethodEntryEventBuilder(org.apache.harmony.jpda.tests.jdwp.EventModifiers.ThreadOnlyModifierTest.TEST_CLASS_NAME); testEventWithThreadOnlyModifier(builder); logWriter.println(""testMethodEntry done""); }",f0617db2fd99157323e9dddf094b27cfde4c0c9d,testMethodEntry(),127197,241,110
377238,Common_src_com_googlecode_android_scripting_facade_telephony_ImsManagerFacade.java,0.0,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Set Enhanced 4G mode."") public void imsSetEnhanced4gMode(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""enable"") java.lang.Boolean enable) { com.android.ims.ImsManager.setEnhanced4gLteModeSetting(mContext, enable); }",8662140529e910750d3fb7f3e2a235e2b2fb6635,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Set Enhanced 4G mode."") public void imsSetEnhanced4gMode(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""enable"") java.lang.Boolean enable) { com.android.ims.ImsManager.setEnhanced4gLteModeSettingForSlot(enable); }",6aba2bc0c455c2382c9f2f5a43fb80c932b55c69,imsSetEnhanced4gMode(java.lang.Boolean),imsSetEnhanced4gMode(java.lang.Boolean),4,0,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Set Enhanced 4G mode."") public void imsSetEnhanced4gMode(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""enable"") java.lang.Boolean enable) { mImsManager.setEnhanced4gLteModeSettingForSlot(enable); }",de311a90ffa2c419a8f9775e043d667fe50c63f8,imsSetEnhanced4gMode(java.lang.Boolean),383424,89,83
146710,sdk-common_src_test_java_com_android_ide_common_res2_ResourceMergerTest.java,45.0,"public void testMergedResourcesByName() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(); verifyResourceExists(merger, ""drawable/icon"", ""drawable-ldpi-v4/icon"", ""drawable/icon2"", ""drawable/patch"", ""raw/foo"", ""layout/main"", ""layout/layout_ref"", ""layout/alias_replaced_by_file"", ""layout/file_replaced_by_alias"", ""drawable/color_drawable"", ""drawable/drawable_ref"", ""color/color"", ""string/basic_string"", ""string/xliff_string"", ""string/xliff_with_carriage_return"", ""string/styled_string"", ""style/style"", ""array/string_array"", ""attr/dimen_attr"", ""attr/string_attr"", ""attr/enum_attr"", ""attr/flag_attr"", ""attr/blah"", ""attr/blah2"", ""attr/flagAttr"", ""declare-styleable/declare_styleable"", ""dimen/dimen"", ""dimen-sw600dp-v13/offset"", ""id/item_id"", ""integer/integer""); }",52596979883c5d825854b1393b08aadb33657ac9,"public void testMergedResourcesByName() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(); verifyResourceExists(merger, ""drawable/icon"", ""drawable-ldpi/icon"", ""drawable/icon2"", ""drawable/patch"", ""raw/foo"", ""layout/main"", ""layout/layout_ref"", ""layout/alias_replaced_by_file"", ""layout/file_replaced_by_alias"", ""drawable/color_drawable"", ""drawable/drawable_ref"", ""color/color"", ""string/basic_string"", ""string/xliff_string"", ""string/xliff_with_carriage_return"", ""string/styled_string"", ""style/style"", ""array/string_array"", ""attr/dimen_attr"", ""attr/string_attr"", ""attr/enum_attr"", ""attr/flag_attr"", ""attr/blah"", ""attr/blah2"", ""attr/flagAttr"", ""declare-styleable/declare_styleable"", ""dimen/dimen"", ""dimen-sw600dp/offset"", ""id/item_id"", ""integer/integer""); }",f0b970216bbf24d5f1c2e688c3055128ec8a8228,testMergedResourcesByName(),testMergedResourcesByName(),3,46,"public void testMergedResourcesByName() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(false); verifyResourceExists(merger, ""drawable/icon"", ""drawable-ldpi/icon"", ""drawable/icon2"", ""drawable/patch"", ""raw/foo"", ""layout/main"", ""layout/layout_ref"", ""layout/alias_replaced_by_file"", ""layout/file_replaced_by_alias"", ""drawable/color_drawable"", ""drawable/drawable_ref"", ""color/color"", ""string/basic_string"", ""string/xliff_string"", ""string/xliff_with_carriage_return"", ""string/styled_string"", ""style/style"", ""array/string_array"", ""attr/dimen_attr"", ""attr/string_attr"", ""attr/enum_attr"", ""attr/flag_attr"", ""attr/blah"", ""attr/blah2"", ""attr/flagAttr"", ""declare-styleable/declare_styleable"", ""dimen/dimen"", ""dimen-sw600dp/offset"", ""id/item_id"", ""integer/integer""); }",4c681653d82f931605507c0bb93006945ae81f76,testMergedResourcesByName(),183216,266,268
91995,luni_src_main_java_libcore_io_Os.java,102.0,"public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws java.net.SocketException, libcore.io.ErrnoException;",6d20f353d4dfb930be9973ae32a43abd91699253,"public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws android.os.ErrnoException, java.net.SocketException;",24190400d54b29b195a22b51e150492d14d4cdfc,"sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)","sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)",3,102,"public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws android.system.ErrnoException, java.net.SocketException;",618d676edcfe5158e0d8a73c0e7e0745182a2424,"sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)",170165,54,54
22268,monkeyrunner_src_com_android_monkeyrunner_recorder_actions_DragAction.java,0.0,"@java.lang.Override public java.lang.String serialize() { float duration = (timeMs) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple(""start"", startx, starty).addTuple(""end"", endx, endy).add(""duration"", duration).add(""steps"", steps).build(); return ""DRAG|"" + pydict; }",6eeef594d149526e2f197c354f2025c9b792e85e,"public java.lang.String serialize() { float duration = (timeMs) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple(""start"", startx, starty).addTuple(""end"", endx, endy).add(""duration"", duration).add(""steps"", steps).build(); return ""DRAG|"" + pydict; }",60cc1c7ba691831b8be49c8a373bdab86b08daf6,serialize(),serialize(),8,1,"@java.lang.Override public java.lang.String serialize() { float duration = (timeMs) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple(""start"", startx, starty).addTuple(""end"", endx, endy).add(""duration"", duration).add(""steps"", steps).build(); return ""DRAG|"" + pydict; }",6eeef594d149526e2f197c354f2025c9b792e85e,serialize(),81363,95,101
100459,sdk-common_src_main_java_com_android_ide_common_repository_GradleCoordinate.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isPreview() { for (com.android.ide.common.repository.GradleCoordinate.RevisionComponent component : mItems) { if (component.isPreview()) { return true; } } return false; },801dd10250ebda3e427bd5251fddbf90bb5480d9,,isPreview(),4,8,@java.lang.Override public boolean isPreview() { return (!(mItems.isEmpty())) && (mItems.get(((mItems.size()) - 1)).isPreview()); },54d21ab01ab2ab297a6498582a38671e8df9257e,isPreview(),310712,53,38
340832,src_com_android_server_telecom_Call.java,38.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onRttConnectionFailure(com.android.server.telecom.Call call) { },bef4a40874d07afa4df6016c3323a759e2b79e75,,onRttConnectionFailure(com.android.server.telecom.Call),8,115,"@java.lang.Override public void onRttInitiationFailure(com.android.server.telecom.Call call, int reason) { }",ad4b5d8e6188b344377a1f2b724c53c94431a6f0,"onRttInitiationFailure(com.android.server.telecom.Call,int)",219989,29,33
118300,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,7.0,"@com.android.annotations.Nullable private com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }",3ddc9b9e55b02f091ad60623dc0440463f81b5db,"@com.android.annotations.Nullable private com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])).setJvmArguments(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }",986c058b3cc703cdf2d1f13185c78a0f7d438e21,"execute(java.util.List,boolean,java.lang.String[])","execute(java.util.List,boolean,java.lang.String[])",3,9,"@com.android.annotations.Nullable private com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { executeBuild(arguments, connection, tasks); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }",e89a62d2aa59d7db22b87971f8ade747c4b0e69c,"execute(java.util.List,boolean,java.lang.String[])",345674,264,126
140940,tests_tests_hardware_src_android_hardware_cts_SensorTest.java,13.0,"public void testRegisterTwiceWithSameSensor() { android.hardware.Sensor sensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); if (sensor == null) { throw new android.hardware.cts.helpers.SensorNotSupportedException(android.hardware.Sensor.TYPE_ACCELEROMETER); } boolean result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertTrue(result); result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertFalse(result); }",2e762cd24c91298e414303f628963b43aa6f0f7d,"public void testRegisterTwiceWithSameSensor() { android.hardware.Sensor sensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); if (sensor == null) { throw new android.hardware.cts.helpers.SensorNotSupportedException(android.hardware.Sensor.TYPE_ACCELEROMETER); } boolean result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertTrue(result); result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertFalse(result); mSensorManager.unregisterListener(mNullSensorEventListener); }",5b22f24f029e59caf7b2aea27515f964eff9788f,testRegisterTwiceWithSameSensor(),testRegisterTwiceWithSameSensor(),5,13,"public void testRegisterTwiceWithSameSensor() { android.hardware.Sensor sensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); if (sensor == null) { throw new android.hardware.cts.helpers.SensorNotSupportedException(android.hardware.Sensor.TYPE_ACCELEROMETER); } boolean result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertTrue(result); result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertFalse(result); }",2e762cd24c91298e414303f628963b43aa6f0f7d,testRegisterTwiceWithSameSensor(),462846,141,130
144744,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,7.0,"@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> getAllModels() { return getAllModels(new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction(), false); }",4af45b48fbb3a91b2a72f72f334f213db9b1a7cc,"@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> getAllModels() { java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> allModels = getAllModels(new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction(), false); for (com.android.builder.model.AndroidProject project : allModels.values()) { if (!(project.getSyncIssues().isEmpty())) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""Project "").append(project.getName()).append("" had sync issues :\n""); for (com.android.builder.model.SyncIssue syncIssue : project.getSyncIssues()) { msg.append(syncIssue); msg.append(""\n""); } fail(msg.toString()); } } return allModels; }",52883c531d1521d94eb5281aee919e8888f24a9f,getAllModels(),getAllModels(),4,9,"@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> getAllModels() { java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> allModels = getAllModels(new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction(), false); for (com.android.builder.model.AndroidProject project : allModels.values()) { com.android.build.gradle.integration.common.fixture.GradleTestProject.assertNoSyncIssues(project); } return allModels; }",03a182119059cff395c043dfbf902fd481207065,getAllModels(),356375,207,141
38402,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationComposite.java,120.0,private void initDevices() { mDeviceList = null; com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk != null) { com.android.ide.eclipse.adt.internal.sdk.LayoutDeviceManager manager = sdk.getLayoutDeviceManager(); mDeviceList = manager.getCombinedList(); } if (((mDeviceList) != null) && ((mDeviceList.size()) > 0)) { com.android.ide.eclipse.adt.internal.sdk.LayoutDevice first = mDeviceList.get(0); selectDevice(first); java.util.List<com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig> configs = first.getConfigs(); selectDeviceConfig(configs.get(0)); } else { selectDevice(null); } },fba270675702f71073d69df7855642f165db267e,private void initDevices() { mDeviceList = null; com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk != null) { mDeviceManager = new com.android.sdklib.devices.DeviceManager(com.android.ide.eclipse.adt.AdtPlugin.getDefault()); mDeviceList = mDeviceManager.getDevices(sdk.getSdkLocation()); } if (((mDeviceList) != null) && ((mDeviceList.size()) > 0)) { com.android.sdklib.devices.Device first = mDeviceList.get(0); selectDevice(first); java.util.List<com.android.sdklib.devices.State> states = first.getAllStates(); selectDeviceState(states.get(0)); } else { selectDevice(null); } },86fa09669feb9fcdb21d111bbb09ac8e9006fcca,initDevices(),initDevices(),6,120,private void initDevices() { com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk != null) { mDeviceList = sdk.getDevices(); } else { mDeviceList = new java.util.ArrayList<com.android.sdklib.devices.Device>(); } if (!(mDeviceList.isEmpty())) { com.android.sdklib.devices.Device first = mDeviceList.get(0); selectDevice(first); java.util.List<com.android.sdklib.devices.State> states = first.getAllStates(); selectDeviceState(states.get(0)); } else { selectDevice(null); } },5bce077b23ba25d12eb6d0f178d081473f728285,initDevices(),185102,199,163
281492,tests_wifitests_src_com_android_server_wifi_WifiStateMachinePrimeTest.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testValidConfigIsSavedOnFailureToStart() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); when(mWifiInjector.getWifiApConfigStore()).thenReturn(mWifiApConfigStore); android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration(); config.SSID = ""ThisIsAConfig""; mWifiStateMachinePrime.enterSoftAPMode(config); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals(""SoftAPModeState"", mWifiStateMachinePrime.getCurrentMode()); verify(mWifiApConfigStore).setApConfiguration(eq(config)); }",8d3fc710a47bb63d5b88b1e381512db188520778,,testValidConfigIsSavedOnFailureToStart(),12,18,"@org.junit.Test public void testValidConfigIsSavedOnFailureToStart() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); when(mWifiInjector.getWifiApConfigStore()).thenReturn(mWifiApConfigStore); android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration(); config.SSID = ""ThisIsAConfig""; mWifiStateMachinePrime.enterSoftAPMode(config); mLooper.dispatchAll(); assertEquals(com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING, mWifiStateMachinePrime.getCurrentMode()); verify(mWifiApConfigStore).setApConfiguration(eq(config)); }",9a7ec9f0477e86cb29ab2f2e8fdd871e87be5db2,testValidConfigIsSavedOnFailureToStart(),252790,166,163
239100,services_core_java_com_android_server_media_MediaSessionService.java,47.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void postAdjustSuggestedStreamVolume(final int direction, final int suggestedStream, final int flags, final java.lang.String packageName, final java.lang.String TAG) { mHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { try { mAudioService.adjustSuggestedStreamVolume(direction, suggestedStream, flags, packageName, TAG); } catch (android.os.RemoteException e) { android.util.Log.e(TAG, ""Error adjusting default volume."", e); } } }); }",bde79ea5d827d72472635f37f594276d29a38ee7,,"postAdjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)",8,12,"private void dispatchAdjustVolumeLocked(int suggestedStream, int direction, int flags, com.android.server.media.MediaSessionRecord session) { if (com.android.server.media.MediaSessionService.DEBUG) { java.lang.String description = (session == null) ? null : session.toString(); android.util.Log.d(com.android.server.media.MediaSessionService.TAG, (((((((""Adjusting session "" + description) + "" by "") + direction) + "". flags="") + flags) + "", suggestedStream="") + suggestedStream)); } boolean preferSuggestedStream = false; if ((isValidLocalStreamType(suggestedStream)) && (android.media.AudioSystem.isStreamActive(suggestedStream, 0))) { preferSuggestedStream = true; } if ((session == null) || preferSuggestedStream) { if (((flags & (android.media.AudioManager.FLAG_ACTIVE_MEDIA_ONLY)) != 0) && (!(android.media.AudioSystem.isStreamActive(AudioManager.STREAM_MUSIC, 0)))) { if (com.android.server.media.MediaSessionService.DEBUG) { android.util.Log.d(com.android.server.media.MediaSessionService.TAG, ""No active session to adjust, skipping media only volume event""); } return; } mHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { try { java.lang.String packageName = getContext().getOpPackageName(); mAudioService.adjustSuggestedStreamVolume(direction, suggestedStream, flags, packageName, com.android.server.media.MediaSessionService.TAG); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.media.MediaSessionService.TAG, ""Error adjusting default volume."", e); } } }); } else { session.adjustVolume(direction, flags, getContext().getPackageName(), android.os.UserHandle.myUserId(), true); } }",b5b39ee782dc414cb5c9b3acc89ccc732cb52998,"dispatchAdjustVolumeLocked(int,int,int,com.android.server.media.MediaSessionRecord)",287508,119,431
510195,test_959-invoke-polymorphic-accessors_src_Main.java,53.0,"static void setDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }",ed27b1a49a71fe4bd05cbe66d3244569ebbfaecf,"static void setDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }",9e9d3dc8179dd1d552825eca42b727e736b166f9,"setDouble(java.lang.invoke.MethodHandle,Main$ValueHolder,double,boolean)","setDouble(java.lang.invoke.MethodHandle,Main$ValueHolder,double,boolean)",3,51,"static void setDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }",409d60112082e4289de8c0c6edae7681d9e7cf13,"setDouble(java.lang.invoke.MethodHandle,Main$ValueHolder,double,boolean)",228920,104,103
300388,ojluni_src_main_java_java_lang_invoke_Transformers.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,static boolean isAbstract(java.lang.Class<?> klass) { return ((klass.getModifiers()) & (java.lang.reflect.Modifier.ABSTRACT)) == (java.lang.reflect.Modifier.ABSTRACT); },514d2f18976a415b3acde9c4990363b9133fca08,,isAbstract(java.lang.Class),5,10,private static boolean isAbstract(java.lang.Class<?> klass) { return ((klass.getModifiers()) & (java.lang.reflect.Modifier.ABSTRACT)) == (java.lang.reflect.Modifier.ABSTRACT); },e6f47f3f27e1214b04c8d3fa81f731400e8c240c,isAbstract(java.lang.Class),37507,46,47
43713,luni_src_test_java_libcore_javax_crypto_CipherTest.java,17.0,"private static synchronized java.security.Key getEncryptKey(java.lang.String algorithm) throws java.lang.Exception { java.security.Key key = libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.get(algorithm); if (key != null) { return key; } algorithm = libcore.javax.crypto.CipherTest.getBaseAlgoritm(algorithm); if (algorithm.equals(""RSA"")) { java.security.KeyFactory kf = java.security.KeyFactory.getInstance(""RSA""); java.security.spec.RSAPrivateKeySpec keySpec = new java.security.spec.RSAPrivateKeySpec(libcore.javax.crypto.CipherTest.RSA_2048_modulus, libcore.javax.crypto.CipherTest.RSA_2048_privateExponent); key = kf.generatePrivate(keySpec); } else { javax.crypto.KeyGenerator kg = javax.crypto.KeyGenerator.getInstance(algorithm); key = kg.generateKey(); } libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.put(algorithm, key); return key; }",fb7add64d5f635d5148b12ece5cbca6a20cb1827,"private static synchronized java.security.Key getEncryptKey(java.lang.String algorithm) throws java.lang.Exception { java.security.Key key = libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.get(algorithm); if (key != null) { return key; } algorithm = libcore.javax.crypto.CipherTest.getBaseAlgorithm(algorithm); if (algorithm.startsWith(""RSA"")) { java.security.KeyFactory kf = java.security.KeyFactory.getInstance(""RSA""); java.security.spec.RSAPrivateKeySpec keySpec = new java.security.spec.RSAPrivateKeySpec(libcore.javax.crypto.CipherTest.RSA_2048_modulus, libcore.javax.crypto.CipherTest.RSA_2048_privateExponent); key = kf.generatePrivate(keySpec); } else { javax.crypto.KeyGenerator kg = javax.crypto.KeyGenerator.getInstance(algorithm); key = kg.generateKey(); } libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.put(algorithm, key); return key; }",76afbb45ac5af2d2148e9bcfff3552c51de935b1,getEncryptKey(java.lang.String),getEncryptKey(java.lang.String),8,9,"private static synchronized java.security.Key getEncryptKey(java.lang.String algorithm) throws java.lang.Exception { java.security.Key key = libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.get(algorithm); if (key != null) { return key; } if (algorithm.startsWith(""RSA"")) { java.security.KeyFactory kf = java.security.KeyFactory.getInstance(""RSA""); java.security.spec.RSAPrivateKeySpec keySpec = new java.security.spec.RSAPrivateKeySpec(libcore.javax.crypto.CipherTest.RSA_2048_modulus, libcore.javax.crypto.CipherTest.RSA_2048_privateExponent); key = kf.generatePrivate(keySpec); } else if (libcore.javax.crypto.CipherTest.isPBE(algorithm)) { javax.crypto.SecretKeyFactory skf = javax.crypto.SecretKeyFactory.getInstance(algorithm); key = skf.generateSecret(new javax.crypto.spec.PBEKeySpec(""secret"".toCharArray())); } else { javax.crypto.KeyGenerator kg = javax.crypto.KeyGenerator.getInstance(libcore.javax.crypto.CipherTest.getBaseAlgorithm(algorithm)); key = kg.generateKey(); } libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.put(algorithm, key); return key; }",8bedbef753f53f9a86f5e6c34014875d6a3188a5,getEncryptKey(java.lang.String),147389,228,285
89697,build-system_builder_src_main_java_com_android_builder_sdk_PlatformLoader.java,,,,"private synchronized void init(@com.android.annotations.NonNull com.android.utils.ILogger logger) { if ((mSdkInfo) == null) { java.lang.String host; if ((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_DARWIN)) { host = ""darwin-x86""; } else if ((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_LINUX)) { host = ""linux""; } else { throw new java.lang.IllegalStateException(""Windows is not supported for platform development""); } mSdkInfo = new com.android.builder.sdk.SdkInfo(new java.io.File(mTreeLocation, ((""out/host/"" + host) + ""/framework/annotations.jar"")), mNdkLocation, new java.io.File(mTreeLocation, ((""out/host/"" + host) + ""/bin/adb"")), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_ZIPALIGN)); } }",5b48d479410b1209363b8d5002d31c35abf501a1,,init(com.android.utils.ILogger),5,5,"private synchronized void init(@com.android.annotations.NonNull com.android.utils.ILogger logger) { if ((mSdkInfo) == null) { java.lang.String host; if ((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_DARWIN)) { host = ""darwin-x86""; } else if ((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_LINUX)) { host = ""linux""; } else { throw new java.lang.IllegalStateException(""Windows is not supported for platform development""); } mSdkInfo = new com.android.builder.sdk.SdkInfo(new java.io.File(mTreeLocation, ((""out/host/"" + host) + ""/framework/annotations.jar"")), new java.io.File(mTreeLocation, ((""out/host/"" + host) + ""/bin/adb"")), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_ZIPALIGN)); } }",36d2260fbba94b84af3a476b6c2cc49565d7393f,init(com.android.utils.ILogger),206545,239,234
50361,builder_src_main_java_com_android_builder_internal_compiler_SourceSearcher.java,,,,"private void processFile(java.io.File sourceFolder, java.io.File file, com.android.builder.internal.compiler.SourceSearcher.SourceFileProcessor processor) throws java.io.IOException, java.lang.InterruptedException { if (file.isFile()) { if (checkExtension(file)) { processor.processFile(sourceFolder, file); } } else if (file.isDirectory()) { java.io.File[] children = file.listFiles(); if (children != null) { for (java.io.File child : children) { processFile(sourceFolder, child, processor); } } } }",9db49b283a7265cfc4997650a7f128c7f5b6fd9d,,"processFile(java.io.File,java.io.File,com.android.builder.internal.compiler.SourceSearcher$SourceFileProcessor)",3,1,"private void processFile(final java.io.File file, final com.android.builder.internal.compiler.SourceSearcher.SourceFileProcessor processor) throws java.io.IOException, java.lang.InterruptedException { if (file.isFile()) { if (checkExtension(file)) { if ((mExecutor) != null) { mExecutor.execute(new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Object call() throws java.lang.Exception { processor.processFile(file); return null; } }); } else { processor.processFile(file); } } } else if (file.isDirectory()) { java.io.File[] children = file.listFiles(); if (children != null) { for (java.io.File child : children) { processFile(child, processor); } } } }",b7cd7f4180e7d999212274149711e5223db3fbed,"processFile(java.io.File,com.android.builder.internal.compiler.SourceSearcher$SourceFileProcessor)",263331,132,182
128680,sched_src_com_android_sched_vfs_CachedDirectFS.java,,,,"@java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileInputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }",0654e33a32af7aece4771071b04106b437ab3976,,openRead(com.android.sched.vfs.ParentVFile),5,6,"@java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileInputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }",31717751cae31aea45a2aeaffc8d9f04c12333e1,openRead(com.android.sched.vfs.CachedDirectFS$CachedParentVFile),7584,150,155
16553,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_HierarchyViewerDirector.java,15.0,"private void loadViewServerInfoAndWindows(final com.android.ddmlib.IDevice device) { executeInBackground(new java.lang.Runnable() { public void run() { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); if (viewServerInfo == null) { return; } com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel().addDevice(device, windows); if ((viewServerInfo.protocolVersion) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(com.android.hierarchyviewerlib.HierarchyViewerDirector.this, device); focusChanged(device); } } }); }",35a6719a87a36a14191fba322d825b37b2b01e65,"private void loadViewServerInfoAndWindows(final com.android.ddmlib.IDevice device) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); if (viewServerInfo == null) { return; } com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel().addDevice(device, windows); if ((viewServerInfo.protocolVersion) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(this, device); focusChanged(device); } }",87f7318fbc501dd14e062affdaaca6fd7859a123,loadViewServerInfoAndWindows(com.android.ddmlib.IDevice),loadViewServerInfoAndWindows(com.android.ddmlib.IDevice),14,8,"private void loadViewServerInfoAndWindows(final com.android.ddmlib.IDevice device) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); if (viewServerInfo == null) { return; } com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel().addDevice(device, windows); if ((viewServerInfo.protocolVersion) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(this, device); focusChanged(device); } }",3431cdf59ca54696864e790e3cb0ba968614f6b6,loadViewServerInfoAndWindows(com.android.ddmlib.IDevice),450798,171,172
95831,plugins_gradle_tooling-extension-impl_src_org_jetbrains_plugins_gradle_tooling_internal_IdeaCompilerOutputImpl.java,,,,public void setTestOutputDir(java.io.File testOutputDir) { this.testOutputDir = testOutputDir; },fa13c4ce954b049ad0b2dc4de304298ba2f63d88,,setTestOutputDir(java.io.File),4,7,public void setMainResourcesDir(java.io.File mainResourcesDir) { myMainResourcesDir = mainResourcesDir; },c303cbd20237b491a6a877c10eb0218f632cbae4,setMainResourcesDir(java.io.File),439933,24,27
298006,wifi_tests_src_android_net_wifi_hotspot2_pps_CredentialTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void validateEapTtlsUserCredentialWithoutCaCert() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); cred.userCredential.username = ""username""; cred.userCredential.password = ""password""; cred.userCredential.eapType = Credential.EAP_TTLS; cred.userCredential.nonEapInnerMethod = ""MS-CHAP""; assertFalse(cred.validate()); }",77b11e17e41111e7a59b201f25e97d66014e2ca5,,validateEapTtlsUserCredentialWithoutCaCert(),8,10,"@org.junit.Test public void validateUserCredentialWithoutRealm() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); cred.userCredential.username = ""username""; cred.userCredential.password = ""password""; cred.userCredential.eapType = android.net.wifi.EAPConstants.EAP_TTLS; cred.userCredential.nonEapInnerMethod = ""MS-CHAP""; cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; assertFalse(cred.validate()); }",3abf1720298956a2d4c5003caadad333c1b28f97,validateUserCredentialWithoutRealm(),484629,153,164
646612,tests_unit_src_com_android_bluetooth_newavrcp_MediaPlayerWrapperTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); wrapper.registerCallback(mTestCbs); com.android.bluetooth.avrcp.MediaController mUpdatedController = mock(com.android.bluetooth.avrcp.MediaController.class); doReturn(mTestState).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, ""New Title""); doReturn(mTestMetadata.build()).when(mUpdatedController).getMetadata(); doReturn(null).when(mMockController).getQueue(); wrapper.updateMediaController(mUpdatedController); verify(mUpdatedController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, never()).mediaUpdatedCallback(any()); }",dba106cfccb8773120d7819b43f3d468b9567c70,,testControllerUpdate(),4,0,"@org.junit.Test public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); wrapper.registerCallback(mTestCbs); com.android.bluetooth.avrcp.MediaController mUpdatedController = mock(com.android.bluetooth.avrcp.MediaController.class); doReturn(mTestState.build()).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, ""New Title""); doReturn(mTestMetadata.build()).when(mUpdatedController).getMetadata(); doReturn(null).when(mMockController).getQueue(); wrapper.updateMediaController(mUpdatedController); verify(mUpdatedController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, never()).mediaUpdatedCallback(any()); }",3c9971f61be535ae40774caec967fadd9869c08c,testControllerUpdate(),14796,251,260
629942,src_java_com_android_internal_telephony_CarrierIdentifier.java,9.0,"private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierName] from:"" + (mCarrierName)) + "" to:"") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierId] from:"" + (mCarrierId)) + "" to:"") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log((((""[updateCarrierIdAndName] cid:"" + (mCarrierId)) + "" name:"") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierIdentification.CID, mCarrierId); cv.put(CarrierIdentification.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierIdentification.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }",1813efcb07275c21101a4e777ebbdc8e272e5368,"private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierName] from:"" + (mCarrierName)) + "" to:"") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierId] from:"" + (mCarrierId)) + "" to:"") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log((((""[updateCarrierIdAndName] cid:"" + (mCarrierId)) + "" name:"") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, mCarrierId); cv.put(CarrierId.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }",1e061fa6551d8bb367d941490c1f3da27c761b1d,"updateCarrierIdAndName(int,java.lang.String)","updateCarrierIdAndName(int,java.lang.String)",2,9,"private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierName] from:"" + (mCarrierName)) + "" to:"") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd((((""[updateCarrierId] from:"" + (mCarrierId)) + "" to:"") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log((((""[updateCarrierIdAndName] cid:"" + (mCarrierId)) + "" name:"") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, mCarrierId); cv.put(CarrierId.CARRIER_NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }",90681696cf37ddd8dd4c978667a798f3dade68cc,"updateCarrierIdAndName(int,java.lang.String)",341329,383,387
44005,luni_src_test_java_org_apache_harmony_xnet_provider_jsse_NativeCryptoTest.java,64.0,"public void test_EVP_CipherInit_ex_Null_Failure() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext context = new org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CIPHER_CTX_new()); int evpCipher = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_cipherbyname(""aes-128-ecb""); try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, evpCipher, null, null, true); fail(""Null context should throw NullPointerException""); } catch (java.lang.NullPointerException expected) { } try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, true); fail(""Null evpCipher should throw NullPointerException""); } catch (java.lang.NullPointerException expected) { } }",f5ebec03a041bdb0ac3fc28bbf37ed27c4ce4d5e,"public void test_EVP_CipherInit_ex_Null_Failure() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext context = new org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CIPHER_CTX_new()); int evpCipher = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_cipherbyname(""aes-128-ecb""); try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, evpCipher, null, null, true); fail(""Null context should throw NullPointerException""); } catch (java.lang.NullPointerException expected) { } }",be4476a11f5339aa6b386be2d9dd34bf207a83da,test_EVP_CipherInit_ex_Null_Failure(),test_EVP_CipherInit_ex_Null_Failure(),2,64,"public void test_EVP_CipherInit_ex_Null_Failure() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext context = new org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CIPHER_CTX_new()); int evpCipher = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_cipherbyname(""aes-128-ecb""); try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, evpCipher, null, null, true); fail(""Null context should throw NullPointerException""); } catch (java.lang.NullPointerException expected) { } org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), evpCipher, null, null, true); org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, true); org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), evpCipher, null, null, false); org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, false); }",9c426cb002d3396387f0d9abb347b4077c223f4b,test_EVP_CipherInit_ex_Null_Failure(),162649,215,409
92757,luni_src_main_java_java_nio_MemoryBlock.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isValid() { return (address) != 0; },9a72cd123ee090dacb5056baaeaf02bb17154882,,isValid(),3,26,public boolean isFreed() { return (address) == 0; },69aec8792650afdb8712870ef4ed00c1e16fc582,isFreed(),35190,12,14
470499,telephony_java_android_telephony_mbms_vendor_MbmsStreamingServiceBase.java,18.0,"@java.lang.Override public final int initialize(final android.telephony.mbms.IMbmsStreamingManagerCallback callback, final int subscriptionId) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); callback.asBinder().linkToDeath(new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, subscriptionId); } }, 0); return initialize(new android.telephony.mbms.MbmsStreamingManagerCallback() { @java.lang.Override public void onError(int errorCode, java.lang.String message) { try { callback.error(errorCode, message); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services) { try { callback.streamingServicesUpdated(services); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onMiddlewareReady() { try { callback.middlewareReady(); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } }, subscriptionId); }",7d1849f7d8dd1dc750f9b676bed0e510ffb8437b,"@java.lang.Override public final int initialize(final android.telephony.mbms.IMbmsStreamingManagerCallback callback, final int subscriptionId) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); callback.asBinder().linkToDeath(new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, subscriptionId); } }, 0); return initialize(new android.telephony.mbms.MbmsStreamingSessionCallback() { @java.lang.Override public void onError(int errorCode, java.lang.String message) { try { callback.onError(errorCode, message); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services) { try { callback.onStreamingServicesUpdated(services); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onMiddlewareReady() { try { callback.onMiddlewareReady(); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } }, subscriptionId); }",f05eb4c18b3155e521a4f755787a94f1a31ca4ad,"initialize(android.telephony.mbms.IMbmsStreamingManagerCallback,int)","initialize(android.telephony.mbms.IMbmsStreamingManagerCallback,int)",5,2,"@java.lang.Override public final int initialize(final android.telephony.mbms.IMbmsStreamingSessionCallback callback, final int subscriptionId) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); callback.asBinder().linkToDeath(new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, subscriptionId); } }, 0); return initialize(new android.telephony.mbms.MbmsStreamingSessionCallback() { @java.lang.Override public void onError(int errorCode, java.lang.String message) { try { callback.onError(errorCode, message); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services) { try { callback.onStreamingServicesUpdated(services); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onMiddlewareReady() { try { callback.onMiddlewareReady(); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } }, subscriptionId); }",da7beec546bdecc8744ec28b48147522a0912178,"initialize(android.telephony.mbms.IMbmsStreamingSessionCallback,int)",14247,296,296
137351,rs_java_android_renderscript_RenderScript.java,136.0,"synchronized void nAllocationRead1D(long id, int off, int mip, int count, java.lang.Object d, int sizeBytes, android.renderscript.Element.DataType dt) { validate(); rsnAllocationRead1D(mContext, id, off, mip, count, d, sizeBytes, dt.mID); }",e72d1fe0567c02ff10afe895bb4ff1b091005e9e,"synchronized void nAllocationRead1D(long id, int off, int mip, int count, java.lang.Object d, int sizeBytes, android.renderscript.Element.DataType dt, int mSize, boolean usePadding, byte[] buffer) { validate(); rsnAllocationRead1D(mContext, id, off, mip, count, d, sizeBytes, dt.mID, mSize, usePadding, buffer); }",42dbf4284fc187b0d814c987e0f4e11737c8e76d,"nAllocationRead1D(long,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType)","nAllocationRead1D(long,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType,int,boolean,byte[])",5,256,"synchronized void nAllocationRead1D(long id, int off, int mip, int count, java.lang.Object d, int sizeBytes, android.renderscript.Element.DataType dt, int mSize, boolean usePadding) { validate(); rsnAllocationRead1D(mContext, id, off, mip, count, d, sizeBytes, dt.mID, mSize, usePadding); }",3d31f545b38fa8f6e02a0e61ccc21406fdd390ba,"nAllocationRead1D(long,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType,int,boolean)",432385,96,90
51974,src_com_android_providers_telephony_TelephonyProvider.java,17.0,"@java.lang.Override public void onCreate(android.database.sqlite.SQLiteDatabase db) { db.execSQL(((((((((((((((((((((((""CREATE TABLE "" + (com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE)) + ""(_id INTEGER PRIMARY KEY,"") + ""name TEXT,"") + ""numeric TEXT,"") + ""mcc TEXT,"") + ""mnc TEXT,"") + ""apn TEXT,"") + ""user TEXT,"") + ""server TEXT,"") + ""password TEXT,"") + ""proxy TEXT,"") + ""port TEXT,"") + ""mmsproxy TEXT,"") + ""mmsport TEXT,"") + ""mmsc TEXT,"") + ""authtype INTEGER,"") + ""type TEXT,"") + ""current INTEGER,"") + ""protocol TEXT,"") + ""roaming_protocol TEXT,"") + ""carrier_enabled BOOLEAN,"") + ""bearer INTEGER);"")); initDatabase(db); }",f16edacba5763224c802579b31ee31e60b09f956,"@java.lang.Override public void onCreate(android.database.sqlite.SQLiteDatabase db) { db.execSQL(((((((((((((((((((((((((((""CREATE TABLE "" + (com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE)) + ""(_id INTEGER PRIMARY KEY,"") + ""name TEXT,"") + ""numeric TEXT,"") + ""mcc TEXT,"") + ""mnc TEXT,"") + ""apn TEXT,"") + ""user TEXT,"") + ""server TEXT,"") + ""password TEXT,"") + ""proxy TEXT,"") + ""port TEXT,"") + ""mmsproxy TEXT,"") + ""mmsport TEXT,"") + ""mmsc TEXT,"") + ""authtype INTEGER,"") + ""type TEXT,"") + ""current INTEGER,"") + ""protocol TEXT,"") + ""roaming_protocol TEXT,"") + ""carrier_enabled BOOLEAN,"") + ""bearer INTEGER,"") + ""spn TEXT,"") + ""imsi TEXT,"") + ""gid TEXT,"") + ""mvno_type TEXT);"")); initDatabase(db); }",6f53f670e112774b5619134dec091376066f2369,onCreate(android.database.sqlite.SQLiteDatabase),onCreate(android.database.sqlite.SQLiteDatabase),4,17,"@java.lang.Override public void onCreate(android.database.sqlite.SQLiteDatabase db) { db.execSQL(((((((((((((((((((((((((""CREATE TABLE "" + (com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE)) + ""(_id INTEGER PRIMARY KEY,"") + ""name TEXT,"") + ""numeric TEXT,"") + ""mcc TEXT,"") + ""mnc TEXT,"") + ""apn TEXT,"") + ""user TEXT,"") + ""server TEXT,"") + ""password TEXT,"") + ""proxy TEXT,"") + ""port TEXT,"") + ""mmsproxy TEXT,"") + ""mmsport TEXT,"") + ""mmsc TEXT,"") + ""authtype INTEGER,"") + ""type TEXT,"") + ""current INTEGER,"") + ""protocol TEXT,"") + ""roaming_protocol TEXT,"") + ""carrier_enabled BOOLEAN,"") + ""bearer INTEGER,"") + ""mvno_type TEXT,"") + ""mvno_match_data TEXT);"")); initDatabase(db); }",4d67db9663a22e32d2c41c90f8e2234033eab0f4,onCreate(android.database.sqlite.SQLiteDatabase),495849,244,231
147129,luni_src_main_java_java_lang_System.java,53.0,public static native java.lang.String mapLibraryName(java.lang.String nickname);,61b4cea97ccd5c11930e58af8899db5f192e1fbd,"public static java.lang.String mapLibraryName(java.lang.String nickname) { return (""lib"" + nickname) + "".so""; }",e04fb0d98eafc48413df7754374f6a64121639ab,mapLibraryName(java.lang.String),mapLibraryName(java.lang.String),2,53,"public static java.lang.String mapLibraryName(java.lang.String nickname) { if (nickname == null) { throw new java.lang.NullPointerException(""nickname == null""); } return (""lib"" + nickname) + "".so""; }",0c0b2b8f84d734c7370f2fdf53f805124de94969,mapLibraryName(java.lang.String),488412,35,56
91995,luni_src_main_java_libcore_io_Posix.java,90.0,public native void tcdrain(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,761d9baa41e09b97f3ba18ec600c7d4e772bcd7f,public native void tcdrain(java.io.FileDescriptor fd) throws android.os.ErrnoException;,0e9e8d14e73364430c6a2d31cc4cd5ff5ca574c1,tcdrain(java.io.FileDescriptor),tcdrain(java.io.FileDescriptor),3,90,public native void tcdrain(java.io.FileDescriptor fd) throws android.system.ErrnoException;,a1e09394844994986e5e9f8c7c6b85565ac7213d,tcdrain(java.io.FileDescriptor),169928,23,23
579565,src_java_com_android_internal_telephony_RIL.java,65.0,"@java.lang.Override public void getNetworkSelectionMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNetworkSelectionMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getNetworkSelectionMode"", e); } } }",cf68cf56aab393351ec07e74a2a429f209a87cc4,"@java.lang.Override public void getNetworkSelectionMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNetworkSelectionMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getNetworkSelectionMode"", e); } } }",a3b11634538287a87b3ddbe3d694ffba54563565,getNetworkSelectionMode(android.os.Message),getNetworkSelectionMode(android.os.Message),3,65,"@java.lang.Override public void getNetworkSelectionMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNetworkSelectionMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getNetworkSelectionMode"", e); } } }",cf68cf56aab393351ec07e74a2a429f209a87cc4,getNetworkSelectionMode(android.os.Message),89284,205,201
318132,PMC_src_com_android_pmc_GattClientListener.java,,,,"@java.lang.Override public void onConnectionStateChange(android.bluetooth.BluetoothGatt gatt, int status, int newState) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (""onConnectionStateChange "" + status)); if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (((""State Connected to mac address "" + (gatt.getDevice().getAddress())) + "" status "") + status)); mBluetoothGatt.discoverServices(); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (((""State Disconnected from mac address "" + (gatt.getDevice().getAddress())) + "" status "") + status)); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (((""State Connecting to mac address "" + (gatt.getDevice().getAddress())) + "" status "") + status)); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTING)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (((""State Disconnecting from mac address "" + (gatt.getDevice().getAddress())) + "" status "") + status)); } }",ebfccf8234d26387877bb019e89e87e4a46d4d78,,"onConnectionStateChange(android.bluetooth.BluetoothGatt,int,int)",6,8,"@java.lang.Override public void onConnectionStateChange(android.bluetooth.BluetoothGatt gatt, int status, int newState) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (""onConnectionStateChange "" + status)); if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (((""State Connected to mac address "" + (gatt.getDevice().getAddress())) + "" status "") + status)); mBluetoothGatt.discoverServices(); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (((""State Disconnected from mac address "" + (gatt.getDevice().getAddress())) + "" status "") + status)); try { mBluetoothGatt.close(); } catch (java.lang.Exception e) { android.util.Log.e(com.android.pmc.GattClientListener.TAG, (""Close Gatt: "" + e)); } mBluetoothGatt = null; } else if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (((""State Connecting to mac address "" + (gatt.getDevice().getAddress())) + "" status "") + status)); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTING)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, (((""State Disconnecting from mac address "" + (gatt.getDevice().getAddress())) + "" status "") + status)); } }",4ce50c622a197b6f5255e9757b487498aefedd61,"onConnectionStateChange(android.bluetooth.BluetoothGatt,int,int)",63137,346,402
570083,tests_telephonytests_src_android_telephony_ims_ImsRegistrationTests.java,2.0,"@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.internal.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }",f4424f485bd05764d7d0174cc79226126deb10a2,"@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }",633bf9e28bf686c81271b4b18984d1ecec8b442a,testRegistrationCallbackSendCurrentStateDisconnected(),testRegistrationCallbackSendCurrentStateDisconnected(),7,2,"@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }",3f52e1de7aace1c665432d42d2d892c997a94492,testRegistrationCallbackSendCurrentStateDisconnected(),310264,177,137
64463,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_Support_Format.java,2.0,"protected void t_FormatWithField(int count, java.text.Format format, java.lang.Object object, java.lang.String text, java.text.Format.Field field, int begin, int end) { java.lang.StringBuffer buffer = new java.lang.StringBuffer(); java.text.FieldPosition pos = new java.text.FieldPosition(field); format.format(object, buffer, pos); if (text == null) { assertEquals(((""Test "" + count) + "": incorrect formatted text""), this.text, buffer.toString()); } else { assertEquals(((""Test "" + count) + "": incorrect formatted text""), text, buffer.toString()); } assertEquals((((""Test "" + count) + "": incorrect begin index for field "") + field), begin, pos.getBeginIndex()); assertEquals((((""Test "" + count) + "": incorrect end index for field "") + field), end, pos.getEndIndex()); }",35991f973044417fea3829d7668b60661125d450,"protected void t_FormatWithField(int count, java.text.Format format, java.lang.Object object, java.lang.String text, java.text.Format.Field field, int begin, int end) { java.lang.StringBuffer buffer = new java.lang.StringBuffer(); java.text.FieldPosition pos = new java.text.FieldPosition(field); format.format(object, buffer, pos); if (text == null) { assertEquals(((""Test "" + count) + "": incorrect formatted text""), this.text, buffer.toString()); } else { assertEquals(((""Test "" + count) + "": incorrect formatted text""), text, buffer.toString()); } if ((begin != (pos.getBeginIndex())) || (end != (pos.getEndIndex()))) { assertEquals(((begin + "".."") + end), (((pos.getBeginIndex()) + "".."") + (pos.getEndIndex()))); } }",2ea0c5d505b85d3a71449110158b0bc3d3c4ff60,"t_FormatWithField(int,java.text.Format,java.lang.Object,java.lang.String,java.text.Format$Field,int,int)","t_FormatWithField(int,java.text.Format,java.lang.Object,java.lang.String,java.text.Format$Field,int,int)",6,1,"protected void t_FormatWithField(int count, java.text.Format format, java.lang.Object object, java.lang.String text, java.text.Format.Field field, int begin, int end) { java.lang.StringBuffer buffer = new java.lang.StringBuffer(); java.text.FieldPosition pos = new java.text.FieldPosition(field); format.format(object, buffer, pos); if (text == null) { assertEquals(((""Test "" + count) + "": incorrect formatted text""), this.text, buffer.toString()); } else { assertEquals(text, buffer.toString()); } if ((begin != (pos.getBeginIndex())) || (end != (pos.getEndIndex()))) { assertEquals(((((field + "" "") + begin) + "".."") + end), (((((pos.getFieldAttribute()) + "" "") + (pos.getBeginIndex())) + "".."") + (pos.getEndIndex()))); } }",4d20b8bf1e8a52d4c4d6c585bf294ba5b8caa4be,"t_FormatWithField(int,java.text.Format,java.lang.Object,java.lang.String,java.text.Format$Field,int,int)",115746,201,209
15997,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_device_DeviceConnection.java,,,,public java.io.BufferedReader getInputStream() throws java.io.IOException { if ((in) != null) { return in; } return in = new java.io.BufferedReader(new java.io.InputStreamReader(socketChannel.socket().getInputStream())); },5c1f7ca7cda3eaddf4dc7c2832e73c5fb599893e,,getInputStream(),4,2,public java.io.BufferedReader getInputStream() throws java.io.IOException { if ((in) == null) { in = new java.io.BufferedReader(new java.io.InputStreamReader(socketChannel.socket().getInputStream())); } return in; },ecb571a254a9337ba4e427d12a340fc2c11ba5c3,getInputStream(),125350,55,54
454618,src_com_android_bluetooth_gatt_ScanManager.java,33.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void handleImportanceChange(com.android.bluetooth.gatt.ScanManager.UidImportance imp) { if (imp == null) { return; } int uid = imp.uid; int importance = imp.importance; if (importance <= (ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND_SERVICE)) { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if (((client.appUid) == uid) && ((client.passiveSettings) != null)) { client.settings = client.passiveSettings; client.passiveSettings = null; } } } else { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if ((client.appUid) == uid) { client.passiveSettings = client.settings; android.bluetooth.le.ScanSettings.Builder builder = new android.bluetooth.le.ScanSettings.Builder(); android.bluetooth.le.ScanSettings settings = client.settings; builder.setScanMode(ScanSettings.SCAN_MODE_LOW_POWER); builder.setCallbackType(settings.getCallbackType()); builder.setScanResultType(settings.getScanResultType()); builder.setReportDelay(settings.getReportDelayMillis()); builder.setNumOfMatches(settings.getNumOfMatches()); client.settings = builder.build(); } } } mScanNative.configureRegularScanParams(); },0513198c9b53c3fb29772d7db1a449b31545c042,,handleImportanceChange(com.android.bluetooth.gatt.ScanManager$UidImportance),6,20,private void handleImportanceChange(com.android.bluetooth.gatt.ScanManager.UidImportance imp) { if (imp == null) { return; } int uid = imp.uid; int importance = imp.importance; boolean updatedScanParams = false; if (importance <= (ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND_SERVICE)) { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if (((client.appUid) == uid) && ((client.passiveSettings) != null)) { client.settings = client.passiveSettings; client.passiveSettings = null; updatedScanParams = true; } } } else { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if (((client.appUid) == uid) && (!(mScanNative.isOpportunisticScanClient(client)))) { client.passiveSettings = client.settings; android.bluetooth.le.ScanSettings.Builder builder = new android.bluetooth.le.ScanSettings.Builder(); android.bluetooth.le.ScanSettings settings = client.settings; builder.setScanMode(ScanSettings.SCAN_MODE_LOW_POWER); builder.setCallbackType(settings.getCallbackType()); builder.setScanResultType(settings.getScanResultType()); builder.setReportDelay(settings.getReportDelayMillis()); builder.setNumOfMatches(settings.getNumOfMatches()); client.settings = builder.build(); updatedScanParams = true; } } } if (updatedScanParams) { mScanNative.configureRegularScanParams(); } },cf5d777e9c6d50151c33e97a7556961f0c0a0991,handleImportanceChange(com.android.bluetooth.gatt.ScanManager$UidImportance),375895,312,354
116423,src_com_android_services_telephony_TelephonyConnectionService.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void addConnectionToConferenceController(com.android.services.telephony.TelephonyConnection connection) { if (connection.isImsConnection()) { com.android.services.telephony.Log.d(this, (""Adding IMS connection to conference controller: "" + connection)); mImsConferenceController.add(connection); } else { int phoneType = connection.getCall().getPhone().getPhoneType(); if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_GSM)) { com.android.services.telephony.Log.d(this, (""Adding GSM connection to conference controller: "" + connection)); mTelephonyConferenceController.add(connection); } else if ((phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) && (connection instanceof com.android.services.telephony.CdmaConnection)) { com.android.services.telephony.Log.d(this, (""Adding CDMA connection to conference controller: "" + connection)); mCdmaConferenceController.add(((com.android.services.telephony.CdmaConnection) (connection))); } } }",05c611eeadf7173b49fd08d59e30460cfcc45e28,,addConnectionToConferenceController(com.android.services.telephony.TelephonyConnection),2,11,"public void addConnectionToConferenceController(com.android.services.telephony.TelephonyConnection connection) { if (connection.isImsConnection()) { com.android.services.telephony.Log.d(this, (""Adding IMS connection to conference controller: "" + connection)); mTelephonyConferenceController.add(connection); } else { int phoneType = connection.getCall().getPhone().getPhoneType(); if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_GSM)) { com.android.services.telephony.Log.d(this, (""Adding GSM connection to conference controller: "" + connection)); mTelephonyConferenceController.add(connection); } else if ((phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) && (connection instanceof com.android.services.telephony.CdmaConnection)) { com.android.services.telephony.Log.d(this, (""Adding CDMA connection to conference controller: "" + connection)); mCdmaConferenceController.add(((com.android.services.telephony.CdmaConnection) (connection))); } } }",dc8a7d37c10b3aa2b7d00c04108c0e96019d0b2c,addConnectionToConferenceController(com.android.services.telephony.TelephonyConnection),463733,250,252
107813,jack_src_com_android_jack_ir_ast_JStatement.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isValidParent(@javax.annotation.CheckForNull com.android.jack.ir.ast.JNode parent) { return (parent instanceof com.android.jack.ir.ast.JStatement) || (parent instanceof com.android.jack.ir.ast.JAbstractMethodBody); },d3ed04a85bb4b5734d81a7a0fd0c923cc984aca3,,isValidParent(com.android.jack.ir.ast.JNode),6,1,"@java.lang.Override public void checkValidity() { if (!(((parent) instanceof com.android.jack.ir.ast.JStatement) || ((parent) instanceof com.android.jack.ir.ast.JAbstractMethodBody))) { throw new com.android.jack.ir.InternalCompilerException(this, ""Invalid parent""); } }",087dd50ccd61b9b65f5097ea143af85d7c53f1eb,checkValidity(),100610,68,76
340832,src_com_android_server_telecom_InCallController.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onRttConnectionFailure(com.android.server.telecom.Call call) { notifyRttFailure(call); updateCall(call, false, true); }",f94408ab8a666588d74df223cb048ba2cdb92cb1,,onRttConnectionFailure(com.android.server.telecom.Call),8,87,"@java.lang.Override public void onRttInitiationFailure(com.android.server.telecom.Call call, int reason) { notifyRttInitiationFailure(call, reason); updateCall(call, false, true); }",94d8c79a9f96682a86deb2189833430dd9c7bb76,"onRttInitiationFailure(com.android.server.telecom.Call,int)",219822,45,53
146403,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_managed_adaptor_AndroidConfigAdaptor.java,,,,"@java.lang.Override public java.util.Collection<com.android.builder.model.SigningConfig> getSigningConfigs() { return com.google.common.collect.ImmutableList.copyOf(com.google.common.collect.Iterables.transform(model.getSigningConfigs(), new com.google.common.base.Function<com.android.build.gradle.managed.SigningConfig, com.android.builder.model.SigningConfig>() { @java.lang.Override public com.android.build.gradle.managed.SigningConfig apply(com.android.build.gradle.managed.SigningConfig signingConfig) { return new com.android.build.gradle.managed.SigningConfigAdaptor(signingConfig); } })); }",96ce5a59ff47786c67e489e011f7aaf93d6de2b1,,getSigningConfigs(),11,26,"@java.lang.Override public java.util.Collection<com.android.builder.model.SigningConfig> getSigningConfigs() { return com.google.common.collect.ImmutableList.copyOf(com.google.common.collect.Iterables.transform(model.getSigningConfigs(), new com.google.common.base.Function<com.android.build.gradle.managed.SigningConfig, com.android.builder.model.SigningConfig>() { @java.lang.Override public com.android.build.gradle.managed.SigningConfig apply(com.android.build.gradle.managed.SigningConfig signingConfig) { return new com.android.build.gradle.managed.adaptor.SigningConfigAdaptor(signingConfig); } })); }",eb62ba5544e01648393beefb04e17eb736b1a499,getSigningConfigs(),236400,158,160
577277,tests_net_java_android_net_NetworkCapabilitiesTest.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testParcelNetworkCapabilities() { final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(3000, 4000)); final android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setAllowedUids(uids).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertEqualsThroughMarshalling(netCap); }",4c3d82ded7ad321e42a60d26f519536ec05f34c1,,testParcelNetworkCapabilities(),13,0,"@org.junit.Test public void testParcelNetworkCapabilities() { final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(3000, 4000)); final android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setUids(uids).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertEqualsThroughMarshalling(netCap); }",cb06141b1610d549546e3b489c0d557fe959f1d3,testParcelNetworkCapabilities(),122899,168,167
41115,src_java_com_android_internal_telephony_cdma_RuimFileHandler.java,3.0,protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_SMS : case EF_CST : case EF_RUIM_SPN : return (MF_SIM) + (DF_CDMA); } return getCommonIccEFPath(efid); },6e34bfc89e6f9c646b6610b2bfcf2ee7627b5395,protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_SMS : case EF_CST : case EF_RUIM_SPN : case EF_CSIM_LI : case EF_CSIM_MDN : case EF_CSIM_IMSIM : case EF_CSIM_CDMAHOME : case EF_CSIM_EPRL : return (MF_SIM) + (DF_CDMA); } return getCommonIccEFPath(efid); },5a6aae4b2c873d9f312cfcc9e3a49cc61407f445,getEFPath(int),getEFPath(int),22,1,@java.lang.Override protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_SMS : case EF_CST : case EF_RUIM_SPN : case EF_CSIM_LI : case EF_CSIM_MDN : case EF_CSIM_IMSIM : case EF_CSIM_CDMAHOME : case EF_CSIM_EPRL : return (MF_SIM) + (DF_CDMA); } return getCommonIccEFPath(efid); },768758ee58475c55e443186382a20331d207c065,getEFPath(int),499297,132,138
113821,src_com_google_gct_idea_elysium_UserSelector.java,,,,"@java.lang.Override public void showPopup(com.intellij.ui.awt.RelativePoint showTarget) { if (((myJBPopup) == null) || (myJBPopup.isDisposed())) { com.google.gct.idea.elysium.UserSelector.PopupPanel popupPanel = new com.google.gct.idea.elysium.UserSelector.PopupPanel(); popupPanel.initializeContent(getText()); com.intellij.openapi.ui.popup.ComponentPopupBuilder popup = com.intellij.openapi.ui.popup.JBPopupFactory.getInstance().createComponentPopupBuilder(popupPanel, popupPanel.getInitialFocus()); myJBPopup = popup.createPopup(); } if (!(myJBPopup.isVisible())) { myJBPopup.show(showTarget); } }",98378164573e1361eed21c94a959676afff7d59a,,showPopup(com.intellij.ui.awt.RelativePoint),6,4,"@java.lang.Override public void showPopup(com.intellij.ui.awt.RelativePoint showTarget) { if (((myPopup) == null) || (myPopup.isDisposed())) { com.google.gct.idea.elysium.UserSelector.PopupPanel popupPanel = new com.google.gct.idea.elysium.UserSelector.PopupPanel(); popupPanel.initializeContent(getText()); com.intellij.openapi.ui.popup.ComponentPopupBuilder popup = com.intellij.openapi.ui.popup.JBPopupFactory.getInstance().createComponentPopupBuilder(popupPanel, popupPanel.getInitialFocus()); myPopup = popup.createPopup(); } if (!(myPopup.isVisible())) { myPopup.show(showTarget); } }",49832c6304debb0ca31f5d4a5d454f47942fa71a,showPopup(com.intellij.ui.awt.RelativePoint),516044,177,167
602213,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectedEvent); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getConnectedDevices()); com.android.bluetooth.hfp.HeadsetStackEvent disconnectEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(disconnectEvent); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, disconnectEvent); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); }",4f93f784436e113b3df9e9ab78af36d7f90d0d78,,testMessageFromNative_deviceConnected(),8,6,"@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectedEvent); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getConnectedDevices()); com.android.bluetooth.hfp.HeadsetStackEvent disconnectEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(disconnectEvent); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, disconnectEvent); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); }",bbae4deed3b26b91c037310394b34bdd67cc16ed,testMessageFromNative_deviceConnected(),230037,451,469
132350,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_app_LargeTestProject.java,1.0,"private static void createGradleProperties(@com.android.annotations.NonNull java.io.File location) throws java.io.IOException { com.google.common.io.Files.write((""org.gradle.jvmargs=-Xmx6096m -XX:MaxPermSize=1024m\n"" + ""org.gradle.daemon=true\n""), new java.io.File(location, ""gradle.properties""), java.nio.charset.Charset.defaultCharset()); }",12b89a29f5d91e4544b97727074b9daae1951de5,"private static void createGradleProperties(@com.android.annotations.NonNull java.io.File location) throws java.io.IOException { com.google.common.io.Files.write((""org.gradle.jvmargs=-Xmx8096m -XX:MaxPermSize=2048m\n"" + ""org.gradle.daemon=true\n""), new java.io.File(location, ""gradle.properties""), java.nio.charset.Charset.defaultCharset()); }",552e871b4f15ceaacd85c5a8cd104960a2eb1d8a,createGradleProperties(java.io.File),createGradleProperties(java.io.File),6,1,"private static void createGradleProperties(@com.android.annotations.NonNull java.io.File location) throws java.io.IOException { com.google.common.io.Files.write((""org.gradle.jvmargs=-Xmx6096m -XX:MaxPermSize=1024m\n"" + ""org.gradle.daemon=true\n""), new java.io.File(location, ""gradle.properties""), java.nio.charset.Charset.defaultCharset()); }",12b89a29f5d91e4544b97727074b9daae1951de5,createGradleProperties(java.io.File),2831,100,100
81416,tests_tests_renderscript_src_android_renderscript_cts_TestSinh.java,,,,"private void checkSinhFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testSinhFloat2(in, out); verifyResultsSinhFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testSinhFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testSinhFloat2(in, out); verifyResultsSinhFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testSinhFloat2: "" + (e.toString()))); } }",88f1ed96a5793059cc6f1b25ccfc5948a1c42deb,,checkSinhFloat2(),9,9,"private void checkSinhFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 5294606753004842336L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testSinhFloat2Float2(in, out); verifyResultsSinhFloat2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testSinhFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testSinhFloat2Float2(in, out); verifyResultsSinhFloat2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testSinhFloat2Float2: "" + (e.toString()))); } }",60c74b7afcb837f3694bec4900adff09f4602aea,checkSinhFloat2Float2(),142623,330,314
583630,src_com_android_bips_discovery_Discovery.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Collection<com.android.bips.discovery.DiscoveredPrinter> getSavedPrinters() { return getChildren().stream().filter(( child) -> child != (this)).flatMap(( child) -> child.getSavedPrinters().stream()).collect(java.util.stream.Collectors.toList()); },bb5a676e6e20b4ee27feac9f254860733ae4006b,,getSavedPrinters(),4,9,public java.util.Collection<com.android.bips.discovery.DiscoveredPrinter> getSavedPrinters() { java.util.List<com.android.bips.discovery.DiscoveredPrinter> printers = new java.util.ArrayList<>(); for (com.android.bips.discovery.Discovery child : getChildren()) { if (child != (this)) { printers.addAll(child.getSavedPrinters()); } } return printers; },916767aee8268d8eec2150b56a098ed4edb7438b,getSavedPrinters(),33269,72,99
21722,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_manifest_model_UiManifestElementNode.java,1.0,"@java.lang.Override public java.lang.String getShortDescription() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData target = getAndroidTarget(); com.android.ide.eclipse.adt.internal.editors.manifest.descriptors.AndroidManifestDescriptors manifestDescriptors = null; if (target != null) { manifestDescriptors = target.getManifestDescriptors(); } if ((((manifestDescriptors != null) && ((getXmlNode()) != null)) && ((getXmlNode()) instanceof org.w3c.dom.Element)) && (getXmlNode().hasAttributes())) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc = getDescriptor(); if ((desc != (manifestDescriptors.getManifestElement())) && (desc != (manifestDescriptors.getApplicationElement()))) { org.w3c.dom.Element elem = ((org.w3c.dom.Element) (getXmlNode())); java.lang.String attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_NAME_ATTR); if ((attr == null) || ((attr.length()) == 0)) { attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_LABEL_ATTR); } if ((attr != null) && ((attr.length()) > 0)) { return java.lang.String.format(""%1$s (%2$s)"", attr, getDescriptor().getUiName()); } } } return java.lang.String.format(""%1$s"", getDescriptor().getUiName()); }",a794eaaa8007abc1ff2ff0e730a509e6dcbd2a87,"@java.lang.Override public java.lang.String getShortDescription() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData target = getAndroidTarget(); com.android.ide.eclipse.adt.internal.editors.manifest.descriptors.AndroidManifestDescriptors manifestDescriptors = null; if (target != null) { manifestDescriptors = target.getManifestDescriptors(); } java.lang.String name = getDescriptor().getUiName(); if ((((manifestDescriptors != null) && ((getXmlNode()) != null)) && ((getXmlNode()) instanceof org.w3c.dom.Element)) && (getXmlNode().hasAttributes())) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc = getDescriptor(); if ((desc != (manifestDescriptors.getManifestElement())) && (desc != (manifestDescriptors.getApplicationElement()))) { org.w3c.dom.Element elem = ((org.w3c.dom.Element) (getXmlNode())); java.lang.String attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_NAME_ATTR); if ((attr == null) || ((attr.length()) == 0)) { attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_LABEL_ATTR); } if ((attr != null) && ((attr.length()) > 0)) { if ((attr.indexOf(name)) >= 0) { return attr; } else { return java.lang.String.format(""%1$s (%2$s)"", attr, name); } } } } return java.lang.String.format(""%1$s"", name); }",ea362979cc91ef1780d9977ccae85256259ddb6f,getShortDescription(),getShortDescription(),2,1,"@java.lang.Override public java.lang.String getShortDescription() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData target = getAndroidTarget(); com.android.ide.eclipse.adt.internal.editors.manifest.descriptors.AndroidManifestDescriptors manifestDescriptors = null; if (target != null) { manifestDescriptors = target.getManifestDescriptors(); } java.lang.String name = getDescriptor().getUiName(); if ((((manifestDescriptors != null) && ((getXmlNode()) != null)) && ((getXmlNode()) instanceof org.w3c.dom.Element)) && (getXmlNode().hasAttributes())) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc = getDescriptor(); if ((desc != (manifestDescriptors.getManifestElement())) && (desc != (manifestDescriptors.getApplicationElement()))) { org.w3c.dom.Element elem = ((org.w3c.dom.Element) (getXmlNode())); java.lang.String attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_NAME_ATTR); if ((attr == null) || ((attr.length()) == 0)) { attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_LABEL_ATTR); } if ((attr != null) && ((attr.length()) > 0)) { if (attr.contains(name)) { return attr; } else { return java.lang.String.format(""%1$s (%2$s)"", attr, name); } } } } return java.lang.String.format(""%1$s"", name); }",d3f42756e72676fdcc7e89eebde4acb5cf5017b8,getShortDescription(),311672,383,380
49623,ddmlib_src_main_java_com_android_ddmlib_HandleViewDebug.java,,,,"public static void captureView(com.android.ddmlib.Client client, java.lang.String viewRoot, java.lang.String view, com.android.ddmlib.HandleViewDebug.CaptureViewHandler handler) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendJdwpPacket(client, com.android.ddmlib.HandleViewDebug.CHUNK_VUCV, viewRoot, view, handler); }",eef0de7dbe9c462a8525721e05886206b2d10d11,,"captureView(com.android.ddmlib.Client,java.lang.String,java.lang.String,com.android.ddmlib.HandleViewDebug$CaptureViewHandler)",6,8,"public static void captureView(@com.android.annotations.NonNull com.android.ddmlib.Client client, @com.android.annotations.NonNull java.lang.String viewRoot, @com.android.annotations.NonNull java.lang.String view, @com.android.annotations.NonNull com.android.ddmlib.HandleViewDebug.ViewDumpHandler handler) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendViewOpPacket(client, com.android.ddmlib.HandleViewDebug.VUOP_CAPTURE_VIEW, viewRoot, view, handler); }",ff464303b882d3bff203d8ecb042b977866379e5,"captureView(com.android.ddmlib.Client,java.lang.String,java.lang.String,com.android.ddmlib.HandleViewDebug$ViewDumpHandler)",49844,102,134
405792,tests_net_java_com_android_server_connectivity_tethering_OffloadControllerTest.java,,,,"@org.junit.Test public void testSystemPropertyAllowsStart() { setupFunctioningHardwareInterface(); when(mSystemProperties.getBoolean(eq(com.android.server.connectivity.tethering.OffloadController.OFFLOAD_ENABLED_SYSPROP_KEY), anyBoolean())).thenReturn(true); final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mSystemProperties, new android.net.util.SharedLog(""test"")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware, mSystemProperties); inOrder.verify(mSystemProperties, times(1)).getBoolean(com.android.server.connectivity.tethering.OffloadController.OFFLOAD_ENABLED_SYSPROP_KEY, true); inOrder.verify(mHardware, times(1)).initOffloadConfig(); inOrder.verify(mHardware, times(1)).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }",67501237e2f0c0c9aafddc99daef7abc29c503ad,,testSystemPropertyAllowsStart(),2,2,"@org.junit.Test public void testSettingsAllowsStart() { setupFunctioningHardwareInterface(); Settings.Global.putInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED, 0); final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mContentResolver, new android.net.util.SharedLog(""test"")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).initOffloadConfig(); inOrder.verify(mHardware, times(1)).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }",b1581d12bb779197196a61da2ccef78061508f83,testSettingsAllowsStart(),442176,242,179
91995,luni_src_main_java_libcore_io_ForwardingOs.java,93.0,"public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptInt(fd, level, option); }",c4ef56ae603a21c5fc0a1a6be11202b1fd23203e,"public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws android.os.ErrnoException { return os.getsockoptInt(fd, level, option); }",2b1ead8295620a773a14b2bc46cc5b4e145e4937,"getsockoptInt(java.io.FileDescriptor,int,int)","getsockoptInt(java.io.FileDescriptor,int,int)",3,93,"public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptInt(fd, level, option); }",d4c2c3344e99d78954666d79f4de061c356f096a,"getsockoptInt(java.io.FileDescriptor,int,int)",170475,44,44
169994,src_main_java_org_conscrypt_ct_CTLogStoreImpl.java,,,,@java.lang.Override public org.conscrypt.ct.CTLogInfo getKnownLog(byte[] logId) { return org.conscrypt.CTLogStoreImpl.KNOWN_LOGS.get(java.nio.ByteBuffer.wrap(logId)); },9187db471bd3e2cbb99e10352fa6fe591c488a8b,,getKnownLog(byte[]),16,1,"@java.lang.Override public org.conscrypt.ct.CTLogInfo getKnownLog(byte[] logId) { if ((knownLogs) == null) { knownLogs = org.conscrypt.ct.CTLogStoreImpl.getDefaultKnownLogs(); } for (org.conscrypt.ct.CTLogInfo log : knownLogs) { if (java.util.Arrays.equals(logId, log.getID())) { return log; } } return null; }",1903959f58ec026baa1cbb8f8b9e27f263b517fe,getKnownLog(byte[]),109048,61,106
108485,jack_src_com_android_jack_backend_dex_StandardMultiDexWritingTool.java,0.0,"@java.lang.Override public void write(@javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir) throws com.android.jack.JackIOException { int dexCount = 1; com.android.jack.tools.merger.JackMerger merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); com.android.sched.vfs.OutputVFile outputDex = getOutputDex(outputVDir, (dexCount++)); java.util.List<com.android.sched.vfs.InputVFile> mainDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); java.util.List<com.android.sched.vfs.InputVFile> anyDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); fillDexLists(mainDexList, anyDexList); for (com.android.sched.vfs.InputVFile currentDex : mainDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e) { throw new com.android.jack.JackUserException(""Too many classes in main dex. Index overflow while merging dex files"", e); } } for (com.android.sched.vfs.InputVFile currentDex : anyDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e) { finishMerge(merger, outputDex); outputDex = getOutputDex(outputVDir, (dexCount++)); merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e1) { throw new java.lang.AssertionError(); } } } finishMerge(merger, outputDex); }",a79ab933714f975af1f4ca17454c4ac3cd773a96,"@java.lang.Override public void write(@javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir) throws com.android.jack.backend.dex.DexWritingException { int dexCount = 1; com.android.jack.tools.merger.JackMerger merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); com.android.sched.vfs.OutputVFile outputDex; try { outputDex = getOutputDex(outputVDir, (dexCount++)); java.util.List<com.android.sched.vfs.InputVFile> mainDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); java.util.List<com.android.sched.vfs.InputVFile> anyDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); fillDexLists(mainDexList, anyDexList); for (com.android.sched.vfs.InputVFile currentDex : mainDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e) { throw new com.android.jack.backend.dex.DexWritingException(""Too many classes in main dex. Index overflow while merging dex files"", e); } } for (com.android.sched.vfs.InputVFile currentDex : anyDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e) { finishMerge(merger, outputDex); outputDex = getOutputDex(outputVDir, (dexCount++)); merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e1) { throw new java.lang.AssertionError(); } } } } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new com.android.jack.backend.dex.DexWritingException(e); } finishMerge(merger, outputDex); }",ec800806acc26cd0c954ddda6826c3cb9069fc8d,write(com.android.sched.vfs.OutputVDir),write(com.android.sched.vfs.OutputVDir),10,0,"@java.lang.Override public void write(@javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir) throws com.android.jack.backend.dex.DexWritingException { int dexCount = 1; com.android.jack.tools.merger.JackMerger merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); com.android.sched.vfs.OutputVFile outputDex = getOutputDex(outputVDir, (dexCount++)); java.util.List<com.android.sched.vfs.InputVFile> mainDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); java.util.List<com.android.sched.vfs.InputVFile> anyDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); fillDexLists(mainDexList, anyDexList); for (com.android.sched.vfs.InputVFile currentDex : mainDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergingOverflowException e) { throw new com.android.jack.backend.dex.DexWritingException(new com.android.jack.backend.dex.MainDexOverflowException(e)); } } for (com.android.sched.vfs.InputVFile currentDex : anyDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergingOverflowException e) { finishMerge(merger, outputDex); outputDex = getOutputDex(outputVDir, (dexCount++)); merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergingOverflowException e1) { throw new java.lang.AssertionError(e1); } } } finishMerge(merger, outputDex); }",2c33457403992c917e2d8f950f23e199a70bd4a3,write(com.android.sched.vfs.OutputVDir),227157,491,451
131660,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,10.0,"@org.junit.Test public void test002e() throws java.lang.Exception { java.io.File jackOutput; try { jackOutput = runTest002(true, ""fail""); junit.framework.Assert.fail(); } catch (com.android.jack.resource.ResourceImportConflictException e) { } }",7c1e36f631accca390cdd02b5e09f32719f98d6b,"@org.junit.Test public void test002e() throws java.lang.Exception { java.io.File jackOutput; try { jackOutput = runTest002(true, ""fail"", true); junit.framework.Assert.fail(); } catch (com.android.jack.resource.ResourceImportConflictException e) { } }",a6890359655aae68a1633c10aea3e94367f68da9,test002e(),test002e(),11,12,"@org.junit.Test public void test002e() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); try { jackOutput = runTest002(true, ""fail"", errOut, true, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { junit.framework.Assert.assertTrue(((e.getCause()) instanceof com.android.jack.library.LibraryReadingException)); junit.framework.Assert.assertTrue(((e.getCause().getCause()) instanceof com.android.jack.resource.ResourceImportConflictException)); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Resource in"")); junit.framework.Assert.assertTrue(errString.contains(""rsc/Resource1"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); } }",21a7e2f60116ddf2ccb98603ab82fb6e6910f6b8,test002e(),181564,73,210
509292,src_com_android_bluetooth_pbap_BluetoothPbapVcardManager.java,30.0,"public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty(""line.separator"")); java.lang.String Vcard = """"; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith(""TEL"")) { attr[i] = attr[i].replace(""("", """"); attr[i] = attr[i].replace("")"", """"); attr[i] = attr[i].replace(""-"", """"); attr[i] = attr[i].replace("" "", """"); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].equals(""""))) { Vcard = Vcard.concat(((attr[i]) + ""\n"")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""Vcard with stripped telephone no.: "" + Vcard)); return Vcard; }",da84ea22cbf2bcda670523525324077fc4c50995,"public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty(""line.separator"")); java.lang.String Vcard = """"; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith(""TEL"")) { attr[i] = attr[i].replace(""("", """"); attr[i] = attr[i].replace("")"", """"); attr[i] = attr[i].replace(""-"", """"); attr[i] = attr[i].replace("" "", """"); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].isEmpty())) { vCard = vCard.concat(((attr[i]) + ""\n"")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""Vcard with stripped telephone no.: "" + Vcard)); return Vcard; }",76e7e9739aa6db9d9391a24e0af6c52b2da51afb,StripTelephoneNumber(java.lang.String),StripTelephoneNumber(java.lang.String),6,30,"public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty(""line.separator"")); java.lang.String Vcard = """"; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith(""TEL"")) { attr[i] = attr[i].replace(""("", """"); attr[i] = attr[i].replace("")"", """"); attr[i] = attr[i].replace(""-"", """"); attr[i] = attr[i].replace("" "", """"); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].isEmpty())) { Vcard = Vcard.concat(((attr[i]) + ""\n"")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""Vcard with stripped telephone no.: "" + Vcard)); return Vcard; }",1755d3d2ae1c37760a1ce9f983ccfd0ea6703e60,StripTelephoneNumber(java.lang.String),384699,252,252
309306,android_src_main_java_org_conscrypt_Platform.java,9.0,public static javax.net.ssl.SSLSession wrapSSLSession(org.conscrypt.OpenSSLSessionImpl sslSession) { if ((Build.VERSION.SDK_INT) <= 23) { return sslSession; } else { return new org.conscrypt.OpenSSLExtendedSessionImpl(sslSession); } },48fe2553e645bba04895f9d6704be6c9702946ab,public static javax.net.ssl.SSLSession wrapSSLSession(org.conscrypt.OpenSSLAbstractSession sslSession) { if ((Build.VERSION.SDK_INT) <= 23) { return sslSession; } else { return new org.conscrypt.OpenSSLExtendedSessionImpl(sslSession); } },37874dd3e34838b61c2c79b55bc0236dc76d0ee2,wrapSSLSession(org.conscrypt.OpenSSLSessionImpl),wrapSSLSession(org.conscrypt.OpenSSLAbstractSession),10,27,public static javax.net.ssl.SSLSession wrapSSLSession(org.conscrypt.AbstractOpenSSLSession sslSession) { if ((Build.VERSION.SDK_INT) <= 23) { return sslSession; } else { return new org.conscrypt.OpenSSLExtendedSessionImpl(sslSession); } },5bc5cd078b79915dfbba4ac71f01ca1be0b767f2,wrapSSLSession(org.conscrypt.AbstractOpenSSLSession),414830,68,68
52293,sdklib_src_main_java_com_android_sdklib_SdkManager.java,7.0,@com.android.annotations.VisibleForTesting(visibility = com.android.annotations.VisibleForTesting.Visibility.PRIVATE) protected void setTargets(@com.android.annotations.NonNull com.android.sdklib.IAndroidTarget[] targets) { assert targets != null; mTargets = targets; },bc64d9606f8e30f67e7f67fa1d7086c5de3f1dc2,@java.lang.Deprecated @com.android.annotations.VisibleForTesting(visibility = com.android.annotations.VisibleForTesting.Visibility.PRIVATE) protected void setTargets(@com.android.annotations.NonNull com.android.sdklib.IAndroidTarget[] targets) { assert targets != null; mTargets = targets; },6224051bf9ce64a8d4390bf4ccd0d890fd6e4981,setTargets(com.android.sdklib.IAndroidTarget[]),setTargets(com.android.sdklib.IAndroidTarget[]),15,17,public boolean hasChanged(@com.android.annotations.Nullable com.android.utils.ILogger log) { return mLocalSdk.hasChanged((((com.android.sdklib.local.LocalSdk.PKG_PLATFORMS) | (com.android.sdklib.local.LocalSdk.PKG_ADDONS)) | (com.android.sdklib.local.LocalSdk.PKG_BUILD_TOOLS))); },c7b5efef1db8cb8c4faeb32c97fe7f2b8728b93c,hasChanged(com.android.utils.ILogger),399442,68,94
19523,ide_common_src_com_android_ide_common_rendering_LayoutLibrary.java,11.0,public com.android.layoutlib.api.LayoutScene createScene(com.android.layoutlib.api.SceneParams params) { if ((mBridge) != null) { return mBridge.createScene(params); } else if ((mLegacyBridge) != null) { return createLegacyScene(params); } return null; },0572c5f47e0f07980b9e8544a8ef5ec8d808c95c,public com.android.ide.common.rendering.api.RenderSession createScene(com.android.ide.common.rendering.api.Params params) { if ((mBridge) != null) { return mBridge.createSession(params); } else if ((mLegacyBridge) != null) { return createLegacyScene(params); } return null; },3e1e2ab9323747f50015e8084c9c94c0225083e8,createScene(com.android.layoutlib.api.SceneParams),createScene(com.android.ide.common.rendering.api.Params),6,6,public com.android.ide.common.rendering.api.RenderSession createSession(com.android.ide.common.rendering.api.Params params) { if ((mBridge) != null) { return mBridge.createSession(params); } else if ((mLegacyBridge) != null) { return createLegacySession(params); } return null; },3829254481e9903cac3a18d72e026b2a9ef53dd1,createSession(com.android.ide.common.rendering.api.Params),180500,81,81
269973,harmony-tests_src_test_java_org_apache_harmony_tests_java_util_IdentityHashMapTest.java,33.0,"public void test_replaceAll() { java.util.IdentityHashMap<java.lang.String, java.lang.String> map = new java.util.IdentityHashMap<>(); java.lang.String key1 = ""key1""; java.lang.String key2 = ""key2""; java.lang.String key3 = ""key3""; map.put(key1, ""1""); map.put(key2, ""2""); map.put(key3, ""3""); map.replaceAll(( k, v) -> k + v); assertEquals(""key11"", map.get(key1)); assertEquals(""key22"", map.get(key2)); assertEquals(""key33"", map.get(key3)); assertEquals(3, map.size()); try { map.replaceAll(new java.util.function.BiFunction<java.lang.String, java.lang.String, java.lang.String>() { @java.lang.Override public java.lang.String apply(java.lang.String s, java.lang.String s2) { map.put(""key4"", ""4""); return """"; } }); } catch (java.util.ConcurrentModificationException expected) { } }",87759259e1b59f00cf5d867b8403678f2c330c0b,"public void test_replaceAll() { java.util.IdentityHashMap<java.lang.String, java.lang.String> map = new java.util.IdentityHashMap<>(); java.lang.String key1 = ""key1""; java.lang.String key2 = ""key2""; java.lang.String key3 = ""key3""; map.put(key1, ""1""); map.put(key2, ""2""); map.put(key3, ""3""); map.replaceAll(( k, v) -> k + v); assertEquals(""key11"", map.get(key1)); assertEquals(""key22"", map.get(key2)); assertEquals(""key33"", map.get(key3)); assertEquals(3, map.size()); try { map.replaceAll(new java.util.function.BiFunction<java.lang.String, java.lang.String, java.lang.String>() { @java.lang.Override public java.lang.String apply(java.lang.String s, java.lang.String s2) { map.put(""key4"", ""4""); return """"; } }); fail(""Should have thrown""); } catch (java.util.ConcurrentModificationException expected) { } }",54f4b4c6c5019878e320e6ff878c9bd4319f97bf,test_replaceAll(),test_replaceAll(),9,33,"public void test_replaceAll() { java.util.IdentityHashMap<java.lang.String, java.lang.String> map = new java.util.IdentityHashMap<>(); java.lang.String key1 = ""key1""; java.lang.String key2 = ""key2""; java.lang.String key3 = ""key3""; map.put(key1, ""1""); map.put(key2, ""2""); map.put(key3, ""3""); map.replaceAll(( k, v) -> k + v); assertEquals(""key11"", map.get(key1)); assertEquals(""key22"", map.get(key2)); assertEquals(""key33"", map.get(key3)); assertEquals(3, map.size()); try { map.replaceAll(new java.util.function.BiFunction<java.lang.String, java.lang.String, java.lang.String>() { @java.lang.Override public java.lang.String apply(java.lang.String s, java.lang.String s2) { map.put(""key4"", ""4""); return """"; } }); fail(); } catch (java.util.ConcurrentModificationException expected) { } }",f8b9de1a17b0fc83a4bc25d8b370ad4042f21a8d,test_replaceAll(),50207,244,240
115033,support_src_test_java_libcore_javax_net_ssl_SSLConfigurationAsserts.java,,,,"private static void assertSSLContextDefaultConfiguration(javax.net.ssl.SSLContext sslContext) { javax.net.ssl.SSLParameters defaultParameters = sslContext.getDefaultSSLParameters(); libcore.java.security.StandardNames.assertSSLContextEnabledProtocols(sslContext.getProtocol(), defaultParameters.getProtocols()); libcore.java.security.StandardNames.assertDefaultCipherSuites(defaultParameters.getCipherSuites()); assertFalse(defaultParameters.getWantClientAuth()); assertFalse(defaultParameters.getNeedClientAuth()); javax.net.ssl.SSLParameters supportedParameters = sslContext.getSupportedSSLParameters(); libcore.java.security.StandardNames.assertSupportedCipherSuites(supportedParameters.getCipherSuites()); libcore.java.security.StandardNames.assertSupportedProtocols(supportedParameters.getProtocols()); assertFalse(supportedParameters.getWantClientAuth()); assertFalse(supportedParameters.getNeedClientAuth()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertContainsAll(""Unsupported enabled cipher suites"", supportedParameters.getCipherSuites(), defaultParameters.getCipherSuites()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertContainsAll(""Unsupported enabled protocols"", supportedParameters.getProtocols(), defaultParameters.getProtocols()); }",1c1e838418631504362718592c9c804f1ee6b4b4,,assertSSLContextDefaultConfiguration(javax.net.ssl.SSLContext),3,0,"public static void assertSSLContextDefaultConfiguration(javax.net.ssl.SSLContext sslContext) throws java.io.IOException { javax.net.ssl.SSLParameters defaultParameters = sslContext.getDefaultSSLParameters(); libcore.java.security.StandardNames.assertSSLContextEnabledProtocols(sslContext.getProtocol(), defaultParameters.getProtocols()); libcore.java.security.StandardNames.assertDefaultCipherSuites(defaultParameters.getCipherSuites()); assertFalse(defaultParameters.getWantClientAuth()); assertFalse(defaultParameters.getNeedClientAuth()); javax.net.ssl.SSLParameters supportedParameters = sslContext.getSupportedSSLParameters(); libcore.java.security.StandardNames.assertSupportedCipherSuites(supportedParameters.getCipherSuites()); libcore.java.security.StandardNames.assertSupportedProtocols(supportedParameters.getProtocols()); assertFalse(supportedParameters.getWantClientAuth()); assertFalse(supportedParameters.getNeedClientAuth()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertContainsAll(""Unsupported enabled cipher suites"", supportedParameters.getCipherSuites(), defaultParameters.getCipherSuites()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertContainsAll(""Unsupported enabled protocols"", supportedParameters.getProtocols(), defaultParameters.getProtocols()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLSocketFactoryConfigSameAsSSLContext(sslContext.getSocketFactory(), sslContext); libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLServerSocketFactoryConfigSameAsSSLContext(sslContext.getServerSocketFactory(), sslContext); javax.net.ssl.SSLEngine sslEngine = sslContext.createSSLEngine(); assertFalse(sslEngine.getUseClientMode()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLEngineConfigSameAsSSLContext(sslEngine, sslContext); }",718f9ee3c9c13d6169170a87cb1c11eae0adf08c,assertSSLContextDefaultConfiguration(javax.net.ssl.SSLContext),241669,251,365
44462,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_NativeCrypto.java,101.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static native byte[][] EC_POINT_get_affine_coordinates(int type, int groupCtx, int pointCtx);",5d5aa65503dc1cd893df1e95d7a2482bd3c972bf,,"EC_POINT_get_affine_coordinates(int,int,int)",9,51,public static native java.lang.String EVP_PKEY_print_private(int pkeyRef);,8d5d71b10157505d74251df21b40d912a602a526,EVP_PKEY_print_private(int),468933,27,23
278609,telecomm_java_android_telecom_Logging_Events.java,,,,"public void event(android.telecom.Logging.Events.EventRecordEntry recordEntry, java.lang.String event, java.lang.String format, java.lang.Object... args) { java.lang.String msg; try { msg = ((args == null) || ((args.length) == 0)) ? format : java.lang.String.format(java.util.Locale.US, format, args); } catch (java.util.IllegalFormatException ife) { android.telecom.Log.e(""Log"", ife, ""IllegalFormatException: formatString='%s' numArgs=%d"", format, args.length); msg = format + "" (An error occurred while formatting the message.)""; } event(recordEntry, event, msg); }",b24387f5cfdacf9f9920246e40511a792c952dd6,,"event(android.telecom.Logging.Events$EventRecordEntry,java.lang.String,java.lang.String,java.lang.Object[])",3,9,"public void event(android.telecom.Logging.EventManager.Loggable recordEntry, java.lang.String event, java.lang.String format, java.lang.Object... args) { java.lang.String msg; try { msg = ((args == null) || ((args.length) == 0)) ? format : java.lang.String.format(java.util.Locale.US, format, args); } catch (java.util.IllegalFormatException ife) { android.telecom.Log.e(""Log"", ife, ""IllegalFormatException: formatString='%s' numArgs=%d"", format, args.length); msg = format + "" (An error occurred while formatting the message.)""; } event(recordEntry, event, msg); }",d59c2c9eefeea4fa63093f75458e08941367cb0d,"event(android.telecom.Logging.EventManager$Loggable,java.lang.String,java.lang.String,java.lang.Object[])",122386,169,170
12845,tools_eclipse_plugins_com.android.ide.eclipse.ddms_src_com_android_ide_eclipse_ddms_views_LogCatView.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"org.eclipse.core.resources.IMarker createMarkerFromSearchMatch(org.eclipse.core.resources.IFile file, org.eclipse.jdt.core.search.SearchMatch match) { java.util.HashMap<java.lang.String, java.lang.Object> map = new java.util.HashMap<java.lang.String, java.lang.Object>(); map.put(IMarker.CHAR_START, new java.lang.Integer(match.getOffset())); map.put(IMarker.CHAR_END, new java.lang.Integer(((match.getOffset()) + (match.getLength())))); org.eclipse.core.resources.IMarker marker = null; try { marker = file.createMarker(IMarker.TEXT); marker.setAttributes(map); } catch (org.eclipse.core.runtime.CoreException e) { e.printStackTrace(); } return marker; }",77eab76883f6ff1a920026e7a3e7983897237216,,"createMarkerFromSearchMatch(org.eclipse.core.resources.IFile,org.eclipse.jdt.core.search.SearchMatch)",3,21,"org.eclipse.core.resources.IMarker createMarkerFromSearchMatch(org.eclipse.core.resources.IFile file, org.eclipse.jdt.core.search.SearchMatch match) { java.util.HashMap<java.lang.String, java.lang.Object> map = new java.util.HashMap<java.lang.String, java.lang.Object>(); map.put(IMarker.CHAR_START, new java.lang.Integer(match.getOffset())); map.put(IMarker.CHAR_END, new java.lang.Integer(((match.getOffset()) + (match.getLength())))); org.eclipse.core.resources.IMarker marker = null; try { marker = file.createMarker(IMarker.TEXT); marker.setAttributes(map); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.core.runtime.Status s = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.Status.ERROR, com.android.ide.eclipse.ddms.DdmsPlugin.PLUGIN_ID, e.getMessage(), e); com.android.ide.eclipse.ddms.DdmsPlugin.getDefault().getLog().log(s); } return marker; }",5e818a43c21c724d01f45e373fd8761c8ea16044,"createMarkerFromSearchMatch(org.eclipse.core.resources.IFile,org.eclipse.jdt.core.search.SearchMatch)",381217,193,274
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LongSuite.class, timeout = 1) @org.junit.Test public void testRunner_LongSuite_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().forTestClass(vogar.target.junit3.LongTest.class).failure(""test"", ""java.util.concurrent.TimeoutException\n"").aborted(); }",5d7e71c6f08d13a367403e655b01f80c0ae9c736,,testRunner_LongSuite_WithTimeout(),3,9,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LongSuite.class, timeout = 1) @org.junit.Test public void testRunner_LongSuite_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().forTestClass(vogar.target.junit3.LongTest.class).failure(""test"", ""java.util.concurrent.TimeoutException\n"").aborted(); }",6b01dc73ee5b8f5afa685b0341a5c416c75bd6f5,testRunner_LongSuite_WithTimeout(),130774,110,109
337409,luni_src_test_java_libcore_java_nio_file_Files2Test.java,55.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void test_readAllLine$Path$Charset() throws java.io.IOException { junit.framework.TestCase.assertTrue(java.nio.file.Files.exists(filesSetup.getDataFilePath())); libcore.java.nio.file.FilesSetup.writeToFile(filesSetup.getDataFilePath(), (""\n"" + (libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2)), java.nio.file.StandardOpenOption.APPEND); java.util.List<java.lang.String> out = java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), java.nio.charset.Charset.forName(""UTF-8"")); assertEquals(2, out.size()); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA, out.get(0)); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2, out.get(1)); out = java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), java.nio.charset.Charset.forName(""UTF-16"")); assertEquals(1, out.size()); assertEquals(""桥汬漊瑥獴"", out.get(0)); filesSetup.reset(); try { java.nio.file.Files.readAllLines(filesSetup.getTestPath(), java.nio.charset.Charset.forName(""UTF-8"")); fail(); } catch (java.nio.file.NoSuchFileException expected) { } }",a702531429660e0afdfa8e009e28a3d563ed9dd8,,test_readAllLine$Path$Charset(),5,60,"@org.junit.Test public void test_readAllLine$Path$Charset() throws java.io.IOException { junit.framework.TestCase.assertTrue(java.nio.file.Files.exists(filesSetup.getDataFilePath())); libcore.java.nio.file.FilesSetup.writeToFile(filesSetup.getDataFilePath(), (""\n"" + (libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2)), java.nio.file.StandardOpenOption.APPEND); java.util.List<java.lang.String> out = java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), java.nio.charset.StandardCharsets.UTF_8); assertEquals(2, out.size()); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA, out.get(0)); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2, out.get(1)); out = java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), java.nio.charset.StandardCharsets.UTF_16); assertEquals(1, out.size()); java.lang.String expectedOutput = new java.lang.String((((libcore.java.nio.file.FilesSetup.TEST_FILE_DATA) + '\n') + (libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2)).getBytes(), java.nio.charset.StandardCharsets.UTF_16); assertEquals(expectedOutput, out.get(0)); filesSetup.reset(); try { java.nio.file.Files.readAllLines(filesSetup.getTestPath(), java.nio.charset.StandardCharsets.UTF_16); fail(); } catch (java.nio.file.NoSuchFileException expected) { } filesSetup.reset(); try { java.nio.file.Files.readAllLines(filesSetup.getTestDirPath(), java.nio.charset.StandardCharsets.UTF_16); fail(); } catch (java.io.IOException expected) { } }",a04e36625b4d74fb2e53c41647c8fd2620be1140,test_readAllLine$Path$Charset(),336390,302,425
339713,src_apksigner_java_com_android_apksigner_PasswordRetriever.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.nio.charset.Charset getConsoleEncoding() { java.lang.String consoleCharsetName = null; try { java.lang.reflect.Method encodingMethod = java.io.Console.class.getDeclaredMethod(""encoding""); encodingMethod.setAccessible(true); consoleCharsetName = ((java.lang.String) (encodingMethod.invoke(null))); } catch (java.lang.ReflectiveOperationException ignored) { } if (consoleCharsetName == null) { java.nio.charset.Charset defaultCharset = java.nio.charset.Charset.defaultCharset(); java.lang.System.err.println(((""warning: Failed to obtain console character encoding name. Assuming "" + defaultCharset) + "" instead"")); return defaultCharset; } else { try { return java.nio.charset.Charset.forName(consoleCharsetName); } catch (java.lang.IllegalArgumentException e) { java.nio.charset.Charset defaultCharset = java.nio.charset.Charset.defaultCharset(); java.lang.System.err.println(((((""warning: Console uses unknown character encoding: "" + consoleCharsetName) + "". Assuming "") + defaultCharset) + "" instead"")); return defaultCharset; } } }",0cd69cb0df4f202ee799cfdf315d54aedd078da7,,getConsoleEncoding(),4,3,"private static java.nio.charset.Charset getConsoleEncoding() { java.lang.String consoleCharsetName; try { java.lang.reflect.Method encodingMethod = java.io.Console.class.getDeclaredMethod(""encoding""); encodingMethod.setAccessible(true); consoleCharsetName = ((java.lang.String) (encodingMethod.invoke(null))); if (consoleCharsetName == null) { return java.nio.charset.Charset.defaultCharset(); } } catch (java.lang.ReflectiveOperationException e) { java.nio.charset.Charset defaultCharset = java.nio.charset.Charset.defaultCharset(); java.lang.System.err.println((""warning: Failed to obtain console character encoding name. Assuming "" + defaultCharset)); return defaultCharset; } try { return java.nio.charset.Charset.forName(consoleCharsetName); } catch (java.lang.IllegalArgumentException e) { if (""cp65001"".equals(consoleCharsetName)) { return java.nio.charset.StandardCharsets.UTF_8; } java.nio.charset.Charset defaultCharset = java.nio.charset.Charset.defaultCharset(); java.lang.System.err.println(((((""warning: Console uses unknown character encoding: "" + consoleCharsetName) + "". Using "") + defaultCharset) + "" instead"")); return defaultCharset; } }",1e02f61e90fbb208ec636db9acd3b9fe95608fa6,getConsoleEncoding(),141171,256,285
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,1.0,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testBaseIntersectionCast() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_39).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",1839a0ad908b53b0ca161acba8b50e1f96f47c11,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testBaseIntersectionCast() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_39).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",639e375c97c52ff50fce3514fa29bf157208c26d,testBaseIntersectionCast(),testBaseIntersectionCast(),7,1,@org.junit.Test public void testBaseIntersectionCast() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_39).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },a8add6b397b113815f1d326b94cc4860b1bce6ba,testBaseIntersectionCast(),466267,99,60
150842,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_api_ReadOnlyBuildType.java,6.0,@com.android.annotations.Nullable @java.lang.Override public java.io.File getJarJarRuleFile() { return buildType.getJarJarRuleFile(); },d34bb83bc6bedc5f40f213be6eb3c1ff7f755f66,@com.android.annotations.NonNull @java.lang.Override public java.util.Collection<java.io.File> getJarJarRuleFiles() { return buildType.getJarJarRuleFiles(); },30ec8632b3208deb72d9078d15875086096b0c2c,getJarJarRuleFile(),getJarJarRuleFiles(),3,0,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJarJarRuleFiles() { return buildType.getJarJarRuleFiles(); },6ffa121a71283a905477d1fcd072fbadc6732f1d,getJarJarRuleFiles(),80022,45,45
144767,sdk-common_src_main_java_com_android_ide_common_repository_ResourceVisibilityLookup.java,,,,"@com.android.annotations.NonNull public com.android.ide.common.repository.ResourceVisibilityLookup get(@com.android.annotations.NonNull com.android.builder.model.AndroidLibrary library) { com.android.ide.common.repository.ResourceVisibilityLookup visibility = mLibraryMap.get(library); if (visibility == null) { visibility = new com.android.ide.common.repository.ResourceVisibilityLookup.LibraryResourceVisibility(library); java.util.List<? extends com.android.builder.model.AndroidLibrary> dependsOn = library.getLibraryDependencies(); if (!(dependsOn.isEmpty())) { java.util.List<com.android.ide.common.repository.ResourceVisibilityLookup> list = com.google.common.collect.Lists.newArrayListWithExpectedSize(((dependsOn.size()) + 1)); list.add(visibility); for (com.android.builder.model.AndroidLibrary d : dependsOn) { com.android.ide.common.repository.ResourceVisibilityLookup v = get(d); if (!(v.isEmpty())) { list.add(v); } } if (!(list.isEmpty())) { visibility = new com.android.ide.common.repository.ResourceVisibilityLookup.MultipleLibraryResourceVisibility(list); } } mLibraryMap.put(library, visibility); } return visibility; }",d0239d2177372cb99074c56c43132eae28c98f28,,get(com.android.builder.model.AndroidLibrary),6,6,"@com.android.annotations.NonNull public com.android.ide.common.repository.ResourceVisibilityLookup get(@com.android.annotations.NonNull com.android.builder.model.AndroidLibrary library) { com.android.ide.common.repository.ResourceVisibilityLookup visibility = mInstances.get(library); if (visibility == null) { visibility = new com.android.ide.common.repository.ResourceVisibilityLookup.LibraryResourceVisibility(library); if (visibility.isEmpty()) { visibility = com.android.ide.common.repository.ResourceVisibilityLookup.NONE; } java.util.List<? extends com.android.builder.model.AndroidLibrary> dependsOn = library.getLibraryDependencies(); if (!(dependsOn.isEmpty())) { java.util.List<com.android.ide.common.repository.ResourceVisibilityLookup> list = com.google.common.collect.Lists.newArrayListWithExpectedSize(((dependsOn.size()) + 1)); list.add(visibility); for (com.android.builder.model.AndroidLibrary d : dependsOn) { com.android.ide.common.repository.ResourceVisibilityLookup v = get(d); if (!(v.isEmpty())) { list.add(v); } } if ((list.size()) > 1) { visibility = new com.android.ide.common.repository.ResourceVisibilityLookup.MultipleLibraryResourceVisibility(list); } } mInstances.put(library, visibility); } return visibility; }",a9fff8dd1a414ad515d17c9f9ea55daedee6630f,get(com.android.builder.model.AndroidLibrary),353410,283,311
346149,service_java_com_android_server_wifi_WifiVendorHal.java,75.0,"public int enableFirmwareRoaming(int state) { kilroy(); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_NOT_STARTED; kilroy(); try { kilroy(); byte val; switch (state) { case WifiNative.DISABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.DISABLED; break; case WifiNative.ENABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.ENABLED; break; default : android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, (""enableFirmwareRoaming invalid argument "" + state)); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_INVALID_ARGS; } kilroy(); android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.setRoamingState(val); android.util.Log.d(com.android.server.wifi.WifiVendorHal.TAG, (""setRoamingState returned "" + (status.code))); return status.code; } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_UNKNOWN; } } }",1e90c0307a1cd3896e7017ba8db1bcf681f54740,"public int enableFirmwareRoaming(int state) { kilroy(); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_NOT_STARTED; kilroy(); try { kilroy(); byte val; switch (state) { case WifiNative.DISABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.DISABLED; break; case WifiNative.ENABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.ENABLED; break; default : mLog.e((""enableFirmwareRoaming invalid argument "" + state)); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_INVALID_ARGS; } kilroy(); android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.setRoamingState(val); mLog.d((""setRoamingState returned "" + (status.code))); return status.code; } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_UNKNOWN; } } }",b27ab2e695c9dbc4dff0a35a4d7b0db98774f9d8,enableFirmwareRoaming(int),enableFirmwareRoaming(int),5,75,"public int enableFirmwareRoaming(int state) { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_NOT_STARTED; try { byte val; switch (state) { case WifiNative.DISABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.DISABLED; break; case WifiNative.ENABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.ENABLED; break; default : mErrLog.e((""enableFirmwareRoaming invalid argument "" + state)); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_INVALID_ARGS; } android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.setRoamingState(val); mLog.d((""setRoamingState returned "" + (status.code))); return status.code; } catch (android.os.RemoteException e) { handleRemoteException(e); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_UNKNOWN; } } }",6a3ec9e7e998ca0dcffc249c1cde18a76a9861da,enableFirmwareRoaming(int),404568,313,289
83821,build-system_builder_src_main_java_com_android_builder_png_ByteUtils.java,,,,public byte[] getIntAsArray(int value) { byte[] array = ((java.nio.ByteBuffer) (mIntBuffer.rewind())).putInt(value).array(); return array; },49a57ea4374c7c91aa26db9dace6d9415af1fd7c,,getIntAsArray(int),12,4,@com.android.annotations.NonNull byte[] getIntAsArray(int value) { return ((java.nio.ByteBuffer) (mIntBuffer.rewind())).putInt(value).array(); },8855ea021483ce0e361db87400bbf1b8aed46132,getIntAsArray(int),148822,41,42
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,48.0,"public void addU32(long v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU32(v); return; } if ((v < 0) || (v > 4294967295L)) { android.util.Log.e(""rs"", ((""FieldPacker.addU32( "" + v) + "" )"")); throw new java.lang.IllegalArgumentException(""Saving value out of range for type""); } align(4); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) ((v >> 8) & 255)); mData[((mPos)++)] = ((byte) ((v >> 16) & 255)); mData[((mPos)++)] = ((byte) ((v >> 24) & 255)); }",e965e4c4007d4b9765f908aa3d0c372c421272b2,"public void addU32(long v) { if (shouldThunk()) { mN.addU32(v); return; } if ((v < 0) || (v > 4294967295L)) { android.util.Log.e(""rs"", ((""FieldPacker.addU32( "" + v) + "" )"")); throw new java.lang.IllegalArgumentException(""Saving value out of range for type""); } align(4); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) ((v >> 8) & 255)); mData[((mPos)++)] = ((byte) ((v >> 16) & 255)); mData[((mPos)++)] = ((byte) ((v >> 24) & 255)); }",40a63ce1723e13a3b6156ddeffccbe301ed4c814,addU32(long),addU32(long),5,47,"public void addU32(long v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU32(v); return; } if ((v < 0) || (v > 4294967295L)) { android.util.Log.e(""rs"", ((""FieldPacker.addU32( "" + v) + "" )"")); throw new java.lang.IllegalArgumentException(""Saving value out of range for type""); } align(4); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) ((v >> 8) & 255)); mData[((mPos)++)] = ((byte) ((v >> 16) & 255)); mData[((mPos)++)] = ((byte) ((v >> 24) & 255)); }",e965e4c4007d4b9765f908aa3d0c372c421272b2,addU32(long),205179,191,204
147261,jack_src_com_android_jack_transformations_ast_inner_MethodCallDispatchAdjuster.java,,,,"@java.lang.Override public synchronized void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.MethodCallAdjuster visitor = new com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.MethodCallAdjuster(tr, method.getEnclosingType()); visitor.accept(method); if (method.containsMarker(com.android.jack.transformations.ast.inner.NeedsRethising.class)) { com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.ThisAccessAdjuster visitor2 = new com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.ThisAccessAdjuster(tr, method); visitor2.accept(method); method.removeMarker(com.android.jack.transformations.ast.inner.NeedsRethising.class); } tr.commit(); }",2f0d98870ac8b982cb1d42dd5e20ed342121107e,,run(com.android.jack.ir.ast.JMethod),14,1,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.Adjuster visitor; if (method.containsMarker(com.android.jack.transformations.ast.inner.NeedsRethising.class)) { visitor = new com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.RethisingAdjuster(tr, method); method.removeMarker(com.android.jack.transformations.ast.inner.NeedsRethising.class); } else { visitor = new com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.Adjuster(tr, method); } visitor.accept(method); tr.commit(); }",2352c96306a226609831c0083d43facf62734975,run(com.android.jack.ir.ast.JMethod),418715,286,257
305769,suite_cts_deviceTests_videoperf_src_com_android_cts_videoperf_VideoEncoderDecoderTest.java,20.0,"private void getPixelValuesFromOutputBuffer(java.nio.ByteBuffer buffer, int x, int y, com.android.cts.videoperf.VideoEncoderDecoderTest.YUVValue result) { result.mY = buffer.get(((y * (mVideoWidth)) + x)); if (isDstSemiPlanar()) { int index = (((mVideoWidth) * (mVideoHeight)) + ((y / 2) * (mVideoWidth))) + ((x / 2) * 2); result.mU = buffer.get(index); result.mV = buffer.get((index + 1)); } else { int vOffset = ((mVideoWidth) * (mVideoHeight)) / 4; int index = (((mVideoWidth) * (mVideoHeight)) + (((y / 2) * (mVideoWidth)) / 2)) + (x / 2); result.mU = buffer.get(index); result.mV = buffer.get((index + vOffset)); } }",8e2567971563043d1573e5fb1f026e0f2f37ed1f,"private void getPixelValuesFromOutputBuffer(java.nio.ByteBuffer buffer, int x, int y, com.android.cts.videoperf.VideoEncoderDecoderTest.YUVValue result) { result.mY = buffer.get(((y * (mBufferStride)) + x)); if (isDstSemiPlanar()) { int index = (((mBufferStride) * (mBufferStrideHeight)) + ((y / 2) * (mBufferStride))) + ((x / 2) * 2); result.mU = buffer.get(index); result.mV = buffer.get((index + 1)); } else { int vOffset = ((mBufferStride) * (mBufferStrideHeight)) / 4; int index = (((mBufferStride) * (mBufferStrideHeight)) + (((y / 2) * (mBufferStride)) / 2)) + (x / 2); result.mU = buffer.get(index); result.mV = buffer.get((index + vOffset)); } }",05ca81eeb98fce6d6b820fce15815f815b291693,"getPixelValuesFromOutputBuffer(java.nio.ByteBuffer,int,int,com.android.cts.videoperf.VideoEncoderDecoderTest$YUVValue)","getPixelValuesFromOutputBuffer(java.nio.ByteBuffer,int,int,com.android.cts.videoperf.VideoEncoderDecoderTest$YUVValue)",3,20,"private void getPixelValuesFromOutputBuffer(java.nio.ByteBuffer buffer, int x, int y, com.android.cts.videoperf.VideoEncoderDecoderTest.YUVValue result) { result.mY = buffer.get(((y * (mBufferStride)) + x)); if (isDstSemiPlanar()) { int index = (((mBufferStride) * (mBufferVStride)) + ((y / 2) * (mBufferStride))) + ((x / 2) * 2); result.mU = buffer.get(index); result.mV = buffer.get((index + 1)); } else { int vOffset = ((mBufferStride) * (mBufferVStride)) / 4; int index = (((mBufferStride) * (mBufferVStride)) + (((y / 2) * (mBufferStride)) / 2)) + (x / 2); result.mU = buffer.get(index); result.mV = buffer.get((index + vOffset)); } }",9fe828e8cd6f402066b83f1459a3bac199feaabb,"getPixelValuesFromOutputBuffer(java.nio.ByteBuffer,int,int,com.android.cts.videoperf.VideoEncoderDecoderTest$YUVValue)",164381,220,220
20706,layoutlib_api_src_com_android_ide_common_rendering_api_RenderSession.java,9.0,public com.android.ide.common.rendering.api.ViewInfo getRootView() { return null; },fd07e16590313c80d29838e4a0863547cda2435a,public java.util.List<com.android.ide.common.rendering.api.ViewInfo> getRootView() { return null; },ec18c757bffcea69b45686bc34eb7366eec40396,getRootView(),getRootView(),3,5,public java.util.List<com.android.ide.common.rendering.api.ViewInfo> getRootViews() { return null; },dac4a72304de64ac204c3434c93f541670962308,getRootViews(),406887,32,32
92758,luni_src_main_java_java_nio_DirectByteBuffer.java,39.0,"final void get(long[] dst, int dstOffset, int longCount) { checkNotFreed(); int byteCount = checkGetBounds(SizeOf.LONG, dst.length, dstOffset, longCount); this.block.peekLongArray(((offset) + (position)), dst, dstOffset, longCount, order.needsSwap); position += byteCount; }",3ae51d92eb24bdee355dbb3e577b86b712e67c8b,"final void get(long[] dst, int dstOffset, int longCount) { checkCanAccess(); int byteCount = checkGetBounds(SizeOf.LONG, dst.length, dstOffset, longCount); this.block.peekLongArray(((offset) + (position)), dst, dstOffset, longCount, order.needsSwap); position += byteCount; }",e58b3ea88aa95afb1ebb5e1f35bd7b2e16a2eb65,"get(long[],int,int)","get(long[],int,int)",6,40,"final void get(long[] dst, int dstOffset, int longCount) { checkIsAccessible(); int byteCount = checkGetBounds(SizeOf.LONG, dst.length, dstOffset, longCount); this.block.peekLongArray(((offset) + (position)), dst, dstOffset, longCount, order.needsSwap); position += byteCount; }",cd714ec5b5aa8bf1e1302ef27d7f356b76320ea8,"get(long[],int,int)",45011,77,77
175765,luni_src_main_java_java_math_BigInt.java,26.0,"void putBigEndianTwosComplement(byte[] a) { this.makeValid(); java.math.NativeBN.twosComp2bn(a, a.length, this.bignum); }",50c47d906c3a7f16af8e1d553c44ca3c553f74d7,"void putBigEndianTwosComplement(byte[] a) { this.makeValid(); java.math.NativeBN.twosComp2bn(a, a.length, this.nativePtr); }",23acfcf9cb12b5a59f92f5831237ab4dc2ee854d,putBigEndianTwosComplement(byte[]),putBigEndianTwosComplement(byte[]),10,25,"void putBigEndianTwosComplement(byte[] a) { this.makeValid(); java.math.NativeBN.twosComp2bn(a, a.length, this.bignum); }",50c47d906c3a7f16af8e1d553c44ca3c553f74d7,putBigEndianTwosComplement(byte[]),337183,43,43
152952,luni_src_main_java_javax_crypto_KeyAgreement.java,13.0,private javax.crypto.KeyAgreementSpi getSpi() { return getSpi(null); },f4baaaa7373dfe0875a1ee0acb39a1b0242940cc,"private javax.crypto.KeyAgreementSpi getSpi() { try { return getSpi(null); } catch (java.security.InvalidKeyException e) { throw new java.lang.IllegalStateException(""Unreachable code (InvalidKeyException thrown for non-specified key)""); } }",3e5d83a3d5acf004a689954e8dd717cba210ef62,getSpi(),getSpi(),2,14,"private javax.crypto.KeyAgreementSpi getSpi() { try { return getSpi(null); } catch (java.security.InvalidKeyException e) { throw new java.lang.IllegalStateException(""InvalidKeyException thrown when key == null"", e); } }",ea91e6f312dc43bd8357da5f5e044a90f845f073,getSpi(),21885,58,55
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,,"java.lang.String getZoneInfosString() { return zoneInfos.stream().map(( z) -> (((z.getId()) + ""("") + (z.getPriority())) + "")"").collect(java.util.stream.Collectors.toList()).toString(); }",e9821c19f4bf2ada0b25309431ffdc03dd5424a4,,getZoneInfosString(),4,14,"java.lang.String getZoneInfosString() { return zoneInfos.stream().map(( z) -> (((z.getZoneId()) + ""("") + (z.getPriority())) + "")"").collect(java.util.stream.Collectors.toList()).toString(); }",581961f5e28499106218812ccd88500714d0a8ae,getZoneInfosString(),153177,59,61
153181,test_422-type-conversion_src_Main.java,59.0,static float $opt$CharToFloat(char a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); },060f948ce672ee56b63d64e025eae55c4e806893,static float $opt$noinline$CharToFloat(char a) { return ((float) (a)); },162d4f27d1dafb6187c5da07faef47c599bca215,$opt$CharToFloat(char),$opt$noinline$CharToFloat(char),5,49,static float $opt$noinline$CharToFloat(char a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); },716c3bef03e45890b1a980f379f2009fb5313efe,$opt$noinline$CharToFloat(char),516580,26,40
334603,luni_src_test_java_libcore_java_net_FtpURLConnectionTest.java,18.0,"public void testConnectOverProxy_implicit_http_fails() throws java.lang.Exception { byte[] fileContents = ""abcdef 1234567890"".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.ProxySelector defaultProxySelector = java.net.ProxySelector.getDefault(); try { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); try { java.net.Proxy proxy = countingProxy.asProxy(); libcore.java.net.FtpURLConnectionTest.SingleProxySelector proxySelector = new libcore.java.net.FtpURLConnectionTest.SingleProxySelector(proxy); java.net.ProxySelector.setDefault(proxySelector); java.net.URLConnection connection = fileUrl.openConnection(); java.io.InputStream inputStream = connection.getInputStream(); java.io.IOException e = proxySelector.getLastException(); assertEquals(""FTP connections over HTTP proxy not supported"", e.getMessage()); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, inputStream); } finally { int numConnections = countingProxy.shutdownAndGetConnectionCount(); assertEquals(0, numConnections); } } finally { java.net.ProxySelector.setDefault(defaultProxySelector); } }",b341e465efed50599f50337e431fc6e1b097a0e3,"public void testConnectOverProxy_implicit_http_fails() throws java.lang.Exception { byte[] fileContents = ""abcdef 1234567890"".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.ProxySelector defaultProxySelector = java.net.ProxySelector.getDefault(); try { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); java.net.Proxy proxy = countingProxy.asProxy(); libcore.java.net.FtpURLConnectionTest.SingleProxySelector proxySelector = new libcore.java.net.FtpURLConnectionTest.SingleProxySelector(proxy); java.net.ProxySelector.setDefault(proxySelector); java.net.URLConnection connection = fileUrl.openConnection(); java.io.InputStream inputStream = connection.getInputStream(); java.io.IOException e = proxySelector.getLastException(); assertEquals(""FTP connections over HTTP proxy not supported"", e.getMessage()); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, inputStream); int numConnections = countingProxy.shutdownAndGetConnectionCount(); assertEquals(0, numConnections); } finally { java.net.ProxySelector.setDefault(defaultProxySelector); } }",57cb0843c819d41d8d19968c34d74dae565760d6,testConnectOverProxy_implicit_http_fails(),testConnectOverProxy_implicit_http_fails(),2,20,"public void testConnectOverProxy_implicit_http_fails() throws java.lang.Exception { byte[] fileContents = ""abcdef 1234567890"".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.ProxySelector defaultProxySelector = java.net.ProxySelector.getDefault(); try { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); try { java.net.Proxy proxy = countingProxy.asProxy(); libcore.java.net.FtpURLConnectionTest.SingleProxySelector proxySelector = new libcore.java.net.FtpURLConnectionTest.SingleProxySelector(proxy); java.net.ProxySelector.setDefault(proxySelector); java.net.URLConnection connection = fileUrl.openConnection(); java.io.InputStream inputStream = connection.getInputStream(); java.io.IOException e = proxySelector.getLastException(); assertEquals(""FTP connections over HTTP proxy not supported"", e.getMessage()); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, inputStream); countingProxy.waitAndAssertConnectionCount(0); } finally { countingProxy.shutdown(); } } finally { java.net.ProxySelector.setDefault(defaultProxySelector); } }",e34c43cc2b7c6f8dae7273632e01d44f276cf1de,testConnectOverProxy_implicit_http_fails(),41578,293,296
300266,jack-tests_tests_com_android_jack_java7_InvokePolymorphicTests.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testInvokePolymorphic006_2() throws java.lang.Exception { com.android.jack.test.toolchain.JackApiToolchainBase toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); toolchain.setOutputStream(out); toolchain.setErrorStream(errOut); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()); toolchain.addProperty(Options.ANDROID_MIN_API_LEVEL.getName(), java.lang.String.valueOf(com.android.jack.java7.InvokePolymorphicTests.O_API_LEVEL)); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.createTempDir(), false, com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.java7.invokepolymorphic.test006"")); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",9547c73e257d6d37611f9da65dbc2c802475ed42,,testInvokePolymorphic006_2(),4,8,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testInvokePolymorphic006_2() throws java.lang.Exception { com.android.jack.test.toolchain.JackApiToolchainBase toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); toolchain.setOutputStream(out); toolchain.setErrorStream(errOut); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()); toolchain.addProperty(Options.ANDROID_MIN_API_LEVEL.getName(), Options.ANDROID_MIN_API_LEVEL.getCodec().formatValue(new com.android.jack.util.AndroidApiLevel(com.android.jack.util.AndroidApiLevel.ProvisionalLevel.O_BETA1))); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.createTempDir(), false, com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.java7.invokepolymorphic.test006"")); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }",685570c0bbf6aafe13024a8c255a5c277ba95b5d,testInvokePolymorphic006_2(),233693,271,294
105901,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_dsl_BuildTypeFactory.java,0.0,"@java.lang.Override public com.android.builder.core.DefaultBuildType create(java.lang.String name) { return instantiator.newInstance(com.android.build.gradle.internal.dsl.BuildTypeDsl.class, name, project, instantiator, logger); }",7f3953beb5d9da74dfe0291ad939504f7e289e6c,"@java.lang.Override public com.android.builder.core.DefaultBuildType create(java.lang.String name) { return instantiator.newInstance(com.android.build.gradle.internal.dsl.BuildTypeDsl.class, name, project, instantiator); }",34df41dd672d87248bb832540378de674a29eb3f,create(java.lang.String),create(java.lang.String),15,0,"@java.lang.Override public com.android.builder.core.DefaultBuildType create(java.lang.String name) { return instantiator.newInstance(com.android.build.gradle.internal.dsl.BuildTypeDsl.class, name, project, instantiator, logger); }",7f3953beb5d9da74dfe0291ad939504f7e289e6c,create(java.lang.String),513934,62,64
73670,harmony-tests_src_test_java_org_apache_harmony_tests_java_net_DatagramSocketTest.java,6.0,"protected void receive_oversize_java_net_DatagramPacket() { final int[] ports = tests.support.Support_PortManager.getNextPortsForUDP(2); final int portNumber = ports[0]; class TestDGRcvOver implements java.lang.Runnable { public void run() { java.net.InetAddress localHost = null; try { localHost = java.net.InetAddress.getLocalHost(); java.lang.Thread.sleep(1000); java.net.DatagramSocket sds = new java.net.DatagramSocket(ports[1]); java.net.DatagramPacket rdp = new java.net.DatagramPacket(""0123456789"".getBytes(), 10, localHost, portNumber); sds.send(rdp); sds.close(); } catch (java.lang.Exception e) { java.lang.System.err.println((((((""host "" + localHost) + "" port "") + portNumber) + "" failed to send oversize data: "") + e)); e.printStackTrace(); } } } try { new java.lang.Thread(new TestDGRcvOver(), ""DGSenderOver"").start(); ds = new java.net.DatagramSocket(portNumber); ds.setSoTimeout(6000); byte[] rbuf = new byte[5]; java.net.DatagramPacket rdp = new java.net.DatagramPacket(rbuf, rbuf.length); ds.receive(rdp); ds.close(); assertTrue((""Send/Receive oversize failed to return correct data: "" + (new java.lang.String(rbuf, 0, 5))), new java.lang.String(rbuf, 0, 5).equals(""01234"")); } catch (java.lang.Exception e) { java.lang.System.err.println((""Exception during send test: "" + e)); e.printStackTrace(); fail(((((""port "" + portNumber) + "" Exception: "") + e) + "" during oversize send test"")); } finally { ds.close(); } }",2e6143562d6a6640fbba0a47b16e3dee3cc59e4b,"protected void receive_oversize_java_net_DatagramPacket() throws java.lang.Exception { final int[] ports = tests.support.Support_PortManager.getNextPortsForUDP(2); final int portNumber = ports[0]; class TestDGRcvOver implements java.lang.Runnable { public void run() { java.net.InetAddress localHost = null; try { localHost = java.net.InetAddress.getLocalHost(); java.lang.Thread.sleep(1000); java.net.DatagramSocket sds = new java.net.DatagramSocket(ports[1]); java.net.DatagramPacket rdp = new java.net.DatagramPacket(""0123456789"".getBytes(), 10, localHost, portNumber); sds.send(rdp); sds.close(); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } } } try { new java.lang.Thread(new TestDGRcvOver(), ""DGSenderOver"").start(); ds = new java.net.DatagramSocket(portNumber); ds.setSoTimeout(6000); byte[] rbuf = new byte[5]; java.net.DatagramPacket rdp = new java.net.DatagramPacket(rbuf, rbuf.length); ds.receive(rdp); ds.close(); assertTrue((""Send/Receive oversize failed to return correct data: "" + (new java.lang.String(rbuf, 0, 5))), new java.lang.String(rbuf, 0, 5).equals(""01234"")); } catch (java.lang.Exception e) { java.lang.System.err.println((""Exception during send test: "" + e)); e.printStackTrace(); fail(((((""port "" + portNumber) + "" Exception: "") + e) + "" during oversize send test"")); } finally { ds.close(); } }",8dbfd378ed231cc103725b7d83c2f3759d3cc736,receive_oversize_java_net_DatagramPacket(),receive_oversize_java_net_DatagramPacket(),2,39,"public void testReceiveOversizePacket() throws java.lang.Exception { java.net.DatagramSocket ds = new java.net.DatagramSocket(0); java.net.DatagramSocket sds = new java.net.DatagramSocket(0); java.net.DatagramPacket rdp = new java.net.DatagramPacket(""0123456789"".getBytes(""UTF-8""), 5, LOOPBACK, ds.getLocalPort()); sds.send(rdp); sds.close(); byte[] recvBuffer = new byte[5]; java.net.DatagramPacket receive = new java.net.DatagramPacket(recvBuffer, recvBuffer.length); ds.receive(receive); ds.close(); assertEquals(new java.lang.String(""01234""), new java.lang.String(recvBuffer, 0, recvBuffer.length, ""UTF-8"")); }",a2f7fb27776d4cd566448d9d9e023aee11a8febf,testReceiveOversizePacket(),95953,390,172
96871,tests_tests_security_src_android_security_cts_OpenSSLEarlyCCSTest.java,,,,private synchronized android.security.cts.OpenSSLEarlyCCSTest.TlsRecord getFirstRecordReceivedAfterCCSWasInjected() { return mFirstRecordReceivedAfterCCSWasInjected; },942960db39ea2a363f65ef52ea6a1c02d15dc8df,,getFirstRecordReceivedAfterCCSWasInjected(),4,9,private synchronized android.security.cts.OpenSSLHeartbleedTest.TlsRecord getFirstRecordReceivedAfterCCSWasInjected() { return mFirstRecordReceivedAfterCCSWasInjected; },e3199bc22bff0b762c7d81b56d807ea17c925b49,getFirstRecordReceivedAfterCCSWasInjected(),118088,41,41
253791,luni_src_main_java_libcore_io_Posix.java,116.0,"public native void setenv(java.lang.String name, java.lang.String value, boolean overwrite) throws android.system.ErrnoException;",c23d358802d6fbaed0e23c9ff99ba9069093f199,"public native void setenv(java.lang.String name, java.lang.String value, boolean overwrite) throws libcore.io.ErrnoException;",e94f26dfa4d92fd8fb5a8e73191cf28d591f9776,"setenv(java.lang.String,java.lang.String,boolean)","setenv(java.lang.String,java.lang.String,boolean)",8,116,"public native void setenv(java.lang.String name, java.lang.String value, boolean overwrite) throws android.system.ErrnoException;",c23d358802d6fbaed0e23c9ff99ba9069093f199,"setenv(java.lang.String,java.lang.String,boolean)",494468,33,32
577771,tests_src_com_android_server_telecom_tests_CallAudioRouteStateMachineTest.java,29.0,"@android.test.suitebuilder.annotation.SmallTest public void testInitializationWithEarpieceAndBluetoothNoHeadset() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, true); }",b96efc1187dbd9a931ad7207e212872763b7cbc3,"@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithEarpieceAndBluetoothNoHeadset() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, true); }",2e55b6a28f11870ad9b540c371f86c64e6645a08,testInitializationWithEarpieceAndBluetoothNoHeadset(),testInitializationWithEarpieceAndBluetoothNoHeadset(),8,30,"@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithEarpieceAndBluetoothNoHeadset() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, CallAudioRouteStateMachine.EARPIECE_FORCE_ENABLED); }",e5f75c6a8c56c596a2dbf70d1bfb187d37aef346,testInitializationWithEarpieceAndBluetoothNoHeadset(),213154,140,152
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,48.0,"@org.junit.Test public void testDefaultMethodReference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_32).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",10df3e6dc3b147be7542e782361e224fd39e05f0,"@org.junit.Test public void testDefaultMethodReference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_32).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",ccc42676fc0daf53fa2c8dd4da5ce98c58798c36,testDefaultMethodReference(),testDefaultMethodReference(),7,48,@org.junit.Test public void testDefaultMethodReference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_32).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },85074903b6cb92bab0a06a7eac49b16c6dcad6b5,testDefaultMethodReference(),466261,86,60
116674,jack_src_com_android_jack_meta_LibraryMetaWriter.java,2.0,"private java.lang.String getNameFromInputVFile(@javax.annotation.Nonnull com.android.jack.library.InputLibrary jackLibrary, @javax.annotation.Nonnull com.android.sched.vfs.InputVFile jppFile) { com.android.sched.util.location.Location loc = jppFile.getLocation(); java.lang.String name; if (loc instanceof com.android.sched.util.location.ZipLocation) { name = ((com.android.sched.util.location.ZipLocation) (jppFile.getLocation())).getEntryName(); if ((jackLibrary.getMajorVersion()) != 0) { name = name.substring(((FileType.JPP.getVPathPrefix().split().iterator().next().length()) + 1)); } else { name = name.substring(""JACK-INF/"".length()); } } else { name = ((com.android.sched.util.location.FileLocation) (jppFile.getLocation())).getPath(); if ((jackLibrary.getMajorVersion()) != 0) { java.lang.String prefix = (FileType.JPP.getVPathPrefix().split().iterator().next()) + '/'; name = name.substring(((name.lastIndexOf(prefix)) + (prefix.length()))); } else { name = name.substring(""JACK-INF/"".length()); } } return name; }",3fadd9a8cace3c8f47ce99341ff23481442364f8,"private java.lang.String getNameFromInputVFile(@javax.annotation.Nonnull com.android.jack.library.InputLibrary jackLibrary, @javax.annotation.Nonnull com.android.sched.vfs.InputVFile jppFile) { com.android.sched.util.location.Location loc = jppFile.getLocation(); java.lang.String name; if (loc instanceof com.android.sched.util.location.ZipLocation) { name = ((com.android.sched.util.location.ZipLocation) (jppFile.getLocation())).getEntryName(); if ((jackLibrary.getMajorVersion()) != 0) { name = name.substring(((FileType.JPP.buildDirVPath(null).split().iterator().next().length()) + 1)); } else { name = name.substring(""JACK-INF/"".length()); } } else { name = ((com.android.sched.util.location.FileLocation) (jppFile.getLocation())).getPath(); if ((jackLibrary.getMajorVersion()) != 0) { java.lang.String prefix = (FileType.JPP.buildDirVPath(null).split().iterator().next()) + '/'; name = name.substring(((name.lastIndexOf(prefix)) + (prefix.length()))); } else { name = name.substring(""JACK-INF/"".length()); } } return name; }",5d370b8515797f23d5a7869c9d62cf7ec51e2404,"getNameFromInputVFile(com.android.jack.library.InputLibrary,com.android.sched.vfs.InputVFile)","getNameFromInputVFile(com.android.jack.library.InputLibrary,com.android.sched.vfs.InputVFile)",3,2,"private java.lang.String getNameFromInputVFile(@javax.annotation.Nonnull com.android.jack.library.InputLibrary jackLibrary, @javax.annotation.Nonnull com.android.sched.vfs.InputVFile jppFile) { com.android.sched.util.location.Location loc = jppFile.getLocation(); java.lang.String name; if (loc instanceof com.android.sched.util.location.ZipLocation) { name = ((com.android.sched.util.location.ZipLocation) (jppFile.getLocation())).getEntryName(); if ((jackLibrary.getMajorVersion()) != 0) { name = name.substring(((FileType.JPP.buildDirVPath(VPath.ROOT).split().iterator().next().length()) + 1)); } else { name = name.substring(""JACK-INF/"".length()); } } else { name = ((com.android.sched.util.location.FileLocation) (jppFile.getLocation())).getPath(); if ((jackLibrary.getMajorVersion()) != 0) { java.lang.String prefix = (FileType.JPP.buildDirVPath(VPath.ROOT).split().iterator().next()) + '/'; name = name.substring(((name.lastIndexOf(prefix)) + (prefix.length()))); } else { name = name.substring(""JACK-INF/"".length()); } } return name; }",844ad89a3501a8fd3bf2a6a33c8c42ee6ac699c8,"getNameFromInputVFile(com.android.jack.library.InputLibrary,com.android.sched.vfs.InputVFile)",61677,296,302
15762,ddms_libs_ddmlib_src_com_android_ddmlib_AdbHelper.java,17.0,"public static java.nio.channels.SocketChannel createPassThroughConnection(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int pid) throws java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createJdwpForwardRequest(pid); if ((com.android.ddmlib.AdbHelper.write(adbChan, req)) == false) throw new java.io.IOException(""failed submitting request to ADB""); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) throw new java.io.IOException((""connection request rejected: "" + (resp.message))); adbChan.configureBlocking(true); } catch (java.io.IOException ioe) { adbChan.close(); throw ioe; } return adbChan; }",0d9c730324ac4f121df14b7de9cbc02700391cd8,"public static java.nio.channels.SocketChannel createPassThroughConnection(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int pid) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createJdwpForwardRequest(pid); com.android.ddmlib.AdbHelper.write(adbChan, req); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) { throw new java.io.IOException((""connection request rejected: "" + (resp.message))); } adbChan.configureBlocking(true); } finally { adbChan.close(); } return adbChan; }",ae0464cd696878e1da6d59e5751b236278422cc6,"createPassThroughConnection(java.net.InetSocketAddress,com.android.ddmlib.Device,int)","createPassThroughConnection(java.net.InetSocketAddress,com.android.ddmlib.Device,int)",3,17,"public static java.nio.channels.SocketChannel createPassThroughConnection(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int pid) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createJdwpForwardRequest(pid); com.android.ddmlib.AdbHelper.write(adbChan, req); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) { throw new java.io.IOException((""connection request rejected: "" + (resp.message))); } adbChan.configureBlocking(true); } catch (com.android.ddmlib.TimeoutException e) { adbChan.close(); throw e; } catch (java.io.IOException e) { adbChan.close(); throw e; } return adbChan; }",6d4cba9445c9d128fc73162deafe2a05f4362ca7,"createPassThroughConnection(java.net.InetSocketAddress,com.android.ddmlib.Device,int)",83704,264,299
525392,java_com_android_server_ethernet_EthernetNetworkFactory.java,22.0,private void postAndWaitForRunnable(java.lang.Runnable r) throws java.lang.InterruptedException { java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); mHandler.post(() -> { try { r.run(); } finally { latch.countDown(); } }); latch.await(); },c4cbde3dc7e8daeffa89055bdce6af75209d5818,private com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState networkForRequest(NetworkRequest request) { java.lang.String requestedIface = null; android.net.NetworkSpecifier specifier = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.net.StringNetworkSpecifier) (specifier)).specifier; } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(requestedIface); network = (n.statisified(request.networkCapabilities)) ? n : null; } else { for (com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } return network; },e2f9ff80b6956798723f0b3c8d623b16edde4847,postAndWaitForRunnable(java.lang.Runnable),networkForRequest(android.net.NetworkRequest),7,15,"private com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState networkForRequest(NetworkRequest request) { java.lang.String requestedIface = null; android.net.NetworkSpecifier specifier = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.net.StringNetworkSpecifier) (specifier)).specifier; } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(requestedIface); if ((n != null) && (n.statisified(request.networkCapabilities))) { network = n; } } else { for (com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.i(com.android.server.ethernet.EthernetNetworkFactory.TAG, (((""networkForRequest, request: "" + request) + "", network: "") + network)); } return network; }",b9b2cf43eb76c25301a2fff2b9cde9c6b236a9ae,networkForRequest(android.net.NetworkRequest),177921,227,299
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,28.0,"@org.junit.Test public void aget_wide() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_WIDE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",6b3d7014493cecb681607eecce152f4b4405bf4a,"@org.junit.Test public void aget_wide() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_WIDE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",a5cf90f88fd3d18717c3e6d416a0f289963d1c71,aget_wide(),aget_wide(),4,28,"@org.junit.Test public void aget_wide() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_WIDE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",bc5b0ef54949555437a90445584ce7b0727462c6,aget_wide(),418904,112,110
81416,tests_tests_renderscript_src_android_renderscript_cts_TestPown.java,,,,"private void checkPownFloat4Int4() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inY, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPownFloat4Int4(inX, out); verifyResultsPownFloat4Int4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPownFloat4Int4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPownFloat4Int4(inX, out); verifyResultsPownFloat4Int4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPownFloat4Int4: "" + (e.toString()))); } }",02d90ab854b10430a6cb129902196229d12c7b20,,checkPownFloat4Int4(),9,6,"private void checkPownFloat4Int4Float4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 8337547971844149649L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 4, 8337547971844149649L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPownFloat4Int4Float4(inX, out); verifyResultsPownFloat4Int4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPownFloat4Int4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPownFloat4Int4Float4(inX, out); verifyResultsPownFloat4Int4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPownFloat4Int4Float4: "" + (e.toString()))); } }",f5ce3c08cd74bb0ac67c59ec6efa65aa0ac29d49,checkPownFloat4Int4Float4(),143285,448,400
110925,jack_src_com_android_jack_backend_jayce_JayceSingleTypeWriter.java,2.0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { com.android.sched.vfs.VPath filePath = getFilePath(type); com.android.sched.vfs.OutputVFile vFile = outputDir.createOutputVFile(filePath); try { java.io.OutputStream out = new java.io.BufferedOutputStream(vFile.openWrite()); try { com.android.jack.jayce.JayceWriter writer = new com.android.jack.jayce.JayceWriter(out); writer.write(type, (""jack "" + (com.android.jack.Jack.getVersionString()))); if (com.android.sched.util.config.ThreadConfig.get(JackIncremental.GENERATE_COMPILER_STATE).booleanValue()) { assert vFile instanceof com.android.sched.vfs.DirectFile; com.android.jack.experimental.incremental.CompilerState csm = com.android.jack.experimental.incremental.JackIncremental.getCompilerState(); assert csm != null; csm.addMappingBetweenJavaFileAndTypeName(type.getSourceInfo().getFileName(), com.android.jack.experimental.incremental.JackIncremental.getFormatter().getName(type)); } } finally { out.close(); } } catch (java.io.IOException e) { throw new com.android.jack.JackFileException(((""Could not write Jack file to output '"" + vFile) + ""'""), e); } }",07938a140e3ff1d8d2121c88246739a50304ef43,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { com.android.sched.vfs.OutputVFile vFile = outputLibrary.getJayceOutputVFile(type); try { java.io.OutputStream out = new java.io.BufferedOutputStream(vFile.openWrite()); try { com.android.jack.jayce.JayceWriter writer = new com.android.jack.jayce.JayceWriter(out); writer.write(type, (""jack "" + (com.android.jack.Jack.getVersionString()))); if (com.android.sched.util.config.ThreadConfig.get(JackIncremental.GENERATE_COMPILER_STATE).booleanValue()) { assert vFile instanceof com.android.sched.vfs.DirectFile; com.android.jack.experimental.incremental.CompilerState csm = com.android.jack.experimental.incremental.JackIncremental.getCompilerState(); assert csm != null; csm.addMappingBetweenJavaFileAndTypeName(type.getSourceInfo().getFileName(), com.android.jack.experimental.incremental.JackIncremental.getFormatter().getName(type)); } } finally { out.close(); } } catch (java.io.IOException e) { throw new com.android.jack.JackFileException(((""Could not write Jack file to output '"" + vFile) + ""'""), e); } }",ce61e8d0252b92c14bbe8ac15f6e8a2ac1459e2d,run(com.android.jack.ir.ast.JDefinedClassOrInterface),run(com.android.jack.ir.ast.JDefinedClassOrInterface),4,2,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { com.android.sched.vfs.OutputVFile vFile = outputLibrary.getJayceOutputVFile(new com.android.sched.vfs.VPath(com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(type), '/')); try { java.io.OutputStream out = new java.io.BufferedOutputStream(vFile.openWrite()); try { com.android.jack.jayce.JayceWriter writer = new com.android.jack.jayce.JayceWriter(out); writer.write(type, (""jack "" + (com.android.jack.Jack.getVersionString()))); if (com.android.sched.util.config.ThreadConfig.get(JackIncremental.GENERATE_COMPILER_STATE).booleanValue()) { assert vFile instanceof com.android.sched.vfs.DirectFile; com.android.jack.experimental.incremental.CompilerState csm = com.android.jack.experimental.incremental.JackIncremental.getCompilerState(); assert csm != null; csm.addMappingBetweenJavaFileAndTypeName(type.getSourceInfo().getFileName(), com.android.jack.experimental.incremental.JackIncremental.getFormatter().getName(type)); } } finally { out.close(); } } catch (java.io.IOException e) { throw new com.android.jack.JackFileException(((""Could not write Jack file to output '"" + vFile) + ""'""), e); } }",041849e520b2cc0802a7c4aa37e6d54d9924e7bf,run(com.android.jack.ir.ast.JDefinedClassOrInterface),415619,326,359
96685,build-system_gradle_src_fromGradle_groovy_com_android_build_gradle_internal_test_report_OverviewPageRenderer.java,2.0,"@java.lang.Override protected void registerTabs() { addFailuresTab(); if (!(getResults().getPackages().isEmpty())) { addTab(""Packages"", new org.gradle.internal.ErroringAction<org.gradle.api.internal.html.SimpleHtmlWriter>() { @java.lang.Override protected void doExecute(org.gradle.api.internal.html.SimpleHtmlWriter writer) throws java.io.IOException { renderPackages(writer); } }); } addTab(""Classes"", new org.gradle.internal.ErroringAction<org.gradle.api.internal.html.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(org.gradle.api.internal.html.SimpleHtmlWriter htmlWriter) throws java.io.IOException { renderClasses(htmlWriter); } }); }",6b6a88ef6fc0ff4905c7ba05f468042d1cee2e48,"@java.lang.Override protected void registerTabs() { addFailuresTab(); if (!(getResults().getPackages().isEmpty())) { addTab(""Packages"", new org.gradle.internal.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override protected void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter writer) throws java.io.IOException { renderPackages(writer); } }); } addTab(""Classes"", new org.gradle.internal.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter htmlWriter) throws java.io.IOException { renderClasses(htmlWriter); } }); }",b0274b4b90f1f9ca80a65bddebdb05901b0ac97d,registerTabs(),registerTabs(),4,2,"@java.lang.Override protected void registerTabs() { addFailuresTab(); if (!(getResults().getPackages().isEmpty())) { addTab(""Packages"", new com.android.build.gradle.internal.test.report.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override protected void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter writer) throws java.io.IOException { renderPackages(writer); } }); } addTab(""Classes"", new com.android.build.gradle.internal.test.report.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter htmlWriter) throws java.io.IOException { renderClasses(htmlWriter); } }); }",1ca086ea022cc331f56a28283f67dda74fdaa794,registerTabs(),383432,188,204
129912,benchmarks_src_benchmarks_regression_RelativeDateTimeFormatterBenchmark.java,,,,"public void timeRelativeDateTimeFormatter_getRelativeTimeSpanString(int reps) throws java.lang.Exception { java.util.Locale l = java.util.Locale.US; java.util.TimeZone utc = java.util.TimeZone.getTimeZone(""UTC""); int flags = 0; for (int rep = 0; rep < reps; ++rep) { getRelativeTimeSpanString(l, utc, 0L, 0L, 0L, flags); } }",69797c4779cea198f2d77817094421e955ab5fb9,,timeRelativeDateTimeFormatter_getRelativeTimeSpanString(int),5,2,"public void timeRelativeDateTimeFormatter_getRelativeTimeSpanString(int reps) throws java.lang.Exception { java.util.Locale l = java.util.Locale.US; java.util.TimeZone utc = java.util.TimeZone.getTimeZone(""Europe/London""); int flags = 0; for (int rep = 0; rep < reps; ++rep) { libcore.icu.RelativeDateTimeFormatter.getRelativeTimeSpanString(l, utc, 0L, 0L, 0L, flags); } }",7a66c489b192c4df82c61a125cf90f85ef213efa,timeRelativeDateTimeFormatter_getRelativeTimeSpanString(int),23702,103,113
113821,src_com_google_gct_idea_elysium_UserSelector.java,,,,@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { com.google.gct.login.CredentialedUser user = ((com.google.gct.login.CredentialedUser) (myJList.getSelectedValue())); if ((user != null) && (!(user instanceof com.google.gct.idea.elysium.UserSelector.PopupPanel.EmptyMarker))) { this.setText(user.getEmail()); javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { com.google.gct.idea.elysium.UserSelector.this.hidePopup(); } }); } },ab02f8a3a35ad9c24142e322804af8d2626a2ef9,,valueChanged(javax.swing.event.ListSelectionEvent),6,15,@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { java.lang.Object user = myJList.getSelectedValue(); if ((user != null) && (user instanceof com.google.gct.login.CredentialedUser)) { this.setText(((com.google.gct.login.CredentialedUser) (user)).getEmail()); javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { com.google.gct.idea.elysium.UserSelector.this.hidePopup(); } }); } },c3a31c2d8e7f991949e5fa122a54fafa94ad25f0,valueChanged(javax.swing.event.ListSelectionEvent),516036,153,135
80701,sdk-common_src_main_java_com_android_ide_common_internal_ExecutorSingleton.java,,,,public static void shutdown() { com.android.ide.common.internal.ExecutorSingleton.checkExecutor(); com.android.ide.common.internal.ExecutorSingleton.sExecutorService.shutdown(); com.android.ide.common.internal.ExecutorSingleton.sExecutorService = com.android.ide.common.internal.ExecutorSingleton.create(); },a41a6397a19f7229d9138799090f5b2cbcab53f7,,shutdown(),3,2,public static synchronized void shutdown() { if ((com.android.ide.common.internal.ExecutorSingleton.sExecutorService) != null) { com.android.ide.common.internal.ExecutorSingleton.sExecutorService.shutdown(); com.android.ide.common.internal.ExecutorSingleton.sExecutorService = null; } },1c42c342710df679d2dcdf98f7cb5e5f5e63c01f,shutdown(),242430,72,68
128670,src_com_android_nfc_cardemulation_RegisteredT3tIdentifiersCache.java,,,,"public void dump(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { pw.println("" T3T Identifier cache entries: ""); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mT3tIdentifiersCache.entrySet()) { pw.println(("" NFCID2: "" + (entry.getKey()))); pw.println("" NfcFServiceInfo: ""); entry.getValue().dump(fd, pw, args); } pw.println(""""); mRoutingManager.dump(fd, pw, args); pw.println(""""); }",66812d12ef2080a667e59c773e7aded7595acafc,,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",10,7,"public void dump(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { pw.println("" T3T Identifier cache entries: ""); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mForegroundT3tIdentifiersCache.entrySet()) { pw.println(("" NFCID2: "" + (entry.getKey()))); pw.println("" NfcFServiceInfo: ""); entry.getValue().dump(fd, pw, args); } pw.println(""""); mRoutingManager.dump(fd, pw, args); pw.println(""""); }",16fda8505c82c46dfc8552c5752dbd616836bf19,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",148744,146,147
151050,tests_tests_tv_src_android_media_tv_cts_TvInputManagerTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void testIsParentalControlsEnabled() { mManager.isParentalControlsEnabled(); },6281360d31ad1b9714ebf24c6bd18ba1c6f9aaab,,testIsParentalControlsEnabled(),5,8,public void testIsParentalControlsEnabled() { if (!(android.media.tv.cts.Utils.hasTvInputFramework(getActivity()))) { return; } try { mManager.isParentalControlsEnabled(); } catch (java.lang.Exception e) { fail(); } },8c3cfe54b99bbc88cd2b425f3d501e389089672e,testIsParentalControlsEnabled(),227170,20,60
161052,sched_src_com_android_sched_vfs_UnionVFS.java,,,,@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file) { return file.getWrappedFiles().get(0).getLocation(); },7c03adb5e1b8c78f625d82e5c08064262620f620,,getVFileLocation(com.android.sched.vfs.UnionVFS$UnionVFile),15,43,@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file) { return file.getWrappedFile().getLocation(); },4750a0a9a3d6ce9873c6e50db6fcf776c6dd45fe,getVFileLocation(com.android.sched.vfs.UnionVFS$UnionVFile),316803,61,59
44167,luni_src_test_java_org_apache_harmony_xnet_provider_jsse_NativeCryptoTest.java,12.0,"public void test_SSL_do_handshake_NULL_SSL() throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_do_handshake(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, 0, false, null); fail(); } catch (java.lang.NullPointerException expected) { } }",840b905379a4b4f7d30684a02003c410f0bf2f16,"public void test_SSL_do_handshake_NULL_SSL() throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_do_handshake(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, 0, false, null); fail(); } catch (java.lang.NullPointerException expected) { } org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors(); }",14ed4ecc6184c5185a5962d7a250bd1e61247ca3,test_SSL_do_handshake_NULL_SSL(),test_SSL_do_handshake_NULL_SSL(),3,12,"public void test_SSL_do_handshake_NULL_SSL() throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_do_handshake(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, 0, false, null); fail(); } catch (java.lang.NullPointerException expected) { } }",840b905379a4b4f7d30684a02003c410f0bf2f16,test_SSL_do_handshake_NULL_SSL(),183843,116,93
98408,luni_src_main_java_libcore_icu_ICU.java,21.0,private static native java.lang.String getISO3LanguageNative(java.lang.String languageTag);,48c9f94059b34157a5ef279a8bf7b357bf235d19,public static native java.lang.String getISO3Language(java.lang.String languageCode);,b7cfda69b947db512fc3ac821f9ed800ca37ce0f,getISO3LanguageNative(java.lang.String),getISO3Language(java.lang.String),3,53,public static native java.lang.String getISO3Language(java.lang.String languageTag);,ec32086bf9c9372e383c83cc940f8cc1bd420594,getISO3Language(java.lang.String),61027,21,21
641824,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testJustAuth() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, null, false, 1, true); }",d4fab0516be10c90941022317a0d4a2ff50986e1,,testJustAuth(),5,21,"public void testAuthTcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, true, 1, true); }",badb58d88214df98a7a79f9c44b63596319e2903,testAuthTcp4UdpEncap(),326426,155,145
21933,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_PackagesPage.java,19.0,"private void postCreate() { if ((mUpdaterData) != null) { mTextSdkOsPath.setText(mUpdaterData.getOsSdkRoot()); } mTreeViewer.setContentProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgContentProvider()); mColumnApi.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnApi))); mColumnName.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnName))); mColumnStatus.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnStatus))); mColumnRevision.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnRevision))); org.eclipse.swt.graphics.FontData fontData = mTree.getFont().getFontData()[0]; fontData.setStyle(SWT.ITALIC); mTreeFontItalic = new org.eclipse.swt.graphics.Font(mTree.getDisplay(), fontData); mColorUpdate = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 255, 204); mColorNew = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 238, 204); mTree.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { mTreeFontItalic.dispose(); mColorUpdate.dispose(); mColorNew.dispose(); mTreeFontItalic = null; mColorUpdate = null; mColorNew = null; } }); }",b91cf74f59e66093167eba6cc4c5d741a5098182,"private void postCreate() { if ((mUpdaterData) != null) { mTextSdkOsPath.setText(mUpdaterData.getOsSdkRoot()); } mTreeViewer.setContentProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgContentProvider()); mColumnApi.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnApi))); mColumnName.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnName))); mColumnStatus.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnStatus))); mColumnRevision.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnRevision))); org.eclipse.swt.graphics.FontData fontData = mTree.getFont().getFontData()[0]; fontData.setStyle(SWT.ITALIC); mTreeFontItalic = new org.eclipse.swt.graphics.Font(mTree.getDisplay(), fontData); mColorUpdate = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 255, 204); mColorNew = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 238, 204); mTree.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { mTreeFontItalic.dispose(); mColorUpdate.dispose(); mColorNew.dispose(); mTreeFontItalic = null; mColorUpdate = null; mColorNew = null; } }); mStatusButton.setImage(getImage(""status_ok_16.png"")); }",1dfe1dd7355dde1a79560089385f88c293866a0d,postCreate(),postCreate(),8,21,"private void postCreate() { if ((mUpdaterData) != null) { mTextSdkOsPath.setText(mUpdaterData.getOsSdkRoot()); } mTreeViewer.setContentProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgContentProvider()); mColumnApi.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnApi))); mColumnName.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnName))); mColumnStatus.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnStatus))); mColumnRevision.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnRevision))); org.eclipse.swt.graphics.FontData fontData = mTree.getFont().getFontData()[0]; fontData.setStyle(SWT.ITALIC); mTreeFontItalic = new org.eclipse.swt.graphics.Font(mTree.getDisplay(), fontData); mColorUpdate = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 255, 204); mColorNew = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 238, 204); mTree.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { mTreeFontItalic.dispose(); mColorUpdate.dispose(); mColorNew.dispose(); mTreeFontItalic = null; mColorUpdate = null; mColorNew = null; } }); }",b91cf74f59e66093167eba6cc4c5d741a5098182,postCreate(),397718,459,443
61530,luni_src_test_java_libcore_xml_PullParserTest.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testEofInEntityValue() throws java.lang.Exception { assertParseFailure(""<!ENTITY aaa \""unterminated""); }",b4a821c1bfc6df9de677fb5b3fcadacbab27759a,,testEofInEntityValue(),2,23,"public void testEofInEntityValue() throws java.lang.Exception { assertParseFailure(""<!DOCTYPE foo [<!ENTITY aaa \""unterminated""); }",fe534248e6ef5d126daa893ae44a48d618456725,testEofInEntityValue(),16417,29,35
202050,luni_src_test_java_libcore_java_sql_OldPreparedStatementTest.java,39.0,"public void testExecuteQuery() throws java.sql.SQLException { java.lang.String[] queries2 = new java.lang.String[]{ ""update zoo set name='Masha', family='cat' where id=;"", ""insert into hutch (id, animal_id, address) values (1, ?,'Birds-house, 1');"", ""insert into hutch (id, animal_id, address) values (?, 1, 'Horse-house, 5');"", ""create view address as select address from hutch where animal_id=?"" }; for (int i = 0; i < (queries2.length); i++) { java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(queries2[i]); ps.executeQuery(); fail((""SQLException is not thrown for query: "" + (queries2[i]))); } catch (java.sql.SQLException sqle) { } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } } java.lang.String query = ""select * from zoo where id = ?""; java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(query); ps.setInt(1, 1); java.sql.ResultSet rs = ps.executeQuery(); rs.next(); assertEquals(1, rs.getInt(1)); assertEquals(""Kesha"", rs.getString(2)); assertEquals(""parrot"", rs.getString(3)); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } try { ps = conn.prepareStatement(query); ps.setInt(1, 5); java.sql.ResultSet rs = ps.executeQuery(); assertNotNull(rs); assertFalse(rs.next()); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } }",2ef06d07cdba97757b5bc677386ff4f6bb72d8e3,"public void testExecuteQuery() throws java.sql.SQLException { java.lang.String[] queries2 = new java.lang.String[]{ ""update zoo set name='Masha', family='cat' where id=;"", ""insert into hutch (id, animal_id, address) values (1, ?,'Birds-house, 1');"", ""insert into hutch (id, animal_id, address) values (?, 1, 'Horse-house, 5');"" }; for (int i = 0; i < (queries2.length); i++) { java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(queries2[i]); ps.executeQuery(); fail((""SQLException is not thrown for query: "" + (queries2[i]))); } catch (java.sql.SQLException sqle) { } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } } try { java.sql.PreparedStatement ps = null; java.lang.String query = ""create view address as select address from hutch where animal_id=?""; ps = conn.prepareStatement(query); ps.executeQuery(); ps = conn.prepareStatement(""select * from address""); ps.executeQuery(); fail((""SQLException is not thrown for query: "" + query)); } catch (java.lang.Exception sqle) { } java.lang.String query = ""select * from zoo where id = ?""; java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(query); ps.setInt(1, 1); java.sql.ResultSet rs = ps.executeQuery(); rs.next(); assertEquals(1, rs.getInt(1)); assertEquals(""Kesha"", rs.getString(2)); assertEquals(""parrot"", rs.getString(3)); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } try { ps = conn.prepareStatement(query); ps.setInt(1, 5); java.sql.ResultSet rs = ps.executeQuery(); assertNotNull(rs); assertFalse(rs.next()); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } }",697871b3df1f25ba1a8088f1cf96294c5953933f,testExecuteQuery(),testExecuteQuery(),2,39,"public void testExecuteQuery() throws java.sql.SQLException { java.lang.String[] queries2 = new java.lang.String[]{ ""update zoo set name='Masha', family='cat' where id=;"", ""insert into hutch (id, animal_id, address) values (1, ?,'Birds-house, 1');"", ""insert into hutch (id, animal_id, address) values (?, 1, 'Horse-house, 5');"" }; for (int i = 0; i < (queries2.length); i++) { java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(queries2[i]); ps.executeQuery(); fail((""SQLException is not thrown for query: "" + (queries2[i]))); } catch (java.sql.SQLException sqle) { } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } } java.lang.String query = ""select * from zoo where id = ?""; java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(query); ps.setInt(1, 1); java.sql.ResultSet rs = ps.executeQuery(); rs.next(); assertEquals(1, rs.getInt(1)); assertEquals(""Kesha"", rs.getString(2)); assertEquals(""parrot"", rs.getString(3)); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } try { ps = conn.prepareStatement(query); ps.setInt(1, 5); java.sql.ResultSet rs = ps.executeQuery(); assertNotNull(rs); assertFalse(rs.next()); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } }",ff330ee3d36251076c6446872d5f38bd38dd2ca2,testExecuteQuery(),192586,461,372
159710,tests_tests_hardware_src_android_hardware_camera2_cts_testcases_Camera2SurfaceViewTestCase.java,25.0,"protected void openDevice(java.lang.String cameraId) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, mCameraListener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); mMinPreviewFrameDurationMap = mStaticInfo.getAvailableMinFrameDurationsForFormatChecked(ImageFormat.YUV_420_888); }",e356b7ea2b8af1a333abf8a2da9d2d0b780d9400,"protected void openDevice(java.lang.String cameraId) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, mCameraListener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, getDisplaySize()); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); mMinPreviewFrameDurationMap = mStaticInfo.getAvailableMinFrameDurationsForFormatChecked(ImageFormat.YUV_420_888); }",029a2ea21d2da5af79d8c63e1dc93f77aab90cb3,openDevice(java.lang.String),openDevice(java.lang.String),4,24,"protected void openDevice(java.lang.String cameraId) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, mCameraListener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, getPreviewSizeBound(mWindowManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND)); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); mMinPreviewFrameDurationMap = mStaticInfo.getAvailableMinFrameDurationsForFormatChecked(ImageFormat.YUV_420_888); }",7cd9859fb3072c91fa364d126dcbcf7277e04258,openDevice(java.lang.String),204122,228,253
81416,tests_tests_renderscript_src_android_renderscript_cts_TestExp10.java,,,,public void testExp10() { checkExp10Float(); checkExp10Float2(); checkExp10Float3(); checkExp10Float4(); },a11086c0ffd93cc2bbfef4f58bbae6d232fa99f2,,testExp10(),9,0,public void testExp10() { checkExp10FloatFloat(); checkExp10Float2Float2(); checkExp10Float3Float3(); checkExp10Float4Float4(); },65d6b12c31ca210429e929bc50447f96d6afb70a,testExp10(),143011,31,38
273763,tests_wifitests_src_com_android_server_wifi_util_WifiPermissionsUtilTest.java,,,,"private static java.lang.String getFailureMessage(int input) { java.lang.StringBuilder newString = new java.lang.StringBuilder(); newString.append(((""Test input :"" + input) + ""\n"")); for (int i = 0; i < (com.android.server.wifi.util.WifiPermissionsUtilTest.MAX_PERMISSIONS); i++) { if (com.android.server.wifi.util.WifiPermissionsUtilTest.getValAtOffset(input, i)) { newString.append(((com.android.server.wifi.util.WifiPermissionsUtilTest.sPermissions[i]) + "":\tTrue "")); } else { newString.append(((com.android.server.wifi.util.WifiPermissionsUtilTest.sPermissions[i]) + "":\tFalse "")); } newString.append(""\n""); } return newString.toString(); }",c4909d2ae9be9475f76bdebd8f8b54320f8cf223,,getFailureMessage(int),8,9,private void initTestVars() { mPermissionsList.clear(); mReturnPermission = createPermissionAnswer(); mWifiScanAllowApps = android.app.AppOpsManager.MODE_ERRORED; mUid = com.android.server.wifi.util.WifiPermissionsUtilTest.OTHER_USER_UID; mThrowSecurityException = true; mMockUserInfo.id = android.os.UserHandle.USER_NULL; mMockApplInfo.targetSdkVersion = Build.VERSION_CODES.M; mTargetVersion = Build.VERSION_CODES.M; mPkgNameOfTopActivity = com.android.server.wifi.util.WifiPermissionsUtilTest.INVALID_PACKAGE; mLocationModeSetting = Settings.Secure.LOCATION_MODE_OFF; mCurrentUser = android.os.UserHandle.USER_SYSTEM; mCoarseLocationPermission = android.content.pm.PackageManager.PERMISSION_DENIED; mAllowCoarseLocationApps = android.app.AppOpsManager.MODE_ERRORED; mActiveNwScorer = false; },aaadf86ef6c4c6ec583a788b26e14a25e67ec4e7,initTestVars(),377452,189,221
377238,Common_src_com_googlecode_android_scripting_facade_telephony_ImsManagerFacade.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Resets TelephonyManager settings to factory default."") public void imsFactoryReset() { mImsManager.factoryResetSlot(); }",391163472f4bde6ab8faec31b5487e3d57a7cae8,,imsFactoryReset(),4,5,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Resets ImsManager settings to factory default."") public void imsFactoryReset() { mImsManager.factoryResetSlot(); }",04e1c22cb3bd914c86bf7361d9e5b2a3d7d4f984,imsFactoryReset(),383409,45,46
16822,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gre_RulesEngine.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction> callGetContextMenu(com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode element) { com.android.ide.eclipse.adt.editors.layout.gscripts.IViewRule rule = loadRule(element); if (rule != null) { try { return rule.getContextMenu(); } catch (java.lang.Exception e) { logError(""%s.getContextMenu() failed: %s"", rule.getClass().getSimpleName(), e.toString()); } } return null; }",ab4480792cff1644dc248224cda39595c36b82d1,,callGetContextMenu(com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode),7,14,"public java.util.List<com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction> callGetContextMenu(com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy selectedNode) { com.android.ide.eclipse.adt.editors.layout.gscripts.IViewRule rule = loadRule(selectedNode.getNode()); if (rule != null) { try { return rule.getContextMenu(selectedNode); } catch (java.lang.Exception e) { logError(""%s.getContextMenu() failed: %s"", rule.getClass().getSimpleName(), e.toString()); } } return null; }",1c896810a9db24983f8719880c1e3056f056687f,callGetContextMenu(com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy),95413,147,152
143181,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_tasks_CheckManifest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setManifest(java.io.File manifest) { mManifest = manifest; },4982eebd14a011b17494d72abbcd387c9b482138,,setManifest(java.io.File),8,4,public void setManifest(@com.android.annotations.NonNull java.io.File manifest) { this.manifest = manifest; },0464f1d8db38452d79ed46dbb987be01c67b9ca9,setManifest(java.io.File),512563,19,27
253791,luni_src_main_java_libcore_io_Os.java,83.0,"public void link(java.lang.String oldPath, java.lang.String newPath) throws android.system.ErrnoException;",8b5a5d52c912bd96eeed3a3f939baca48aec4eb9,"public void link(java.lang.String oldPath, java.lang.String newPath) throws libcore.io.ErrnoException;",a0e594355834a6e5b14bfc5cb40f3c45ad1946e9,"link(java.lang.String,java.lang.String)","link(java.lang.String,java.lang.String)",8,80,"public void link(java.lang.String oldPath, java.lang.String newPath) throws android.system.ErrnoException;",8b5a5d52c912bd96eeed3a3f939baca48aec4eb9,"link(java.lang.String,java.lang.String)",494617,31,30
534821,src_com_android_bluetooth_hfp_HeadsetService.java,9.0,"boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (!(mStateMachine.isConnected())) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if (mStateMachine.isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: audio is already ON""); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO); return true; }",b8d81c683afad01f0856db2868f8ce4165aba714,"boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (!(mStateMachine.isConnected())) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if ((mStateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: audio is not idle, current state "" + (mStateMachine.getAudioState()))); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO); return true; }",918bc01460d2d37209e62f1024cfa3681155f06a,connectAudio(),connectAudio(),28,9,"boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: audio is not idle, current state "" + (mStateMachine.getAudioState()))); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, mStateMachine.getCurrentDevice()); return true; }",88741a9d436cc789af38acb2e391156fe893b237,connectAudio(),70956,173,179
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,,"@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.io.IOException { ism.applyTransportModeTransform(mFd, direction, transform); }",fde7c58aec5ee5652263ec366c83dc8e199c08ec,,"applyTransportModeTransform(android.net.IpSecManager,int,android.net.IpSecTransform)",15,34,"@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.lang.Exception { ism.applyTransportModeTransform(mFd, direction, transform); }",0d43741f10cac9ae4003af0d0cd3c67fcef0cba2,"applyTransportModeTransform(android.net.IpSecManager,int,android.net.IpSecTransform)",381467,59,59
230967,apps_CtsVerifier_src_com_android_cts_verifier_sensors_helpers_OpenCVLibrary.java,1.0,"@java.lang.Override public void onManagerConnected(int status) { android.util.Log.v(com.android.cts.verifier.sensors.helpers.OpenCVLibrary.TAG, (""New Loading status: "" + status)); switch (status) { case org.opencv.android.LoaderCallbackInterface.SUCCESS : { com.android.cts.verifier.sensors.helpers.OpenCVLibrary.mLoaded = true; } break; default : { super.onManagerConnected(status); } break; } }",c46a36340eed77ddf357361eec360547c7c216b3,"@java.lang.Override public void onManagerConnected(int status) { android.util.Log.v(com.android.cts.verifier.sensors.helpers.OpenCVLibrary.TAG, (""New Loading status: "" + status)); switch (status) { case org.opencv.android.LoaderCallbackInterface.SUCCESS : { com.android.cts.verifier.sensors.helpers.OpenCVLibrary.mLoaded = true; } break; default : { super.onManagerConnected(status); } break; } done.countDown(); }",20dbed57ed2443442017a97c681bc6d0cc4bda4f,onManagerConnected(int),onManagerConnected(int),2,0,"@java.lang.Override public void onManagerConnected(int status) { android.util.Log.v(com.android.cts.verifier.sensors.helpers.OpenCVLibrary.TAG, (""New Loading status: "" + status)); switch (status) { case org.opencv.android.LoaderCallbackInterface.SUCCESS : { com.android.cts.verifier.sensors.helpers.OpenCVLibrary.sLoaded = true; } break; default : { android.util.Log.e(com.android.cts.verifier.sensors.helpers.OpenCVLibrary.TAG, ""Connecting OpenCV Manager failed""); } break; } done.countDown(); }",d0479e34513725409661bc70fce2476bcac9ff0b,onManagerConnected(int),373096,124,152
155012,sched_src_com_android_sched_util_Version.java,,,,"public boolean isOlderOrEqualsThan(int release, int subRelease) { return ((this.releaseCode) > release) || (((this.releaseCode) == release) && ((this.subReleaseCode) >= subRelease)); }",29e9624008335d5f8149d3cecc79bd9c15440bd6,,"isOlderOrEqualsThan(int,int)",14,8,public boolean isOlderOrEqualsThan(@javax.annotation.Nonnull com.android.sched.util.Version other) throws com.android.sched.util.UncomparableVersion { return (compareTo(other)) <= 0; },cac17817d69fdc512093016eff30ae5d5ec18fd4,isOlderOrEqualsThan(com.android.sched.util.Version),215293,52,46
79091,luni_src_main_java_java_util_Locale.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Locale.Builder setScript(java.lang.String script) { if ((script == null) || (script.isEmpty())) { this.script = """"; return this; } final java.lang.String lowercaseScript = script.toLowerCase(java.util.Locale.ROOT); if (!(java.util.Locale.isValidBcp47Alpha(lowercaseScript, 4, 4))) { throw new java.util.IllformedLocaleException((""Invalid script: "" + script)); } this.script = java.util.Locale.titleCaseAsciiWord(lowercaseScript); return this; }",ce2d66c6f223af2abf4b4c8c7daf34d03219980f,,setScript(java.lang.String),3,30,"public java.util.Locale.Builder setScript(java.lang.String script) { if ((script == null) || (script.isEmpty())) { this.script = """"; return this; } if (!(java.util.Locale.isValidBcp47Alpha(script, 4, 4))) { throw new java.util.IllformedLocaleException((""Invalid script: "" + script)); } this.script = java.util.Locale.titleCaseAsciiWord(script); return this; }",9a6d4104903ba731aa319c6d8bdf15f681b0e491,setScript(java.lang.String),40937,127,104
466677,tests_net_java_com_android_server_IpSecServiceTest.java,3.0,"android.net.IpSecConfig buildIpSecConfig() throws java.lang.Exception { android.net.IpSecManager ipSecManager = new android.net.IpSecManager(mIpSecService); when(mMockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI2); android.net.IpSecAlgorithm encryptAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, com.android.server.IpSecServiceTest.CRYPT_KEY); android.net.IpSecAlgorithm authAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, com.android.server.IpSecServiceTest.AUTH_KEY, ((com.android.server.IpSecServiceTest.AUTH_KEY.length) * 8)); java.net.InetAddress localAddr = java.net.InetAddress.getByAddress(new byte[]{ 127, 0, 0, 1 }); android.net.IpSecManager.SecurityParameterIndex outSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, localAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, localAddr); android.net.IpSecConfig ipSecConfig = new android.net.IpSecTransform.Builder(mMockContext).setSpi(IpSecTransform.DIRECTION_OUT, outSpi).setSpi(IpSecTransform.DIRECTION_IN, inSpi).setEncryption(IpSecTransform.DIRECTION_OUT, encryptAlgo).setAuthentication(IpSecTransform.DIRECTION_OUT, authAlgo).setEncryption(IpSecTransform.DIRECTION_IN, encryptAlgo).setAuthentication(IpSecTransform.DIRECTION_IN, authAlgo).getIpSecConfig(); return ipSecConfig; }",d57c6c4ccdfb56d3ab1cc781232d83f853a482a6,"android.net.IpSecConfig buildIpSecConfig() throws java.lang.Exception { android.net.IpSecManager ipSecManager = new android.net.IpSecManager(mIpSecService); when(mMockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI2); android.net.IpSecAlgorithm encryptAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, com.android.server.IpSecServiceTest.CRYPT_KEY); android.net.IpSecAlgorithm authAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, com.android.server.IpSecServiceTest.AUTH_KEY, ((com.android.server.IpSecServiceTest.AUTH_KEY.length) * 8)); java.net.InetAddress localAddr = java.net.InetAddress.getByAddress(new byte[]{ 127, 0, 0, 1 }); java.net.InetAddress remoteAddr = java.net.InetAddress.getByAddress(new byte[]{ 8, 8, 4, 4 }); android.net.IpSecManager.SecurityParameterIndex outSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, localAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, localAddr); android.net.IpSecConfig config = new android.net.IpSecConfig(); config.setSpiResourceId(IpSecTransform.DIRECTION_IN, inSpi.getResourceId()); config.setSpiResourceId(IpSecTransform.DIRECTION_OUT, outSpi.getResourceId()); config.setEncryption(IpSecTransform.DIRECTION_OUT, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_OUT, authAlgo); config.setEncryption(IpSecTransform.DIRECTION_IN, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_IN, authAlgo); config.setRemoteAddress(remoteAddr); return config; }",55769378a9d649f84207f2c9a3d47efd6d7cf949,buildIpSecConfig(),buildIpSecConfig(),17,3,"android.net.IpSecConfig buildIpSecConfig() throws java.lang.Exception { android.net.IpSecManager ipSecManager = new android.net.IpSecManager(mIpSecService); when(mMockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI2); android.net.IpSecAlgorithm encryptAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, com.android.server.IpSecServiceTest.CRYPT_KEY); android.net.IpSecAlgorithm authAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, com.android.server.IpSecServiceTest.AUTH_KEY, ((com.android.server.IpSecServiceTest.AUTH_KEY.length) * 8)); java.net.InetAddress remoteAddr = java.net.InetAddress.getByName(""8.8.4.4""); android.net.IpSecManager.SecurityParameterIndex outSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, remoteAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, remoteAddr); android.net.IpSecConfig config = new android.net.IpSecConfig(); config.setSpiResourceId(IpSecTransform.DIRECTION_IN, inSpi.getResourceId()); config.setSpiResourceId(IpSecTransform.DIRECTION_OUT, outSpi.getResourceId()); config.setEncryption(IpSecTransform.DIRECTION_OUT, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_OUT, authAlgo); config.setEncryption(IpSecTransform.DIRECTION_IN, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_IN, authAlgo); config.setRemoteAddress(remoteAddr.getHostName()); return config; }",a43890987d06e917226a9d328bd354c4788df67e,buildIpSecConfig(),176162,482,451
152861,perflib_src_main_java_com_android_tools_perflib_heap_Snapshot.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final void addReferenceClass(@com.android.annotations.NonNull com.android.tools.perflib.heap.ClassObj referenceClass) { mReferenceClasses.add(referenceClass); },4cf7b6e3878e9575cc737694bdea2215b432b61c,,addReferenceClass(com.android.tools.perflib.heap.ClassObj),6,1,@com.android.annotations.NonNull public final java.util.Collection<com.android.tools.perflib.heap.ClassObj> findClasses(java.lang.String name) { java.util.ArrayList<com.android.tools.perflib.heap.ClassObj> classObjs = new java.util.ArrayList<com.android.tools.perflib.heap.ClassObj>(); for (int i = 0; i < (mHeaps.size()); i++) { classObjs.addAll(mHeaps.get(i).getClasses(name)); } return classObjs; },a5a98936738dfe0ddda6e4ab651fa47aecaf8515,findClasses(java.lang.String),375580,41,129
246162,tools_signapk_src_com_android_signapk_SignApk.java,17.0,"private static boolean shouldOutputApkEntry(com.android.apksigner.core.ApkSignerEngine apkSigner, java.util.jar.JarFile inFile, java.util.jar.JarEntry inEntry, byte[] tmpbuf) throws java.io.IOException { if (apkSigner == null) { return true; } com.android.apksigner.core.ApkSignerEngine.InputJarEntryInstructions instructions = apkSigner.inputJarEntry(inEntry.getName()); com.android.apksigner.core.ApkSignerEngine.InspectJarEntryRequest inspectEntryRequest = instructions.getInspectJarEntryRequest(); if (inspectEntryRequest != null) { com.android.signapk.SignApk.provideJarEntry(inFile, inEntry, inspectEntryRequest, tmpbuf); } switch (instructions.getOutputPolicy()) { case OUTPUT : return true; case SKIP : case OUTPUT_BY_ENGINE : return false; default : throw new java.lang.RuntimeException((""Unsupported output policy: "" + (instructions.getOutputPolicy()))); } }",2337a9c73c9957d32825226db399898cf1b5a627,"private static boolean shouldOutputApkEntry(com.android.apksig.core.ApkSignerEngine apkSigner, java.util.jar.JarFile inFile, java.util.jar.JarEntry inEntry, byte[] tmpbuf) throws java.io.IOException { if (apkSigner == null) { return true; } com.android.apksig.core.ApkSignerEngine.InputJarEntryInstructions instructions = apkSigner.inputJarEntry(inEntry.getName()); com.android.apksig.core.ApkSignerEngine.InspectJarEntryRequest inspectEntryRequest = instructions.getInspectJarEntryRequest(); if (inspectEntryRequest != null) { com.android.signapk.SignApk.provideJarEntry(inFile, inEntry, inspectEntryRequest, tmpbuf); } switch (instructions.getOutputPolicy()) { case OUTPUT : return true; case SKIP : case OUTPUT_BY_ENGINE : return false; default : throw new java.lang.RuntimeException((""Unsupported output policy: "" + (instructions.getOutputPolicy()))); } }",d8b9cfd830879ccfac55590b862d42c3026f9184,"shouldOutputApkEntry(com.android.apksigner.core.ApkSignerEngine,java.util.jar.JarFile,java.util.jar.JarEntry,byte[])","shouldOutputApkEntry(com.android.apksig.core.ApkSignerEngine,java.util.jar.JarFile,java.util.jar.JarEntry,byte[])",2,17,"private static boolean shouldOutputApkEntry(com.android.apksig.ApkSignerEngine apkSigner, java.util.jar.JarFile inFile, java.util.jar.JarEntry inEntry, byte[] tmpbuf) throws java.io.IOException { if (apkSigner == null) { return true; } com.android.apksig.ApkSignerEngine.InputJarEntryInstructions instructions = apkSigner.inputJarEntry(inEntry.getName()); com.android.apksig.ApkSignerEngine.InspectJarEntryRequest inspectEntryRequest = instructions.getInspectJarEntryRequest(); if (inspectEntryRequest != null) { com.android.signapk.SignApk.provideJarEntry(inFile, inEntry, inspectEntryRequest, tmpbuf); } switch (instructions.getOutputPolicy()) { case OUTPUT : return true; case SKIP : case OUTPUT_BY_ENGINE : return false; default : throw new java.lang.RuntimeException((""Unsupported output policy: "" + (instructions.getOutputPolicy()))); } }",8f702688baedac2b29bcdf07fd4694c9905f8891,"shouldOutputApkEntry(com.android.apksig.ApkSignerEngine,java.util.jar.JarFile,java.util.jar.JarEntry,byte[])",171606,218,212
64620,sdk-common_src_main_java_com_android_ide_common_res2_ValueXmlHelper.java,1.0,"public static java.lang.String escapeResourceString(java.lang.String s) { int n = s.length(); if (n == 0) { return """"; } java.lang.StringBuilder sb = new java.lang.StringBuilder(((s.length()) * 2)); boolean hasSpace = ((s.charAt(0)) == ' ') || ((s.charAt((n - 1))) == ' '); if (hasSpace) { sb.append('""'); } else if (((s.charAt(0)) == '@') || ((s.charAt(0)) == '?')) { sb.append('\\'); } for (int i = 0; i < n; ++i) { char c = s.charAt(i); switch (c) { case '\'' : if (!hasSpace) { sb.append('\\'); } sb.append(c); break; case '""' : case '\\' : sb.append('\\'); sb.append(c); break; case '<' : sb.append(com.android.SdkConstants.LT_ENTITY); break; case '&' : sb.append(com.android.SdkConstants.AMP_ENTITY); break; case '\n' : sb.append(""\\n""); break; case '\t' : sb.append(""\\t""); break; default : sb.append(c); break; } } if (hasSpace) { sb.append('""'); } return sb.toString(); }",5c7ebd334adc16435e8ebc90398705d501b51f4c,"public static java.lang.String escapeResourceString(java.lang.String s) { int n = s.length(); if (n == 0) { return """"; } java.lang.StringBuilder sb = new java.lang.StringBuilder(((s.length()) * 2)); boolean hasSpace = ((s.charAt(0)) == ' ') || ((s.charAt((n - 1))) == ' '); if (hasSpace) { sb.append('""'); } else if (((s.charAt(0)) == '@') || ((s.charAt(0)) == '?')) { sb.append('\\'); } for (int i = 0; i < n; ++i) { char c = s.charAt(i); switch (c) { case '\'' : if (!hasSpace) { sb.append('\\'); } sb.append('\\'); break; case '""' : case '\\' : sb.append('\\'); sb.append(c); break; case '<' : sb.append(com.android.SdkConstants.LT_ENTITY); break; case '&' : sb.append(com.android.SdkConstants.AMP_ENTITY); break; case '\n' : sb.append(""\\n""); break; case '\t' : sb.append(""\\t""); break; default : sb.append(c); break; } } if (hasSpace) { sb.append('""'); } return sb.toString(); }",5c386fd60936c3b89d2e00427489b6e84554aedc,escapeResourceString(java.lang.String),escapeResourceString(java.lang.String),2,1,"public static java.lang.String escapeResourceString(java.lang.String s) { int n = s.length(); if (n == 0) { return """"; } java.lang.StringBuilder sb = new java.lang.StringBuilder(((s.length()) * 2)); boolean hasSpace = ((s.charAt(0)) == ' ') || ((s.charAt((n - 1))) == ' '); if (hasSpace) { sb.append('""'); } else if (((s.charAt(0)) == '@') || ((s.charAt(0)) == '?')) { sb.append('\\'); } for (int i = 0; i < n; ++i) { char c = s.charAt(i); switch (c) { case '\'' : if (!hasSpace) { sb.append('\\'); } sb.append(c); break; case '""' : case '\\' : sb.append('\\'); sb.append(c); break; case '<' : sb.append(com.android.SdkConstants.LT_ENTITY); break; case '&' : sb.append(com.android.SdkConstants.AMP_ENTITY); break; case '\n' : sb.append(""\\n""); break; case '\t' : sb.append(""\\t""); break; default : sb.append(c); break; } } if (hasSpace) { sb.append('""'); } return sb.toString(); }",5c7ebd334adc16435e8ebc90398705d501b51f4c,escapeResourceString(java.lang.String),103530,306,307
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,2.0,"public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { final android.net.NetworkStats stats = readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); final android.util.ArrayMap<java.lang.String, java.lang.String> stackedIfaces; synchronized(com.android.internal.net.NetworkStatsFactory.sStackedIfaces) { stackedIfaces = new android.util.ArrayMap(com.android.internal.net.NetworkStatsFactory.sStackedIfaces); } final android.net.NetworkStats adjustments = new android.net.NetworkStats(0, stackedIfaces.size()); android.net.NetworkStats.Entry entry = null; for (int i = 0; i < (stats.size()); i++) { entry = stats.getValues(i, entry); if (((entry.iface) == null) || (!(entry.iface.startsWith(com.android.internal.net.NetworkStatsFactory.CLATD_INTERFACE_PREFIX)))) { continue; } final java.lang.String baseIface = stackedIfaces.get(entry.iface); if (baseIface == null) { continue; } android.net.NetworkStats.Entry adjust = new android.net.NetworkStats.Entry(baseIface, 0, 0, 0, 0, 0, 0, 0L, 0L, 0L, 0L, 0L); adjust.rxBytes -= (entry.rxBytes) + ((entry.rxPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA)); adjust.txBytes -= (entry.txBytes) + ((entry.txPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA)); adjust.rxPackets -= entry.rxPackets; adjust.txPackets -= entry.txPackets; adjustments.combineValues(adjust); entry.rxBytes = (entry.rxPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA); entry.txBytes = (entry.txPackets) * (com.android.internal.net.NetworkStatsFactory.IPV4V6_HEADER_DELTA); entry.rxPackets = 0; entry.txPackets = 0; stats.combineValues(entry); } stats.combineAllValues(adjustments); return stats; }",8a10ab03470ee96e69ea06d22758af1012009736,"public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { return readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); }",3a69a0b12ec1045bada91e3c73f3e594e3bc7aad,"readNetworkStatsDetail(int,java.lang.String[],int,android.net.NetworkStats)","readNetworkStatsDetail(int,java.lang.String[],int,android.net.NetworkStats)",11,10,"public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { final android.net.NetworkStats stats = readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); stats.apply464xlatAdjustments(com.android.internal.net.NetworkStatsFactory.sStackedIfaces); return stats; }",33fc88897fff42231db48a1e5ae0b6e2738432cd,"readNetworkStatsDetail(int,java.lang.String[],int,android.net.NetworkStats)",129352,67,106
67496,java_src_test_java_com_google_protobuf_NanoTest.java,52.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void testNullRepeatedFields() { com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedInt32 = null; com.google.protobuf.nano.MessageNano.toByteArray(message); assertNotNull(message.toString()); message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedNestedEnum = null; com.google.protobuf.nano.MessageNano.toByteArray(message); assertNotNull(message.toString()); },e05c6609d7774c3a2ea77573a66a8c1de873e0aa,,testNullRepeatedFields(),5,56,"public void testNullRepeatedFields() throws java.lang.Exception { com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedInt32 = null; com.google.protobuf.nano.MessageNano.toByteArray(message); message.toString(); message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedNestedEnum = null; com.google.protobuf.nano.MessageNano.toByteArray(message); message.toString(); message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedBytes = null; com.google.protobuf.nano.MessageNano.toByteArray(message); message.toString(); message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedNestedMessage = null; com.google.protobuf.nano.MessageNano.toByteArray(message); message.toString(); com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano secondMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage nested = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage(); nested.bb = 55; secondMessage.repeatedNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage[]{ nested }; message.mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano.newInstance(com.google.protobuf.nano.MessageNano.toByteArray(secondMessage))); assertEquals(55, message.repeatedNestedMessage[0].bb); }",792be5ca3f7a9bcd5054ac0bb2884429c1abd48d,testNullRepeatedFields(),405589,125,389
91995,luni_src_main_java_libcore_io_ForwardingOs.java,86.0,"public void msync(long address, long byteCount, int flags) throws libcore.io.ErrnoException { os.msync(address, byteCount, flags); }",79ae65b01ff3d45182c670441c4cb01aff47b467,"public void msync(long address, long byteCount, int flags) throws android.os.ErrnoException { os.msync(address, byteCount, flags); }",4137919c5c27ec491ccfb10ed1c7c299d41ed08e,"msync(long,long,int)","msync(long,long,int)",3,86,"public void msync(long address, long byteCount, int flags) throws android.system.ErrnoException { os.msync(address, byteCount, flags); }",a3cce86780afadb850a6ee2a0d82452dd9161e75,"msync(long,long,int)",170451,37,37
120760,jack_src_com_android_jack_ir_ast_JDefinedClassOrInterface.java,28.0,"@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JMethodId getMethodId(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.util.List<? extends com.android.jack.ir.ast.JType> argsType, @javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind) throws com.android.jack.lookup.JMethodLookupException { assert !((name.contains(""("")) || (name.contains("")""))); loader.ensureMethods(this); for (com.android.jack.ir.ast.JMethod method : methods) { com.android.jack.ir.ast.JMethodId id = method.getMethodId(); if (id.equals(name, argsType)) { return id; } } for (com.android.jack.ir.ast.JInterface jType : getImplements()) { try { return jType.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } com.android.jack.ir.ast.JClass superClass = getSuperClass(); if (superClass != null) { try { return superClass.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } throw new com.android.jack.lookup.JMethodIdLookupException(this, name, argsType); }",290a2bece813197bdc7f8ba51b2b0ab2c2c4b228,"@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JMethodId getMethodId(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.util.List<? extends com.android.jack.ir.ast.JType> argsType, @javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind) throws com.android.jack.lookup.JMethodLookupException { assert !((name.contains(""("")) || (name.contains("")""))); loader.ensureMethods(this); for (com.android.jack.ir.ast.JMethod method : methods) { com.android.jack.ir.ast.JMethodId id = method.getMethodId(); if ((id.equals(name, argsType)) && ((id.getKind()) == kind)) { return id; } } for (com.android.jack.ir.ast.JInterface jType : getImplements()) { try { return jType.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } com.android.jack.ir.ast.JClass superClass = getSuperClass(); if (superClass != null) { try { return superClass.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } throw new com.android.jack.lookup.JMethodIdLookupException(this, name, argsType); }",1764068869a297e90f594bc6d5339d3fb3a76e9e,"getMethodId(java.lang.String,java.util.List,com.android.jack.ir.ast.MethodKind)","getMethodId(java.lang.String,java.util.List,com.android.jack.ir.ast.MethodKind)",3,28,"@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JMethodId getMethodId(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.util.List<? extends com.android.jack.ir.ast.JType> argsType, @javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind) throws com.android.jack.lookup.JMethodLookupException { assert !((name.contains(""("")) || (name.contains("")""))); loader.ensureMethods(this); for (com.android.jack.ir.ast.JMethod method : methods) { com.android.jack.ir.ast.JMethodId id = method.getMethodId(); if (id.equals(name, argsType, kind)) { return id; } } for (com.android.jack.ir.ast.JInterface jType : getImplements()) { try { return jType.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } com.android.jack.ir.ast.JClass superClass = getSuperClass(); if (superClass != null) { try { return superClass.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } throw new com.android.jack.lookup.JMethodIdLookupException(this, name, argsType); }",ecf68b046471d6e4d7b769a88cdd7a0a7f8ac708,"getMethodId(java.lang.String,java.util.List,com.android.jack.ir.ast.MethodKind)",301534,341,332
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAbs.java,,,,"private void verifyResultsAbsInt(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 1]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 1]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 1; j++) { android.renderscript.cts.TestAbs.ArgumentsIntUint args = new android.renderscript.cts.TestAbs.ArgumentsIntUint(); args.inValue = arrayInValue[i]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int actualOut = arrayOut[((i * 1) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals((((((((((((((((((""Incorrect output for checkAbsInt"" + (relaxed ? ""_relaxed"" : """")) + "" @["") + i) + "", "") + j) + ""] with ulf:"") + ulf) + "".\n"") + ""Input inValue:"") + (args.inValue)) + ""\n"") + ""Expected output out:"") + (args.out)) + ""\n"") + ""Actual output out:"") + actualOut) + ""\n""), args.out, actualOut, ulpf); } } }",40ebcca5e88da1c6d30b083d0629db0fe2e707b9,,"verifyResultsAbsInt(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",9,19,"private void verifyResultsAbsIntUint(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 1]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 1]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 1; j++) { android.renderscript.cts.TestAbs.ArgumentsIntUint args = new android.renderscript.cts.TestAbs.ArgumentsIntUint(); args.inValue = arrayInValue[i]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 1) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format(""Input inValue: %d"", args.inValue)); message.append(""\n""); message.append(java.lang.String.format(""Expected output out: %x"", args.out)); message.append(""\n""); message.append(java.lang.String.format(""Actual output out: %x"", arrayOut[((i * 1) + j)])); if ((args.out) != (arrayOut[((i * 1) + j)])) { message.append("" FAIL""); } message.append(""\n""); assertTrue((((""Incorrect output for checkAbsIntUint"" + (relaxed ? ""_relaxed"" : """")) + "":\n"") + (message.toString())), valid); } } } }",d876b547d9b5c097038877c96e3fc54ecc8d4e09,"verifyResultsAbsIntUint(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",143050,362,419
306994,sched_src_com_android_sched_vfs_CachedDirectFS.java,30.0,"@java.lang.SuppressWarnings(""resource"") @javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); VFSStatCategory.DIR_WRITE.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { java.io.OutputStream os = new java.io.FileOutputStream(path, append); assert (os = trackOpenedStream(os, file)) != null; return os; } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }",141752745b57d3f3b643ecb7d5d95939164ee544,"@java.lang.SuppressWarnings(""resource"") @javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); VFSStatCategory.DIR_WRITE.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { java.io.OutputStream os = new java.io.FileOutputStream(path, append); assert (os = trackOpenedStream(os, file)) != null; return os; } catch (java.io.FileNotFoundException e) { com.android.sched.vfs.DirectFS.handleFileNotFound(e, path, file.getLocation()); throw new java.lang.AssertionError(e); } }",f09a471dc6e01d277f7185fc6d5c851daa7bc079,"openWrite(com.android.sched.vfs.CachedDirectFS$CachedParentVFile,boolean)","openWrite(com.android.sched.vfs.CachedDirectFS$CachedParentVFile,boolean)",3,30,"@java.lang.SuppressWarnings(""resource"") @javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); VFSStatCategory.DIR_WRITE.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { java.io.OutputStream os = new java.io.FileOutputStream(path, append); assert (os = trackOpenedStream(os, file)) != null; return os; } catch (java.io.FileNotFoundException e) { com.android.sched.vfs.DirectFS.checkPermissionsIfExists(path, file.getLocation(), Permission.WRITE); throw new java.lang.AssertionError(e); } }",9cf1549e9d47969b56390845ac947b55dd197354,"openWrite(com.android.sched.vfs.CachedDirectFS$CachedParentVFile,boolean)",298844,204,209
17800,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_UpdaterLogic.java,16.0,"public java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> computeUpdates(java.util.Collection<com.android.sdklib.internal.repository.Archive> selectedArchives, com.android.sdklib.internal.repository.SdkSources sources, java.lang.Package[] localPkgs, boolean includeObsoletes) { java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> archives = new java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo>(); java.util.ArrayList<java.lang.Package> remotePkgs = new java.util.ArrayList<java.lang.Package>(); com.android.sdklib.internal.repository.SdkSource[] remoteSources = sources.getAllSources(); com.android.sdkuilib.internal.repository.ArchiveInfo[] localArchives = createLocalArchives(localPkgs); if (selectedArchives == null) { selectedArchives = findUpdates(localArchives, remotePkgs, remoteSources, includeObsoletes); } for (com.android.sdklib.internal.repository.Archive a : selectedArchives) { insertArchive(a, archives, selectedArchives, remotePkgs, remoteSources, localArchives, false); } return archives; }",f0b697faeb9b564a3a48dcd4239cd8b320be8e6a,"public java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> computeUpdates(java.util.Collection<com.android.sdklib.internal.repository.Archive> selectedArchives, com.android.sdklib.internal.repository.SdkSources sources, java.lang.Package[] localPkgs, boolean includeObsoletes) { java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> archives = new java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo>(); java.util.ArrayList<java.lang.Package> remotePkgs = new java.util.ArrayList<java.lang.Package>(); com.android.sdklib.internal.repository.SdkSource[] remoteSources = sources.getAllSources(); com.android.sdkuilib.internal.repository.ArchiveInfo[] localArchives = createLocalArchives(localPkgs); if (selectedArchives == null) { selectedArchives = findUpdates(localArchives, remotePkgs, remoteSources, includeObsoletes); } for (com.android.sdklib.internal.repository.Archive a : selectedArchives) { insertArchive(a, archives, selectedArchives, remotePkgs, remoteSources, localArchives, false); } fixMissingLocalDependencies(archives, selectedArchives, remotePkgs, remoteSources, localArchives); return archives; }",126605191a1138dbcae173ff7a911ab8b3438eed,"computeUpdates(java.util.Collection,com.android.sdklib.internal.repository.SdkSources,java.lang.Package[],boolean)","computeUpdates(java.util.Collection,com.android.sdklib.internal.repository.SdkSources,java.lang.Package[],boolean)",2,15,"public java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> computeUpdates(java.util.Collection<com.android.sdklib.internal.repository.Archive> selectedArchives, com.android.sdklib.internal.repository.SdkSources sources, java.lang.Package[] localPkgs, boolean includeObsoletes) { java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> archives = new java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo>(); java.util.ArrayList<java.lang.Package> remotePkgs = new java.util.ArrayList<java.lang.Package>(); com.android.sdklib.internal.repository.SdkSource[] remoteSources = sources.getAllSources(); com.android.sdkuilib.internal.repository.ArchiveInfo[] localArchives = createLocalArchives(localPkgs); if (selectedArchives == null) { selectedArchives = findUpdates(localArchives, remotePkgs, remoteSources, includeObsoletes); } for (com.android.sdklib.internal.repository.Archive a : selectedArchives) { insertArchive(a, archives, selectedArchives, remotePkgs, remoteSources, localArchives, false); } return archives; }",f0b697faeb9b564a3a48dcd4239cd8b320be8e6a,"computeUpdates(java.util.Collection,com.android.sdklib.internal.repository.SdkSources,java.lang.Package[],boolean)",297560,313,290
124410,perflib_src_main_java_com_android_tools_perflib_heap_RootObj.java,1.0,@java.lang.Override public final void accept(com.android.tools.perflib.heap.Visitor visitor) { com.android.tools.perflib.heap.Instance instance = getReferredInstance(); if (instance != null) { instance.accept(visitor); } },eca09f03c8c6040b7632ca3ff17f491b550dc58b,@java.lang.Override public final void accept(com.android.tools.perflib.heap.Visitor visitor) { com.android.tools.perflib.heap.Instance instance = getReferredInstance(); if (instance != null) { visitor.visit(instance); } },3c4d0f075f5040a908d4367502438f46ff358f44,accept(com.android.tools.perflib.heap.Visitor),accept(com.android.tools.perflib.heap.Visitor),5,1,@java.lang.Override public final void accept(com.android.tools.perflib.heap.Visitor visitor) { visitor.visitRootObj(this); com.android.tools.perflib.heap.Instance instance = getReferredInstance(); if (instance != null) { visitor.visitLater(instance); } },98c9d600cb104b976b999f4451247554b5400c45,accept(com.android.tools.perflib.heap.Visitor),245575,61,70
95831,plugins_gradle_tooling-extension-impl_src_org_jetbrains_plugins_gradle_tooling_internal_IdeaCompilerOutputImpl.java,,,,@java.lang.Override public java.io.File getOutputDir() { return outputDir; },7792608044f45de3fdb68a272dce0cb8dad3a8c4,,getOutputDir(),4,0,@java.lang.Override public java.io.File getMainClassesDir() { return myMainClassesDir; },ed87b5f09d8f81bb14b0d90f18b28ccb39aae0e6,getMainClassesDir(),439938,21,25
314441,services_core_java_com_android_server_BluetoothManagerService.java,19.0,"private void persistBluetoothSetting(int value) { Settings.Global.putInt(mContext.getContentResolver(), Settings.Global.BLUETOOTH_ON, value); }",f2d9bbb86aa32939e6913fb34dbcf8e4cc45dbc2,"private void persistBluetoothSetting(int value) { long callingIdentity = android.os.Binder.clearCallingIdentity(); Settings.Global.putInt(mContext.getContentResolver(), Settings.Global.BLUETOOTH_ON, value); android.os.Binder.restoreCallingIdentity(callingIdentity); }",03e4b5d40d21e87db8ae26896eea8bfbe70b1b83,persistBluetoothSetting(int),persistBluetoothSetting(int),7,19,"private void persistBluetoothSetting(int value) { if (com.android.server.BluetoothManagerService.DBG) android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (""Persisting Bluetooth Setting: "" + value)); long callingIdentity = android.os.Binder.clearCallingIdentity(); Settings.Global.putInt(mContext.getContentResolver(), Settings.Global.BLUETOOTH_ON, value); android.os.Binder.restoreCallingIdentity(callingIdentity); }",76644943856b76267efc73200523b1fa6b57803c,persistBluetoothSetting(int),143863,62,109
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,28.0,"public void getEuiccChallenge(java.lang.String cardId, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { callback.onComplete(resultCode, challenge); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccChallenge"", e); throw e.rethrowFromSystemServer(); } }",9ef01fcb1ae0931c0023a09ca04f5994ac2675f5,"public void requestEuiccChallenge(java.lang.String cardId, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { executor.execute(() -> callback.onComplete(resultCode, challenge)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccChallenge"", e); throw e.rethrowFromSystemServer(); } }",878bdf532636052ff50c9ade2a37fb4d723a4537,"getEuiccChallenge(java.lang.String,android.telephony.euicc.EuiccCardManager$ResultCallback)","requestEuiccChallenge(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",2,17,"public void requestEuiccChallenge(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { executor.execute(() -> callback.onComplete(resultCode, challenge)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling getEuiccChallenge"", e); throw e.rethrowFromSystemServer(); } }",8f481c14f821fd18dc0d14a99ec3fe4029a47870,"requestEuiccChallenge(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",476175,191,184
64584,perflib_src_main_java_com_android_tools_perflib_vmtrace_MethodInfo.java,5.0,public void addExclusiveThreadTimes(long time) { mExclusiveThreadTimes += time; },db4842f27a3a0643c9794b9c94c67c07f2d6c193,public long getExclusiveThreadTime(java.lang.String thread) { com.android.tools.perflib.vmtrace.MethodInfo.MethodStats stats = mPerThreadStats.get(thread); return stats != null ? stats.exclusiveThreadTime : 0; },a6354ef02b2c39014fc5698aeae003826dc95891,addExclusiveThreadTimes(long),getExclusiveThreadTime(java.lang.String),4,6,"public long getExclusiveTime(java.lang.String thread, com.android.tools.perflib.vmtrace.ClockType clockType) { com.android.tools.perflib.vmtrace.MethodInfo.MethodStats stats = mPerThreadStats.get(thread); return stats != null ? stats.getExclusiveTime(clockType) : 0; }",0914540ff0323b03208d5ac73ab2350b6655bff2,"getExclusiveTime(java.lang.String,com.android.tools.perflib.vmtrace.ClockType)",111429,56,76
165811,build-system_gradle-core_src_main_groovy_com_android_build_gradle_tasks_ZipAlign.java,1.0,@java.lang.Override public java.io.File call() throws java.lang.Exception { return scope.getPackageApk(); },4039f9efea8d4ed09ed3d3d2508a12411287ce8f,@java.lang.Override public java.io.File call() throws java.lang.Exception { return ((com.android.build.gradle.internal.variant.ApkVariantOutputData) (scope.getVariantOutputData())).packageApplicationTask.getOutputFile(); },5cb0f16a889bc46c260ffb18e61c40e40d10a626,call(),call(),3,1,@java.lang.Override public java.io.File call() throws java.lang.Exception { com.android.build.gradle.tasks.PackageApplication packageApplicationTask = ((com.android.build.gradle.internal.variant.ApkVariantOutputData) (scope.getVariantOutputData())).packageApplicationTask; return packageApplicationTask == null ? scope.getPackageApk() : packageApplicationTask.getOutputFile(); },5bf11de3c73aac3bc251fbf0b7ba86dcc23ad77b,call(),496115,58,91
340832,testapps_src_com_android_server_telecom_testapps_TestConnectionService.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { sendRemoteRttUpgradeRequest(); }",0ef598faeee02e4ff2fe41db0b3e0350e8f558ba,,"onReceive(android.content.Context,android.content.Intent)",8,7,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { sendRemoteRttRequest(); }",ca5c4de316b97f9c172c0df2124d5aeb6fc3e84a,"onReceive(android.content.Context,android.content.Intent)",219683,33,32
209856,android_icu4j_src_main_java_android_icu_text_DateIntervalInfo.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public android.icu.impl.UResource.TableSink getOrCreateTableSink(android.icu.impl.UResource.Key key, int initialSize) { if (key.contentEquals(android.icu.text.DateIntervalInfo.INTERVAL_FORMATS_KEY)) { return skeletonSink; } return null; }",b2ade763d8e4781706dbfb2b72f559455ba3d0b0,,"getOrCreateTableSink(android.icu.impl.UResource.Key,int)",4,29,@java.lang.Override public android.icu.impl.UResource.TableSink getOrCreateTableSink(android.icu.impl.UResource.Key key) { if (key.contentEquals(android.icu.text.DateIntervalInfo.INTERVAL_FORMATS_KEY)) { return skeletonSink; } return null; },59d0887646869e6b7eff0cba9e41ab5ddb701489,getOrCreateTableSink(android.icu.impl.UResource.Key),428518,72,68
52241,draw9patch_src_main_java_com_android_draw9patch_ui_ImageViewer.java,32.0,"private void updateHoverRegion(int x, int y) { x = imageXCoordinate(x); y = imageYCoordinate(y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo verticalUpdateRegion = findVerticalPatch(x, y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo horizontalUpdateRegion = findHorizontalPatch(x, y); computeHighlightRegions(verticalUpdateRegion, horizontalUpdateRegion); java.awt.Cursor c = getCursor(x, y, verticalUpdateRegion, horizontalUpdateRegion); setCursor(c); }",c817f433e2fde854bce0a6bce7a2bd6a83ee95ad,"private void updateHoverRegion(int x, int y) { x = imageXCoordinate(x); y = imageYCoordinate(y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo verticalUpdateRegion = findVerticalPatch(x, y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo horizontalUpdateRegion = findHorizontalPatch(x, y); computeHighlightRegions(verticalUpdateRegion, horizontalUpdateRegion); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo editRegion = pickUpdateRegion(x, y, verticalUpdateRegion, horizontalUpdateRegion); if (editRegion != null) { java.awt.Cursor c = getCursor(x, y, editRegion); setCursor(c); } else { setCursor(java.awt.Cursor.getDefaultCursor()); } }",6f578d8f273c477445ba08cdc3cc861fa62abd58,"updateHoverRegion(int,int)","updateHoverRegion(int,int)",13,32,"private void updateHoverRegion(int x, int y) { com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo vertical = findVerticalPatch(x, y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo horizontal = findHorizontalPatch(x, y); computeHoverHighlightRegions(vertical, horizontal); computeHoverRegionTooltip(vertical, horizontal); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo updateRegion = pickUpdateRegion(x, y, vertical, horizontal); setCursorForRegion(x, y, updateRegion); }",7112b968ae17f6a4c1b2c35e98dcdaf937caab5b,"updateHoverRegion(int,int)",307262,179,127
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLgamma.java,,,,"private void checkLgammaFloat4Int4() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); try { android.renderscript.Allocation outY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_4(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutY(outY); script.forEach_testLgammaFloat4Int4(inX, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLgammaFloat4Int4: "" + (e.toString()))); } try { android.renderscript.Allocation outY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_4(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutY(outY); scriptRelaxed.forEach_testLgammaFloat4Int4(inX, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLgammaFloat4Int4: "" + (e.toString()))); } }",1d6e1a050fb348748b1af117d13c929d3a681f92,,checkLgammaFloat4Int4(),9,4,"private void checkLgammaFloat4Int4Float4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 3812703030448598787L); try { android.renderscript.Allocation outY = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.SIGNED_32, 4), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutY(outY); script.forEach_testLgammaFloat4Int4Float4(inX, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLgammaFloat4Int4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation outY = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.SIGNED_32, 4), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutY(outY); scriptRelaxed.forEach_testLgammaFloat4Int4Float4(inX, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLgammaFloat4Int4Float4: "" + (e.toString()))); } }",cf0f4944b2f47f511729a683f55939d737d150e8,checkLgammaFloat4Int4Float4(),143489,446,422
159876,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_ProductFlavor.java,31.0,@com.android.annotations.NonNull public void testProguardFile(java.lang.Object proguardFile) { testProguardFiles.add(project.file(proguardFile)); },64e435529ed4902eb99233271e7ffdffdf9dc6a0,public void testProguardFile(java.lang.Object proguardFile) { getTestProguardFiles().add(project.file(proguardFile)); },532bb545487544e7abfb2f78b75b988c3aa1a5db,testProguardFile(java.lang.Object),testProguardFile(java.lang.Object),3,31,public void testProguardFile(@com.android.annotations.NonNull java.lang.Object proguardFile) { getTestProguardFiles().add(project.file(proguardFile)); },65b87fb3c377bceeb6fbc523d7aadfb826c8827c,testProguardFile(java.lang.Object),29524,33,40
253791,luni_src_main_java_libcore_io_ForwardingOs.java,0.0,public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.system.ErrnoException { return os.dup(oldFd); },c05f9339001d30f11a249286359ad6e5eef3ffc4,public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws libcore.io.ErrnoException { return os.dup(oldFd); },a8e49c0aa2fcbe37234016c6c1985f794db96d87,dup(java.io.FileDescriptor),dup(java.io.FileDescriptor),8,0,public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.system.ErrnoException { return os.dup(oldFd); },c05f9339001d30f11a249286359ad6e5eef3ffc4,dup(java.io.FileDescriptor),494848,37,36
136140,rpclib_src_test_java_com_android_tools_rpclib_binary_DecoderTest.java,,,,"public void testDecodeUint32() { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (103)), ((byte) (69)), ((byte) (35)), ((byte) (1)), ((byte) (239)), ((byte) (205)), ((byte) (171)), ((byte) (16)) }); final long[] expected = new long[]{ 0, 19088743, 279694831 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); try { for (long u32 : expected) { assertEquals(u32, ((d.uint32()) & -1)); } } catch (java.io.IOException ex) { assertNull(ex); } }",f788e067c64dacda3c3f87ba6d8ee2f3d83a8150,,testDecodeUint32(),3,4,"public void testDecodeUint32() throws java.io.IOException { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (103)), ((byte) (69)), ((byte) (35)), ((byte) (1)), ((byte) (239)), ((byte) (205)), ((byte) (171)), ((byte) (16)) }); final long[] expected = new long[]{ 0, 19088743, 279694831 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); for (long u32 : expected) { assertEquals(u32, ((d.uint32()) & -1)); } }",83fb7cabc488e23caf476bbf3ea09c0b5e6688dc,testDecodeUint32(),49534,217,204
118981,jack_src_com_android_jack_incremental_IncrementalInputFilter.java,,,,@javax.annotation.Nonnull private java.util.Set<java.lang.String> getModifiedFileNames(@javax.annotation.Nonnull java.util.Set<java.lang.String> javaFileNames) { assert (fileDependencies) != null; java.util.Set<java.lang.String> modifiedFileNames = new java.util.HashSet<java.lang.String>(); for (java.lang.String javaFileName : fileDependencies.getCompiledJavaFiles()) { if (javaFileNames.contains(javaFileName)) { java.io.File javaFile = new java.io.File(javaFileName); for (java.lang.String typeName : fileDependencies.getTypeNames(javaFileName)) { java.io.File dexFile = getDexFile(typeName); if ((!(dexFile.exists())) || ((javaFile.lastModified()) > (dexFile.lastModified()))) { modifiedFileNames.add(javaFileName); } } } } return modifiedFileNames; },25d8875a38444d5856d323be26ba1f1cdf55ec69,,getModifiedFileNames(java.util.Set),7,8,"@javax.annotation.Nonnull private com.android.jack.analysis.dependency.file.FileDependencies getFileDependencies(@javax.annotation.Nonnull com.android.jack.library.InputJackLibrary library) throws com.android.jack.library.FileTypeDoesNotExistException, com.android.sched.util.file.CannotReadException { com.android.sched.vfs.InputVFile fileDependenciesVFile = library.getFile(FileType.DEPENDENCIES, FileDependencies.vpath); com.android.jack.analysis.dependency.file.FileDependencies fileDependencies = new com.android.jack.analysis.dependency.file.FileDependencies(); java.io.InputStreamReader fileReader = null; try { fileReader = new java.io.InputStreamReader(fileDependenciesVFile.openRead()); fileDependencies.read(fileReader); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(fileDependenciesVFile.getLocation(), e); } finally { if (fileReader != null) { try { fileReader.close(); } catch (java.io.IOException e) { } } } return fileDependencies; }",c17ae81c171a16871955a576d5e826b6702ae4fe,getFileDependencies(com.android.jack.library.InputJackLibrary),148968,213,245
579565,src_java_com_android_internal_telephony_RIL.java,31.0,"@java.lang.Override public void setSmscAddress(java.lang.String address, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" address = "") + address)); } try { radioProxy.setSmscAddress(rr.mSerial, convertNullToEmptyString(address)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setSmscAddress"", e); } } }",22ffbda76d388d3cc3582aa0c617c507feda8d00,"@java.lang.Override public void setSmscAddress(java.lang.String address, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" address = "") + address)); } try { radioProxy.setSmscAddress(rr.mSerial, convertNullToEmptyString(address)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setSmscAddress"", e); } } }",6a05cf7da79b65f6d0037810ca52ac37a3add92d,"setSmscAddress(java.lang.String,android.os.Message)","setSmscAddress(java.lang.String,android.os.Message)",3,31,"@java.lang.Override public void setSmscAddress(java.lang.String address, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" address = "") + address)); } try { radioProxy.setSmscAddress(rr.mSerial, convertNullToEmptyString(address)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setSmscAddress"", e); } } }",22ffbda76d388d3cc3582aa0c617c507feda8d00,"setSmscAddress(java.lang.String,android.os.Message)",89172,235,231
55628,gradle_src_main_groovy_com_android_build_gradle_internal_model_DependenciesImpl.java,,,,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.lang.String> getProjectDependenciesPath() { return null; },36c6246653aa0f0d51514576e14ee154f24a0336,,getProjectDependenciesPath(),3,0,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.lang.String> getProjectDependenciesPath() { return java.util.Collections.emptyList(); },9da3ba0ad896427f5b7c164351bb71a033b53dc2,getProjectDependenciesPath(),420505,37,43
277459,service_java_com_android_server_wifi_p2p_WifiP2pServiceImpl.java,87.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void enforceWifiDisplayPermission(int uid) { mContext.enforcePermission(android.Manifest.permission.CONFIGURE_WIFI_DISPLAY, uid, (-1), ""WifiP2pService""); }",43571151db31c92ec72acd8dc1f9c2eff01ebf27,,enforceWifiDisplayPermission(int),6,65,"private boolean getWfdPermission(int uid) { if ((mWifiInjector) == null) { mWifiInjector = com.android.server.wifi.WifiInjector.getInstance(); } com.android.server.wifi.util.WifiPermissionsWrapper wifiPermissionsWrapper = mWifiInjector.getWifiPermissionsWrapper(); return (wifiPermissionsWrapper.getUidPermission(android.Manifest.permission.CONFIGURE_WIFI_DISPLAY, uid)) != (android.content.pm.PackageManager.PERMISSION_DENIED); }",9c3c542315a88ea8e50eb1ebad6084681db67506,getWfdPermission(int),498991,42,105
79530,luni_src_main_java_java_net_PlainDatagramSocketImpl.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void initConnected(java.net.InetAddress remoteAddress, int remotePort) { super.initConnected(remoteAddress, remotePort); isNativeConnected = true; connectedAddress = remoteAddress; connectedPort = remotePort; }",1f7a588843d00de1f8942e4661d53e7ef6f36949,,"initConnected(java.net.InetAddress,int)",11,20,"@java.lang.Override protected void onConnect(java.net.InetAddress remoteAddress, int remotePort) { isNativeConnected = true; connectedAddress = remoteAddress; connectedPort = remotePort; }",69e200b7f2ce5bae2b15ed6c70193518bab18b6f,"onConnect(java.net.InetAddress,int)",511138,53,43
44167,luni_src_test_java_org_apache_harmony_xnet_provider_jsse_NativeCryptoTest.java,4.0,"public void test_X509_NAME_hashes() { javax.security.auth.x500.X500Principal name = new javax.security.auth.x500.X500Principal(""CN=localhost""); assertEquals((-1372642656), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash(name)); assertEquals((-1626170662), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash_old(name)); }",3c62840ec13209c0dbd498ad65a1bebd3e018020,"public void test_X509_NAME_hashes() { javax.security.auth.x500.X500Principal name = new javax.security.auth.x500.X500Principal(""CN=localhost""); assertEquals((-1372642656), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash(name)); assertEquals((-1626170662), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash_old(name)); org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors(); }",aec6562b951b20d1af7355a2fd5f62428eba3b41,test_X509_NAME_hashes(),test_X509_NAME_hashes(),3,4,"public void test_X509_NAME_hashes() { javax.security.auth.x500.X500Principal name = new javax.security.auth.x500.X500Principal(""CN=localhost""); assertEquals((-1372642656), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash(name)); assertEquals((-1626170662), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash_old(name)); }",3c62840ec13209c0dbd498ad65a1bebd3e018020,test_X509_NAME_hashes(),183912,143,120
127845,v8_renderscript_java_src_android_support_v8_renderscript_ScriptIntrinsicConvolve3x3.java,2.0,"public static android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { float[] f = new float[]{ 0, 0, 0, 0, 1, 0, 0, 0, 0 }; if (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id = rs.nScriptIntrinsicCreate(1, e.getID(rs)); android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 si = new android.support.v8.renderscript.ScriptIntrinsicConvolve3x3(id, rs); si.setCoefficients(f); return si; }",2eeea9549db5af444f0ec49849f34b861c8e4863,"public static android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { float[] f = new float[]{ 0, 0, 0, 0, 1, 0, 0, 0, 0 }; if ((((((((!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_2(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_3(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_2(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_3(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_4(rs))))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id; boolean mUseIncSupp = false; if (true || ((rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < 21))) { android.util.Log.v(""Inc RS Test"", ""Creating Intrinsic""); mUseIncSupp = true; id = rs.nIncScriptIntrinsicCreate(1, e.getID(rs)); android.util.Log.v(""Inc RS Test"", ""Creatie Intrinsic Completed""); } else { id = rs.nScriptIntrinsicCreate(1, e.getID(rs)); } android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 si = new android.support.v8.renderscript.ScriptIntrinsicConvolve3x3(id, rs); si.setIncSupp(mUseIncSupp); si.setCoefficients(f); return si; }",4e522f6dbb4d7d8577f3bb37721fd0c9b6721edb,"create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)","create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)",8,2,"public static android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { float[] f = new float[]{ 0, 0, 0, 0, 1, 0, 0, 0, 0 }; if ((((((((!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_2(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_3(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_2(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_3(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_4(rs))))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id; boolean mUseIncSupp = (rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < (android.support.v8.renderscript.ScriptIntrinsicConvolve3x3.INTRINSIC_API_LEVEL)); id = rs.nScriptIntrinsicCreate(1, e.getID(rs), mUseIncSupp); android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 si = new android.support.v8.renderscript.ScriptIntrinsicConvolve3x3(id, rs); si.setIncSupp(mUseIncSupp); si.setCoefficients(f); return si; }",026bce5e0036674cacb1f83fc3c31e4cee2f6404,"create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)",314252,484,438
460596,core_java_android_bluetooth_BluetoothHeadset.java,33.0,"public void bindResponse(int ind_id, boolean ind_status) { if (((mService) != null) && (isEnabled())) { try { mService.bindResponse(ind_id, ind_status); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } }",c226865c0cad127dfc8468770d8c2f9ceb955d6f,"public void bindResponse(int ind_id, boolean ind_status) { final android.bluetooth.IBluetoothHeadset service = mService; if ((service != null) && (isEnabled())) { try { service.bindResponse(ind_id, ind_status); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } }",0518aad517b91a949fe3128e59815a769a2a2914,"bindResponse(int,boolean)","bindResponse(int,boolean)",17,33,"public void bindResponse(int indId, boolean indStatus) { final android.bluetooth.IBluetoothHeadset service = mService; if ((service != null) && (isEnabled())) { try { service.bindResponse(indId, indStatus); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } }",50f9cd8e6ab7bc79ad3aaf701b67cc59899aac4f,"bindResponse(int,boolean)",41160,171,167
65743,perflib_src_main_java_com_android_tools_perflib_vmtrace_VmTraceParser.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void computeCallStats(com.android.tools.perflib.vmtrace.Call c, com.android.tools.perflib.vmtrace.Call parent, com.android.tools.perflib.vmtrace.ThreadInfo thread) { long methodId = c.getMethodId(); com.android.tools.perflib.vmtrace.MethodProfileData.Builder builder = getProfileDataBuilder(methodId); builder.addCallTime(c, parent, thread); builder.incrementInvocationCount(c, thread); for (com.android.tools.perflib.vmtrace.Call callee : c.getCallees()) { computeCallStats(callee, c, thread); } }",97952c61196f0f8fa8becb2099c8f711e3e633d2,,"computeCallStats(com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.ThreadInfo)",11,11,"public void computeCallStats(com.android.tools.perflib.vmtrace.Call c, com.android.tools.perflib.vmtrace.Call parent, com.android.tools.perflib.vmtrace.ThreadInfo thread) { long methodId = c.getMethodId(); com.android.tools.perflib.vmtrace.MethodProfileData.Builder builder = getProfileDataBuilder(methodId); builder.addCallTime(c, parent, thread); builder.incrementInvocationCount(c, parent, thread); if (c.isRecursive()) { builder.setRecursive(); } for (com.android.tools.perflib.vmtrace.Call callee : c.getCallees()) { computeCallStats(callee, c, thread); } }",0fda6608ffcc9580429510aa881bacfe1c431035,"computeCallStats(com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.ThreadInfo)",184501,150,166
129220,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_app_AndroidGradleModule.java,,,,"@java.lang.Override public void createFiles() throws java.io.IOException { java.io.File root = getLocation(); java.io.File src = new java.io.File(root, ""src""); java.io.File main = new java.io.File(src, ""main""); main.mkdirs(); java.io.File manifest = new java.io.File(main, ""AndroidManifest.xml""); com.google.common.io.Files.write((((""<?xml version=\""1.0\"" encoding=\""utf-8\""?>\n"" + (""<manifest xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"" + "" package=\""com"")) + (getPath().replace(':', '.'))) + ""\"" />\n""), manifest, Charsets.UTF_8); }",19243e73ddd2225916317bf5019c8f8e0ae92dcd,,createFiles(),8,1,"@java.lang.Override public void createFiles() throws java.io.IOException { java.io.File root = getModuleDir(); java.io.File src = new java.io.File(root, ""src""); java.io.File main = new java.io.File(src, ""main""); main.mkdirs(); java.io.File manifest = new java.io.File(main, ""AndroidManifest.xml""); com.google.common.io.Files.write((((""<?xml version=\""1.0\"" encoding=\""utf-8\""?>\n"" + (""<manifest xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"" + "" package=\""com"")) + (getGradlePath().replace(':', '.'))) + ""\"" />\n""), manifest, Charsets.UTF_8); }",0ee3488bd8123278981a4e72152db8b3e480cf98,createFiles(),14599,174,177
253791,luni_src_main_java_libcore_io_Os.java,31.0,public void seteuid(int euid) throws android.system.ErrnoException;,d769ee36a876bf71a2c908e2da11fc91731c13d7,public void seteuid(int euid) throws libcore.io.ErrnoException;,89d14413d01fbd8fb3ac825f15362fb70a8eafa8,seteuid(int),seteuid(int),8,30,public void seteuid(int euid) throws android.system.ErrnoException;,d769ee36a876bf71a2c908e2da11fc91731c13d7,seteuid(int),494624,20,19
82673,ddmlib_src_main_java_com_android_ddmlib_EmulatorConsole.java,24.0,"private boolean start() { java.net.InetSocketAddress socketAddr; try { java.net.InetAddress hostAddr = java.net.InetAddress.getByName(com.android.ddmlib.EmulatorConsole.HOST); socketAddr = new java.net.InetSocketAddress(hostAddr, mPort); } catch (java.net.UnknownHostException e) { return false; } try { mSocketChannel = java.nio.channels.SocketChannel.open(socketAddr); } catch (java.io.IOException e1) { return false; } readLines(); return true; }",5fed40220d5c22ff0104fd79c2ef1fb4d31c2940,"private synchronized boolean checkConnection() { if ((mSocketChannel) == null) { java.net.InetSocketAddress socketAddr; try { java.net.InetAddress hostAddr = java.net.InetAddress.getByName(com.android.ddmlib.EmulatorConsole.HOST); socketAddr = new java.net.InetSocketAddress(hostAddr, mPort); mSocketChannel = java.nio.channels.SocketChannel.open(socketAddr); } catch (java.io.IOException e) { com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, (""Failed to start Emulator console for "" + (java.lang.Integer.toString(mPort)))); return false; } } return ping(); }",70f8a9e90ab773d5ca564c505790db12277e3860,start(),checkConnection(),3,7,"private synchronized boolean checkConnection() { if ((mSocketChannel) == null) { java.net.InetSocketAddress socketAddr; try { java.net.InetAddress hostAddr = java.net.InetAddress.getByName(com.android.ddmlib.EmulatorConsole.HOST); socketAddr = new java.net.InetSocketAddress(hostAddr, mPort); mSocketChannel = java.nio.channels.SocketChannel.open(socketAddr); mSocketChannel.configureBlocking(false); readLines(); } catch (java.io.IOException e) { com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, (""Failed to start Emulator console for "" + (java.lang.Integer.toString(mPort)))); return false; } } return ping(); }",4ee50000640647a742c43da70a7c0d6ef980082d,checkConnection(),8717,160,172
278609,telecomm_java_android_telecom_Logging_Events.java,,,,public void changeEventCacheSize(int newSize) { java.util.concurrent.LinkedBlockingQueue<android.telecom.Logging.Events.EventRecord> oldEventLog = mEventRecords; mEventRecords = new java.util.concurrent.LinkedBlockingQueue<>(newSize); mCallEventRecordMap.clear(); oldEventLog.forEach(this::addCallEventRecord); },867e63ee721510f46f17812309ac8bcc16c2a415,,changeEventCacheSize(int),3,5,"public void changeEventCacheSize(int newSize) { java.util.concurrent.LinkedBlockingQueue<android.telecom.Logging.EventManager.EventRecord> oldEventLog = mEventRecords; mEventRecords = new java.util.concurrent.LinkedBlockingQueue<>(newSize); mCallEventRecordMap.clear(); oldEventLog.forEach(( newRecord) -> { android.telecom.Logging.EventManager.Loggable recordEntry = newRecord.getRecordEntry(); if ((mEventRecords.remainingCapacity()) == 0) { android.telecom.Logging.EventManager.EventRecord record = mEventRecords.poll(); if (record != null) { mCallEventRecordMap.remove(record.getRecordEntry()); } } mEventRecords.add(newRecord); mCallEventRecordMap.put(recordEntry, newRecord); }); }",0c4b7d3bf1ffcd7da4fd159ccc78d8a07b9993a2,changeEventCacheSize(int),122377,80,183
177464,jack_src_com_android_jack_lookup_JLookup.java,8.0,"protected <T extends com.android.jack.ir.ast.JReferenceType> T getNonArrayType(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull com.android.jack.lookup.JLookup.Adapter<T> adapter) throws com.android.jack.ir.ast.MissingJTypeLookupException { java.util.Map<java.lang.String, T> cache = adapter.getCache(); T type; synchronized(cache) { type = cache.get(signature); if (type == null) { type = findClassOrInterface(signature, adapter); cache.put(signature, type); } } return type; }",76f400c3a453dddcf2f2cbc281be8ceb85302373,"protected <T extends com.android.jack.ir.ast.JReferenceType> T getNonArrayType(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull com.android.jack.lookup.JLookup.Adapter<T> adapter) throws com.android.jack.ir.ast.MissingJTypeLookupException { java.util.Map<java.lang.String, T> cache = adapter.getCache(); T type; synchronized(cache) { type = cache.get(signature); if (type == null) { assert com.android.jack.util.NamingTools.isClassDescriptor(signature) : (""Invalid signature '"" + signature) + ""'""; type = findClassOrInterface(signature, adapter); cache.put(signature, type); } } return type; }",05431775e79828d579be707163d3d4ad34da7da1,"getNonArrayType(java.lang.String,com.android.jack.lookup.JLookup$Adapter)","getNonArrayType(java.lang.String,com.android.jack.lookup.JLookup$Adapter)",11,8,"protected <T extends com.android.jack.ir.ast.JReferenceType> T getNonArrayType(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull com.android.jack.lookup.JLookup.Adapter<T> adapter) throws com.android.jack.ir.ast.MissingJTypeLookupException { java.util.Map<java.lang.String, T> cache = adapter.getCache(); T type; synchronized(cache) { type = cache.get(signature); if (type == null) { type = findClassOrInterface(signature, adapter); cache.put(signature, type); } } return type; }",76f400c3a453dddcf2f2cbc281be8ceb85302373,"getNonArrayType(java.lang.String,com.android.jack.lookup.JLookup$Adapter)",487635,173,143
81416,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,,,,"public static void computeLdexp(android.renderscript.cts.TestLdexp.ArgumentsFloatIntFloat args) { args.ulf = 4; args.ulfRelaxed = 12; args.out = ((float) ((args.inX) * (java.lang.Math.pow(2.0, args.inY)))); }",bf01dd11dfaad7530a684c908804408044412769,,computeLdexp(android.renderscript.cts.TestLdexp$ArgumentsFloatIntFloat),9,51,public static void computeLog2(android.renderscript.cts.TestLog2.ArgumentsFloatFloat args) { args.ulf = 3; args.ulfRelaxed = 128; args.out = ((float) ((java.lang.StrictMath.log10(args.in)) / (java.lang.StrictMath.log10(2.0)))); },6cdcba918597f2ce5ed3598ae9b58f8b3895ac8e,computeLog2(android.renderscript.cts.TestLog2$ArgumentsFloatFloat),142551,76,80
229824,system_image_uitests_app_src_main_java_com_android_devtools_systemimage_uitest_watchers_AndroidWelcomeClingWatcher.java,0.0,@java.lang.Override public boolean checkForCondition() { android.support.test.uiautomator.UiObject androidCling = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_WELCOME_CLING_RES)); android.support.test.uiautomator.UiObject launcherCling = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_LAUNCHER_WELCOME_CLING_RES)); try { if (androidCling.exists()) { androidCling.click(); return true; } else if (launcherCling.exists()) { launcherCling.click(); return true; } else { return false; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { junit.framework.Assert.fail(e.getStackTrace().toString()); return false; } },bc6a4a5bda4502e3702e812fe8e6f34b6f25ad79,@java.lang.Override public boolean checkForCondition() { android.support.test.uiautomator.UiObject androidCling = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_WELCOME_CLING_RES)); try { if (androidCling.exists()) { androidCling.click(); return true; } else { return false; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { junit.framework.Assert.fail(e.getStackTrace().toString()); return false; } },43db4c819697b2a1573eb80216707992995e7530,checkForCondition(),checkForCondition(),5,0,@java.lang.Override public boolean checkForCondition() { android.support.test.uiautomator.UiObject androidCling = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_WELCOME_CLING_RES)); try { if (androidCling.exists()) { androidCling.click(); return true; } else { return false; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { org.junit.Assert.fail(e.getStackTrace().toString()); return false; } },e358026bf39f1f02934cdc14c946aea6e777e89d,checkForCondition(),154693,133,133
96871,tests_tests_security_src_android_security_cts_OpenSSLEarlyCCSTest.java,,,,"private static java.lang.String getFragmentInfo(android.security.cts.OpenSSLEarlyCCSTest.TlsRecord record, boolean mayBeEncrypted) { java.lang.StringBuilder result = new java.lang.StringBuilder(); if (mayBeEncrypted) { result.append(""encrypted?""); } else { switch (record.protocol) { case android.security.cts.OpenSSLEarlyCCSTest.TlsProtocols.ALERT : result.append((((""level: "" + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : ""n/a"")) + "", description: "") + ((record.fragment.length) > 1 ? java.lang.String.valueOf(((record.fragment[1]) & 255)) : ""n/a""))); break; case android.security.cts.OpenSSLEarlyCCSTest.TlsProtocols.APPLICATION_DATA : break; case android.security.cts.OpenSSLEarlyCCSTest.TlsProtocols.CHANGE_CIPHER_SPEC : result.append((""payload: "" + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : ""n/a""))); break; case android.security.cts.OpenSSLEarlyCCSTest.TlsProtocols.HANDSHAKE : result.append((""type: "" + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : ""n/a""))); break; } } result.append("", "").append((""fragment length: "" + (record.fragment.length))); return result.toString(); }",370b3b36d4927aa28b41bf8bb9d350b364491a3a,,"getFragmentInfo(android.security.cts.OpenSSLEarlyCCSTest$TlsRecord,boolean)",4,34,"private static java.lang.String getFragmentInfo(android.security.cts.OpenSSLHeartbleedTest.TlsRecord record, boolean mayBeEncrypted) { java.lang.StringBuilder result = new java.lang.StringBuilder(); if (mayBeEncrypted) { result.append(""encrypted?""); } else { switch (record.protocol) { case android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.ALERT : result.append((((""level: "" + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : ""n/a"")) + "", description: "") + ((record.fragment.length) > 1 ? java.lang.String.valueOf(((record.fragment[1]) & 255)) : ""n/a""))); break; case android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.APPLICATION_DATA : break; case android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.CHANGE_CIPHER_SPEC : result.append((""payload: "" + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : ""n/a""))); break; case android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.HANDSHAKE : result.append((""type: "" + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : ""n/a""))); break; } } result.append("", "").append((""fragment length: "" + (record.fragment.length))); return result.toString(); }",19fea6ec062650279c9342f95c393ea71e0b8678,"getFragmentInfo(android.security.cts.OpenSSLHeartbleedTest.TlsRecord,boolean)",118098,379,379
114078,test_417-optimizing-arith-div_src_Main.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,static long $opt$DivZero(long a) { return a / 0; },6c46ab5854790007d4bc07a6b5c960da8c95d779,,$opt$DivZero(long),7,12,static long $opt$DivZero(long a) { return a / 0L; },3c541e62936c7e911654e7ff19a5e8843d73e094,$opt$DivZero(long),199213,20,22
330025,ojluni_src_main_java_sun_net_www_protocol_jar_URLJarFile.java,5.0,"private static java.util.jar.JarFile retrieve(final java.net.URL url, final sun.net.www.protocol.jar.URLJarFile.URLJarFileCloseController closeController) throws java.io.IOException { if ((sun.net.www.protocol.jar.URLJarFile.callback) != null) { return sun.net.www.protocol.jar.URLJarFile.callback.retrieve(url); } else { java.util.jar.JarFile result = null; try (final java.io.InputStream in = url.openConnection().getInputStream()) { result = java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<java.util.jar.JarFile>() { public java.util.jar.JarFile run() throws java.io.IOException { java.nio.file.Path tmpFile = java.nio.file.Files.createTempFile(""jar_cache"", null); try { java.nio.file.Files.copy(in, tmpFile, java.nio.file.StandardCopyOption.REPLACE_EXISTING); java.util.jar.JarFile jarFile = new sun.net.www.protocol.jar.URLJarFile(tmpFile.toFile(), closeController); tmpFile.toFile().deleteOnExit(); return jarFile; } catch (java.lang.Throwable thr) { try { java.nio.file.Files.delete(tmpFile); } catch (java.io.IOException ioe) { thr.addSuppressed(ioe); } throw thr; } } }); } catch (java.security.PrivilegedActionException pae) { throw ((java.io.IOException) (pae.getException())); } return result; } }",a86fc387241c271264b5e72ead7e44b97896e285,"private static java.util.jar.JarFile retrieve(final java.net.URL url, final sun.net.www.protocol.jar.URLJarFile.URLJarFileCloseController closeController) throws java.io.IOException { java.util.jar.JarFile result = null; try (final java.io.InputStream in = url.openConnection().getInputStream()) { result = java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<java.util.jar.JarFile>() { public java.util.jar.JarFile run() throws java.io.IOException { java.nio.file.Path tmpFile = java.nio.file.Files.createTempFile(""jar_cache"", null); try { java.nio.file.Files.copy(in, tmpFile, java.nio.file.StandardCopyOption.REPLACE_EXISTING); java.util.jar.JarFile jarFile = new sun.net.www.protocol.jar.URLJarFile(tmpFile.toFile(), closeController); tmpFile.toFile().deleteOnExit(); return jarFile; } catch (java.lang.Throwable thr) { try { java.nio.file.Files.delete(tmpFile); } catch (java.io.IOException ioe) { thr.addSuppressed(ioe); } throw thr; } } }); } catch (java.security.PrivilegedActionException pae) { throw ((java.io.IOException) (pae.getException())); } return result; }",acdbd3b91a6cb27e3350c3362cafaba76b4e863a,"retrieve(java.net.URL,sun.net.www.protocol.jar.URLJarFile$URLJarFileCloseController)","retrieve(java.net.URL,sun.net.www.protocol.jar.URLJarFile$URLJarFileCloseController)",2,5,"private static java.util.jar.JarFile retrieve(final java.net.URL url, final sun.net.www.protocol.jar.URLJarFile.URLJarFileCloseController closeController) throws java.io.IOException { { java.util.jar.JarFile result = null; try (final java.io.InputStream in = url.openConnection().getInputStream()) { result = java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<java.util.jar.JarFile>() { public java.util.jar.JarFile run() throws java.io.IOException { java.nio.file.Path tmpFile = java.nio.file.Files.createTempFile(""jar_cache"", null); try { java.nio.file.Files.copy(in, tmpFile, java.nio.file.StandardCopyOption.REPLACE_EXISTING); java.util.jar.JarFile jarFile = new sun.net.www.protocol.jar.URLJarFile(tmpFile.toFile(), closeController); tmpFile.toFile().deleteOnExit(); return jarFile; } catch (java.lang.Throwable thr) { try { java.nio.file.Files.delete(tmpFile); } catch (java.io.IOException ioe) { thr.addSuppressed(ioe); } throw thr; } } }); } catch (java.security.PrivilegedActionException pae) { throw ((java.io.IOException) (pae.getException())); } return result; } }",7d345a8c9e3ffdcaae82a1aaaf572891f77554ce,"retrieve(java.net.URL,sun.net.www.protocol.jar.URLJarFile$URLJarFileCloseController)",160304,303,305
584550,src_main_java_com_android_apksig_internal_apk_SigningBlockScheme_ApkSigningBlockUtils.java,,,,"public static com.android.apksig.util.DataSource generateApkSigningBlockCDOffset(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { long centralDirOffsetForDigesting = beforeCentralDir.size(); java.nio.ByteBuffer eocdBuf = java.nio.ByteBuffer.allocate(((int) (eocd.size()))); eocdBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); eocd.copyTo(0, ((int) (eocd.size())), eocdBuf); eocdBuf.flip(); com.android.apksig.internal.zip.ZipUtils.setZipEocdCentralDirectoryOffset(eocdBuf, centralDirOffsetForDigesting); return com.android.apksig.util.DataSources.asDataSource(eocdBuf); }",6c204f7ec307421a543ca6c47d87e7223af3e22f,,"generateApkSigningBlockCDOffset(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource)",4,40,"public static com.android.apksig.util.DataSource copyWithModifiedCDOffset(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { long centralDirOffsetForDigesting = beforeCentralDir.size(); java.nio.ByteBuffer eocdBuf = java.nio.ByteBuffer.allocate(((int) (eocd.size()))); eocdBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); eocd.copyTo(0, ((int) (eocd.size())), eocdBuf); eocdBuf.flip(); com.android.apksig.internal.zip.ZipUtils.setZipEocdCentralDirectoryOffset(eocdBuf, centralDirOffsetForDigesting); return com.android.apksig.util.DataSources.asDataSource(eocdBuf); }",2ae075b27548dcc9eb091397ca11558cffc8edb0,"copyWithModifiedCDOffset(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource)",4631,197,196
632219,services_core_java_com_android_server_BluetoothManagerService.java,44.0,"public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable(): not enabling - bluetooth disallowed""); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""enable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((((((""enable("" + packageName) + ""): mBluetooth ="") + (mBluetooth)) + "" mBinding = "") + (mBinding)) + "" mState = "") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable returning""); } return true; }",3266e84984e219ede3770fa7fc385c6ea1f182b4,"public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable(): not enabling - bluetooth disallowed""); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""enable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((((((""enable("" + packageName) + ""): mBluetooth ="") + (mBluetooth)) + "" mBinding = "") + (mBinding)) + "" mState = "") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, com.android.server.BluetoothManagerService.REASON_PACKAGE, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable returning""); } return true; }",80c44d0d05b1e37b70b271e2d499ae56b594f497,enable(java.lang.String),enable(java.lang.String),9,44,"public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable(): not enabling - bluetooth disallowed""); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, ""enable(): not allowed for non-active and non system user""); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, (((((((""enable("" + packageName) + ""): mBluetooth ="") + (mBluetooth)) + "" mBinding = "") + (mBinding)) + "" mState = "") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, BluetoothProtoEnums.ENABLE_DISABLE_REASON_APPLICATION_REQUEST, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""enable returning""); } return true; }",ab245ab741b0b372739cc7f6c74e8f24590bb9e3,enable(java.lang.String),386475,437,438
202428,src_platform_java_org_conscrypt_TrustManagerImpl.java,19.0,"private java.util.List<java.security.cert.X509Certificate> checkTrusted(java.security.cert.X509Certificate[] chain, java.lang.String authType, javax.net.ssl.SSLSession session, javax.net.ssl.SSLParameters parameters, boolean clientAuth) throws java.security.cert.CertificateException { final java.lang.String hostname = (session != null) ? session.getPeerHost() : null; if ((session != null) && (parameters != null)) { java.lang.String identificationAlgorithm = parameters.getEndpointIdentificationAlgorithm(); if ((identificationAlgorithm != null) && (""HTTPS"".equals(identificationAlgorithm.toUpperCase(java.util.Locale.US)))) { javax.net.ssl.HostnameVerifier verifier = javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier(); if (!(verifier.verify(hostname, session))) { throw new java.security.cert.CertificateException(""No subjectAltNames on the certificate match""); } } } return checkTrusted(chain, authType, hostname, clientAuth); }",b71b2d0bcb2f658fc25471ab275d81c58e7cb82c,"private java.util.List<java.security.cert.X509Certificate> checkTrusted(java.security.cert.X509Certificate[] chain, java.lang.String authType, javax.net.ssl.SSLSession session, javax.net.ssl.SSLParameters parameters, boolean clientAuth) throws java.security.cert.CertificateException { byte[] ocspData = null; java.lang.String hostname = null; if (session != null) { hostname = session.getPeerHost(); ocspData = getOcspDataFromSession(session); } if ((session != null) && (parameters != null)) { java.lang.String identificationAlgorithm = parameters.getEndpointIdentificationAlgorithm(); if ((identificationAlgorithm != null) && (""HTTPS"".equals(identificationAlgorithm.toUpperCase(java.util.Locale.US)))) { javax.net.ssl.HostnameVerifier verifier = javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier(); if (!(verifier.verify(hostname, session))) { throw new java.security.cert.CertificateException(""No subjectAltNames on the certificate match""); } } } return checkTrusted(chain, ocspData, authType, hostname, clientAuth); }",70d6236047309ed7a9de383d811fe091006c2a13,"checkTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLSession,javax.net.ssl.SSLParameters,boolean)","checkTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLSession,javax.net.ssl.SSLParameters,boolean)",6,23,"private java.util.List<java.security.cert.X509Certificate> checkTrusted(java.security.cert.X509Certificate[] certs, java.lang.String authType, javax.net.ssl.SSLSession session, javax.net.ssl.SSLParameters parameters, boolean clientAuth) throws java.security.cert.CertificateException { byte[] ocspData = null; java.lang.String hostname = null; if (session != null) { hostname = session.getPeerHost(); ocspData = getOcspDataFromSession(session); } if ((session != null) && (parameters != null)) { java.lang.String identificationAlgorithm = parameters.getEndpointIdentificationAlgorithm(); if ((identificationAlgorithm != null) && (""HTTPS"".equals(identificationAlgorithm.toUpperCase(java.util.Locale.US)))) { javax.net.ssl.HostnameVerifier verifier = javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier(); if (!(verifier.verify(hostname, session))) { throw new java.security.cert.CertificateException(""No subjectAltNames on the certificate match""); } } } return checkTrusted(certs, ocspData, authType, hostname, clientAuth); }",e3c13529238b58b8e1214c0a3f29b4e98e07727c,"checkTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLSession,javax.net.ssl.SSLParameters,boolean)",345169,256,257
489119,jdwp_src_test_java_org_apache_harmony_jpda_tests_framework_jdwp_VmMirror.java,118.0,"public java.lang.String getMethodName(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket packet = new org.apache.harmony.jpda.tests.framework.jdwp.CommandPacket(JDWPCommands.ReferenceTypeCommandSet.CommandSetID, JDWPCommands.ReferenceTypeCommandSet.MethodsCommand); packet.setNextValueAsReferenceTypeID(classID); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = performCommand(packet); int declared = reply.getNextValueAsInt(); long mID; java.lang.String value = null; java.lang.String methodName = """"; for (int i = 0; i < declared; i++) { mID = reply.getNextValueAsMethodID(); methodName = reply.getNextValueAsString(); reply.getNextValueAsString(); reply.getNextValueAsInt(); if (mID == methodID) { value = methodName; break; } } return value; }",5a1f21ab05af53e7084cf30d9e98f50c51e58147,"public java.lang.String getMethodName(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo[] methodInfos = getMethodsInfo(classID); for (org.apache.harmony.jpda.tests.framework.jdwp.VmMirror.MethodInfo methodInfo : methodInfos) { if (methodID == (methodInfo.getMethodID())) { return methodInfo.getName(); } } return ""unknown""; }",62e919a9c67e2556153c449dd0f1dd8c63053ecc,"getMethodName(long,long)","getMethodName(long,long)",2,112,"public java.lang.String getMethodName(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.Method[] methods = getMethods(classID); for (org.apache.harmony.jpda.tests.framework.jdwp.Method method : methods) { if (methodID == (method.getMethodID())) { return method.getName(); } } return ""unknown""; }",0f24574dfd80da924652055c5c4e3550f2076128,"getMethodName(long,long)",241916,107,95
300257,dalvik_src_main_java_dalvik_system_EmulatedStackFrame.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public dalvik.system.EmulatedStackFrame.StackFrameAccessor attach(dalvik.system.EmulatedStackFrame stackFrame) { frame = stackFrame; frameBuf = java.nio.ByteBuffer.wrap(frame.stackFrame).order(java.nio.ByteOrder.LITTLE_ENDIAN); numArgs = frame.type.ptypes().length; return this; },44e81849030660f633cbc71b0a315eba16db0b4e,,attach(dalvik.system.EmulatedStackFrame),5,17,public dalvik.system.EmulatedStackFrame.StackFrameAccessor attach(dalvik.system.EmulatedStackFrame stackFrame) { frame = stackFrame; frameBuf = java.nio.ByteBuffer.wrap(frame.stackFrame).order(java.nio.ByteOrder.LITTLE_ENDIAN); numArgs = frame.type.ptypes().length; referencesOffset = 0; argumentIdx = 0; return this; },810f33d44e2a4163cba025940265654d6fb36ccc,attach(dalvik.system.EmulatedStackFrame),124809,77,85
597795,src_java_com_android_internal_telephony_ims_ImsResolver.java,39.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; },bb84c31c869801f547126d443b33aafdef2d30d3,,getServiceInterface(),3,29,@java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; },b73cca7e5e471da76b9b69e20716dca364ddafc1,getServiceInterface(),492264,27,33
271554,src_com_android_server_telecom_CallAudioManager.java,41.0,"void silenceRingers() { for (com.android.server.telecom.Call call : mRingingCalls) { call.silence(); } mRingingCalls.clear(); mRinger.stopRinging(); mRinger.stopCallWaiting(); mCallAudioModeStateMachine.sendMessageWithArgs(CallAudioModeStateMachine.NO_MORE_RINGING_CALLS, makeArgsForModeStateMachine()); }",fbe92d41b5337c6dfbfee203f864ec1ac4c5c27b,"void silenceRingers() { for (com.android.server.telecom.Call call : mRingingCalls) { call.silence(); } mRingingCalls.clear(); mRinger.stopRinging(); mRinger.stopCallWaiting(); if (mCallsManager.hasRingingCall()) { return; } mCallAudioModeStateMachine.sendMessageWithArgs(CallAudioModeStateMachine.NO_MORE_RINGING_CALLS, makeArgsForModeStateMachine()); }",8f201c976933a35c22d6bb389e3c1d2e03bef237,silenceRingers(),silenceRingers(),4,44,void silenceRingers() { for (com.android.server.telecom.Call call : mRingingCalls) { call.silence(); } mRinger.stopRinging(); mRinger.stopCallWaiting(); },049861c843c48b0897c5fc97976e0a303ccc3288,silenceRingers(),474411,108,55
113354,jack_src_com_android_jack_jayce_JayceReaderFactory.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull protected static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.jayce.JayceVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> jayceReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = jayceReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError(""Security issue with Jayce stream""); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError((""Illegal argument for Jayce processor for version "" + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.jayce.JayceVersionException(((""Jayce version "" + version) + "" not supported"")); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError((""Jayce processing method not found for version "" + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError((""Problem instantiating Jayce processor for version "" + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError((""Problem accessing Jayce processor for version "" + version)); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e.getCause()); } return constructorInstance; }",ac12124f1fef7a0d0d5864b5d22553a517d7fec5,,"instantiateConstructorWithParameters(java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.String)",3,0,"@javax.annotation.Nonnull private static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.jayce.JayceVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> jayceReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = jayceReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError(""Security issue with Jayce stream""); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError((""Illegal argument for Jayce processor for version "" + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.jayce.JayceVersionException(((""Jayce version "" + version) + "" not supported"")); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError((""Jayce processing method not found for version "" + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError((""Problem instantiating Jayce processor for version "" + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError((""Problem accessing Jayce processor for version "" + version)); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e.getCause()); } return constructorInstance; }",4b6bd1c823ea1bced106d213e49140e91fc66964,"instantiateConstructorWithParameters(java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.String)",86410,393,393
233051,jdwp_src_test_java_org_apache_harmony_jpda_tests_share_JPDADebuggeeSynchronizer.java,4.0,"public synchronized int bindServer() { java.net.InetSocketAddress serverAddress = getSyncServerAddress(); try { logWriter.println((""[SYNC] Binding socket on: "" + serverAddress)); serverSocket = new java.net.ServerSocket(serverAddress.getPort(), 0, serverAddress.getAddress()); int localPort = serverSocket.getLocalPort(); logWriter.println(((((""[SYNC] Bound socket on: "" + serverAddress) + "" (local port: "") + localPort) + "")"")); return localPort; } catch (java.io.IOException e) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException(""[SYNC] Exception in binding for socket sync connection"", e); } }",e74f0edb7ce63fc29fbb90202aed34e6fcd2f502,"public synchronized int bindServer() { java.net.InetSocketAddress serverAddress = getSyncServerAddress(); try { logWriter.println((""[SYNC] Binding socket on: "" + serverAddress)); int syncServerPort = serverAddress.getPort(); java.net.InetAddress syncServerInetAddress = serverAddress.getAddress(); serverSocket = new java.net.ServerSocket(syncServerPort, 0, syncServerInetAddress); if (syncServerPort == 0) { int localSyncPort = serverSocket.getLocalPort(); if (isSyncPortConflictingWithTransportAddress(localSyncPort)) { logWriter.println((""[SYNC] Retrying, as sync port is already used in transport address: "" + localSyncPort)); java.net.ServerSocket newServerSocket = new java.net.ServerSocket(0, 0, syncServerInetAddress); serverSocket.close(); serverSocket = newServerSocket; } } int localPort = serverSocket.getLocalPort(); logWriter.println(((((""[SYNC] Bound socket on: "" + serverAddress) + "" (local port: "") + localPort) + "")"")); return localPort; } catch (java.io.IOException e) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException(""[SYNC] Exception in binding for socket sync connection"", e); } }",96397dc769febd8348118a4184a26e9e7191f199,bindServer(),bindServer(),7,3,"public synchronized int bindServer() { java.net.InetSocketAddress serverAddress = getSyncServerAddress(); try { logWriter.println((""[SYNC] Binding socket on: "" + serverAddress)); serverSocket = new java.net.ServerSocket(serverAddress.getPort(), 0, serverAddress.getAddress()); int localPort = serverSocket.getLocalPort(); logWriter.println(((((""[SYNC] Bound socket on: "" + serverAddress) + "" (local port: "") + localPort) + "")"")); return localPort; } catch (java.io.IOException e) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException(""[SYNC] Exception in binding for socket sync connection"", e); } }",e74f0edb7ce63fc29fbb90202aed34e6fcd2f502,bindServer(),509201,262,151
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,41.0,"@org.junit.Test public void sub_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SUB_FLOAT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",0a2d4703549e8ee07c109f2c2b46bcdb36e762e9,"@org.junit.Test public void sub_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SUB_FLOAT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",1a0de23349761aa4944a360145222a2cdb413080,sub_float(),sub_float(),4,41,"@org.junit.Test public void sub_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SUB_FLOAT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",3e9187ad22e18d91f1d97d27b37f7780752d1fa7,sub_float(),418841,109,107
384432,luni_src_test_java_libcore_java_text_OldNumberFormatTest.java,17.0,"public void test_equals() { java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance(); java.text.NumberFormat nf2 = java.text.NumberFormat.getInstance(); assertTrue(""Objects are not equal"", nf1.equals(nf2)); assertTrue(""THe same Objects are not equal"", nf1.equals(nf1)); nf2.setMaximumIntegerDigits(100); assertFalse(""Different NumberFormat are equal"", nf1.equals(nf2)); nf2.setMaximumIntegerDigits(nf1.getMaximumIntegerDigits()); assertTrue(""THe same Objects are not equal"", nf1.equals(nf2)); nf1 = java.text.NumberFormat.getIntegerInstance(); nf2 = java.text.NumberFormat.getIntegerInstance(java.util.Locale.CHINA); assertFalse(""Different NumberFormat are equal"", nf1.equals(nf2)); assertFalse(""Object is equal null"", nf1.equals(null)); }",311449aecfe98514a15ebec3713b69d320a53732,"public void test_equals() { java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance(); java.text.NumberFormat nf2 = java.text.NumberFormat.getInstance(); assertTrue(""Objects are not equal"", nf1.equals(nf2)); assertTrue(""THe same Objects are not equal"", nf1.equals(nf1)); nf2.setMaximumIntegerDigits(100); assertFalse(""Different NumberFormat are equal"", nf1.equals(nf2)); nf2.setMaximumIntegerDigits(nf1.getMaximumIntegerDigits()); assertFalse(""THe same Objects are equal"", nf1.equals(nf2)); nf1 = java.text.NumberFormat.getIntegerInstance(); nf2 = java.text.NumberFormat.getIntegerInstance(java.util.Locale.CHINA); assertFalse(""Different NumberFormat are equal"", nf1.equals(nf2)); assertFalse(""Object is equal null"", nf1.equals(null)); }",84bb1ccd4c9a32e228d24eb42c2dab80e88166df,test_equals(),test_equals(),18,17,"public void test_equals() { java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance(); java.text.NumberFormat nf2 = java.text.NumberFormat.getInstance(); assertTrue(""Objects are not equal"", nf1.equals(nf2)); assertTrue(""THe same Objects are not equal"", nf1.equals(nf1)); nf2.setMaximumIntegerDigits(100); assertFalse(""Different NumberFormat are equal"", nf1.equals(nf2)); nf1 = java.text.NumberFormat.getIntegerInstance(); nf2 = java.text.NumberFormat.getIntegerInstance(java.util.Locale.CHINA); assertFalse(""Different NumberFormat are equal"", nf1.equals(nf2)); assertFalse(""Object is equal null"", nf1.equals(null)); }",f73491cdcf290dff9e835c1492066d76498e9f6c,test_equals(),387129,179,151
79721,graphics_java_android_graphics_Matrix.java,24.0,"private static native boolean native_invert(int native_object, int inverse);",2cb50a307ce48ff47ad9074118e0cc462edcc917,"private static native boolean native_invert(long native_object, long inverse);",ac96fef9311c24a65a1f47bf34629cf547f32611,"native_invert(int,int)","native_invert(long,long)",6,52,"private static native boolean native_invert(long native_object, long native_inverse);",be80fdb3c159c04bbf9ff2f87f99c9b59f598875,"native_invert(long,long)",35475,16,18
128670,src_com_android_nfc_cardemulation_RegisteredT3tIdentifiersCache.java,,,,"void generateForegroundT3tIdentifiersCacheLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""generateForegroundT3tIdentifiersCacheLocked""); mForegroundT3tIdentifiersCache.clear(); if ((mPreferredForegroundService) != null) { for (android.nfc.cardemulation.NfcFServiceInfo service : mServices) { if (mPreferredForegroundService.equals(service.getComponent())) { mForegroundT3tIdentifiersCache.put(service.getNfcid2(), service); break; } } } if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, (""mForegroundT3tIdentifiersCache: size="" + (mForegroundT3tIdentifiersCache.size()))); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mForegroundT3tIdentifiersCache.entrySet()) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ((("" "" + (entry.getKey())) + ""/"") + (entry.getValue().getComponent().toString()))); } } updateRoutingLocked(); }",0913a372b0323ebb394f43de4abbf4d864032042,,generateForegroundT3tIdentifiersCacheLocked(),10,2,"void generateForegroundT3tIdentifiersCacheLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""generateForegroundT3tIdentifiersCacheLocked""); mForegroundT3tIdentifiersCache.clear(); if ((mEnabledForegroundService) != null) { for (android.nfc.cardemulation.NfcFServiceInfo service : mServices) { if (mEnabledForegroundService.equals(service.getComponent())) { if ((!(service.getSystemCode().equalsIgnoreCase(""NULL""))) && (!(service.getNfcid2().equalsIgnoreCase(""NULL"")))) { mForegroundT3tIdentifiersCache.put(service.getNfcid2(), service); } break; } } } if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, (""mForegroundT3tIdentifiersCache: size="" + (mForegroundT3tIdentifiersCache.size()))); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mForegroundT3tIdentifiersCache.entrySet()) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ((("" "" + (entry.getKey())) + ""/"") + (entry.getValue().getComponent().toString()))); } } updateRoutingLocked(); }",a3d3db614cf5f3cb5c40c0d9f212e8154c7d0555,generateForegroundT3tIdentifiersCacheLocked(),148746,334,363
109734,tests_tests_security_src_android_security_cts_SELinuxDomainTest.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertDomainZeroOrN(java.lang.String domain, java.lang.String... executables) throws java.io.FileNotFoundException { java.util.List<android.security.cts.SELinuxDomainTest.ProcessDetails> procs = android.security.cts.SELinuxDomainTest.ProcessDetails.getProcessMap().get(domain); if (procs == null) { return; } java.util.Set<java.lang.String> execList = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(executables)); for (android.security.cts.SELinuxDomainTest.ProcessDetails p : procs) { java.lang.String msg = ((((((""Expected one of \"""" + execList) + ""\"" in SELinux domain \"""") + domain) + ""\"""") + "" Found: \"""") + p) + ""\""""; assertTrue(msg, execList.contains(p.procTitle)); } }",17a617676cf349e08fcc394094beb57737119fb1,,"assertDomainZeroOrN(java.lang.String,java.lang.String[])",2,26,"private void assertDomainHasExecutable(java.lang.String domain, java.lang.String... executables) throws java.io.FileNotFoundException { java.util.List<android.security.cts.SELinuxDomainTest.ProcessDetails> procs = android.security.cts.SELinuxDomainTest.ProcessDetails.getProcessMap().get(domain); if (procs == null) { return; } java.util.Set<java.lang.String> execList = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(executables)); for (android.security.cts.SELinuxDomainTest.ProcessDetails p : procs) { java.lang.String msg = ((((((""Expected one of \"""" + execList) + ""\"" in SELinux domain \"""") + domain) + ""\"""") + "" Found: \"""") + p) + ""\""""; assertTrue(msg, execList.contains(p.procTitle)); } }",700c1ac4ef1a749b5aa953de674b0975cff1067c,"assertDomainHasExecutable(java.lang.String,java.lang.String[])",56674,214,212
525392,java_com_android_server_ethernet_EthernetTracker.java,,,,"private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.ethernet.EthernetTracker.ListenerInfo listenerInfo = ((com.android.server.ethernet.EthernetTracker.ListenerInfo) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) continue; } mListeners.getBroadcastItem(i).onAvailabilityChanged(iface, up); } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }",b491afc39c224b047b1f532f202f058ee806a5e4,,"updateInterfaceState(java.lang.String,boolean)",7,12,"private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.ethernet.EthernetTracker.ListenerInfo listenerInfo = ((com.android.server.ethernet.EthernetTracker.ListenerInfo) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) { continue; } } mListeners.getBroadcastItem(i).onAvailabilityChanged(iface, up); } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }",d7edb9f3a54ce06a8209152cc78657718fa6f388,"updateInterfaceState(java.lang.String,boolean)",177891,170,172
18960,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_platformData_AttrsXmlParser.java,5.0,"public com.android.ide.eclipse.adt.internal.resources.AttrsXmlParser preload() { org.w3c.dom.Document doc = getDocument(); if (doc == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, ""Failed to find %1$s"", mOsAttrsXmlPath); return this; } org.w3c.dom.Node res = doc.getFirstChild(); while (((res != null) && ((res.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE))) && (!(res.getNodeName().equals(""resources"")))) { res = res.getNextSibling(); } if (res == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, ""Failed to find a <resources> node in %1$s"", mOsAttrsXmlPath); return this; } parseResources(res); return this; }",40f4c864159a1ddbfef5ca87b601ae8565915f30,"public com.android.ide.common.platformData.AttrsXmlParser preload() { org.w3c.dom.Document doc = getDocument(); if (doc == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, ""Failed to find %1$s"", mOsAttrsXmlPath); return this; } org.w3c.dom.Node res = doc.getFirstChild(); while (((res != null) && ((res.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE))) && (!(res.getNodeName().equals(""resources"")))) { res = res.getNextSibling(); } if (res == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, ""Failed to find a <resources> node in %1$s"", mOsAttrsXmlPath); return this; } parseResources(res); return this; }",93cabf2d116538b5b925675ea6af726300ff2a03,preload(),preload(),2,6,"public com.android.ide.common.resources.platform.AttrsXmlParser preload() { org.w3c.dom.Document doc = getDocument(); if (doc == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, ""Failed to find %1$s"", mOsAttrsXmlPath); return this; } org.w3c.dom.Node res = doc.getFirstChild(); while (((res != null) && ((res.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE))) && (!(res.getNodeName().equals(""resources"")))) { res = res.getNextSibling(); } if (res == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, ""Failed to find a <resources> node in %1$s"", mOsAttrsXmlPath); return this; } parseResources(res); return this; }",ba27aeca9911da65e8ddcbdc1fd2731589844d6f,preload(),136460,207,208
144179,jack_src_com_android_jack_transformations_ast_inner_InnerAccessorGenerator.java,0.0,"static boolean isSuperClassOf(com.android.jack.ir.ast.JDefinedClass possibleSuper, com.android.jack.ir.ast.JDefinedClass type) { com.android.jack.ir.ast.JDefinedClassOrInterface superClass = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (type.getSuperClass())); while (superClass != null) { if (possibleSuper.isSameType(superClass)) { return true; } superClass = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (superClass.getSuperClass())); } return false; }",73c9522b40ac8a0db7c9d495d53c58e48c1ab09e,"@java.lang.Override protected void handleOuterFieldRead(@javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest tr, @javax.annotation.Nonnull com.android.jack.ir.ast.JFieldRef fieldRef, @javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface accessorClass) { com.android.jack.ir.ast.JField field = fieldRef.getFieldId().getField(); assert field != null; com.android.jack.transformations.ast.inner.GetterMarker marker = accessorClass.getMarker(com.android.jack.transformations.ast.inner.GetterMarker.class); if (marker == null) { marker = new com.android.jack.transformations.ast.inner.GetterMarker(); accessorClass.addMarker(marker); } com.android.jack.ir.ast.JMethod getter = marker.getOrCreateGetter(field, ((com.android.jack.ir.ast.JDefinedClass) (accessorClass))); com.android.jack.ir.ast.JMethodId getterId = getter.getMethodId(); com.android.jack.ir.ast.JMethodCall getterCall = new com.android.jack.ir.ast.JMethodCall(fieldRef.getSourceInfo(), null, accessorClass, getterId, getter.getType(), getterId.canBeVirtual()); if (!(field.isStatic())) { com.android.jack.ir.ast.JExpression instance = fieldRef.getInstance(); assert instance != null; getterCall.addArg(instance); } assert (getterCall.getArgs().size()) == (getter.getParams().size()); tr.append(new com.android.jack.transformations.request.Replace(fieldRef, getterCall)); }",41c42760ec8988bb8f4a788681dadafb644996a8,"isSuperClassOf(com.android.jack.ir.ast.JDefinedClass,com.android.jack.ir.ast.JDefinedClass)","handleOuterFieldRead(com.android.jack.transformations.request.TransformationRequest,com.android.jack.ir.ast.JFieldRef,com.android.jack.ir.ast.JDefinedClassOrInterface)",9,4,"protected void handleOuterFieldRead(@javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest tr, @javax.annotation.Nonnull com.android.jack.ir.ast.JFieldRef fieldRef, @javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface accessorClass) { com.android.jack.ir.ast.JField field = fieldRef.getFieldId().getField(); assert field != null; com.android.jack.transformations.ast.inner.GetterMarker marker = accessorClass.getMarker(com.android.jack.transformations.ast.inner.GetterMarker.class); if (marker == null) { marker = new com.android.jack.transformations.ast.inner.GetterMarker(); accessorClass.addMarker(marker); } com.android.jack.ir.ast.JMethod getter = marker.getOrCreateGetter(field, ((com.android.jack.ir.ast.JDefinedClass) (accessorClass))); com.android.jack.ir.ast.JMethodId getterId = getter.getMethodId(); com.android.jack.ir.ast.JMethodCall getterCall = new com.android.jack.ir.ast.JMethodCall(fieldRef.getSourceInfo(), null, accessorClass, getterId, getter.getType(), getterId.canBeVirtual()); if (!(field.isStatic())) { com.android.jack.ir.ast.JExpression instance = fieldRef.getInstance(); assert instance != null; getterCall.addArg(instance); } assert (getterCall.getArgs().size()) == (getter.getParams().size()); tr.append(new com.android.jack.transformations.request.Replace(fieldRef, getterCall)); }",ca6ace5884af2ce19f6a2d7b735d2668205fe1ea,"handleOuterFieldRead(com.android.jack.transformations.request.TransformationRequest,com.android.jack.ir.ast.JFieldRef,com.android.jack.ir.ast.JDefinedClassOrInterface)",313536,379,373
35881,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_resources_platform_AttrsXmlParser.java,14.0,"public void loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info) { if ((getDocument()) != null) { com.android.ide.common.resources.platform.ViewClassInfo viewLayoutClass = info.getViewLayoutClass(); java.lang.String xmlName = java.lang.String.format(""%1$s_%2$s"", viewLayoutClass.getShortClassName(), info.getShortClassName()); xmlName = xmlName.replaceFirst(""Params$"", """"); com.android.ide.common.resources.platform.DeclareStyleableInfo style = mStyleMap.get(xmlName); if (style != null) { java.lang.String definedBy = (viewLayoutClass.getFullClassName()) + (DOT_LAYOUT_PARAMS); com.android.ide.common.resources.platform.AttributeInfo[] attributes = style.getAttributes(); for (com.android.ide.common.resources.platform.AttributeInfo attribute : attributes) { if ((attribute.getDefinedBy()) == null) { attribute.setDefinedBy(definedBy); } } info.setAttributes(attributes); } } }",c3bd60528279f71c9f6dfdc6a3999c6fb1305fd8,"public void loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info) { if ((getDocument()) != null) { com.android.ide.common.resources.platform.ViewClassInfo viewLayoutClass = info.getViewLayoutClass(); java.lang.String xmlName = java.lang.String.format(""%1$s_%2$s"", viewLayoutClass.getShortClassName(), info.getShortClassName()); xmlName = com.android.ide.eclipse.adt.AdtUtils.stripFirst(xmlName, ""Params""); com.android.ide.common.resources.platform.DeclareStyleableInfo style = mStyleMap.get(xmlName); if (style != null) { java.lang.String definedBy = (viewLayoutClass.getFullClassName()) + (DOT_LAYOUT_PARAMS); com.android.ide.common.resources.platform.AttributeInfo[] attributes = style.getAttributes(); for (com.android.ide.common.resources.platform.AttributeInfo attribute : attributes) { if ((attribute.getDefinedBy()) == null) { attribute.setDefinedBy(definedBy); } } info.setAttributes(attributes); } } }",dedbac767dda212256c08be55d34c17048e3bb6a,loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo),loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo),3,14,"public void loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info) { if ((getDocument()) != null) { com.android.ide.common.resources.platform.ViewClassInfo viewLayoutClass = info.getViewLayoutClass(); java.lang.String xmlName = java.lang.String.format(""%1$s_%2$s"", viewLayoutClass.getShortClassName(), info.getShortClassName()); xmlName = com.android.ide.eclipse.adt.AdtUtils.stripSuffix(xmlName, ""Params""); com.android.ide.common.resources.platform.DeclareStyleableInfo style = mStyleMap.get(xmlName); if (style != null) { java.lang.String definedBy = (viewLayoutClass.getFullClassName()) + (DOT_LAYOUT_PARAMS); com.android.ide.common.resources.platform.AttributeInfo[] attributes = style.getAttributes(); for (com.android.ide.common.resources.platform.AttributeInfo attribute : attributes) { if ((attribute.getDefinedBy()) == null) { attribute.setDefinedBy(definedBy); } } info.setAttributes(attributes); } } }",a84cbbc60d44dc13eec50d64c23d4daf53f780cf,loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo),273455,257,257
113692,build-system_builder_src_main_java_com_android_builder_core_ApkInfoParser.java,,,,"@com.android.annotations.NonNull public com.android.builder.core.ApkInfoParser.ApkInfo parseApk(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { if (!(mAaptFile.isFile())) { throw new java.lang.IllegalStateException((""aapt is missing from location: "" + (mAaptFile.getAbsolutePath()))); } final java.util.List<java.lang.String> aaptOutput = getAaptOutput(apkFile); return com.android.builder.core.ApkInfoParser.getApkInfo(aaptOutput); }",f2a6e024865c0e8df249f8be44e4d41f3830a595,,parseApk(java.io.File),4,2,"@com.android.annotations.NonNull public com.android.builder.core.ApkInfoParser.ApkInfo parseApk(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { if (!(mAaptFile.isFile())) { throw new java.lang.IllegalStateException((""aapt is missing from location: "" + (mAaptFile.getAbsolutePath()))); } return com.android.builder.core.ApkInfoParser.getApkInfo(getAaptOutput(apkFile)); }",298cf7e2ab236749a1e0fbff8579767a2fbfdcc2,parseApk(java.io.File),440872,153,131
548206,src_com_android_bluetooth_hfp_HeadsetService.java,26.0,"private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); return mStateMachine.getDevicesMatchingConnectionStates(states); }",28939e1f5ef95a270d7a56672d5b5428a2ef4afb,"private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.ArrayList<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if (states == null) { return devices; } synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { int currentState = stateMachine.getConnectionState(); for (int state : states) { if (currentState == state) { devices.add(stateMachine.getDevice()); break; } } } } return devices; }",0e09eb58a7d7c1180a969ca67c68ef34160ded41,getDevicesMatchingConnectionStates(int[]),getDevicesMatchingConnectionStates(int[]),34,24,"private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); java.util.ArrayList<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if (states == null) { return devices; } final android.bluetooth.BluetoothDevice[] bondedDevices = mAdapterService.getBondedDevices(); if (bondedDevices == null) { return devices; } synchronized(mStateMachines) { for (android.bluetooth.BluetoothDevice device : bondedDevices) { final android.os.ParcelUuid[] featureUuids = mAdapterService.getRemoteUuids(device); if (!(android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.hfp.HeadsetService.HEADSET_UUIDS))) { continue; } int connectionState = getConnectionState(device); for (int state : states) { if (connectionState == state) { devices.add(device); break; } } } } return devices; }",d5cf7127ad82752dee10ab37808baf76ad4a1563,getDevicesMatchingConnectionStates(int[]),210700,166,244
180122,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_ClassType_NewInstanceStringTest.java,,,,"public void testNewInstanceString_StringConstructor() { runTestNewInstanceString(""(Ljava/lang/String;)V"", new org.apache.harmony.jpda.tests.jdwp.ClassType.NewInstanceStringTest.ConstructorArgumentsProvider() { @java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); long testStringFieldId = checkField(debuggeeClassId, ""TEST_STRING""); org.apache.harmony.jpda.tests.framework.jdwp.Value testStringValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, testStringFieldId); constructorArguments.add(testStringValue); } }); }",0ac2d57b4645309aaa7b46c057f1782c093b7177,,testNewInstanceString_StringConstructor(),2,10,"public void testNewInstanceString_StringConstructor() { runTestNewInstanceString(""(Ljava/lang/String;)V"", new org.apache.harmony.jpda.tests.jdwp.ClassType.NewInstanceStringTest.ConstructorArgumentsProvider() { @java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value testStringValue = getStaticFieldValue(debuggeeClassId, ""TEST_STRING""); constructorArguments.add(testStringValue); } }); }",b11b15d6d2c6861eeb513cdb8810c54d7b7695c0,testNewInstanceString_StringConstructor(),31355,191,163
112447,updater_testSrc_com_intellij_updater_PatchFileCreatorTest.java,17.0,"@org.junit.Test public void testApplyWhenNewFileExistsStrict() throws java.lang.Exception { myPatchSpec.setStrict(true); com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create(myPatchSpec, myFile, com.intellij.updater.TEST_UI); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, ""newfile.txt""), ""hello""); com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate(myFile, myOlderDir, com.intellij.updater.TEST_UI); assertEquals(1, preparationResult.validationResults.size()); assertEquals(new com.intellij.updater.ValidationResult(ValidationResult.Kind.CONFLICT, ""newfile.txt"", ValidationResult.Action.VALIDATE, ""Unexpected file"", ValidationResult.Option.DELETE), preparationResult.validationResults.get(0)); assertAppliedAndRevertedCorrectly(patch, preparationResult); }",10db63b0a85e46af45f29694792f9eb4c8aa4c06,"@org.junit.Test public void testApplyWhenNewFileExistsStrict() throws java.lang.Exception { myPatchSpec.setStrict(true); myPatchSpec.setDeleteFiles(java.util.Collections.singletonList(""lib/java_pid*.hprof"")); com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create(myPatchSpec, myFile, com.intellij.updater.TEST_UI); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, ""newfile.txt""), ""hello""); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, ""lib/java_pid1234.hprof""), ""bye!""); com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate(myFile, myOlderDir, com.intellij.updater.TEST_UI); assertEquals(1, preparationResult.validationResults.size()); assertEquals(new com.intellij.updater.ValidationResult(ValidationResult.Kind.CONFLICT, ""newfile.txt"", ValidationResult.Action.VALIDATE, ""Unexpected file"", ValidationResult.Option.DELETE), preparationResult.validationResults.get(0)); assertAppliedAndRevertedCorrectly(patch, preparationResult); }",f686f215870e53487faedb935d2f54a637a9fa8d,testApplyWhenNewFileExistsStrict(),testApplyWhenNewFileExistsStrict(),4,17,"@org.junit.Test public void testApplyWhenNewFileExistsStrict() throws java.lang.Exception { myPatchSpec.setStrict(true); myPatchSpec.setDeleteFiles(java.util.Collections.singletonList(""lib/java_pid.*\\.hprof"")); com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create(myPatchSpec, myFile, com.intellij.updater.TEST_UI); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, ""newfile.txt""), ""hello""); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, ""lib/java_pid1234.hprof""), ""bye!""); com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate(myFile, myOlderDir, com.intellij.updater.TEST_UI); assertEquals(1, preparationResult.validationResults.size()); assertEquals(new com.intellij.updater.ValidationResult(ValidationResult.Kind.CONFLICT, ""newfile.txt"", ValidationResult.Action.VALIDATE, ""Unexpected file"", ValidationResult.Option.DELETE), preparationResult.validationResults.get(0)); assertAppliedAndRevertedCorrectly(patch, preparationResult); }",69649c65cf76e962b636a6b2a553b66be014fd0b,testApplyWhenNewFileExistsStrict(),378374,308,309
40088,sdkmanager_libs_sdklib_src_com_android_sdklib_devices_DeviceManager.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void registerListener(com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener) { synchronized(com.android.sdklib.devices.DeviceManager.listeners) { com.android.sdklib.devices.DeviceManager.listeners.add(listener); } },b9f876de16a1593783f74bfc5956121cc152fcb6,,registerListener(com.android.sdklib.devices.DeviceManager$DevicesChangeListener),3,13,public void registerListener(com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener) { com.android.sdklib.devices.DeviceManager.listeners.add(listener); },4529598f53c3943874411ed6163c025b72c4f927,registerListener(com.android.sdklib.devices.DeviceManager$DevicesChangeListener),328088,62,43
488845,src_com_android_bluetooth_btservice_AdapterProperties.java,41.0,"private void sendConnectionStateChange(int profile, android.content.Intent connIntent) { android.bluetooth.BluetoothDevice device = connIntent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int prevState = connIntent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1)); int state = connIntent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1)); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, (((((((""PROFILE_CONNECTION_STATE_CHANGE: profile="" + profile) + "", device="") + device) + "", "") + prevState) + "" -> "") + state)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.e(com.android.bluetooth.btservice.AdapterProperties.TAG, (((((((""PROFILE_CONNECTION_STATE_CHANGE: invalid transition for profile="" + profile) + "", device="") + device) + "", "") + prevState) + "" -> "") + state)); } sendConnectionStateChange(device, profile, state, prevState); }",ebd4b5f4b96ec21835a370ddc468ac942acde237,"private void sendConnectionStateChange(int profile, android.content.Intent connIntent) { android.bluetooth.BluetoothDevice device = connIntent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int prevState = connIntent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1)); int state = connIntent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1)); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, (((((((""PROFILE_CONNECTION_STATE_CHANGE: profile="" + profile) + "", device="") + device) + "", "") + prevState) + "" -> "") + state)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterProperties.TAG, (((((((""PROFILE_CONNECTION_STATE_CHANGE: abnormal transition for profile="" + profile) + "", device="") + device) + "", "") + prevState) + "" -> "") + state)); } sendConnectionStateChange(device, profile, state, prevState); }",719815dd0193ff0b154be1c99cda400514aa78d5,"sendConnectionStateChange(int,android.content.Intent)","sendConnectionStateChange(int,android.content.Intent)",2,41,"private void sendConnectionStateChange(int profile, android.content.Intent connIntent) { android.bluetooth.BluetoothDevice device = connIntent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int prevState = connIntent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1)); int state = connIntent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1)); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, (((((((""PROFILE_CONNECTION_STATE_CHANGE: profile="" + profile) + "", device="") + device) + "", "") + prevState) + "" -> "") + state)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterProperties.TAG, (((((((""PROFILE_CONNECTION_STATE_CHANGE: unexpected transition for profile="" + profile) + "", device="") + device) + "", "") + prevState) + "" -> "") + state)); } sendConnectionStateChange(device, profile, state, prevState); }",1664efd76e977a1b16e10b5ce592adcb8d9dd93a,"sendConnectionStateChange(int,android.content.Intent)",523962,248,248
328259,jill_src_com_android_jill_frontend_java_MethodBodyWriter.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private int getParameterModifier(@javax.annotation.Nonnegative int localIdx, @javax.annotation.CheckForNull org.objectweb.asm.tree.LocalVariableNode lvn) { if ((currentMethod.parameters) != null) { return (currentMethod.parameters.get((com.android.jill.frontend.java.AsmHelper.isStatic(currentMethod) ? localIdx : localIdx - 1)).access) | (com.android.jill.frontend.java.MethodBodyWriter.NAME_PRESENT); } else if (lvn == null) { return ACC_SYNTHETIC; } return com.android.jill.frontend.java.MethodBodyWriter.NO_MODIFIER; }",626e26379dd75a6480d9789cb0ae790dded9f990,,"getParameterModifier(int,org.objectweb.asm.tree.LocalVariableNode)",6,12,"private int getParameterModifier(@javax.annotation.Nonnegative int parameterIdx, @javax.annotation.CheckForNull org.objectweb.asm.tree.LocalVariableNode lvn) { if ((currentMethod.parameters) != null) { return (currentMethod.parameters.get(parameterIdx).access) | (com.android.jill.frontend.java.MethodBodyWriter.NAME_PRESENT); } else if (lvn == null) { return ACC_SYNTHETIC; } return com.android.jill.frontend.java.MethodBodyWriter.NO_MODIFIER; }",16525d1bc79afbcf65a3fa2171ceac4d1215c656,"getParameterModifier(int,org.objectweb.asm.tree.LocalVariableNode)",166750,155,126
120476,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,36.0,"private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if (com.android.build.gradle.integration.common.utils.JacocoAgent.isJacocoEnabled()) { launcher.setJvmArguments(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }",85588c7473b4aa5103bcf3d517be0d2201a77768,"private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); java.lang.StringBuilder jvmArguments = new java.lang.StringBuilder(); java.lang.String debugIntegrationTest = java.lang.System.getenv(""DEBUG_INNER_TEST""); if ((!(com.google.common.base.Strings.isNullOrEmpty(debugIntegrationTest))) && (debugIntegrationTest.equals(name))) { jvmArguments.append(""-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005""); } if (com.android.build.gradle.integration.common.utils.JacocoAgent.isJacocoEnabled()) { if ((jvmArguments.length()) != 0) { jvmArguments.append(' '); } jvmArguments.append(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if ((jvmArguments.length()) > 0) { launcher.setJvmArguments(jvmArguments.toString()); } if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }",fb84186e994998f3b498edeb569f8ef4757acd8a,"executeBuild(java.util.List,org.gradle.tooling.ProjectConnection,java.lang.String[])","executeBuild(java.util.List,org.gradle.tooling.ProjectConnection,java.lang.String[])",2,36,"private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); java.util.List<java.lang.String> jvmArguments = new java.util.ArrayList<java.lang.String>(); java.lang.String debugIntegrationTest = java.lang.System.getenv(""DEBUG_INNER_TEST""); if ((!(com.google.common.base.Strings.isNullOrEmpty(debugIntegrationTest))) && (debugIntegrationTest.equals(name))) { jvmArguments.add(""-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005""); } if (com.android.build.gradle.integration.common.utils.JacocoAgent.isJacocoEnabled()) { jvmArguments.add(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if (!(jvmArguments.isEmpty())) { launcher.setJvmArguments(jvmArguments.toArray(new java.lang.String[jvmArguments.size()])); } if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }",6324bf4e41ac28ef6e897d79e37db3477f3de07b,"executeBuild(java.util.List,org.gradle.tooling.ProjectConnection,java.lang.String[])",104778,356,356
441634,telephony_java_android_telephony_MbmsDownloadManager.java,11.0,"private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsDownloadManager.MBMS_DOWNLOAD_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, ""Service died before initialization""); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, ""Runtime exception during initialization""); mCallback.error(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { mCallback.error(result, ""Error returned during initialization""); return; } mService.set(downloadService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { mService.set(null); } }); }",fb4d85be4dc8ff502b6fe26cc8d5c5f3b54f03da,"private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsDownloadManager.MBMS_DOWNLOAD_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, ""Service died before initialization""); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, ""Runtime exception during initialization""); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, ""Error returned during initialization""); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } try { downloadService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, ""Middleware lost during initialization""); android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } mService.set(downloadService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsDownloadManager.sIsInitialized = false; mService.set(null); } }); }",41152066ad61426bc00d623606b28c6d46b55f2d,bindAndInitialize(),bindAndInitialize(),6,9,"private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsDownloadManager.MBMS_DOWNLOAD_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, ""Service died before initialization""); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, ""Runtime exception during initialization""); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, ""Error returned during initialization""); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); return; } try { downloadService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, ""Middleware lost during initialization""); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); return; } mService.set(downloadService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsDownloadManager.sIsInitialized.set(false); mService.set(null); } }); }",915e5def855f74c7b216e9f1ebc0b89a7c7ddcae,bindAndInitialize(),409235,442,452
15997,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_HierarchyViewerDirector.java,,,,"public void deviceConnected(final com.android.ddmlib.IDevice device) { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); com.android.ddmlib.Log.e(""hierarchy"", (""Unable to debug device "" + device)); return; } } com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); executeInBackground(new java.lang.Runnable() { public void run() { com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel().addDevice(device, windows); } }); if ((viewServerInfo.getProtocolVersion()) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(this, device); focusChanged(device); } } }",196740f31a03528b4809473f3b0e8a89f47e527d,,deviceConnected(com.android.ddmlib.IDevice),4,10,"public void deviceConnected(final com.android.ddmlib.IDevice device) { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); return; } } com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); executeInBackground(new java.lang.Runnable() { public void run() { com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel().addDevice(device, windows); } }); if ((viewServerInfo.protocolVersion) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(this, device); focusChanged(device); } } }",2f3b76ca67d304706af4ab241242d52864a7646c,deviceConnected(com.android.ddmlib.IDevice),125325,293,305
209856,android_icu4j_src_main_java_android_icu_text_DateTimePatternGenerator.java,62.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.util.List<java.lang.String> getPreferredHourFormats(android.icu.util.ULocale uLocale) { android.icu.util.ULocale max = android.icu.util.ULocale.addLikelySubtags(uLocale); java.lang.String country = max.getCountry(); if (country.isEmpty()) { country = ""001""; } java.lang.String langCountry = ((max.getLanguage()) + ""_"") + country; java.util.List<java.lang.String> list = android.icu.text.DateTimePatternGenerator.LOCALE_TO_PREFERED_HOUR.get(langCountry); if (list == null) { list = android.icu.text.DateTimePatternGenerator.LOCALE_TO_PREFERED_HOUR.get(country); if (list == null) { list = java.util.Collections.singletonList(""H""); } } return list; }",f0b5bbe74e00585f930f6eb33212f750c3d15325,,getPreferredHourFormats(android.icu.util.ULocale),4,76,"private static java.lang.String[] getAllowedHourFormats(android.icu.util.ULocale uLocale) { android.icu.util.ULocale max = android.icu.util.ULocale.addLikelySubtags(uLocale); java.lang.String country = max.getCountry(); if (country.isEmpty()) { country = ""001""; } java.lang.String langCountry = ((max.getLanguage()) + ""_"") + country; java.lang.String[] list = android.icu.text.DateTimePatternGenerator.LOCALE_TO_ALLOWED_HOUR.get(langCountry); if (list == null) { list = android.icu.text.DateTimePatternGenerator.LOCALE_TO_ALLOWED_HOUR.get(country); if (list == null) { list = android.icu.text.DateTimePatternGenerator.LAST_RESORT_ALLOWED_HOUR_FORMAT; } } return list; }",5e62bc32cc545c8f6d5abff9d2da45291f70885c,getAllowedHourFormats(android.icu.util.ULocale),428598,197,192
176131,dx_src_com_android_jack_dx_dex_code_form_Form25x.java,,,,"@java.lang.Override public void writeTo(com.android.jack.dx.util.AnnotatedOutput out, com.android.jack.dx.dex.code.DalvInsn insn) { com.android.jack.dx.rop.code.RegisterSpecList regs = explicitize(insn.getRegisters()); int sz = regs.size(); int r0 = (sz > 0) ? regs.get(0).getReg() : 0; int r1 = (sz > 1) ? regs.get(1).getReg() : 0; int r2 = (sz > 2) ? regs.get(2).getReg() : 0; int r3 = (sz > 3) ? regs.get(3).getReg() : 0; int r4 = (sz > 4) ? regs.get(4).getReg() : 0; write(out, opcodeUnit(insn, makeByte(r4, sz)), codeUnit(r0, r1, r2, r3)); }",6573fa3d996ef14d60f74648af25724de6635844,,"writeTo(com.android.jack.dx.util.AnnotatedOutput,com.android.jack.dx.dex.code.DalvInsn)",10,2,"@java.lang.Override public void writeTo(com.android.jack.dx.util.AnnotatedOutput out, com.android.jack.dx.dex.code.DalvInsn insn) { com.android.jack.dx.rop.code.RegisterSpecList regs = explicitize(insn.getRegisters()); int sz = regs.size(); int r0 = (sz > 0) ? regs.get(0).getReg() : 0; int r1 = (sz > 1) ? regs.get(1).getReg() : 0; int r2 = (sz > 2) ? regs.get(2).getReg() : 0; int r3 = (sz > 3) ? regs.get(3).getReg() : 0; int r4 = (sz > 4) ? regs.get(4).getReg() : 0; write(out, opcodeUnit(insn, makeByte(r4, (sz - 1))), codeUnit(r0, r1, r2, r3)); }",0e6d953c5a87e7c60e91e699468687533a199803,"writeTo(com.android.jack.dx.util.AnnotatedOutput,com.android.jack.dx.dex.code.DalvInsn)",478881,225,228
144767,lint_libs_lint-api_src_main_java_com_android_tools_lint_client_api_LintClient.java,41.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.annotations.NonNull public ResourceVisibilityLookup.Provider getResourceVisibility() { if ((mResourceVisibility) == null) { mResourceVisibility = new com.android.ide.common.repository.ResourceVisibilityLookup.Provider(); } return mResourceVisibility; },4ba2ad2dd82e38cc3ffd6d9750fa4f5370fa785e,,getResourceVisibility(),6,8,@com.android.annotations.NonNull public ResourceVisibilityLookup.Provider getResourceVisibilityProvider() { if ((mResourceVisibility) == null) { mResourceVisibility = new com.android.ide.common.repository.ResourceVisibilityLookup.Provider(); } return mResourceVisibility; },2d80b1543d453a2d1792b98e1ca38aa538e32a6d,getResourceVisibilityProvider(),353355,57,58
42735,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLSignatureRawRSA.java,7.0,"@java.lang.Override protected boolean engineVerify(byte[] sigBytes) throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException(""Need RSA public key""); } if (inputIsTooLong) { return false; } byte[] paddedBuffer = new byte[inputBuffer.length]; byte[] outputBuffer = new byte[inputBuffer.length]; try { int paddedSize = org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_public_decrypt(sigBytes.length, sigBytes, paddedBuffer, key.getPkeyContext(), NativeCrypto.RSA_NO_PADDING); paddedSize--; java.lang.System.arraycopy(paddedBuffer, 1, paddedBuffer, 0, paddedSize); final int size; try { size = org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_padding_check_PKCS1_type_1(outputBuffer, outputBuffer.length, paddedBuffer, paddedSize, inputBuffer.length); } catch (java.lang.Exception e) { return false; } boolean matches = size == (inputOffset); for (int i = 0; i < size; i++) { if ((inputBuffer[i]) != (outputBuffer[i])) { matches = false; } } return matches; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { inputOffset = 0; } }",edb927678d0de1b2cbdbc7001257763c3bd390c8,"@java.lang.Override protected boolean engineVerify(byte[] sigBytes) throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException(""Need RSA public key""); } if (inputIsTooLong) { return false; } byte[] outputBuffer = new byte[inputBuffer.length]; try { final int resultSize; try { resultSize = org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_public_decrypt(sigBytes.length, sigBytes, outputBuffer, key.getPkeyContext(), NativeCrypto.RSA_PKCS1_PADDING); } catch (java.security.SignatureException e) { throw e; } catch (java.lang.Exception e) { return false; } if (resultSize != (outputBuffer.length)) { outputBuffer = java.util.Arrays.copyOf(outputBuffer, resultSize); } boolean matches = resultSize == (inputOffset); for (int i = 0; i < resultSize; i++) { if ((inputBuffer[i]) != (outputBuffer[i])) { matches = false; } } return matches; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { inputOffset = 0; } }",782222e17062c15800583e15b914dbf6e5a4c914,engineVerify(byte[]),engineVerify(byte[]),3,7,"@java.lang.Override protected boolean engineVerify(byte[] sigBytes) throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException(""Need RSA public key""); } if (inputIsTooLong) { return false; } byte[] outputBuffer = new byte[inputBuffer.length]; try { final int resultSize; try { resultSize = org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_public_decrypt(sigBytes.length, sigBytes, outputBuffer, key.getPkeyContext(), NativeCrypto.RSA_PKCS1_PADDING); } catch (java.security.SignatureException e) { throw e; } catch (java.lang.Exception e) { return false; } boolean matches = resultSize == (inputOffset); for (int i = 0; i < resultSize; i++) { if ((inputBuffer[i]) != (outputBuffer[i])) { matches = false; } } return matches; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { inputOffset = 0; } }",73f6a1fe349aa4d1a7e865414020c4b373f24678,engineVerify(byte[]),144233,275,245
358929,core_java_android_net_StringNetworkSpecifier.java,,,,@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { if (other == null) return true; if (!(other instanceof android.net.StringNetworkSpecifier)) return false; return specifier.equals(((android.net.StringNetworkSpecifier) (other)).specifier); },78bec75b1d0ee9512c7b3fef60d9834c0a7f286e,,satisfiedBy(android.net.NetworkSpecifier),13,3,@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { return equals(other); },d6e2df3683924d2a4364cc71875619aa1aa44cf9,satisfiedBy(android.net.NetworkSpecifier),8706,65,27
298004,Common_src_com_googlecode_android_scripting_facade_wifi_WifiManagerFacade.java,75.0,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Forget a wifi network with priority"") public void wifiForgetNetwork(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""wifiSSID"") java.lang.Integer newtorkId) { com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener listener = new com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener(mEventFacade, ""ForgetNetwork""); mWifi.forget(newtorkId, listener); }",074fabe5ad18b3df3320d6cd0eae12d7f3b4af36,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Forget a wifi network with priority"") public void wifiForgetNetwork(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""wifiSSID"") java.lang.Integer newtorkId) { com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener listener = new com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener(mEventFacade, com.googlecode.android_scripting.facade.wifi.WifiConstants.WifiForgetNetworkCallback); mWifi.forget(newtorkId, listener); }",9c4b0a85dd898fd2e9dae5b492ebae7d0a58efb3,wifiForgetNetwork(java.lang.Integer),wifiForgetNetwork(java.lang.Integer),7,74,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Forget a wifi network by networkId"") public void wifiForgetNetwork(@com.googlecode.android_scripting.rpc.RpcParameter(name = ""wifiSSID"") java.lang.Integer networkId) { com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener listener = new com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener(mEventFacade, com.googlecode.android_scripting.facade.wifi.WifiConstants.WIFI_FORGET_NETWORK_CALLBACK); mWifi.forget(networkId, listener); }",af73fdc0a0f6630b040c10954d65990405c0735d,wifiForgetNetwork(java.lang.Integer),355329,149,150
151441,tests_tests_tv_src_android_media_tv_cts_TvViewTest.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testConnectionFailed() throws java.lang.Throwable { if (!(android.media.tv.cts.Utils.hasTvInputFramework(getActivity()))) { return; } mTvView.tune(""invalid_input_id"", TvContract.Channels.CONTENT_URI); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvViewTest.TIME_OUT) { @java.lang.Override protected boolean check() { return (mCallback.getConnectionFailedCount()) > 0; } }.run(); }",190a84dec957f3868070e483fbd1d45efde1d6ef,,testConnectionFailed(),3,0,"public void testConnectionFailed() throws java.lang.Throwable { if (!(android.media.tv.cts.Utils.hasTvInputFramework(getActivity()))) { return; } mCallback.resetConnectionFailedCount(); mTvView.tune(""invalid_input_id"", TvContract.Channels.CONTENT_URI); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvViewTest.TIME_OUT_MS) { @java.lang.Override protected boolean check() { return (mCallback.getConnectionFailedCount()) > 0; } }.run(); }",78f63f271e9122518ea43313b4f3ed0bbab592c3,testConnectionFailed(),259329,124,134
285003,tools_ahat_src_heapdump_Site.java,4.0,"public com.android.ahat.Site add(int stackId, int stackDepth, java.util.Iterator<com.android.tools.perflib.heap.StackFrame> path, com.android.tools.perflib.heap.Instance inst) { mObjects.add(inst); java.lang.String heap = inst.getHeap().getName(); mSizesByHeap.put(heap, ((getSize(heap)) + (inst.getSize()))); java.util.Map<com.android.tools.perflib.heap.ClassObj, com.android.ahat.Site.ObjectsInfo> classToObjectsInfo = mObjectsInfoMap.get(inst.getHeap()); if (classToObjectsInfo == null) { classToObjectsInfo = new java.util.HashMap<com.android.tools.perflib.heap.ClassObj, com.android.ahat.Site.ObjectsInfo>(); mObjectsInfoMap.put(inst.getHeap(), classToObjectsInfo); } com.android.ahat.Site.ObjectsInfo info = classToObjectsInfo.get(inst.getClassObj()); if (info == null) { info = new com.android.ahat.Site.ObjectsInfo(inst.getHeap(), inst.getClassObj(), 0, 0); mObjectsInfos.add(info); classToObjectsInfo.put(inst.getClassObj(), info); } (info.numInstances)++; info.numBytes += inst.getSize(); if (path.hasNext()) { java.lang.String next = path.next().toString(); com.android.ahat.Site child = mChildren.get(next); if (child == null) { child = new com.android.ahat.Site(this, next, stackId, (stackDepth + 1)); mChildren.put(next, child); } return child.add(stackId, (stackDepth + 1), path, inst); } else { return this; } }",25a467823a22ee7a32aa892816b5963161a0a57d,"com.android.ahat.heapdump.Site add(java.util.List<com.android.tools.perflib.heap.StackFrame> path, com.android.ahat.heapdump.AhatInstance inst) { mObjects.add(inst); java.lang.String heap = inst.getHeap().getName(); mSizesByHeap.put(heap, ((getSize(heap)) + (inst.getSize()))); java.util.Map<com.android.ahat.heapdump.AhatClassObj, com.android.ahat.heapdump.Site.ObjectsInfo> classToObjectsInfo = mObjectsInfoMap.get(inst.getHeap()); if (classToObjectsInfo == null) { classToObjectsInfo = new java.util.HashMap<com.android.ahat.heapdump.AhatClassObj, com.android.ahat.heapdump.Site.ObjectsInfo>(); mObjectsInfoMap.put(inst.getHeap(), classToObjectsInfo); } com.android.ahat.heapdump.Site.ObjectsInfo info = classToObjectsInfo.get(inst.getClassObj()); if (info == null) { info = new com.android.ahat.heapdump.Site.ObjectsInfo(inst.getHeap(), inst.getClassObj(), 0, 0); mObjectsInfos.add(info); classToObjectsInfo.put(inst.getClassObj(), info); } (info.numInstances)++; info.numBytes += inst.getSize(); if (!(path.isEmpty())) { java.lang.String next = path.get(0).toString(); com.android.ahat.heapdump.Site child = mChildren.get(next); if (child == null) { child = new com.android.ahat.heapdump.Site(this, next, inst.getId(), ((path.size()) - 1)); mChildren.put(next, child); } return child.add(path.subList(1, path.size()), inst); } else { return this; } }",94fa427295440bbd235fe005dddfc9ce9e6b9797,"add(int,int,java.util.Iterator,com.android.tools.perflib.heap.Instance)","add(java.util.List,com.android.ahat.heapdump.AhatInstance)",7,8,"com.android.ahat.heapdump.Site add(com.android.tools.perflib.heap.StackFrame[] frames, int depth, com.android.ahat.heapdump.AhatInstance inst) { return com.android.ahat.heapdump.Site.add(this, frames, depth, inst); }",e5a441660190fae34772761121ea191ae4bcf076,"add(com.android.tools.perflib.heap.StackFrame[],int,com.android.ahat.heapdump.AhatInstance)",183473,432,72
318329,src_com_android_networkrecommendation_WifiWakeupController.java,,,,"private boolean getWifiWakeupEnabledSetting() { return (Settings.Global.getInt(mContext.getContentResolver(), Settings.Global.WIFI_WAKEUP_ENABLED, 0)) == 1; }",7696bc75f87d044a22012341ea6feb35442bc5f5,,getWifiWakeupEnabledSetting(),11,7,"private boolean getWifiWakeupEnabledSetting() { return (Settings.Global.getInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 0)) == 1; }",4b49c2d82069810efb8bbec571652a88b7e5ab2c,getWifiWakeupEnabledSetting(),10808,37,35
327246,common_device-side_util_src_com_android_compatibility_common_util_PropertyUtil.java,,,,public static boolean isFactoryROM() { return (com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) == (com.android.compatibility.common.util.PropertyUtil.INT_VALUE_IF_UNSET); },c8ebde89a39e2cf78ef4716234a85b64fac65cda,,isFactoryROM(),2,2,public static boolean isFactoryROM() { return (com.android.compatibility.common.util.PropertyUtil.getPropertyInt(com.android.compatibility.common.util.PropertyUtil.FIRST_API_LEVEL)) == (com.android.compatibility.common.util.PropertyUtil.INT_VALUE_IF_UNSET); },76427e8c949c36702e11a653ef2ac21901a43bf0,isFactoryROM(),396443,51,69
179694,tools_ahat_src_ObjectHandler.java,12.0,"private static void printReferences(com.android.ahat.Doc doc, com.android.tools.perflib.heap.Instance inst) { doc.section(""Objects with References to this Object""); if (inst.getHardReferences().isEmpty()) { doc.println(com.android.ahat.DocString.text(""(none)"")); } else { doc.table(new com.android.ahat.Column(""Object"")); for (com.android.tools.perflib.heap.Instance ref : inst.getHardReferences()) { doc.row(com.android.ahat.Value.render(ref)); } doc.end(); } if ((inst.getSoftReferences()) != null) { doc.section(""Objects with Soft References to this Object""); doc.table(new com.android.ahat.Column(""Object"")); for (com.android.tools.perflib.heap.Instance ref : inst.getSoftReferences()) { doc.row(com.android.ahat.Value.render(inst)); } doc.end(); } }",de52cfda8865a4a9aa4366cf7c428949fd2042bd,"private static void printReferences(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.tools.perflib.heap.Instance inst) { doc.section(""Objects with References to this Object""); if (inst.getHardReferences().isEmpty()) { doc.println(com.android.ahat.DocString.text(""(none)"")); } else { doc.table(new com.android.ahat.Column(""Object"")); java.util.Collection<com.android.tools.perflib.heap.Instance> references = inst.getHardReferences(); com.android.ahat.LimitSelector selector = new com.android.ahat.LimitSelector(query, com.android.ahat.ObjectHandler.HARD_REFS_ID, references.size()); int limit = selector.getSelectedLimit(); java.util.Iterator<com.android.tools.perflib.heap.Instance> iter = references.iterator(); for (int i = 0; (i < limit) && (iter.hasNext()); i++) { com.android.tools.perflib.heap.Instance ref = iter.next(); doc.row(com.android.ahat.Value.render(ref)); } doc.end(); selector.render(doc); } if ((inst.getSoftReferences()) != null) { doc.section(""Objects with Soft References to this Object""); doc.table(new com.android.ahat.Column(""Object"")); java.util.Collection<com.android.tools.perflib.heap.Instance> references = inst.getSoftReferences(); com.android.ahat.LimitSelector selector = new com.android.ahat.LimitSelector(query, com.android.ahat.ObjectHandler.SOFT_REFS_ID, references.size()); int limit = selector.getSelectedLimit(); java.util.Iterator<com.android.tools.perflib.heap.Instance> iter = references.iterator(); for (int i = 0; (i < limit) && (iter.hasNext()); i++) { com.android.tools.perflib.heap.Instance ref = iter.next(); doc.row(com.android.ahat.Value.render(ref)); } doc.end(); selector.render(doc); } }",1bdfc25f4ba0242a98762ed9b8c29591d18ba9c6,"printReferences(com.android.ahat.Doc,com.android.tools.perflib.heap.Instance)","printReferences(com.android.ahat.Doc,com.android.ahat.Query,com.android.tools.perflib.heap.Instance)",4,1,"private static void printReferences(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.tools.perflib.heap.Instance inst) { doc.section(""Objects with References to this Object""); if (inst.getHardReferences().isEmpty()) { doc.println(com.android.ahat.DocString.text(""(none)"")); } else { doc.table(new com.android.ahat.Column(""Object"")); java.util.List<com.android.tools.perflib.heap.Instance> references = inst.getHardReferences(); com.android.ahat.SubsetSelector<com.android.tools.perflib.heap.Instance> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.HARD_REFS_ID, references); for (com.android.tools.perflib.heap.Instance ref : selector.selected()) { doc.row(com.android.ahat.Value.render(ref)); } doc.end(); selector.render(doc); } if ((inst.getSoftReferences()) != null) { doc.section(""Objects with Soft References to this Object""); doc.table(new com.android.ahat.Column(""Object"")); java.util.List<com.android.tools.perflib.heap.Instance> references = inst.getSoftReferences(); com.android.ahat.SubsetSelector<com.android.tools.perflib.heap.Instance> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.SOFT_REFS_ID, references); for (com.android.tools.perflib.heap.Instance ref : selector.selected()) { doc.row(com.android.ahat.Value.render(ref)); } doc.end(); selector.render(doc); } }",ea7acc7e671667f06869c6a1f0e22d6c135528d0,"printReferences(com.android.ahat.Doc,com.android.ahat.Query,com.android.tools.perflib.heap.Instance)",263286,489,415
95595,sdk-common_src_main_java_com_android_ide_common_sdk_SdkVersionInfo.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.Nullable public static com.android.sdklib.AndroidVersion getVersion(@com.android.annotations.Nullable java.lang.String value, @com.android.annotations.Nullable com.android.sdklib.IAndroidTarget[] targets) { if ((value == null) || (value.isEmpty())) { return null; } if (java.lang.Character.isDigit(value.charAt(0))) { try { int api = java.lang.Integer.parseInt(value); if (api >= 1) { return new com.android.sdklib.AndroidVersion(api, null); } return null; } catch (java.lang.NumberFormatException e) { return null; } } if (targets != null) { for (int i = (targets.length) - 1; i >= 0; i--) { com.android.sdklib.IAndroidTarget target = targets[i]; if (target.isPlatform()) { com.android.sdklib.AndroidVersion version = target.getVersion(); if ((version.isPreview()) && (value.equalsIgnoreCase(version.getCodename()))) { return new com.android.sdklib.AndroidVersion(version.getApiLevel(), version.getCodename()); } } } } int api = com.android.ide.common.sdk.SdkVersionInfo.getApiByPreviewName(value, false); if (api != (-1)) { return new com.android.sdklib.AndroidVersion((api - 1), value); } return new com.android.sdklib.AndroidVersion(com.android.ide.common.sdk.SdkVersionInfo.HIGHEST_KNOWN_API, value); }",8573577a10c9af5b6525c285f33b7b69cb69a886,,"getVersion(java.lang.String,com.android.sdklib.IAndroidTarget[])",3,4,"@com.android.annotations.Nullable public static com.android.sdklib.AndroidVersion getVersion(@com.android.annotations.Nullable java.lang.String apiOrPreviewName, @com.android.annotations.Nullable com.android.sdklib.IAndroidTarget[] targets) { if ((apiOrPreviewName == null) || (apiOrPreviewName.isEmpty())) { return null; } if (java.lang.Character.isDigit(apiOrPreviewName.charAt(0))) { try { int api = java.lang.Integer.parseInt(apiOrPreviewName); if (api >= 1) { return new com.android.sdklib.AndroidVersion(api, null); } return null; } catch (java.lang.NumberFormatException e) { return null; } } if (targets != null) { for (int i = (targets.length) - 1; i >= 0; i--) { com.android.sdklib.IAndroidTarget target = targets[i]; if (target.isPlatform()) { com.android.sdklib.AndroidVersion version = target.getVersion(); if ((version.isPreview()) && (apiOrPreviewName.equalsIgnoreCase(version.getCodename()))) { return new com.android.sdklib.AndroidVersion(version.getApiLevel(), version.getCodename()); } } } } int api = com.android.ide.common.sdk.SdkVersionInfo.getApiByPreviewName(apiOrPreviewName, false); if (api != (-1)) { return new com.android.sdklib.AndroidVersion((api - 1), apiOrPreviewName); } return new com.android.sdklib.AndroidVersion(com.android.ide.common.sdk.SdkVersionInfo.HIGHEST_KNOWN_API, apiOrPreviewName); }",da5ce4b551f969a70f0dbfff92341887b894052f,"getVersion(java.lang.String,com.android.sdklib.IAndroidTarget[])",484003,353,380
333187,tests_wifitests_src_com_android_server_wifi_aware_WifiAwareStateManagerTest.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"boolean process() { if ((mQueue.size()) == 0) { return false; } short tid = mQueue.poll(); int mid = mMessageIdsByTid.get(tid); if (((mNumberOfRetries) != null) && (mNumberOfRetries.containsKey(mid))) { int numRetries = mNumberOfRetries.get(mid); if (numRetries == (-1)) { mDut.onMessageSendFailNotification(tid, NanStatusType.INTERNAL_FAILURE); } else { int currentRetries = mRetriesByMid.get(mid); if (currentRetries > numRetries) { return false; } else if (currentRetries == numRetries) { mDut.onMessageSendSuccessNotification(tid); } else { mDut.onMessageSendFailNotification(tid, NanStatusType.NO_OTA_ACK); } mRetriesByMid.put(mid, (currentRetries + 1)); } } else { mDut.onMessageSendSuccessNotification(tid); } return true; }",ca0ca60cfee89503cbb6bfd1d451b1835c7ded07,,process(),3,45,"boolean process() { if ((mQueue.size()) == 0) { return false; } short tid = mQueue.poll(); int mid = mMessageIdsByTid.get(tid); if (((mRetryLimit) != null) && (mRetryLimit.containsKey(mid))) { int numRetries = mRetryLimit.get(mid); if (numRetries == (-1)) { mDut.onMessageSendFailNotification(tid, NanStatusType.INTERNAL_FAILURE); } else { int currentRetries = mTriesUsedByMid.get(mid); if (currentRetries > numRetries) { return false; } else if (currentRetries == numRetries) { mDut.onMessageSendSuccessNotification(tid); } else { mDut.onMessageSendFailNotification(tid, NanStatusType.NO_OTA_ACK); } mTriesUsedByMid.put(mid, (currentRetries + 1)); } } else { mDut.onMessageSendSuccessNotification(tid); } return true; }",8b6c78528fe00135bf5c337238c808d18d6db9c3,process(),164802,225,229
312405,jack_src_com_android_jack_analysis_tracer_ComposedTracerBrush.java,15.0,@java.lang.Override public void endTraceSeed(@javax.annotation.Nonnull com.android.jack.ir.ast.JField field) { composedStatus.pop(); },2bac820603c6dca01624edfdb6f27bc7a49d3241,@java.lang.Override public void endTraceSeed(@javax.annotation.Nonnull com.android.jack.ir.ast.JField field) { composedStatus.pop(); for (com.android.jack.analysis.tracer.TracerBrush config : brushes) { config.endTraceSeed(field); } },944f20f418ace1ffe2b50655c65618777cd66d03,endTraceSeed(com.android.jack.ir.ast.JField),endTraceSeed(com.android.jack.ir.ast.JField),2,15,@java.lang.Override public void endTraceSeed(@javax.annotation.Nonnull com.android.jack.ir.ast.JField field) { composedStatus.pop(); for (com.android.jack.analysis.tracer.TracerBrush brush : brushes) { brush.endTraceSeed(field); } },cf31a213a8489db830534ddd55fdf047ff370ef8,endTraceSeed(com.android.jack.ir.ast.JField),459131,70,72
65743,perflib_src_main_java_com_android_tools_perflib_vmtrace_MethodProfileData.java,,,,"private void addInclusiveTime(com.android.tools.perflib.vmtrace.Call call, com.android.tools.perflib.vmtrace.Call parent, com.android.tools.perflib.vmtrace.ThreadInfo thread, com.android.tools.perflib.vmtrace.ClockType type) { long time = call.getInclusiveTime(type, java.util.concurrent.TimeUnit.NANOSECONDS); mAllThreadStats.addInclusiveTime(time, type); getPerThreadCumulativeStats(thread).addInclusiveTime(time, type); if (parent != null) { getPerCallerTime(thread, parent).addInclusiveTime(time, type); } for (com.android.tools.perflib.vmtrace.Call callee : call.getCallees()) { } }",2f5fc232b27b6bbdc694233478b247d7044c804e,,"addInclusiveTime(com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.ThreadInfo,com.android.tools.perflib.vmtrace.ClockType)",11,26,"private void addInclusiveTime(com.android.tools.perflib.vmtrace.Call call, com.android.tools.perflib.vmtrace.Call parent, com.android.tools.perflib.vmtrace.ThreadInfo thread, com.android.tools.perflib.vmtrace.ClockType type) { long time = call.getInclusiveTime(type, com.android.tools.perflib.vmtrace.MethodProfileData.DATA_TIME_UNITS); addInclusiveTime(getPerThreadStats(thread), time, type); if (parent != null) { addInclusiveTime(getPerCallerStats(thread, parent), time, type); } for (com.android.tools.perflib.vmtrace.Call callee : call.getCallees()) { addInclusiveTime(getPerCalleeStats(thread, callee), callee.getInclusiveTime(type, com.android.tools.perflib.vmtrace.MethodProfileData.DATA_TIME_UNITS), type); } }",720855b25eca187beaa8a19e8a7351a5c26382c5,"addInclusiveTime(com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.ThreadInfo,com.android.tools.perflib.vmtrace.ClockType)",184490,172,216
567897,telephony_java_android_telephony_euicc_EuiccManager.java,9.0,@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return mController.getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },4768040ecfb308b3dd0383976a6d833f1bb9c4c0,@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return getIEuiccController().getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },8243aa719d49ca00d8b9af06c5eeeaa6245baaad,getEuiccInfo(),getEuiccInfo(),2,8,@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },c4d454ff1d75b775f2ee30704729845dbb08d3e4,getEuiccInfo(),377334,71,84
142363,jack_src_com_android_jack_cfg_CfgBuilder.java,20.0,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); assert (cfg) != null; com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(cfg, currentStmts); setBlockOfStatement(throwBlock); setExceptionEdges(throwBlock, throwStmt); return false; }",916d02d4018e0d665db3b97368f461636c1d5ae7,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); assert (cfg) != null; com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(cfg, currentStmts); setBlockOfStatement(throwBlock); forwardBranchResolver.addPeiBasicBlock(throwBlock, null, throwStmt.getJCatchBlocks()); return false; }",67edf7c2d6d2f10732dc4dca130f9e7538487148,visit(com.android.jack.ir.ast.JThrowStatement),visit(com.android.jack.ir.ast.JThrowStatement),6,16,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(throwBlock); forwardBranchResolver.addPeiBasicBlock(throwBlock, null, throwStmt.getJCatchBlocks()); return false; }",e7e1e0857931ee5d2992b89df48b99b428dd2bd0,visit(com.android.jack.ir.ast.JThrowStatement),321133,115,112
278609,telecomm_java_android_telecom_Logging_Events.java,,,,"public void addRequestResponsePair(android.telecom.Logging.Events.TimedEventPair p) { if (requestResponsePairs.containsKey(p.mRequest)) { requestResponsePairs.get(p.mRequest).add(p); } else { java.util.ArrayList<android.telecom.Logging.Events.TimedEventPair> responses = new java.util.ArrayList<>(); responses.add(p); requestResponsePairs.put(p.mRequest, responses); } }",4c547b51035084fac208c004ea19a536e9374201,,addRequestResponsePair(android.telecom.Logging.Events$TimedEventPair),3,4,"public void addRequestResponsePair(android.telecom.Logging.EventManager.TimedEventPair p) { if (requestResponsePairs.containsKey(p.mRequest)) { requestResponsePairs.get(p.mRequest).add(p); } else { java.util.ArrayList<android.telecom.Logging.EventManager.TimedEventPair> responses = new java.util.ArrayList<>(); responses.add(p); requestResponsePairs.put(p.mRequest, responses); } }",80cf2165c5116b838427bd6b5084cf3542fd1c79,addRequestResponsePair(android.telecom.Logging.EventManager$TimedEventPair),122389,105,107
16553,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_ui_DeviceSelector.java,7.0,public java.lang.Object[] getElements(java.lang.Object inputElement) { if (inputElement instanceof com.android.hierarchyviewerlib.models.DeviceSelectionModel) { return model.getDevices(); } return new java.lang.Object[0]; },776a504210712abb35b70cf20faaaa11c41331da,"public java.lang.Object[] getElements(java.lang.Object inputElement) { if (inputElement instanceof com.android.hierarchyviewerlib.models.DeviceSelectionModel) { java.lang.System.out.println((""LENGTH "" + (model.getDevices().length))); return model.getDevices(); } return new java.lang.Object[0]; }",26e36536a23047e8ff7a4b3b6d1440381c4cbae7,getElements(java.lang.Object),getElements(java.lang.Object),14,8,public java.lang.Object[] getElements(java.lang.Object inputElement) { if (inputElement instanceof com.android.hierarchyviewerlib.models.DeviceSelectionModel) { return model.getDevices(); } return new java.lang.Object[0]; },776a504210712abb35b70cf20faaaa11c41331da,getElements(java.lang.Object),450904,76,54
49623,ddmlib_src_main_java_com_android_ddmlib_HandleViewDebug.java,,,,"public static void listViewRoots(com.android.ddmlib.Client client, com.android.ddmlib.HandleViewDebug.ListViewRootsHandler replyHandler) throws java.io.IOException { java.nio.ByteBuffer buf = allocBuffer(4); com.android.ddmlib.JdwpPacket packet = new com.android.ddmlib.JdwpPacket(buf); java.nio.ByteBuffer chunkBuf = getChunkDataBuf(buf); chunkBuf.putInt(1); finishChunkPacket(packet, com.android.ddmlib.HandleViewDebug.CHUNK_VULW, chunkBuf.position()); client.sendAndConsume(packet, replyHandler); }",dce04802f47b6614288016d600a56c5f0b43c527,,"listViewRoots(com.android.ddmlib.Client,com.android.ddmlib.HandleViewDebug$ListViewRootsHandler)",6,5,"public static void listViewRoots(com.android.ddmlib.Client client, com.android.ddmlib.HandleViewDebug.ViewDumpHandler replyHandler) throws java.io.IOException { java.nio.ByteBuffer buf = allocBuffer(8); com.android.ddmlib.JdwpPacket packet = new com.android.ddmlib.JdwpPacket(buf); java.nio.ByteBuffer chunkBuf = getChunkDataBuf(buf); chunkBuf.putInt(1); finishChunkPacket(packet, com.android.ddmlib.HandleViewDebug.CHUNK_VULW, chunkBuf.position()); client.sendAndConsume(packet, replyHandler); }",3e035a9972eb0ff2527acf80c8b64d747c33524b,"listViewRoots(com.android.ddmlib.Client,com.android.ddmlib.HandleViewDebug$ViewDumpHandler)",49845,146,145
650064,services_net_java_android_net_dns_ResolvUtil.java,,,,public static void setProcessUseLocalNameservers(android.net.Network network) { final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); android.net.NetworkUtils.bindProcessToNetworkForHostResolution(((int) (netidForResolv))); },9545ec8de16ef691c94945a8956785905a7dc890,,setProcessUseLocalNameservers(android.net.Network),20,0,public static android.net.Network getNetworkWithUseLocalNameserversFlag(android.net.Network network) { final long netidForResolv = (android.net.dns.ResolvUtil.NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); return new android.net.Network(((int) (netidForResolv))); },e6d09a26df42208369226c7a42655d606e2d72c8,getNetworkWithUseLocalNameserversFlag(android.net.Network),93987,75,85
419419,src_com_android_bluetooth_btservice_RemoteDevices.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.util.Log.d(com.android.bluetooth.btservice.RemoteDevices.TAG, (""received intent: "" + intent)); java.lang.String action = intent.getAction(); switch (action) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged(intent); break; default : android.util.Log.w(com.android.bluetooth.btservice.RemoteDevices.TAG, (""unhandled intent: "" + intent)); break; } }",7a2f6529ec633f604ba80401530f30bc5f33fe6a,,"onReceive(android.content.Context,android.content.Intent)",16,7,"@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.util.Log.d(com.android.bluetooth.btservice.RemoteDevices.TAG, (""Received intent: "" + intent)); java.lang.String action = intent.getAction(); switch (action) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged(intent); break; default : android.util.Log.w(com.android.bluetooth.btservice.RemoteDevices.TAG, (""Unhandled intent: "" + intent)); break; } }",83899ae9bbfd1a5ea1be548b7016087ed9960d5d,"onReceive(android.content.Context,android.content.Intent)",502651,147,145
589595,src_main_java_com_android_apksig_internal_apk_v3_V3SchemeVerifier.java,,,,"private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block, java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance(""X.509""); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException(""Failed to obtain X.509 CertificateFactory"", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v3.V3SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, minSdkVersion, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V3_SIG_MALFORMED_SIGNER); return; } } }",ec73f9b66ebe43887c806f643ef374d3cff39b3b,,"parseSigners(java.nio.ByteBuffer,java.util.Set,int,int,com.android.apksig.internal.apk.ApkSigningBlockUtils$Result)",6,3,"private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block, java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance(""X.509""); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException(""Failed to obtain X.509 CertificateFactory"", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v3.V3SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V3_SIG_MALFORMED_SIGNER); return; } } }",8f8883eca599e9d039416b396719f58ccdc247a6,"parseSigners(java.nio.ByteBuffer,java.util.Set,int,int,com.android.apksig.internal.apk.ApkSigningBlockUtils$Result)",473391,459,452
186130,jack-tests_tests_com_android_jack_java8_MethodRefTest.java,1.0,"@org.junit.Test public void testMethodRef006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF006).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",2e14586eb0757ca9211dee219eca5ba9453927bc,"@org.junit.Test public void testMethodRef006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF006).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",f5f2e3bd619b59a91ac52b2ec8f9183cd8e9d27e,testMethodRef006(),testMethodRef006(),7,1,@org.junit.Test public void testMethodRef006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF006).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },1a3014963f16d26671d7ab20e3359d0911a18d4f,testMethodRef006(),466398,79,53
268033,src_com_android_stk_StkAppService.java,45.0,"com.android.internal.telephony.cat.Menu getMainMenu(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""StkAppService, getMainMenu, sim id: "" + slotId)); if (((slotId >= 0) && (slotId < (mSimCount))) && ((mStkContext[slotId].mMainCmd) != null)) { return mStkContext[slotId].mMainCmd.getMenu(); } else { return null; } }",d3b05d98246dcae4ecc542c08719b5948712f2e4,"com.android.internal.telephony.cat.Menu getMainMenu(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""StkAppService, getMainMenu, sim id: "" + slotId)); if (((slotId >= 0) && (slotId < (mSimCount))) && ((mStkContext[slotId].mMainCmd) != null)) { com.android.internal.telephony.cat.Menu menu = mStkContext[slotId].mMainCmd.getMenu(); if ((menu != null) && ((mSimCount) > (com.android.internal.telephony.PhoneConstants.MAX_PHONE_COUNT_SINGLE_SIM))) { if ((menu.title) == null) { com.android.stk.StkMenuConfig config = com.android.stk.StkMenuConfig.getInstance(getApplicationContext()); java.lang.String label = config.getLabel(slotId); if (label != null) { android.os.Parcel parcel = android.os.Parcel.obtain(); menu.writeToParcel(parcel, 0); parcel.setDataPosition(0); menu = Menu.CREATOR.createFromParcel(parcel); parcel.recycle(); menu.title = label; } } } return menu; } else { return null; } }",f6661f4df03e5a77e3e2eb5e85c08f78efb8952d,getMainMenu(int),getMainMenu(int),7,50,"com.android.internal.telephony.cat.Menu getMainMenu(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, (""StkAppService, getMainMenu, sim id: "" + slotId)); if (((slotId >= 0) && (slotId < (mSimCount))) && ((mStkContext[slotId].mMainCmd) != null)) { com.android.internal.telephony.cat.Menu menu = mStkContext[slotId].mMainCmd.getMenu(); if ((menu != null) && ((mSimCount) > (com.android.internal.telephony.PhoneConstants.MAX_PHONE_COUNT_SINGLE_SIM))) { if (((menu.title) == null) && (((menu.titleIcon) == null) || (!(menu.titleIconSelfExplanatory)))) { com.android.stk.StkMenuConfig config = com.android.stk.StkMenuConfig.getInstance(getApplicationContext()); java.lang.String label = config.getLabel(slotId); android.graphics.Bitmap icon = config.getIcon(slotId); if ((label != null) || (icon != null)) { android.os.Parcel parcel = android.os.Parcel.obtain(); menu.writeToParcel(parcel, 0); parcel.setDataPosition(0); menu = Menu.CREATOR.createFromParcel(parcel); parcel.recycle(); menu.title = label; menu.titleIcon = icon; menu.titleIconSelfExplanatory = false; } } } return menu; } else { return null; } }",90fcbbc0ea2ddaab6a27982b6869ae08c3919912,getMainMenu(int),131007,296,357
539395,core_java_android_net_MacAddress.java,23.0,"public static android.net.MacAddress getRandomAddress() { return android.net.MacAddress.getRandomAddress(android.net.MacAddress.BASE_ANDROID_MAC, new java.util.Random()); }",d74e9bb660e5127a9c09d12cff01fba91666f81e,"public static android.net.MacAddress makeRandomAddress() { return android.net.MacAddress.makeRandomAddress(android.net.MacAddress.BASE_ANDROID_MAC, new java.util.Random()); }",6a6a802aeb256a504e75e4d17076fc4accfdb561,getRandomAddress(),makeRandomAddress(),12,1,"public static android.net.MacAddress createRandomUnicastAddress() { return android.net.MacAddress.createRandomUnicastAddress(android.net.MacAddress.BASE_GOOGLE_MAC, new java.util.Random()); }",19feb38b24b32bf93965d6495636592d599ebe71,createRandomUnicastAddress(),220786,46,50
507775,tests_net_java_android_net_util_BlockingSocketReaderTest.java,1.0,"@java.lang.Override public void setUp() { resetLatch(); mLocalSocket = null; mLocalSockName = null; mLastRecvBuf = null; mExited = false; mReceiver = new android.net.util.BlockingSocketReader() { @java.lang.Override protected java.io.FileDescriptor createSocket() { java.io.FileDescriptor s = null; try { s = android.system.Os.socket(android.net.util.AF_INET6, android.net.util.SOCK_DGRAM, android.net.util.IPPROTO_UDP); android.system.Os.bind(s, android.net.util.BlockingSocketReaderTest.LOOPBACK6, 0); mLocalSockName = ((java.net.InetSocketAddress) (android.system.Os.getsockname(s))); android.system.Os.setsockoptTimeval(s, android.net.util.SOL_SOCKET, android.net.util.SO_SNDTIMEO, android.net.util.BlockingSocketReaderTest.TIMEO); } catch (android.system.ErrnoException | java.net.SocketException e) { closeSocket(s); fail(); return null; } mLocalSocket = s; return s; } @java.lang.Override protected void handlePacket(byte[] recvbuf, int length) { mLastRecvBuf = java.util.Arrays.copyOf(recvbuf, length); mLatch.countDown(); } @java.lang.Override protected void onExit() { mExited = true; mLatch.countDown(); } }; }",69abe1f72e9ef45ac926ac559b88f754845587bd,"@org.junit.Before public void setUp() { resetLatch(); mLocalSocket = null; mLocalSockName = null; mLastRecvBuf = null; mExited = false; mReceiver = new android.net.util.BlockingSocketReader() { @java.lang.Override protected java.io.FileDescriptor createSocket() { java.io.FileDescriptor s = null; try { s = android.system.Os.socket(android.net.util.AF_INET6, android.net.util.SOCK_DGRAM, android.net.util.IPPROTO_UDP); android.system.Os.bind(s, android.net.util.BlockingSocketReaderTest.LOOPBACK6, 0); mLocalSockName = ((java.net.InetSocketAddress) (android.system.Os.getsockname(s))); android.system.Os.setsockoptTimeval(s, android.net.util.SOL_SOCKET, android.net.util.SO_SNDTIMEO, android.net.util.BlockingSocketReaderTest.TIMEO); } catch (android.system.ErrnoException | java.net.SocketException e) { closeSocket(s); fail(); return null; } mLocalSocket = s; return s; } @java.lang.Override protected void handlePacket(byte[] recvbuf, int length) { mLastRecvBuf = java.util.Arrays.copyOf(recvbuf, length); mLatch.countDown(); } @java.lang.Override protected void onExit() { mExited = true; mLatch.countDown(); } }; }",04f1e44bd9771db77262441b4731905aba729f1d,setUp(),setUp(),6,3,@org.junit.Before public void setUp() { resetLatch(); mLocalSocket = null; mLocalSockName = null; mLastRecvBuf = null; mStopped = false; mHandlerThread = new android.os.HandlerThread(android.net.util.BlockingSocketReaderTest.class.getSimpleName()); mHandlerThread.start(); },ac662a5469f6a51623a3787ece93d077d9501f0c,setUp(),392836,354,72
55628,gradle_src_main_groovy_com_android_build_gradle_internal_model_DependenciesImpl.java,,,,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJars() { return null; },50b8b01c3720e4c8ef95fc7d883e026b7ae4b63d,,getJars(),3,4,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJars() { return jars; },81112d9f3745a983c8b5945d4ace12c6055ed11b,getJars(),420504,35,35
321197,wifi_java_android_net_wifi_hotspot2_omadm_PPSMOParser.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String parseOtherHomePartnerInstance(android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode node) throws android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException { if (node.isLeaf()) throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException(""Leaf node not expected for OtherHomePartner instance""); java.lang.String fqdn = null; for (android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode child : node.getChildren()) { switch (child.getName()) { case android.net.wifi.hotspot2.omadm.PPSMOParser.NODE_FQDN : fqdn = android.net.wifi.hotspot2.omadm.PPSMOParser.getPpsNodeValue(child); break; default : throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException((""Unknown node under OtherHomePartner instance: "" + (child.getName()))); } } if (fqdn == null) throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException(""OtherHomePartner instance missing FQDN field""); return fqdn; }",fa5afae662179ac1db6ebe0fa40ba4665a6edf9e,,parseOtherHomePartnerInstance(android.net.wifi.hotspot2.omadm.PPSMOParser$PPSNode),5,11,"private static java.lang.String parseOtherHomePartnerInstance(android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode node) throws android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException { if (node.isLeaf()) { throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException(""Leaf node not expected for OtherHomePartner instance""); } java.lang.String fqdn = null; for (android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode child : node.getChildren()) { switch (child.getName()) { case android.net.wifi.hotspot2.omadm.PPSMOParser.NODE_FQDN : fqdn = android.net.wifi.hotspot2.omadm.PPSMOParser.getPpsNodeValue(child); break; default : throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException((""Unknown node under OtherHomePartner instance: "" + (child.getName()))); } } if (fqdn == null) { throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException(""OtherHomePartner instance missing FQDN field""); } return fqdn; }",33e450ff89d4271c7de5ef57c154f9aea5e8f9dc,parseOtherHomePartnerInstance(android.net.wifi.hotspot2.omadm.PPSMOParser$PPSNode),417836,281,285
48539,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_NativeCrypto.java,94.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static native byte[] i2d_X509_PUBKEY(int ctx);,b2af80c15986128216e29400b7ca4ddf85ff3e63,,i2d_X509_PUBKEY(int),17,148,public static native byte[] i2d_X509_PUBKEY(long x509ctx);,b3e616f83d5f0dbbf59910574e5d835b63e486b1,i2d_X509_PUBKEY(long),436946,18,20
149957,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_NdkHandler.java,,,,"public java.lang.String getToolchainDirectory(java.lang.String abi) { return getToolchainDirectory(toolchainName, toolchainVersion, abi); }",7bdf3554607f620a576c5e128dacbe0768ceb3d4,,getToolchainDirectory(java.lang.String),8,19,"public java.lang.String getToolchainDirectory(com.android.build.gradle.internal.core.Abi abi) { return getToolchainDirectory(toolchain, toolchainVersion, abi); }",f80d9b75a9570c1dc7d4aaf993c43836a0d23c5a,getToolchainDirectory(com.android.build.gradle.internal.core.Abi),341089,37,45
368474,ojluni_src_main_java_sun_security_util_AbstractAlgorithmConstraints.java,0.0,"static java.lang.String[] getAlgorithms(java.lang.String propertyName) { java.lang.String property = java.security.AccessController.doPrivileged(((java.security.PrivilegedAction<java.lang.String>) (() -> java.security.Security.getProperty(propertyName)))); java.lang.String[] algorithmsInProperty = null; if ((property != null) && (!(property.isEmpty()))) { if (((property.charAt(0)) == '""') && ((property.charAt(((property.length()) - 1))) == '""')) { property = property.substring(1, ((property.length()) - 1)); } algorithmsInProperty = property.split("",""); for (int i = 0; i < (algorithmsInProperty.length); i++) { algorithmsInProperty[i] = algorithmsInProperty[i].trim(); } } if (algorithmsInProperty == null) { algorithmsInProperty = new java.lang.String[0]; } return algorithmsInProperty; }",9dc4e5175d0055cbc3f74d0428fd1c26c75c5e39,static java.lang.String[] getAlgorithms(java.lang.String propertyName) { java.lang.String property; },e7beb2ef4ca86f0b2735077e31c7d67afde34d89,getAlgorithms(java.lang.String),getAlgorithms(java.lang.String),3,0,"static java.lang.String[] getAlgorithms(java.lang.String propertyName) { java.lang.String property = java.security.AccessController.doPrivileged(((java.security.PrivilegedAction<java.lang.String>) (() -> java.security.Security.getProperty(propertyName)))); java.lang.String[] algorithmsInProperty = null; if ((property != null) && (!(property.isEmpty()))) { if ((((property.length()) >= 2) && ((property.charAt(0)) == '""')) && ((property.charAt(((property.length()) - 1))) == '""')) { property = property.substring(1, ((property.length()) - 1)); } algorithmsInProperty = property.split("",""); for (int i = 0; i < (algorithmsInProperty.length); i++) { algorithmsInProperty[i] = algorithmsInProperty[i].trim(); } } if (algorithmsInProperty == null) { algorithmsInProperty = new java.lang.String[0]; } return algorithmsInProperty; }",aa3e12369d0f0f60ac24d48d5975a5f7661fee27,getAlgorithms(java.lang.String),327673,26,209
314694,common_host-side_tradefed_src_com_android_compatibility_common_tradefed_result_TestRunHandler.java,,,,"private static java.util.Map<java.lang.String, java.lang.Integer> stringToMap(java.lang.String str) { java.util.Map<java.lang.String, java.lang.Integer> map = new java.util.HashMap<>(); for (java.lang.String entry : str.split(""\n"")) { java.lang.String[] parts = entry.split("" ""); map.put(parts[0], java.lang.Integer.parseInt(parts[1])); } return map; }",076bc9072f16490ae4f0443d09cc3ab1c56f6fe7,,stringToMap(java.lang.String),7,3,"private static java.util.Map<java.lang.String, java.lang.Integer> stringToMap(java.lang.String str) { java.util.Map<java.lang.String, java.lang.Integer> map = new java.util.HashMap<>(); for (java.lang.String entry : str.split(""\n"")) { java.lang.String[] parts = entry.split(com.android.compatibility.common.tradefed.result.TestRunHandler.MAP_DELIMITER); map.put(parts[0], java.lang.Integer.parseInt(parts[1])); } return map; }",a33b9e7962dd646c3365089f1118259c7d5604b9,stringToMap(java.lang.String),193332,110,130
233353,test_vogar_target_junit4_TestRunnerJUnit4Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.TestMethodWithParameterTest.class) @org.junit.Test public void testRunner_TestMethodWithParameterTest_Requested() throws java.lang.Exception { java.lang.String methodName = ""parameterized""; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(methodName); runner.run(); checkFilteredOutput().failure(methodName, ((""java.lang.Exception: Method "" + methodName) + "" should have no parameters\n"")).completedNormally(); }",b62f9ab8b2cf5aa2d866d0fb4b414bc4724f7ad5,,testRunner_TestMethodWithParameterTest_Requested(),3,0,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.TestMethodWithParameterTest.class) @org.junit.Test public void testRunner_TestMethodWithParameterTest_Requested() throws java.lang.Exception { java.lang.String methodName = ""parameterized""; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(methodName); runner.run(); expectedResults().failure(methodName, ((""java.lang.Exception: Method "" + methodName) + "" should have no parameters\n"")).completedNormally(); }",384866f09f4154badbebdc6e2780b006f37a3241,testRunner_TestMethodWithParameterTest_Requested(),130818,120,119
561514,src_com_android_bluetooth_hfp_HeadsetService.java,30.0,"void connectionStateChanged(android.bluetooth.BluetoothDevice device, int newState, int prevState) { if ((prevState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) > 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(false); } } if ((prevState != (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) <= 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(true); } } }",e50ee07b80dd08b2f1d68cfaeff416dc237d7ce8,"public void connectionStateChanged(android.bluetooth.BluetoothDevice device, int newState, int prevState) { if ((prevState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) > 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(false); mInbandRingingAllowed = false; } } if ((prevState != (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) <= 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(true); mInbandRingingAllowed = true; } } }",7f97a45e392ae0bcb6cce2bc085e65b30e6ed115,"connectionStateChanged(android.bluetooth.BluetoothDevice,int,int)","connectionStateChanged(android.bluetooth.BluetoothDevice,int,int)",17,27,"void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((fromState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(null); } }",339ddadd6157aea22dc9a055f00b26258e25a52e,"connectionStateChanged(android.bluetooth.BluetoothDevice,int,int)",117886,223,107
109570,src_com_google_gct_idea_util_GctBundle.java,,,,"public static java.lang.String samplesMsg(@org.jetbrains.annotations.NotNull @org.jetbrains.annotations.PropertyKey(resourceBundle = com.google.gct.idea.util.GctBundle.SAMPLES) java.lang.String key, @org.jetbrains.annotations.NotNull java.lang.Object... params) { return com.intellij.CommonBundle.message(com.google.gct.idea.util.GctBundle.getBundle(com.google.gct.idea.util.GctBundle.SAMPLES), key, params); }",b4a0208fca05d427c0d4308e0b7bf49182a611df,,"samplesMsg(java.lang.String,java.lang.Object[])",6,1,"public static java.lang.String message(@org.jetbrains.annotations.NotNull @org.jetbrains.annotations.PropertyKey(resourceBundle = com.google.gct.idea.util.GctBundle.BUNDLE_NAME) java.lang.String key, @org.jetbrains.annotations.NotNull java.lang.Object... params) { return com.intellij.CommonBundle.message(com.google.gct.idea.util.GctBundle.getBundle(), key, params); }",eda5161b965b9e5c449dbe3d600f28aca8767b01,"message(java.lang.String,java.lang.Object[])",331588,120,102
19300,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_widgets_AvdStartDialog.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean getSnapshotSaveData() { return mSaveSnapshot; },99f16699cc2ad3c207e0565b0e890302c28d3fcc,,getSnapshotSaveData(),13,26,public boolean hasSnapshotSave() { return mSnapshotSave; },388f82f93930d10cb49a0ee2ff4a9085890bb315,hasSnapshotSave(),30185,14,13
272714,luni_src_test_java_libcore_java_security_SignatureTest.java,72.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSignature_updateArray_negativeLength_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature(""FOO""); s.update(new byte[4], 1, (-1)); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",bd100cdbc7e1b1bd0acff44761f3098e8012a9b4,,testSignature_updateArray_negativeLength_throws(),4,56,"public void testSignature_updateArray_negativeLength_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature(""FOO""); s.initVerify(libcore.java.security.SignatureTest.createPublicKey()); s.update(new byte[4], 1, (-1)); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",5d04a121c9c1254ef45d476b0238391c4a91380c,testSignature_updateArray_negativeLength_throws(),29304,75,94
384432,luni_src_test_java_libcore_java_text_DecimalFormatTest.java,0.0,"public void testBug15081434() throws java.lang.Exception { java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US))); try { df.parse(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyLocalizedPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.format(null, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { df.parse(null, new java.text.ParsePosition(0)); fail(); } catch (java.lang.NullPointerException expected) { } df.setDecimalFormatSymbols(null); try { df.setCurrency(null); fail(); } catch (java.lang.NullPointerException expected) { } df.setNegativePrefix(null); df.setNegativeSuffix(null); df.setPositivePrefix(null); df.setPositiveSuffix(null); try { df.setRoundingMode(null); fail(); } catch (java.lang.NullPointerException expected) { } }",deb1bd73664880ea211a45501b980d045d4269ba,"public void testBug15081434() throws java.lang.Exception { java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US))); try { df.parse(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyLocalizedPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { df.applyPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { df.applyPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { df.format(null, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { df.parse(null, new java.text.ParsePosition(0)); fail(); } catch (java.lang.NullPointerException expected) { } df.setDecimalFormatSymbols(null); try { df.setCurrency(null); fail(); } catch (java.lang.NullPointerException expected) { } df.setNegativePrefix(null); df.setNegativeSuffix(null); df.setPositivePrefix(null); df.setPositiveSuffix(null); try { df.setRoundingMode(null); fail(); } catch (java.lang.NullPointerException expected) { } }",a9b7f2528d057a09079f0c67b26a5b0cd0f874f8,testBug15081434(),testBug15081434(),18,1,"public void testBug15081434() throws java.lang.Exception { java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US))); try { df.parse(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyLocalizedPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.format(null, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { df.parse(null, new java.text.ParsePosition(0)); fail(); } catch (java.lang.NullPointerException expected) { } df.setDecimalFormatSymbols(null); try { df.setCurrency(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setNegativePrefix(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setNegativeSuffix(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setPositivePrefix(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setPositiveSuffix(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setRoundingMode(null); fail(); } catch (java.lang.NullPointerException expected) { } }",53e3e0cf4ec774dd8a20840f0003b0b0ba64609a,testBug15081434(),386958,302,370
144300,keystore_java_android_security_KeyStoreHmacSpi.java,,,,"@java.lang.Override protected void engineReset() { android.os.IBinder operationToken = mOperationToken; if (operationToken != null) { mOperationToken = null; mKeyStore.abort(operationToken); } mChunkedStreamer = null; android.security.keymaster.KeymasterArguments keymasterArgs = new android.security.keymaster.KeymasterArguments(); keymasterArgs.addInt(KeymasterDefs.KM_TAG_DIGEST, mDigest); android.security.keymaster.OperationResult opResult = mKeyStore.begin(mKeyAliasInKeyStore, KeymasterDefs.KM_PURPOSE_SIGN, true, keymasterArgs, null, new android.security.keymaster.KeymasterArguments()); if (opResult == null) { throw new android.security.KeyStoreConnectException(); } else if (((opResult.resultCode) != (android.security.keymaster.KeymasterDefs.KM_ERROR_OK)) && ((opResult.resultCode) != (KeyStore.NO_ERROR))) { throw new android.security.CryptoOperationException(""Failed to start keystore operation"", android.security.KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode)); } mOperationToken = opResult.token; if ((mOperationToken) == null) { throw new android.security.CryptoOperationException(""Keystore returned null operation token""); } mChunkedStreamer = new android.security.KeyStoreCryptoOperationChunkedStreamer(new android.security.KeyStoreHmacSpi.KeyStoreStreamingConsumer(mKeyStore, mOperationToken)); }",bea3f6b75da800a252a56798fa8f10c99c853c4f,,engineReset(),5,7,"@java.lang.Override protected void engineReset() { android.os.IBinder operationToken = mOperationToken; if (operationToken != null) { mOperationToken = null; mKeyStore.abort(operationToken); } mChunkedStreamer = null; android.security.keymaster.KeymasterArguments keymasterArgs = new android.security.keymaster.KeymasterArguments(); keymasterArgs.addInt(KeymasterDefs.KM_TAG_DIGEST, mDigest); android.security.keymaster.OperationResult opResult = mKeyStore.begin(mKeyAliasInKeyStore, KeymasterDefs.KM_PURPOSE_SIGN, true, keymasterArgs, null, new android.security.keymaster.KeymasterArguments()); if (opResult == null) { throw new android.security.KeyStoreConnectException(); } else if ((opResult.resultCode) != (KeyStore.NO_ERROR)) { throw new android.security.CryptoOperationException(""Failed to start keystore operation"", android.security.KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode)); } mOperationToken = opResult.token; if ((mOperationToken) == null) { throw new android.security.CryptoOperationException(""Keystore returned null operation token""); } mChunkedStreamer = new android.security.KeyStoreCryptoOperationChunkedStreamer(new android.security.KeyStoreHmacSpi.KeyStoreStreamingConsumer(mKeyStore, mOperationToken)); }",a8f121ce4706d93961d374c092db24868190aceb,engineReset(),128731,335,308
579565,src_java_com_android_internal_telephony_RIL.java,50.0,"@java.lang.Override public void iccOpenLogicalChannel(java.lang.String aid, int p2, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_OPEN_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid) + "" p2 = "") + p2)); } else { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } try { radioProxy.iccOpenLogicalChannel(rr.mSerial, convertNullToEmptyString(aid), p2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""iccOpenLogicalChannel"", e); } } }",efb872e9ed95d2ab102128f63a4a6b3f5e6e8c40,"@java.lang.Override public void iccOpenLogicalChannel(java.lang.String aid, int p2, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SIM_OPEN_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid) + "" p2 = "") + p2)); } else { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } try { radioProxy.iccOpenLogicalChannel(rr.mSerial, convertNullToEmptyString(aid), p2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""iccOpenLogicalChannel"", e); } } }",e942df876dee5037b7821506eb6874c8e16771a7,"iccOpenLogicalChannel(java.lang.String,int,android.os.Message)","iccOpenLogicalChannel(java.lang.String,int,android.os.Message)",3,50,"@java.lang.Override public void iccOpenLogicalChannel(java.lang.String aid, int p2, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_OPEN_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid) + "" p2 = "") + p2)); } else { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } try { radioProxy.iccOpenLogicalChannel(rr.mSerial, convertNullToEmptyString(aid), p2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""iccOpenLogicalChannel"", e); } } }",efb872e9ed95d2ab102128f63a4a6b3f5e6e8c40,"iccOpenLogicalChannel(java.lang.String,int,android.os.Message)",89176,315,311
540316,src_com_android_bluetooth_a2dp_A2dpService.java,22.0,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { mStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); }",44c02da46359e69232e70a34ce798fa06741796d,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED)) { android.bluetooth.BluetoothDevice zeroDevice = mAdapter.getRemoteDevice(""00:00:00:00:00:00""); if ((device == null) || (device.equals(zeroDevice))) { mLocalCodecStatus = stackEvent.codecStatus; return; } } com.android.bluetooth.a2dp.A2dpStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }",c2f37620c7e046e734c6adf54ad23ebd59f317c1,messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent),messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent),9,26,"void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.a2dp.A2dpStateMachine sm = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (""Cannot process stack event: no state machine: "" + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }",41609d90a1882aace0b03a6a3ec57f9e2fae9999,messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent),280235,211,134
106594,jack-tests_tests_com_android_jack_java7_trywithresources_test002_dx_Tests.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void test014() throws java.lang.Exception { com.android.jack.java7.trywithresources.test002.jack.TryWithResourcesTest002.m14(15); },2a7b4f78373d57aba688b0b854700cc2d0154ff7,,test014(),3,3,@org.junit.Test public void test014() throws java.lang.Exception { org.junit.Assert.assertTrue(com.android.jack.java7.trywithresources.test002.jack.TryWithResourcesTest002.m14(1)); },7588eecb8109d37379b09a6dfb50b8957cbdc640,test014(),68009,47,54
236051,jack_src_com_android_jack_library_JackLibraryFactory.java,1.0,"@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); libraryProperties.load(inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING, ""Failed to close ''{0}''"", libProp.getLocation().getDescription()); } } } } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }",7834156c3d14087d3145d2933cbf45302364cd2d,"@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); libraryProperties.load(inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING, ""Failed to close ''{0}''"", libProp.getLocation().getDescription()); } } } } catch (com.android.sched.util.file.NotFileOrDirectoryException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.WrongPermissionException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }",c677caa89be85010f42f5e19942d9d09dbf14f84,loadLibraryProperties(com.android.sched.vfs.InputVFS),loadLibraryProperties(com.android.sched.vfs.InputVFS),4,1,"@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); libraryProperties.load(inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING, ""Failed to close ''{0}''"", libProp.getLocation().getDescription()); } } } } catch (java.io.IOException | com.android.sched.util.file.NotFileOrDirectoryException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.WrongPermissionException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }",63a53efaab32b6aa9fc1dc7c4c78a8affc9b5d50,loadLibraryProperties(com.android.sched.vfs.InputVFS),293546,305,281
91995,luni_src_main_java_libcore_io_ForwardingOs.java,6.0,public java.net.SocketAddress getpeername(java.io.FileDescriptor fd) throws libcore.io.ErrnoException { return os.getpeername(fd); },d242fc21d87a0059e61dae5a64566c8bfd0afb9c,public java.net.SocketAddress getpeername(java.io.FileDescriptor fd) throws android.os.ErrnoException { return os.getpeername(fd); },47ebc95cde4c61f0de23ded77a56a624216e593a,getpeername(java.io.FileDescriptor),getpeername(java.io.FileDescriptor),3,6,public java.net.SocketAddress getpeername(java.io.FileDescriptor fd) throws android.system.ErrnoException { return os.getpeername(fd); },a44cdd49a20bf6a3b9818f8a769abd1a2ae6bb15,getpeername(java.io.FileDescriptor),170460,36,36
570203,src_java_com_android_ims_ImsConnectionStateListener.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final void onRegistered(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsConnected(imsRadioTech); },eca75caee94d579c90608cb9e545f26a332e586d,,onRegistered(int),14,11,@java.lang.Override public final void onRegistered(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsConnected(imsRadioTech); },1ea0e018692faa57eaa07419e72fa124c0279042,onRegistered(int),176974,43,49
22268,monkeyrunner_src_com_android_monkeyrunner_adb_AdbMonkeyDevice.java,9.0,"@java.lang.Override public void touch(int x, int y, com.android.monkeyrunner.adb.TouchPressType type) { try { switch (type) { case DOWN : manager.touchDown(x, y); break; case UP : manager.touchUp(x, y); break; case DOWN_AND_UP : manager.tap(x, y); break; } } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, (((((""Error sending touch event: "" + x) + "" "") + y) + "" "") + type), e); } }",7310974fd030e07ffa29856c274f601c40fd5869,"public void touch(int x, int y, com.android.monkeyrunner.adb.TouchPressType type) { try { switch (type) { case DOWN : manager.touchDown(x, y); break; case UP : manager.touchUp(x, y); break; case DOWN_AND_UP : manager.tap(x, y); break; } } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, (((((""Error sending touch event: "" + x) + "" "") + y) + "" "") + type), e); } }",f97874d60c85422c0f06f7ede053c1b2c232502e,"touch(int,int,com.android.monkeyrunner.adb.TouchPressType)","touch(int,int,com.android.monkeyrunner.adb.TouchPressType)",8,8,"@java.lang.Override public void touch(int x, int y, com.android.monkeyrunner.adb.TouchPressType type) { try { switch (type) { case DOWN : manager.touchDown(x, y); break; case UP : manager.touchUp(x, y); break; case DOWN_AND_UP : manager.tap(x, y); break; } } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, (((((""Error sending touch event: "" + x) + "" "") + y) + "" "") + type), e); } }",7310974fd030e07ffa29856c274f601c40fd5869,"touch(int,int,com.android.monkeyrunner.adb.TouchPressType)",81196,154,160
342927,src_java_com_android_internal_telephony_dataconnection_DcTracker.java,114.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isPhoneStateIdle() { for (int i = 0; i < (android.telephony.TelephonyManager.getDefault().getPhoneCount()); i++) { com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone(i); if ((phone != null) && ((phone.getState()) != (PhoneConstants.State.IDLE))) { log((""isPhoneStateIdle: Voice call active on sub: "" + i)); return false; } } return true; }",442834745d1ff118731c0f4c9fa2f5a0c4305ff6,,isPhoneStateIdle(),2,152,"private boolean isPhoneStateIdle() { for (int i = 0; i < (android.telephony.TelephonyManager.getDefault().getPhoneCount()); i++) { com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone(i); if ((phone != null) && ((phone.getState()) != (PhoneConstants.State.IDLE))) { log((""isPhoneStateIdle false: Voice call active on phone "" + i)); return false; } } return true; }",7825f9dcaa234415b64e4628ccc62093b76a2a8a,isPhoneStateIdle(),221993,111,111
365035,services_core_java_com_android_server_IpSecService.java,2.0,"@java.lang.Override public void deleteTransportModeTransform(int resourceId) throws android.os.RemoteException { synchronized(mTransformRecords) { com.android.server.IpSecService.TransformRecord record; record = mTransformRecords.get(resourceId); if (record == null) { throw new java.lang.IllegalArgumentException(((""Transform "" + resourceId) + "" is not available to be deleted"")); } if (((record.pid) != (android.os.Binder.getCallingPid())) || ((record.uid) != (android.os.Binder.getCallingUid()))) { throw new java.lang.SecurityException(""Only the owner of an IpSec Transform may delete it!""); } record.releaseResources(); mTransformRecords.remove(resourceId); record.nullifyRecord(); } }",88433c957e0f1d0e28d76087ad623251b789ff73,"@java.lang.Override public void deleteTransportModeTransform(int resourceId) throws android.os.RemoteException { synchronized(mTransformRecords) { com.android.server.IpSecService.TransformRecord record; record = mTransformRecords.get(resourceId); if (record == null) { throw new java.lang.IllegalArgumentException(((""Transform "" + resourceId) + "" is not available to be deleted"")); } if (((record.pid) != (android.os.Binder.getCallingPid())) || ((record.uid) != (android.os.Binder.getCallingUid()))) { throw new java.lang.SecurityException(""Only the owner of an IpSec Transform may delete it!""); } record.release(); mTransformRecords.remove(resourceId); } }",8eedee94509544a4d3c8ae56b31c6d195f07c7d6,deleteTransportModeTransform(int),deleteTransportModeTransform(int),42,4,"@java.lang.Override public void deleteTransportModeTransform(int resourceId) throws android.os.RemoteException { releaseManagedResource(mTransformRecords, resourceId, ""IpSecTransform""); }",39ca8042f6e83e0d04d7b7041209f7d80b9caac9,deleteTransportModeTransform(int),257862,162,39
195862,test_042-new-instance_src_Main.java,3.0,"public static void main() { try { LocalClass3.CC.newInstance(); java.lang.System.out.println(""LocalClass3 succeeded""); } catch (java.lang.Exception ex) { java.lang.System.err.println(""Got unexpected LocalClass3 failure""); ex.printStackTrace(); } }",1803cf81755e822771af7a0c68729c93b98bf6b3,"public static void main() { try { LocalClass3.CC.newInstance(); java.lang.System.out.println(""LocalClass3 succeeded""); } catch (java.lang.Exception ex) { java.lang.System.err.println(""Got unexpected LocalClass3 failure""); ex.printStackTrace(java.lang.System.out); } }",b792f1d20d3bc7ae11444ea936c310349c4bb4ea,main(),main(),3,3,"public static void main() { try { LocalClass3.CC.newInstance(); java.lang.System.out.println(""LocalClass3 succeeded""); } catch (java.lang.Exception ex) { java.lang.System.out.println(""Got unexpected LocalClass3 failure""); ex.printStackTrace(java.lang.System.out); } }",9925941e523ee40790eef2d6e03bdbe123cb3617,main(),228172,72,72
114826,jack_src_com_android_jack_backend_dex_multidex_legacy_AnnotatedFinder.java,,,,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { if (type.isExternal()) { return; } if (hasProblematicAnnotation(type)) { type.addMarker(MainDexMarker.INSTANCE); } },100cb4aaaf2669bc223f6cd970b2a58d5557c123,,run(com.android.jack.ir.ast.JDefinedClassOrInterface),7,1,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { if (type.isExternal()) { return; } if (hasRuntimeAnnotation(type)) { type.addMarker(MainDexMarker.INSTANCE); } },d1cc56f345eb2d5e1bfa29c0d5c8b2f065113153,run(com.android.jack.ir.ast.JDefinedClassOrInterface),307996,72,71
267940,src_com_android_stk_StkMenuActivity.java,21.0,"@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate""); requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); mAcceptUsersInput = true; getListView().setOnCreateContextMenuListener(this); initFromIntent(getIntent()); }",31ab1e4f0886c3e7bafffdd821b575ff8763337d,"@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate""); requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); getListView().setOnCreateContextMenuListener(this); initFromIntent(getIntent()); }",7a6088c41e82b6b832872a9cbb8c6a2a1ba6222a,onCreate(android.os.Bundle),onCreate(android.os.Bundle),11,20,"@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate""); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); getListView().setOnCreateContextMenuListener(this); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""onCreate - appService is null""); finish(); return; } android.support.v4.content.LocalBroadcastManager.getInstance(this).registerReceiver(mLocalBroadcastReceiver, new android.content.IntentFilter(StkAppService.SESSION_ENDED)); initFromIntent(getIntent()); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(mSlotId))) { finish(); return; } }",c23a7b57d0c2ee3848a672e1321540fff9ffd689,onCreate(android.os.Bundle),101868,184,323
137611,jack_src_com_android_jack_api_v01_impl_Api01ConfigImpl.java,19.0,"@java.lang.Override @javax.annotation.Nonnull public void setProperty(@javax.annotation.Nonnull java.lang.String arg0, @javax.annotation.Nonnull java.lang.String arg1) throws com.android.jack.api.v01.ConfigurationException { }",32868cf289263b13e653f30632c1437acb39b8fc,"@java.lang.Override @javax.annotation.Nonnull public void setProperty(@javax.annotation.Nonnull java.lang.String key, @javax.annotation.Nonnull java.lang.String value) { options.addProperty(key, value); }",31ee2bae4d497c949a3d61e1e627d0f157d2f434,"setProperty(java.lang.String,java.lang.String)","setProperty(java.lang.String,java.lang.String)",8,15,"@java.lang.Override public void setProperty(@javax.annotation.Nonnull java.lang.String key, @javax.annotation.Nonnull java.lang.String value) { options.addProperty(key, value); }",5705cfdf9fcd006fa37a8d2ff173047db775ccb7,"setProperty(java.lang.String,java.lang.String)",390797,52,46
149957,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_NdkHandler.java,,,,"public java.lang.String getSysroot(java.lang.String abi) { return ((((ndkDirectory) + ""/platforms/"") + (compileSdkVersion)) + ""/arch-"") + (com.android.build.gradle.internal.NdkHandler.ARCHITECTURE_STRING.get(abi)); }",a67cda00192a994dcd34c8251af1ba063baa412b,,getSysroot(java.lang.String),8,15,"public java.lang.String getSysroot(com.android.build.gradle.internal.core.Abi abi) { return ((((ndkDirectory) + ""/platforms/"") + (compileSdkVersion)) + ""/arch-"") + (abi.getArchitecture()); }",b3b7a936e4341bf4ce9bfdc63791d0878cac5f3b,getSysroot(com.android.build.gradle.internal.core.Abi),341077,70,59
49601,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_device_DdmViewDebugDevice.java,,,,"@java.lang.Override public org.eclipse.swt.graphics.Image loadCapture(com.android.hierarchyviewerlib.models.Window window, com.android.hierarchyviewerlib.models.ViewNode viewNode) { com.android.ddmlib.Client c = window.getClient(); if (c == null) { return null; } java.lang.String viewRoot = window.getTitle(); com.android.ddmlib.HandleViewDebug.CaptureViewHandler handler = new com.android.ddmlib.HandleViewDebug.CaptureViewHandler(); try { com.android.ddmlib.HandleViewDebug.captureView(c, viewRoot, viewNode.toString(), handler); } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DdmViewDebugDevice.TAG, e); return null; } byte[] data = handler.getData(10, java.util.concurrent.TimeUnit.SECONDS); return data == null ? null : new org.eclipse.swt.graphics.Image(org.eclipse.swt.widgets.Display.getDefault(), new java.io.ByteArrayInputStream(data)); }",e0b2108bdb53bd3f6939a4e83f632a74218f632a,,"loadCapture(com.android.hierarchyviewerlib.models.Window,com.android.hierarchyviewerlib.models.ViewNode)",11,10,"@java.lang.Override public org.eclipse.swt.graphics.Image loadCapture(com.android.hierarchyviewerlib.models.Window window, com.android.hierarchyviewerlib.models.ViewNode viewNode) { com.android.ddmlib.Client c = window.getClient(); if (c == null) { return null; } java.lang.String viewRoot = window.getTitle(); com.android.hierarchyviewerlib.device.DdmViewDebugDevice.CaptureByteArrayHandler handler = new com.android.hierarchyviewerlib.device.DdmViewDebugDevice.CaptureByteArrayHandler(com.android.ddmlib.HandleViewDebug.CHUNK_VUOP); try { com.android.ddmlib.HandleViewDebug.captureView(c, viewRoot, viewNode.toString(), handler); } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DdmViewDebugDevice.TAG, e); return null; } byte[] data = handler.getData(10, java.util.concurrent.TimeUnit.SECONDS); return data == null ? null : new org.eclipse.swt.graphics.Image(org.eclipse.swt.widgets.Display.getDefault(), new java.io.ByteArrayInputStream(data)); }",fbad5b046dfd4a94e28da3fd62e40e7e2178a8bc,"loadCapture(com.android.hierarchyviewerlib.models.Window,com.android.hierarchyviewerlib.models.ViewNode)",54237,256,282
522236,src_java_com_android_internal_telephony_ServiceStateTracker.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean isUseOnlyRsrpForLteLevel() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mPhone.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); android.os.PersistableBundle config = null; if (configManager != null) { config = configManager.getConfigForSubId(mPhone.getSubId()); } if (config != null) { return config.getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); } else { return android.telephony.CarrierConfigManager.getDefaultConfig().getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); } },309fe22f4afbef2671a587dcbee544c17b67acb2,,isUseOnlyRsrpForLteLevel(),3,18,private boolean isUseOnlyRsrpForLteLevel() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mPhone.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configManager != null) { android.os.PersistableBundle config = configManager.getConfigForSubId(mPhone.getSubId()); if (config != null) { return config.getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); } } return android.telephony.CarrierConfigManager.getDefaultConfig().getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); },c917613cc3176143f72dd06b139dd1a00aab0264,isUseOnlyRsrpForLteLevel(),251890,168,161
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void checkClzUchar4() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, 0, 500); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUchar4(inValue, out); verifyResultsClzUchar4(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUchar4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUchar4(inValue, out); verifyResultsClzUchar4(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUchar4: "" + (e.toString()))); } }",d5998aae5653fd4628f9364c64f599c56ff395f5,,checkClzUchar4(),9,46,"private void checkClzUchar4Uchar4() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.UNSIGNED_8, 4, -7610705415446861042L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_8, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUchar4Uchar4(inValue, out); verifyResultsClzUchar4Uchar4(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUchar4Uchar4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_8, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUchar4Uchar4(inValue, out); verifyResultsClzUchar4Uchar4(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzUchar4Uchar4: "" + (e.toString()))); } }",96f5f8a0e62de5f53e15d059e3f4c630d3d9c9e8,checkClzUchar4Uchar4(),143439,337,330
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLog10.java,,,,"private void checkLog10Float2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLog10Float2(in, out); verifyResultsLog10Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLog10Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLog10Float2(in, out); verifyResultsLog10Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLog10Float2: "" + (e.toString()))); } }",6be4da96143b86ca24344f5b7a4b4e009391cbbe,,checkLog10Float2(),9,2,"private void checkLog10Float2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -2571141842548276748L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testLog10Float2Float2(in, out); verifyResultsLog10Float2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLog10Float2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLog10Float2Float2(in, out); verifyResultsLog10Float2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLog10Float2Float2: "" + (e.toString()))); } }",56def4c90a6de79b213ffe05635636bba0c324d6,checkLog10Float2Float2(),142602,323,307
102887,jack_src_com_android_jack_analysis_tracer_AbstractTracerBrush.java,,,,protected boolean mustTraceOverridingMethod(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { synchronized(method) { com.android.jack.analysis.tracer.BasicTracerMarker marker = method.getMarker(markerClass); if (marker != null) { return marker.mustTraceOverridingMethods(); } } return false; },01f964f7053541904891b52d783af4dd2de87fd0,,mustTraceOverridingMethod(com.android.jack.ir.ast.JMethod),6,7,protected boolean mustTraceOverridingMethod(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { synchronized(method) { com.android.jack.analysis.tracer.BaseTracerMarker marker = method.getMarker(markerClass); if (marker != null) { return marker.mustTraceOverridingMethods(); } } return false; },95cad424ac80e95fed9b22ce26ef28fd372c740c,mustTraceOverridingMethod(com.android.jack.ir.ast.JMethod),103913,75,75
177197,tests_tests_media_src_android_media_cts_MediaCodecTest.java,18.0,"@java.lang.Override public void onInputBufferAvailable(android.media.MediaCodec codec, int index) { fail(((codec + "" onInputBufferAvailable "") + index)); }",4fdde419e01a83728284dce432ee2d7fa9dbe637,"@java.lang.Override public void onInputBufferAvailable(android.media.MediaCodec codec, int index) { if (mMime.startsWith(""video/"")) { fail((((codec.getInputFormat()) + "" onInputBufferAvailable "") + index)); } else { synchronized(mInputBufferIndices) { mInputBufferIndices.add(index); } } }",32a3047ced50d569895c370a2a2f4863e6714664,"onInputBufferAvailable(android.media.MediaCodec,int)","onInputBufferAvailable(android.media.MediaCodec,int)",3,19,"@java.lang.Override public void onInputBufferAvailable(android.media.MediaCodec codec, int index) { assertTrue((""video onInputBufferAvailable "" + index), mMime.startsWith(""audio/"")); synchronized(mInputBufferIndices) { mInputBufferIndices.add(index); } }",914be8277bdd41f17edbb26b891a6e1d767cb2dd,"onInputBufferAvailable(android.media.MediaCodec,int)",519764,78,64
14456,anttasks_src_com_android_ant_AaptExecLoopTask.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setVersioncode(java.lang.String versionCode) { if ((versionCode.length()) > 0) { try { mVersionCode = java.lang.Integer.decode(versionCode); } catch (java.lang.NumberFormatException e) { java.lang.System.out.println(java.lang.String.format(""WARNING: Ignoring version code value '%s'."", versionCode)); } } }",087b471cc358a66eb08d9e1fb5173adc50746ab1,,setVersioncode(java.lang.String),4,7,"public void setVersioncode(java.lang.String versionCode) { if ((versionCode.length()) > 0) { try { mVersionCode = java.lang.Integer.decode(versionCode); } catch (java.lang.NumberFormatException e) { java.lang.System.out.println(java.lang.String.format(""WARNING: Ignoring invalid version code value '%s'."", versionCode)); } } }",4e0c3421be223041ed608fb0b32fce339c110438,setVersioncode(java.lang.String),351115,90,91
325281,services_core_java_com_android_server_ConnectivityService.java,159.0,public boolean avoidBadWifi() { return mAvoidBadWifiTracker.currentValue(); },f45b76a11435636bdbdad28172cfca8cd08069df,public boolean avoidBadWifi() { return mHandoverPolicyTracker.currentValue(); },960e19537d53431dc50c4732fc8034609de31097,avoidBadWifi(),avoidBadWifi(),5,159,public boolean avoidBadWifi() { return mMultinetworkPolicyTracker.getAvoidBadWifi(); },2734a8cd0139cde5d9f3942c6bc24d237c8eace0,avoidBadWifi(),485271,17,20
252478,java_tests_RsTest_src_com_android_rs_test_UT_kernel_struct.java,0.0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel_struct s = new com.android.rs.test.ScriptC_kernel_struct(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_struct_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",b22cbc03037d3f162f0870b8c0cdda768df53de9,"public void run() { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel_struct s = new com.android.rs.test.ScriptC_kernel_struct(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_struct_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",1bb35386b523fed1edee050e2a142869a899611f,run(),run(),7,1,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel_struct s = new com.android.rs.test.ScriptC_kernel_struct(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_struct_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",b22cbc03037d3f162f0870b8c0cdda768df53de9,run(),379341,141,147
346149,service_java_com_android_server_wifi_WifiVendorHal.java,63.0,"public void onIfaceAdded(int type, java.lang.String name) { kilroy(); android.util.Log.d(com.android.server.wifi.WifiVendorHal.TAG, (((""onIfaceAdded "" + type) + "", name: "") + name)); }",0932e6f4e7c1cb6098353a7ba5de75fd1f5c6054,"public void onIfaceAdded(int type, java.lang.String name) { kilroy(); mLog.d((((""onIfaceAdded "" + type) + "", name: "") + name)); }",ffc8eecf62c3a7f946b4e039c0812b2a8fbcb039,"onIfaceAdded(int,java.lang.String)","onIfaceAdded(int,java.lang.String)",5,63,"public void onIfaceAdded(int type, java.lang.String name) { mLog.d((((""onIfaceAdded "" + type) + "", name: "") + name)); }",595e67d5315aaf113415cfe177017731399055b5,"onIfaceAdded(int,java.lang.String)",404588,48,43
15846,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_sdk_Sdk.java,23.0,"public void projectRenamed(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IPath from) { com.android.ide.eclipse.adt.internal.sdk.ProjectState renamedState = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(project); if (renamedState.isLibrary()) { disposeLibraryProject(from.lastSegment()); synchronized(com.android.ide.eclipse.adt.internal.sdk.Sdk.sLock) { for (com.android.ide.eclipse.adt.internal.sdk.ProjectState projectState : com.android.ide.eclipse.adt.internal.sdk.Sdk.sProjectStateMap.values()) { if ((projectState != renamedState) && (projectState.isMissingLibraries())) { org.eclipse.core.runtime.IPath oldRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(from, projectState.getProject().getFullPath()); org.eclipse.core.runtime.IPath newRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(project.getFullPath(), projectState.getProject().getFullPath()); com.android.ide.eclipse.adt.internal.sdk.ProjectState.LibraryState libState = projectState.updateLibrary(oldRelativePath.toString(), newRelativePath.toString(), renamedState); if (libState != null) { com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkLibraryBundle bundle = new com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkLibraryBundle(); bundle.mProject = projectState.getProject(); bundle.mLibraryProjects = new org.eclipse.core.resources.IProject[]{ libState.getProjectState().getProject() }; bundle.mCleanupCPE = false; startActionBundle(bundle); } } } } } }",17c9ae7b6dad7db93d0558faddb9b05ab2ed91fe,"public void projectRenamed(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IPath from) { com.android.ide.eclipse.adt.internal.sdk.ProjectState renamedState = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(project); if (renamedState.isLibrary()) { disposeLibraryProject(from.lastSegment()); synchronized(com.android.ide.eclipse.adt.internal.sdk.Sdk.sLock) { for (com.android.ide.eclipse.adt.internal.sdk.ProjectState projectState : com.android.ide.eclipse.adt.internal.sdk.Sdk.sProjectStateMap.values()) { if ((projectState != renamedState) && (projectState.isMissingLibraries())) { org.eclipse.core.runtime.IPath oldRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(from, projectState.getProject().getFullPath()); org.eclipse.core.runtime.IPath newRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(project.getFullPath(), projectState.getProject().getFullPath()); com.android.ide.eclipse.adt.internal.sdk.ProjectState.LibraryState libState = projectState.updateLibrary(oldRelativePath.toString(), newRelativePath.toString(), renamedState); if (libState != null) { com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkLibraryBundle bundle = new com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkLibraryBundle(); bundle.mProject = projectState.getProject(); bundle.mNewLibraryProjects = new org.eclipse.core.resources.IProject[]{ libState.getProjectState().getProject() }; bundle.mCleanupCPE = false; startActionBundle(bundle); } } } } } }",88cd023c7a17ab9ebc1ebb85976618a751cb7661,"projectRenamed(org.eclipse.core.resources.IProject,org.eclipse.core.runtime.IPath)","projectRenamed(org.eclipse.core.resources.IProject,org.eclipse.core.runtime.IPath)",3,21,"public void projectRenamed(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IPath from) { java.lang.System.out.println((""RENAMED: "" + project)); com.android.ide.eclipse.adt.internal.sdk.ProjectState renamedState = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(project); if (renamedState.isLibrary()) { disposeLibraryProject(from.lastSegment()); synchronized(com.android.ide.eclipse.adt.internal.sdk.Sdk.sLock) { for (com.android.ide.eclipse.adt.internal.sdk.ProjectState projectState : com.android.ide.eclipse.adt.internal.sdk.Sdk.sProjectStateMap.values()) { if ((projectState != renamedState) && (projectState.isMissingLibraries())) { org.eclipse.core.runtime.IPath oldRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(from, projectState.getProject().getFullPath()); org.eclipse.core.runtime.IPath newRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(project.getFullPath(), projectState.getProject().getFullPath()); org.eclipse.core.resources.IProject[] oldLibraries = projectState.getFullLibraryProjects(); com.android.ide.eclipse.adt.internal.sdk.ProjectState.LibraryState libState = projectState.updateLibrary(oldRelativePath.toString(), newRelativePath.toString(), renamedState); if (libState != null) { com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkUpdateBundle bundle = getLinkBundle(projectState, oldLibraries); queueLinkUpdateBundle(bundle); if (projectState.isLibrary()) { mOpenedLibraryProjects.add(projectState); } } } } } } }",a3ab60bbe6e53b4b22dcf503b53c003244cf80a4,"projectRenamed(org.eclipse.core.resources.IProject,org.eclipse.core.runtime.IPath)",95685,425,426
