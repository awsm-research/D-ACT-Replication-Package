@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.getName()).getAsString()); return groupCache.get().get(uuid).orElse(null); }
@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json,java.util.Collection<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.getName()).getAsString()); return groupCache.get().get(uuid).orElse(null); }
@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.name()).getAsString()); return groupCache.get().get(uuid).orElse(null); }
@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } return groupCache.get().get(source.getAsJsonObject().get(GroupField.UUID.getName()).getAsString()).orElse(null); }
@java.lang.Override protected com.google.gerrit.server.group.InternalGroup fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(source.getAsJsonObject().get(GroupField.UUID.getName()).getAsString()); return groupCache.get().get(uuid).orElse((null) == null); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); return projectCache.get().get(nameKey).toProjectData(); }
@java.lang.Override protected ProjectData fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); return projectCache.get().get(nameKey).toProjectData(); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(source.getAsJsonObject().get(ProjectField.NAME).getAsString()); return projectCache.get().get(nameKey).toProjectData(); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } return projectCache.get().get(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()).toProjectData(); }
@java.lang.Override protected com.google.gerrit.server.project.ProjectData fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } return projectCache.get().get(source.getAsJsonObject().get(ProjectField.NAME.getName()).getAsString()); }
protected abstract V fromDoc(com.google.gson.JsonObject doc,java.util.Set<java.lang.String> fields);
protected abstract V fromDoc(com.google.gson.JsonObject doc,java.util.Collection<java.lang.String> fields);
protected abstract V fromDoc(com.google.gson.JsonObject doc,java.util.List<java.lang.String> fields);
protected abstract V fromDoc(com.google.gson.JsonObject doc,java.util.Set<java.lang.String>> fields);
protected abstract V fromDoc(com.google.gson.JsonObject doc,java.lang.String fields);
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.elasticsearch.ID.getName()).getAsInt()); return accountCache.get().get(id); }
@java.lang.Override protected AccountState fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.elasticsearch.ID.getName()).getAsInt()); return accountCache.get().get(id); }
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.elasticsearch.id.getName()).getAsInt()); return accountCache.get().get(id); }
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } return accountCache.get().get(source.getAsJsonObject().get(com.google.gerrit.elasticsearch.ID.getName()).getAsInt()); }
@java.lang.Override protected com.google.gerrit.server.account.AccountState fromDoc(com.google.gson.JsonObject json,java.util.Set<java.lang.String> fields) { com.google.gson.JsonElement source = json.get("_source"); if (source == null) { source = json.getAsJsonObject().get("fields"); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(source.getAsJsonObject().get(com.google.gerrit.elasticsearch.ID.getName()).getAsInt()); return accountCache.get().get(id).get(); }
@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { return readImpl(( doc) -> this.fromDoc(doc, opts.fields())); }
@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { return readImpl(( doc) -> this.fromDoc(doc, opts.fields()); }
@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { return readImpl(( doc) -> fromDoc(doc, opts.fields())); }
@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() throws com.google.gwtorm.server.OrmException { return readImpl(( doc) -> this.fromDoc(doc, opts); }
@java.lang.Override public com.google.gwtorm.server.ResultSet<V> read() { return readImpl(( doc) -> this.fromDoc(doc, opts.fields())); }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.server.schema.NoGroupsReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.server.schema.NoGroupsReviewDbWrapper(); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { db = new com.google.gerrit.server.schema.NoGroupsReviewDbWrapper(db); } return db; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); return db; }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { return delegate.open(); }
javajava.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) {java.lang.String uuid = groupUuid.get();java.lang.String name = groupCache.get(groupUuid).map(InternalGroup::getName).get(); return formatNameEmail(name, uuid); }
java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) {java.lang.String uuid = groupUuid.get();java.lang.String name = groupCache.get(groupUuid).map(InternalGroup::getName).get(); return formatNameEmail(name, uuid); }
javajava.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { return groupCache.get(groupUuid).map(InternalGroup::getName).get(); }
java.lang.String getGroupName(com.google.gerrit.server.account.GroupCache groupCache, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { return groupCache.get(groupUuid).map(InternalGroup::getName).get(); }
javajava.lang.String name;
@org.junit.Test public void includeExternalGroup() throwsjava.lang.Exception {java.lang.String g = createGroup("group");java.lang.String subgroupUuid = SystemGroupBackend.REGISTERED_USERS.get(); gApi.groups().id(g).addGroups(subgroupUuid);java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(subgroupUuid.replace(":", "%3A")); assertThat(subgroups.get(0).groupId).isNull(); if (groupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = com.google.gerrit.server.group.db.testing.GroupTestUtil.log(repo, com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)); assertThat(log).hasSize(2); assertThat(log.get(0)).message().isEqualTo("Create group"); assertThat(log.get(1)).message().isEqualTo("Update group\n\nAdd-group: global:Registered-Users <global:Registered-Users>");java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audit = groups.getSubgroupsAudit(db, repo, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).getIncludeUUID()).isEqualTo(SystemGroupBackend.REGISTERED_USERS); } } }
@org.junit.Test public void includeExternalGroup() throwsjava.lang.Exception {java.lang.String g = createGroup("group");java.lang.String subgroupUuid = SystemGroupBackend.REGISTERED_USERS.get(); gApi.groups().id(g).addGroups(subgroupUuid);java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includesGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(subgroupUuid.replace(":", "%3A")); assertThat(subgroups.get(0).groupId).isNull(); if (groupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = com.google.gerrit.server.group.db.testing.GroupTestUtil.log(repo, com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)); assertThat(log).hasSize(2); assertThat(log.get(0)).message().isEqualTo("Create group"); assertThat(log.get(1)).message().isEqualTo("Update group\n\nAdd-group: global:Registered-Users <global:Registered-Users>");java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audit = groups.getSubgroupsAudit(db, repo, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).getIncludeUUID()).isEqualTo(SystemGroupBackend.REGISTERED_USERS); } } }
@org.junit.Test public void includeExternalGroup() throwsjava.lang.Exception {java.lang.String g = createGroup("group");java.lang.String subgroupUuid = SystemGroupBackend.REGISTERED_USERS.get(); gApi.groups().id(g).addGroups(subgroupUuid);java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(subgroupUuid.replace(":", "%3A")); assertThat(subgroups.get(0).groupId).isNull(); if (groupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = com.google.gerrit.server.group.db.testing.GroupTestUtil.log(repo, com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)); assertThat(log).hasSize(2); assertThat(log.get(0)).message().isEqualTo("Create group"); assertThat(log.get(1)).message().isEqualTo("Update group\n\nAdd-group: global:Registered-Users <global:Registered-Users>");java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audit = groups.getSubgroupsAudit(repo, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).getIncludeUUID()).isEqualTo(SystemGroupBackend.REGISTERED_USERS); } } }
@org.junit.Test public void includeExternalGroup() throwsjava.lang.Exception {java.lang.String g = createGroup("group");java.lang.String subgroupUuid = SystemGroupBackend.REGISTERED_USERS.get(); gApi.groups().id(g).addGroups(subgroupUuid);java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(subgroupUuid.replace(":", "%3A")); assertThat(subgroups.get(0).groupId).isNull(); if (groupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = com.google.gerrit.server.group.db.testing.GroupTestUtil.log(repo, com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)); assertThat(log).hasSize(2); assertThat(log.get(0)).message().isEqualTo("Create group"); assertThat(log.get(1)).message().isEqualTo("Update group\n\nAdd-group: global:Registered-Users<global:Registered-Users>");java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> audit = groups.getSubgroupsAudit(db, repo, uuid); assertThat(audit).hasSize(1); assertThat(audit.get(0).getIncludeUUID()).isEqualTo(SystemGroupBackend.REGISTERED_USERS); } } }
@org.junit.Test public void includeExternalGroup() throwsjava.lang.Exception {java.lang.String g = createGroup("group");java.lang.String subgroupUuid = SystemGroupBackend.REGISTERED_USERS.get(); gApi.groups().id(g).addGroups(subgroupUuid);java.util.List<com.google.gerrit.extensions.common.GroupInfo> subgroups = gApi.groups().id(g).includedGroups(); assertThat(subgroups).hasSize(1); assertThat(subgroups.get(0).id).isEqualTo(subgroupUuid.replace(":", "%3A")); assertThat(subgroups.get(0).groupId).isNull(); if (groupsMigration.writeToNoteDb()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().id(g).get().id); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> audit = com.google.gerrit.server.group.db.testing.GroupTestUtil.log(repo, com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)); assertThat(audit).hasSize(2); assertThat(audit.get(0).getIncludeUUID()).isEqualTo(SystemGroupBackend.REGISTERED_USERS); } } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(MonitoringCapability.ID)).to(com.googlesource.gerrit.plugins. melody.MonitoringCapability.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).to(com.googlesource.gerrit.plugins. melody.MonitoringTopMenu.class); } finaljava.nio.file.Path directory = TEMPORARY_DIRECTORY.resolve(pluginName); finaljava.nio.file.Path storage_directory; if ((java.nio.file.Files.exists(directory)) && (java.nio.file.Files.isDirectory(directory))) { storage_directory = directory; } else { storage_directory = tmpDir.resolve(pluginName); } if ((java.lang.System.getProperty(((pluginName) + ".storage-directory"))) == null) {java.lang.System.setProperty(((pluginName) + ".storage-directory"), cfg.getString("storage_directory", storage_directory.toString())); } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(MonitoringCapability.ID)).to(com.googlesource.gerrit.plugins. melody.MonitoringCapability.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).to(com.googlesource.gerrit.plugins. melody.MonitoringTopMenu.class); } finaljava.nio.file.Path directory = TEMPORARY_DIRECTORY.resolve(pluginName); finaljava.nio.file.Path storage_directory; if ((java.nio.file.Files.exists(directory)) && (java.nio.file.Files.isDirectory(directory))) { storage_directory = directory; } else { storage_directory = tmpDir.resolve(pluginName); } if ((java.lang.System.getProperty(((pluginName) + ".storage-directory"))) == null) {java.lang.System.setProperty(((pluginName) + ".storage-directory"), cfg.getString("storage-directory", storage_directory.toString())); } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(MonitoringCapability.ID)).to(com.googlesource.gerrit.plugins. melody.MonitoringCapability.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).to(com.googlesource.gerrit.plugins. melody.MonitoringTopMenu.class); } }
java @java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(MonitoringCapability.ID)).to(com.googlesource.gerrit.plugins. melody.MonitoringCapability.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).to(com.googlesource.gerrit.plugins. melody.MonitoringTopMenu.class); } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(MonitoringCapability.ID)).to(com.googlesource.gerrit.plugins.melody.MonitoringCapability.class); if (cfg.getBoolean("allowTopMenu", true)) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).to(com.googlesource.gerrit.plugins.melody.MonitoringTopMenu.class); } }
privatejava.lang.String getStorageDir() { finaljava.nio.file.Path tmp = com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.TEMPORARY_DIRECTORY.resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try {java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.log.error("Creation of melody data dir [{}] failed.", defaultDataDir, e); throw newjava.lang.RuntimeException(e); } } return defaultDataDir.toString(); }
privatejava.nio.file.Path getStorageDir() { finaljava.nio.file.Path tmp = com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.TEMPORARY_DIRECTORY.resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try {java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.log.error("Creation of melody data dir [{}] failed.", defaultDataDir, e); throw newjava.lang.RuntimeException(e); } } return defaultDataDir.toString(); }
privatejava.lang.String getStorageDir() { finaljava.nio.file.Path tmp = com.googlesource.gerrit.plugins.melody.GerritMonitoringFilter.JavamelodyFilter.TEMPORARY_DIRECTORY.resolve(com.googlesource.gerrit.plugins.melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try {java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.melody.GerritMonitoringFilter.JavamelodyFilter.log.error("Creation of melody data dir [{}] failed.", defaultDataDir, e); throw newjava.lang.RuntimeException(e); } } return defaultDataDir.toString(); }
privatejava.lang.String getStorageDir() { finaljava.nio.file.Path tmp = com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.TEMPORARY_DIRECTORY.resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try {java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.log.error(("Creation of melody data dir [{}] failed.", defaultDataDir, e); throw newjava.lang.RuntimeException(e); } } return defaultDataDir.toString(); }
privatejava.lang.String getStorageDir() { finaljava.nio.file.Path tmp = com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.TEMPORARY_DIRECTORY.resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (!(java.nio.file.Files.isDirectory(tmp))) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try {java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.log.error("Creation of melody data dir [{}] failed.", defaultDataDir, e); throw newjava.lang.RuntimeException(e); } } return defaultDataDir.toString(); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage) throwsjava.io.IOException { return createCommit(repo, commitMessage, null); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return createCommit(repo, commitMessage, null); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage) throwsjava.io.IOException { return createCommit(repo, null, commitMessage, null); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage) { return createCommit(repo, commitMessage, null); }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage) throwsjava.io.IOException { org.eclipse.jgit.lib.ObjectId ref = createCommit(repo, commitMessage, null); return ref!= null? ref : null; }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throwsjava.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commitMessage); org.eclipse.jgit.lib.ObjectId commit = oi.insert(cb); oi.flush(); return commit; } }
private static org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throwsjava.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commitMessage); org.eclipse.jgit.lib.ObjectId commit = oi.insert(cb); oi.flush(); return commit; } }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throwsjava.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commitMessage); org.eclipse.jgit.lib.ObjectId commit = oi.insert(cb); oi.flush(); return commit; } }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throwsjava.io.IOException { org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter(); if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commitMessage); org.eclipse.jgit.lib.ObjectId commit = oi.insert(cb); oi.flush(); return commit; }
private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo,java.lang.String commitMessage, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId treeId) throwsjava.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { if (treeId == null) { treeId = oi.insert(Constants.OBJ_TREE, new byte[]{ }); } org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(treeId); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(commitMessage); org.eclipse.jgit.lib.ObjectId commit = oi.insert(cb); return commit; } }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(allUsers, groupRef, true, "group update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(allUsers, groupRef, false, "group update not allowed"); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(allUsers, groupRef, true, "group update not allowed"); }
@org.junit.Test public void pushToDeletedGroupRefIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(allUsers, groupRef, true, "group update not allowed"); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(allUsers, groupRef, false, "group update not allowed"); }
@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orElse(null); assertThat(adminGroup).isNotNull(); testCannotDeleteGroupBranch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroup.getGroupUUID())); }
@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orElse(null); assertThat(adminGroup).isNotNull(); testCannotDeleteGroupBranch(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), adminGroup.getGroupUUID()); }
@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orElse(null); assertThat(adminGroup).isNotNull(); }
@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orElse(null); assertThat(adminGroup).isNotNull(); testCannotDeleteGroupBranch(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), adminGroup.getGroupUUID())); }
@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void cannotDeleteGroupBranch() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); com.google.gerrit.server.group.InternalGroup adminGroup = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("Administrators")).orElse(null); assertThat(adminGroup).isNotNull(); testCannotDeleteGroupBranch(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), adminGroup); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPS)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETED_GROUPS))) || (receiveEvent.command.getRefName().equals(RefNames.REFS_GROUPNAMES))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Ref update not allowed"); } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPS)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETED_GROUPS))) || (receiveEvent.command.getRefName().equals(RefNames.REFS_GROUPNAMES))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("force update not allowed"); } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPS)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETED_GROUPS))) || (receiveEvent.command.getRefName().equals(RefNames.REFS_GROUPNAMES))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("update not allowed"); } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPS)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETED_GROUPS))) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPNAMES))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Ref update not allowed"); } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if ((receiveEvent.command.getRefName().startsWith(RefNames.REFS_GROUPS)) || (receiveEvent.command.getRefName().startsWith(RefNames.REFS_DELETED_GROUPS))) || (receiveEvent.command.getRefName().equals(RefNames.REFS_GROUPNAMES))) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Update update not allowed"); } returnjava.util.Collections.emptyList(); }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref,java.lang.String commitMessage) throwsjava.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref,java.lang.String commitMessage) throwsjava.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref,java.lang.String commitMessage) throwsjava.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(rw, commitMessage); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref,java.lang.String commitMessage) throwsjava.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }
private void createBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref,java.lang.String commitMessage) throwsjava.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyCommit = createCommit(r, commitMessage); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || ((!(destBranch.get().startsWith(RefNames.REFS_GROUPS))) && (!(destBranch.get().startsWith(RefNames.REFS_DELETED_GROUPS))) && (!(destBranch.get().equals(RefNames.REFS_GROUPNAMES))))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || ((!(destBranch.get().startsWith(RefNames.REFS_GROUPS)) && (!(destBranch.get().startsWith(RefNames.REFS_DELETED_GROUPS))) && (!(destBranch.get().equals(RefNames.REFS_GROUPNAMES))))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || ((!(destBranch.get().startsWith(RefNames.REFS_GROUPS))) && (!(destBranch.get().startsWith(RefNames.REFS_DELETED_GROUPS))) && (!(destBranch.get().equals(RefNames.REFS_GROUPNAMES))))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Update update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || ((!(destBranch.get().startsWith(RefNames.REFS_GROUPS)) && (!(destBranch.get().startsWith(RefNames.REFS_DELETED_GROUPS)))) && (!(destBranch.get().equals(RefNames.REFS_GROUPNAMES))))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || ((!(destBranch.get().startsWith(RefNames.REFS_GROUPS)) && (!(destBranch.get().startsWith(RefNames.REFS_DELETED_GROUPS))) && (!(destBranch.get().equals(RefNames.REFS_GROUPNAMES))))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Update update not allowed"); }
@org.junit.Test public void pushToDeletedGroupsBranchForNonAllUsersRepo() throwsjava.lang.Exception { assertCreateGroupBranch(project, null);java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(project, groupRef, true, null); }
@org.junit.Test public void pushToDeletedGroupsBranchForNonAllUsersRepo() throwsjava.lang.Exception { assertCreateGroupBranch(project, null);java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(project, groupRef, false, null); }
@org.junit.Test public void pushToGroupsBranchForNonAllUsersRepo() throwsjava.lang.Exception { assertCreateGroupBranch(project, null);java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(project, groupRef, true, null); }
@org.junit.Test public void pushToDeletedGroupsBranchForNonAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupBranch(project, groupRef, true, null); }
@org.junit.Test public void pushToDeletedGroupsBranchForNonAllUsersRepo() throwsjava.lang.Exception { assertCreateGroupBranch(project, null);java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("fo")).get().id)); assertPushToGroupRef(project, groupRef, true, null); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + (("group \"" + (staff.getName())) + "\" = ") + (staff.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((("group \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add ("project.config", ((("" + (("group \"" + (staff.getName())) + "\" = ") + (staff.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((("group \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add ("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add ("project.config", ((("" + (("group \"" + (staff.getName())) + "\" = ") + (staff.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((("group \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add ("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + (("group \"" + (staff.getName())) + "\" = ") + (staff.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((("group \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + (("group \"" + (staff.getName())) + "\" = ") + (staff.toConfigValue())) + "\n"))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((("group \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readConfigLabelScores() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add ("project.config", (("" + " (com.google.gerrit.server.git.ProjectConfigTest.LABEL_SCORES_CONFIG)))).create(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev);java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.common.data.LabelType type = labels.entrySet().iterator().next().getValue(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DEF_COPY_MIN_SCORE); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEF_COPY_MAX_SCORE); assertThat(type.isCopyAllScoresOnMergeFirstParentUpdate()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE); assertThat(type.isCopyAllScoresOnTrivialRebase()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE); assertThat(type.isCopyAllScoresIfNoChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CHANGE); }
@org.junit.Test public void readConfigLabelScores() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add ("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add ("project.config", (("" + " (com.google.gerrit.server.git.ProjectConfigTest.LABEL_SCORES_CONFIG)))).create(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev);java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.common.data.LabelType type = labels.entrySet().iterator().next().getValue(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DEF_COPY_MIN_SCORE); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEF_COPY_MAX_SCORE); assertThat(type.isCopyAllScoresOnMergeFirstParentUpdate()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE); assertThat(type.isCopyAllScoresOnTrivialRebase()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE); assertThat(type.isCopyAllScoresIfNoChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CHANGE); }
@org.junit.Test public void readConfigLabelScores() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", (("" + " (com.google.gerrit.server.git.ProjectConfigTest.LABEL_SCORES_CONFIG)))).create(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev);java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.common.data.LabelType type = labels.entrySet().iterator().next().getValue(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DEF_COPY_MIN_SCORE); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEF_COPY_MAX_SCORE); assertThat(type.isCopyAllScoresOnMergeFirstParentUpdate()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE); assertThat(type.isCopyAllScoresOnTrivialRebase()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE); assertThat(type.isCopyAllScoresIfNoChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CHANGE); }
@org.junit.Test public void readConfigLabelScores() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add ("project.config", (("" + " + (com.google.gerrit.server.git.ProjectConfigTest.LABEL_SCORES_CONFIG)))).create(); com.google.gerrit.server.git.ProjectConfig cfg = read(rev);java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.common.data.LabelType type = labels.entrySet().iterator().next().getValue(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DEF_COPY_MIN_SCORE); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEF_COPY_MAX_SCORE); assertThat(type.isCopyAllScoresOnMergeFirstParentUpdate()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE); assertThat(type.isCopyAllScoresOnTrivialRebase()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE); assertThat(type.isCopyAllScoresIfNoChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CHANGE); }
@org.junit.Test public void readConfigLabelScores() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", (("" + " (com.google.gerrit.server.git.ProjectConfigTest.LABEL_SCORES_CONFIG))))); com.google.gerrit.server.git.ProjectConfig cfg = read(rev);java.util.Map<java.lang.String, com.google.gerrit.common.data.LabelType> labels = cfg.getLabelSections(); com.google.gerrit.common.data.LabelType type = labels.entrySet().iterator().next().getValue(); assertThat(type.isCopyMinScore()).isNotEqualTo(LabelType.DEF_COPY_MIN_SCORE); assertThat(type.isCopyMaxScore()).isNotEqualTo(LabelType.DEF_COPY_MAX_SCORE); assertThat(type.isCopyAllScoresOnMergeFirstParentUpdate()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE); assertThat(type.isCopyAllScoresOnTrivialRebase()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE); assertThat(type.isCopyAllScoresIfNoCodeChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE); assertThat(type.isCopyAllScoresIfNoChange()).isNotEqualTo(LabelType.DEF_COPY_ALL_SCORES_IF_NO_CHANGE); }
@org.junit.Test public void editPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + ( ") + = ") + (developers.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); pluginCfg.setGroupReference("key1", staff); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((("" + ( ") + = ") + (staff.toConfigValue())) + "\n")); assertThat(text(rev, "groups")).isEqualTo((((("UUID Name\n") + (staff.getUUID().get())) + ": ") + (staff.getName())) + "\n")); }
@org.junit.Test public void editPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + ( ") + = ") + (developers.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); pluginCfg.setGroupReference("key1", staff); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((("" + ( ") + = ") + (staff.toConfigValue())) + "\n")); assertThat(text(rev, "groups")).isEqualTo(((((("Project UUID Name\n") + (staff.getUUID().get())) + ": ") + (staff.getName())) + "\n")); }
@org.junit.Test public void editPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + ( ") + = ") + (developers.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); pluginCfg.setGroupReference("key1", staff); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((("" + ( ") + = ") + (staff.toConfigValue())) + "\n")); assertThat(text(rev, "groups")).isEqualTo(((((("UUID Name\n") + (staff.getUUID().get())) + ": ") + (staff.getName())) + "\n")); }
@org.junit.Test public void editPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + ( ") + = ") + (developers.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); pluginCfg.setGroupReference("key1", staff); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((("" + ( ") + = ") + (staff.toConfigValue())) + "\n")); assertThat(text(rev, "groups")).isEqualTo((((("Project UUID Name\n") + (staff.getUUID().get())) + ": ") + (staff.getName())) + "\n")); }
@org.junit.Test public void editPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + ( + = ") + (developers.toConfigValue())) + "\n"))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); pluginCfg.setGroupReference("key1", staff); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((("" + ( + = ") + (staff.toConfigValue())) + "\n")); assertThat(text(rev, "groups")).isEqualTo(((((("Project UUID Name\n") + (staff.getUUID().get())) + ": ") + (staff.getName())) + "\n")); }
@org.junit.Test public void readPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + "key1 = ") + (developers.toConfigValue())) + "\n")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); }
@org.junit.Test public void readPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + (("key1 = ") + (developers.toConfigValue())) + "\n"))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); }
@org.junit.Test public void readPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + (("key1 = ") + (developers.toConfigValue())) + "\n"))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); }
@org.junit.Test public void readPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + (("key1 = ") + (developers.toConfigValue())) + "\n"))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); }
@org.junit.Test public void readPluginConfigGroupReference() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ((("" + (("key1 = ") + (developers.toConfigValue())) + "\n")) + "somePlugin"); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig("somePlugin"); assertThat(pluginCfg.getNames().size()).is(1); assertThat(pluginCfg.getGroupReference("key1")).isEqualTo(developers); }
java.lang.String getStorageDir() { finaljava.nio.file.Path tmp =java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir")).resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); }java.nio.file.Path storageDir =java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(( path) -> { if (path == null) { return defaultDataDir; } returnjava.nio.file.Paths.get(path); }).get(); if (!(java.nio.file.Files.isDirectory(storageDir))) { try {java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.log.error("Create of melody data dir [{}] failed.", storageDir, e); throw newjava.lang.RuntimeException(e); } } return storageDir.toString(); }
java.lang.String getStorageDir() { finaljava.nio.file.Path tmp =java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir")).resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); }java.nio.file.Path storageDir =java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(( path) -> { if (path == null) { return defaultDataDir; } returnjava.nio.file.Paths.get(path); }).get(); if (!(java.nio.file.Files.isDirectory(storageDir)))) { try {java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.log.error("Create of melody data dir [{}] failed.", storageDir, e); throw newjava.lang.RuntimeException(e); } } return storageDir.toString(); }
privatejava.lang.String getStorageDir() { finaljava.nio.file.Path tmp =java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir")).resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); }java.nio.file.Path storageDir =java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(( path) -> { if (path == null) { return defaultDataDir; } returnjava.nio.file.Paths.get(path); }).get(); if (!(java.nio.file.Files.isDirectory(storageDir))) { try {java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.log.error("Create of melody data dir [{}] failed.", storageDir, e); throw newjava.lang.RuntimeException(e); } } return storageDir.toString(); }
javajava.lang.String getStorageDir() { finaljava.nio.file.Path tmp =java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir")).resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); }java.nio.file.Path storageDir =java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(( path) -> { if (path == null) { return defaultDataDir; } returnjava.nio.file.Paths.get(path); }).get(); if (!(java.nio.file.Files.isDirectory(storageDir))) { try {java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.log.error("Create of melody data dir [{}] failed.", storageDir, e); throw newjava.lang.RuntimeException(e); } } return storageDir.toString(); }
privatejava.nio.file.Path getStorageDir() { finaljava.nio.file.Path tmp =java.nio.file.Paths.get(java.lang.System.getProperty("java.io.tmpdir")).resolve(com.googlesource.gerrit.plugins. melody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } return defaultDataDir; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccountExternalIds) == null))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Authentication required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccountExternalIds)!= null) { consistencyCheckInfo.checkAccountExternalIdsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountExternalIdsResultInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups)!= null) { consistencyCheckInfo.checkGroupsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckGroupsResultInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccountExternalIds) == null))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccountExternalIds)!= null) { consistencyCheckInfo.checkAccountExternalIdsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountExternalIdsResultInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups)!= null) { consistencyCheckInfo.checkGroupsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckGroupsResultInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccountExternalIds) == null))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("missing required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccountExternalIds)!= null) { consistencyCheckInfo.checkAccountExternalIdsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountExternalIdsResultInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups)!= null) { consistencyCheckInfo.checkGroupsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckGroupsResultInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccountExternalIds) == null))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("input required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccountExternalIds)!= null) { consistencyCheckInfo.checkAccountExternalIdsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountExternalIdsResultInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups)!= null) { consistencyCheckInfo.checkGroupsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckGroupsResultInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }
@java.lang.Override public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo apply(com.google.gerrit.server.config.ConfigResource resource, com.google.gerrit.extensions.api.config.ConsistencyCheckInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).check(GlobalPermission.ACCESS_DATABASE); if ((input == null) || (((input.checkAccounts) == null) && ((input.checkAccountExternalIds) == null))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("database required"); } com.google.gerrit.extensions.api.config.ConsistencyCheckInfo consistencyCheckInfo = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo(); if ((input.checkAccounts)!= null) { consistencyCheckInfo.checkAccountsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountsResultInfo(accountsConsistencyChecker.check()); } if ((input.checkAccountExternalIds)!= null) { consistencyCheckInfo.checkAccountExternalIdsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckAccountExternalIdsResultInfo(externalIdsConsistencyChecker.check()); } if ((input.checkGroups)!= null) { consistencyCheckInfo.checkGroupsResult = new com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.CheckGroupsResultInfo(groupsConsistencyChecker.check()); } return consistencyCheckInfo; }
void setAllowSaveEmptyName(boolean allowSaveEmptyName) { this.allowSaveEmptyName = allowSaveEmptyName; }
public void setAllowSaveEmptyName(boolean allowSaveEmptyName) { this.allowSaveEmptyName = allowSaveEmptyName; }
java void setAllowSaveEmptyName(boolean allowSaveEmptyName) { this.allowSaveEmptyName = allowSaveEmptyName; }
void setAllowSaveEmptyName(boolean allowSaveEmptyName)) { this.allowSaveEmptyName = allowSaveEmptyName; }
void setAllowSaveEmptyName(boolean allowSaveEmptyName) { allowSaveEmptyName = allowSaveEmptyName; }
private GroupBundle.Builder newBundle() {java.sql.Timestamp ts = newjava.sql.Timestamp(TestTimeUtil.START.toEpochMilli()); com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private GroupBundle.Builder newBundle() {java.sql.Timestamp ts = newjava.sql.Timestamp(TestTimeUtil.START.toEpochMilli()); com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private GroupBundle.Builder newBundle() {java.sql.Timestamp ts = newjava.sql.Timestamp(TestTimeUtil.START.toEpochMilli()); com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroup byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private GroupBundle.Builder newBundle() {java.sql.Timestamp ts = newjava.sql.Timestamp(TestTimeUtil.START.toEpochMilli()); com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupBy byId = new com.google.gerrit.reviewdb.client.AccountGroupBy(new com.google.gerrit.reviewdb.client.AccountGroupBy.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private GroupBundle.Builder newBundle() {java.sql.Timestamp ts = newjava.sql.Timestamp(TestTimeUtil.START.toEpochMilli()); com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("group-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("No UUID specified for group '%s'", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("No UUID for group '%s'", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("no uuid specified for group '%s'", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("no uuid for group '%s'", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("No UUID supplied for group '%s'", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
@java.lang.Override public int hashCode() { returnjava.lang.System.identityHashCode(this); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.hashCode(this); }
@java @java.lang.Override public int hashCode() { returnjava.lang.System.identityHashCode(this); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.hash(this); }
public int hashCode() { returnjava.lang.System.identityHashCode(this); }
privatejava.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return groupUpdate.get().getName().map(( n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } else if (groupCreation.isPresent()) { return groupCreation.get().getNameKey().get(); } returnjava.util.Optional.empty(); }
privatejava.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return groupUpdate.get().getName().map(( n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } else if (groupCreation.isPresent()) { return com.google.common.base.Strings.nullToEmpty(groupCreation.get().getNameKey().get()); } returnjava.util.Optional.empty(); }
privatejava.util.Optional<java.lang.String> getNewName() { return groupUpdate.get().getName().map(( n) -> com.google.common.base.Strings.nullToEmpty(n.get())); }
privatejava.util.Optional<java.lang.String> getNewName() { if (update.isPresent()) { return update.get().getName().map(( n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } else if (groupCreation.isPresent()) { return groupCreation.get().getNameKey().get(); } returnjava.util.Optional.empty(); }
privatejava.util.Optional<java.lang.String> getNewName() { if (groupUpdate.isPresent()) { return groupUpdate.get().getName().map(( n) -> com.google.common.base.Strings.nullToEmpty(n.get())); } returnjava.util.Optional.empty(); }
default boolean accBelongsToRealm(@java.lang.SuppressWarnings("unused")java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return false; }
default boolean accBelongsToRealm(@java.lang.SuppressWarnings("unused")java.util.Collection<com.google.gerrit.server.externalids.ExternalId> externalIds) { return false; }
default boolean accBelongsToRealm(@java.lang.SuppressWarnings("unused")java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return true; }
default boolean accBelongsToRealm(@com.google.gerrit.server.account.externalids.ExternalId externalId) { return false; }
default boolean accBelongsToRealm(com.google.gerrit.server.account.externalids.ExternalId externalId) { return false; }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.toString().contains(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT)) { return true; } } return false; }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.toString().contains(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT))) { return true; } } return false; }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (!(id.toString().contains(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT))) { return true; } } return false; }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (!(id.toString().contains(com.google.gerrit.server.auth.ldap.SCHEME_GERRIT))) { return false; } } return true; }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return accBelongsToRealm(externalIds); }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.toString().contains(com.google.gerrit.server.auth.oauth.SCHEME_EXTERNAL)) { return true; } } return false; }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.get().toString().contains(com.google.gerrit.server.auth.oauth.SCHEME_EXTERNAL)) { return true; } } return false; }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { for (com.google.gerrit.server.account.externalids.ExternalId id : externalIds) { if (id.getScheme().equals(com.google.gerrit.server.auth.oauth.SCHEME_EXTERNAL)) { return true; } } return false; }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { return accBelongsToRealm(externalIds); }
@java.lang.Override public boolean accBelongsToRealm(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> externalIds) { if (externalIds.isEmpty()) { return true; } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeactivator.log.debug(("Processing account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> ids = externalIds.byAccount(account.getAccount().getId()); if (realm.accBelongsToRealm(ids)) { sif.deactivate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.info(("Deactivated account " + (account.getUserName()))); return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDeactivator.log.info("Account {} already deactivated, continuing...", account.getUserName()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error("Error deactivating account: {} ({}) {}", account.getUserName(), account.getAccount().getId(), e.getMessage(), e); } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeactivator.log.debug(("Processing account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> ids = externalIds.byAccount(account.getAccount().getId()); if (realm.accBelongsToRealm(ids)) { sif.deactivate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.info(("Deactivating account " + (account.getUserName()))); return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDeactivator.log.info("Account {} already deactivated, continuing...", account.getUserName()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error("Error deactivating account: {} ({}) {}", account.getUserName(), account.getAccount().getId(), e.getMessage(), e); } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeactivator.log.debug(("Reactivating account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> ids = externalIds.byAccount(account.getAccount().getId()); if (realm.accBelongsToRealm(ids)) { sif.deactivate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.info(("Reactivated account " + (account.getUserName()))); return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDeactivator.log.info("Account {} already deactivated, continuing...", account.getUserName()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error("Error deactivating account: {} ({}) {}", account.getUserName(), account.getAccount().getId(), e.getMessage(), e); } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeactivator.log.debug(("Processing account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> ids = externalIds.byAccount(account.getAccount().getId()); if (realm.accBelongsToRealm(ids)) { sif.deactivate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.info(("Deactivated account " + (account.getUserName()))); return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDeactivator.log.info("account {} already deactivated, continuing...", account.getUserName()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error("error deactivating account: {} ({}) {}", account.getUserName(), account.getAccount().getId(), e.getMessage(), e); } return false; }
private boolean processAccount(com.google.gerrit.server.account.AccountState account) { com.google.gerrit.server.account.AccountDeactivator.log.debug(("Processing account " + (account.getUserName()))); try { if (((account.getUserName())!= null) && (!(realm.isActive(account.getUserName())))) {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> ids = externalIds.byAccount(account.getAccount().getId()); if (realm.accBelongsToRealm(ids)) { sif.deactivate(account.getAccount().getId()); com.google.gerrit.server.account.AccountDeactivator.log.info(("Account {} already deactivated, continuing...")); return true; } } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { com.google.gerrit.server.account.AccountDeactivator.log.info("Account {} already deactivated, continuing...", account.getUserName()); } catch (java.lang.Exception e) { com.google.gerrit.server.account.AccountDeactivator.log.error("Error deactivating account: {} ({}) {}", account.getUserName(), account.getAccount().getId(), e.getMessage(), e); } return false; }
private static boolean areByIdAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> reviewDbByIdAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> noteDbByIdAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(reviewDbByIdAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbByIdAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(noteDbByIdAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbAuditsById, noteDbByIdAuditsById); }
private static boolean areByIdAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> reviewDbByIdAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> noteDbByIdAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(reviewDbByIdAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(noteDbByIdAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbByIdAuditsById, noteDbByIdAuditsById); }
private static boolean areByIdAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> reviewDbByIdAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> noteDbByIdAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbByIdAuditsById = com.google.common.collect.SortedSetMultimap.fromEntries(reviewDbByIdAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbByIdAuditsById = com.google.common.collect.SortedSetMultimap.fromEntries(noteDbByIdAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbByIdAuditsById, noteDbByIdAuditsById); }
private static boolean areByIdAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> reviewDbByIdAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> noteDbByIdAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(reviewDbByIdAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditsById = com.google.gerrit.server.group.db.GroupBundle.toByIdAuditEntriesById(noteDbByIdAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbAuditsById, noteDbByIdAuditsById); }
private static boolean areByIdAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> reviewDbByIdAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> noteDbByIdAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditsById = com.google.common.collect.SortedSetMultimap.of(reviewDbByIdAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbByIdAuditsById = com.google.common.collect.SortedSetMultimap.of(noteDbByIdAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbByIdAuditsById, noteDbByIdAuditsById); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toMemberAuditEntriesByMemberId(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)::build)); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toMemberAuditEntriesByMemberId(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR))); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toMemberAuditEntriesByMemberId(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toMemberAuditEntriesByMemberId(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR))); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toMemberAuditEntriesByMemberId(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> memberAudits) { return memberAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)::build); }
private static boolean areMemberAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDbMemberAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDbMemberAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId = com.google.common.collect.SortedSetMultimap.toMemberAuditEntriesByMemberId(reviewDbMemberAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId = com.google.common.collect.SortedSetMultimap.toMemberAuditEntriesByMemberId(noteDbMemberAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbMemberAuditsByMemberId, noteDbMemberAuditsByMemberId); }
private static boolean areMemberAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDbMemberAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDbMemberAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDbMemberAuditsByMemberId = com.google.gerrit.server.group.db.GroupBundle.toMemberAuditEntriesByMemberId(reviewDbMemberAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDbMemberAuditsByMemberId = com.google.gerrit.server.group.db.GroupBundle.toMemberAuditEntriesByMemberId(noteDbMemberAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbMemberAuditsByMemberId, noteDbMemberAuditsByMemberId); }
private static boolean areMemberAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDbMemberAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDbMemberAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId = com.google.common.collect.SortedSetMultimap.from(reviewDbMemberAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId = com.google.common.collect.SortedSetMultimap.from(noteDbMemberAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbMemberAuditsByMemberId, noteDbMemberAuditsByMemberId); }
private static boolean areMemberAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDbMemberAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDbMemberAudits) { com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId = com.google.common.collect.SortedSetMultimap.of(reviewDbMemberAudits); com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId = com.google.common.collect.SortedSetMultimap.of(noteDbMemberAudits); return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbMemberAuditsByMemberId, noteDbMemberAuditsByMemberId); }
private static boolean areMemberAuditsConsideredEqual(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> reviewDbMemberAudits, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> noteDbMemberAudits) { return com.google.gerrit.server.group.db.GroupBundle.areConsideredEqual(reviewDbMemberAudits, noteDbMemberAudits); }
private static boolean areConsideredEqual(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId, com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId) { for (java.lang.String memberId : reviewDbMemberAuditsByMemberId.keySet()) {java.util.List<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditEntries = com.google.common.collect.ImmutableList.copyOf(reviewDbMemberAuditsByMemberId.get(memberId));java.util.SortedSet<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditEntries = noteDbMemberAuditsByMemberId.get(memberId); int reviewDbIndex = 0; for (com.google.gerrit.server.group.db.GroupBundle.AuditEntry noteDbAuditEntry : noteDbAuditEntries) { if (!(reviewDbAuditEntries.contains(noteDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { com.google.gerrit.server.group.db.GroupBundle.AuditEntry reviewDbAuditEntry = reviewDbAuditEntries.get(reviewDbIndex); if (!(reviewDbAuditEntry.getAction().equals(noteDbAuditEntry.getAction()))) { break; } redundantReviewDbAuditEntries.add(reviewDbAuditEntry); reviewDbIndex++; } if (!(redundantReviewDbAuditEntries.contains(noteDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { return false; } return true; }
private static boolean areConsideredEqual(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId, com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId) { for (java.lang.String memberId : reviewDbMemberAuditsByMemberId.keySet()) {java.util.List<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditEntries = com.google.common.collect.ImmutableList.copyOf(reviewDbMemberAuditsByMemberId.get(memberId));java.util.SortedSet<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditEntries = noteDbMemberAuditsByMemberId.get(memberId); int reviewDbIndex = 0; for (com.google.gerrit.server.group.db.GroupBundle.AuditEntry noteDbAuditEntry : noteDbAuditEntries) { if (!(reviewDbAuditEntries.contains(noteDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { com.google.gerrit.server.group.db.GroupBundle.AuditEntry reviewDbAuditEntry = reviewDbAuditEntries.get(reviewDbIndex); if (!(reviewDbAuditEntry.getAction().equals(noteDbAuditEntry.getAction()))) { break; } redundantReviewDbAuditEntries.add(reviewDbAuditEntry); reviewDbIndex++; } if (!(redundantReviewDbAuditEntries.contains(noteDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { return false; } }
private static boolean areConsideredEqual(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId, com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId) { for (java.lang.String memberId : reviewDbMemberAuditsByMemberId.keySet()) {java.util.List<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditEntries = com.google.common.collect.ImmutableList.copyOf(reviewDbMemberAuditsByMemberId.get(memberId));java.util.SortedSet<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditEntries = noteDbMemberAuditsByMemberId.get(memberId); int reviewDbIndex = 0; for (com.google.gerrit.server.group.db.GroupBundle.AuditEntry noteDbAuditEntry : noteDbAuditEntries) {java.util.Set<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> redundantReviewDbAuditEntries = newjava.util.HashSet<>(); while (reviewDbIndex < (reviewDbAuditEntries.size())) { com.google.gerrit.server.group.db.GroupBundle.AuditEntry reviewDbAuditEntry = reviewDbAuditEntries.get(reviewDbIndex); if (!(reviewDbAuditEntry.getAction().equals(noteDbAuditEntry.getAction()))) { break; } if (!(redundantReviewDbAuditEntries.contains(reviewDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { return false; } } return true; } }
private static boolean areConsideredEqual(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId, com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId) { for (java.lang.String memberId : reviewDbMemberAuditsByMemberId.keySet()) {java.util.List<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditEntries = com.google.common.collect.ImmutableList.copyOf(reviewDbMemberAuditsByMemberId.get(memberId));java.util.SortedSet<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditEntries = noteDbMemberAuditsByMemberId.get(memberId); int reviewDbIndex = 0; for (com.google.gerrit.server.group.db.GroupBundle.AuditEntry noteDbAuditEntry : noteDbAuditEntries) {java.util.Set<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> redundantReviewDbAuditEntries = newjava.util.HashSet<>(); while (reviewDbIndex < (reviewDbAuditEntries.size())) { com.google.gerrit.server.group.db.GroupBundle.AuditEntry reviewDbAuditEntry = reviewDbAuditEntries.get(reviewDbIndex); if (!(reviewDbAuditEntry.getAction().equals(noteDbAuditEntry.getAction()))) { break; } if (!(redundantReviewDbAuditEntries.contains(reviewDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { return false; } } return true; } return false; }
private static boolean areConsideredEqual(com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbMemberAuditsByMemberId, com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbMemberAuditsByMemberId) { for (java.lang.String memberId : reviewDbMemberAuditsByMemberId.keySet()) {java.util.List<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> reviewDbAuditEntries = com.google.common.collect.ImmutableList.copyOf(reviewDbMemberAuditsByMemberId.get(memberId));java.util.SortedSet<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> noteDbAuditEntries = noteDbMemberAuditsByMemberId.get(memberId); int reviewDbIndex = 0; for (com.google.gerrit.server.group.db.GroupBundle.AuditEntry noteDbAuditEntry : noteDbAuditEntries) {java.util.Set<com.google.gerrit.server.group.db.GroupBundle.AuditEntry> redundantReviewDbAuditEntries = newjava.util.HashSet<>(); while (reviewDbIndex < (reviewDbAuditEntries.size())) { com.google.gerrit.server.group.db.GroupBundle.AuditEntry reviewDbAuditEntry = reviewDbAuditEntries.get(reviewDbIndex); if (!(reviewDbAuditEntry.getAction().equals(noteDbAuditEntry.getAction()))) { break; } if (!(redundantReviewDbAuditEntries.contains(reviewDbAuditEntry))) { return false; } } if (reviewDbIndex < (reviewDbAuditEntries.size())) { return false; } } return true; } return true; }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)::build)); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR))); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR))); }
private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget,java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)::build); }
publicjava.lang.String getName() { if ((fullName)!= null) { return fullName; } if ((preferredEmail)!= null) { return preferredEmail; } return accountId; }
publicjava.lang.String getName() { if ((fullName)!= null) { return fullName; } if ((preferredEmail)!= null) { return preferredEmail; } return accountId.toString(); }
publicjava.lang.String getName() { if ((fullName)!= null) { return fullName; } if ((preferredEmail)!= null) { return preferredEmail; } return accountId.get(); }
publicjava publicjava.lang.String getName() { if ((fullName)!= null) { return fullName; } if ((preferredEmail)!= null) { return preferredEmail; } return accountId; }
publicjava.lang.String getName() { return fullName; }
private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u,java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.InternalUser) { return serverIdent; } throw newjava.lang.IllegalStateException(); }
public static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u,java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.InternalUser) { return serverIdent; } throw newjava.lang.IllegalStateException(); }
static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u,java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.InternalUser) { return serverIdent; } throw newjava.lang.IllegalStateException(); }
private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u,java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.InternalUser) { return serverIdent; } throw newjava.lang.IllegalStateException(); }
private static org.eclipse.jgit.lib.PersonIdent ident(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String anonymousCowardName, com.google.gerrit.server.CurrentUser u,java.util.Date when) { com.google.gerrit.server.notedb.AbstractChangeUpdate.checkUserType(u); if (u instanceof com.google.gerrit.server.IdentifiedUser) { return noteUtil.newIdent(u.asIdentifiedUser().getAccount(), when, serverIdent); } else if (u instanceof com.google.gerrit.server.InternalUser) { return serverIdent; } throw newjava.lang.IllegalArgumentException(); }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return newjava.util.ArrayList<>(); }java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); com.google.common.collect.BiMap<com.google.gerrit.reviewdb.client.AccountGroup.UUID,java.lang.String> nameMap = com.google.common.collect.HashBiMap.create(); readGroups(repo, refs, problems, byUUID); readGroupNames(repo, refs, problems, nameMap); if (!(problems.isEmpty())) { return problems; } problems = checkGlobalConsistency(byUUID, nameMap); return problems; }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return newjava.util.ArrayList<>(); }java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); com.google.common.collect.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID,java.lang.String> nameMap = com.google.common.collect.HashBiMap.create(); readGroups(repo, refs, problems, byUUID); readGroupNames(repo, refs, problems, nameMap); if (!(problems.isEmpty())) { return problems; } problems = checkGlobalConsistency(byUUID, nameMap); return problems; }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return newjava.util.ArrayList<>(); }java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); com.google.common.collect.BiMap<com.google.gerrit.reviewdb.client.AccountGroup.UUID,java.lang.String> nameMap = com.google.common.collect.HashBiMap.create(); readGroups(repo, refs, problems, byUUID); readGroupNames(repo, refs, problems, nameMap); problems = checkGlobalConsistency(byUUID, nameMap); return problems; }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return newjava.util.ArrayList<>(); }java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); com.google.common.collect.HashMap<com.google.gerrit.reviewdb.client.AccountGroup.UUID,java.lang.String> nameMap = com.google.common.collect.HashBiMap.create(); readGroups(repo, refs, problems, byUUID); readGroupNames(repo, refs, problems, nameMap); if (!(problems.isEmpty())) { return problems; } problems = checkGlobalConsistency(byUUID, nameMap); return problems; }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check(org.eclipse.jgit.lib.Repository repo,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (!(groupsMigration.writeToNoteDb())) { return newjava.util.ArrayList<>(); }java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); com.google.common.collect.BiMap<com.google.gerrit.reviewdb.client.AccountGroup.UUID,java.lang.String> nameMap = com.google.common.collect.HashBiMap.create(); readGroups(repo, refs, problems, byUUID); readGroupNames(repo, refs, problems, nameMap); if (!(problems.isEmpty())) { return problems; } problems = checkGlobalConsistency(byUUID, nameMap); return problems; };
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) {java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> groups = newjava.util.HashMap<>();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = globalChecker.check(repo, groups); if (!(problem.isEmpty())) { return problems; } for (com.google.gerrit.server.group.InternalGroup g : groups.values()) { problems.addAll(checkGroup(g, groups)); } return problems; } }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) {java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> groups = newjava.util.HashMap<>();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = globalChecker.check(repo, groups); if (!(problems.isEmpty())) { return problems; } for (com.google.gerrit.server.group.InternalGroup g : groups.values()) { problems.addAll(checkGroup(g)); } return problems; } }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) {java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> groups = newjava.util.HashMap<>(); for (com.google.gerrit.server.group.InternalGroup g : groups.values()) { problems.addAll(checkGroup(g, groups)); } return problems; } }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return globalChecker.check(repo, groups); } }
publicjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> check() throws com.google.gwtorm.server.OrmException,java.io.IOException { return globalChecker.check(repoManager.openRepository(allUsersName), groups); }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check(org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); if (!(r.problems.isEmpty())) { r.uuidToGroupMap = null; } return r; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check(org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); if (r.problems.isEmpty()) { r.uuidToGroupMap = null; } return r; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check(org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); if (!(r.problems.isEmpty())) { r.uuidsToGroupMap = null; } return r; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check() throwsjava.io.IOException { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); if (!(r.problems.isEmpty())) { r.uuidToGroupMap = null; } return r; }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result check(org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result r = doCheck(repo); r.uuidToGroupMap = null; return r; }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (healthy) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_OK); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.LOG.error("Failed to send error response", e); } } }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (healthy) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_OK); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to send error response", e); } } }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (healthy) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_OK); } else { try { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.HealthServlet.LOG.error("Failed to send error response", e); } } }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (healthy) { try { rsp.sendStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_OK); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.LOG.error("Failed to send error response", e); } } }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (healthy) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_OK); } else { rsp.sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { this.healthy = true; }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throwsjava.io.IOException { this.healthy = true; }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { this.healthy = true; }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throws com.google.gwtorm.server.OrmException { this.healthy = true; }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throwsjava x.servlet.http.HttpServletException { this.healthy = true; }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath(), currentUserProviderMock); }
@org.junit.Before public void setUp() throws throwsjava.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath(), currentUserProviderMock); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath()); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.HealthServlet(tempFolder.getRoot().toPath(), currentUserProviderMock); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Unable to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req, com.ericsson.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req, com.ericsson.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Unable to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(currentUserProvider.get().getCapabilities().canAdministrateServer())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_FORBIDDEN); return; } try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
private void sendError(com.ericsson.plugins.highavailability.health.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to send error response", e); } }
private void sendError(com.gerrit.plugins.highavailability.health.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to send error response", e); } }
private void sendError(com.gerrit.plugins.highavailability.health.HealthServlet.Response rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to send error response", e); } }
private void sendError(com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp, int statusCode) { try { rsp.sendError(statusCode); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to send error response", e); } }
private void sendError(com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp, int statusCode) { rsp.sendError(statusCode); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req, com.ericsson.plugins.highavailability.health.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req, com.ericsson.gerrit.plugins.highavailability.health.HttpServletResponse rsp) { if (!(unhealthyFile.exists())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { this.healthy = false; }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throwsjava.io.IOException { this.healthy = false; }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throws com.google.gwtorm.server.OrmException { this.healthy = false; }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { this.healthy = false; }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throws com.google.gwtorm.server.OrmException,java.io.IOException { this.healthy = false; }
private static int getInt(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Invalid value for {} ; using default value {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve integer value: " + (e.getMessage())), e); return defaultValue; } }
private static int getInt(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Invalid value for {}; using default value {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve integer value: " + (e.getMessage())), e); return defaultValue; } }
private static int getInt(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Invalid value for {} ; using default value {}", section, name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve integer value: " + (e.getMessage())), e); return defaultValue; } }
private static int getInt(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, int defaultValue) { try { return cfg.getInt(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Cannot retrieve integer value for {} ; using default value {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve integer value: " + (e.getMessage())), e); return defaultValue; } }
private static int getInt(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, int defaultValue) { return cfg.getInt(section, name, defaultValue); }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Invalid boolean value for {} ; using default value {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve boolean value: " + (e.getMessage())), e); return defaultValue; } }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Invalid boolean value for {}; using default value {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve boolean value: " + (e.getMessage())), e); return defaultValue; } }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Invalid value for {} ; using default value {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve boolean value: " + (e.getMessage())), e); return defaultValue; } }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, boolean defaultValue) { try { return cfg.getBoolean(section, name, defaultValue); } catch (java.lang.IllegalArgumentException e) { com.ericsson.gerrit.plugins.highavailability.Configuration.log.error("Cannot retrieve boolean value for {} ; using default value {}", name, defaultValue); com.ericsson.gerrit.plugins.highavailability.Configuration.log.debug(("Failed to retrieve boolean value: " + (e.getMessage())), e); return defaultValue; } }
private static boolean getBoolean(org.eclipse.jgit.lib.Config cfg,java.lang.String section,java.lang.String name, boolean defaultValue) { return cfg.getBoolean(section, name, defaultValue); }
private void evictCache(com.google.common.cache.Cache<?,?> cache,java.lang.String cacheName,java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("invalidate all {}", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("invalidate {} from {}", key, cacheName); } }
private void evictCache(com.google.common.cache.Cache<?,?> cache,java.lang.String cacheName,java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("Invalidate all {}", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("Invalidate {} from {}", key, cacheName); } }
private void evictCache(com.google.common.cache.Cache<?,?> cache,java.lang.String cacheName,java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("Cache all {}", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("Cache {} from {}", key, cacheName); } }
private void evictCache(com.google.common.cache.Cache<?,?> cache,java.lang.String cacheName,java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("Including all {}", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("Including {} from {}", key, cacheName); } }
public void evictCache(com.google.common.cache.Cache<?,?> cache,java.lang.String cacheName,java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("invalidate all {}", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug("invalidate {} from {}", key, cacheName); } }
java.lang.String[] getIssueIds(java.lang.String haystack) {java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return newjava.lang.String[]{ }; } com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.log.debug("Checking '{}' against '{}'", pattern.pattern(), haystack);java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet();java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itsConfig.getIssuePatternGroupIndex(); while (matcher.find()) {java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(newjava.lang.String[issues.size()]); }
java.lang.String[] getIssueIds(java.lang.String haystack) {java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return newjava.lang.String[]{ }; } com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.log.debug("Checking '{}' against haystack", pattern.pattern()));java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet();java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itsConfig.getIssuePatternGroupIndex(); while (matcher.find()) {java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(newjava.lang.String[issues.size()]); }
java.lang.String[] getIssueIds(java.lang.String haystack) {java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return newjava.lang.String[]{ }; } com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.log.debug("Checking '{}' against haystack", pattern.pattern());java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet();java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itsConfig.getIssuePatternGroupIndex(); while (matcher.find()) {java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(newjava.lang.String[issues.size()]); }
java.lang.String[] getIssueIds(java.lang.String haystack) {java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return newjava.lang.String[]{ }; } com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.log.debug("Checking '{}' against '{}'", pattern.pattern(), haystack));java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet();java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itsConfig.getIssuePatternGroupIndex(); while (matcher.find()) {java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(newjava.lang.String[issues.size()]); }
java.lang.String[] getIssueIds(java.lang.String haystack) {java.util.regex.Pattern pattern = itsConfig.getIssuePattern(); if (pattern == null) { return newjava.lang.String[]{ }; } com.googlesource.gerrit.plugins.its.base.util.IssueExtractor.log.debug("Checking '{}' against '{}'", pattern.pattern(), haystack);java.util.Set<java.lang.String> issues = com.google.common.collect.Sets.newHashSet();java.util.regex.Matcher matcher = pattern.matcher(haystack); int groupIdx = itsConfig.getIssuePatternGroupIndex(); while (matcher.find()) {java.lang.String issueId = matcher.group(groupIdx); if (!(com.google.common.base.Strings.isNullOrEmpty(issueId))) { issues.add(issueId); } } return issues.toArray(newjava.lang.String[issues.size()])); }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectNK,java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectNK); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.ItsConfig.log.error("Failed to check if {} is enabled for project {}: Project not found", pluginName, projectNK.get()); return false; } if (isEnforcedByAnyParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfgFactory.getFromProjectConfigWithInheritance(projectState, pluginName).getString("enabled", "false")))) && (isEnabledForBranch(projectState, refName)); }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectNK,java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectNK); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.ItsConfig.log.error("failed to check if {} is enabled for project {}: Project not found", pluginName, projectNK.get()); return false; } if (isEnforcedByAnyParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfgFactory.getFromProjectConfigWithInheritance(projectState, pluginName).getString("enabled", "false")))) && (isEnabledForBranch(projectState, refName)); }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectNK,java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectNK); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.ItsConfig.log.error("Failed to check if {} is enabled for project {}: Project not found", pluginName, projectNK.get(), projectNK.get()); return false; } if (isEnforcedByAnyParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfgFactory.getFromProjectConfigWithInheritance(projectState, pluginName).getString("enabled", "false")))) && (isEnabledForBranch(projectState, refName)); }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectNK,java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectNK); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.ItsConfig.log.error("Unable to check if {} is enabled for project {}: Project not found", pluginName, projectNK.get()); return false; } if (isEnforcedByAnyParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfgFactory.getFromProjectConfigWithInheritance(projectState, pluginName).getString("enabled", "false")))) && (isEnabledForBranch(projectState, refName)); }
public boolean isEnabled(com.google.gerrit.reviewdb.client.Project.NameKey projectNK,java.lang.String refName) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectNK); if (projectState == null) { com.googlesource.gerrit.plugins.its.base.its.ItsConfig.log.error("failed to check if {} is enabled for project {}: Project not found", pluginName, projectNK.get(), projectNK.get()); return false; } if (isEnforcedByAnyParentProject(refName, projectState)) { return true; } return (!("false".equals(pluginCfgFactory.getFromProjectConfigWithInheritance(projectState, pluginName).getString("enabled", "false")))) && (isEnabledForBranch(projectState, refName)); }
@org.junit.Test public void rebuild() throwsjava.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id);java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "").getEntityContent()).isEqualTo("No differences between ReviewDb and NoteDb"); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.db.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(newBundle.group()).isEqualTo(oldBundle.group()); assertThat(newBundle.members()).isEqualTo(oldBundle.members()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.byId()).isEqualTo(oldBundle.byId()); assertThat(newBundle.byIdAudit()).isEqualTo(oldBundle.byIdAudit()); } }
@org.junit.Test public void rebuild() throwsjava.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id);java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "").getEntityContent()).isEqualTo("No differences between ReviewDb and NoteDb"); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.db.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(newBundle.group()).isEqualTo(oldBundle.group()); assertThat(newBundle.members()).isEqualTo(oldBundle.members()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.byId()).isEqualTo(oldBundle.byId()); assertThat(newBundle.byAudit()).isEqualTo(oldBundle.byIdAudit()); } }
@org.junit.Test public void rebuild() throwsjava.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id);java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "").getEntityContent()).isEqualTo("No differences between ReviewDb and NoteDb"); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.db.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(newBundle.group()).isEqualTo(oldBundle.group()); assertThat(newBundle.members()).isEqualTo(oldBundle.members()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.byId()).isEqualTo(oldBundle.byId()); assertThat(newBundle.byIdAudit()).isEqualTo(oldBundle.byIdAudit()); } }
@org.junit.Test public void rebuild() throwsjava.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id);java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK(("/groups/" + uuid) + "/rebuild"), "").getEntityContent()).isEqualTo("No differences between ReviewDb and NoteDb"); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.db.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(newBundle.group()).isEqualTo(oldBundle.group()); assertThat(newBundle.members()).isEqualTo(oldBundle.members()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.byId()).isEqualTo(oldBundle.byId()); assertThat(newBundle.byIdAudit()).isEqualTo(oldBundle.byIdAudit()); } }
@org.junit.Test public void rebuild() throwsjava.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id);java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "").getEntityContent()).isEqualTo("No differences between ReviewDb and NoteDb"); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.db.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(newBundle.group()).isEqualTo(oldBundle.group()); assertThat(newBundle.members()).isEqualTo(oldBundle.members()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.byId()).isEqualTo(oldBundle.byId()); assertThat(newBundle.byIdAudit()).isEqualTo(oldBundle.byIdAudit()); } }
java.lang.String getCommentChangeEvent(java.lang.String action,java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = "";java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get( "changeNumber")); if (!(changeNumber.isEmpty())) { changeNumber += " ( " + changeNumber) + action; }java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += " by " + submitter; }java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get( "subject")); if (!(subject.isEmpty())) { ret += ":\n" + subject; }java.lang.String reason = com.google.common.base.Strings.nullToEmpty(map.get( "reason")); if (!(reason.isEmpty())) { ret += "\n\nReason:\n" + reason; }java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get( "changeUrl")); if (!(url.isEmpty())) { ret += "\n\n" + (its.createLinkForWebui(url, url)); } return ret; }
java.lang.String getCommentChangeEvent(java.lang.String action,java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = "";java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get( "changeNumber")); if (!(changeNumber.isEmpty())) { changeNumber += " ( " + changeNumber) + action;java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += " by " + submitter; }java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get( "subject")); if (!(subject.isEmpty())) { ret += ":\n" + subject; }java.lang.String reason = com.google.common.base.Strings.nullToEmpty(map.get( "reason")); if (!(reason.isEmpty())) { ret += "\n\nReason:\n" + reason; }java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get( "changeUrl")); if (!(url.isEmpty())) { ret += "\n\n" + (its.createLinkForWebui(url, url)); } return ret; } }
java.lang.String getCommentChangeEvent(java.lang.String action,java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = "";java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get( "changeNumber")); if (!(changeNumber.isEmpty())) { changeNumber += " ( ") + action; }java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += " by " + submitter; }java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get( "subject")); if (!(subject.isEmpty())) { ret += ":\n" + subject; }java.lang.String reason = com.google.common.base.Strings.nullToEmpty(map.get( "reason")); if (!(reason.isEmpty())) { ret += "\n\nReason:\n" + reason; }java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get( "changeUrl")); if (!(url.isEmpty())) { ret += "\n\n" + (its.createLinkForWebui(url, url)); } return ret; }
java.lang.String getCommentChangeEvent(java.lang.String action,java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = "";java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get( "changeNumber")); if (!(changeNumber.isEmpty())) { changeNumber += " ( " + changeNumber) + action;java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += " by " + submitter; }java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get( "subject")); if (!(subject.isEmpty())) { ret += ":\n" + subject; }java.lang.String reason = com.google.common.base.Strings.nullToEmpty(map.get( "reason")); if (!(reason.isEmpty())) { ret += "\n\nReason:\n" + reason; }java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get( "changeUrl")); if (!(url.isEmpty())) { ret += "\n\n" + (its.createLinkForWebui(url, url)); } return ret; }
javajava.lang.String getCommentChangeEvent(java.lang.String action,java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = "";java.lang.String changeNumber = com.google.common.base.Strings.nullToEmpty(map.get( "changeNumber")); if (!(changeNumber.isEmpty())) { changeNumber += " ( " + changeNumber) + action;java.lang.String submitter = formatPerson(prefix, map); if (!(submitter.isEmpty())) { ret += " by " + submitter; }java.lang.String subject = com.google.common.base.Strings.nullToEmpty(map.get( "subject")); if (!(subject.isEmpty())) { ret += ":\n" + subject; }java.lang.String reason = com.google.common.base.Strings.nullToEmpty(map.get( "reason")); if (!(reason.isEmpty())) { ret += "\n\nReason:\n" + reason; }java.lang.String url = com.google.common.base.Strings.nullToEmpty(map.get( "changeUrl")); if (!(url.isEmpty())) { ret += "\n\n" + (its.createLinkForWebui(url, url)); } return ret; }
java privatejava.lang.String formatPerson(java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Name"))); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Username"))); } return ret; }
privatejava.lang.String formatPerson(java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Name"))); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Username"))); } return ret; }
javajava privatejava.lang.String formatPerson(java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Name"))); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get((prefix + "Username"))); } return ret; }
java privatejava.lang.String formatPerson(java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get(prefix + "Name"))); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get(prefix + "Username"))); } return ret; }
privatejava.lang.String formatPerson(java.lang.String prefix,java.util.Map<java.lang.String,java.lang.String> map) {java.lang.String ret = com.google.common.base.Strings.nullToEmpty(map.get(prefix + "Name"))); if (ret.isEmpty()) { ret = com.google.common.base.Strings.nullToEmpty(map.get(prefix + "Username"))); } return ret; }
java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && (projectState!= null)) {java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((("Project " + (c.project())) + " has wrong ") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + " name) + " for ") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }
java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && (projectState!= null)) {java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("")) { com.googlesource.gerrit.plugins.findowners.Config.log.error((((((("Change " + (c.project())) + " has wrong ") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + " name) + " for ") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }
java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && (projectState!= null)) {java.lang.String name = com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); if (name.trim().equals("")) { com.googlesource.gerrit.plugins.findowners.Config.log.error(((((("Change " + (c.project())) + " has wrong ") + (com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME)) + " name) + " for ") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; } return name; } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }
java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && (projectState!= null)) { return com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS; }
java.lang.String getOwnersFileName(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) { if (((com.googlesource.gerrit.plugins.findowners.Config.config)!= null) && (projectState!= null)) { return com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getString(com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME, com.googlesource.gerrit.plugins.findowners.Config.OWNERS); } return com.googlesource.gerrit.plugins.findowners.Config.OWNERS_FILE_NAME; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } return shouldReplicate(projectState, userProvider.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("Replication project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } return false; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } return shouldReplicate(projectState, userProvider.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } return false; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } return shouldReplicate(projectState, userProvider.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("Replication project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } return shouldReplicate(projectState, userProvider.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (java.io.IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } return shouldReplicate(projectState, userProvider.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("Replication of project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } }
java.util.regex.Pattern getIssuePattern() {java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.its.FluentIterable.from(getCommentLinkInfo(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.its.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.googlesource.gerrit.plugins.its.base.its.Function<com.google.gerrit.extensions.api.projects.CommentLinkInfo,java.lang.String>() { @java.lang.Override publicjava.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; } }).last();java.lang.String defPattern = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return defPattern!= null? defPattern : null; }
java.util.regex.Pattern getIssuePattern() {java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.its.FluentIterable.from(getCommentLinkInfo(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.its.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.googlesource.gerrit.plugins.its.base.its.Function<com.google.gerrit.extensions.api.projects.CommentLinkInfo,java.lang.String>() { @java.lang.Override publicjava.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; } }).last();java.lang.String defPattern = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return newjava.util.regex.Pattern(defPattern); }
javajava.util.regex.Pattern getIssuePattern() {java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.its.FluentIterable.from(getCommentLinkInfo(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.its.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.googlesource.gerrit.plugins.its.base.its.Function<com.google.gerrit.extensions.api.projects.CommentLinkInfo,java.lang.String>() { @java.lang.Override publicjava.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; } }).last();java.lang.String defPattern = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return defPattern!= null? defPattern : null; }
java.util.regex.Pattern getIssuePattern() {java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.its.FluentIterable.from(getCommentLinkInfo(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.its.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.googlesource.gerrit.plugins.its.base.its.Function<com.google.gerrit.extensions.api.projects.CommentLinkInfo,java.lang.String>() { @java.lang.Override publicjava.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; } }).last();java.lang.String defPattern = gerritConfig.getString("commentlink", getCommentLinkName(), "match"); return (defPattern!= null)? defPattern : null; }
java.util.regex.Pattern getIssuePattern() {java.util.Optional<java.lang.String> match = com.googlesource.gerrit.plugins.its.base.its.FluentIterable.from(getCommentLinkInfo(getCommentLinkName())).filter(new com.googlesource.gerrit.plugins.its.base.its.Predicate<com.google.gerrit.extensions.api.projects.CommentLinkInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return ((input.match)!= null) && (!(input.match.trim().isEmpty())); } }).transform(new com.googlesource.gerrit.plugins.its.base.its.Function<com.google.gerrit.extensions.api.projects.CommentLinkInfo,java.lang.String>() { @java.lang.Override publicjava.lang.String apply(com.google.gerrit.extensions.api.projects.CommentLinkInfo input) { return input.match; } }).last(); return match; }
java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) {java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patchSetNumber",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("createdOn", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions",java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions",java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); return properties; }
publicjava.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) {java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patchSetNumber",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("createdOn", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions",java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions",java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); return properties; }
javajava.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) {java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patchSetNumber",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("createdOn", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions",java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions",java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); return properties; }
java publicjava.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) {java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patchSetNumber",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("createdOn", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions",java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions",java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); return properties; }
javajava publicjava.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) {java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patchSetNumber",java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("createdOn", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions",java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions",java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); return properties; }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.db.GroupBundle reviewDbBundle, com.google.gerrit.server.group.db.GroupBundle noteDbBundle) { return com.google.gerrit.server.group.db.GroupBundle.compare(reviewDbBundle, noteDbBundle, true); }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.db.GroupBundle reviewDbBundle, com.google.gerrit.server.group.db.GroupBundle noteDbBundle) { return com.google.gerrit.server.group.db.GroupBundle.compare(reviewDbBundle, noteDbBundle, false); }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.db.GroupBundle reviewDbBundle, com.google.gerrit.server.group.db.GroupBundle noteDbBundle) { return com.google.gerrit.server.group.db.GroupBundle.compare(reviewDbBundle, noteDbBundle); }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.db.GroupBundle reviewDbBundle, com.google.gerrit.server.group.db.GroupBundle noteDbBundle) { return com.google.gerrit.server.group.db.GroupBundle.compare(reviewDbBundle, noteDbBundle.getReviewDb()); }
public static com.google.common.collect.ImmutableList<java.lang.String> compare(com.google.gerrit.server.group.db.GroupBundle reviewDbBundle, com.google.gerrit.server.group.db.GroupBundle noteDbBundle) { return com.google.gerrit.server.group.db.GroupBundle.compare(reviewDbBundle, noteDbBundle.getReviewDbBundle()); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.IOException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewerWithoutPermissionCheck(notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewerWithoutPermissionCheck(notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewerWithoutPermissionCheck(notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.IOException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewerWithPermissionCheck(notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.IOException, com.google.gerrit.server.project.NoSuchProjectException { if (canRemoveReviewerWithoutPermissionCheck(notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REVIEWER); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.IOException, com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, reviewer, 0); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, reviewer, 0); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, reviewer, null); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.IOException, com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, reviewer, 0); }
public void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer) throws com.google.gerrit.server.project.NoSuchProjectException { checkRemoveReviewer(notes, currentUser, reviewer, 0); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { assertThat(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HEALTH_CHECK_ENABLED)).isFalse(); initializeConfiguration(); assertThat(configuration.healthCheck().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_HEALTH_CHECK_ENABLED)).thenReturn(false); initializeConfiguration(); assertThat(configuration.healthCheck().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { assertThat(configuration.healthCheck().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { initializeConfiguration(); assertThat(configuration.healthCheck().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { initializeConfiguration(); assertThat(configuration.healthCheck().enabled()).isTrue(); }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { afterTest(); } } }; }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try { com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers); base.evaluate(); } finally { afterTest(); } } }; }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allUsers)) { base.evaluate(); } finally { afterTest(); } } }; }
public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { afterTest(); } } }; }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { return new org.junit.runners.model.Statement() { @java.lang.Override public void evaluate() throwsjava.lang.Throwable { com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers); base.evaluate(); } }; }
protected com.google.gerrit.acceptance.ProjectConfigResetter resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throwsjava.lang.Exception { return new com.google.gerrit.acceptance.ProjectConfigResetter(repoManager, metaDataUpdateFactory, projectCache, projects); }
private com.google.gerrit.acceptance.ProjectConfigResetter resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throwsjava.lang.Exception { return new com.google.gerrit.acceptance.ProjectConfigResetter(repoManager, metaDataUpdateFactory, projectCache, projects); }
protected com.google.gerrit.acceptance.ProjectConfigResetter resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.acceptance.ProjectConfigResetter(repoManager, metaDataUpdateFactory, projectCache, projects); }
protected com.google.gerrit.acceptance.ProjectConfigResetter resetProjects(com.google.gerrit.reviewdb.client.Project... projects) { return new com.google.gerrit.acceptance.ProjectConfigResetter(repoManager, metaDataUpdateFactory, projectCache, projects); }
protected com.google.gerrit.acceptance.ProjectConfigResetter resetProjects(com.google.gerrit.reviewdb.client.Project... projects) throws com.google.gerrit.extensions.restapi.RestApiException { return new com.google.gerrit.acceptance.ProjectConfigResetter(repoManager, metaDataUpdateFactory, projectCache, projects); }
@java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { afterTest(); } }
java @java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { afterTest(); } }
@java @java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers)) { base.evaluate(); } finally { afterTest(); } }
@java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try { com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allProjects, allUsers); base.evaluate(); } finally { afterTest(); } }
@java.lang.Override public void evaluate() throwsjava.lang.Throwable { if ((com.google.gerrit.acceptance.AbstractDaemonTest.firstTest) == null) { com.google.gerrit.acceptance.AbstractDaemonTest.firstTest = description; } beforeTest(description); try (com.google.gerrit.acceptance.ProjectConfigResetter resetter = resetProjects(allUsers)) { base.evaluate(); } finally { afterTest(); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.common.data.GroupReference> groupReferences = com.google.common.collect.ImmutableSet.builder();java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID,java.lang.String> uuidMap = newjava.util.HashMap<>();java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.UUID> nameMap = newjava.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); groupReferences.add(groupReference); com.google.gerrit.server.group.db.GroupNameNotes.checkConsistency(groupReference, uuidMap, nameMap); } return groupReferences.build(); } }
private static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.common.data.GroupReference> groupReferences = com.google.common.collect.ImmutableSet.builder();java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID,java.lang.String> uuidMap = newjava.util.HashMap<>();java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.UUID> nameMap = newjava.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); groupReferences.add(groupReference); com.google.gerrit.server.group.db.GroupNameNotes.checkConsistency(groupReference, uuidMap, nameMap); } return groupReferences.build(); } }
static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.common.data.GroupReference> groupReferences = com.google.common.collect.ImmutableSet.builder();java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID,java.lang.String> uuidMap = newjava.util.HashMap<>();java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.UUID> nameMap = newjava.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); groupReferences.add(groupReference); com.google.gerrit.server.group.db.GroupNameNotes.checkConsistency(groupReference, uuidMap, nameMap); } return groupReferences.build(); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.common.data.GroupReference> groupReferences = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); groupReferences.add(groupReference); com.google.gerrit.server.group.db.GroupNameNotes.checkConsistency(groupReference, uuidMap, nameMap); } return groupReferences.build(); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.common.data.GroupReference> groupReferences = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); groupReferences.add(groupReference); com.google.gerrit.server.group.db.GroupNameNotes.checkConsistency(groupReference, uuidMap, nameMap); } return groupReferences.build(); } }
public static com.google.gerrit.server.group.db.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupCreation.getGroupUUID()); groupConfig.load(repository); groupConfig.setGroupCreation(groupCreation); return groupConfig; }
public static com.google.gerrit.server.group.db.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupCreation.getGroupUUID(), repository); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.db.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.group.db.GroupConfig(groupCreation.getGroupUUID(), repository); }
public static com.google.gerrit.server.group.db.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return createForNewGroup(repository, groupCreation); }
public static com.google.gerrit.server.group.db.GroupConfig createForNewGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.group.db.GroupConfig(groupCreation.getGroupUUID(), repository, groupCreation); }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid, repository); return groupConfig; }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(); groupConfig.load(repository); return groupConfig; }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.group.db.GroupConfig(groupUuid, repository); }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = load(repository); return groupConfig; }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroup(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return load(repository, groupUuid); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.ifPresent(( t) -> checkConsistencyWithGroupNameNotes(t)); return loadedGroup; }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); return loadedGroup.ifPresent(( t) -> checkConsistencyWithGroupNameNotes(t)); }
java publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.ifPresent(( t) -> checkConsistencyWithGroupNameNotes(t)); return loadedGroup; }
java publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); return loadedGroup.ifPresent(( t) -> checkConsistencyWithGroupNameNotes(t)); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.ifPresent(t -> checkConsistencyWithGroupNameNotes(t)); return loadedGroup; }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository, commitId); return groupConfig; }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid, repository, commitId); return groupConfig; }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(); groupConfig.load(repository, commitId); return groupConfig; }
public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.group.db.GroupConfig(groupUuid, repository); }
public static void loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository, commitId); }
privatejava.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) { return groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new); }
privatejava.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) {java.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new); return group; }
privatejava.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) {java.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new); if (!(group.isPresent())) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("Group %s (%s) from group name notes is failed to load from group ref", groupReference.getUUID(), group.getName()); } return group; }
privatejava.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) {java.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new); if (!(group.isPresent())) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("Group %s (%s) from group name notes is failed to load from group ref", group.getUUID(), group.getGroupName(), group.getGroupName()); } return group; }
privatejava.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> loadGroup(com.google.gerrit.common.data.GroupReference groupReference) {java.util.Optional<com.google.gerrit.common.data.GroupDescription.Internal> group = groupCache.get(groupReference.getUUID()).map(InternalGroupDescription::new); if (!(group.isPresent())) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("Group %s (%s) from group name notes is failed to load from group ref", groupReference.getUUID(), group.getGroupName(), group.getGroupName()); } return group; }
privatejava.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("suggest should only have no more than one --project and -n with --suggest"); }java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().orElse(null)), ((limit) <=? 10 :java.lang.Math.min(limit, 10))));java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(options).format(desc)); } else if ((groupBackend) instanceof com.google.gerrit.server.account.InternalGroupBackend) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("Group %s (%s) from group name notes is failed to load from group ref", ref.getName(), ref.getUUID()); } } return groupInfos; }
privatejava.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("suggest should only have no more than one --project and -n with --suggest"); }java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().orElse(null)), ((limit) <=? 10 :java.lang.Math.min(limit, 10))));java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(options).format(desc)); } else if ((groupBackend) instanceof com.google.gerrit.server.account.InternalGroupBackend) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("group %s (%s) from group name notes is failed to load from group ref", ref.getName(), ref.getUUID()); } } return groupInfos; }
privatejava.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group should only have no more than one --project and -n with --suggest"); }java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().orElse(null)), ((limit) <=? 10 :java.lang.Math.min(limit, 10))));java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(options).format(desc)); } else if ((groupBackend) instanceof com.google.gerrit.server.account.InternalGroupBackend) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("Group %s (%s) from group name notes is failed to load from group ref", ref.getName(), ref.getUUID()); } } return groupInfos; }
java privatejava.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("suggest should only have no more than one --project and -n with --suggest"); }java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().orElse(null)), ((limit) <=? 10 :java.lang.Math.min(limit, 10))));java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(options).format(desc)); } else if ((groupBackend) instanceof com.google.gerrit.server.account.InternalGroupBackend) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("Group %s (%s) from group name notes is failed to load from group ref", ref.getName(), ref.getUUID()); } } return groupInfos; }
privatejava.util.List<com.google.gerrit.extensions.common.GroupInfo> suggestGroups() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (conflictingSuggestParameters()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("suggest should only have no more than one --project and -n with --suggest"); }java.util.List<com.google.gerrit.common.data.GroupReference> groupRefs = com.google.common.collect.Lists.newArrayList(com.google.common.collect.Iterables.limit(groupBackend.suggest(suggest, projects.stream().findFirst().orElse(null)), ((limit) <= 0? 10 :java.lang.Math.min(limit, 10))));java.util.List<com.google.gerrit.extensions.common.GroupInfo> groupInfos = com.google.common.collect.Lists.newArrayListWithCapacity(groupRefs.size()); for (com.google.gerrit.common.data.GroupReference ref : groupRefs) { com.google.gerrit.common.data.GroupDescription.Basic desc = groupBackend.get(ref.getUUID()); if (desc!= null) { groupInfos.add(json.addOptions(options).format(desc)); } else if ((groupBackend) instanceof com.google.gerrit.server.account.InternalGroupBackend) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("Group %s (%s) from group name notes is failed to load from group ref", ref.getName(), ref.getUUID()); } } return groupInfos; }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails emails) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(projectState, accountCache, emails, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(projectState); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace(("Found db key = " + (db.key))); return findApproval(accountCache, db); }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails emails) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(projectState, accountCache, emails, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(projectState); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace(("Findowners db key = " + (db.key))); return findApproval(accountCache, db); }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails emails) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(projectState, accountCache, emails, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(projectState); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace(("Find approvals db key = " + (db.key))); return findApproval(accountCache, db); }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails emails) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(projectState, accountCache, emails, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(projectState); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace(("Finding db key = " + (db.key))); return findApproval(accountCache, db); }
int findApproval(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Emails emails) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(projectState, accountCache, emails, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(projectState); } return findApproval(accountCache, db); }
int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null)? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); }
public int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null)? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); }
static int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null)? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); }
int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null)? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); } }
static int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null)? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); } }
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throwsjava.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE);java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (tagger!= null? newjava.sql.Timestamp(tagger.getWhen().getTime()) : null), (webLinks.isEmpty()? null : webLinks)); }java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit)? newjava.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, timestamp, (webLinks.isEmpty()? null : webLinks)); }
static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throwsjava.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE);java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (tagger!= null? newjava.sql.Timestamp(tagger.getWhen().getTime()) : null), (webLinks.isEmpty()? null : webLinks)); }java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit)? newjava.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, timestamp, (webLinks.isEmpty()? null : webLinks)); }
private static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throwsjava.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE);java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (tagger!= null? newjava.sql.Timestamp(tagger.getWhen().getTime()) : null), (webLinks.isEmpty()? null : webLinks)); }java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit)? newjava.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, timestamp, (webLinks.isEmpty()? null : webLinks)); }
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throwsjava.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE);java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.CommonConverters.toGitPerson(tagger)) : null), canDelete, (tagger!= null? newjava.sql.Timestamp(tagger.getWhen().getTime()) : null), (webLinks.isEmpty()? null : webLinks)); }java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit)? newjava.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, timestamp, (webLinks.isEmpty()? null : webLinks)); }
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throwsjava.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE);java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger!= null? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (tagger!= null? newjava.sql.Timestamp(tagger.getWhen().getTime()) : null), (webLinks.isEmpty()? null : webLinks)); }java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit)? newjava.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, timestamp, (webLinks.isEmpty())? null : webLinks); }
@org.junit.Test public void lightweightTag() throwsjava.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = "v1.0"; input.revision = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r))); input.ref = "refs/tags/v2.0"; result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(input.ref); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r))); setApiUser(user); result = tag(input.ref).get(); assertThat(result.canDelete).isFalse(); eventRecorder.assertRefUpdatedEvents(project.get(), result.ref, null, result.revision); }
@org.junit.Test public void lightweightTag() throwsjava.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = "v1.0"; input.revision = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r)); input.ref = "refs/tags/v2.0"; result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(input.ref); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r))); setApiUser(user); result = tag(input.ref).get(); assertThat(result.canDelete).isFalse(); eventRecorder.assertRefUpdatedEvents(project.get(), result.ref, null, result.revision); }
@org.junit.Test public void lightweightTag() throwsjava.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = "v1.0"; input.revision = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r)); input.ref = "refs/tags/v2.0"; result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(input.ref); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r)); setApiUser(user); result = tag(input.ref).get(); assertThat(result.canDelete).isFalse(); eventRecorder.assertRefUpdatedEvents(project.get(), result.ref, null, result.revision); }
@org.junit.Test public void lightweightTag() throwsjava.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = "v1.0"; input.revision = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r))); input.ref = "refs/tags/v2.0"; result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(input.ref); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r)); setApiUser(user); result = tag(input.ref).get(); assertThat(result.canDelete).isFalse(); eventRecorder.assertRefUpdatedEvents(project.get(), result.ref, null, result.revision); }
@org.junit.Test public void lightweightTag() throwsjava.lang.Exception { grantTagPermissions(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/heads/master"); r.assertOkStatus(); com.google.gerrit.extensions.api.projects.TagInput input = new com.google.gerrit.extensions.api.projects.TagInput(); input.ref = "v1.0"; input.revision = r.getCommit().getName(); com.google.gerrit.extensions.api.projects.TagInfo result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(((R_TAGS) + (input.ref))); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isFalse(); assertThat(result.created).isEqualTo(timestamp(r)); input.ref = "refs/tags/v2.0"; result = tag(input.ref).create(input).get(); assertThat(result.ref).isEqualTo(input.ref); assertThat(result.revision).isEqualTo(input.revision); assertThat(result.canDelete).isTrue(); assertThat(result.created).isEqualTo(timestamp(r))); setApiUser(user); result = tag(input.ref).get(); assertThat(result.canDelete).isFalse(); eventRecorder.assertRefUpdatedEvents(project.get(), result.ref, null, result.revision); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.account = account; this.registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.account = checkNotNull(account); this.registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount =java.util.Optional.of(account); this.registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount = account; this.registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount =java.util.Optional.of(account); this.registeredBy = account.getRegisteredBy(); }
@com.google.gerrit.common.Nullablejava.util.Optional<com.google.gerrit.reviewdb.client.Account> getLoadedAccount() { checkLoaded(); return loadedAccount; }
@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account getLoadedAccount() { checkLoaded(); return loadedAccount; }
@com.google.gerrit.common.Nullable publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account> getLoadedAccount() { return loadedAccount; }
@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account getLoadedAccount() { checkLoaded(); return loadedAccount; }
@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account getAccount() { checkLoaded(); return account; }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(cfg, revision.name())); } isLoaded = true; }
java @java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(cfg, revision.name())); } isLoaded = true; }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = rw.next().getCommitTime(); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(cfg, revision.name())); } isLoaded = true; }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(cfg, revision.name())); } isLoaded = true; }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config cfg = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(cfg, revision.name()); } isLoaded = true; }
privatejava.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByIdByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException {java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> r = newjava.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }
privatejava.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException {java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> r = newjava.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }
publicjava.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByIdByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException {java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> r = newjava.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch)) { r.put(cd.change().getId(), cd.notes()); } return r; }
privatejava.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByIdByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException {java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> r = newjava.util.HashMap<>(); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchOpen(branch))) { r.put(cd.change().getId(), cd.notes()); } return r; }
privatejava.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.notedb.ChangeNotes> openChangesByIdByBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) throws com.google.gwtorm.server.OrmException { return openChangesByIdByBranch(branch, null); }
@org.junit.Test public void testErrorDuringTransitionToHealty() throwsjava.io.IOException {java.nio.file.Files.createFile(tempFolder.newFolder("unhealthy.txt").toPath().resolve("child"));java x.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToHealty() throwsjava.io.IOException {java.nio.file.Files.createFile(tempFolder.newFolder("unhealthy.txt").toPath().resolve("child"));java x.servlet.http.HttpServletResponse responseMock = mock(java.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToHealty() throwsjava.io.IOException {java.nio.file.Files.createFile(tempFolder.newFolder("unhealthy.txt").toPath().resolve("child"));java.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToHealty() throwsjava.io.IOException {java.nio.file.Files.createFile(tempFolder.newFolder("unhealthy.txt").toPath().resolve("child"));java.servlet.http.HttpServletResponse responseMock = mock(java.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToHealty() throwsjava.io.IOException {java.nio.file.Files.createFile(tempFolder.newFolder("unhealthy.txt").toPath().resolve("child"));java.nio.file.Files.createFile(tempFolder.newFolder("unhealthy.txt").toPath().resolve("child"));java x.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doPost(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (unhealthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (healthyFile.exists()) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (!(unhealthyFile.exists())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (!(healthyFile.exists())) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { if (unhealthyFile.exists()) { rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_SERVICE_UNAVAILABLE); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@org.junit.Test public void testErrorDuringTransitionToUnhealty() throwsjava.io.IOException { tempFolder.delete();java x.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToUnhealty() throwsjava.io.IOException { tempFolder.delete();java x.servlet.http.HttpServletResponse responseMock = mock(java.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToUnhealty() throwsjava.io.IOException { tempFolder.delete();java x.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); assertThat(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToUnhealty() throwsjava.io.IOException { tempFolder.delete();java x.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(((com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR) + " error"); }
@org.junit.Test public void testErrorDuringTransitionToUnhealty() throwsjava.io.IOException { tempFolder.delete();java x.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(((com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR) + "\n")); }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Unable to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("failed to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Error to set healthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { setHealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath()); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot()); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(TempFolder.getRoot().toPath()); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath(), healthServlet); }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Unable to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { setUnhealthy() ; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("failed to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override protected void doDelete(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) throwsjava.io.IOException { try { setUnhealthy(); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.health.HealthServlet.log.error("Failed to set unhealthy", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); } }
@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullablejava.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return calculatePureRevert.get(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute pure revert", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullablejava.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return calculatePureRevert.getPureRevert(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute pure revert", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullablejava.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return calculatePureRevert.getureRevert(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute pure revert", e); } }
@java @java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullablejava.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return calculatePureRevert.getPureRevert(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute pure revert", e); } }
@java @java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert(@com.google.gerrit.common.Nullablejava.lang.String claimedOriginal) throws com.google.gerrit.extensions.restapi.RestApiException { try { return calculatePureRevert.get(change.getNotes(), claimedOriginal); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot compute pure revert", e); } }
@com.google.gerrit.common.Nullable publicjava.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes(), null).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException("Could not compute pure revert", e); } }
@com.google.gerrit.common.Nullable publicjava.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes, null).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException("Could not compute pure revert", e); } }
@com.google.gerrit.common.Nullable publicjava.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes()).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException("Could not compute pure revert", e); } }
@com.google.gerrit.common.Nullable publicjava.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes(), null).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException("Cannot not compute pure revert", e); } }
@com.google.gerrit.common.Nullable publicjava.lang.Boolean isPureRevert() throws com.google.gwtorm.server.OrmException { if ((change().getRevertOf()) == null) { return null; } try { return pureRevert.getPureRevert(notes, null).isPureRevert; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gwtorm.server.OrmException("Cannot not compute pure revert", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException { return calculatePureRevert.get(rsrc.getNotes(), claimedOriginal); }
@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException { return calculatePureRevert(rsrc.getNotes(), claimedOriginal); }
@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException,java.io.IOException { return calculatePureRevert.apply(rsrc.getNotes()); }
@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException { return calculatePureRevert.apply(rsrc.getNotes(), claimedOriginal); }
@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException { return calculatePureRevert.getPureRevert(rsrc.getNotes(), claimedOriginal); }
private void setUp(java.lang.Object target) throwsjava.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); injector.injectMembers(target); }
void setUp(java.lang.Object target) throwsjava.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); injector.injectMembers(target); }
private void setUp(finaljava.lang.Object target) throwsjava.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); injector.injectMembers(target); }
private void setUp(java.lang.Object target) throwsjava.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); }
private void setUp(finaljava.lang.Object target) throwsjava.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); }
@org.junit.Test public void testErrorDuringTransitionToUnHealthy() throwsjava.io.IOException { tempFolder.delete();java x.servlet.http.HttpServletResponse responseMock = mock(java.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToUnHealthy() throwsjava.io.IOException { tempFolder.delete();java x.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToUnHealthy() throwsjava.io.IOException { tempFolder.delete();java.servlet.http.HttpServletResponse responseMock = mock(java.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToUnHealthy() throwsjava.io.IOException { tempFolder.delete();java.servlet.http.HttpServletResponse responseMock = mock(java x.servlet.http.HttpServletResponse.class); servlet.doDelete(null, responseMock); verify(responseMock).sendError(com.ericsson.gerrit.plugins.highavailability.health.SC_INTERNAL_SERVER_ERROR); }
@org.junit.Test public void testErrorDuringTransitionToUnHealthy() throwsjava.io.IOException { tempFolder.delete(); }
privatejava.lang.String getProtocolStack(org.eclipse.jgit.lib.Config cfg, SitePaths site) {java.lang.String location = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROTOCOL_STACK_KEY); if (location == null) { return null; }java.nio.file.Path p =java.nio.file.Paths.get(location); if (p.isAbsolute()) { return location; } return site.etc_dir.resolve(location).toString(); }
private staticjava.lang.String getProtocolStack(org.eclipse.jgit.lib.Config cfg, SitePaths site) {java.lang.String location = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROTOCOL_STACK_KEY); if (location == null) { return null; }java.nio.file.Path p =java.nio.file.Paths.get(location); if (p.isAbsolute()) { return location; } return site.etc_dir.resolve(location).toString(); }
privatejava.lang.String getProtocolStack(org.eclipse.jgit.lib.Config cfg, SitePaths site) {java.lang.String location = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROTOCOL_STACK_KEY); if (location == null) { return null; }java.nio.file.Path p =java.nio.file.Paths.get(location); if (!(p.isAbsolute())) { return location; } return site.etc_dir.resolve(location).toString(); }
privatejava.lang.String getProtocolStack(org.eclipse.jgit.lib.Config cfg, SitePaths site) {java.lang.String location = cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROTOCOL_STACK_KEY); if (location == null) { return null; }java.nio.file.Path p =java.nio.file.Paths.get(location); if (p.isAbsolute()) { return location; } return site.etc_dir.resolve(location).get(); }
privatejava.lang.String getProtocolStack(org.eclipse.jgit.lib.Config cfg, SitePaths site) { return cfg.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PROTOCOL_STACK_KEY); }
publicjava.lang.String protocolStack() { return protocolStack; }
@com.google.gerrit.common.Nullablejava.lang.String protocolStack() { return protocolStack; }
publicjava.lang.String protocolStack() { return this.protocolStack; }
publicjava.lang.String protocolStack() { return (protocolStack!= null? protocolStack : null); }
publicjava.lang.String protocolStack();
private org.jgroups.JChannel getChannel() {java.lang.String protocolStack = ""; try { protocolStack = jgroupsConfig.protocolStack(); return protocolStack == null? new org.jgroups.JChannel() : new org.jgroups.JChannel(protocolStack); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("Unable to create a new channel with {}", protocolStack, e); return null; } }
private org.jgroups.JChannel getChannel() {java.lang.String protocolStack = ""; try { protocolStack = jgroupsConfig.protocolStack(); return protocolStack == null? null : new org.jgroups.JChannel(protocolStack); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("Unable to create a new channel with {}", protocolStack, e); return null; } }
private org.jgroups.JChannel getChannel() {java.lang.String protocolStack = ""; try { protocolStack = jgroupsConfig.protocolStack(); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("Unable to create a new channel with {}", protocolStack, e); return null; } return new org.jgroups.JChannel(protocolStack); }
private org.jgroups.JChannel getChannel() {java.lang.String protocolStack = ""; try { protocolStack = jgroupsConfig.protocolStack(); return protocolStack == null? new org.jgroups.JChannel() : new org.jgroups.JChannel(protocolStack); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("Unable to create a channel with {}", protocolStack, e); return null; } }
private org.jgroups.JChannel getChannel() { return new org.jgroups.JChannel(jgroupsConfig.protocolStack()); }
public void connect() { try { channel = getChannel();java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug(("Connection stack: " + (channel.getProtocolStack()))); channel.getProtocolStack().getTransport().setBindAddress(address.get()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug("Connection bound to {}", address.get()); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn("Connection not bound: address not present"); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info("Connection {} successfully joined jgroups cluster {}", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("Connection {} for channel {} failed", jgroupsConfig.clusterName(), channel.getName(), e); } }
public void connect() { try { channel = getChannel();java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug("Connecting stack: " + (channel.getProtocolStack()))); channel.getProtocolStack().getTransport().setBindAddress(address.get()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug("Address bound to {}", address.get()); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn("Address not bound: address not present"); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info("Joined {} successfully joined jgroups cluster {}", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("Joined jgroups cluster {} for channel {} failed", jgroupsConfig.clusterName(), channel.getName(), e); } }
public void connect() { try { channel = getChannel();java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug(("Connecting stack: " + (channel.getProtocolStack()))); channel.getProtocolStack().getTransport().setBindAddress(address.get()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug("Address bound to {}", address.get()); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn("Address not bound: address not present"); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info("Joined {} successfully joined jgroups cluster {}", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("Joined jgroups cluster {} for channel {} failed", jgroupsConfig.clusterName(), channel.getName(), e); } }
public void connect() { try { channel = getChannel();java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug(("Connect stack: " + (channel.getProtocolStack()))); channel.getProtocolStack().getTransport().setBindAddress(address.get()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug("Address bound to {}", address.get()); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn("Address not bound: address not present"); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info("Joined {} successfully joined jgroups cluster {}", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("Joined jgroups cluster {} for channel {} failed", jgroupsConfig.clusterName(), channel.getName(), e); } }
public void connect() { try { channel = getChannel();java.util.Optional<java.net.InetAddress> address = finder.findAddress(); if (address.isPresent()) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug(("New stack: " + (channel.getProtocolStack()))); channel.getProtocolStack().getTransport().setBindAddress(address.get()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.debug("JGroups bound to {}", address.get()); } else { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.warn("JGroups not bound: address not present"); } channel.setReceiver(this); channel.setDiscardOwnMessages(true); channel.connect(jgroupsConfig.clusterName()); com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info("JGroups {} successfully joined jgroups cluster {}", channel.getName(), jgroupsConfig.clusterName()); } catch (java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.error("JGroups {} for channel {} failed", jgroupsConfig.clusterName(), channel.getName(), e); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throwsjava.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setConfig(BooleanProjectConfig.USE_SIGNED_OFFBY, value); config.commit(md); projectCache.evict(config.getProject()); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throwsjava.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFFBY, value); config.commit(md); projectCache.evict(config.getProject()); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throwsjava.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBooleanConfig(com.google.gerrit.server.git.ProjectConfig.USE_SIGNED_OFFBY, value); config.commit(md); projectCache.evict(config.getProject()); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throwsjava.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setConfig(com.google.gerrit.server.git.ProjectConfig.USE_SIGNED_OFFBY, value); config.commit(md); projectCache.evict(config.getProject()); } }
protected void setUseSignedOffBy(com.google.gerrit.extensions.client.InheritableBoolean value) throwsjava.lang.Exception { try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(project)) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); config.getProject().setBooleanConfig(com.google.gerrit.server.git.ProjectConfig.USE_SIGNED_OFFBY, value); config.commit(md); projectCache.evict(project); } }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.is(BooleanProjectConfig.USE_SIGNED_OFFBY))) { returnjava.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboCommitter = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) {java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboAuthor |= author.getEmailAddress().equals(e); sboCommitter |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } if (((!sboAuthor) && (!sboCommitter)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Invalid Signed-off-by author/committer/uploader in commit message footer"); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidators.log.error("Cannot check FORGE_COMMITTER", e); throw new com.google.gerrit.server.git.validators.CommitValidationException("Internal auth error"); } } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.is(BooleanProjectConfig.USE_SIGNED_OFFBY))) { returnjava.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboCommitter = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) {java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboAuthor |= author.getEmailAddress().equals(e); sboCommitter |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } if (((!sboAuthor) && (!sboCommitter)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Invalid Signed-off-by author/committer/uploader in commit message footer"); } } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.is(BooleanProjectConfig.USE_SIGNED_OFFBY)) { returnjava.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboCommitter = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) {java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboAuthor |= author.getEmailAddress().equals(e); sboCommitter |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } if (((!sboAuthor) && (!sboCommitter)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Invalid Signed-off-by author/committer/uploader in commit message footer"); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidators.log.error("Cannot check FORGE_COMMITTER", e); throw new com.google.gerrit.server.git.validators.CommitValidationException("Internal auth error"); } } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.is(BooleanProjectConfig.USE_SIGNED_OFFBY)) { returnjava.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboCommitter = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) {java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboAuthor |= author.getEmailAddress().equals(e); sboCommitter |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } if (((!sboAuthor) && (!sboCommitter)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Invalid Signed-off-by author/committer/uploader in commit message footer"); } } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(state.is(BooleanProjectConfig.USE_SIGNED_OFFBY))) { returnjava.util.Collections.emptyList(); } org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; org.eclipse.jgit.lib.PersonIdent committer = commit.getCommitterIdent(); org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); boolean sboAuthor = false; boolean sboCommitter = false; boolean sboMe = false; for (org.eclipse.jgit.revwalk.FooterLine footer : commit.getFooterLines()) { if (footer.matches(FooterKey.SIGNED_OFF_BY)) {java.lang.String e = footer.getEmailAddress(); if (e!= null) { sboAuthor |= author.getEmailAddress().equals(e); sboCommitter |= committer.getEmailAddress().equals(e); sboMe |= user.hasEmailAddress(e); } } } if (((!sboAuthor) && (!sboCommitter)) && (!sboMe)) { try { perm.check(RefPermission.FORGE_COMMITTER); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Invalid Signed-off-by author/committer/uploader in commit message footer"); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.validators.CommitValidators.log.error("Cannot check FORGE_COMMITTER", e); throw new com.google.gerrit.server.git.validators.CommitValidationException("Invalid auth error"); } } returnjava.util.Collections.emptyList(); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFFBY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported"); }
@org.junit.Test public void createProjectWithProperties() throwsjava.lang.Exception {java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = newProjectName; in.description = "New description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.submitType); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTRIBUTOR_AGREEMENTS).isEqualTo(in.useContributorAgreements); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFFBY).isEqualTo(in.useSignedOffBy); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTENT_MERGE).isEqualTo(in.useContentMerge); assertThat(project.getBooleanConfig(BooleanProjectConfig.REQUIRE_CHANGE_ID).isEqualTo(in.requireChangeId); }
@org.junit.Test public void createProjectWithProperties() throwsjava.lang.Exception {java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = newProjectName; in.description = "New description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.submitType); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTRIBUTOR_AGREEMENTS).isEqualTo(in.useContributorAgreements); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFFBY).isEqualTo(in.useSignedOffBy); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTENT_MERGE).isEqualTo(in.useContentMerge); assertThat(project.getBooleanConfig(BooleanProjectConfig.REQUIRE_CHANGE_ID)).isEqualTo(in.requireChangeId); }
@org.junit.Test public void createProjectWithProperties() throwsjava.lang.Exception {java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = newProjectName; in.description = "New description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.submitType); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTRIBUTOR_AGREEMENTS).isEqualTo(in.useContributorAgreements); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFFBY).isEqualTo(in.useSignedOffBy); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTENT_MERGE)).isEqualTo(in.useContentMerge); assertThat(project.getBooleanConfig(BooleanProjectConfig.REQUIRE_CHANGE_ID).isEqualTo(in.requireChangeId); }
@org.junit.Test public void createProjectWithProperties() throwsjava.lang.Exception {java.lang.String newProjectName = name("newProject"); com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = newProjectName; in.description = "New description"; in.submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.client.InheritableBoolean.TRUE; com.google.gerrit.extensions.common.ProjectInfo p = gApi.projects().create(in).get(); assertThat(p.name).isEqualTo(newProjectName); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertThat(project.getDescription()).isEqualTo(in.description); assertThat(project.getSubmitType()).isEqualTo(in.submitType); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTRIBUTOR_AGREEMENTS).isEqualTo(in.useContributorAgreements); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_SIGNED_OFFBY).isEqualTo(in.useSignedOffBy); assertThat(project.getBooleanConfig(BooleanProjectConfig.USE_CONTENT_MERGE).isEqualTo(in.useContentMerge); assertThat(project.getBooleanConfig(BooleanProjectConfig.REQUIRE_CHANGE_ID).isEqualTo(in.requireChangeId)); }
org.junit.Test() { }
privatejava.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throwsjava.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db));java.sql.Connection connection = schema.getConnection();java.util.Set<java.lang.String> columns = schema.getDialect().listColumns(connection, com.google.gerrit.server.schema.Schema_154.TABLE); return com.google.gerrit.server.schema.Schema_154.ACCOUNT_FIELDS_MAP.entrySet().stream().filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toSet()); }
private staticjava.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throwsjava.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db));java.sql.Connection connection = schema.getConnection();java.util.Set<java.lang.String> columns = schema.getDialect().listColumns(connection, com.google.gerrit.server.schema.Schema_154.TABLE); return com.google.gerrit.server.schema.Schema_154.ACCOUNT_FIELDS_MAP.entrySet().stream().filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toSet()); }
privatejava.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throwsjava.lang.Exception { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db));java.sql.Connection connection = schema.getConnection();java.util.Set<java.lang.String> columns = schema.getDialect().listColumns(connection, com.google.gerrit.server.schema.Schema_154.TABLE); return com.google.gerrit.server.schema.Schema_154.ACCOUNT_FIELDS_MAP.entrySet().stream().filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toSet()); }
privatejava.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throwsjava.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db));java.sql.Connection connection = schema.getConnection();java.util.Set<java.lang.String> columns = schema.getDialect().listColumns(connection, com.google.gerrit.server.schema.Schema_154.TABLE); return com.google.gerrit.server.schema.Schema_154.account_FIELDS_MAP.entrySet().stream().filter(( e) -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toSet()); }
privatejava.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> getFields(com.google.gerrit.reviewdb.server.ReviewDb db) throwsjava.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db));java.sql.Connection connection = schema.getConnection();java.util.Set<java.lang.String> columns = schema.getDialect().listColumns(connection, com.google.gerrit.server.schema.Schema_154.TABLE); return com.google.gerrit.server.schema.Schema_154.ACCOUNT_FIELDS_MAP.entrySet().stream().filter(e -> columns.contains(e.getKey())).collect(java.util.stream.Collectors.toSet()); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throwsjava.sql.SQLException {java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> fields = getFields(db); if (fields.isEmpty()) { returnjava.util.Collections.emptySet(); }java.lang.String query = fields.stream().map(( f) -> f.getKey()).collect(java.util.stream.Collectors.joining(account_id, registered_on,java.lang.String.format("%s FROM %s", com.google.gerrit.server.schema.Schema_154.TABLE))); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(query)) {java.util.Set<com.google.gerrit.reviewdb.client.Account> s = newjava.util.HashSet<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter> field : fields) { field.getValue().set(a, rs, field.getKey()); } s.add(a); pm.update(1); } return s; } }
java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throwsjava.sql.SQLException {java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> fields = getFields(db); if (fields.isEmpty()) { returnjava.util.Collections.emptySet(); }java.lang.String query = fields.stream().map(( f) -> f.getKey()).collect(java.util.stream.Collectors.joining(account_id, registered_on,java.lang.String.format("SELECT * FROM %s", com.google.gerrit.server.schema.Schema_154.TABLE))); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(query)) {java.util.Set<com.google.gerrit.reviewdb.client.Account> s = newjava.util.HashSet<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter> field : fields) { field.getValue().set(a, rs, field.getKey()); } s.add(a); pm.update(1); } return s; } }
java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throwsjava.sql.SQLException {java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> fields = getFields(db); if (fields.isEmpty()) { returnjava.util.Collections.emptySet(); }java.lang.String query = fields.stream().map(( f) -> f.getKey()).collect(java.util.stream.Collectors.joining(account_id, registered_on,java.lang.String.format("%s FROM %s", com.google.gerrit.server.schema.Schema_154.TABLE))); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(query)) {java.util.Set<com.google.gerrit.reviewdb.client.Account> s = newjava.util.HashSet<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter> field : fields) { field.getValue().set(a, rs); } s.add(a); pm.update(1); } return s; } }
java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throwsjava.sql.SQLException {java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> fields = getFields(db); if (fields.isEmpty()) { returnjava.util.Collections.emptySet(); }java.lang.String query = fields.stream().map(( f) -> f.getKey()).collect(java.util.stream.Collectors.joining(account_id, registered_on,java.lang.String.format("SELECT * FROM %s", com.google.gerrit.server.schema.Schema_154.TABLE))); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(query)) {java.util.Set<com.google.gerrit.reviewdb.client.Account> s = newjava.util.HashSet<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter> field : fields) { field.getValue().set(a, rs); } s.add(a); pm.update(1); } return s; } }
java.util.Set<com.google.gerrit.reviewdb.client.Account> scanAccounts(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.ProgressMonitor pm) throwsjava.sql.SQLException {java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gerrit.server.schema.Schema_154.AccountSetter>> fields = getFields(db); if (fields.isEmpty()) { returnjava.util.Collections.emptySet(); }java.lang.String query = fields.stream().map(( f) -> f.getKey()).collect(java.util.stream.Collectors.joining(account_id, registered_on,java.lang.String.format("%s FROM %s", com.google.gerrit.server.schema.Schema_154.TABLE))); try (java.sql.Statement stmt = newStatement(db);java.sql.ResultSet rs = stmt.executeQuery(query)) {java.util.Set<com.google.gerrit.reviewdb.client.Account> s = newjava.util.HashSet<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account a = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)), rs.getTimestamp(2)); s.add(a); pm.update(1); } return s; } }
protected boolean isRest(java x.servlet.ServletRequest req) { return resturi.matcher(getURI(req)).matches(); }
private boolean isRest(java x.servlet.ServletRequest req) { return resturi.matcher(getURI(req)).matches(); }
public boolean isRest(java x.servlet.ServletRequest req) { return resturi.matcher(getURI(req)).matches(); }
protected boolean isRest(java x.servlet.ServletRequest req) { return resturi.matcher(getURI(req)); }
protected boolean isRest(java x.servlet.ServletRequest req) throwsjava x.servlet.ServletException { return resturi.matcher(getURI(req)); }
public synchronized boolean inGracePeriod() { if ((gracepermits) < 0) { return false; } return ((gracepermits)--) > 0; }
public synchronized boolean inGracePeriod() { return ((gracepermits) < 0) || ((gracepermits)--) > 0; }
public synchronized boolean inGracePeriod() { return ((gracepermits) < 0) || ((gracepermits) > 0); }
public synchronized boolean inGracePeriod() { return (gracepermits) > 0; }
public synchronized boolean inGracePeriod() { return ((gracepermits) < 0); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) throwsjava.lang.Exception { return createWithBurstyRateLimiter(finder.firstMatching(limitsConfigType, userFactory.create(key))); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) { return createWithBurstyRateLimiter(finder.firstMatching(limitsConfigType, userFactory.create(key))); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) throwsjava.lang.Exception { return createWithBurstyRateLimiter(finder.firstMatching(limitsConfigType, userFactory.create(key))) }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) throwsjava.lang.Exception { return createWithBurstyRateLimiter(finder.firstMatching(limitsFactory.create(key))); }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) throwsjava.lang.Exception { return createWithBurstyRateLimiter(finder.firstMatching(limitsConfigType, userFactory.create(key)).get()); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_ACCOUNTID, Account.Id.class,java.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderAccountId.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_REMOTEHOST,java.lang.String.class,java.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderRemoteHost.class); bindConstant().annotatedWith(com.google.inject.name.Names.named(RateMsgHelper.RESTAPI_CONFIGURABLE_MSG_ANNOTATION)).to(RESTAPI_LIMIT_EXCEEDED_MSG); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_ACCOUNTID, Account.Id.class,java.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderAccountId.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_REMOTEHOST,java.lang.String.class,java.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderRemoteHost.class); bindConstant().annotatedWith(com.google.inject.name.Names.named(RateMsgHelper.RESTAPI_CONFIGURABLE_MSG_ANNOTATION)).to(RestAPI_LIMIT_EXCEEDED_MSG); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_ACCOUNTID, Account.Id.class,java.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderAccountId.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_REMOTEHOST,java.lang.String.class,java.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderRemoteHost.class); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_ACCOUNTID, Account.Id.class,java.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderAccountId.class); cache(com.googlesource.gerrit.plugins.quota.HttpModule.CACHE_NAME_RESTAPI_REMOTEHOST,java.lang.String.class,java.class).loader(com.googlesource.gerrit.plugins.quota.HttpModule.RestApiLoaderRemoteHost.class); bindConstant().annotatedWith(com.google.inject.name.Names.named(RateMsgHelper.RESTAPI_CONFIGURABLE_MSG_ANNOTATION)).to(RESTAPI_LIMIT_EXCEEDED_MSG); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.httpd.AllRequestFilter.class).to(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.class); bindConstant().annotatedWith(com.google.inject.name.Names.named(RateMsgHelper.RESTAPI_CONFIGURABLE_MSG_ANNOTATION)).to(RESTAPI_LIMIT_EXCEEDED_MSG); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse res, finaljava x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder rateLimiterHolder = null; com.google.gerrit.server.CurrentUser u = user.get(); com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { rateLimiterHolder = limitsPerAccount.get(accountId); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for account ''{}''", accountId); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } else { try { rateLimiterHolder = limitsPerRemoteHost.get(req.getRemoteHost()); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for anonymous access from remote host ''{0}''", req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } if (((!(rateLimiterHolder.inGracePeriod())) && ((rateLimiterHolder.get())!= null)) && (!(rateLimiterHolder.get().tryAcquire()))) {java.lang.String msg =java.text.MessageFormat.format(limitExceededMsg, ((rateLimiterHolder.get().getRate()) * (com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SECONDS_PER_HOUR)), rateLimiterHolder.getBurst()); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.doFilter(req, res, chain); } } }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse res, finaljava x.servlet.FilterChain chain) throwsjava.io.IOException,java x.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder rateLimiterHolder = null; com.google.gerrit.server.CurrentUser u = user.get(); com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { rateLimiterHolder = limitsPerAccount.get(accountId); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for account ''{}''", accountId); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } else { try { rateLimiterHolder = limitsPerRemoteHost.get(req.getRemoteHost()); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for anonymous access from remote host ''{0}''", req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } if (((!(rateLimiterHolder.inGracePeriod())) && ((rateLimiterHolder.get())!= null)) && (!(rateLimiterHolder.get().tryAcquire()))) {java.lang.String msg =java.text.MessageFormat.format(limitExceededMsg, ((rateLimiterHolder.get().getRate()) * (com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SECONDS_PER_HOUR)), rateLimiterHolder.getBurst()); ((java.servlet.http.HttpServletResponse) (res)).sendError(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SC_Y_REQUEST, msg); } } chain.doFilter(req, res); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse res, finaljava x.servlet.FilterChain chain) throwsjava.io.IOException,java x.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder rateLimiterHolder = null; com.google.gerrit.server.CurrentUser u = user.get(); com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { rateLimiterHolder = limitsPerAccount.get(accountId); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for account ''{}''", accountId); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } else { try { rateLimiterHolder = limitsPerRemoteHost.get(req.getRemoteHost()); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for anonymous access from remote host ''{0}''", req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } if (((!(rateLimiterHolder.inGracePeriod())) && ((rateLimiterHolder.get())!= null)) && (!(rateLimiterHolder.get().tryAcquire()))) {java.lang.String msg =java.text.MessageFormat.format(limitExceededMsg, ((rateLimiterHolder.get().getRate()) * (com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SECONDS_PER_HOUR)), rateLimiterHolder.getBurst()); ((java.servlet.http.HttpServletResponse) (res)).sendError(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SC_Y_REQUEST, msg); chain.doFilter(req, res); } } }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse res, finaljava x.servlet.FilterChain chain) throwsjava.io.IOException,java x.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder rateLimiterHolder = null; com.google.gerrit.server.CurrentUser u = user.get(); com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { rateLimiterHolder = limitsPerAccount.get(accountId); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for account ''{}''", accountId); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } else { try { rateLimiterHolder = limitsPerRemoteHost.get(req.getRemoteHost()); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for anonymous access from remote host ''{0}''", req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } if (((!(rateLimiterHolder.inGracePeriod())) && ((rateLimiterHolder.get())!= null)) && (!(rateLimiterHolder.get().tryAcquire()))) {java.lang.String msg =java.text.MessageFormat.format(limitExceededMsg, ((rateLimiterHolder.get().getRate()) * (com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SECONDS_PER_HOUR)), rateLimiterHolder.getBurst()); ((java.servlet.http.HttpServletResponse) (res)).sendError(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SC_O_MANY_REQUEST, msg); } } chain.doFilter(req, res); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse res, finaljava x.servlet.FilterChain chain) throwsjava.io.IOException,java x.servlet.ServletException { if (isRest(req)) { com.googlesource.gerrit.plugins.quota.Module.Holder rateLimiterHolder = null; com.google.gerrit.server.CurrentUser u = user.get(); com.google.gerrit.reviewdb.client.Account.Id accountId = null; if (u.isIdentifiedUser()) { accountId = u.asIdentifiedUser().getAccountId(); try { rateLimiterHolder = limitsPerAccount.get(accountId); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for account ''{}''", accountId); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } else { try { rateLimiterHolder = limitsPerRemoteHost.get(req.getRemoteHost()); } catch (java.util.concurrent.ExecutionException e) {java.lang.String msg =java.text.MessageFormat.format("Cannot get rate limits for anonymous access from remote host ''{0}''", req.getRemoteHost()); com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.log.warn(msg, e); } } if (((!(rateLimiterHolder.inGracePeriod())) && ((rateLimiterHolder.get())!= null)) && (!(rateLimiterHolder.get().tryAcquire()))) {java.lang.String msg =java.text.MessageFormat.format(limitExceededMsg, ((rateLimiterHolder.get().getRate()) * (com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SECONDS_PER_HOUR)), rateLimiterHolder.getBurst()); ((java.servlet.http.HttpServletResponse) (res)).sendError(com.googlesource.gerrit.plugins.quota.RestApiRequestRateEnforcer.SC_O_MANY_REQUEST, msg); chain.doFilter(req, res); } } }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit) throwsjava.lang.Exception { if (limit.isPresent()) { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithBurstyRateLimiter(limit); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit) throwsjava.io.IOException { if (limit.isPresent()) { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithBurstyRateLimiter(limit); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit);
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit) throwsjava.lang.Exception { if (limit.isPresent()) { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithBurstyRateLimiter(limit); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY_INSTANCE; }
private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.common.base.Optional<com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit> limit) throwsjava.lang.Exception { if (limit.isPresent()) { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithBurstyRateLimiter(limit); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY_INSTANCES; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(Key key) throwsjava.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.Module.AbstractHolderCacheLoader.LoaderType.ANONYMOUS)) && (key instanceofjava.lang.String)) { return createWithBurstyRateLimiter(); } if (((kind) == (com.googlesource.gerrit.plugins.quota.Module.AbstractHolderCacheLoader.LoaderType.ACCOUNTID)) && (key instanceof com.google.gerrit.reviewdb.client.Account.Id)) { return createWithBurstyRateLimiter(new com.google.gerrit.reviewdb.client.Account.Id(key))); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(Key key) throwsjava.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.Module.AbstractHolderCacheLoader.LoaderType.ANONYMOUS)) && (key instanceofjava.lang.String)) { return createWithBurstyRateLimiter(); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(Key key) throwsjava.lang.Exception { if (((kind) == (com.googlesource.gerrit.plugins.quota.Module.AbstractHolderCacheLoader.LoaderType.ANONYMOUS)) && (key instanceofjava.lang.String)) { return createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id.parse(key)); } return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(Key key) throwsjava.lang.Exception { return com.googlesource.gerrit.plugins.quota.Module.Holder.EMPTY; }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(Key key) throwsjava.lang.Exception { return com.googlesource.gerrit.plugins.quota.Module.Holder.createWithBurstyRateLimiter(key); }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return execute(action, defaults()); }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return execute(action, null); }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action) throws com.google.gerrit.extensions.restapi.RestApiException { return execute(action, defaults()); }
public <T> T execute(com.google.gerrit.server.update.Action<T> action) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { return execute(action, defaults()); }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action) throws com.google.gerrit.server.update.UpdateException { return execute(action, defaults()); }
@java.lang.Override protected boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.update.LockFailureException; }
@java.lang.Override protected boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }
@java.lang.Override protected boolean retryOn(java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.update.UpdateException; }
@java.lang.Override protected boolean retryOn (java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.update.LockFailureException; }
@java.lang.Override protected boolean retryOn (java.lang.Throwable t) { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.github.rholder.retry.RetryerBuilder.newBuilder().build()); } return doExecute(updateFactory, action, opts); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.github.rholder.retry.RetryerBuilder.newBuilder()).build(); } return doExecute(updateFactory, action, opts); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { return doExecute(updateFactory, action, com.github.rholder.retry.RetryerBuilder.newBuilder().build()); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { return doExecute(updateFactory, action, opts); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
public <T> T execute(com.google.gerrit.server.update.Action<com.google.gerrit.server.update.BatchUpdate.Factory, T> action, com.google.gerrit.server.update.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return doExecute(updateFactory, action, com.github.rholder.retry.RetryerBuilder.newBuilder().build()); } return doExecute(updateFactory, action, opts); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException (t); } }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = readRevision(repo); afterReadRevision.run(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = i.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, noteMap); } } }); }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = readRevision(repo); afterReadRevision.run(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = i.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, updatedExtIds); } } }); }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = i.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, noteMap, updatedExtIds); } } }); }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) { return retryHelper.execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = readRevision(repo); afterReadRevision.run(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = i.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, noteMap, updatedExtIds); } } }); }
private com.google.gerrit.server.account.externalids.ExternalIdsUpdate.RefsMetaExternalIdsUpdate updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap noteMap = readNoteMap(rw, rev); com.google.gerrit.server.account.externalids.UpdatedExternalIds updatedExtIds = i.update(com.google.gerrit.server.account.externalids.OpenRepo.create(repo, rw, ins, noteMap)); return commit(repo, rw, ins, rev, noteMap); } } }); }
publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user);java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = newjava.util.ArrayList<>(); depthFirstFormat(results, perm, projects, children, parent); return results; }
publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user);java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = newjava.util.ArrayList<>(); depthFirstFormat(results, perm, projects, children, parent); return results; }
publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user); return depthFirstFormat(results, perm, projects, children, parent); }
publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user);java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = newjava.util.ArrayList<>(); depthFirstFormat(results, perm, projects, children); return results; }
publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> recursiveChildProjects(com.google.gerrit.reviewdb.client.Project.NameKey parent) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project> projects = readAllProjects(); com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Project.NameKey> children = parentToChildren(projects); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(user);java.util.List<com.google.gerrit.extensions.common.ProjectInfo> results = depthFirstFormat(results, perm, projects, children, parent); return results; }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectLister.recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectLister. recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectLister.recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectLister.recursiveChildProjects(rsrc.getNameKey()); } else { return directChildProjects(rsrc.getNameKey()); } }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { return childProjectLister.recursiveChildProjects(rsrc.getNameKey()); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjectLister); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjectLister, submitDryRun, conflictsCache, index, indexConfig); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjectLister, submitDryRun, conflictsCache, index, indexConfig, listMembers); }

@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.childProjectLister, args.self, name); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.parentProjectLister, args.self, name); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(projectCache, args.childProjectLister, args.self, name); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.projectLister, args.self, name); }
@com.google.gerrit.server.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> parentproject(java.lang.String name) { return new com.google.gerrit.server.query.change.ParentProjectPredicate(args.projectCache, args.childProjectLister, args.self, name); }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.Reachable.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludeInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.Reachable.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.Reachable.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
private boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.Reachable.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.Reachable.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getNameKey()), e); return false; } }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try {java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot look up change for commit " + (commit.name())) + " in ") + project), e); } return reachable.isReachableFrom(state, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try {java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot look up change for commit " + (commit.name())) + " in ") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try {java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot look up change for commit " + (commit.name())) + " in ") + project), e); } return reachable. isReachableFrom(state, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { return queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error(((("Cannot look up change for commit " + (commit.name())) + " in ") + project), e); } }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { return canRead(state, repo, commit, repo.getAllRefs()); }
boolean isReachableFromHeadsOrTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase();java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values();java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values();java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return reachable.isReachableFrom(state, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
public boolean isReachableFromHeadsOrTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase();java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values();java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values();java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return reachable.isReachableFrom(state, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
private boolean isReachableFromHeadsOrTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase();java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values();java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values();java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return reachable.isReachableFrom(state, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
boolean isReachableFromHeadsOrTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase();java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values();java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values();java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return reachableFrom(state, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()), e); return false; } }
boolean isReachableFromHeadsOrTags(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refdb = repo.getRefDatabase();java.util.Collection<org.eclipse.jgit.lib.Ref> heads = refdb.getRefs(Constants.R_HEADS).values();java.util.Collection<org.eclipse.jgit.lib.Ref> tags = refdb.getRefs(Constants.R_TAGS).values();java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = com.google.common.collect.Maps.newHashMapWithExpectedSize(((heads.size()) + (tags.size()))); for (org.eclipse.jgit.lib.Ref r : com.google.common.collect.Iterables.concat(heads, tags)) { refs.put(r.getName(), r); } return reachable.isReachableFrom(state, repo, commit, refs); } catch (java.io.IOException e) { com.google.gerrit.server.project.ProjectControl.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()), e); return true; } }
public staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectLister childProjectLister, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLister.recursiveChildProjects(proj.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
private staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectLister childProjectLister, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLister.recursiveChildProjects(proj.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
protected staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectLister childProjectLister, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLister.recursiveChildProjects(proj.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectLister childProjectLister, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLister.recursiveChildProjects(proj.getNameKey())) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
public staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.gerrit.server.project.ChildProjectLister childProjectLister, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.project.ProjectResource proj = new com.google.gerrit.server.project.ProjectResource(projectState, self.get()); for (com.google.gerrit.extensions.common.ProjectInfo p : childProjectLister.recursiveChildProjects(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account,java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateStateChanged.Event event = new com.google.gerrit.server.extensions.events.PrivateStateChanged.Event(util.changeInfo(change), util.accountInfo(account), isPrivate, when); for (com.google.gerrit.extensions.events.PrivateStateChangedListener l : listeners) { try { l.onPrivateStateChanged(event); } catch (java.lang.Exception e) { util.logEventListenerError(event, l, e); } } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.PrivateStateChanged.log.error("Couldn't fire event", e); } }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account,java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateStateChanged.Event event = new com.google.gerrit.server.extensions.events.PrivateStateChanged.Event(util.changeInfo(change), util.accountInfo(account), isPrivate, when); for (com.google.gerrit.extensions.events.PrivateStateChangedListener l : listeners) { try { l.onPrivateStateChanged(event); } catch (java.lang.Exception e) { util.logEventListenerError(event, l, e); } } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.PrivateStateChanged.log.error(("Couldn't fire event", e); } }
private void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account,java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateStateChanged.Event event = new com.google.gerrit.server.extensions.events.PrivateStateChanged.Event(util.changeInfo(change), util.accountInfo(account), isPrivate, when); for (com.google.gerrit.extensions.events.PrivateStateChangedListener l : listeners) { try { l.onPrivateStateChanged(event); } catch (java.lang.Exception e) { util.logEventListenerError(event, l, e); } } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.PrivateStateChanged.log.error("Couldn't fire event", e); } }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account,java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } com.google.gerrit.server.extensions.events.PrivateStateChanged.Event event = new com.google.gerrit.server.extensions.events.PrivateStateChanged.Event(util.changeInfo(change), util.accountInfo(account), isPrivate, when); for (com.google.gerrit.extensions.events.PrivateStateChangedListener l : listeners) { try { l.onPrivateStateChanged(event); } catch (java.lang.Exception e) { util.logEventListenerError(event, l, e); } } }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account account,java.sql.Timestamp when, boolean isPrivate) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.PrivateStateChanged.Event event = new com.google.gerrit.server.extensions.events.PrivateStateChanged.Event(util.changeInfo(change), util.accountInfo(account), isPrivate, when); for (com.google.gerrit.extensions.events.PrivateStateChangedListener l : listeners) { try { l.onPrivateStateChanged(event); } catch (java.lang.Exception e) { logEventListenerError(event, l, e); } } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.PrivateStateChanged.log.error("Couldn't fire event", e); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { privateStateChanged.fire(change, ctx.getAccount(), ctx.getWhen(), isPrivate); }
@java.lang.Override public void preUpdate(com.google.gerrit.server.update.Context ctx) { privateStateChanged.fire(change, ctx.getAccount(), ctx.getWhen(), isPrivate); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { privateStateChanged.fire(change, ctx.getAccount(), ctx.getWhen(), isPrivate()); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { privateStateChanged.fire(change, ctx.getAccount(), ctx.getWhen(), false); }
private void postUpdate(com.google.gerrit.server.update.Context ctx) { privateStateChanged.fire(change, ctx.getAccount(), ctx.getWhen(), isPrivate); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not private"); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is not private"); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not private"); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is not private"); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not private"); } try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.id = change.getKey().get(); a.number = change.getId().get(); a.subject = change.getSubject(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("Error while getting full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getOwner()); a.assignee = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.createdOn = (change.getCreatedOn().getTime()) / 1000L; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isPrivate = (change.isPrivate())? true : null; return a; }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.id = change.getKey().get(); a.number = change.getId().get(); a.subject = change.getSubject(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("error while getting full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getOwner()); a.assignee = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.createdOn = (change.getCreatedOn().getTime()) / 1000L; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isPrivate = (change.isPrivate())? true : null; return a; }
com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.id = change.getKey().get(); a.number = change.getId().get(); a.subject = change.getSubject(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("Error while getting full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getOwner()); a.assignee = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.createdOn = (change.getCreatedOn().getTime()) / 1000L; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isPrivate = (change.isPrivate())? true : null; return a; }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.id = change.getKey().get(); a.number = change.getId().get(); a.subject = change.getSubject(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("ERROR while getting full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getOwner()); a.assignee = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.createdOn = (change.getCreatedOn().getTime()) / 1000L; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isPrivate = (change.isPrivate())? true : null; return a; }
public com.google.gerrit.server.data.ChangeAttribute asChangeAttribute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { com.google.gerrit.server.data.ChangeAttribute a = new com.google.gerrit.server.data.ChangeAttribute(); a.project = change.getProject().get(); a.branch = change.getDest().getShortName(); a.topic = change.getTopic(); a.id = change.getKey().get(); a.number = change.getId().get(); a.subject = change.getSubject(); try { a.commitMessage = changeDataFactory.create(db, change).commitMessage(); } catch (java.lang.Exception e) { com.google.gerrit.server.events.EventFactory.log.error(("Exception while getting full commit message for change " + (a.number))); } a.url = getChangeUrl(change); a.owner = asAccountAttribute(change.getOwner()); a.assignee = asAccountAttribute(change.getAssignee()); a.status = change.getStatus(); a.createdOn = (change.getCreatedOn().getTime()) / 1000L; a.isWorkInProgress = (change.isWorkInProgress())? true : null; a.isPrivate = (change.isPrivate())? true : null; return a; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create(cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canSetPrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to mark private"); } if (rsrc.getChange().isPrivate()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } com.google.gerrit.server.change.SetPrivateOp op = setPrivateOpFactory.create (cmUtil, true, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.created(""); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return groupMembers.getTransitiveMembers(group, resource.getControl()); } return groupMembers.getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup(); if (recursive) { return groupMembers.getTransitiveMembers(group, resource.getControl()); } return groupMembers.getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return groupMembers. getTransitiveMembers(group, resource.getControl()); } return groupMembers. getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return groupMembers.getTransitiveMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return groupMembers.getTransitiveMembers(group, resource.getControl()); } return groupMembers.getirectMembers(group, resource.getControl()); }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.common.data.GroupDescription.Internal internalGroup,java.util.function.Supplier<com.google.gerrit.server.account.GroupControl> groupControlSupplier) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.getDirectMembers(internalGroup, groupControlSupplier.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = listSubgroups.get().getDirectSubgroups(internalGroup, groupControlSupplier.get()); } }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.common.data.GroupDescription.Internal internalGroup,java.util.function.Supplier<com.google.gerrit.server.account.GroupControl> groupControlSupplier) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.getDirectMembers(internalGroup, groupControlSupplier.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = listSubgroups.getDirectSubgroups(internalGroup, groupControlSupplier.get()); } }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.common.data.GroupDescription.Internal internalGroup,java.util.function.Supplier<com.google.gerrit.server.account.GroupControl> groupControlSupplier) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.getDirectMembers(internalGroup, groupControlSupplier); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = listSubgroups.get().getDirectSubgroups(internalGroup, groupControlSupplier.get()); } }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.common.data.GroupDescription.Internal internalGroup,java.util.function.Supplier<com.google.gerrit.server.account.GroupControl> groupControlSupplier) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = groupMembers.getDirectMembers(internalGroup, groupControlSupplier.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = groupIncludes.getDirectSubgroups(internalGroup, groupControlSupplier.get()); } }
private void addInternalDetails(com.google.gerrit.extensions.common.GroupInfo info, com.google.gerrit.common.data.GroupDescription.Internal internalGroup,java.util.function.Supplier<com.google.gerrit.server.account.GroupControl> groupControlSupplier) throws com.google.gwtorm.server.OrmException { info.description = com.google.common.base.Strings.emptyToNull(internalGroup.getDescription()); info.groupId = internalGroup.getId().get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID = internalGroup.getOwnerGroupUUID(); if (ownerGroupUUID!= null) { info.ownerId = com.google.gerrit.extensions.restapi.Url.encode(ownerGroupUUID.get()); com.google.gerrit.common.data.GroupDescription.Basic o = groupBackend.get(ownerGroupUUID); if (o!= null) { info.owner = o.getName(); } } info.createdOn = internalGroup.getCreatedOn(); if (options.contains(com.google.gerrit.server.group.MEMBERS)) { info.members = listMembers.get().getDirectMembers(internalGroup, groupControlSupplier.get()); } if (options.contains(com.google.gerrit.server.group.INCLUDES)) { info.includes = listSubgroups.get().getDirectSubgroups(internalGroup, groupControlSupplier.get()); } }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects, submitDryRun, conflictsCache, index, indexConfig); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects, submitDryRun, conflictsCache); }
com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser() { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects, submitDryRun, conflictsCache, index, indexConfig, groupMembers); }

void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name));java.lang.String errorText = "Group not found or not visible"; if (!(group.isPresent())) { writer.write(errorText); writer.flush(); return; }java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.get(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("username"); formatter.addColumn("name"); formatter.addColumn("email"); formatter.nextLine(); for (com.google.gerrit.extensions.common.AccountInfo member : members) { if (member == null) { continue; } formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(member.name), "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.email, "n/a")); formatter.nextLine(); } formatter.finish(); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name));java.lang.String errorText = "Group not found or not visible"; if (!(group.isPresent())) { writer.write(errorText); writer.flush(); return; }java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("username"); formatter.addColumn("name"); formatter.addColumn("email"); formatter.nextLine(); for (com.google.gerrit.extensions.common.AccountInfo member : members) { if (member == null) { continue; } formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(member.name), "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.email, "n/a")); formatter.nextLine(); } formatter.finish(); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name));java.lang.String errorText = "group not found or not visible"; if (!(group.isPresent())) { writer.write(errorText); writer.flush(); return; }java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.get(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("username"); formatter.addColumn("name"); formatter.addColumn("email"); formatter.nextLine(); for (com.google.gerrit.extensions.common.AccountInfo member : members) { if (member == null) { continue; } formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(member.name), "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.email, "n/a")); formatter.nextLine(); } formatter.finish(); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name));java.lang.String errorText = "group not found or not visible"; if (!(group.isPresent())) { writer.write(errorText); writer.flush(); return; }java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("username"); formatter.addColumn("name"); formatter.addColumn("email"); formatter.nextLine(); for (com.google.gerrit.extensions.common.AccountInfo member : members) { if (member == null) { continue; } formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(member.name), "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.email, "n/a")); formatter.nextLine(); } formatter.finish(); }
void display(java.io.PrintWriter writer) throws com.google.gwtorm.server.OrmException {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name));java.lang.String errorText = "Group not found or not visible"; if (!(group.isPresent())) { writer.write(errorText); writer.flush(); return; }java.util.List<com.google.gerrit.extensions.common.AccountInfo> members = groupMembers.getDirectMembers(group.get()); com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(writer, '\t'); formatter.addColumn("id"); formatter.addColumn("username"); formatter.addColumn("full name"); formatter.addColumn("email"); formatter.nextLine(); for (com.google.gerrit.extensions.common.AccountInfo member : members) { if (member == null) { continue; } formatter.addColumn(java.lang.Integer.toString(member._accountId)); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.username, "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(member.name), "n/a")); formatter.addColumn(com.google.common.base.MoreObjects.firstNonNull(member.email, "n/a")); formatter.nextLine(); } formatter.finish(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.api.allowedIdentifiers", values = { "PROJECT_NUMERIC_ID", "NUMERIC_ID" }) public void deprecatedChangeIdReturnsBadRequest() throwsjava.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi1 = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi1.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.api.changes.ChangeApi cApi2 = gApi.changes().id(changeInfo._number); assertThat(cApi2.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo ci = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "different message")).get(); exception.expect(com.google.gerrit.extensions.restapi.DeprecatedIdentifierException.class); exception.expectMessage((("The provided change identifier " + (ci.changeId)) + " is deprecated. Use 'project~changeNumber' instead.")); gApi.changes().id(ci.changeId); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.api.allowedIdentifiers", values = { "PROJECT_NUMERIC_ID", "NUMERIC_ID" }) public void deprecatedChangeIdReturnsBadRequest() throwsjava.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi1 = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi1.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.api.changes.ChangeApi cApi2 = gApi.changes().id(changeInfo._number); assertThat(cApi2.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo ci = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "different message")).get(); exception.expect(com.google.gerrit.extensions.restapi.DeprecatedIdentifierException.class); exception.expectMessage((("The provided change identifier " + (ci.changeId)) + " is deprecated. Use 'project~changeNumber' instead.")); gApi.changes().id(ci.changeId); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.api.allowedIdentifiers", values = { "PROJECT_NUMERIC_ID", "NUMERIC_ID" }) public void deprecatedChangeIdReturnsBadRequest() throwsjava.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi1 = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi1.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.api.changes.ChangeApi cApi2 = gApi.changes().id(changeInfo._number); assertThat(cApi2.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo ci = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "different message")).get(); exception.expect(com.google.gerrit.extensions.restapi.DeprecatedIdentifierException.class); exception.expectMessage(((("The provided change identifier " + (ci.changeId)) + " is deprecated. Use 'project~changeNumber' instead.")); gApi.changes().id(ci.changeId); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.api.allowedIdentifiers", values = { "PROJECT_NUMERIC_ID", "NUMERIC_ID" }) public void deprecatedChangeIdReturnsBadRequest() throwsjava.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi1 = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi1.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.api.changes.ChangeApi cApi2 = gApi.changes().id(changeInfo._number); assertThat(cApi2.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo ci = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "different message")).get(); exception.expect(com.google.gerrit.extensions.restapi.DeprecatedIdentifierException.class); exception.expectMessage((("The provided change identifier \"" + (ci.changeId)) + "\" is deprecated. Use 'project~changeNumber' instead.")); gApi.changes().id(ci.changeId); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.api.allowedIdentifiers", values = { "PROJECT_NUMERIC_ID", "NUMERIC_ID" }) public void deprecatedChangeIdReturnsBadRequest() throwsjava.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi1 = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi1.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.api.changes.ChangeApi cApi2 = gApi.changes().id(changeInfo._number); assertThat(cApi2.get().changeId).isEqualTo(changeInfo.changeId); com.google.gerrit.extensions.common.ChangeInfo ci = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "different message")).get(); exception.expect(com.google.gerrit.extensions.restapi.DeprecatedIdentifierException.class); exception.expectMessage((("The provided change identifier " + (ci.changeId)) + " is deprecated. Use 'project~changeNumber' instead."")); gApi.changes().id(ci.changeId); }
private void checkIdType(com.google.gerrit.server.ChangeFinder.ChangeIdType type, boolean enforceDeprecation,java.lang.String val) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException { if (enforceDeprecation && (!(allowedIdTypes.contains(type)))) { throw new com.google.gerrit.extensions.restapi.DeprecatedIdentifierException(java.lang.String.format(("The provided change identifier %s is deprecated. " + "Use 'project~changeNumber' instead."), val)); } changeIdCounter.increment(type); }
private void checkIdType(com.google.gerrit.server.ChangeFinder.ChangeIdType type, boolean enforceDeprecation,java.lang.String val) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException { if (enforceDeprecation && (!(allowedIdTypes.contains(type)))) { throw new com.google.gerrit.extensions.restapi.DeprecatedIdentifierException(java.lang.String.format(("The provided change identifier %s is deprecated." + "Use 'project~changeNumber' instead."), val)); } changeIdCounter.increment(type); }
private void checkIdType(com.google.gerrit.server.ChangeFinder.ChangeIdType type, boolean enforceDeprecation,java.lang.String val) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException { if (enforceDeprecation && (!(allowedIdTypes.contains(type)))) { throw new com.google.gerrit.extensions.restapi.DeprecatedIdentifierException(java.lang.String.format(("The provided change identifier '%s' is deprecated. " + "Use 'project~changeNumber' instead."), val)); } changeIdCounter.increment(type); }
private static void checkIdType(com.google.gerrit.server.ChangeFinder.ChangeIdType type, boolean enforceDeprecation,java.lang.String val) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException { if (enforceDeprecation && (!(allowedIdTypes.contains(type)))) { throw new com.google.gerrit.extensions.restapi.DeprecatedIdentifierException(java.lang.String.format(("The provided change identifier %s is deprecated. " + "Use 'project~changeNumber' instead."), val)); } changeIdCounter.increment(type); }
private void checkIdType(com.google.gerrit.server.ChangeFinder.ChangeIdType type, boolean enforceDeprecated,java.lang.String val) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException { if (enforceDeprecated && (!(allowedIdTypes.contains(type)))) { throw new com.google.gerrit.extensions.restapi.DeprecatedIdentifierException(java.lang.String.format(("The provided change identifier %s is deprecated. " + "Use 'project~changeNumber' instead."), val)); } changeIdCounter.increment(type); }
publicjava.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.extensions.restapi.DeprecatedIdentifierException e) { return com.google.common.collect.ImmutableList.of(); } }
publicjava.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.extensions.restapi.DeprecatedIdentifierException e) { throw new com.google.gwtorm.server.OrmException(e); } }
publicjava.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { return find(id, false); }
publicjava.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.extensions.restapi.DeprecatedIdentifierException e) { return com.google.common.collect.collect.ImmutableList.of(); } }
publicjava.util.List<com.google.gerrit.server.notedb.ChangeNotes> find(java.lang.String id) throws com.google.gwtorm.server.OrmException { try { return find(id, false); } catch (com.google.gerrit.extensions.restapi.DeprecatedIdentifierException e) { return com.google.common.collect.Lists.of(); } }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Star parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id);java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.Star(user, change, labels); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Star parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id);java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.Star(user, change, labels); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Star parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id);java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.Star(user, change, labels); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Star parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id);java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.Star(user, change, labels); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Star parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id);java.util.Set<java.lang.String> labels = starredChangesUtil.getLabels(user.getAccountId(), change.getId()); return new com.google.gerrit.server.account.AccountResource.Star(user, change, labels); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("internal server error"); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Internal server error"); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("rest server error"); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, com.google.gerrit.server.permissions.PermissionBackendException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("internal server error"); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, com.google.gerrit.server.permissions.PermissionBackendException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Internal server error"); } }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.DeprecatedIdentifierException, com.google.gerrit.extensions.restapi. ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded()); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId()).contains(StarredChangesUtil.DEFAULT_LABEL)) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId()).contains(StarredChangesUtil.DEFAULT_LABEL)) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId()).contains(StarredChangesUtil.DEFAULT_LABEL)) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.InvalidIdException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId()).contains(StarredChangesUtil.DEFAULT_LABEL)) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (starredChangesUtil.getLabels(user.getAccountId(), change.getId()).contains(StarredChangesUtil.DEFAULT_LABEL)) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); };
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extId); removedExtIds.add(extId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalIdNotes.delete(rw, noteMap, extId); removedExtIds.add(extId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }
public void delete(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( rw, n) -> { externalIdCache.onRemove(rw, n, removedExtIds); evictAccounts(removedExtIds); }); }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { metaDataUpdate.getCommitBuilder().setAuthor(admin.getIdent()); metaDataUpdate.getCommitBuilder().setCommitter(admin.getIdent()); extIdNotes.commit(metaDataUpdate); } }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = externalIdNotesFactory.load(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository()); metaDataUpdate.getCommitBuilder().setAuthor(admin.getIdent()); metaDataUpdate.getCommitBuilder().setCommitter(admin.getIdent()); extIdNotes.commit(metaDataUpdate); }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = externalIdNotesFactory.load(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository())) { extIdNotes.commit(metaDataUpdate); } }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = externalIdNotesFactory.load(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); extIdNotes.commit(new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, null, testRepo.getRepository()))); }
private void addExtId(org.eclipse.jgit.junit.TestRepository<?> testRepo, com.google.gerrit.server.account.externalids.ExternalId... extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = externalIdNotesFactory.load(testRepo.getRepository()); extIdNotes.insert(java.util.Arrays.asList(extIds)); extIdNotes.commit(); }
@org.junit.Test public void retryOnLockFailure() throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.create("bar", "bar"); finaljava.util.concurrent.atomic.AtomicBoolean doneBgUpdate = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, () -> com.google.gerrit.acceptance.rest.account.metaDataUpdateFactory.create(com.google.gerrit.acceptance.rest.account.allUsers), accountCache, allUsers, metricMaker, externalIds, new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.update.RetryHelper(cfg, retryMetrics, null, null, null, ( r) -> r.withBlockStrategy(new com.github.rholder.retry.BlockStrategy() { @java.lang.Override public void block(long sleepTime) { } })), () -> { if (!(doneBgUpdate.getAndSet(true))) { try { extIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException e) { } } }); assertThat(doneBgUpdate.get()).isFalse(); update.insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); assertThat(doneBgUpdate.get()).isTrue(); assertThat(externalIds.get(fooId)).isNotNull(); assertThat(externalIds.get(barId)).isNotNull(); }
@org.junit.Test public void retryOnLockFailure() throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.create("bar", "bar"); finaljava.util.concurrent.atomic.AtomicBoolean doneBgUpdate = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, () -> com.google.gerrit.acceptance.rest.account.metaDataUpdateFactory.create(com.google.gerrit.acceptance.rest.account.allUsers), accountCache, allUsers, metricMaker, externalIds, new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.update.RetryHelper(cfg, retryMetrics, null, null, ( r) -> r.withBlockStrategy(new com.github.rholder.retry.BlockStrategy() { @java.lang.Override public void block(long sleepTime) { } })), () -> { if (!(doneBgUpdate.getAndSet(true))) { try { extIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException e) { } } }); assertThat(doneBgUpdate.get()).isFalse(); update.insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); assertThat(doneBgUpdate.get()).isTrue(); assertThat(externalIds.get(fooId)).isNotNull(); assertThat(externalIds.get(barId)).isNotNull(); }
@org.junit.Test public void retryOnLockFailure() throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.create("bar", "bar"); finaljava.util.concurrent.atomic.AtomicBoolean doneBgUpdate = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, () -> com.google.gerrit.acceptance.rest.account.metaDataUpdateFactory.create(com.google.gerrit.acceptance.rest.account.allUsers), accountCache, allUsers, metricMaker, externalIds, new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.update.RetryHelper(cfg, retryMetrics, null, null, null, ( r) -> r.withBlockStrategy(new com.github.rholder.retry.BlockStrategy() { @java.lang.Override public void block(long sleepTime) { } })), () -> { if (!(doneBgUpdate.getAndSet(true))) { try { extIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException e) { } } } }); assertThat(doneBgUpdate.get()).isFalse(); update.insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); assertThat(doneBgUpdate.get()).isTrue(); assertThat(externalIds.get(fooId)).isNotNull(); assertThat(externalIds.get(barId)).isNotNull(); }
@org.junit.Test public void retryOnLockFailure() throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.create("bar", "bar"); finaljava.util.concurrent.atomic.AtomicBoolean doneBgUpdate = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, () -> com.google.gerrit.acceptance.rest.account.metaDataUpdateFactory.create(com.google.gerrit.acceptance.rest.account.allUsers), accountCache, allUsers, metricMaker, externalIds, new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.update.RetryHelper(cfg, retryMetrics, null, null, ( r) -> r.withBlockStrategy(new com.github.rholder.retry.BlockStrategy() { @java.lang.Override public void block(long sleepTime) { } })), () -> { if (!(doneBgUpdate.getAndSet(true))) { try { extIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(barId, admin.id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException e) { } } } }); assertThat(doneBgUpdate.get()).isFalse(); update.insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); assertThat(doneBgUpdate.get()).isTrue(); assertThat(externalIds.get(fooId)).isNotNull(); assertThat(externalIds.get(barId)).isNotNull(); }
@org.junit.Test public void retryOnLockFailure() throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId.Key fooId = ExternalId.Key.create("foo", "foo"); com.google.gerrit.server.account.externalids.ExternalId.Key barId = ExternalId.Key.create("bar", "bar"); finaljava.util.concurrent.atomic.AtomicBoolean doneBgUpdate = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.server.account.externalids.ExternalIdsUpdate update = new com.google.gerrit.server.account.externalids.ExternalIdsUpdate(repoManager, () -> com.google.gerrit.acceptance.rest.account.metaDataUpdateFactory.create(com.google.gerrit.acceptance.rest.account.allUsers), accountCache, allUsers, metricMaker, externalIds, new com.google.gerrit.server.account.externalids.DisabledExternalIdCache(), new com.google.gerrit.server.update.RetryHelper(cfg, retryMetrics, null, null, null, ( r) -> r.withBlockStrategy(new com.github.rholder.retry.BlockStrategy() { @java.lang.Override public void block(long sleepTime) { } })), () -> { if (!(doneBgUpdate.getAndSet(true))) { try { extIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException e) { } } }); assertThat(doneBgUpdate.get()).isFalse(); update.insert(com.google.gerrit.server.account.externalids.ExternalId.create(fooId, admin.id)); assertThat(doneBgUpdate.get()).isTrue(); assertThat(externalIds.get(fooId)).isNotNull(); assertThat(externalIds.get(barId)).isNotNull(); }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo, key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return ExternalIdNotes.loadReadOnly(repo).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return externalIdNotes.loadReadOnly(repo).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return externalIds.loadReadOnly(repo).get(key); } }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { retryHelper.<com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater,java.lang.Object>execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = new com.google.gerrit.server.account.externalids.ExternalIdNotes(externalIdCache, accountCache, repo).setAfterReadRevision(afterReadRevision).load(); i.update(extIdNotes); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create()) { extIdNotes.commit(metaDataUpdate); } updateCount.increment(); } }); }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { retryHelper.<com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater,java.lang.Object>execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = new com.google.gerrit.server.account.externalids.ExternalIdNotes(externalIdCache, accountCache, repo).setAfterReadRevision(afterReadRevision).load(); i.update(extIdNotes); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create()) { extIdNotes.commit(metaDataUpdate); } updateCount.increment(); return null; } }); }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { retryHelper.<com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater,java.lang.Object>execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = new com.google.gerrit.server.account.externalids.ExternalIdNotes(externalIdCache, accountCache, repo).setAfterReadRevision(afterReadRevision).load(); i.update(extIdNotes); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = metaDataUpdateFactory.create()) { extIdNotes.commit(metaDataUpdate); } updateCount.increment(); return null; } }); }
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { retryHelper.<com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater,java.lang.Object>execute(updater, ( i) -> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = new com.google.gerrit.server.account.externalids.ExternalIdNotes(externalIdCache, accountCache, repo).setAfterReadRevision(afterReadRevision).load(); i.update(extIdNotes); } updateCount.increment(); return null; } });
private void updateNoteMap(com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { retryHelper.<com.google.gerrit.server.account.externalids.ExternalIdsUpdate.ExternalIdUpdater,java.lang.Object>execute(updater, ( i) -> { updateCount.increment(); return null; })); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) { upsert(java.util.Collections.singleton(extId)); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) throws com.google.gwtorm.server.OrmException { upsert(java.util.Collections.singleton(extId)); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) { upsert(com.google.common.collect.ImmutableSet.of(extId)); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException { upsert(java.util.Collections.singleton(extId)); }
public void upsert(com.google.gerrit.server.account.externalids.ExternalId extId) { upsert(com.google.common.collect.ImmutableList.of(extId)); }
publicjava.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throwsjava.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIdNotes.log.error(java.lang.String.format("Ignoring invalid external ID note %s", note.getName()), e); } } return extIds; } }
publicjava.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throwsjava.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, note.getData()); try { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } catch (java.lang.Exception e) { com.google.gerrit.server.account.externalids.ExternalIdNotes.log.error(java.lang.String.format("Ignoring invalid external ID note %s", note.getName()), e); } } } return extIds; }
publicjava.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throwsjava.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = newjava.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, note.getData()); extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } return extIds; } }
publicjava.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throwsjava.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> extIds = newjava.util.HashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, note.getData()); if (raw!= null) { extIds.add(com.google.gerrit.server.account.externalids.ExternalId.parse(note.getName(), raw, note.getData())); } } return extIds; } }
publicjava.util.Set<com.google.gerrit.server.account.externalids.ExternalId> all() throwsjava.io.IOException { checkLoaded(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteMap); } }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), "external id %s should be removed, but it's not matching the actual external id %s", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId; }
private static void remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), "external id %s should be removed, but it's not matching the actual external id %s", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); }
private static boolean remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), "external id %s should be removed, but it's not matching the actual external id %s", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId!= null; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(noteMap.contains(extId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(extId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), "external id %s should be removed, but it's not matching the actual external id %s", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId; }
private static boolean remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId actualExtId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); checkState(extId.equals(actualExtId), "external id %s should be removed, but it's not matching the actual external id %s", extId.toString(), actualExtId.toString()); noteMap.remove(noteId); return actualExtId == null; }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); }); evictAccounts(removedExtIds); }
public void delete(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); } ); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdNotes.checkSameAccount(toAdd, accountId); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, accountId, removedExtIds, updatedExtIds); evictAccount(accountId); }); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdNotes.checkSameAccount(toAdd, accountId); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, accountId, removedExtIds, updatedExtIds); evictAccount(accountId); }); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdNotes.checkSameAccount(toAdd, accountId); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, accountId, removedExtIds, updatedExtIds); evictAccount(accountId); }); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdNotes.checkSameAccount(toAdd, accountId); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, accountId, removedExtIds, updatedExtIds); evictAccount(accountId); }); }
public void replace(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); com.google.gerrit.server.account.externalids.ExternalIdNotes.checkSameAccount(toAdd, accountId); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, accountId); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } } ); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, accountId, removedExtIds, updatedExtIds); evictAccount(accountId); }); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey); removedExtIds.add(extId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( rw, n) -> { externalIdCache.onRemove(rw, n, removedExtIds); evictAccounts(removedExtIds); }); }
public void deleteByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( o, n) -> { externalIdCache.onRemove(o, n, removedExtIds); evictAccounts(removedExtIds); }); }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readOnly) { throw newjava.io.IOException("Updating external IDs is disabled"); } if (noteMapUpdates.isEmpty()) { return false; } if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Update external IDs\n"); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalIdNotes.NoteMapUpdate noteMapUpdate : noteMapUpdates) { try { noteMapUpdate.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw newjava.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; org.eclipse.jgit.lib.ObjectId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readOnly) { throw newjava.io.IOException(("Updating external IDs is disabled"); } if (noteMapUpdates.isEmpty()) { return false; } if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Update external IDs\n"); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalIdNotes.NoteMapUpdate noteMapUpdate : noteMapUpdates) { try { noteMapUpdate.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw newjava.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; org.eclipse.jgit.lib.ObjectId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readOnly) { throw newjava.io.IOException("Updating external IDs is disabled"); } if (noteMapUpdates.isEmpty()) { return false; } if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Update external IDs\n"); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalIdNotes.NoteMapUpdate noteMapUpdate : noteMapUpdates) { try { noteMapUpdate.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw newjava.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; org.eclipse.jgit.lib.ObjectId newTreeId = noteMap.writeTree(inserter); if (newTreeId!= null) { return false; } commit.setTreeId(newTreeId); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readOnly) { throw newjava.io.IOException("Updating external IDs is disabled"); } if (noteMapUpdates.isEmpty()) { return false; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalIdNotes.NoteMapUpdate noteMapUpdate : noteMapUpdates) { try { noteMapUpdate.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw newjava.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; org.eclipse.jgit.lib.ObjectId newTreeId = noteMap.writeTree(inserter); if (newTreeId.equals(oldTree)) { return false; } commit.setTreeId(newTreeId); return true; } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readOnly) { throw newjava.io.IOException("Updating external IDs is disabled"); } if (noteMapUpdates.isEmpty()) { return false; } if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Update external IDs\n"); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { for (com.google.gerrit.server.account.externalids.ExternalIdNotes.NoteMapUpdate noteMapUpdate : noteMapUpdates) { try { noteMapUpdate.execute(rw, noteMap); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw newjava.io.IOException(e); } } org.eclipse.jgit.revwalk.RevTree oldTree = ((revision)!= null)? rw.parseTree(revision) : null; org.eclipse.jgit.lib.ObjectId newTreeId = noteMap.writeTree(inserter); if (!(newTreeId.equals(oldTree))) { return false; } commit.setTreeId(newTreeId); return true; } }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throwsjava.io.IOException { if ((accountCache)!= null) { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds.stream().map(ExternalId::accountId).collect(java.util.stream.Collectors.toSet())) { accountCache.evict(id); } } }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throwsjava.io.IOException { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds.stream().map(ExternalId::accountId).collect(java.util.stream.Collectors.toSet())) { accountCache.evict(id); } }
private void evictAccounts(java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> extIds) throwsjava.io.IOException { if ((accountCache)!= null) { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds.stream().map(ExternalId::accountId).collect(java.util.stream.Collectors.toSet())) { accountCache.evict(id); } } }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throwsjava.io.IOException { if ((accountCache)!= null) { for (com.google.gerrit.reviewdb.client.Account.ExternalId extId : extIds.stream().map(ExternalId::accountId).collect(java.util.stream.Collectors.toSet())) { accountCache.evict(extId); } } }
private void evictAccounts(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throwsjava.io.IOException { if ((accountCache)!= null) { for (com.google.gerrit.reviewdb.client.Account.Id id : extIds.stream().map(ExternalId::accountId).collect(java.util.stream.Collectors.toSet())) { if (accountCache.evict(id)) { return; } } } }
private static void upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); try { c.fromText(newjava.lang.String(raw,java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteData = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); noteMap.set(noteId, noteData); return com.google.gerrit.server.account.externalids.ExternalId.create(extId, noteData); }
private static boolean upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); try { c.fromText(newjava.lang.String(raw,java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteData = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); noteMap.set(noteId, noteData); return com.google.gerrit.server.account.externalids.ExternalId.create(extId, noteData); }
private static void upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); try { c.fromText(newjava.lang.String(raw,java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteData = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); noteMap.set(noteId, noteData); }
private static com.google.gerrit.server.account.externalids.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); try { c.fromText(newjava.lang.String(raw,java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, e.getMessage())); } } extId.writeToConfig(c); byte[] raw = c.toText().getBytes(java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.ObjectId noteData = ins.insert(com.google.gerrit.server.account.externalids.OBJ_BLOB, raw); noteMap.set(noteId, noteData); return extId; }
private static com.google.gerrit.server.account.externalids.ExternalId upsert(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId extId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extId.key().sha1(); org.eclipse.jgit.lib.Config c = new org.eclipse.jgit.lib.Config(); if (noteMap.contains(extId.key().sha1())) { byte[] raw = rw.getObjectReader().open(noteMap.get(noteId), com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); try { c.fromText(newjava.lang.String(raw,java.nio.charset.StandardCharsets.UTF_8)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, e.getMessage())); } } extId.writeToConfig(c); return com.google.gerrit.server.account.externalids.ExternalId.create(extId, c); }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { updatedExternalIdsBuilder().add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { updatedExternalIds.add(extId); return this; }
public com.google.gerrit.server.account.InternalUpdate.Builder updateExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { updatedExternalIdsBuilder().add(extId); return this; }
private com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { updatedExternalIdsBuilder().add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder updateExternalId(java.lang.String extId) { updatedExternalIdsBuilder().add(extId); return this; }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo, rev).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo, rev); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo, rev)).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.readReadOnly(repo, rev).get(key); } }
@com.google.gerrit.common.Nullable com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key, org.eclipse.jgit.lib.ObjectId rev) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled(); return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly(repo, rev).get(key); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( o, n) -> { externalIdCache.onUpdate(o, n, updatedExtIds); evictAccounts(updatedExtIds); }); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { updatedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(updatedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onUpdate(o, n, updatedExtIds); evictAccounts(updatedExtIds); }); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( rw, n) -> { externalIdCache.onUpdate(rw, n, updatedExtIds); evictAccounts(updatedExtIds); }); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); externalIdCache.onUpdate(o, n, updatedExtIds); evictAccounts(updatedExtIds); }
public void upsert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { checkLoaded();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( o, n) -> { externalIdCache.onUpdate(o, n, updatedExtIds); }); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdsDontExist(extIds);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onCreate(o, n, newExtIds); evictAccounts(newExtIds); }); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdsDontExist(extIds);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); newExtIds.add(insertedExtId); } }); externalIdCache.onCreate(o, n, newExtIds); evictAccounts(newExtIds); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdsDontExist(extIds);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> newExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( o, n) -> { externalIdCache.onCreate(o, n, newExtIds); evictAccounts(newExtIds); }); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdsDontExist(extIds); cacheUpdates.add(( o, n) -> { externalIdCache.onCreate(o, n, extIds); evictAccounts(newExtIds); }); }
public void insert(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdsDontExist(extIds); cacheUpdates.add(( o, n) -> { externalIdCache.onCreate(o, n, extIds); evictAccounts(extIds); }); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, removedExtIds, updatedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removedExtIds.stream(), updatedExtIds.stream()).collect(java.util.stream.Collectors.toSet())); }); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } } ); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, removedExtIds, updatedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removedExtIds.stream(), updatedExtIds.stream()).collect(java.util.stream.Collectors.toSet())); }); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); cacheUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, removedExtIds, updatedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removedExtIds.stream(), updatedExtIds.stream()).collect(java.util.stream.Collectors.toSet())); }); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(( o, n) -> { externalIdCache.onReplace(o, n, removedExtIds, updatedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removedExtIds.stream(), updatedExtIds.stream()).collect(java.util.stream.Collectors.toSet())); }); }
public void replaceByKeys(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toDelete,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException { checkLoaded(); checkExternalIdKeysDontExist(ExternalId.Key.from(toAdd), toDelete);java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> removedExtIds = newjava.util.HashSet<>();java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> updatedExtIds = newjava.util.HashSet<>(); noteMapUpdates.add(( rw, n) -> { for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.externalids.ExternalId removedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.remove(rw, noteMap, extIdKey, null); removedExtIds.add(removedExtId); } for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { com.google.gerrit.server.account.externalids.ExternalId insertedExtId = com.google.gerrit.server.account.externalids.ExternalIdNotes.upsert(rw, inserter, noteMap, extId); updatedExtIds.add(insertedExtId); } }); cacheUpdates.add(o, n -> { externalIdCache.onReplace(o, n, removedExtIds, updatedExtIds); evictAccounts(com.google.common.collect.Streams.concat(removedExtIds.stream(), updatedExtIds.stream()).collect(java.util.stream.Collectors.toSet())); }); }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { createdExternalIdsBuilder().add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { createdExternalIds.add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { addedExternalIdsBuilder().add(extId); return this; }
public com.google.gerrit.server.account.InternalUpdate.Builder addExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { createdExternalIdsBuilder().add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder addExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { externalIdsBuilder().add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder deleteExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { deletedExternalIdsBuilder().add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder deleteExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { deleteExternalIdsBuilder().add(extId); return this; }
public com.google.gerrit.server.account.InternalAccountUpdate.Builder deleteExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { deletedExternalIds.add(extId); return this; }
public com.google.gerrit.server.account.InternalUpdate.Builder deleteExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { deletedExternalIdsBuilder().add(extId); return this; }
public void deleteExternalId(com.google.gerrit.server.account.externalids.ExternalId extId) { deletedExternalIdsBuilder().add(extId); }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId); } }
@com.google.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId); } }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId.name()); } }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (!(noteMap.contains(noteId))) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId); } }
@com.google.gerrit.common.Nullable public com.google.gerrit.server.account.externalids.ExternalId get(com.google.gerrit.server.account.externalids.ExternalId.Key key) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); org.eclipse.jgit.lib.ObjectId noteId = key.sha1(); if (noteMap.contains(noteId)) { return null; } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); return com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId); } }
public staticjava.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { return extIds.stream().map(com.google.gerrit.server.account.externalids.ExternalId::key).collect(java.util.stream.Collectors.toSet()); }
public staticjava.util.Set<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { return extIds.stream().map(com.google.gerrit.server.account.externalids.ExternalId::key).collect(java.util.stream.Collectors.toSet()); }
public staticjava.util.List<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { return extIds.stream().map(com.google.gerrit.server.account.externalids.ExternalId::key).collect(java.util.stream.Collectors.toSet()); }
public staticjava.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { return extIds.stream().map(ExternalId::key).collect(java.util.stream.Collectors.toSet()); }
public staticjava.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> from(java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> extIds) { return extIds.stream().map(com.google.gerrit.server.account.externalids.ExternalId::key).collect((java.util.stream.Collectors.toSet()); }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), ("external id %s should be removed for account %s," + " but external id belongs to account %s"), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), ("external id %s should be removed for account %s," + (" but external id belongs to account %s"), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), ("external id %s should be removed for account %s, " + " but external id belongs to account %s"), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }
private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), (("external id %s should be removed for account %s," + " but external id belongs to account %s"), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }
private static void remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId!= null) { checkState(expectedAccountId.equals(extId.accountId()), ("external id %s should be removed for account %s," + " but external id belongs to account %s"), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); }java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), (u) -> u.update().setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); }java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), (u) -> u.update().setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); }java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); }java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), (u) -> u.update().setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); }java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), (u) -> u.update().setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder(); }
public static com.google.gerrit.server.account.InternalUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder(); }
private static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder(); }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder(); }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder();}
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } logDebug("Updating full name of caller"); try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (com.google.common.base.Strings.isNullOrEmpty(u.account().getFullName())) { u.update().setFullName(setFullNameTo); } }); if (account!= null) { user.getAccount().setFullName(account.getFullName()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { logWarn("Failed to update full name of caller", e); } }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } logDebug("Updating full name of caller"); try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (com.google.common.base.Strings.isNullOrEmpty(u.account().getFullName())) { u.update().setFullName(setFullNameTo); } }); if (account!= null) { user.getAccount().setFullName(account.getFullName()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { logWarn("Failed to update full name of caller", e); } }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } logDebug("Updating full name of caller"); try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), (u) -> { if (com.google.common.base.Strings.isNullOrEmpty(u.account().getFullName())) { u.update().setFullName(setFullNameTo); } }); if (account!= null) { user.getAccount().setFullName(account.getFullName()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { logWarn("Failed to update full name of caller", e); } }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } logDebug("Updating full name of caller"); try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (com.google.common.base.Strings.isNullOrEmpty(u.account().getFullName())) { u.update().setFullName(setFullNameTo); } }); if (account!= null) { user.getAccount().setFullName(account.getFullName()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { logWarn("Failed to update full name of caller", e); } }
private void updateAccountInfo() { if ((setFullNameTo) == null) { return; } logDebug("Updating full name of caller"); try { com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (com.google.common.base.Strings.isNullOrEmpty(u.account().getFullName())) { u.update().setFullName(setFullNameTo); } }); if (account!= null) { user.getAccount().setFullName(account.getFullName()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { logWarn("Failed to update full name of caller", e); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("account " + (extId.key().get())) + " in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, ( u) -> { if ((u.account().getPreferredEmail()) == null) { u.update().setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("account \"" + (extId.key().get())) + "\" in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, ( u) -> { if ((u.account().getPreferredEmail()) == null) { u.update().setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("externalid \"" + (extId.key().get())) + "\" in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, ( u) -> { if ((u.account().getPreferredEmail()) == null) { u.update().setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("External id \"" + (extId.key().get())) + "\" in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, ( u) -> { if ((u.account().getPreferredEmail()) == null) { u.update().setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException((("ExternalId \"" + (extId.key().get())) + "\" in use by another account")); } update(who, extId); } else { externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress())!= null) { accountsUpdateFactory.create().update(to, ( u) -> { if ((u.account().getPreferredEmail()) == null) { u.update().setPreferredEmail(who.getEmailAddress()); } }); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; }java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = newjava.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("extId \"" + (extIdKey.get())) + "\" in use by another account")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException((("extId \"" + (extIdKey.get())) + "\" not found")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email())!= null)) { accountsUpdateFactory.create().update(from, (u) -> { if ((u.account().getPreferredEmail())!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (u.account().getPreferredEmail().equals(extId.email())) { u.update().setPreferredEmail( "" ); break; } } } }); } }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; }java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = newjava.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("extId '" + (extIdKey.get())) + "' in use by another account")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException((("extId '" + (extIdKey.get())) + "' not found")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email())!= null)) { accountsUpdateFactory.create().update(from, (u) -> { if ((u.account().getPreferredEmail())!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (u.account().getPreferredEmail().equals(extId.email())) { u.update().setPreferredEmail( "" ); break; } } } }); } }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; }java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = newjava.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("extId \"" + (extIdKey.get())) + "\" in use by another account")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException((("extId \"" + (extIdKey.get())) + "\" not found")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email())!= null)) { accountsUpdateFactory.create().update(from, (u) -> { if ((u.account().getPreferredEmail())!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (u.account().getPreferredEmail().equals(extId.email())) { u.update().setPreferredEmail( ""); break; } } } }); } }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; }java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = newjava.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("extId '" + (extIdKey.get())) + "' in use by another account")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException((("extId '" + (extIdKey.get())) + "' not found")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email())!= null)) { accountsUpdateFactory.create().update(from, (u) -> { if ((u.account().getPreferredEmail())!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (u.account().getPreferredEmail().equals(extId.email())) { u.update().setPreferredEmail( ""); break; } } } }); } }
public void unlink(com.google.gerrit.reviewdb.client.Account.Id from,java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> extIdKeys) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (extIdKeys.isEmpty()) { return; }java.util.List<com.google.gerrit.server.account.externalids.ExternalId> extIds = newjava.util.ArrayList(extIdKeys.size()); for (com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey : extIdKeys) { com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(extIdKey); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("extId '" + (extIdKey.get())) + "' in use by another account")); } extIds.add(extId); } else { throw new com.google.gerrit.server.account.AccountException((("extId '" + (extIdKey.get())) + "' not found")); } } externalIdsUpdateFactory.create().delete(extIds); if (extIds.stream().anyMatch(( e) -> (e.email())!= null)) { accountsUpdateFactory.create().update(from, (u) -> { if ((u.account().getPreferredEmail())!= null) { for (com.google.gerrit.server.account.externalids.ExternalId extId : extIds) { if (u.account().getPreferredEmail().equals(extId.email())) { u.update().setPreferredEmail( "" ); break; } } } }); } } }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyInactive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( u) -> { if (!(u.account().isActive())) { alreadyInactive.set(true); } else { u.update().setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("account not active"); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyInactive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( u) -> { if (!(u.account().isActive())) { alreadyInactive.set(true); } else { u.update().setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("account not active"); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyInactive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, (u) -> { if (!(u.account().isActive())) { alreadyInactive.set(true); } else { u.update().setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("account not active"); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyInactive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, (u) -> { if (!(u.account().isActive())) { alreadyInactive.set(true); } else { u.update().setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("account not active"); } return com.google.gerrit.extensions.restapi.Response.none(); }
public com.google.gerrit.extensions.restapi.Response<?> deactivate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyInactive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( u) -> { if (!(u.account().isActive())) { alreadyInactive.set(true); } else { u.update().setActive(false); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (alreadyInactive.get()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("account not active"); } return com.google.gerrit.extensions.restapi.Response.none(); };
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyActive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( u) -> { if (u.account().isActive()) { alreadyActive.set(true); } else { u.update().setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return alreadyActive.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyActive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( u) -> { if (u.account().isActive()) { alreadyActive.set(true); } else { u.update().setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return alreadyActive.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyActive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, (u) -> { if (u.account().isActive()) { alreadyActive.set(true); } else { u.update().setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return alreadyActive.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyActive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, (u) -> { if (u.account().isActive()) { alreadyActive.set(true); } else { u.update().setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return alreadyActive.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> activate(com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyActive = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(accountId, ( u) -> { if (u.account().isActive()) { alreadyActive.set(true); } else { u.update().setActive(true); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Account not found"); } return alreadyActive.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
@org.junit.Before public void setUpInjector() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testing.InMemoryModule.newDefaultConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "trustedKey", com.google.common.collect.ImmutableList.of(com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpg.Fingerprint.toString(keyD().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule(cfg, com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, (u) -> u.update().setPreferredEmail("user@example.com")); user = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); storeRepo = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository(new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription("repo")); store = new com.google.gerrit.gpg.PublicKeyStore(storeRepo); }
@org.junit.Before public void setUpInjector() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testing.InMemoryModule.newDefaultConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "trustedKey", com.google.common.collect.ImmutableList.of(com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpg.Fingerprint.toString(keyD().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule(cfg, com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, (u) -> u.update().setPreferredEmail("user@example.com")); user = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); storeRepo = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository(new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription("repo")); store = new com.google.gerrit.gpg.PublicKeyStore(storeRepo); }
@org.junit.Before public void setUpInjector() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testing.InMemoryModule.newDefaultConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "trustedKey", com.google.common.collect.ImmutableList.of(com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpg.Fingerprint.toString(keyD().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule(cfg, com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, ( u) -> u.update().setPreferredEmail("user@example.com")); user = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); storeRepo = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository(new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription("repo")); store = new com.google.gerrit.gpg.PublicKeyStore(storeRepo); }
@org.junit.Before public void setUpInjector() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testing.InMemoryModule.newDefaultConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "trustedKey", com.google.common.collect.ImmutableList.of(com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpg.Fingerprint.toString(keyD().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule(cfg, com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, ( u) -> u.update().setPreferredEmail("user@example.com")); user = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); storeRepo = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository(new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription("repo")); store = new com.google.gerrit.gpg.PublicKeyStore(storeRepo); }
@org.junit.Before public void setUpInjector() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.testing.InMemoryModule.newDefaultConfig(); cfg.setInt("receive", null, "maxTrustDepth", 2); cfg.setStringList("receive", null, "trustedKey", com.google.common.collect.ImmutableList.of(com.google.gerrit.gpg.Fingerprint.toString(keyB().getPublicKey().getFingerprint()), com.google.gerrit.gpg.Fingerprint.toString(keyD().getPublicKey().getFingerprint()))); com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule(cfg, com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv())); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); accountsUpdate.create().update(userId, ( u ) -> u.update().setPreferredEmail("user@example.com")); user = reloadUser(); requestContext.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.gerrit.server.CurrentUser getUser() { return user; } @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } }); storeRepo = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository(new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription("repo")); store = new com.google.gerrit.gpg.PublicKeyStore(storeRepo); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyPreferred = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (email.equals(u.account().getPreferredEmail())) { alreadyPreferred.set(true); } else { u.update().setPreferredEmail(email); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return alreadyPreferred.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyPreferred = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (email.equals(u.account().getPreferredEmail())) { alreadyPreferred.set(true); } else { u.update().setPreferredEmail(email); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return alreadyPreferred.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyPreferred = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (email.equals(u.account().getPreferredEmail())) { alreadyPreferred.set(true); } else { u.update().setPreferredEmail(email); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Account not found"); } return alreadyPreferred.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyPreferred = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> { if (email.equals(u.account().getPreferredEmail())) { alreadyPreferred.set(true); } else { u.update().setPreferredEmail(email); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Account not found"); } return alreadyPreferred.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.concurrent.atomic.AtomicBoolean alreadyPreferred = newjava.util.concurrent.atomic.AtomicBoolean(false); com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), (u) -> { if (email.equals(u.account().getPreferredEmail())) { alreadyPreferred.set(true); } else { u.update().setPreferredEmail(email); } }); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return alreadyPreferred.get()? com.google.gerrit.extensions.restapi.Response.ok("") : com.google.gerrit.extensions.restapi.Response.created(""); }
protected void setUpDatabase() throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId();java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, (u) -> u.update().setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
protected void setUpDatabase() throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId();java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( u) -> u.update().setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
protected void setUpDatabase() throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId();java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, (u) -> u.update().setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
protected void setUpDatabase() throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId();java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( u) -> u.update().setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
void setUpDatabase() throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId();java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, (u) -> u.update().setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
@org.junit.Test public void pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged() throwsjava.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo")) + "@example.com"), "Foo");java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id);java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u) -> u.update().setPreferredEmail(noEmail)); accountIndexedCounter.clear(); grant(allUsers, userRef, Permission.PUSH, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, foo); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + ":userRef")); allUsersRepo.reset("userRef");java.lang.String status = "Push vacation"; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, foo.getIdent(), allUsersRepo, "Push account config", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(noEmail); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }
@org.junit.Test public void pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged() throwsjava.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo")) + "@example.com"), "Foo");java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id);java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u) -> u.update().setPreferredEmail(noEmail)); accountIndexedCounter.clear(); grant(allUsers, userRef, Permission.PUSH, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, foo); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + ":userRef")); allUsersRepo.reset("userRef");java.lang.String status = "Vacation"; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, foo.getIdent(), allUsersRepo, "Push account config", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(noEmail); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }
@org.junit.Test public void pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged() throwsjava.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo")) + "@example.com"), "Foo");java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id);java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u) -> u.update().setPreferredEmail(noEmail)); accountIndexedCounter.clear(); grant(allUsers, userRef, Permission.PUSH, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, foo); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + ":userRef")); allUsersRepo.reset("userRef");java.lang.String status = "Push vacation"; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, foo.getIdent(), allUsersRepo, "push account config", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(noEmail); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }
@org.junit.Test public void pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged() throwsjava.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo")) + "@example.com"), "Foo");java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id);java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u) -> u.update().setPreferredEmail(noEmail)); accountIndexedCounter.clear(); grant(allUsers, userRef, Permission.PUSH, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, foo); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + ":userRef")); allUsersRepo.reset("userRef");java.lang.String status = "Vacation"; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, foo.getIdent(), allUsersRepo, "push account config", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(noEmail); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }
@org.junit.Test public void pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged() throwsjava.lang.Exception { TestAccount foo = accountCreator.create(name("foo"), ((name("foo")) + "@example.com"), "Foo");java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.id);java.lang.String noEmail = "no.email"; accountsUpdate.create().update(foo.id, (u) -> u.update().setPreferredEmail(noEmail)); accountIndexedCounter.clear(); grant(allUsers, userRef, Permission.PUSH, false, com.google.gerrit.acceptance.api.accounts.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers, foo); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + ":userRef")); allUsersRepo.reset("userRef");java.lang.String status = "Vacation"; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, status); pushFactory.create(db, foo.getIdent(), allUsersRepo, "Create account config", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(userRef).assertOkStatus(); accountIndexedCounter.assertReindexOf(foo); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.email).isEqualTo(noEmail); assertThat(info.name).isEqualTo(foo.fullName); assertThat(info.status).isEqualTo(status); }
@org.junit.Test public void updateAccountWithoutAccountConfigNoteDb() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward = accountCreator.create(); assertUserBranchWithoutAccountConfig(anonymousCoward.getId());java.lang.String status = "OOO"; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(anonymousCoward.getId(), (u) -> u.update().setStatus(status)); assertThat(account).isNotNull(); assertThat(account.getFullName()).isNull(); assertThat(account.getStatus()).isEqualTo(status); assertUserBranch(anonymousCoward.getId(), null, status); }
@org.junit.Test public void updateAccountWithoutAccountConfigNoteDb() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward = accountCreator.create(); assertUserBranchWithoutAccountConfig(anonymousCoward.getId());java.lang.String status = "OOO"; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(anonymousCoward.getId(), (u) -> u.update().setStatus(status)); assertThat(account).isNotNull(); assertThat(account.getFullName()).isNull(); assertThat(account.getStatus()).isEqualTo(status); assertUserBranch(anonymousCoward.getId(), null, status); }
@org.junit.Test public void updateAccountWithoutAccountConfigNoteDb() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward = accountCreator.create(); assertUserBranchWithoutAccountConfig(anonymousCoward.getId());java.lang.String status = "OOO"; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(anonymousCoward.getId(), (u) -> u.update()).setStatus(status); assertThat(account).isNotNull(); assertThat(account.getFullName()).isNull(); assertThat(account.getStatus()).isEqualTo(status); assertUserBranch(anonymousCoward.getId(), null, status); }
@org.junit.Test public void updateAccountWithoutAccountConfigNoteDb() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward = accountCreator.create(); assertUserBranchWithoutAccountConfig(anonymousCoward.getId());java.lang.String status = "OOO"; com.google.gerrit.reviewdb.client.Account account = accountUpdate.create().update(anonymousCoward.getId(), (u) -> u.update().setStatus(status)); assertThat(account).isNotNull(); assertThat(account.getFullName()).isNull(); assertThat(account.getStatus()).isEqualTo(status); assertUserBranch(anonymousCoward.getId(), null, status); }
@org.junit.Test public void updateAccountWithoutAccountConfigNoteDb() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount anonymousCoward = accountCreator.create(); assertUserBranchWithoutAccountConfig(anonymousCoward.getId());java.lang.String status = "OOO"; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(anonymousCoward.getId(), (u) -> u.update()); assertThat(account).isNotNull(); assertThat(account.getFullName()).isNull(); assertThat(account.getStatus()).isEqualTo(status); assertUserBranch(anonymousCoward.getId(), null, status); }
@org.junit.Test public void lookUpByPreferredEmail() throwsjava.lang.Exception {java.lang.String prefix = "foo.preferred";java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, ( u) -> u.update().setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); }
@org.junit.Test public void lookUpByPreferredEmail() throwsjava.lang.Exception {java.lang.String prefix = "foo.preferred";java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, (u) -> u.update().setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); }
@org.junit.Test public void lookUpByPreferredEmail() throwsjava.lang.Exception {java.lang.String prefix = "foo.preferred";java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, ( u) -> u.update().setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); }
@org.junit.Test public void lookUpByPreferredEmail() throwsjava.lang.Exception {java.lang.String prefix = "foo.preferred";java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, (u) -> u.update().setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); }
@org.junit.Test public void lookUpByPreferredEmail() throwsjava.lang.Exception {java.lang.String prefix = "foo.preferred";java.lang.String prefEmail = prefix + "@example.com"; com.google.gerrit.acceptance.TestAccount foo = accountCreator.create(name("foo")); accountsUpdate.create().update(foo.id, ( u) -> u.update().setPreferredEmail(prefEmail)); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> accountsByPrefEmail = emails.getAccountFor(prefEmail); assertThat(accountsByPrefEmail).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(accountsByPrefEmail)).isEqualTo(foo.id); accountsByPrefEmail = emails.getAccountFor(prefix); assertThat(accountsByPrefEmail).isEmpty(); accountsByPrefEmail = emails.getAccountFor(prefEmail.toUpperCase(java.util.Locale.US)); assertThat(accountsByPrefEmail).isEmpty(); accountsUpdate.create().update(foo.id, ( u) -> u.update().setPreferredEmail(prefEmail)); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); }java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setFullName(com.google.common.base.Strings.nullToEmpty(newName))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); }java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setFullName(com.google.common.base.Strings.nullToEmpty(newName))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); }java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setFullName(com.google.common.base.Strings.nullToEmpty(newName))).get(); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); }java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setFullName(com.google.common.base.Strings.nullToEmpty(newName))).get(); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); }java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setFullName(com.google.common.base.Strings.nullToEmpty(newName))).get(); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName())? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getName()); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate> consumer) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.common.collect.ImmutableList.of(consumer)); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate>> consumer) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.common.collect.ImmutableList.of(consumer)); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.reviewdb.client.Account.Update> consumer) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.common.collect.ImmutableList.of(consumer)); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.reviewdb.client.Account.Id> consumer) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.common.collect.ImmutableList.of(consumer)); }
public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.reviewdb.client.Account.Id> consumer) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update(accountId, com.google.common.collect.ImmutableList.of(consumer))); }
@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.List<java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate>> consumers) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (consumers.isEmpty()) { return null; } com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId);java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = accountConfig.getLoadedAccount(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.get()); consumers.stream().forEach(( c) -> c.accept(accountUpdate)); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commit(accountConfig); } return accountConfig.getLoadedAccount().orElse(null); }
@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.List<java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate>> consumers) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (consumers.isEmpty()) { return null; } com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId);java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = accountConfig.getLoadedAccount(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.get()); consumers.stream().forEach(c -> c.accept(accountUpdate)); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commit(accountConfig); } return accountConfig.getLoadedAccount().orElse(null); }
@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.List<java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate>> consumers) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (consumers.isEmpty()) { return null; } com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.get()); consumers.stream().forEach(( c) -> c.accept(accountUpdate)); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commit(accountConfig); } return accountConfig.getLoadedAccount().orElse(null); }
@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.List<java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate>> consumers) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (consumers.isEmpty()) { return null; } com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId);java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = accountConfig.getLoadedAccount(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.get()); consumers.stream().forEach(( c) -> c.accept(accountUpdate)); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commit(accountConfig); } return accountConfig.getLoadedAccount().orElse(account); }
@com.google.gerrit.common.Nullable public com.google.gerrit.reviewdb.client.Account update(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.List<java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate>> consumers) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (consumers.isEmpty()) { return null; } com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId);java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = accountConfig.getLoadedAccount(); if (account.isPresent()) { com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account.get()); consumers.stream().forEach(( c) -> c.accept(accountUpdate)); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commit(accountConfig); } return accountConfig.getLoadedAccount(); }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); init.accept(account); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commitNew(accountConfig); return accountConfig.getLoadedAccount().get(); }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate>> init) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); init.accept(account); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commitNew(accountConfig); return accountConfig.getLoadedAccount().get(); }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); init.accept(account); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); commitNew(accountConfig); return accountConfig.getLoadedAccount().get(); }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); init.accept(accountUpdate); accountConfig.setAccountUpdate(accountUpdate.buildUpdate()); return accountConfig.getLoadedAccount().get(); }
public com.google.gerrit.reviewdb.client.Account insert(com.google.gerrit.reviewdb.client.Account.Id accountId,java.util.function.Consumer<com.google.gerrit.server.account.AccountUpdate> init) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.AccountConfig accountConfig = read(accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(); com.google.gerrit.server.account.AccountUpdate accountUpdate = com.google.gerrit.server.account.AccountUpdate.create(account); init.accept(accountUpdate); return accountConfig.getLoadedAccount().get(); }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if (revision)!= null) { commit.setMessage("Uploaded account"); } else { commit.setMessage("Uploaded account"); } commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setCommitter(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig.writeToConfig(accountUpdate.get(), cfg); } saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); loadedAccount =java.util.Optional.of(parse(cfg, null)); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if (accountUpdate.isPresent()) { com.google.gerrit.server.account.AccountConfig.writeToConfig(accountUpdate.get(), cfg); } saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if (revision)!= null) { commit.setMessage("Uploaded account"); } else { commit.setMessage("Uploaded account"); } commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setCommitter(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { checkLoaded(); if (revision)!= null) { commit.setMessage("Uploaded account"); } else { commit.setMessage("Uploaded account"); } commit.setAuthor(new org.eclipse.jgit.lib.PersonIdent(commit.getAuthor(), registeredOn)); commit.setCommitter(new org.eclipse.jgit.lib.PersonIdent(commit.getCommitter(), registeredOn)); saveConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, commit); return true; }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount =java.util.Optional.of(account); this.accountUpdate =java.util.Optional.of(com.google.gerrit.server.account.InternalAccountUpdate.builder().setActive(account.isActive()).setFullName(com.google.common.base.Strings.nullToEmpty(account.getFullName())).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getStatus())).build()); this. registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount =java.util.Optional.of(account); this. accountUpdate =java.util.Optional.of(com.google.gerrit.server.account.InternalAccountUpdate.builder().setActive(account.isActive()).setFullName(com.google.common.base.Strings.nullToEmpty(account.getFullName())).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getStatus())).build()); this. registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount =java.util.Optional.of(account); this.accountUpdate =java.util.Optional.of(com.google.gerrit.server.account.InternalAccountUpdate.builder().setActive(account.isActive()).setFullName(com.google.common.base.Strings.nullToEmpty(account.getFullName())).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getStatus())).build()); this.registeredOn = account.getRegisteredOn(); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount =java.util.Optional.of(account); this.accountUpdate =java.util.Optional.of(com.google.gerrit.server.account.InternalAccountUpdate.builder().setActive(account.isActive()).setFullName(com.google.common.base.Strings.nullToEmpty(account.getFullName())).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getStatus())).build()); }
public void setAccount(com.google.gerrit.reviewdb.client.Account account) { checkLoaded(); this.loadedAccount =java.util.Optional.of(account); this. accountUpdate =java.util.Optional.of(com.google.gerrit.server.account.InternalAccountUpdate.builder().setActive(account.isActive()).setFullName(com.google.common.base.Strings.nullToEmpty(account.getFullName())).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(account.getPreferredEmail())).setStatus(com.google.common.base.Strings.nullToEmpty(account.getStatus())).build()); this.registeredOn = account.getRegisteredOn(); }
private Account.Id createAccountOutsideRequestContext(java.lang.String username,java.lang.String fullName,java.lang.String email, boolean active) throwsjava.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( u) -> { u.update().setFullName(com.google.common.base.Strings.nullToEmpty(fullName)); u.update().setPreferredEmail(com.google.common.base.Strings.nullToEmpty(email)); u.setActive(active); }); return id; } }
private Account.Id createAccountOutsideRequestContext(java.lang.String username,java.lang.String fullName,java.lang.String email, boolean active) throwsjava.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, (u) -> { u.update().setFullName(com.google.common.base.Strings.nullToEmpty(fullName)); u.update().setPreferredEmail(com.google.common.base.Strings.nullToEmpty(email)); u.setActive(active); }); return id; } }
private Account.Id createAccountOutsideRequestContext(java.lang.String username,java.lang.String fullName,java.lang.String email, boolean active) throwsjava.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( u) -> { u.update().setFullName(com.google.common.base.Strings.nullToEmpty(fullName)).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(email)).setActive(active); }); return id; } }
Account.Id createAccountOutsideRequestContext(java.lang.String username,java.lang.String fullName,java.lang.String email, boolean active) throwsjava.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email!= null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( u) -> { u.update().setFullName(com.google.common.base.Strings.nullToEmpty(fullName)); u.update().setPreferredEmail(com.google.common.base.Strings.nullToEmpty(email)); u.setActive(active); }); return id; } }
private Account.Id createAccountOutsideRequestContext(java.lang.String username,java.lang.String fullName,java.lang.String email, boolean active) throwsjava.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { return accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); } }
@org.junit.Test public void checkMetaId() throwsjava.lang.Exception { assertThat(accounts.get(admin.getId()).getMetaId()).isEqualTo(getMetaId(admin.getId())); com.google.gerrit.server.account.AccountsUpdate au = accountsUpdate.create(); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = au.insert(accountId, ( u) -> u.setFullName("foo")); assertThat(account.getMetaId()).isEqualTo(getMetaId(accountId)); com.google.gerrit.reviewdb.client.Account updatedAccount = au.update(accountId, ( u) -> u.setFullName("foo")); assertThat(account.getMetaId()).isNotEqualTo(updatedAccount.getMetaId()); assertThat(updatedAccount.getMetaId()).isEqualTo(getMetaId(accountId)); }
@org.junit.Test public void checkMetaId() throwsjava.lang.Exception { assertThat(accounts.get(admin.getId()).getMetaId()).isEqualTo(getMetaId(admin.getId())); com.google.gerrit.server.account.AccountsUpdate au = accountsUpdate.create(); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = au.insert(accountId, ( u) -> { }); assertThat(account.getMetaId()).isEqualTo(getMetaId(accountId)); com.google.gerrit.reviewdb.client.Account updatedAccount = au.update(accountId, ( u) -> u.update().setFullName("foo")); assertThat(account.getMetaId()).isNotEqualTo(updatedAccount.getMetaId()); assertThat(updatedAccount.getMetaId()).isEqualTo(getMetaId(accountId)); }
@org.junit.Test public void checkMetaId() throwsjava.lang.Exception { assertThat(accounts.get(admin.getId()).getMetaId()).isEqualTo(getMetaId(admin.getId())); com.google.gerrit.server.account.AccountsUpdate au = accountsUpdate.create(); com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(seq.nextAccountId()); com.google.gerrit.reviewdb.client.Account account = au.insert(accountId, ( u) -> u.setFullName("foo")); assertThat(account.getMetaId()).isEqualTo(getMetaId(accountId)); com.google.gerrit.reviewdb.client.Account updatedAccount = au.update(accountId, (u) -> u.setFullName("foo")); assertThat(account.getMetaId()).isNotEqualTo(updatedAccount.getMetaId()); assertThat(updatedAccount.getMetaId()).isEqualTo(getMetaId(accountId)); }
@org.junit.Test public void checkMetaId() throwsjava.lang.Exception { assertThat(accounts.get(admin.getId()).getMetaId()).isEqualTo(getMetaId(admin.getId())); }
@org.junit.Test public void checkMetaMetaId() throwsjava.lang.Exception { assertThat(accounts.get(admin.getId()).getMetaId()).isEqualTo(getMetaId(admin.getId())); }
private void invoke(java.lang.String... parameters) throwsjava.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) {java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err);java.lang.System.exit(1); return; } if ((revnumberFile)!= null) { try (java.io.BufferedReader reader =java.nio.file.Files.newBufferedReader(revnumberFile.toPath())) { revnumber = reader.readLine(); } } if (mktmp) { tmpdir =java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } if (bazel) { renderFiles(inputFiles, null); } else { try (java.util.zip.ZipOutputStream zip = newjava.util.zip.ZipOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile)))) { renderFiles(inputFiles, zip);java.io.File[] cssFiles = tmpdir.listFiles(newjava.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir,java.lang.String name) { return name.endsWith(".css"); } }); for (java.io.File css : cssFiles) { AsciiDoctor.zipFile(css, css.getName(), zip); } } } }
void invoke(java.lang.String... parameters) throwsjava.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) {java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err);java.lang.System.exit(1); return; } if ((revnumberFile)!= null) { try (java.io.BufferedReader reader =java.nio.file.Files.newBufferedReader(revnumberFile.toPath())) { revnumber = reader.readLine(); } } if (mktmp) { tmpdir =java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } if (bazel) { renderFiles(inputFiles, null); } else { try (java.util.zip.ZipOutputStream zip = newjava.util.zip.ZipOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile)))) { renderFiles(inputFiles, zip);java.io.File[] cssFiles = tmpdir.listFiles(newjava.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir,java.lang.String name) { return name.endsWith(".css"); } }); for (java.io.File css : cssFiles) { AsciiDoctor.zipFile(css, css.getName(), zip); } } } }
void invoke(java.lang.String... parameters) throwsjava.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "ERROR: FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) {java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err);java.lang.System.exit(1); return; } if ((revnumberFile)!= null) { try (java.io.BufferedReader reader =java.nio.file.Files.newBufferedReader(revnumberFile.toPath())) { revnumber = reader.readLine(); } } if (mktmp) { tmpdir =java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } if (bazel) { renderFiles(inputFiles, null); } else { try (java.util.zip.ZipOutputStream zip = newjava.util.zip.ZipOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile)))) { renderFiles(inputFiles, zip);java.io.File[] cssFiles = tmpdir.listFiles(newjava.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir,java.lang.String name) { return name.endsWith(".css"); } }); for (java.io.File css : cssFiles) { AsciiDoctor.zipFile(css, css.getName(), zip); } } } }
public void invoke(java.lang.String... parameters) throwsjava.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) {java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err);java.lang.System.exit(1); return; } if ((revnumberFile)!= null) { try (java.io.BufferedReader reader =java.nio.file.Files.newBufferedReader(revnumberFile.toPath())) { revnumber = reader.readLine(); } } if (mktmp) { tmpdir =java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } if (bazel) { renderFiles(inputFiles, null); } else { try (java.util.zip.ZipOutputStream zip = newjava.util.zip.ZipOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile)))) { renderFiles(inputFiles, zip);java.io.File[] cssFiles = tmpdir.listFiles(newjava.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir,java.lang.String name) { return name.endsWith(".css"); } }); for (java.io.File css : cssFiles) { AsciiDoctor.zipFile(css, css.getName(), zip); } } } }
private void invoke(java.lang.String... parameters) throwsjava.io.IOException { org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(this); try { parser.parseArgument(parameters); if (inputFiles.isEmpty()) { throw new org.kohsuke.args4j.CmdLineException(parser, "FAILED: input file missing"); } } catch (org.kohsuke.args4j.CmdLineException e) {java.lang.System.err.println(e.getMessage()); parser.printUsage(java.lang.System.err);java.lang.System.exit(1); return; } if ((revnumberFile)!= null) { try (java.io.BufferedReader reader =java.nio.file.Files.newBufferedReader(revnumberFile.toPath())) { revnumber = reader.readLine(); } } if (mktmp) { tmpdir =java.nio.file.Files.createTempDirectory("asciidoctor-").toFile(); } if (bazel) { renderFiles(inputFiles, null); } else { try (java.util.zip.ZipOutputStream zip = newjava.util.zip.ZipOutputStream(java.nio.file.Files.newOutputStream(java.nio.file.Paths.get(zipFile)))) { renderFiles(inputFiles, zip);java.io.File[] cssFiles = tmpdir.listFiles(newjava.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File dir,java.lang.String name) { return name.endsWith(".css"); } }); for (java.io.File css : cssFiles) { AsciiDoctor.zipFile(css, css.getName(), zip); } } } } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { throw new com.google.gwtorm.server.OrmException(e); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) {java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e.getCause(); } throw new com.google.gwtorm.server.OrmException(t); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(com.google.gerrit.server.update.RetryHelper.defaults(), action); }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(com.google.gerrit.server.update.RetryHelper.defaults(), ( t) -> action.call()); }
< < < < < < <
private <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.github.rholder.retry.Retryer<T> retryer) throwsjava.lang.Throwable { try { return retryer.call(() -> changeAction.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause())!= null) { throw e.getCause(); } throw e; } }
private <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction <T> changeAction, com.github.rholder.retry.Retryer<T> retryer) throwsjava.lang.Throwable { try { return retryer.call(() -> changeAction.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause())!= null) { throw e.getCause(); } throw e; } }
private <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.github.rholder.retry.Retryer <T> retryer) throwsjava.lang.Throwable { try { return retryer.call(() -> changeAction.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause())!= null) { throw e.getCause(); } throw e; } }
private <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.github.rholder.retry.Retryer<T> retryer) throwsjava.lang.Throwable { try { return retryer.call(() -> changeAction.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } throw e; } }
private <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.github.rholder.retry.Retryer<T> retryer) throwsjava.lang.Throwable { try { return retryer.call(() -> changeAction.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause())!= null) { throw e.getCause (); } throw e; } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) {java.lang.Throwable t = e; if ((e.getCause())!= null) { t = e.getCause(); } throw new com.google.gwtorm.server.OrmException(t); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { throw new com.google.gwtorm.server.OrmException(e); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(),java.io.IOException.class); throw new com.google.gwtorm.server.OrmException(e); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); return retryerBuilder.build().call(() -> action.call()); }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(com.google.gerrit.server.update.RetryHelper.defaults(), action, exceptionPredicate); }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, ( t) -> { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }); retryerBuilder.withRetryListener(listener); return execute(changeAction, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!migration.disableChangeReviewDb())) { return execute(changeAction, com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, ( t) -> { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }); retryerBuilder.withRetryListener(listener); return execute(changeAction, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
<T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, ( t) -> { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }); retryerBuilder.withRetryListener(listener); return execute(changeAction, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
<T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!migration.disableChangeReviewDb())) { return execute(changeAction, com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, ( t) -> { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }); retryerBuilder.withRetryListener(listener); return execute(changeAction, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
< T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.google.gerrit.server.update.RetryHelper.Options opts) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { if (!(migration.disableChangeReviewDb())) { return execute(changeAction, com.github.rholder.retry.RetryerBuilder.<T>newBuilder().build()); } com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, ( t) -> { if (t instanceof com.google.gerrit.server.update.UpdateException) { t = t.getCause(); } return t instanceof com.google.gerrit.server.git.LockFailureException; }); retryerBuilder.withRetryListener(listener); return execute(changeAction, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.server.update.UpdateException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(t); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(action, ( t) -> t instanceof com.google.gerrit.server.update.LockFailureException); }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(action, (( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute(action, null); }
private void recursivelyExpandGroups(finaljava.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, finaljava x.naming.directory.DirContext ctx, finaljava.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java x.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { finaljava x.naming.Name compositeGroupName = newjava x.naming.CompositeName().add(groupDN); finaljava x.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in!= null) { finaljava x.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java x.lang.String) (groups.next()))); } } catch (java x.naming.PartialResultException e) { } } } catch (java x.naming.NamingException e) { LdapRealm.log.warn(("Could not find account " + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }
private void recursivelyExpandGroups(finaljava.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, finaljava x.naming.directory.DirContext ctx, finaljava.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { finaljava x.naming.Name compositeGroupName = newjava x.naming.CompositeName().add(groupDN); finaljava x.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in!= null) { finaljava x.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java x.lang.String) (groups.next()))); } } catch (java x.naming.PartialResultException e) { } } } catch (java x.naming.NamingException e) { LdapRealm.log.warn(("Could not find account " + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }
private void recursivelyExpandGroups(finaljava.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, finaljava x.naming.directory.DirContext ctx, finaljava.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java x.naming.Name> dns = com.google.common.collect.ImmutableSet.builder(); try { finaljava x.naming.Name compositeGroupName = newjava x.naming.CompositeName().add(groupDN); finaljava x.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in!= null) { finaljava x.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java x.lang.String) (groups.next()))); } } catch (java x.naming.PartialResultException e) { } } } catch (java x.naming.NamingException e) { LdapRealm.log.warn(("Could not find account " + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }
private void recursivelyExpandGroups(finaljava.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, finaljava x.naming.directory.DirContext ctx, finaljava.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java x.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { finaljava x.naming.Name compositeGroupName = newjava x.naming.CompositeName().add(groupDN); finaljava x.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in!= null) { finaljava x.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java x.lang.String) (groups.next()))); } } catch (java x.naming.PartialResultException e) { } } } catch (java x.naming.NamingException e) { LdapRealm.log.warn(("Could not find account " + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java x.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }
private void recursivelyExpandGroups(finaljava.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, finaljava x.naming.directory.DirContext ctx, finaljava x.naming.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField)!= null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java x.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { finaljava x.naming.Name compositeGroupName = newjava x.naming.CompositeName().add(groupDN); finaljava x.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in!= null) { finaljava x.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java x.lang.String) (groups.next()))); } } catch (java x.naming.PartialResultException e) { } } } catch (java x.naming.NamingException e) { LdapRealm.log.warn(("Could not find account " + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.restapi.change.FileResource r);
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.api.change.FileResource r);
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.api.changes.FileResource r);
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.restapi.change.FileResource r);
com.google.gerrit.server.api.changes.FileApiImpl create(com.google.gerrit.server.api.changes.ChangeResource r);
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); }
@java @java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.api.group.SubgroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescription()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.memberDescription()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getMemberDescriptions()); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.VoteResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.VoteResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.VoteResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.changes.VoteResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.changes.ChangeVoteResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.restapi.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("restricted access on non-current patch set"); } return new com.google.gerrit.server.restapi.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("revision access on non-current patch set"); } return new com.google.gerrit.server.restapi.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public com.google.gerrit.server.api.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("restricted access on non-current patch set"); } return new com.google.gerrit.server.api.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("can't access on non-current patch set"); } return new com.google.gerrit.server.restapi.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public com.google.gerrit.server.api.change.VoteResource parse(com.google.gerrit.server.change.ReviewerResource reviewer, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (((reviewer.getRevisionResource())!= null) && (!(reviewer.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("restricted access on non-current patch set"); } return new com.google.gerrit.server.restapi.change.VoteResource(reviewer, id.get()); }
@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; }java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user.isIdentifiedUser())) || (!(membershipsOf(user.asIdentifiedUser()).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup account %s in LDAP", groupDn), e); return null; } } finaljava.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override publicjava.lang.String getName() { return name; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getEmailAddress() { return null; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getUrl() { return null; } }; }
java @java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; }java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user.isIdentifiedUser())) || (!(membershipsOf(user.asIdentifiedUser()).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup account %s in LDAP", groupDn), e); return null; } } finaljava.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override publicjava.lang.String getName() { return name; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getEmailAddress() { return null; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getUrl() { return null; } }; }
@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; } finaljava.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user.isIdentifiedUser())) || (!(membershipsOf(user.asIdentifiedUser()).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup account %s in LDAP", groupDn), e); return null; } } finaljava.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override publicjava.lang.String getName() { return name; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getEmailAddress() { return null; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getUrl() { return null; } }; }
java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; }java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user.isIdentifiedUser())) || (!(membershipsOf(user.asIdentifiedUser()).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup account %s in LDAP", groupDn), e); return null; } } finaljava.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override publicjava.lang.String getName() { return name; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getEmailAddress() { return null; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getUrl() { return null; } }; }
@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; }java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user.isIdentifiedUser())) || (!(membershipsOf(user.asIdentifiedUser()).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("error lookup account %s in LDAP", groupDn), e); return null; } } finaljava.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override publicjava.lang.String getName() { return name; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getEmailAddress() { return null; } @java.lang.Override @com.google.gerrit.common.Nullable publicjava.lang.String getUrl() { return null; } }; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.SetDashboardInput in = new com.google.gerrit.extensions.common.SetDashboardInput(); in.commitMessage = (input!= null)? input.commitMessage : null; return defaultSetter.get().apply(resource, in); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi. project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.SetDashboardInput in = new com.google.gerrit.extensions.common.SetDashboardInput(); in.commitMessage = (input!= null)? input.commitMessage : null; return defaultSetter.get().apply(resource, in); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server. restapi. project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { com.google.gerrit.extensions.common.SetDashboardInput in = new com.google.gerrit.extensions.common.SetDashboardInput(); in.commitMessage = (input!= null)? input.commitMessage : null; return defaultSetter.get().apply(resource, in); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi. project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@org.junit.Test public void updateGroupNamesWithEmptyCollectionClearsAllNotes() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("a", "a-1", "b", "b-2"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).isEmpty(); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).message().isEqualTo("Checking account names"); }
@org.junit.Test public void updateGroupNamesWithEmptyCollectionClearsAllNotes() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("a", "a-1", "b", "b-2"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).isEmpty(); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).message().isEqualTo("No account names"); }
@org.junit.Test public void updateGroupNamesWithEmptyCollectionClearsAllNotes() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("a", "a-1", "b", "b-2"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).isEmpty(); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).message().isEqualTo("Update account names"); }
@org.junit.Test public void updateGroupNamesWithEmptyCollectionClearsAllNotes() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("a", "a-1", "b", "b-2"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).isEmpty(); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).message().isEqualTo("Please select account names"); }
@org.junit.Test public void updateGroupNamesWithEmptyCollectionClearsAllNotes() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("a", "a-1", "b", "b-2"); updateGroupNames(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).isEmpty(); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(2); assertThat(log.get(1)).message().isEqualTo("Please enter valid account names"); }
@org.junit.Test public void emptyGroupName() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup(""); updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("", "-1"); assertThat(readNameNote(g)).isEqualTo("GroupName = -1 = "); }
@org.junit.Test public void emptyGroupName() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup(""); updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("", "-1"); assertThat(readNameNote(g)).isEqualTo("GroupName = -1"); }
@org.junit.Test public void emptyGroupName() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup(""); updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("", "-1"); assertThat(readNameNote(g)).isEqualTo("GroupName = -1\n"); }
@org.junit.Test public void emptyGroupName() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup(""); updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("", "-1"); assertThat(readNameNote(g)).isEqualTo("Group = -1 = "); }
@org.junit.Test public void emptyGroupName() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup(""); updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("", "-1"); assertThat(readNameNote(g)).isEqualTo("GroupName = -1 ="); }
@org.junit.Test public void updateGroupNames() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo("Update 2 account names"); assertThat(log.get(0)).author().matches(ident); assertThat(log.get(0)).committer().matches(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("a", "a-1", "b", "b-2");java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g1, g2); log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).commit().isEqualTo(commit); }
@org.junit.Test public void updateGroupNames() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo("Update 2 account names"); assertThat(log.get(0)).author().matches(ident); assertThat(log.get(0)).committer().matches(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("a", "a-1", "b", "b-2");java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g1, g2); log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).commit(); }
@org.junit.Test public void updateGroupNames() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).parents().isEmpty(); assertThat(log.get(0)).message().isEqualTo("Update 2 account names"); assertThat(log.get(0)).author().matches(ident); assertThat(log.get(0)).committer().matches(ident); assertThat(com.google.gerrit.server.group.db.testing.GroupTestUtil.readNameToUuidMap(repo)).containsExactly("a", "a-1", "b", "b-2");java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g1, g2); log = log(); assertThat(log).hasSize(1); assertThat(log.get(0)).commit().isEqualTo( commit); }
@org.junit.Test public void updateGroupNames() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2);java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g1, g2); assertThat(commit).isEqualTo(commit); }
@org.junit.Test public void updateGroupNames() throwsjava.lang.Exception { com.google.gerrit.common.data.GroupReference g1 = newGroup("a"); com.google.gerrit.common.data.GroupReference g2 = newGroup("b"); org.eclipse.jgit.lib.PersonIdent ident = com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(); updateGroupNames(ident, g1, g2);java.lang.String commit = log.get(0).commit; updateGroupNames(com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent(), g1, g2); assertThat(commit).isEqualTo(commit); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.MemberResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi. group.MemberResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.MemberResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.api.group.MemberResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Group.MemberResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.restapi.group.AddMembers.PutMember create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddMembers.PutMember(put, id.get()); }
@java.lang.Override public com.google.gerrit.server.api.group.AddMembers.PutMember create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.api.group.AddMembers.PutMember(put, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.group.AddMembers.PutMember create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddMembers.PutMember(put, id); }
@java.lang.Override public com.google.gerrit.server.restapi.api.group.AddMembers.PutMember create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddMembers.PutMember(put, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.Group.AddMembers.PutMember create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddMembers.PutMember(put, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.group.MemberResource parse(com.google.gerrit.server.restapi.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server.restapi.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.restapi.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.group.MemberResource parse(com.google.gerrit.server.restapi.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server.restapi.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.restapi.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi. group.MemberResource parse(com.google.gerrit.server.restapi.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server.restapi.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.restapi.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.api.group.MemberResource parse(com.google.gerrit.server.restapi.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server.restapi.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.restapi.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.group.MemberResource parse(com.google.gerrit.server.restapi.group.GroupResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal group = parent.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.server.IdentifiedUser user = accounts.parse(TopLevelResource.INSTANCE, id).getUser(); if ((parent.getControl().canSeeMember(user.getAccountId())) && (com.google.gerrit.server. restapi.group.MembersCollection.isMember(group, user))) { return new com.google.gerrit.server.restapi.group.MemberResource(parent, user); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return groups.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return group.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.FixResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FixResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.FixResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.ChangeFixResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Change.FixResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.api.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes();java.util.List<com.google.gerrit.reviewdb.client.RobotComment> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComments) { for (com.google.gerrit.reviewdb.client.FixSuggestion fixSuggestion : robotComment.fixSuggestions) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.restapi.change.FixResource(revisionResource, fixSuggestion.replacements); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes();java.util.List<com.google.gerrit.reviewdb.client.RobotComment> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComments) { for (com.google.gerrit.reviewdb.client.FixSuggestion fixSuggestion : robotComment.fixSuggestions) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.restapi.change.FixResource(revisionResource, fixSuggestion.replacements); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes();java.util.List<com.google.gerrit.reviewdb.client.RobotComment> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComments) { for (com.google.gerrit.reviewdb.client.FixSuggestion fixSuggestion : robotComment.fixSuggestions) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.restapi.change.FixResource(revisionResource, fixSuggestion.replacements); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.api.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes();java.util.List<com.google.gerrit.reviewdb.client.RobotComment> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComments) { for (com.google.gerrit.reviewdb.client.FixSuggestion fixSuggestion : robotComment.fixSuggestions) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.restapi.change.FixResource(revisionResource, fixSuggestion.replacements); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.FixResource parse(com.google.gerrit.server.change.RevisionResource revisionResource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String fixId = id.get(); com.google.gerrit.server.notedb.ChangeNotes changeNotes = revisionResource.getNotes();java.util.List<com.google.gerrit.reviewdb.client.RobotComment> robotComments = commentsUtil.robotCommentsByPatchSet(changeNotes, revisionResource.getPatchSet().getId()); for (com.google.gerrit.reviewdb.client.RobotComment robotComment : robotComments) { for (com.google.gerrit.reviewdb.client.FixSuggestion fixSuggestion : robotComment.fixSuggestions) { if (java.util.Objects.equals(fixId, fixSuggestion.fixId)) { return new com.google.gerrit.server.restapi.change.FixResource(revisionResource, fixSuggestion.replacements); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("topic length exceeds the limit (%s)", ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.restapi.change.PutTopic.Op op = new com.google.gerrit.server.restapi.change.PutTopic.Op((input!= null? input : new TopicInput())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName)? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("topic length exceeds the limit (%s)", ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.restapi.change.PutTopic.Op op = new com.google.gerrit.server.restapi.change.PutTopic.Op((input!= null? input : new TopicInput())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName)? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Topic length exceeds the limit (%s)", ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.restapi.change.PutTopic.Op op = new com.google.gerrit.server.restapi.change.PutTopic.Op((input!= null? input : new TopicInput())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName)? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("topic length exceeds the limit (%s)"), ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.restapi.change.PutTopic.Op op = new com.google.gerrit.server.restapi.change.PutTopic.Op((input!= null? input : new TopicInput())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName)? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.ChangeResource req, TopicInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { req.permissions().check(ChangePermission.EDIT_TOPIC_NAME); if (((input!= null) && ((input.topic)!= null)) && ((input.topic.length()) > (com.google.gerrit.server.ChangeUtil.TOPIC_MAX_LENGTH))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Topic length exceeds the limit (%s)", ChangeUtil.TOPIC_MAX_LENGTH)); } com.google.gerrit.server.restapi.change.PutTopic.Op op = new com.google.gerrit.server.restapi.change.PutTopic.Op((input!= null? input : new TopicInput())); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), req.getChange().getProject(), req.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(req.getId(), op); u.execute(); } return com.google.common.base.Strings.isNullOrEmpty(op.newTopicName)? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(op.newTopicName); }
@org.junit.Test public void byLabelGroup() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); createAccount("user2"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo");java.lang.String g1 = createGroup("group1", "Administrators");java.lang.String g2 = createGroup("group2", "Administrators"); gApi.groups().id(g1).addMembers("user1"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1,group1", change1); assertQuery("label:Code-Review=+1,account=group1", change1); assertQuery("label:Code-Review=+1,user=user1", change1); assertQuery("label:Code-Review=+1,user=user2"); assertQuery("label:Code-Review=+1,account=group2"); }
@org.junit.Test public void byLabelGroup() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); createAccount("user2"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo");java.lang.String g1 = createGroup("group1", "Administrators");java.lang.String g2 = createGroup("group2", "Administrators"); gApi.groups().id(g1).addMembers("user1"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1,group1", change1); assertQuery("label:Code-Review=+1,account=group1", change1); assertQuery("label:Code-Review=+1,user=user1", change1); assertQuery("label:Code-Review=+1,user=user2"); assertQuery("label:Code-Review=+1,account=group2"); }
@org.junit.Test public void byLabelGroup() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); createAccount("user2"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo");java.lang.String g1 = createGroup("group1", "Administrators");java.lang.String g2 = createGroup("group2", "Administrators"); gApi.groups().id(g1).addMembers("user1"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1,group1", change1); assertQuery("label:Code-Review=+1,account=group1",, change1); assertQuery("label:Code-Review=+1,user=user1", change1); assertQuery("label:Code-Review=+1,user=user2"); assertQuery("label:Code-Review=+1,account=group2"); }
@org.junit.Test public void byLabelGroup() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); createAccount("user2"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo");java.lang.String g1 = createGroup("group1", "Administrators");java.lang.String g2 = createGroup("group2", "Administrators"); gApi.groups().id(g1).addMembers("user1"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1,group1", change1); assertQuery("label:Code-Review=+1,account=group1", change1); assertQuery("label:Code-Review=+1,user=user1", change1); assertQuery("label:Code-Review=+1,user=user2"); assertQuery("label:Code-Review=+1,account=group2"); }
@org.junit.Test public void byLabelGroup() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); createAccount("user2"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo");java.lang.String g1 = createGroup("group1", "Administrators");java.lang.String g2 = createGroup("group2", "Administrators"); gApi.groups().id(g1).addMembers("user1"); gApi.groups().id(g2).addMembers("user2"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label("Code-Review", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery("label:Code-Review=+1,group1", change1); assertQuery("label:Code-Review=+1,account=group1", change1); assertQuery("label:Code-Review=+1,user=user1", change1); assertQuery("label:Code-Review=+1,account=group2"); }
@org.junit.Test public void submitRecords() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("is:submittable", change1); assertQuery("-is:submittable", change2); assertQuery("submittable:ok", change1); assertQuery("submittable:not_ready", change2); assertQuery("label:CodE-RevieW=ok", change1); assertQuery("label:CodE-RevieW=ok,user=user", change1); assertQuery("label:CodE-RevieW=ok,Administrators", change1); assertQuery("label:CodE-RevieW=ok,account=Administrators", change1); assertQuery("label:CodE-RevieW=ok,owner", change1); assertQuery("label:CodE-RevieW=ok,user1"); assertQuery("label:CodE-RevieW=need", change2); assertQuery("label:CodE-RevieW=need,user1"); assertQuery("label:CodE-RevieW=need,user"); }
@org.junit.Test public void submitRecords() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("is:submittable", change1); assertQuery("-is:submittable", change2); assertQuery("submittable:ok", change1); assertQuery("submittable:not_ready", change2); assertQuery("label:CodE-RevieW=ok", change1); assertQuery("label:CodE-RevieW=ok,user=user", change1); assertQuery("label:CodE-RevieW=ok,administrators", change1); assertQuery("label:CodE-RevieW=ok,account=Administrators", change1); assertQuery("label:CodE-RevieW=ok,owner", change1); assertQuery("label:CodE-RevieW=ok,user1"); assertQuery("label:CodE-RevieW=need", change2); assertQuery("label:CodE-RevieW=need,user1"); assertQuery("label:CodE-RevieW=need,user"); }
@org.junit.Test public void submitRecords() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("is:submittable", change1); assertQuery("-is:submittable", change2); assertQuery("submittable:ok", change1); assertQuery("submittable:not_ready", change2); assertQuery("label:CodE-RevieW=ok", change1); assertQuery("label:CodE-RevieW=ok,user=user", change1); assertQuery("label:CodE-RevieW=ok,Administrators", change1); assertQuery("label:CodE-RevieW=ok,account=Administrators", change1); assertQuery("label:CodE-RevieW=ok,owner", change1); assertQuery("label:CodE-RevieW=ok,user1"); assertQuery("label:CodE-RevieW=need", change2); assertQuery("label:CodE-RevieW=need,owner", change1); assertQuery("label:CodE-RevieW=need,user"); }
@org.junit.Test public void submitRecords() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("is:submittable", change1); assertQuery("-is:submittable", change2); assertQuery("submittable:ok", change1); assertQuery("submittable:not_ready", change2); assertQuery("label:CodE-RevieW=ok", change1); assertQuery("label:CodE-RevieW=ok,user=user", change1); assertQuery("label:CodE-RevieW=ok,Administrators", change1); assertQuery("label:CodE-RevieW=ok,account=Administrators", change1); assertQuery("label:CodE-RevieW=ok,owner", change1); assertQuery("label:CodE-RevieW=ok,user1"); assertQuery("label:CodE-RevieW=need", change2); assertQuery("label:CodE-RevieW=need,owner"); assertQuery("label:CodE-RevieW=need,user"); }
@org.junit.Test public void submitRecords() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("is:submittable", change1); assertQuery("-is:submittable", change2); assertQuery("submittable:ok", change1); assertQuery("submittable:not_ready", change2); assertQuery("label:CodE-RevieW=ok", change1); assertQuery("label:CodE-RevieW=ok,user=user", change1); assertQuery("label:CodE-RevieW=ok,Administrators", change1); assertQuery("label:CodE-RevieW=ok,account=Administrators", change1); assertQuery("label:CodE-RevieW=ok,owner", change1); assertQuery("label:CodE-RevieW=ok,user1"); assertQuery("label:CodE-RevieW=need", change2); assertQuery("label:CodE-RevieW=need,owner", change1); assertQuery("label:CodE-RevieW=need,user1"); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throwsjava.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.api.project.CommitResource rsrc) throwsjava.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throwsjava.io.IOException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throwsjava.io.IOException { com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommitInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException { return com.google.gerrit.server.git.CommitUtil.toCommitInfo(rsrc.getCommit()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.CreateTag create(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString name) { return createTagFactory.create(name.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.CreateTag create(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString name) { return createTagFactory.create(name); }
@java.lang.Override public com.google.gerrit.server.api.project.CreateTag create(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString name) { return createTagFactory.create(name.get()); }
@java.lang.Override public com.google.gerrit.server.api.project.CreateTag create(com.google.gerrit.server.api.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString name) { return createTagFactory.create(name.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.CreateTag create(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString name) { return createTagFactory.create(name.get()).get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("group already exists"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Group already exists"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.api.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("group already exists"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.api.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Group already exists"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.GroupInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("group already exists "); }
public staticjava.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return "account:" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }
public staticjava.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return "account:" + (user.getEffectiveGroups().getKnownGroups().iterator().next().getAccountId()); } return user.toString(); }
public staticjava.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return "account:" + (user.getEffectiveGroups().getKnownGroups().iterator().next().get()); } return user.toString(); }
public staticjava.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().get(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return "account:" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }
public staticjava.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return "account:" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.getAccountId(); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; }
@java.lang.Override public AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); loader.fill(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); return loader.get(rsrc.getMember().getAccountId()); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = infoFactory.create(true); com.google.gerrit.extensions.common.AccountInfo info = loader.get(rsrc.getMember().getAccountId()); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource rsrc) throws com.google.gwtorm.server.OrmException { return infoFactory.create(true); }
privatejava.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((("account " + groupId)); }
privatejava.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((("anonymous account " + groupId)); }
privatejava.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse(("account " + groupId)); }
privatejava.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((("default account " + groupId)); }
privatejava.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((("account \"" + groupId + "\"")); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID();java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId();java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format("group {0}/{1}, account {2}/{3}", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID();java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId();java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format("group {0}/{1}, account {1}/{2}/{3}", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID();java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId();java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format("Group {0}/{1}, account {1}/{2}/{3}", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID();java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId();java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format("group {0}/{1}, account {2}/{3} group", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID();java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId();java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format("group {0}/{1}, account {1}/{2}/{3}", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, null, e); }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = newjava.util.ArrayList<>();java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from account event performed by user", me, removed, e); } }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from account event performed by user", me, removed, e); } }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from account event performed by user", me, removed, e); } }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = newjava.util.ArrayList<>();java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log delete accounts from account event performed by user ", me, removed, e); } }
@java.lang.Override public void onDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = newjava.util.ArrayList<>();java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupMember m : removed) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a : db.accountGroupMembersAudit().byGroupAccount(m.getAccountGroupId(), m.getAccountId())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } else { audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, removedOn); audit.removedLegacy(); auditInserts.add(audit); } } db.accountGroupMembersAudit().update(auditUpdates); db.accountGroupMembersAudit().insert(auditInserts); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to account event performed by user", me, added, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, added, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("cannot log add accounts to account event performed by user", me, added, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(added); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to account event performed by user", me, added, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from account event performed by user", me, removed, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups event performed by user", me, removed, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from account event performed by user", me, removed, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups for account event performed by user", me, removed, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from account", me, removed, e); } }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Upload Topic"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Change Topic"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Edit Topic"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Create Topic"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Uploaded Topic"); }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to account event performed by user", me, added, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logError("Cannot log add groups to account event performed by user", me, added, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to account event performed by user", me, added, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById groupInclude : added) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(groupInclude, me, addedOn); includesAudit.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(added); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to account event performed by user", me, added, e); } }
public static void logFailToLoadFromGroupRefAsWarning(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblem(warning("Group with UUID %s from account name notes failed to load from account ref", uuid)); }
public static void logFailToLoadFromGroupRefAsWarning(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblem(warning("Account with UUID %s from account name notes failed to load from account ref", uuid)); }
public static void logFailToLoadFromGroupRefAsWarning(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblem(warning("Ref with UUID %s from account name notes failed to load from account ref", uuid)); }
public static void logFailToLoadFromGroupRefAsWarning(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblem(warning("Account with UUID %s from group name notes failed to load from account ref", uuid)); }
public static void logFailToLoadFromGroupRefAsWarning(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblem(warning("Group with UUID %s from account name notes failed to load from account ref"), uuid)); }
@com.google.common.annotations.VisibleForTesting staticjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository allUsersRepo,java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throwsjava.io.IOException { try {java.util.Optional<com.google.gerrit.common.data.GroupReference> groupRef = com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference(allUsersRepo, groupName); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(warning("Group with name '%s' doesn't exist in the list of all names", groupName)); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID();java.lang.String name = groupRef.get().getName();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning("Group with name '%s' has UUID '%s' in 'account.config' but '%s' in account name notes", groupName, groupUUID, uuid)); } if (!(java.util.Objects.equals(groupName, name))) { problems.add(warning("A note of name '%s' claims to represent name of '%s'", groupName, name)); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.ImmutableList.of(warning("Failed to check consistency with account name notes: %s", e.getMessage())); } }
@com.google.common.annotations.VisibleForTesting staticjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository allUsersRepo,java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throwsjava.io.IOException { try {java.util.Optional<com.google.gerrit.common.data.GroupReference> groupRef = com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference(allUsersRepo, groupName); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(warning("group with name '%s' doesn't exist in the list of all names", groupName)); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID();java.lang.String name = groupRef.get().getName();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning("group with name '%s' has UUID '%s' in 'account.config' but '%s' in account name notes", groupName, groupUUID, uuid)); } if (!(java.util.Objects.equals(groupName, name))) { problems.add(warning("group note of name '%s' claims to represent name of '%s'", groupName, name)); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.ImmutableList.of(warning("failed to check consistency with account name notes: %s", e.getMessage())); } }
@com.google.common.annotations.VisibleForTesting staticjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository allUsersRepo,java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throwsjava.io.IOException { try {java.util.Optional<com.google.gerrit.common.data.GroupReference> groupRef = com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference(allUsersRepo, groupName); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(warning("Group with name '%s' doesn't exist in the list of all names", groupName)); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID();java.lang.String name = groupRef.get().getName();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning("Group with name '%s' has UUID '%s' in 'account.config' but '%s' in account name notes", groupName, groupUUID, uuid)); } if (!(java.util.Objects.equals(groupName, name))) { problems.add(warning("Group note of name '%s' claims to represent name of '%s'", groupName, name)); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.ImmutableList.of(warning("Failed to check consistency with account name notes: %s", e.getMessage())); } }
@com.google.common.annotations.VisibleForTesting staticjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository allUsersRepo,java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throwsjava.io.IOException { try {java.util.Optional<com.google.gerrit.common.data.GroupReference> groupRef = com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference(allUsersRepo, groupName); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(warning("group with name '%s' doesn't exist in the list of all names", groupName)); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID();java.lang.String name = groupRef.get().getName();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning("group with name '%s' has UUID '%s' in 'account.config' but '%s' in account name notes", groupName, groupUUID, uuid)); } if (!(java.util.Objects.equals(groupName, name))) { problems.add(warning("note of name '%s' claims to represent name of '%s'", groupName, name)); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.ImmutableList.of(warning("failed to check consistency with account name notes: %s", e.getMessage())); } }
@com.google.common.annotations.VisibleForTesting staticjava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkWithGroupNameNotes(org.eclipse.jgit.lib.Repository allUsersRepo,java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID) throwsjava.io.IOException { try {java.util.Optional<com.google.gerrit.common.data.GroupReference> groupRef = com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference(allUsersRepo, groupName); if (!(groupRef.isPresent())) { return com.google.common.collect.ImmutableList.of(warning("group with name '%s' doesn't exist in the list of all names", groupName)); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = groupRef.get().getUUID();java.lang.String name = groupRef.get().getName();java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); if (!(java.util.Objects.equals(groupUUID, uuid))) { problems.add(warning("group with name '%s' has UUID '%s' in 'account.config' but '%s' in account name notes", groupName, groupUUID, uuid)); } if (!(java.util.Objects.equals(groupName, name))) { problems.add(warning("group note of name '%s' claims to represent name of '%s'", groupName, name)); } return problems; } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.ImmutableList.of(warning("Failed to check consistency with account name notes: %s", e.getMessage())); } }
private void readGroups(org.eclipse.jgit.lib.Repository repo,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result) throwsjava.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.problems.add(error("Invalid UUID from %s", entry.getKey())); continue; } try { com.google.gerrit.server.group.db.GroupConfig cfg = com.google.gerrit.server.group.db.GroupConfig.loadForGroupSnapshot(repo, uuid, entry.getValue().getObjectId()); result.uuidToGroupMap.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error("Group %s does not parse: %s", uuid, e.getMessage())); } } }
private void readGroups(org.eclipse.jgit.lib.Repository repo,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result) throwsjava.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.problems.add(error("missing UUID from %s", entry.getKey())); continue; } try { com.google.gerrit.server.group.db.GroupConfig cfg = com.google.gerrit.server.group.db.GroupConfig.loadForGroupSnapshot(repo, uuid, entry.getValue().getObjectId()); result.uuidToGroupMap.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error("group %s does not parse: %s", uuid, e.getMessage())); } } }
private void readGroups(org.eclipse.jgit.lib.Repository repo,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result) throwsjava.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.problems.add(error("No UUID from %s", entry.getKey())); continue; } try { com.google.gerrit.server.group.db.GroupConfig cfg = com.google.gerrit.server.group.db.GroupConfig.loadForGroupSnapshot(repo, uuid, entry.getValue().getObjectId()); result.uuidToGroupMap.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error("Group %s does not parse: %s", uuid, e.getMessage())); } } }
private void readGroups(org.eclipse.jgit.lib.Repository repo,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result) throwsjava.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.problems.add(error(("missing UUID from %s"), entry.getKey())); continue; } try { com.google.gerrit.server.group.db.GroupConfig cfg = com.google.gerrit.server.group.db.GroupConfig.loadForGroupSnapshot(repo, uuid, entry.getValue().getObjectId()); result.uuidToGroupMap.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error(("group %s does not parse: %s", uuid, e.getMessage())); } } }
private void readGroups(org.eclipse.jgit.lib.Repository repo,java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs, com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.Result result) throwsjava.io.IOException { for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> entry : refs.entrySet()) { if (!(entry.getKey().startsWith(RefNames.REFS_GROUPS))) { continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.fromRef(entry.getKey()); if (uuid == null) { result.problems.add(error(("Invalid UUID from %s"), entry.getKey())); continue; } try { com.google.gerrit.server.group.db.GroupConfig cfg = com.google.gerrit.server.group.db.GroupConfig.loadForGroupSnapshot(repo, uuid, entry.getValue().getObjectId()); result.uuidToGroupMap.put(uuid, cfg.getLoadedGroup().get()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { result.problems.add(error(("Group %s does not parse: %s", uuid, e.getMessage())); } } }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return apply(rsrc, input, true); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return apply(rsrc, input, true); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return apply(rsrc, input, false); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return apply(rsrc, input, true); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ParentInput input) { return apply(rsrc, input, true); }
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user,java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allProjects.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("parent must inherit from %s", allUsers.get(), allProjects.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot set parent of " + (allProjects.get()))); } newParent = com.google.common.base.Strings.emptyToNull(newParent); if (newParent!= null) { com.google.gerrit.server.restapi.project.ProjectState parent = cache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("project \"" + newParent) + "\" not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot set parent to self")); } if (com.google.common.collect.Iterables.tryFind(parent.tree(), ( p) -> { return p.getNameKey().equals(project); }).isPresent()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("project \"" + newParent) + "\" already exists between \"" + (project.get())) + "\" and \"" + (parent.getName()); } } }
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user,java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allProjects.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("parent must inherit from %s", allUsers.get(), allProjects.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot set parent of " + (allProjects.get()))); } newParent = com.google.common.base.Strings.emptyToNull(newParent); if (newParent!= null) { com.google.gerrit.server.restapi.project.ProjectState parent = cache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("parent project " + newParent) + " not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot set parent to self")); } if (com.google.common.collect.Iterables.tryFind(parent.tree(), ( p) -> { return p.getNameKey().equals(project); }).isPresent()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("parent exists between " + (project.get())) + " and " + (parent.getNameKey().equals(project)); } } }
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user,java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allProjects.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("parent must inherit from %s", allUsers.get(), allProjects.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot set parent of " + (allProjects.get()))); } newParent = com.google.common.base.Strings.emptyToNull(newParent); if (newParent!= null) { com.google.gerrit.server.restapi.project.ProjectState parent = cache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("parent project " + newParent) + " not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot set parent to self")); } if (com.google.common.collect.Iterables.tryFind(parent.tree(), ( p) -> { return p.getNameKey().equals(project); }).isPresent()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("parent exists between " + (project.get())) + " and ") + (parent.getNameKey().equals(project)); } } }
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user,java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allProjects.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Project must inherit from %s", allUsers.get(), allProjects.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Cannot set parent of " + (allProjects.get()))); } newParent = com.google.common.base.Strings.emptyToNull(newParent); if (newParent!= null) { com.google.gerrit.server.restapi.project.ProjectState parent = cache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("Parent project " + newParent) + " not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Cannot set parent to self")); } if (com.google.common.collect.Iterables.tryFind(parent.tree(), ( p) -> { return p.getNameKey().equals(project); }).isPresent()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Parent exists between " + (project.get())) + " and " + (parent.getNameKey().equals(project)); } } }
public void validateParentUpdate(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.IdentifiedUser user,java.lang.String newParent, boolean checkIfAdmin) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException { if (checkIfAdmin) { permissionBackend.user(user).check(GlobalPermission.ADMINISTRATE_SERVER); } if ((project.equals(allUsers)) && (!(allProjects.get().equals(newParent)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("parent must inherit from %s", allUsers.get(), allProjects.get())); } if (project.equals(allProjects)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot set parent of " + (allProjects.get()))); } newParent = com.google.common.base.Strings.emptyToNull(newParent); if (newParent!= null) { com.google.gerrit.server.restapi.project.ProjectState parent = cache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newParent)); if (parent == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException((("parent project " + newParent) + " not found")); } if (parent.getName().equals(project.get())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("cannot set parent to self")); } if (com.google.common.collect.Iterables.tryFind(parent.tree(), ( p) -> { return p.getNameKey().equals(project); }).isPresent()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("parent exists between " + (project.get())) + ", and " + (parent.getNameKey().equals(project)); } } }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.TagResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Project.TagResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.TagResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.TagResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi. project.TagResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.restapi.project.TagResource parse(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return new com.google.gerrit.server.restapi.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }
@java.lang.Override public com.google.gerrit.server.api.project.TagResource parse(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return new com.google.gerrit.server.api.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }
@java.lang.Override public com.google.gerrit.server.api.project.TagResource parse(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return new com.google.gerrit.server.restapi.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }
@java.lang.Override public com.google.gerrit.server.restapi.api.project.TagResource parse(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return new com.google.gerrit.server.restapi.project.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }
@java.lang.Override public com.google.gerrit.server.restapi.tag.TagResource parse(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return new com.google.gerrit.server.restapi.tag.TagResource(rsrc.getProjectState(), rsrc.getUser(), list.get().get(rsrc, id)); }
java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); }java.util.List<com.google.gerrit.extensions.common.AgreementInfo> results = newjava.util.ArrayList<>();java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> cas = projectCache.getAllProjects().getConfig().getContributorAgreements(); for (com.google.gerrit.common.data.ContributorAgreement ca : cas) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupIds = newjava.util.ArrayList<>(); for (com.google.gerrit.common.data.PermissionRule rule : ca.getAccepted()) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((rule.getGroup())!= null)) { if ((rule.getGroup().getUUID())!= null) { groupIds.add(rule.getGroup().getUUID()); } else { com.google.gerrit.server.restapi.account.GetAgreements.log.warn((((("Group \"" + (rule.getGroup().getName())) + "\" does not ") + "\" in CLA \"" + (ca.getName())) + "\"")); } } } if (user.getEffectiveGroups().containsAnyOf(groupIds)) { results.add(agreementJson.format(ca)); } } return results; }
java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); }java.util.List<com.google.gerrit.extensions.common.AgreementInfo> results = newjava.util.ArrayList<>();java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> cas = projectCache.getAllProjects().getConfig().getContributorAgreements(); for (com.google.gerrit.common.data.ContributorAgreement ca : cas) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupIds = newjava.util.ArrayList<>(); for (com.google.gerrit.common.data.PermissionRule rule : ca.getAccepted()) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((rule.getGroup())!= null)) { if ((rule.getGroup().getUUID())!= null) { groupIds.add(rule.getGroup().getUUID()); } else { com.google.gerrit.server.restapi.account.GetAgreements.log.warn(((((("Group \"" + (rule.getGroup().getName())) + "\" does not ") + "exist in CLA ") + (ca.getName())) + "\"")); } } } if (user.getEffectiveGroups().containsAnyOf(groupIds)) { results.add(agreementJson.format(ca)); } } return results; }
java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); }java.util.List<com.google.gerrit.extensions.common.AgreementInfo> results = newjava.util.ArrayList<>();java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> cas = projectCache.getAllProjects().getConfig().getContributorAgreements(); for (com.google.gerrit.common.data.ContributorAgreement ca : cas) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupIds = newjava.util.ArrayList<>(); for (com.google.gerrit.common.data.PermissionRule rule : ca.getAccepted()) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((rule.getGroup())!= null)) { if ((rule.getGroup().getUUID())!= null) { groupIds.add(rule.getGroup().getUUID()); } else { com.google.gerrit.server.restapi.account.GetAgreements.log.warn(((((("Group \"" + (rule.getGroup().getName())) + "\" does not ") + "\" in CLA ") + (ca.getName())) + "\"")); } } } if (user.getEffectiveGroups().containsAnyOf(groupIds)) { results.add(agreementJson.format(ca)); } } return results; }
java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); }java.util.List<com.google.gerrit.extensions.common.AgreementInfo> results = newjava.util.ArrayList<>();java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> cas = projectCache.getAllProjects().getConfig().getContributorAgreements(); for (com.google.gerrit.common.data.ContributorAgreement ca : cas) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupIds = newjava.util.ArrayList<>(); for (com.google.gerrit.common.data.PermissionRule rule : ca.getAccepted()) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((rule.getGroup())!= null)) { if ((rule.getGroup().getUUID())!= null) { groupIds.add(rule.getGroup().getUUID()); } else { com.google.gerrit.server.restapi.account.GetAgreements.log.warn((((("Group \"" + (rule.getGroup().getName())) + "\" does not ") + "\" in CLA \"" + (ca.getName())) + "\"")); } } } if (user.getEffectiveGroups().containsAnyOf(groupIds)) { results.add(ca.formatJson(ca)); } } return results; }
java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AgreementInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if (!(self.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); } com.google.gerrit.server.IdentifiedUser user = self.get().asIdentifiedUser(); if (user!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get contributor agreements"); }java.util.List<com.google.gerrit.extensions.common.AgreementInfo> results = newjava.util.ArrayList<>();java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> cas = projectCache.getAllProjects().getConfig().getContributorAgreements(); for (com.google.gerrit.common.data.ContributorAgreement ca : cas) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupIds = newjava.util.ArrayList<>(); for (com.google.gerrit.common.data.PermissionRule rule : ca.getAccepted()) { if (((rule.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && ((rule.getGroup())!= null)) { if ((rule.getGroup().getUUID())!= null) { groupIds.add(rule.getGroup().getUUID()); } else { com.google.gerrit.server.restapi.account.GetAgreements.log.warn(((((("Group \"" + (rule.getGroup().getName())) + "\" does not ") + "exist in CLA ") + (ca.getName())) + "\"")); } } } if (user.getEffectiveGroups().containsAnyOf(groupIds)) { results.add(ca.formatJson(ca)); } } return results; }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, account {1}/{3}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, account {1}/{2}/{3}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, account {1}/{2}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, user {1}/{2}/{3}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.get(accountId).getUserName(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("account {0}/{1}, account {1}/{2}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.restapi.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.restapi.access.AccessResource.ACCESS_KIND); }
java @java.lang.Override protected void configure() { bind(com.google.gerrit.server.restapi.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.restapi.access.AccessResource.ACCESS_KIND); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.api.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.restapi.access.AccessResource.ACCESS_KIND); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.restapi.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), access.AccessResource.ACCESS_KIND); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.restapi.access.AccessCollection.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.restapi.AccessResource.ACCESS_KIND); }
private void testCannotCreateGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.CREATE); grant(allUsers, refPattern, Permission.PUSH); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("not allowed to create account branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNull(); } }
private void testCannotCreateGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.CREATE); grant(allUsers, refPattern, Permission.PUSH); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("Not allowed to create account branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNull(); } }
private void testCannotCreateGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.CREATE); grant(allUsers, refPattern, Permission.PUSH); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("not allowed to create group branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNull(); } }
private void testCannotCreateGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.CREATE); grant(allUsers, refPattern, Permission.PUSH); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("not allowed to create account branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNull(); } }
private void testCannotCreateGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.CREATE); grant(allUsers, refPattern, Permission.PUSH); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo).to(groupRef); r.assertErrorStatus(); assertThat(r.getMessage()).contains("You are not allowed to create account branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNull(); } }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.Iterable<T> iterable,java.util.Comparator<T> comparator,java.lang.Class<T> clazz) {java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn("Group {} in {} has duplicate {} entities: {}", uuid, source, clazz.getSimpleName(), iterable); } return set; }
public static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.Iterable<T> iterable,java.util.Comparator<T> comparator,java.lang.Class<T> clazz) {java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn("Group {} in {} has duplicate {} entities: {}", uuid, source, clazz.getSimpleName(), iterable); } return set; }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.Iterable<T> iterable,java.util.Comparator<T> comparator,java.lang.Class<T> clazz) {java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn("group {} in {} has duplicate {} entities: {}", uuid, source, clazz.getSimpleName(), iterable); } return set; }
static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.Iterable<T> iterable,java.util.Comparator<T> comparator,java.lang.Class<T> clazz) {java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn("Group {} in {} has duplicate {} entities: {}", uuid, source, clazz.getSimpleName(), iterable); } return set; }
private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.Iterable<T> iterable,java.util.Comparator<T> comparator,java.lang.Class<T> clazz) {java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size())!= (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn("Group {} in {} has duplicate {} entities: {}", uuid, source, clazz.getName(), iterable); } return set; }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsersRepo, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String refName,java.lang.String fileName,java.lang.String contents) throwsjava.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepository = new org.eclipse.jgit.junit.TestRepository(allUsersRepo, rw); TestRepository<Repository>.CommitBuilder builder = testRepository.branch(refName).commit().add(fileName, contents).message("Uploaded account file"); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.parent(c); } } builder.create(); } }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsersRepo, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String refName,java.lang.String fileName,java.lang.String contents) throwsjava.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepository = new org.eclipse.jgit.junit.TestRepository(allUsersRepo, rw); TestRepository<Repository>.CommitBuilder builder = testRepository.branch(refName).commit().add(fileName, contents).message("Upload account file"); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.parent(c); } } builder.create(); } }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsersRepo, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String refName,java.lang.String fileName,java.lang.String contents) throwsjava.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepository = new org.eclipse.jgit.junit.TestRepository(allUsersRepo, rw); TestRepository<Repository>.CommitBuilder builder = testRepository.branch(refName).commit().add(fileName, contents).message("Update account file"); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.parent(c); } } builder.create(); } }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsersRepo, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String refName,java.lang.String fileName,java.lang.String contents) throwsjava.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepository = new org.eclipse.jgit.junit.TestRepository(allUsersRepo, rw); TestRepository<Repository>.CommitBuilder builder = testRepository.branch(refName).commit().add(fileName, contents).message(("Uploaded account file")); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.parent(c); } } builder.create(); } }
public static void updateGroupFile(org.eclipse.jgit.lib.Repository allUsersRepo, org.eclipse.jgit.lib.PersonIdent serverIdent,java.lang.String refName,java.lang.String fileName,java.lang.String contents) throwsjava.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(allUsersRepo)) { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.lib.Repository> testRepository = new org.eclipse.jgit.junit.TestRepository(allUsersRepo, rw); TestRepository<Repository>.CommitBuilder builder = testRepository.branch(refName).commit().add(fileName, contents).message(("Uploaded account file"); org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef(refName); if (ref!= null) { org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); if (c!= null) { builder.parent(c); } } builder.create(); } }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.projects.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc.getProjectState()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.api.project.ProjectResource rsrc) { return json.format(rsrc.getProjectState()); }



};

private com.google.gerrit.server.restapi.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.api.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.restapi.project.RefResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.restapi.project.BranchResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return branches.parse(project, com.google.gerrit.extensions.restapi.ObjectId.fromDecoded(ref)); }
private com.google.gerrit.server.restapi.project.BranchResource resource() { return branches.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.restapi.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve file", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.api.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve file", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.restapi.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve file", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.restapi.project.FileResource resource = filesCollection.parse(resource(), com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot retrieve file", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult file(java.lang.String path) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.restapi.project.FileResource resource = filesCollection.parse(resource()); return getContent.apply(resource); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve file", e); } }
@org.junit.Test public void groupNameNoteHasDifferentUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-2 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in account ") + " notes")); }
@org.junit.Test public void groupNameNoteHasDifferentUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-2 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.notes')"))); }
@org.junit.Test public void groupNameNoteHasDifferentUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-2 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.notes')")); }
@org.junit.Test public void groupNameNoteHasDifferentUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-2 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.name')" + "')")); }
@org.junit.Test public void groupNameNoteHasDifferentUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-2 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.name')" + " notes")); }
@org.junit.Test public void groupNameNoteIsConsistent() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameNoteIsConsistent() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = uuid-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameNoteIsConsistent() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = uuid-1 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameNoteIsConsistent() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "UUID = uuid-1 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameNoteIsConsistent() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-1");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid-1)); assertThat(problems).isEmpty(); }
@org.junit.Test public void groupNameNoteFailToParse() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "[invalid");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("Failed to check consistency with account name notes: Unexpected end of config file")); }
@org.junit.Test public void groupNameNoteFailToParse() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "[invalid");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("Failed to check consistency with account name notes: Unexpected end of config file\n")); }
@org.junit.Test public void groupNameNoteFailToParse() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "[invalid");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("Failed to check consistency with account name notes: Unexpected end of config file"))); }
@org.junit.Test public void groupNameNoteFailToParse() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "[invalid");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(error("Failed to check consistency with account name notes: Unexpected end of config file")); }
@org.junit.Test public void groupNameNoteFailToParse() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "[invalid"); }
@org.junit.Test public void groupNameNoteIsMissing() throwsjava.lang.Exception { updateGroupNamesRef("g-2", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly("warning: Group with name 'g-1' doesn't exist in the list of all names"); }
@org.junit.Test public void groupNameNoteIsMissing() throwsjava.lang.Exception { updateGroupNamesRef("g-2", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("Group with name 'g-1' doesn't exist in the list of all names")); }
@org.junit.Test public void groupNameNoteIsMissing() throwsjava.lang.Exception { updateGroupNamesRef("g-2", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("group with name 'g-1' doesn't exist in the list of all names")); }
@org.junit.Test public void groupNameNoteIsMissing() throwsjava.lang.Exception { updateGroupNamesRef("g-2", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("GroupName with name 'g-1' doesn't exist in the list of all names")); }
@org.junit.Test public void groupNameNoteIsMissing() throwsjava.lang.Exception { updateGroupNamesRef("g-2", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("Group with name 'g-1' doesn't exist in the list of all names\n")); }
@org.junit.Test public void groupNameNoteHasDifferentName() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("A note of name 'g-1' claims to represent name of 'g-2'")); }
@org.junit.Test public void groupNameNoteHasDifferentName() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("Invalid note of name 'g-1' claims to represent name of 'g-2'")); }
@org.junit.Test public void groupNameNoteHasDifferentName() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("warning: note of name 'g-1' claims to represent name of 'g-2'")); }
@org.junit.Test public void groupNameNoteHasDifferentName() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("Multiple note of name 'g-1' claims to represent name of 'g-2'")); }
@org.junit.Test public void groupNameNoteHasDifferentName() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning("A note of name 'g-1' claims to represent name of 'g-2'"), "Invalid note of name 'g-2'"); }
@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-1", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.name')"), warning(("Note of name 'g-1' claims to represent name of 'g-2'"))); }
@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-1", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.name')"), warning(("A note of name 'g-1' claims to represent name of 'g-2'"))); }
@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-1", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.notes'")), warning(("Note of name 'g-1' claims to represent name of 'g-2'"))); }
@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-1", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.name')"), warning(("Invalid note of name 'g-1' claims to represent name of 'g-2'"))); }
@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throwsjava.lang.Exception { updateGroupNamesRef("g-1", "uuid-1 = g-1", "uuid-2 = g-2");java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("Group with name 'g-1' has UUID 'uuid-1' in 'account.config' but 'uuid-2' in 'account.name')"), warning(("Group with name 'g-1' claims to represent name of 'g-2'"))); }
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc);
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.api.project.ChildProjectResource rsrc);
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.api.projects.ChildProjectResource rsrc);
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc);
com.google.gerrit.server.api.projects.ChildProjectApiImpl create(com.google.gerrit.server.project.ChildProjectResource rsrc);
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tags must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.restapi.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tags must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.restapi.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Tags must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.restapi.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tags must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server. restapi.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteTagsInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.tags) == null)) || (input.tags.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("tags must be specified"); } deleteRefFactory.create(project).refs(input.tags).prefix(com.google.gerrit.server.restapi.project.R_TAGS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.db.AuditLogReader.log.debug("Invalid footer line in commit {} while parsing audit log for account {}: {}", c.name(), uuid, line); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.db.AuditLogReader.log.debug("Invalid footer line in commit {} for account {}: {}", c.name(), uuid, line); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.db.AuditLogReader.log.debug("Invalid footer line in commit {}: {}", c.name(), uuid, line); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.db.AuditLogReader.log.debug("Invalid footer line in commit {} while parsing audit log for account {}:\n", c.name(), uuid, line); }
private static void logInvalid(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, org.eclipse.jgit.revwalk.RevCommit c, org.eclipse.jgit.revwalk.FooterLine line) { com.google.gerrit.server.group.db.AuditLogReader.log.debug("Invalid footer line in commit {} while parsing audit log for account {}: {}", c.name(), uuid); }
@java.lang.Override public com.google.gerrit.server.restapi.project.ChildProjectResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.restapi.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.project.ChildProjectResource parse(com.google.gerrit.server.restapi. project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.restapi.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi. project.ChildProjectResource parse(com.google.gerrit.server.restapi. project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.restapi.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.project.ChildProjectResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.restapi.project.ChildProjectResource(parent, p); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.project.ChildProjectResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.restapi.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override protected com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException,java.io.IOException { com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.isEmpty()))) {java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = newjava.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }
@java.lang.Override protected com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi. project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException,java.io.IOException { com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.isEmpty()))) {java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = newjava.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }
@java.lang.Override protected com.google.gerrit.server.restapi. project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi. project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException,java.io.IOException { com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.isEmpty()))) {java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = newjava.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }
@java.lang.Override protected com.google.gerrit.server.restapi.Project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException,java.io.IOException { com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.isEmpty()))) {java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = newjava.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }
@java.lang.Override protected com.google.gerrit.server.api.project.BanCommit.BanResultInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.project.ProjectResource rsrc, BanCommitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException,java.io.IOException { com.google.gerrit.server.api.project.BanCommit.BanResultInfo r = new com.google.gerrit.server.api.project.BanCommit.BanResultInfo(); if (((input!= null) && ((input.commits)!= null)) && (!(input.commits.isEmpty()))) {java.util.List<org.eclipse.jgit.lib.ObjectId> commitsToBan = newjava.util.ArrayList(input.commits.size()); for (java.lang.String c : input.commits) { try { commitsToBan.add(org.eclipse.jgit.lib.ObjectId.fromString(c)); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } } com.google.gerrit.server.git.BanCommitResult result = banCommit.ban(rsrc.getNameKey(), rsrc.getUser(), commitsToBan, input.reason); r.newlyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getNewlyBannedCommits()); r.alreadyBanned = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getAlreadyBannedCommits()); r.ignored = com.google.gerrit.server.restapi.project.BanCommit.transformCommits(result.getIgnoredObjectIds()); } return r; }
private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("account-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("account-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroup byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("account-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("account-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupBy byId = new com.google.gerrit.reviewdb.client.AccountGroupBy(new com.google.gerrit.reviewdb.client.AccountGroupBy.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); com.google.gerrit.reviewdb.client.AccountGroupByAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("group"), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("account-1"), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID("subgroup"))); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Anonymous Users") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group name Users is reserved"); gApi.groups().create("Invalid users"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Anonymous Users") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group name Users is reserved"); gApi.groups().create("users"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Users") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group name Users is reserved"); gApi.groups().create( "users"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Anonymous Users") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group name Users is reserved"); gApi.groups().create("* users"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Anonymous Users") public void createGroupWithDefaultNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group name Users is reserved"); gApi.groups().create( "users"); }
com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.restapi.change.RobotCommentResource c);
com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.api.changes.change.RobotCommentResource c);
com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.api.change.RobotCommentResource c);
com.google.gerrit.server.api.changes.RobotCommentApiImpl create(com.google.gerrit.server.api.changes.ChangeResource c);

com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.restapi.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.isUseContributorAgreements()); info.editableAccountFields = newjava.util.ArrayList(realm.getEditableFields()); info.switchAccountUrl = cfg.getSwitchAccountUrl(); info.gitBasicAuthPolicy = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) {java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> agreements = projectCache.getAllProjects().getConfig().getContributorAgreements(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreementJson.format(agreement)); } } } switch (info.authType) { case LDAP : case LDAP_BIND : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); break; case CUSTOM_EXTENSION : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); info.httpPasswordUrl = cfg.getHttpPasswordUrl(); break; case HTTP : case HTTP_LDAP : info.loginUrl = cfg.getLoginUrl(); info.loginText = cfg.getLoginText(); break; case CLIENT_SSL_CERT_LDAP : case DEVEMENT_COME_ANY_ACCOUNT : case OPENID : return info; default : return null; } }
com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.restapi.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.isUseContributorAgreements()); info.editableAccountFields = newjava.util.ArrayList(realm.getEditableFields()); info.switchAccountUrl = cfg.getSwitchAccountUrl(); info.gitBasicAuthPolicy = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) {java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> agreements = projectCache.getAllProjects().getConfig().getContributorAgreements(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreementJson.format(agreement)); } } } switch (info.authType) { case LDAP : case LDAP_BIND : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); break; case CUSTOM_EXTENSION : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); info.httpPasswordUrl = cfg.getHttpPasswordUrl(); break; case HTTP : case HTTP_LDAP : info.loginUrl = cfg.getLoginUrl(); info.loginText = cfg.getLoginText(); break; case CLIENT_SSL_CERT_LDAP : case DEVEMENT_COME_ANY_ACCOUNT : case OPENID : return info; case OPENID_OSS : return info; } return null; }
com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.restapi.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.isUseContributorAgreements()); info.editableAccountFields = newjava.util.ArrayList(realm.getEditableFields()); info.switchAccountUrl = cfg.getSwitchAccountUrl(); info.gitBasicAuthPolicy = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) {java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> agreements = projectCache.getAllProjects().getConfig().getContributorAgreements(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreementJson.format(agreement)); } } } switch (info.authType) { case LDAP : case LDAP_BIND : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); break; case CUSTOM_EXTENSION : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); info.httpPasswordUrl = cfg.getHttpPasswordUrl(); break; case HTTP : case HTTP_LDAP : info.loginUrl = cfg.getLoginUrl(); info.loginText = cfg.getLoginText(); break; case CLIENT_SSL_CERT_LDAP : case DEVEMENT_COME_ANY_ACCOUNT : case OPENID : return info; case OPENID_OSS : return info; default : return null; } }
com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.restapi.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.isUseContributorAgreements()); info.editableAccountFields = newjava.util.ArrayList(realm.getEditableFields()); info.switchAccountUrl = cfg.getSwitchAccountUrl(); info.gitBasicAuthPolicy = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) {java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> agreements = projectCache.getAllProjects().getConfig().getContributorAgreements(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreementJson.format(agreement)); } } } switch (info.authType) { case LDAP : case LDAP_BIND : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); break; case CUSTOM_EXTENSION : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); info.httpPasswordUrl = cfg.getHttpPasswordUrl(); break; case HTTP : case HTTP_LDAP : info.loginUrl = cfg.getLoginUrl(); info.loginText = cfg.getLoginText(); break; case CLIENT_SSL_CERT_LDAP : case DEVEMENT_COME_ANY_ACCOUNT : case OPENID : return info; case OPENID_OSS : return info; } return info; }
com.google.gerrit.extensions.common.AuthInfo getAuthInfo(com.google.gerrit.server.restapi.config.AuthConfig cfg, com.google.gerrit.server.account.Realm realm) { com.google.gerrit.extensions.common.AuthInfo info = new com.google.gerrit.extensions.common.AuthInfo(); info.authType = cfg.getAuthType(); info.useContributorAgreements = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.isUseContributorAgreements()); info.editableAccountFields = newjava.util.ArrayList(realm.getEditableFields()); info.switchAccountUrl = cfg.getSwitchAccountUrl(); info.gitBasicAuthPolicy = cfg.getGitBasicAuthPolicy(); if ((info.useContributorAgreements)!= null) {java.util.Collection<com.google.gerrit.common.data.ContributorAgreement> agreements = projectCache.getAllProjects().getConfig().getContributorAgreements(); if (!(agreements.isEmpty())) { info.contributorAgreements = com.google.common.collect.Lists.newArrayListWithCapacity(agreements.size()); for (com.google.gerrit.common.data.ContributorAgreement agreement : agreements) { info.contributorAgreements.add(agreementJson.format(agreement)); } } } switch (info.authType) { case LDAP : case LDAP_BIND : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); break; case CUSTOM_EXTENSION : info.registerUrl = cfg.getRegisterUrl(); info.registerText = cfg.getRegisterText(); info.editFullNameUrl = cfg.getEditFullNameUrl(); info.httpPasswordUrl = cfg.getHttpPasswordUrl(); break; case HTTP : case HTTP_LDAP : info.loginUrl = cfg.getLoginUrl(); info.loginText = cfg.getLoginText(); break; case CLIENT_SSL_CERT_LDAP : case DEVEMENT_BECOME_ANY_ACCOUNT : case OPENID : return info; case OPENID_OSS : return info; } return null; }
@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throwsjava.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "Update not allowed"); }
@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throwsjava.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "update not allowed"); }
@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throwsjava.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "Ref update not allowed"); }
@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throwsjava.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "Push update not allowed"); }
@org.junit.Test public void pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit() throwsjava.lang.Exception { pushToGroupBranchForReviewAndSubmit(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "refs update not allowed"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Anonymous Users") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group Users already exists"); gApi.groups().create("create users"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Anonymous Users") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group Users already exists"); gApi.groups().create("New users"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Users") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group Users already exists"); gApi.groups().create("create users"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Anonymous Users") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group Users already exists"); gApi.groups().create("Create users"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "groups.global:Anonymous-Users.name", value = "Anonymous Users") public void createGroupWithConfiguredNameOfSystemGroup_Conflict() throwsjava.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group Users already exists"); gApi.groups().create( "new users"); }
@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "New Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Duplicate Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Duplicate Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "Test Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Duplicate Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "Group Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "New Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Group Users already exists"); gApi.groups().create(newGroupName); }
private void testCannotDeleteGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains("not allowed to delete account branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }
private void testCannotDeleteGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains("Not allowed to delete account branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }
private void testCannotDeleteGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef(allUsersRepo, groupRef); org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate(groupRef); assertThat(refUpdate.getStatus()).isEqualTo(RemoteRefUpdate.Status.REJECTED_OTHER_REASON); assertThat(refUpdate.getMessage()).contains("not allowed to delete group branch."); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }
private void testCannotDeleteGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }
private void testCannotDeleteGroupBranch(java.lang.String refPattern,java.lang.String groupRef) throwsjava.lang.Exception { grant(allUsers, refPattern, Permission.DELETE, true, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { assertThat(repo.exactRef(groupRef)).isNotNull(); } }
private void pushToGroupBranchForReviewAndSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRef,java.lang.String expectedError) throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grantLabel("Code-Review", (-2), 2, project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRef + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ("Upload account config", "account.config", "Upload content " + groupRef)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Update update not allowed"); } gApi.changes().id(r.getChangeId()).current().submit(); }
private void pushToGroupBranchForReviewAndSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRef,java.lang.String expectedError) throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grantLabel("Code-Review", (-2), 2, project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRef + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ("Uploaded account config", "account.config", "content " + groupRef)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Update update not allowed"); } gApi.changes().id(r.getChangeId()).current().submit(); }
private void pushToGroupBranchForReviewAndSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRef,java.lang.String expectedError) throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grantLabel("Code-Review", (-2), 2, project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRef + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ("Uploaded account config", "account.config", "Uploaded content " + groupRef)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Update update not allowed"); } gApi.changes().id(r.getChangeId()).current().submit(); }
private void pushToGroupBranchForReviewAndSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRef,java.lang.String expectedError) throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grantLabel("Code-Review", (-2), 2, project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRef + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ("Create account config", "account.config", "some content ") + groupRef)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Update update not allowed"); } gApi.changes().id(r.getChangeId()).current().submit(); }
private void pushToGroupBranchForReviewAndSubmit(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRef,java.lang.String expectedError) throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); grantLabel("Code-Review", (-2), 2, project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS, false); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.SUBMIT, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRef + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ("Uploaded account config", "account.config", "some content " + groupRef)); r.assertOkStatus(); assertThat(r.getChange().change().getDest().get()).isEqualTo(groupRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); if (expectedError!= null) { exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Update update not allowed"); } gApi.changes().id(r.getChangeId()).current().submit(); }
@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, "update not allowed"); }
@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, "Update not allowed"); }
@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, "update not allowed"); }
@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, "Update not allowed"); }
@org.junit.Test public void pushToGroupNamesBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); allowGlobalCapabilities(com.google.gerrit.acceptance.api.group.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE); assertPushToGroupBranch(allUsers, RefNames.REFS_GROUPNAMES, "Group update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, "Update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, "update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, "Group update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, "Push update not allowed"); }
@org.junit.Test public void pushToDeletedGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception {java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsDeletedGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(gApi.groups().create(name("foo")).get().id)); createBranch(allUsers, groupRef); assertPushToGroupBranch(allUsers, groupRef, "group update not allowed"); }
@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String dupGroupName = name("dupGroup"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Group " + dupGroupName) + " already exists")); gApi.groups().create(dupGroupName); }
@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String dupGroupName = name("dupGroup"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Group '" + dupGroupName) + "' already exists")); gApi.groups().create(dupGroupName); }
@org.junit.Test public void createDuplicateGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String dupGroupName = name("dupGroup"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Group " + dupGroupName) + " already exists")); gApi.groups().create(dupGroupName); }
@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String dupGroupName = name("dupGroup"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("GroupName '" + dupGroupName) + "' already exists")); gApi.groups().create(dupGroupName); }
@org.junit.Test public void createDuplicateGroupCaseSensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String dupGroupName = name("dupGroup"); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage((("Group '" + dupGroupName) + "' already exists")); gApi.groups().create(dupGroupName); }
private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRefName,java.lang.String expectedErrorOnUpdate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, accountConfig, GroupConfig.GROUP_CONFIG_FILE, content); if (expectedErrorOnUpdate!= null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }
private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRefName,java.lang.String expectedErrorOnUpdate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, accountConfig, GroupConfig.GROUP_CONFIG_FILE, groupRefName); if (expectedErrorOnUpdate!= null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }
private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRefName,java.lang.String expectedErrorOnUpdate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "new account config", GroupConfig.GROUP_CONFIG_FILE, content); if (expectedErrorOnUpdate!= null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }
private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRefName,java.lang.String expectedErrorOnUpdate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, accountConfig, GroupConfig.GROUP_CONFIG_FILE, "group content"); if (expectedErrorOnUpdate!= null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }
private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String groupRefName,java.lang.String expectedErrorOnUpdate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "new account config", GroupConfig.GROUP_CONFIG_FILE, "some content"); if (expectedErrorOnUpdate!= null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }
private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String expectedErrorOnCreate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, GroupConfig.GROUP_CONFIG_FILE, (("foo" + (name("bar")))); if (expectedErrorOnCreate!= null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }
private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String expectedErrorOnCreate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ("create account config GroupConfig.GROUP_CONFIG_FILE", "foo content " + (name("bar")))); if (expectedErrorOnCreate!= null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }
private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String expectedErrorOnCreate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ("create account config", GroupConfig.GROUP_CONFIG_FILE, "foo content " + (name("bar")))); if (expectedErrorOnCreate!= null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }
private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String expectedErrorOnCreate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ("create account config GroupConfig.GROUP_CONFIG_FILE", ("foo bar" + (name("bar")))); if (expectedErrorOnCreate!= null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }
private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String expectedErrorOnCreate) throwsjava.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, GroupConfig.GROUP_CONFIG_FILE, (("foo" + (name("bar")))) + (name("bar")))); if (expectedErrorOnCreate!= null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }
@org.junit.Test public void onlyVisibleGroupsReturned() throwsjava.lang.Exception {java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = newGroupName; in.description = "new hidden account"; in.visibleToAll = false; in.ownerId = adminGroupUuid().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void onlyVisibleGroupsReturned() throwsjava.lang.Exception {java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = newGroupName; in.description = "hidden account"; in.visibleToAll = false; in.ownerId = adminGroupUuid().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void onlyVisibleGroupsReturned() throwsjava.lang.Exception {java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = newGroupName; in.description = "Hidden account"; in.visibleToAll = false; in.ownerId = adminGroupUuid().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void onlyVisibleGroupsReturned() throwsjava.lang.Exception {java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = newGroupName; in.description = "New hidden account"; in.visibleToAll = false; in.ownerId = adminGroupUuid().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void onlyVisibleGroupsReturned() throwsjava.lang.Exception {java.lang.String newGroupName = name("newGroup"); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = newGroupName; in.description = "new hidden account."; in.visibleToAll = false; in.ownerId = adminGroupUuid().get(); gApi.groups().create(in); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).doesNotContainKey(newGroupName); setApiUser(admin); gApi.groups().id(newGroupName).addMembers(user.username); setApiUser(user); assertThat(gApi.groups().list().getAsMap()).containsKey(newGroupName); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "update not allowed"); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "Update not allowed"); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "Push update not allowed"); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "Group update not allowed"); }
@org.junit.Test public void pushToGroupBranchIsRejectedForAllUsersRepo() throwsjava.lang.Exception { assume().that(groupsInNoteDb()).isTrue(); assertPushToGroupBranch(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), "Ref update not allowed"); }
@org.junit.Test public void groupDescription() throwsjava.lang.Exception {java.lang.String name = name("group"); gApi.groups().create(name); assertThat(gApi.groups().id(name).description()).isEmpty();java.lang.String desc = "The description for the account."; gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(desc); gApi.groups().id(name).description(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); }
@org.junit.Test public void groupDescription() throwsjava.lang.Exception {java.lang.String name = name("group"); gApi.groups().create(name); assertThat(gApi.groups().id(name).description()).isEmpty();java.lang.String desc = "Description for the account."; gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(desc); gApi.groups().id(name).description(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); }
@org.junit.Test public void groupDescription() throwsjava.lang.Exception {java.lang.String name = name("group"); gApi.groups().create(name); assertThat(gApi.groups().id(name).description()).isEmpty();java.lang.String desc = "A description for the account."; gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(desc); gApi.groups().id(name).description(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); }
@org.junit.Test public void groupDescription() throwsjava.lang.Exception {java.lang.String name = name("group"); gApi.groups().create(name); assertThat(gApi.groups().id(name).description()).isEmpty();java.lang.String desc = "Test description for the account."; gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(desc); gApi.groups().id(name).description(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); }
@org.junit.Test public void groupDescription() throwsjava.lang.Exception {java.lang.String name = name("group"); gApi.groups().create(name); assertThat(gApi.groups().id(name).description()).isEmpty();java.lang.String desc = "This is a description for the account."; gApi.groups().id(name).description(desc); assertThat(gApi.groups().id(name).description()).isEqualTo(desc); gApi.groups().id(name).description(null); assertThat(gApi.groups().id(name).description()).isEmpty(); gApi.groups().id(name).description(""); assertThat(gApi.groups().id(name).description()).isEmpty(); }
@org.junit.Test public void reindexPermissions() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members =java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("not allowed to index account"); gApi.groups().id(group.id).index(); }
@org.junit.Test public void reindexPermissions() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members =java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("Not allowed to index account"); gApi.groups().id(group.id).index(); }
@org.junit.Test public void reindexPermissions() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members =java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("not allowed to index account."); gApi.groups().id(group.id).index(); }
@org.junit.Test public void reindexPermissions() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members =java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage("Not allowed to index account."); gApi.groups().id(group.id).index(); }
@org.junit.Test public void reindexPermissions() throwsjava.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("group"); in.members =java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(("not allowed to index account")); gApi.groups().id(group.id).index(); }
@org.junit.Test public void createDuplicateSystemGroupCaseInsensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Duplicate Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupCaseInsensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Duplicate Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupCaseInsensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "Users already exists"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Duplicate Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupCaseInsensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "New Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Duplicate Users already exists"); gApi.groups().create(newGroupName); }
@org.junit.Test public void createDuplicateSystemGroupCaseInsensitiveName_Conflict() throwsjava.lang.Exception {java.lang.String newGroupName = "new users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Duplicate Users already exists"); gApi.groups().create(newGroupName); }
com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowBlame", true)); info.allowDrafts = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowDrafts", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((cfg.getBoolean("change", "showAssigneeInChangesTable", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt("change", "largeChange", 500); info.privateByDefault = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "privateByDefault", false)); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyTooltip")).orElse("Reply and score")); info.replyLabel = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyLabel")).orElse("Reply")) + "â¦"; info.updateDelay = ((int) (com.google.gerrit.server.restapi.config.ConfigUtil.getTimeUnit(cfg, "change", null, "updateDelay", 300,java.util.concurrent.TimeUnit.SECONDS))); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }
private com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowBlame", true)); info.allowDrafts = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowDrafts", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((cfg.getBoolean("change", "showAssigneeInChangesTable", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt("change", "largeChange", 500); info.privateByDefault = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "privateByDefault", false)); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyTooltip")).orElse("Reply and score")); info.replyLabel = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyLabel")).orElse("Reply")) + "â¦"; info.updateDelay = ((int) (com.google.gerrit.server.restapi.config.ConfigUtil.getTimeUnit(cfg, "change", null, "updateDelay", 300,java.util.concurrent.TimeUnit.SECONDS))); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }
com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.extensions.common.ChangeConfigInfo info = new com.google.gerrit.extensions.common.ChangeConfigInfo(); info.allowBlame = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowBlame", true)); info.allowDrafts = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "allowDrafts", true)); boolean hasAssigneeInIndex = indexes.getSearchIndex().getSchema().hasField(ChangeField.ASSIGNEE); info.showAssigneeInChangesTable = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((cfg.getBoolean("change", "showAssigneeInChangesTable", false)) && hasAssigneeInIndex)); info.largeChange = cfg.getInt("change", "largeChange", 500); info.privateByDefault = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(cfg.getBoolean("change", "privateByDefault", false)); info.replyTooltip = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyTooltip")).orElse("Reply and score")); info.replyLabel = (java.util.Optional.ofNullable(cfg.getString("change", null, "replyLabel")).orElse("Reply")); info.updateDelay = ((int) (com.google.gerrit.server.restapi.config.ConfigUtil.getTimeUnit(cfg, "change", null, "updateDelay", 300,java.util.concurrent.TimeUnit.SECONDS))); info.submitWholeTopic = com.google.gerrit.server.git.MergeSuperSet.wholeTopicEnabled(cfg); return info; }
com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { return new com.google.gerrit.extensions.common.ChangeConfigInfo(); }
com.google.gerrit.extensions.common.ChangeConfigInfo getChangeInfo(org.eclipse.jgit.lib.Config cfg) { return new com.google.gerrit.extensions.common.ChangeConfigInfo(); } }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.restapi.config.AllProjectsName allProjectsName, com.google.gerrit.server.restapi.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis =java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.restapi. config.AllProjectsName allProjectsName, com.google.gerrit.server.restapi. config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis =java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.api.config.AllProjectsName allProjectsName, com.google.gerrit.server.api.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis =java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.restapi. config.AllProjectsName allProjectsName, com.google.gerrit.server.restapi.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis =java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.restapi.config.AllProjectsName allProjectsName, com.google.gerrit.server.restapi.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis =java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }
@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.restapi. config.ConfigResource rsrc) throwsjava.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(accountVisibilityProvider); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = "/static/" + (SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config);java.util.Map<java.lang.String,java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty()))? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }
java @java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.restapi. config.ConfigResource rsrc) throwsjava.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(accountVisibilityProvider); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = "/static/" + (SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config);java.util.Map<java.lang.String,java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty()))? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.restapi.config.ConfigResource rsrc) throwsjava.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(accountVisibilityProvider); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = "/static/" + (SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config);java.util.Map<java.lang.String,java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty()))? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }
java @java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.restapi.config.ConfigResource rsrc) throwsjava.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(accountVisibilityProvider); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = "/static/" + (SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config);java.util.Map<java.lang.String,java.lang.String> urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty()))? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }
@java.lang.Override public com.google.gerrit.extensions.common.ServerInfo apply(com.google.gerrit.server.restapi. config.ConfigResource rsrc) throwsjava.net.MalformedURLException { com.google.gerrit.extensions.common.ServerInfo info = new com.google.gerrit.extensions.common.ServerInfo(); info.accounts = getAccountsInfo(accountVisibilityProvider); info.auth = getAuthInfo(authConfig, realm); info.change = getChangeInfo(config); info.download = getDownloadInfo(downloadSchemes, downloadCommands, cloneCommands, archiveFormats); info.gerrit = getGerritInfo(config, allProjectsName, allUsersName); info.noteDbEnabled = com.google.gerrit.server.restapi.config.GetServerInfo.toBoolean(isNoteDbEnabled()); info.plugin = getPluginInfo(); if (java.nio.file.Files.exists(sitePaths.site_theme)) { info.defaultTheme = "/static/" + (SitePaths.THEME_FILENAME); } info.sshd = getSshdInfo(config); info.suggest = getSuggestInfo(config); info.urlAliases = getUrlAliasesInfo(config); info.urlAliases = (!(urlAliases.isEmpty()))? urlAliases : null; info.user = getUserInfo(anonymousCowardName); info.receive = getReceiveInfo(); return info; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ChildProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Project.ChildProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ChildProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.ProjectChildResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Project>> views() { return views; }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException {java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> ("'" + u) + "'").collect(java.util.stream.Collectors.joining(",")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format((((("The following account UUIDs for 'groups' in gerrit.config must be valid:\n" + "The following account UUIDs could not be resolved:\n" + "The following account UUIDs could not be resolved:\n") + " Please remove/fix these 'groups' subsections in " + gerrit.config.getSubsections("groups"))))); } }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException {java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> ("'" + u) + "'").collect(java.util.stream.Collectors.joining(",")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format((((("The following account UUIDs for 'groups' in gerrit.config must be valid:\n" + "The following account UUIDs could not be resolved:\n" + "The following account UUIDs could not be resolved:\n" + "Please remove/fix these 'groups' subsections in ") + gerrit.config.getSubsections("groups"))))); } }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException {java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> ("'" + u) + "'").collect(java.util.stream.Collectors.joining(",")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format((((("The following account UUIDs for 'groups' in gerrit.config must be valid:\n" + "The following account UUIDs could not be resolved:\n" + "The following account UUIDs could not be resolved:\n") + " Please remove/fix these 'groups' subsections in ") + gerrit.config.getSubsections("groups")))); } }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException {java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> ("'" + u) + "'").collect(java.util.stream.Collectors.joining(",")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format((((("The following account UUIDs for 'groups' in gerrit.config must be valid:\n" + "The following account UUIDs could not be resolved:\n" + "The following account UUIDs could not be resolved:\n") + " Please remove/fix these 'groups' subsections in ") + gerrit.config.getSubsections("groups"))))); } }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException {java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> ("'" + u) + "'").collect(java.util.stream.Collectors.joining(",")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format((((("The following account UUIDs for 'groups' in gerrit.config must be valid:\n" + "The following account UUIDs could not be resolved:\n" + "The following account UUIDs could not be resolved:\n") + " Please remove/fix these 'groups' subsections in ") + gerrit.config.getSubsections("groups").stream().join(",")); } }
@java.lang.Deprecated @org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, usage = "query to inspect (deprecated: use --account /-g instead)") void addGroup_Deprecated(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }
@java.lang.Deprecated @org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, usage = "query to inspect") void addGroup_Deprecated(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }
@java @java.lang.Deprecated @org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, usage = "query to inspect (deprecated: use --account /-g instead)") void addGroup_Deprecated(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }
@java.lang.Deprecated @org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, usage = "q to inspect (deprecated: use --account /-g instead)") void addGroup_Deprecated(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }
@java.lang.Deprecated @org.kohsuke.args4j.Option(name = "--query", aliases = { "-q" }, usage = "query to inspect (deprecated: use --account /-g instead)" void addGroup_Deprecated(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { addGroup(uuid); }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroupName; putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException |java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroupName; putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException |java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroupName; putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException |java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.api.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroupName; putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException |java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
javajava @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(groupName)); com.google.gerrit.extensions.common.NameInput input = new com.google.gerrit.extensions.common.NameInput(); input.name = newGroupName; putName.apply(rsrc, input); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException |java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw die(e); } }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { returnjava.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { returnjava.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Invalid account UUID " + groupUuid)); } }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { returnjava.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { returnjava.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((("Invalid account UUID " + groupUuid)); } }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { returnjava.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { returnjava.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((("Duplicate account UUID " + groupUuid)); } }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { returnjava.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { returnjava.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Duplicate account UUID " + groupUuid)); } }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { returnjava.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { returnjava.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Invalid group UUID " + groupUuid)); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource>> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource> list() { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException;
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list(); }
@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
@java.lang.Override public com.google.gerrit.server.api.project.FileResource parse(com.google.gerrit.server.restapi.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.api.project.FileResource parse(com.google.gerrit.server.restapi.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ("account = " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo(((("account \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ("account = " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((("account \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ("project.config = " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo(((("account \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ("project.name = " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo(((("account \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ("project.name = \"" + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo((("account \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", (" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "upload = account Developers ") + "read = account Developers ") + "")); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.Permission submit = section.getPermission(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "submit = account Staff ") + "upload = account Developers ") + "read = account Developers ") + "")); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", (" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "upload = account Developers ") + "read = account Developers ") + "")); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.Permission submit = section.getPermission(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(((" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "submit = account Staff ") + "upload = account Developers ") + "read = account Developers") + "")); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", (" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "upload = account Developers ") + "read = account Developers ") + "")); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.Permission submit = section.getPermission(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo((" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "submit = account Staff ") + "upload = account Developers ") + "read = account Developers")); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", "(" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "upload = account Developers ") + "read = account Developers ") + "")); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.Permission submit = section.getPermission(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(("(" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "submit = account Staff ") + "upload = account Developers ") + "read = account Developers ") + "")); }
@org.junit.Test public void editConfigMissingGroupTableEntry() throwsjava.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", "(" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "upload = account Developers ") + "read = account Developers ") + "")); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.common.data.AccessSection section = cfg.getAccessSection("refs/heads/*"); com.google.gerrit.common.data.Permission submit = section.getPermission(Permission.SUBMIT); submit.add(new com.google.gerrit.common.data.PermissionRule(cfg.resolve(staff))); rev = commit(cfg); assertThat(text(rev, "project.config")).isEqualTo(("(" + (((("exclusiveGroupPermissions = read submit ") + "submit = account People Who Can Submit ") + "submit = account Staff ") + "upload = account Developers ") + "read = account Developers " + "")); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.access.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.api.access.AccessResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.access.AccessResource>> views() { return views(); }
@java.lang.Override public com.google.gerrit.server.restapi.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.server.restapi.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return parse(parent, id, null); }
@java.lang.Override public com.google.gerrit.server.restapi.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return parse(parent, id); }
@java.lang.Override public com.google.gerrit.server.restapi.access.AccessResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return parse(parent, id, null, null); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Tag " + (resource.getTagInfo().ref)) + " already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Tag \"" + (resource.getTagInfo().ref)) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Tag '" + (resource.getTagInfo().ref)) + "' already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("tag \"" + (resource.getTagInfo().ref)) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource, com.google.gerrit.extensions.api.projects.TagInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("tag " + (resource.getTagInfo().ref)) + " already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).ref(rsrc.getBranchKey()).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch \"" + (rsrc.getBranchKey())) + "\" has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).ref(rsrc.getBranchKey()).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch \"" + (rsrc.getBranchKey())) + "\" has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).ref(rsrc.getBranchKey()).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).ref(rsrc.getBranchKey()).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { permissionBackend.user(user).ref(rsrc.getBranchKey()).check(RefPermission.DELETE); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch \"" + (rsrc.getBranchKey())) + "\" has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server. restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) { return com.google.gerrit.server.restapi.group.GroupJson.createOptions(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource) { return com.google.gerrit.server.restapi.group.GroupJson.createOptions(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.api.group.GroupResource resource) { return com.google.gerrit.server.restapi.group.GroupJson.createOptions(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource) { return com.google.gerrit.server.restapi. group.GroupJson.createOptions(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) { return groupJson.createOptions(resource.getGroup()); }
@org.kohsuke.args4j.Option(name = "-o", usage = "options per account") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "options per account"); public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "options per account");
@org.kohsuke.args4j.Option(name = "-o", usage = "options per account") public void addOption(com.google.gerrit.extensions.client.GroupOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "Options per account");
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = " query") public void setQuery(java.lang.String query) { this.query = query; }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = "query") public void setQuery(java.lang.String query) { this.query = query; }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = "query query") public void setQuery(java.lang.String query) { this.query = query; }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = " query ") public void setQuery(java.lang.String query) { this.query = query; }
@org.kohsuke.args4j.Option(name = "--query2", aliases = { "-q2" }, usage = " query query") public void setQuery(java.lang.String query) { this.query = query; }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.restapi. project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("inherited flag can only be used with default"); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.restapi.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName().substring(com.google.gerrit.server.restapi.project.REFS_DASHBOARDS.length()), rsrc.getPathName(), rsrc.getConfig(), rsrc.getProjectState().getName(), true); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.restapi. project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("This flag can only be used with default"); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.restapi.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName().substring(com.google.gerrit.server.restapi.project.REFS_DASHBOARDS.length()), rsrc.getPathName(), rsrc.getConfig(), rsrc.getProjectState().getName(), true); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.restapi.project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("inherited flag can only be used with default"); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.restapi.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName().substring(com.google.gerrit.server.restapi.project.REFS_DASHBOARDS.length()), rsrc.getPathName(), rsrc.getConfig(), rsrc.getProjectState().getName(), true); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.restapi. project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("inherited flag can only be used with default"); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.restapi.projects.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName().substring(com.google.gerrit.server.restapi.project.REFS_DASHBOARDS.length()), rsrc.getPathName(), rsrc.getConfig(), rsrc.getProjectState().getName(), true); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.DashboardInfo apply(com.google.gerrit.server.restapi. project.DashboardResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if ((inherited) && (!(rsrc.isProjectDefault()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("inherited flag can only be used with default"); } if (rsrc.isProjectDefault()) { try { rsrc = defaultOf(rsrc.getProjectState(), rsrc.getUser()); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } return com.google.gerrit.server.restapi.project.DashboardsCollection.parse(rsrc.getProjectState().getProject(), rsrc.getRefName().substring(com.google.gerrit.server. restapi.project.REFS_DASHBOARDS.length()), rsrc.getPathName(), rsrc.getConfig(), rsrc.getProjectState().getName(), true); }
private com.google.gerrit.server.restapi.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
com.google.gerrit.server.restapi.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.restapi. project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.api.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
public com.google.gerrit.server.restapi.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.api.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.api.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.api.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(com.google.gerrit.extensions.restapi.Url.encode(path))); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.RobotCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.RobotCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi. change.RobotCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.ChangeCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.RobotCommentResource>> views() { return views(); }
@org.junit.Test public void byOwner() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name("owner-account")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name("group2")); assertQuery("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:" + (ownerGroup.name)), group, ownerGroup); }
@org.junit.Test public void byOwner() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name("owner-account")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name("group2")); assertQuery(("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:" + (ownerGroup.name)), group, ownerGroup); }
@org.junit.Test public void byOwner() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name(("owner-account"))); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name("group2")); assertQuery("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:" + (ownerGroup.name)), group, ownerGroup); }
@org.junit.Test public void byOwner() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name(("owner-account"))); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name("group2")); assertQuery(("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery(("owner:" + (ownerGroup.name)), group, ownerGroup); }
@org.junit.Test public void byOwner() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo ownerGroup = createGroup(name("owner-account")); com.google.gerrit.extensions.common.GroupInfo group = createGroupWithOwner(name("group"), ownerGroup); createGroup(name("group2")); assertQuery("owner:" + (group.id))); assertQuery(("owner:" + (ownerGroup.id)), group, ownerGroup); assertQuery("owner:" + (ownerGroup.name)), group, ownerGroup); }
@java.lang.Override public com.google.gerrit.server.restapi.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return c; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.server.restapi.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.restapi.change.RobotCommentResource(rev, id); }
@org.junit.Test public void byName() throwsjava.lang.Exception { assertQuery("name:non-existing"); GroupInfo group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name("account-with-hyphen")); createGroup(name("account-no-match-with-hyphen")); assertQuery(("name:" + (groupWithHyphen.name)), groupWithHyphen); }
@org.junit.Test public void byName() throwsjava.lang.Exception { assertQuery("name:non-existing"); GroupInfo group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name("AccountWithHyphen")); createGroup(name("AccountNoMatchWithHyphen")); assertQuery(("name:" + (groupWithHyphen.name)), groupWithHyphen); }
@org.junit.Test public void byName() throwsjava.lang.Exception { assertQuery("name:non-existing"); GroupInfo group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name("account-no-match-with-hyphen")); assertQuery(("name:" + (groupWithHyphen.name)), groupWithHyphen); }
@org.junit.Test public void byName() throwsjava.lang.Exception { assertQuery("name:non-existing"); GroupInfo group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name("account-with-hyphen")); createGroup(name(("account-no-match-with-hyphen"))); assertQuery(("name:" + (groupWithHyphen.name)), groupWithHyphen); }
@org.junit.Test public void byName() throwsjava.lang.Exception { assertQuery("name:non-existing"); GroupInfo group = createGroup(name("Group")); assertQuery(("name:" + (group.name)), group); assertQuery(("name:" + (group.name.toLowerCase(Locale.US)))); GroupInfo groupWithHyphen = createGroup(name("account-with-hyphen")); assertQuery(("name:" + (groupWithHyphen.name)), groupWithHyphen); }
@org.junit.Test public void byDefaultField() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-account")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("that contains foo and the UUID of group2: " + (group2.id))); assertQuery("non-existing"); assertQuery("foo", group1, group3); assertQuery(group2.id, group2, group3); }
@org.junit.Test public void byDefaultField() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-account")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("that contains foo and the UUID of group2:" + (group2.id))); assertQuery("non-existing"); assertQuery("foo", group1, group3); assertQuery(group2.id, group2, group3); }
@org.junit.Test public void byDefaultField() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("group1")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("that contains foo and the UUID of group2: " + (group2.id))); assertQuery("non-existing"); assertQuery("foo", group1, group3); assertQuery(group2.id, group2, group3); }
@org.junit.Test public void byDefaultField() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-account")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("that contains foo and the UUID of group2: " + (group2.id))); assertQuery("non-existing"); assertQuery("foo", group1, group2); assertQuery(group2.id, group2, group3); }
@org.junit.Test public void byDefaultField() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(("foo-account")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("that contains foo and the UUID of group2: " + (group2.id))); assertQuery("non-existing"); assertQuery("foo", group1, group3); assertQuery(group2.id, group2, group3); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) {java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_COMMIT_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()), path, parent); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) {java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_COMMIT_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()), path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) {java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_COMMIT_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()), path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) {java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_COMMIT_MESSAGE).base64(); } else if (Patch.MERGE_LIST.equals(path)) { byte[] mergeList = getMergeList(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(mergeList).setContentType(FileContentUtil.TEXT_X_GERRIT_MERGE_LIST).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()), path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); if (Patch.COMMIT_MSG.equals(path)) {java.lang.String msg = getMessage(rsrc.getRevision().getChangeResource().getNotes()); return com.google.gerrit.extensions.restapi.BinaryResult.create(msg).setContentType(FileContentUtil.TEXT_X_GERRIT_COMMIT_MESSAGE).base64(); } return fileContentUtil.getContent(projectCache.checkedGet(rsrc.getRevision().getProject()), org.eclipse.jgit.lib.ObjectId.fromString(rsrc.getRevision().getPatchSet().getRevision().get()), path, parent); }
@org.junit.Test public void fixupCommitPostDatesAllAuditEventsEvenIfAuditEventsAreInTheFuture() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.util.stream.IntStream.range(0, 20).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs());java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testing.TestTimeUtil.resetWithClockStep(1,java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, future)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "Uploaded account"); assertServerCommit(log.get(1), "Uploaded account Group <x> 8@server-id"); assertServerCommit(log.get(2), "Uploaded account Group <y> Group <z>"); assertThat(log.stream().map(( c) -> c.committer.date).collect(toImmutableList())).named("%s", log).isOrdered(); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).isLessThan(future); }
@org.junit.Test public void fixupCommitPostDatesAllAuditEventsEvenIfAuditEventsAreInTheFuture() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.util.stream.IntStream.range(0, 20).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs());java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testing.TestTimeUtil.resetWithClockStep(1,java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, future)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "Server Account"); assertServerCommit(log.get(1), "Server Account Group <x> 8@server-id"); assertServerCommit(log.get(2), "Server Account Group <y> Group <z>"); assertThat(log.stream().map(( c) -> c.committer.date).collect(toImmutableList())).named("%s", log).isOrdered(); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).isLessThan(future); }
@org.junit.Test public void fixupCommitPostDatesAllAuditEventsEvenIfAuditEventsAreInTheFuture() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.util.stream.IntStream.range(0, 20).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs());java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testing.TestTimeUtil.resetWithClockStep(1,java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, future)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "server-id"); assertServerCommit(log.get(1), "server-group"); assertServerCommit(log.get(2), "server-group"); assertServerCommit(log.get(2), "server-group"); assertThat(log.stream().map(( c) -> c.committer.date).collect(toImmutableList())).named("%s", log).isOrdered(); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).isLessThan(future); }
@org.junit.Test public void fixupCommitPostDatesAllAuditEventsEvenIfAuditEventsAreInTheFuture() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.util.stream.IntStream.range(0, 20).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs());java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testing.TestTimeUtil.resetWithClockStep(1,java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, future)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "server-id"); assertServerCommit(log.get(1), "server-group Group <x> 8@server-id"); assertServerCommit(log.get(2), "server-group Group <y> Group <z>"); assertThat(log.stream().map(( c) -> c.committer.date).collect(toImmutableList())).named("%s", log).isOrdered(); assertThat(com.google.gerrit.common.TimeUtil.nowTs()).isLessThan(future); }
@org.junit.Test public void fixupCommitPostDatesAllAuditEventsEvenIfAuditEventsAreInTheFuture() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.util.stream.IntStream.range(0, 20).forEach(( i) -> com.google.gerrit.common.TimeUtil.nowTs());java.sql.Timestamp future = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.testing.TestTimeUtil.resetWithClockStep(1,java.util.concurrent.TimeUnit.SECONDS); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, future)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "server-id"); assertServerCommit(log.get(1), "server-group"); assertServerCommit(log.get(2), "server-group"); assertServerCommit(log.get(3), "server-group"); assertServerCommit(log.get(4), "server-group"); assertServerCommit(log.get(5), "server-group"); assertServerCommit(log.get(6), "server-group"); assertServerCommit(log.get(7), "server-group"); assertServerCommit(log.get(8), "server-group"); }
@org.junit.Test public void memberAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).members(member(g, 1)).memberAudit(addMember(g, 1, 8, t2), addAndRemoveMember(g, 2, 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Uploaded account"); assertServerCommit(log.get(1), "Uploaded account"); assertServerCommit(log.get(2), "Uploaded account"); assertServerCommit(log.get(3), "Uploaded account"); assertCommit(log.get(4), "Uploaded account"); assertCommit(log.get(5), "Uploaded account"); assertCommit(log.get(6), "Uploaded account"); assertCommit(log.get(7), "Uploaded account"); assertCommit(log.get(8), "Uploaded account"); assertCommit(log.get(9), "Uploaded account"); }
@org.junit.Test public void memberAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).members(member(g, 1)).memberAudit(addMember(g, 1, 8, t2), addAndRemoveMember(g, 2, 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Uploaded account"); assertServerCommit(log.get(1), "Uploaded account"); assertServerCommit(log.get(2), "Uploaded account"); assertServerCommit(log.get(3), "Uploaded account"); assertServerCommit(log.get(4), "Uploaded account"); assertServerCommit(log.get(5), "Uploaded account"); assertServerCommit(log.get(6), "Uploaded account"); assertServerCommit(log.get(7), "Uploaded account"); assertServerCommit(log.get(8), "Uploaded account"); assertServerCommit(log.get(9), "Uploaded account"); }
@org.junit.Test public void memberAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).members(member(g, 1)).memberAudit(addMember(g, 1, 8, t2), addAndRemoveMember(g, 2, 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Uploaded account"); assertServerCommit(log.get(1), "Uploaded account"); assertServerCommit(log.get(2), "Uploaded account"); assertServerCommit(log.get(3), "Uploaded account"); assertServerCommit(log.get(4), "Uploaded account"); assertCommit(log.get(5), "Uploaded account"); assertCommit(log.get(6), "Uploaded account"); assertCommit(log.get(7), "Uploaded account"); assertCommit(log.get(8), "Uploaded account"); assertCommit(log.get(9), "Uploaded account"); }
@org.junit.Test public void memberAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).members(member(g, 1)).memberAudit(addMember(g, 1, 8, t2), addAndRemoveMember(g, 2, 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Uploaded account"); assertServerCommit(log.get(1), "Uploaded account"); assertServerCommit(log.get(2), "Uploaded account"); assertServerCommit(log.get(3), "Uploaded account"); assertCommit(log.get(4), "Uploaded account"); assertCommit(log.get(5), "Uploaded account"); assertCommit(log.get(6), "Uploaded account"); assertCommit(log.get(7), "Uploaded account"); assertCommit(log.get(8), "Uploaded account"); }
@org.junit.Test public void memberAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).members(member(g, 1)).memberAudit(addMember(g, 1, 8, t2), addAndRemoveMember(g, 2, 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Uploaded account"); assertServerCommit(log.get(1), "Uploaded account"); assertServerCommit(log.get(2), "Uploaded account"); assertServerCommit(log.get(3), "Uploaded account"); assertServerCommit(log.get(4), "Uploaded account"); assertCommit(log.get(4), "Uploaded account"); assertCommit(log.get(5), "Uploaded account"); assertCommit(log.get(6), "Uploaded account"); assertCommit(log.get(7), "Uploaded account"); }
@org.junit.Test public void unauditedByIdAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "Account Group <x> 8@server-id"); assertServerCommit(log.get(1), "Account Group <y> Group <z>"); }
@org.junit.Test public void unauditedByIdAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), account); assertServerCommit(log.get(2), account); }
@org.junit.Test public void unauditedByIdAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), accountGroup); assertServerCommit(log.get(2), accountGroup); }
@org.junit.Test public void unauditedByIdAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), accountGroup("x", 8)); assertServerCommit(log.get(2), accountGroup("y", 8)); }
@org.junit.Test public void unauditedByIdAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "Account Group <x> 8@server-id"); assertServerCommit(log.get(1), "Account Group <y> Group <z>")); }
@org.junit.Test public void redundantByIdAuditsAreIgnored() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t5 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId().byIdAudit(addById(g, "x", 8, t1), addById(g, "x", 8, t3), addById(g, "x", 9, t4), addAndRemoveById(g, "x", 8, t2, 9, t5)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "New account"); assertCommit(log.get(1), "New account Group <x> 8"); assertCommit(log.get(2), "New account Group <x> 9"); }
@org.junit.Test public void redundantByIdAuditsAreIgnored() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t5 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId().byIdAudit(addById(g, "x", 8, t1), addById(g, "x", 8, t3), addById(g, "x", 9, t4), addAndRemoveById(g, "x", 8, t2, 9, t5)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "Uploaded account"); assertCommit(log.get(1), "Uploaded account Group <x> 8"); assertCommit(log.get(2), "Uploaded account Group <x> 9"); }
@org.junit.Test public void redundantByIdAuditsAreIgnored() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t5 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId().byIdAudit(addById(g, "x", 8, t1), addById(g, "x", 8, t3), addById(g, "x", 9, t4), addAndRemoveById(g, "x", 8, t2, 9, t5)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "New account"); assertCommit(log.get(1), "New account Group <x> 7 7@server-id"); assertCommit(log.get(2), "New account Group <x> 8@server-id"); assertCommit(log.get(2), "New account Group <x> 9 "9@server-id"); }
@org.junit.Test public void redundantByIdAuditsAreIgnored() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t5 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId().byIdAudit(addById(g, "x", 8, t1), addById(g, "x", 8, t3), addById(g, "x", 9, t4), addAndRemoveById(g, "x", 8, t2, 9, t5)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "Created account"); assertCommit(log.get(1), "Created account Group <x> 7 7@server-id"); assertCommit(log.get(2), "Created account Group <x> 8 8@server-id"); assertCommit(log.get(2), "Created account Group <x> 9 9@server-id"); }
@org.junit.Test public void redundantByIdAuditsAreIgnored() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t4 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t5 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).byId().byIdAudit(addById(g, "x", 8, t1), addById(g, "x", 8, t3), addById(g, "x", 9, t4), addAndRemoveById(g, "x", 8, t2, 9, t5)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "New account"); assertCommit(log.get(1), "New account Group <x> 7 7@server-id"); assertCommit(log.get(2), "New account Group <x> 8@server-id"); assertCommit(log.get(2), "New account Group <x> 9 9@server-id"); }
@org.junit.Test public void unauditedMembershipsAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), account); assertServerCommit(log.get(2), account); assertServerCommit(log.get(3), account); }
@org.junit.Test public void unauditedMembershipsAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), account); assertServerCommit(log.get(2), account); assertServerCommit(log.get(3), account); assertServerCommit(log.get(4), account); }
@org.junit.Test public void unauditedMembershipsAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), "Account 0 <0@server-id> 8@server-id"); assertServerCommit(log.get(1), "Account 1 <1@server-id> Account 2 <2@server-id> Account 3 <3@server-id>"); }
@org.junit.Test public void unauditedMembershipsAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), account); assertServerCommit(log.get(2), account); assertServerCommit(log.get(3), account); assertServerCommit(log.get(4), account); assertServerCommit(log.get(5), account); }
@org.junit.Test public void unauditedMembershipsAddedAtEnd() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(3); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), account); assertServerCommit(log.get(2), account); assertServerCommit(log.get(3), account); assertServerCommit(log.get(4), account); assertServerCommit(log.get(5), account); assertServerCommit(log.get(6), account); }
@org.junit.Test public void auditsAtSameTimestampBrokenDownByUserAndType() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; int user2 = 9; com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, user1, ts), addMember(g, 2, user2, ts), addMember(g, 3, user1, ts)).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", user1, ts), addById(g, "y", user2, ts), addById(g, "z", user1, ts)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(5); assertServerCommit(log.get(0), account); assertCommit(log.get(1), (("\n" + "Account 1 <1@server-id> + Account 3 <3@server-id> 8 "8@server-id"); assertCommit(log.get(2), ("Account Group <x> Group <z> 8 "8@server-id"); assertCommit(log.get(3), ("Account Group <2@server-id> 9 "9@server-id"); assertCommit(log.get(4), ("Account Group <y> 9 "9@server-id"); }
@org.junit.Test public void auditsAtSameTimestampBrokenDownByUserAndType() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; int user2 = 9; com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, user1, ts), addMember(g, 2, user2, ts), addMember(g, 3, user1, ts)).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", user1, ts), addById(g, "y", user2, ts), addById(g, "z", user1, ts)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(5); assertServerCommit(log.get(0), account); assertCommit(log.get(1), (("\n" + "Account 1 <1@server-id> + Account 3 <3@server-id> 8 "8@server-id"); assertCommit(log.get(2), ("Account Group <x> Group <z> 8 "8@server-id"); assertCommit(log.get(3), ("Account Group <2@server-id> 9 "9@server-id"); assertCommit(log.get(4), "Account Group <y> 9 "9@server-id"); }
@org.junit.Test public void auditsAtSameTimestampBrokenDownByUserAndType() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; int user2 = 9; com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, user1, ts), addMember(g, 2, user2, ts), addMember(g, 3, user1, ts)).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", user1, ts), addById(g, "y", user2, ts), addById(g, "z", user1, ts)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(5); assertServerCommit(log.get(0), account); assertCommit(log.get(1), (("\n" + "Account 1 <1@server-id> + Account 3 <3@server-id> 8 "8@server-id"); assertCommit(log.get(2), ("Account Group <x> Group <z> 8 "8@server-id"); assertCommit(log.get(3), ("Account Group <2@server-id> 9 "9@server-id"); assertCommit(log.get(4), ("Account Group <y> 9 "9@server-id");")); }
@org.junit.Test public void auditsAtSameTimestampBrokenDownByUserAndType() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; int user2 = 9; com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, user1, ts), addMember(g, 2, user2, ts), addMember(g, 3, user1, ts)).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", user1, ts), addById(g, "y", user2, ts), addById(g, "z", user1, ts)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(5); assertServerCommit(log.get(0), account); assertCommit(log.get(1), (("\n" + "Account 1 <1@server-id>\nAccount 3 <3@server-id>\nAccount 2 <2@server-id>\nAccount 4 <4@server-id>\nAccount 5 <5@server-id>\nAccount 6 <6@server-id>\nAccount 7 <7@server-id>\nAccount 8 <8@server-id>\nAccount 9 <9@server-id>\nAccount 10 <10@server-id>\nAccount 11 <11@server-id>\nAccount Group <x> Group <z> 8 "8@server-id"); assertCommit(log.get(3),("Account 2 <2@server-id> 9 "9@server-id"); assertCommit(log.get(4),("Account Group <y> 9 "9@server-
@org.junit.Test public void auditsAtSameTimestampBrokenDownByUserAndType() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp ts = com.google.gerrit.common.TimeUtil.nowTs(); int user1 = 8; int user2 = 9; com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2), member(g, 3)).memberAudit(addMember(g, 1, user1, ts), addMember(g, 2, user2, ts), addMember(g, 3, user1, ts)).byId(byId(g, "x"), byId(g, "y"), byId(g, "z")).byIdAudit(addById(g, "x", user1, ts), addById(g, "y", user2, ts), addById(g, "z", user1, ts)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(5); assertServerCommit(log.get(0), account); assertCommit(log.get(1), (("\n" + "Account 1 <1@server-id>\nAccount 3 <3@server-id>\nAccount 2 <2@server-id>\nAccount 4 <4@server-id>\nAccount 5 <5@server-id>\nAccount 6 <6@server-id>\nAccount 7 <7@server-id>\nAccount 8 <8@server-id>\nAccount 9 <9@server-id>\n\nAccount 10 <10@server-id>\nAccount 11 <11@server-id>\nAccount Group <x> Group <z> 8 "8@server-id"); assertCommit(log.get(3),("Account 2 <2@server-id> 9 "9@server-id"); assertCommit(log.get(4),("Account Group <y> 9 "9@
@org.junit.Test public void byIdAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).byId(byId(g, "x")).byIdAudit(addById(g, "x", 8, t2), addAndRemoveById(g, "y", 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), account); assertCommit(log.get(1), "Group <y> 8 8@server-id"); assertCommit(log.get(2), "Group <x> 8 8@server-id"); assertCommit(log.get(3), "Group <y> 9 9@server-id"); }
@org.junit.Test public void byIdAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).byId(byId(g, "x")).byIdAudit(addById(g, "x", 8, t2), addAndRemoveById(g, "y", 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "New account"); assertCommit(log.get(1), "New account Group <y> 8"); assertCommit(log.get(2), "New account Group <x> 8"); assertCommit(log.get(3), "New account Group <y> 9"); }
@org.junit.Test public void byIdAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).byId(byId(g, "x")).byIdAudit(addById(g, "x", 8, t2), addAndRemoveById(g, "y", 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), accountGroup); assertServerCommit(log.get(2), accountGroup); assertServerCommit(log.get(3), accountGroup); assertCommit(log.get(4), accountGroup); assertCommit(log.get(5), accountGroup); assertCommit(log.get(6), accountGroup); }
@org.junit.Test public void byIdAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).byId(byId(g, "x")).byIdAudit(addById(g, "x", 8, t2), addAndRemoveById(g, "y", 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), account); assertCommit(log.get(1), "Group <y> 8 8@server-id"); assertCommit(log.get(2), "Group <x> 8 8@server-id"); assertCommit(log.get(3), "Group <y> 9 "9@server-id"); }
@org.junit.Test public void byIdAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a");java.sql.Timestamp t1 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t2 = com.google.gerrit.common.TimeUtil.nowTs();java.sql.Timestamp t3 = com.google.gerrit.common.TimeUtil.nowTs(); com.google.gerrit.server.group.db.GroupBundle b = GroupRebuilderTest.builder().group(g).byId(byId(g, "x")).byIdAudit(addById(g, "x", 8, t2), addAndRemoveById(g, "y", 8, t1, 9, t3)).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), accountGroup); assertServerCommit(log.get(2), accountGroup); assertServerCommit(log.get(3), accountGroup); assertServerCommit(log.get(4), accountGroup); assertCommit(log.get(5), accountGroup); assertCommit(log.get(6), accountGroup); }
@org.junit.Test public void membersAndSubgroups() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, "x"), byId(g, "y")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), (("\n" + Account 1 <1@server-id> + Account 2 <2@server-id> + Group <x> + Group <y> }
@org.junit.Test public void membersAndSubgroups() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, "x"), byId(g, "y")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), account); assertServerCommit(log.get(1), (("\n" + Account 1 <1@server-id> + Account 2 <2@server-id> + " Group <x> + Group <y> }
@org.junit.Test public void membersAndSubgroups() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, "x"), byId(g, "y")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ("Created account " + (((("\n" + "Account 1 <1@server-id> ") + "Account 2 <2@server-id> ") + "Group <x> ") + "Group <y>"))); }
@org.junit.Test public void membersAndSubgroups() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, "x"), byId(g, "y")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ("Created account: " + (((("\n" + "Account 1 <1@server-id> ") + "Account 2 <2@server-id> ") + "Group <x> ") + "Group <y>"))); }
@org.junit.Test public void membersAndSubgroups() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, "x"), byId(g, "y")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), ("Created account " + (((("\n" + "Account 1 <1@server-id> ") + "Account 2 <2@server-id> ") + " Group <x> ") + " Group <y>"))); }
@org.junit.Test public void allGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertServerCommit(log.get(0), account); }
@org.junit.Test public void allGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertServerCommit(log.get(0), account); }
@org.junit.Test public void allGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertServerCommit(log.get(0), "some account"); }
@org.junit.Test public void allGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertServerCommit(log.get(0), account.get()); }
@org.junit.Test public void allGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); g.setDescription("Description"); g.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("owner")); g.setVisibleToAll(true); com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertServerCommit(log.get(0), account.getAccountId()); }
@org.junit.Test public void memberAuditLegacyRemoved() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), account); assertCommit(log.get(1), account Account 1 <1@server-id> 8 "8@server-id"); assertCommit(log.get(2), account Account 1 <1@server-id> 8 "8@server-id"); assertCommit(log.get(3), account Account 2 <2@server-id> 8 "8@server-id"); }
@org.junit.Test public void memberAuditLegacyRemoved() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Account 1", "Account 1 <1@server-id> 8@server-id"); assertServerCommit(log.get(1), "Account 2", "Account 2 <2@server-id> 8@server-id"); assertServerCommit(log.get(2), "Account 3", "Account 3 <2@server-id> 8@server-id"); }
@org.junit.Test public void memberAuditLegacyRemoved() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Account 1", "Account 1 <1@server-id> 8@server-id"); assertServerCommit(log.get(1), "Account 2", "Account 2 <2@server-id> 8@server-id"); assertCommit(log.get(2), "Account 3", "Account 3 <2@server-id> 8@server-id"); }
@org.junit.Test public void memberAuditLegacyRemoved() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Account 1", "Account 1 <1@server-id> 8@server-id"); assertServerCommit(log.get(1), "Account 2", "Account 2 <2@server-id> 8@server-id"); assertServerCommit(log.get(2), "Account 3", "Account 3 <3@server-id> 8@server-id"); assertServerCommit(log.get(3), "Account 4", "Account 4 <2@server-id> 8@server-id"); }
@org.junit.Test public void memberAuditLegacyRemoved() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Account 1", "Account 1 <1@server-id> 8@server-id"); assertServerCommit(log.get(1), "Account 2", "Account 2 <2@server-id> 8@server-id"); assertServerCommit(log.get(2), "Account 3", "Account 3 <2@server-id> 8@server-id"); assertServerCommit(log.get(3), "Account 4", "Account 4 <1@server-id> 8@server-id"); }
@org.junit.Test public void minimalGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), account.name, com.google.gerrit.server.group.db.SERVER_EMAIL); assertThat(logGroupNames()).isEmpty(); }
@org.junit.Test public void minimalGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), account.name, account.email); assertThat(logGroupNames()).isEmpty(); }
@org.junit.Test public void minimalGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), "New account"); }
@org.junit.Test public void minimalGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), account.name, com.google.gerrit.server.group.db.SERVER_NAME); assertThat(logGroupNames()).isEmpty(); }
@org.junit.Test public void minimalGroupFields() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(1); assertCommit(log.get(0), account, com.google.gerrit.server.group.db.SERVER_NAME, com.google.gerrit.server.group.db.SERVER_EMAIL); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }
@java @java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.api.project.FileResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.project.FileResource rsrc) { return fileContentUtil.getContent(rsrc.getProjectState(), rsrc.getRev(), rsrc.getPath(), null); }
@org.junit.Test public void byDescription() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(name("group1"), "This is a test account"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "TEST GROUP"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), "Another group of project foo."); assertQuery("description:test", group1, group2); assertQuery("description:non-existing"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("description operator requires a value"); assertQuery("description:\"\""); }
@org.junit.Test public void byDescription() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(name("group1"), "This is a test account"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "TEST GROUP"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), "Another group of project foo."); assertQuery("description:test", group1, group2); assertQuery("description:non-existing"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("The \"description\" operator requires a value"); assertQuery("description:\"\""); }
@org.junit.Test public void byDescription() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(name("group1"), "This is a test account"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "Another TEST GROUP"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), "Another group of project foo."); assertQuery("description:test", group1, group2); assertQuery("description:non-existing"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("description operator requires a value"); assertQuery("description:\"\""); }
@org.junit.Test public void byDescription() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(name("group1"), "This is a test account"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "Another TEST GROUP"); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), "Another group of project foo."); assertQuery("description:test", group1, group2); assertQuery("description:non-existing"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("The \"description\" operator requires a value"); assertQuery("description:\"\""); }
@org.junit.Test public void byDescription() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroupWithDescription(name("group1"), "This is a test account"); com.google.gerrit.extensions.common.GroupInfo group2 = createGroupWithDescription(name("group2"), "Another TEST GROUP."); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), "Another group of project foo."); assertQuery("description:test", group1, group2); assertQuery("description:non-existing"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("description operator requires a value"); assertQuery("description:\"\""); }
@org.junit.Test public void bySubgroups() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBGROUP); assertFailingQuery("subgroup:someGroupName", "operator is not supported by account index version"); return; } com.google.gerrit.extensions.common.GroupInfo superParentGroup = createGroup(name("superParentGroup")); com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup2 = createGroup(name("parentGroup2")); com.google.gerrit.extensions.common.GroupInfo subGroup = createGroup(name("subGroup")); gApi.groups().id(superParentGroup.id).addGroups(parentGroup1.id, parentGroup2.id); gApi.groups().id(parentGroup1.id).addGroups(subGroup.id); gApi.groups().id(parentGroup2.id).addGroups(subGroup.id); assertQuery("subgroup:" + (subGroup.id)), parentGroup1, parentGroup2); assertQuery("subgroup:" + (parentGroup1.id)), superParentGroup); gApi.groups().id(superParentGroup.id).addGroups(subGroup.id); gApi.groups().id(parentGroup1.id).removeGroups(subGroup.id); assertQuery("subgroup:" + (subGroup.id)), superParentGroup, parentGroup2); }
@org.junit.Test public void bySubgroups() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBGROUP); assertFailingQuery("subgroup:someGroupName", "operator is not supported by account index version"); return; } com.google.gerrit.extensions.common.GroupInfo superParentGroup = createGroup(name("superParentGroup")); com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup2 = createGroup(name("parentGroup2")); com.google.gerrit.extensions.common.GroupInfo subGroup = createGroup(name("subGroup")); gApi.groups().id(superParentGroup.id).addGroups(parentGroup1.id, parentGroup2.id); gApi.groups().id(parentGroup1.id).addGroups(subGroup.id); gApi.groups().id(parentGroup2.id).addGroups(subGroup.id); assertQuery(("subgroup:" + (subGroup.id)), parentGroup1, parentGroup2); assertQuery(("subgroup:" + (parentGroup1.id)), superParentGroup); gApi.groups().id(superParentGroup.id).addGroups(subGroup.id); gApi.groups().id(parentGroup1.id).removeGroups(subGroup.id); assertQuery(("subgroup:" + (subGroup.id)), superParentGroup, parentGroup2); }
@org.junit.Test public void bySubgroups() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBGROUP); assertFailingQuery("subgroup:someGroupName", "operator is not supported by account index version"); } com.google.gerrit.extensions.common.GroupInfo superParentGroup = createGroup(name("superParentGroup")); com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup2 = createGroup(name("parentGroup2")); com.google.gerrit.extensions.common.GroupInfo subGroup = createGroup(name("subGroup")); gApi.groups().id(superParentGroup.id).addGroups(parentGroup1.id, parentGroup2.id); gApi.groups().id(parentGroup1.id).addGroups(subGroup.id); gApi.groups().id(parentGroup2.id).addGroups(subGroup.id); assertQuery("subgroup:" + (subGroup.id)), parentGroup1, parentGroup2); assertQuery("subgroup:" + (parentGroup1.id)), superParentGroup); gApi.groups().id(superParentGroup.id).addGroups(subGroup.id); gApi.groups().id(parentGroup1.id).removeGroups(subGroup.id); assertQuery("subgroup:" + (subGroup.id)), superParentGroup, parentGroup2); }
@org.junit.Test public void bySubGroups() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBGROUP); assertFailingQuery("subgroup:someGroupName", "operator is not supported by account index version"); return; } com.google.gerrit.extensions.common.GroupInfo superParentGroup = createGroup(name("superParentGroup")); com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup2 = createGroup(name("parentGroup2")); com.google.gerrit.extensions.common.GroupInfo subGroup = createGroup(name("subGroup")); gApi.groups().id(superParentGroup.id).addGroups(parentGroup1.id, parentGroup2.id); gApi.groups().id(parentGroup1.id).addGroups(subGroup.id); gApi.groups().id(parentGroup2.id).addGroups(subGroup.id); assertQuery("subgroup:" + (subGroup.id)), parentGroup1, parentGroup2); assertQuery("subgroup:" + (parentGroup1.id)), superParentGroup); gApi.groups().id(superParentGroup.id).addGroups(subGroup.id); gApi.groups().id(parentGroup1.id).removeGroups(subGroup.id); assertQuery("subgroup:" + (subGroup.id)), superParentGroup, parentGroup2); }
@org.junit.Test public void bySubgroups() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.SUBGROUP); assertFailingQuery("subgroup:someGroupName", "operator is not supported by account index version"); return; } com.google.gerrit.extensions.common.GroupInfo superParentGroup = createGroup(name("superParentGroup")); com.google.gerrit.extensions.common.GroupInfo parentGroup1 = createGroup(name("parentGroup1")); com.google.gerrit.extensions.common.GroupInfo parentGroup2 = createGroup(name("parentGroup2")); com.google.gerrit.extensions.common.GroupInfo subGroup = createGroup(name("subGroup")); gApi.groups().id(superParentGroup.id).addGroups(parentGroup1.id, parentGroup2.id); gApi.groups().id(parentGroup1.id).addGroups(subGroup.id); gApi.groups().id(parentGroup2.id).addGroups(subGroup.id); assertQuery("subgroup:" + (subGroup.id)), parentGroup1, parentGroup2); assertQuery(("subgroup:" + (parentGroup1.id)), superParentGroup); gApi.groups().id(superParentGroup.id).addGroups(subGroup.id); gApi.groups().id(parentGroup1.id).removeGroups(subGroup.id); assertQuery("subgroup:" + (subGroup.id)), superParentGroup, parentGroup2); }
@org.junit.Test public void byMember() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.MEMBER); assertFailingQuery("member:someName", "operator is not supported by account index version"); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user1@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("user2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("group1"), user1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user2); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group3"), user1); assertQuery(("member:" + (user1.name)), group1, group3); assertQuery(("member:" + (user1.email)), group1, group3); gApi.groups().id(group3.id).removeMembers(user1.username); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery(("member:" + (user1.name)), group1, group2); }
@org.junit.Test public void byMember() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.MEMBER); assertFailingQuery("member:someName", "operator is not supported by account index version"); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user1@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("user2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("group1"), user1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user2); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group3"), user1); assertQuery("member:" + (user1.name)), group1, group3); assertQuery("member:" + (user1.email)), group1, group3); gApi.groups().id(group3.id).removeMembers(user1.username); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery("member:" + (user1.name)), group1, group2); }
@org.junit.Test public void byMember() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.MEMBER); assertFailingQuery("member:someName", "operator is not supported by account index version"); } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user1@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("user2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("group1"), user1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user2); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group3"), user1); assertQuery(("member:" + (user1.name)), group1, group3); assertQuery(("member:" + (user1.email)), group1, group3); gApi.groups().id(group3.id).removeMembers(user1.username); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery(("member:" + (user1.name)), group1, group2); }
@org.junit.Test public void byMember() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.MEMBER); assertFailingQuery("member:someName", "operator is not supported by account index version"); } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user1@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("user2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("group1"), user1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user2); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group3"), user1); assertQuery("member:" + (user1.name)), group1, group3); assertQuery("member:" + (user1.email)), group1, group3); gApi.groups().id(group3.id).removeMembers(user1.username); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery("member:" + (user1.name)), group1, group2); }
@org.junit.Test public void byMember() throwsjava.lang.Exception { if ((getSchemaVersion()) < 4) { assertMissingField(GroupField.MEMBER); assertFailingQuery("member:someName", "operator is not supported by account index version"); return; } com.google.gerrit.extensions.common.AccountInfo user1 = createAccount("user1", "User1", "user1@example.com"); com.google.gerrit.extensions.common.AccountInfo user2 = createAccount("user2", "User2", "user2@example.com"); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("group1"), user1); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2"), user2); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup(name("group3"), user1); assertQuery("member:" + (user1.name)), group1, group3); assertQuery(("member:" + (user1.email)), group1, group3); gApi.groups().id(group3.id).removeMembers(user1.username); gApi.groups().id(group2.id).addMembers(user1.username); assertQuery("member:" + (user1.name)), group1, group2); }
@org.junit.Test public void byInname() throwsjava.lang.Exception {java.lang.String namePart = getSanitizedMethodName(); namePart = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup((("account-" + namePart)); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup((("account-" + namePart) + "3")); assertQuery(("inname:" + namePart), group1, group2, group3); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.US))), group1, group2, group3); assertQuery(("inname:" + (namePart.toLowerCase(java.util.Locale.US))), group1, group2, group3); }
@org.junit.Test public void byInname() throwsjava.lang.Exception {java.lang.String namePart = getSanitizedMethodName(); namePart = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup((("account-" + namePart))); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup((("account-" + namePart) + "3")); assertQuery(("inname:" + namePart), group1, group2, group3); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.US))), group1, group2, group3); assertQuery(("inname:" + (namePart.toLowerCase(java.util.Locale.US))), group1, group2, group3); }
@org.junit.Test public void byInname() throwsjava.lang.Exception {java.lang.String namePart = getSanitizedMethodName(); namePart = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup((("account-" + namePart)); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup((("account-" + namePart) + "3")); assertQuery(("inname:" + namePart), group1, group2, group3); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.US))), group1, group2, group3); assertQuery(("inname:" + (namePart.toLowerCase(java.util.Locale.US))), group1, group2, group3); }
@org.junit.Test public void byInname() throwsjava.lang.Exception {java.lang.String namePart = getSanitizedMethodName(); namePart = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup((("account-" + namePart)); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup((("account-" + namePart) + "3")); assertQuery("inname:" + namePart), group1, group2, group3); assertQuery("inname:" + (namePart.toUpperCase(java.util.Locale.US))), group1, group2, group3); assertQuery("inname:" + (namePart.toLowerCase(java.util.Locale.US))), group1, group2, group3); }
@org.junit.Test public void byInname() throwsjava.lang.Exception {java.lang.String namePart = getSanitizedMethodName(); namePart = com.google.common.base.CharMatcher.is('_').removeFrom(namePart); com.google.gerrit.extensions.common.GroupInfo group1 = createGroup((("account-" + namePart)); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup((("account-" + namePart) + "-2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroup((("account-" + namePart) + "3")); assertQuery("inname:" + namePart), group1, group2, group3); assertQuery(("inname:" + (namePart.toUpperCase(java.util.Locale.US))), group1, group2, group3); assertQuery(("inname:" + (namePart.toLowerCase(java.util.Locale.US))), group1, group2, group3); }
@org.junit.Test public void byIsVisibleToAll() throwsjava.lang.Exception { assertQuery("is:visibletoall"); com.google.gerrit.extensions.common.GroupInfo groupThatIsVisibleToAll = createGroupThatIsVisibleToAll(name(("account-that-is-visible-to-all")); createGroup(name("group")); assertQuery("is:visibletoall", groupThatIsVisibleToAll); }
@org.junit.Test public void byIsVisibleToAll() throwsjava.lang.Exception { assertQuery("is:visibletoall"); com.google.gerrit.extensions.common.GroupInfo groupThatIsVisibleToAll = createGroupThatIsVisibleToAll(name("account-that-is-visible-to-all")); createGroup(name("group")); assertQuery("is:visibletoall", groupThatIsVisibleToAll); }
@org.junit.Test public void byIsVisibleToAll() throwsjava.lang.Exception { assertQuery("is:visibletoall"); com.google.gerrit.extensions.common.GroupInfo groupThatIsVisibleToAll = createGroupThatIsVisibleToAll(name(("account-that-is-visible-to-all"))); createGroup(name("group")); assertQuery("is:visibletoall", groupThatIsVisibleToAll); }
@org.junit.Test public void byIsVisibleToAll() throwsjava.lang.Exception { assertQuery("is:visibletoall"); com.google.gerrit.extensions.common.GroupInfo groupThatIsVisibleToAll = createGroupThatIsVisibleToAll(name(("account-that-is-visible-to-all" )); createGroup(name("group")); assertQuery("is:visibletoall", groupThatIsVisibleToAll); }
@org.junit.Test public void byIsVisibleToAll() throwsjava.lang.Exception { assertQuery("is:visibletoall"); com.google.gerrit.extensions.common.GroupInfo groupThatIsVisibleToAll = createGroupThatIsVisibleToAll(name(("account-that-is-visible-to-all"))); createGroup(name("group")); assertQuery("is:visibletoall", groupThatIsVisibleToAll); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("not allowed to delete account branch."); branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()))).delete(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("not allowed to delete group branch."); branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()))).delete(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Not allowed to delete account branch."); branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()))).delete(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("not allowed to delete account branch."); branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()))).delete(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void deleteGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(("not allowed to delete account branch."); branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()))).delete(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Ref \"" + (rsrc.getRef())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Ref " + (rsrc.getRef())) + " already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getRef())) + " already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch \"" + (rsrc.getRef())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Branch " + (rsrc.getRef())) + " already exists")); }
com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.restapi.change.CommentResource c);
com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.api.change.CommentResource c);
com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.restapi.change.CommentResource c);
com.google.gerrit.server.api.changes.CommentApiImpl create(com.google.gerrit.server.api.changes.change.CommentResource c);

@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move Change to a different branch and(permissionBackend.user(rsrc.getUser()).ref(change.getDest()).testCond(com.google.gerrit.server.restapi.change.CREATE_CHANGE), rsrc.permissions().database(dbProvider).testCond(com.google.gerrit.server.restapi.change.ABANDON)))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Create Change").setTitle("Move change to a different branch"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move Change").setTitle("Move change to a different branch"); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move Change to a different branch and(permissionBackend.user(rsrc.getUser()).ref(change.getDest()).testCond(com.google.gerrit.server.restapi.change.CREATE_CHANGE), rsrc.permissions().database(dbProvider).testCond(com.google.gerrit.server.restapi.change.ABANDON))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Move Change to a different branch").setTitle("Move change to a different branch"); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().getDescription()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().getDescription()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.api.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().getDescription()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().description()); }
@java @java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getProjectState().getProject().description()); }
private com.google.gerrit.server.restapi.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; }
private com.google.gerrit.server.api.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; }
private com.google.gerrit.server.restapi.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (project == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; }
private com.google.gerrit.server.restapi.project.ProjectResource checkExists() { if ((project) == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(name); } return project; }
private com.google.gerrit.server.restapi.project.ProjectResource checkExists() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return project; }
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.api.projects.ProjectResource project);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.project.ProjectResource project);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project);
com.google.gerrit.server.api.projects.ProjectApiImpl create(com.google.gerrit.server.api.project.ProjectResource project);
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Update update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Group update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Merge update not allowed"); }
@java.lang.Override public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.server.IdentifiedUser caller) throws com.google.gerrit.server.git.validators.MergeValidationException { if ((!(allUsersName.equals(destProject.getNameKey()))) || (!(com.google.gerrit.reviewdb.client.RefNames.isGroupRef(destBranch.get())))) { return; } throw new com.google.gerrit.server.git.validators.MergeValidationException("Ref update not allowed"); }
public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) {java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode((("GroupName: " + groupName) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode((("Creator: " + (creator.toExternalString())) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }
public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) {java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode((("Group \"" + groupName) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode((("Creator \"" + (creator.toExternalString())) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }
public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) {java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode((("GroupName \"" + groupName) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode((("Creator \"" + (creator.toExternalString())) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }
public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) {java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode((("Group " + groupName) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode((("Creator " + (creator.toExternalString())) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }
public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) {java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode((("Group " + groupName) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode((("Creator \"" + (creator.toExternalString())) + "\n"))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }
@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("Create account for schema migration"); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI());java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("Create account for schema migration setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI());java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("account for schema migration"); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI());java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup("account for schema migration setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI());java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(("Create account for schema migration setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI());java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.restapi.project.BranchResource rsrc = new com.google.gerrit.server.restapi.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.api.project.BranchResource rsrc = new com.google.gerrit.server.api.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.api.project.BranchResource rsrc = new com.google.gerrit.server.restapi.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE)))? true : null; com.google.gerrit.server.restapi.project.BranchResource rsrc = new com.google.gerrit.server.restapi.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = ((links.isEmpty())? null : links); return info; }
com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.exactRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.exactRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
com.google.gerrit.extensions.api.projects.BranchesInfo toBranchInfo(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.exactRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
com.google.gerrit.extensions.api.projects.BranchInfo toInfo(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.exactRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
com.google.gerrit.extensions.api.projects.BranchInfo toBranchInfo(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.Ref r = db.exactRef(rsrc.getRef()); if (r == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, com.google.common.collect.ImmutableList.of(r)).get(0); } }
java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.restapi. project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) {java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = newjava.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
privatejava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.restapi. project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) {java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = newjava.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.restapi. project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) {java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = newjava.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
privatejava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.restapi. project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) {java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = newjava.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
java privatejava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.restapi. project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) {java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = newjava.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.api.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.restapi.project.ProjectResource rsrc,java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey());java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = newjava.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) {java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.ref = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(RefPermission.DELETE))? true : null; } continue; } if (perm.ref(ref.getName()).test(RefPermission.READ)) { branches.add(createBranchInfo(perm.ref(ref.getName()), ref, rsrc.getProjectState(), rsrc.getUser(), targets)); } }java.util.Collections.sort(branches, new com.google.gerrit.server.restapi.BranchListComparator()); return branches; }
java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.restapi.project.ProjectResource rsrc,java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey());java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = newjava.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) {java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.ref = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(RefPermission.DELETE))? true : null; } continue; } if (perm.ref(ref.getName()).test(RefPermission.READ)) { branches.add(createBranchInfo(perm.ref(ref.getName()), ref, rsrc.getProjectState(), rsrc.getUser(), targets)); } }java.util.Collections.sort(branches, new com.google.gerrit.server.restapi.BranchComparator()); return branches; }
java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.restapi.project.ProjectResource rsrc,java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey());java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = newjava.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) {java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.ref = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(RefPermission.DELETE))? true : null; } continue; } if (perm.ref(ref.getName()).test(RefPermission.READ)) { branches.add(createBranchInfo(perm.ref(ref.getName()), ref, rsrc.getProjectState(), rsrc.getUser(), targets)); } }java.util.Collections.sort(branches, new com.google.gerrit.server.permissions.BranchComparator()); return branches; }
java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.restapi.project.ProjectResource rsrc,java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Set<java.lang.String> targets = com.google.common.collect.Sets.newHashSetWithExpectedSize(1); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey());java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = newjava.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) {java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.ref = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(RefPermission.DELETE))? true : null; } continue; } if (perm.ref(ref.getName()).test(RefPermission.READ)) { branches.add(createBranchInfo(perm.ref(ref.getName()), ref, rsrc.getProjectState(), rsrc.getUser(), targets)); } } return branches; }
java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> toBranchInfo(com.google.gerrit.server.restapi.project.ProjectResource rsrc,java.util.List<org.eclipse.jgit.lib.Ref> refs) throws com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(rsrc.getNameKey());java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> branches = newjava.util.ArrayList(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { if (ref.isSymbolic()) {java.lang.String target = ref.getTarget().getName(); if (!(perm.ref(target).test(RefPermission.READ))) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.extensions.api.projects.BranchInfo b = new com.google.gerrit.extensions.api.projects.BranchInfo(); b.ref = ref.getName(); b.revision = target; branches.add(b); if (!(Constants.HEAD.equals(ref.getName()))) { b.canDelete = (perm.ref(ref.getName()).testOrFalse(RefPermission.DELETE))? true : null; } continue; } if (perm.ref(ref.getName()).test(RefPermission.READ)) { branches.add(createBranchInfo(perm.ref(ref.getName()), ref, rsrc.getProjectState(), rsrc.getUser(), targets)); } }java.util.Collections.sort(branches, new com.google.gerrit.server.restapi.BranchComparator()); return branches; }
@java.lang.Override public Response.Accepted apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor.Task mpt = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), project).beginSubTask(" MultiProgressMonitor.UNKNOWN"); com.google.gerrit.server.index.change.AllChangesIndexer allChangesIndexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allChangesIndexer.reindexProject(indexer, project, mpt, mpt)); return com.google.gerrit.extensions.restapi.Response.accepted((("Project " + project) + " submitted for reindexing")); }
java @java.lang.Override public Response.Accepted apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor.Task mpt = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), project).beginSubTask(" MultiProgressMonitor.UNKNOWN"); com.google.gerrit.server.index.change.AllChangesIndexer allChangesIndexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allChangesIndexer.reindexProject(indexer, project, mpt, mpt)); return com.google.gerrit.extensions.restapi.Response.accepted((("Project " + project) + " submitted for reindexing")); }
@java.lang.Override public Response.Accepted apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor.Task mpt = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), project").beginSubTask(" MultiProgressMonitor.UNKNOWN"); com.google.gerrit.server.index.change.AllChangesIndexer allChangesIndexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allChangesIndexer.reindexProject(indexer, project, mpt, mpt)); return com.google.gerrit.extensions.restapi.Response.accepted((("Project " + project) + " submitted for reindexing")); }
@java.lang.Override public Response.Accepted apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor.Task mpt = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), project).beginSubTask(" MultiProgressMonitor.UNKNOWN); com.google.gerrit.server.index.change.AllChangesIndexer allChangesIndexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allChangesIndexer.reindexProject(indexer, project, mpt, mpt)); return com.google.gerrit.extensions.restapi.Response.accepted((("Project " + project) + " submitted for reindexing")); }
@java.lang.Override public Response.Accepted apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource.getNameKey(); com.google.gerrit.server.git.MultiProgressMonitor.Task mpt = new com.google.gerrit.server.git.MultiProgressMonitor(com.google.common.io.ByteStreams.nullOutputStream(), project).beginSubTask(" MultiProgressMonitor.UNKNOWN"); com.google.gerrit.server.index.change.AllChangesIndexer allChangesIndexer = allChangesIndexerProvider.get(); allChangesIndexer.setVerboseOut(NullOutputStream.INSTANCE); @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<java.lang.Void> ignored = executor.submit(allChangesIndexer.reindexProject(indexer, project, mpt, mpt)); return com.google.gerrit.extensions.restapi.Response.accepted((("Project " + project) + "\" submitted for reindexing")); }
@org.kohsuke.args4j.Option(name = "--owned-by", usage = "--owned-by groups owned by the given account uuid") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }
@org.kohsuke.args4j.Option(name = "--owned-by", usage = "--owned-by groups by the given account uuid") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }
@org.kohsuke.args4j.Option(name = "--owned-by", usage = "groups owned by the given account uuid") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }
@org.kohsuke.args4j.Option(name = "--owned-by", usage = "--owned-by") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }
@org.kohsuke.args4j.Option(name = "--owned-by", usage = "--owned-by account uuid") public void setOwnedBy(java.lang.String ownedBy) { this.ownedBy = ownedBy; }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, usage = "add group to inspect") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToInspect.add(uuid); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, usage = "account to inspect") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToInspect.add(uuid); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, usage = "name to inspect") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToInspect.add(uuid); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, usage = "add a group to inspect") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToInspect.add(uuid); }
@org.kohsuke.args4j.Option(name = "--account", aliases = { "-g" }, usage = "Add a group to inspect") public void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { groupsToInspect.add(uuid); }
@org.kohsuke.args4j.Option(name = "-o", usage = "options per account") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "options per account"); void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = " options per account") void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "-o", usage = "options per account");
@org.kohsuke.args4j.Option(name = "-o", usage = "options per account") void addOption(com.google.gerrit.extensions.client.GroupOption o) { options.add(o); }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "match account regex") public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "account regex") public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "search account regex") public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "match account regex"); public void setMatchRegex(java.lang.String matchRegex) { this.matchRegex = matchRegex; }
@org.kohsuke.args4j.Option(name = "--regex", aliases = { "-r" }, metaVar = "REGEX", usage = "match account regex");
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server. restapi. project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.user(user).project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
private static com.google.gerrit.index.query.QueryParseException getExceptionForUnsupportedOperator(java.lang.String operatorName) { return new com.google.gerrit.index.query.QueryParseException(java.lang.String.format("unsupported operator is not supported by account index version %s", operatorName)); }
private static com.google.gerrit.index.query.QueryParseException getExceptionForUnsupportedOperator(java.lang.String operatorName) { return new com.google.gerrit.index.query.QueryParseException(java.lang.String.format("unsupported operator %s is not supported by account index version", operatorName)); }
private static com.google.gerrit.index.query.QueryParseException getExceptionForUnsupportedOperator(java.lang.String operatorName) { return new com.google.gerrit.index.query.QueryParseException(java.lang.String.format("unsupported operator %s", operatorName)); }
private static com.google.gerrit.index.query.QueryParseException getExceptionForUnsupportedOperator(java.lang.String operatorName) { return new com.google.gerrit.index.query.QueryParseException(java.lang.String.format("operator %s is not supported by account index version", operatorName)); }
private static com.google.gerrit.index.query.QueryParseException getExceptionForUnsupportedOperator(java.lang.String operatorName) { return new com.google.gerrit.index.query.QueryParseException(java.lang.String.format("unsupported operator '%s' is not supported by account index version", operatorName)); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("UserName must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("user must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server. restapi.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Username must be set"); } com.google.gerrit.server.account.externalids.ExternalId extId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, user.getUserName())); if (extId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId newExtId = com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword); externalIdsUpdate.create().upsert(newExtId); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, super.keyName, (-1)); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Id of the account %s must not be negative, found %d", groupUuid.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, super.keyName, (-1)); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("id of the account %s must not be negative, found %d", groupUuid.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, super.keyName, (-1)); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("group of the account %s must not be negative, found %d", groupUuid.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, super.keyName, (-1)); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("group of account %s must not be negative, found %d", groupUuid.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException { int id = config.getInt(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, super.keyName, (-1)); if (id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Id of the group %s must not be negative, found %d", groupUuid.get(), id)); } group.setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(id)); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.api.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); }
@java.lang.Override public ProjectInfo apply(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (rsrc.isDirectChild()) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return json.format(rsrc.getChild().getProject()); }
@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getName()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup(); return getDirectSubgroups(group, rsrc.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.api.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return getDirectSubgroups(group, rsrc.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return getDirectSubgroups(group, rsrc.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return getDirectGroups(group, rsrc.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.GroupInfo> apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { return getDirectSubgroups(group, rsrc.getControl()); }
privatejava.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.restapi.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.account.AccountState> result = queryProvider.get().setUserProvidedLimit(((suggestReviewers.getLimit()) * (com.google.gerrit.server.restapi.change.ReviewersUtil.CANDIDATE_LIST_MULTIPLIER))).query(com.google.gerrit.server.query.account.AccountPredicates.andActive(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))); return result.entities().stream().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.index.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } } }
privatejava.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.restapi. change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.account.AccountState> result = queryProvider.get().setUserProvidedLimit(((suggestReviewers.getLimit()) * (com.google.gerrit.server.restapi.change.ReviewersUtil.CANDIDATE_LIST_MULTIPLIER))).query(com.google.gerrit.server.query.account.AccountPredicates.andActive(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))); return result.entities().stream().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.index.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } } }
java privatejava.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.restapi.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.account.AccountState> result = queryProvider.get().setUserProvidedLimit(((suggestReviewers.getLimit()) * (com.google.gerrit.server.restapi.change.ReviewersUtil.CANDIDATE_LIST_MULTIPLIER))).query(com.google.gerrit.server.query.account.AccountPredicates.andActive(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))); return result.entities().stream().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.index.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } } }
privatejava.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.restapi.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.account.AccountState> result = queryProvider.get().setUserProvidedLimit(((suggestReviewers.getLimit()) * (com.google.gerrit.server.restapi.change. ReviewersUtil.CANDIDATE_LIST_MULTIPLIER))).query(com.google.gerrit.server.query.account.AccountPredicates.andActive(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))); return result.entities().stream().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.index.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } } }
publicjava.util.List<com.google.gerrit.reviewdb.client.Account.Id> suggestAccounts(com.google.gerrit.server.restapi.change.SuggestReviewers suggestReviewers) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.metrics.Timer0.Context ctx = metrics.queryAccountsLatency.start()) { try { com.google.gerrit.index.query.QueryResult<com.google.gerrit.server.account.AccountState> result = queryProvider.get().setUserProvidedLimit(((suggestReviewers.getLimit()) * (com.google.gerrit.server.restapi.change.ReviewersUtil.CANDIDATE_LIST_MULTIPLIER))).query(com.google.gerrit.server.query.account.AccountPredicates.andActive(accountQueryBuilder.defaultQuery(suggestReviewers.getQuery()))); return result.entities().stream().map(( a) -> a.getAccount().getId()).collect(java.util.stream.Collectors.toList()); } catch (com.google.gerrit.index.query.QueryParseException e) { return com.google.common.collect.ImmutableList.of(); } } }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.SubgroupResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.SubgroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi. group.SubgroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.api.group.SubgroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Group.SubgroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup(addSubgroups, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup(addSubgroups, id); }
@java.lang.Override public com.google.gerrit.server.api.group.AddSubgroups.PutSubgroup create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.api.group.AddSubgroups.PutSubgroup(addSubgroups, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup(group, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup create(com.google.gerrit.server.restapi.group.GroupResource group, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.group.AddSubgroups.PutSubgroup(groups, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.group.SubgroupResource parse(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Internal parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.restapi.group.SubgroupsCollection.isSubgroup(parent, member))) { return new com.google.gerrit.server.restapi.group.SubgroupResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.group.SubgroupResource parse(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Internal parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.restapi. group.SubgroupsCollection.isSubgroup(parent, member))) { return new com.google.gerrit.server.restapi.group.SubgroupResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi. group.SubgroupResource parse(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Internal parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.restapi.group.SubgroupsCollection.isSubgroup(parent, member))) { return new com.google.gerrit.server.restapi.group.SubgroupResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.group.SubgroupResource parse(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Internal parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if ((resource.getControl().canSeeGroup()) && (com.google.gerrit.server.restapi.group.SubgroupsCollection.isSubgroup(parent, member)) { return new com.google.gerrit.server.restapi.group.SubgroupResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.group.SubgroupResource parse(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.common.data.GroupDescription.Internal parent = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); com.google.gerrit.common.data.GroupDescription.Basic member = groupsCollection.parse(TopLevelResource.INSTANCE, id).getGroup(); if (com.google.gerrit.server.restapi.group.SubgroupsCollection.isSubgroup(parent, member)) { return new com.google.gerrit.server.restapi.group.SubgroupResource(resource, member); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() { return list; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi. group.GroupResource> list() { return list; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource>> list() { return list; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.api.group.GroupResource> list() { return list; }
@java.lang.Override public GroupResource list() { return list; }
com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.restapi.change.DraftCommentResource d);
com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.restapi.change.DraftResource d);
com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.api.changes.DraftCommentResource d);
com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.api.changes.DraftResource d);
com.google.gerrit.server.api.changes.DraftApiImpl create(com.google.gerrit.server.restapi. change.DraftCommentResource d);
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "match account substring") public void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "match account substring"); public void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "match account substring");
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "match account substring" ) public void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }
@org.kohsuke.args4j.Option(name = "--match", aliases = { "-m" }, metaVar = "MATCH", usage = "match account substring"") public void setMatchSubstring(java.lang.String matchSubstring) { this.matchSubstring = matchSubstring; }
java @java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not account owner"); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("fields are required"); } if ((input.visibleToAll) == null) { input.visibleToAll = false; } if ((internalGroup.isVisibleToAll())!= (input.visibleToAll)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setVisibleToAll(input.visibleToAll).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo(); if (input.visibleToAll) { options.visibleToAll = true; } return options; }
java @java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not account owner"); } if ((input.visibleToAll) == null) { input.visibleToAll = false; } if ((internalGroup.isVisibleToAll())!= (input.visibleToAll)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setVisibleToAll(input.visibleToAll).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo(); if (input.visibleToAll) { options.visibleToAll = true; } return options; }
java @java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not account owner"); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("only fields are required"); } if ((input.visibleToAll) == null) { input.visibleToAll = false; } if ((internalGroup.isVisibleToAll())!= (input.visibleToAll)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setVisibleToAll(input.visibleToAll).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo(); if (input.visibleToAll) { options.visibleToAll = true; } return options; }
java @java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("only account owner"); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("only fields are required"); } if ((input.visibleToAll) == null) { input.visibleToAll = false; } if ((internalGroup.isVisibleToAll())!= (input.visibleToAll)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setVisibleToAll(input.visibleToAll).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo(); if (input.visibleToAll) { options.visibleToAll = true; } return options; }
java @java.lang.Override public com.google.gerrit.extensions.common.GroupOptionsInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.common.GroupOptionsInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not account owner"); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("fields are required"); } if ((input.visibleToAll) == null) { input.visibleToAll = false; } if ((internalGroup.isVisibleToAll())!= (input.visibleToAll)) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setVisibleToAll(input.visibleToAll).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } com.google.gerrit.extensions.common.GroupOptionsInfo options = new com.google.gerrit.extensions.common.GroupOptionsInfo(); if (input.visibleToAll) { options.setVisibleToAll = true; } return options; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : ""; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : ""; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parent = project.getParent(allProjectsName); return parent!= null? parent.get() : ""; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.api.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : ""; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.project.ProjectResource resource) { com.google.gerrit.reviewdb.client.Project project = resource.getProjectState().getProject(); com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent(allProjectsName); return parentName!= null? parentName.get() : null; }
@java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.server.restapi.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applySync(project, input); }
@java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.server.restapi.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } else { return applySync(project, input); } }
@java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.server.restapi.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); return applyAsync(project, input); }
@java @java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.server.restapi.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } return applySync(project, input); }
@java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.server.restapi.project.GarbageCollect.Input input) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey(); if (input.async) { return applyAsync(project, input); } if (input.sync) { return applySync(project, input); } return null; }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Commit GC").setTitle("Triggers the Git Commit Collection for this project."); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Trigger Git GC").setTitle("Triggers the Git Garbage Collection for this project."); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Trigger GC").setTitle("Triggers the Git Garbage Collection for this project."); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Change GC").setTitle("Triggers the Git Garbage Collection for this project."); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.restapi.project.ProjectResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Commit GC").setTitle("Triggers the Git Garbage Collection for this project."); }
com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throwsjava.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) {java.lang.String g = createGroup("cla-test-account"); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("Create test account"); com.google.gerrit.server.group.InternalGroup caGroup = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.detail().id)); com.google.gerrit.common.data.GroupReference groupRef = new com.google.gerrit.common.data.GroupReference(caGroup.getGroupUUID(), caGroup.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.ALLOW); ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test"); ca.setAutoVerify(groupRef); ca.setAccepted(com.google.common.collect.ImmutableList.of(rule)); } else { ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test-no-auto-verify"); } ca.setDescription("description"); ca.setAgreementUrl("agreement-url"); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(allProjects).getConfig(); cfg.replace(ca); saveProjectConfig(allProjects, cfg); return ca; }
protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throwsjava.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) {java.lang.String g = createGroup("cla-test-account"); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("Create test account"); com.google.gerrit.server.group.InternalGroup caGroup = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.detail().id)); com.google.gerrit.common.data.GroupReference groupRef = new com.google.gerrit.common.data.GroupReference(caGroup.getGroupUUID(), caGroup.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.ALLOW); ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test"); ca.setAutoVerify(groupRef); ca.setAccepted(com.google.common.collect.ImmutableList.of(rule)); } else { ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test-no-auto-verify"); } ca.setDescription("description"); ca.setAgreementUrl("agreement-url"); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(allProjects).getConfig(); cfg.replace(ca); saveProjectConfig(allProjects, cfg); return ca; }
protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throwsjava.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) {java.lang.String g = createGroup( "cla-test-account"); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("Create test account"); com.google.gerrit.server.group.InternalGroup caGroup = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.detail().id)); com.google.gerrit.common.data.GroupReference groupRef = new com.google.gerrit.common.data.GroupReference(caGroup.getGroupUUID(), caGroup.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.ALLOW); ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test"); ca.setAutoVerify(groupRef); ca.setAccepted(com.google.common.collect.ImmutableList.of(rule)); } else { ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test-no-auto-verify"); } ca.setDescription("description"); ca.setAgreementUrl("agreement-url"); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(allProjects).getConfig(); cfg.replace(ca); saveProjectConfig(allProjects, cfg); return ca; }
com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throwsjava.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) {java.lang.String g = createGroup( "cla-test-account"); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("Create test account"); com.google.gerrit.server.group.InternalGroup caGroup = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.detail().id)); com.google.gerrit.common.data.GroupReference groupRef = new com.google.gerrit.common.data.GroupReference(caGroup.getGroupUUID(), caGroup.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.ALLOW); ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test"); ca.setAutoVerify(groupRef); ca.setAccepted(com.google.common.collect.ImmutableList.of(rule)); } else { ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test-no-auto-verify"); } ca.setDescription("description"); ca.setAgreementUrl("agreement-url"); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(allProjects).getConfig(); cfg.replace(ca); saveProjectConfig(allProjects, cfg); return ca; }
protected com.google.gerrit.common.data.ContributorAgreement configureContributorAgreement(boolean autoVerify) throwsjava.lang.Exception { com.google.gerrit.common.data.ContributorAgreement ca; if (autoVerify) {java.lang.String g = createGroup( "cla-test-account"); com.google.gerrit.extensions.api.groups.GroupApi groupApi = gApi.groups().id(g); groupApi.description("cla test account"); com.google.gerrit.server.group.InternalGroup caGroup = group(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupApi.detail().id)); com.google.gerrit.common.data.GroupReference groupRef = new com.google.gerrit.common.data.GroupReference(caGroup.getGroupUUID(), caGroup.getName()); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(groupRef); rule.setAction(PermissionRule.Action.ALLOW); ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test"); ca.setAutoVerify(groupRef); ca.setAccepted(com.google.common.collect.ImmutableList.of(rule)); } else { ca = new com.google.gerrit.common.data.ContributorAgreement("cla-test-no-auto-verify"); } ca.setDescription("description"); ca.setAgreementUrl("agreement-url"); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet(allProjects).getConfig(); cfg.replace(ca); saveProjectConfig(allProjects, cfg); return ca; }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.change.FileResource(rev, id.get()); }
@java.lang.Override public com.google.gerrit.server.api.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.change.FileResource(rev, id.get()); }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(rev, id.get()); }
@java.lang.Override public com.google.gerrit.server.api.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.api.change.FileResource(rev, id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.restapi.change.FileResource(rev, id); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.FileResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.FileResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Change.FileResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.api.change.FileResource>> views() { return views; }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were already banned"); printCommits(r.ignored, "The following ids do not represent commits and were ignored"); } catch (java.lang.Exception e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were already banned"); printCommits(r.ignored, "The following ids do not represent commits and were ignored"); } catch (java.lang.Exception e) { throw die(e); } }
java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were already banned"); printCommits(r.ignored, "The following ids do not represent commits and were ignored"); } catch (java.lang.Exception e) { throw die(e); } }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.restapi.project.BanCommit.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, "The following commits were newly banned"); printCommits(r.alreadyBanned, "The following commits were already banned"); printCommits(r.ignored, "The following ids do not represent commits and were ignored"); } catch (java.lang.Exception e) { throw die(e); } }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { com.google.gerrit.extensions.api.projects.BanCommitInput input = com.google.gerrit.extensions.api.projects.BanCommitInput.fromCommits(com.google.common.collect.Lists.transform(commitsToBan, ObjectId::getName)); input.reason = reason; com.google.gerrit.server.restapi.Project.BanResultInfo r = banCommit.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), input); printCommits(r.newlyBanned, "The following commits were banned"); printCommits(r.alreadyBanned, "The following commits were already banned"); printCommits(r.ignored, "The following ids do not represent commits and were ignored"); } catch (java.lang.Exception e) { throw die(e); } }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String ownerGroupUuid = config.getString(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, null, super.keyName); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUuid)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Group UUID of the account %s must be defined", groupUuid.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUuid)); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String ownerGroupUuid = config.getString(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, null, super.keyName); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUuid)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("group UUID of the account %s must be defined", groupUuid.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUuid)); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String ownerGroupUuid = config.getString(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, null, super.keyName); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUuid)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("UUID of the account %s must be defined", groupUuid.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUuid)); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String ownerGroupUuid = config.getString(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, null, super.keyName); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUuid)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("GroupName of the account %s must be defined", groupUuid.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUuid)); }
@java.lang.Override void readFromConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.InternalGroup.Builder group, org.eclipse.jgit.lib.Config config) throws org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String ownerGroupUuid = config.getString(com.google.gerrit.server.group.db.GroupConfigEntry.SECTION_NAME, null, super.keyName); if (com.google.common.base.Strings.isNullOrEmpty(ownerGroupUuid)) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("GroupName UUID of the account %s must be defined", groupUuid.get())); } group.setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(ownerGroupUuid)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branches must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branches must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branches must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.restapi. project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branches must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.restapi. project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource project, DeleteBranchesInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((input == null) || ((input.branches) == null)) || (input.branches.isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequestException("branches must be specified"); } deleteRefFactory.create(project).refs(input.branches).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.applyImpl(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("id must match URL"); } else if (((in.line)!= null) && ((in.range) < 0)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range must be >= 0"); } else if (((in.line)!= null) && ((in.range)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range endLine must be on the same line as the comment"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.PutDraftComment.Op op = new com.google.gerrit.server.restapi.change.PutDraftComment.Op(rsrc.getComment().key, in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(commentJson.getFillAccounts().newCommentFormatter().format(op)); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.applyImpl(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("id must match URL"); } else if (((in.line)!= null) && ((in.line) < 0)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("line must be >= 0"); } else if (((in.line)!= null) && ((in.range)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range endLine must be on the same line as the comment"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.PutDraftComment.Op op = new com.google.gerrit.server.restapi.change.PutDraftComment.Op(rsrc.getComment().key, in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(commentJson.getFillAccounts().newCommentFormatter().format(op)); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.applyImpl(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("id must match URL"); } else if (((in.line)!= null) && ((in.range) < 0)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range must be >= 0"); } else if (((in.line)!= null) && ((in.range)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range endLine must be on the same line as the comment"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.PutDraftComment.Op op = new com.google.gerrit.server.restapi.change.PutDraftComment.Op(rsrc.getComment().key, in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(commentJson.getFillAccounts().newFormatter().format(op)); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.applyImpl(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("id must match URL"); } else if (((in.line)!= null) && ((in.range) < 0)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range must be >= 0"); } else if (((in.line)!= null) && ((in.range)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range endLine must be on the same line as the comment"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.PutDraftComment.Op op = new com.google.gerrit.server.restapi.change.PutDraftComment.Op(rsrc.getComment().key, in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(commentJson.getFillAccounts().newFormatter().format(commentJson.getFillAccounts().get())); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException { if (((in == null) || ((in.message) == null)) || (in.message.trim().isEmpty())) { return delete.applyImpl(updateFactory, rsrc, null); } else if (((in.id)!= null) && (!(rsrc.getId().equals(in.id)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("id must match URL"); } else if (((in.line)!= null) && ((in.range) < 0)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range must be >= 0"); } else if (((in.line)!= null) && ((in.range)!= null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("range endLine must be on the same line as the comment"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.PutDraftComment.Op op = new com.google.gerrit.server.restapi.change.PutDraftComment.Op(rsrc.getComment().key, in); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(commentJson.getFillAccounts().newFormatter().format(commentJson.getFillAccounts().newComment())); } }
java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, groupUuid); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); if (!(groupConfig.getLoadedGroup().isPresent())) { if (groupsMigration.readFromNoteDb()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } returnjava.util.Optional.empty(); } com.google.gerrit.server.group.InternalGroup originalGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = null; if (groupUpdate.getName().isPresent()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = originalGroup.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getName().get(); groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename(allUsersRepo, groupUuid, oldName, newName); } commit(allUsersRepo, groupConfig, groupNameNotes); com.google.gerrit.server.group.db.GroupsUpdate updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("The account wasn't automatically loaded")); return updatedGroup; } }
java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, groupUuid); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); if (!(groupConfig.getLoadedGroup().isPresent())) { if (groupsMigration.readFromNoteDb()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } returnjava.util.Optional.empty(); } com.google.gerrit.server.group.InternalGroup originalGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = null; if (groupUpdate.getName().isPresent()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = originalGroup.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getName().get(); groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename(allUsersRepo, groupUuid, oldName, newName); } commit(allUsersRepo, groupConfig, groupNameNotes); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("The account wasn't automatically loaded")); returnjava.util.Optional.of(updatedGroup); } }
java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, groupUuid); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); if (!(groupConfig.getLoadedGroup().isPresent())) { if (groupsMigration.readFromNoteDb()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } returnjava.util.Optional.empty(); } com.google.gerrit.server.group.InternalGroup originalGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = null; if (groupUpdate.getName().isPresent()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = originalGroup.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getName().get(); groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename(allUsersRepo, groupUuid, oldName, newName); } commit(allUsersRepo, groupConfig, groupNameNotes); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("The account wasn't automatically loaded")); return updatedGroup; } }
java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, groupUuid); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); if (!(groupConfig.getLoadedGroup().isPresent())) { if (groupsMigration.readFromNoteDb()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } returnjava.util.Optional.empty(); } com.google.gerrit.server.group.InternalGroup originalGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = null; if (groupUpdate.getName().isPresent()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = originalGroup.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getName().get(); groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename(allUsersRepo, groupUuid, oldName, newName); } commit(allUsersRepo, groupConfig, groupNameNotes); com.google.gerrit.server.group.db.GroupsUpdate updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("The account wasn't automatically loaded")); returnjava.util.Optional.of(updatedGroup); } }
java.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDb(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, groupUuid); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); if (!(groupConfig.getLoadedGroup().isPresent())) { if (groupsMigration.readFromNoteDb()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } returnjava.util.Optional.empty(); } com.google.gerrit.server.group.InternalGroup originalGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = null; if (groupUpdate.getName().isPresent()) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName = originalGroup.getNameKey(); com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName = groupUpdate.getName().get(); groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename(allUsersRepo, groupUuid, oldName, newName); } commit(allUsersRepo, groupConfig, groupNameNotes); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updatedGroup = groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("group account wasn't automatically loaded")); returnjava.util.Optional.of(updatedGroup); } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add groups to account event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Unable to log add groups to account event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log add groups to account event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add groups to account", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { auditListener.onAddGroupsToGroup(actor, added, addedOn); } }
private void addMembers(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.lang.Object::toString).collect(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }
private void addMembers(com.google.gerrit.server.api.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.lang.Object::toString).collect(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }
private void addMembers(com.google.gerrit.server.api.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.api.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.lang.Object::toString).collect(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }
private void addMembers(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers.stream().map(java.lang.Object::toString).collect(java.util.stream.Collectors.toList())); addMembers.apply(rsrc, input); }
private void addMembers(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input input = AddMembers.Input.fromMembers(initialMembers); addMembers.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.api.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
private void addSubgroups(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.api.group.AddSubgroups.Input input = AddSubgroups.Input.fromGroups(initialGroups.stream().map(com.google.gerrit.reviewdb.client.AccountGroup.UUID::get).collect(java.util.stream.Collectors.toList())); addSubgroups.apply(rsrc, input); }
@org.kohsuke.args4j.Option(name = "--group", aliases = "-g", metaVar = "GROUP", usage = "set of groups to be included in the account"); void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { initialGroups.add(id); }
@org.kohsuke.args4j.Option(name = "--group", aliases = "-g", metaVar = "GROUP", usage = "set of groups to be included in the account"); void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { groups.add(id); }
@org.kohsuke.args4j.Option(name = "--group", aliases = "-g", metaVar = "GROUP", usage = "set of groups to be included in the account") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { initialGroups.add(id); }
@org.kohsuke.args4j.Option(name = "--account", aliases = "-g", metaVar = "GROUP", usage = "set of groups to be included in the account"); void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { initialGroups.add(id); }
@org.kohsuke.args4j.Option(name = "--group", aliases = "-g", metaVar = "GROUP", usage = "set of groups to be included in the account") void addGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { groups.add(id); }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throwsjava.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw newjava.io.IOException(java.lang.String.format("Failed to replace account %s in index %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throwsjava.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw newjava.io.IOException(java.lang.String.format("%s failed to replace account %s in index %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throwsjava.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw newjava.io.IOException(java.lang.String.format("failed to replace account %s in index %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throwsjava.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw newjava.io.IOException(java.lang.String.format("Failed to replace group %s in index %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }
@java.lang.Override public void replace(com.google.gerrit.server.group.InternalGroup group) throwsjava.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder().defaultIndex(indexName).defaultType(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS).addAction(insert(com.google.gerrit.elasticsearch.ElasticGroupIndex.GROUPS, group)).refresh(true).build(); io.searchbox.client.JestResult result = client.execute(bulk); if (!(result.isSucceeded())) { throw newjava.io.IOException(java.lang.String.format(("Failed to replace account %s in index %s: %s", group.getGroupUUID().get(), indexName, result.getErrorMessage())); } }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = groupUuidList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).flatMap(Streams::stream).collect(java.util.stream.Collectors.joining(", ")); out.write(java.lang.String.format("Group %s account %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = groupUuidList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).flatMap(Streams::stream).collect(java.util.stream.Collectors.joining(", ")); out.write(java.lang.String.format("group %s account %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = groupUuidList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).flatMap(Streams::stream).collect(java.util.stream.Collectors.joining( out.write(java.lang.String.format("Group %s account %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = groupUuidList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).flatMap(Streams::stream).collect(java.util.stream.Collectors.joining(", ").getBytes(com.google.gerrit.sshd.commands.ENC)); out.write(java.lang.String.format("Group %s account %s: %s", action, group.getName(), names)); }
private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = groupUuidList.stream().map(( uuid) -> groupCache.get(uuid).map(com.google.gerrit.server.group.InternalGroup::getName)).flatMap(Streams::stream).collect(java.util.stream.Collectors.joining(", ").getBytes(com.google.gerrit.sshd.commands.ENC)); out.write(java.lang.String.format("Group %s account %s: %s\n", action, group.getName(), names)); }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure,java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.restapi.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembers.apply(resource, fromMembers(accountsToRemove)); reportMembersAction(from resource, accountsToRemove); } if (!(groupsToRemove.isEmpty())) { deleteSubgroups.apply(resource, fromGroups(groupsToRemove)); reportGroupsAction(from resource, groupsToRemove); } if (!(accountsToAdd.isEmpty())) { addMembers.apply(resource, fromMembers(accountsToAdd)); reportMembersAction(to resource, accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroups.apply(resource, fromGroups(groupsToInclude)); reportGroupsAction(to resource, groupsToInclude); } } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure,java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.restapi.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembers.apply(resource, fromMembers(accountsToRemove)); reportMembersAction(" from resource, accountsToRemove); } if (!(groupsToRemove.isEmpty())) { deleteSubgroups.apply(resource, fromGroups(groupsToRemove)); reportGroupsAction(" from resource, groupsToRemove); } if (!(accountsToAdd.isEmpty())) { addMembers.apply(resource, fromMembers(accountsToAdd)); reportMembersAction(" to resource, accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroups.apply(resource, fromGroups(groupsToInclude)); reportGroupsAction(" to resource, groupsToInclude); } } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure,java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.restapi.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembers.apply(resource, fromMembers(accountsToRemove)); reportMembersAction(" from resource", accountsToRemove); } if (!(groupsToRemove.isEmpty())) { deleteSubgroups.apply(resource, fromGroups(groupsToRemove)); reportGroupsAction(" from resource, groupsToRemove); } if (!(accountsToAdd.isEmpty())) { addMembers.apply(resource, fromMembers(accountsToAdd)); reportMembersAction(" to resource", accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroups.apply(resource, fromGroups(groupsToInclude)); reportGroupsAction(" to resource", groupsToInclude); } } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure,java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.restapi.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembers.apply(resource, fromMembers(accountsToRemove)); reportMembersAction("from resource", accountsToRemove); } if (!(groupsToRemove.isEmpty())) { deleteSubgroups.apply(resource, fromGroups(groupsToRemove)); reportGroupsAction("from resource, groupsToRemove); } if (!(accountsToAdd.isEmpty())) { addMembers.apply(resource, fromMembers(accountsToAdd)); reportMembersAction("to resource", accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroups.apply(resource, fromGroups(groupsToInclude)); reportGroupsAction("to resource, groupsToInclude); } } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure,java.lang.Exception { try { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid : groups) { com.google.gerrit.server.restapi.group.GroupResource resource = groupsCollection.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(groupUuid.get())); if (!(accountsToRemove.isEmpty())) { deleteMembers.apply(resource, fromMembers(accountsToRemove)); reportMembersAction(" from resource", accountsToRemove); } if (!(groupsToRemove.isEmpty())) { deleteSubgroups.apply(resource, fromGroups(groupsToRemove)); reportGroupsAction(" from resource, groupsToRemove); } if (!(accountsToAdd.isEmpty())) { addMembers.apply(resource, fromMembers(accountsToAdd)); reportMembersAction(" to resource", accountsToAdd); } if (!(groupsToInclude.isEmpty())) { addSubgroups.apply(resource, fromGroups(groupsToInclude)); reportGroupsAction(" to resource", groupsToInclude); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ")); out.write(java.lang.String.format("Group %s account %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ")); out.write(java.lang.String.format("%s account %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ").getBytes(com.google.gerrit.sshd.commands.ENC)); out.write(java.lang.String.format("Group %s account %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ").getBytes(com.google.gerrit.sshd.commands.ENC)); out.write(java.lang.String.format("%s account %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.restapi.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.get(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ").getBytes(com.google.gerrit.sshd.commands.ENC)); out.write(java.lang.String.format("Group %s account %s: %s", group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project \"" + (resource.getName())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project " + (resource.getName())) + " already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project \"" + (resource.getName())) + "\" already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Project '" + (resource.getName())) + "' already exists")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.api.projects.ProjectInput input) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("resource \"" + (resource.getName())) + "\" already exists")); }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.requireChangeId = requireChangeID; configInput.submitType = submitType; configInput.useContentMerge = contentMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useSignedOffBy = signedOffBy; configInput.state = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.requireChangeId = requireChangeID; configInput.submitType = submitType; configInput.useContentMerge = contentMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useSignedOffBy = signedOffBy; configInput.state = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.requireChangeId = requireChangeID; configInput.submitType = submitType; configInput.useContentMerge = contentMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useSignedOffBy = signedOffBy; configInput.state = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.requireChangeId = requireChangeID; configInput.submitType = submitType; configInput.useContentMerge = contentMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useSignedOffBy = signedOffBy; configInput.state = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.api.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
javajava @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { com.google.gerrit.extensions.api.projects.ConfigInput configInput = new com.google.gerrit.extensions.api.projects.ConfigInput(); configInput.requireChangeId = requireChangeID; configInput.submitType = submitType; configInput.useContentMerge = contentMerge; configInput.useContributorAgreements = contributorAgreements; configInput.useSignedOffBy = signedOffBy; configInput.state = state.getProject().getState(); configInput.maxObjectSizeLimit = maxObjectSizeLimit; if ((com.google.common.base.Strings.emptyToNull(projectDescription))!= null) { configInput.description = projectDescription; } else { configInput.description = projectState.getProject().getDescription(); } try { putConfig.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), configInput); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw die(e); } }
com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.api.group.GroupResource rsrc);
com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.restapi.group.GroupResource rsrc);
com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.restapi.group.GroupResource rsrc);
com.google.gerrit.server.api.groups.GroupApiImplImpl create(com.google.gerrit.server.api.group.GroupResource rsrc);
com.google.gerrit.server.api.groups.GroupApiImpl create(com.google.gerrit.server.api.groups.GroupResource rsrc);
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get account owner", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot get account owner", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get account owner", e); } }
@java.lang.Override public GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get account owner", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo owner() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getOwner.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot get group owner", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account options", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot put account options", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put group options", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) { try { putOptions.apply(rsrc, options); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account options", e); } }
@java.lang.Override public void options(com.google.gerrit.extensions.common.GroupOptionsInfo options) throws com.google.gerrit.extensions.restapi.RestApiException { putOptions.apply(rsrc, options); }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index account", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot index account", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Failed to index account", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot index account", e); } }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot list account members", e); } }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); try { return listMembers.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot list members", e); } }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); return listMembers.apply(rsrc); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { return listMembers.apply(rsrc); }
@java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> members(boolean recursive) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive(recursive); return listMembers.apply(rsrc); }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot remove account members", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot remove account members", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { removeMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot remove account members", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot remove account members", e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot remove members", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInput in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account name", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInput in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot put account name", e); } }
public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInput in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account name", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInput in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; try { putName.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account", e); } }
@java.lang.Override public void name(java.lang.String name) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.NameInput in = new com.google.gerrit.extensions.common.NameInput(); in.name = name; putName.apply(rsrc, in); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve group info", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo detail() throws com.google.gerrit.extensions.restapi.RestApiException { return getDetail.apply(rsrc); }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot add account members", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot add account members", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot add account members", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot add members", e); } }
@java.lang.Override public void addMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { addMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInput in = new com.google.gerrit.extensions.common.DescriptionInput(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account description", e); } }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInput in = new com.google.gerrit.extensions.common.DescriptionInput(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot put account description", e); } }
public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInput in = new com.google.gerrit.extensions.common.DescriptionInput(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account description", e); } }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInput in = new com.google.gerrit.extensions.common.DescriptionInput(); in.description = description; putDescription.apply(rsrc, in); }
@java.lang.Override public void description(java.lang.String description) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.DescriptionInput in = new com.google.gerrit.extensions.common.DescriptionInput(); in.description = description; try { putDescription.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account", e); } }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USERNAME", usage = "set of users to become members of the account"); void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USERNAME", usage = "set of users to become members of the account") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USERNAME", usage = " Sets of users to become members of the account"); void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USERNAME", usage = "set of users to become members of the account"); void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { members.add(id); }
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USERNAME", usage = " Sets of users to become members of the account"); void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { members.add(id); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubgroups(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
java @java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubgroups(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.api.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialGroups.isEmpty())) { addSubgroups(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = createGroup(); if (!(initialMembers.isEmpty())) { addMembers(rsrc); } if (!(initialSubgroups.isEmpty())) { addSubgroups(rsrc); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.restapi.group.GroupResource rsrc = createGroup(); addMembers(rsrc); addSubgroups(rsrc); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e); } }
private com.google.gerrit.server.restapi. group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.groups.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.description = groupDescription; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId =java.lang.String.valueOf(ownerGroupId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }
private com.google.gerrit.server.api.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.groups.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.description = groupDescription; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId =java.lang.String.valueOf(ownerGroupId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }
private com.google.gerrit.server.restapi.group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.groups.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.description = groupDescription; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId =java.lang.String.valueOf(ownerGroupId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }
private com.google.gerrit.server.restapi. group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.groups.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.description = groupDescription; input.visibleToAll = visibleToAll; if ((ownerId)!= null) { input.ownerId =java.lang.String.valueOf(ownerId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }
private group.GroupResource createGroup() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.groups.GroupInput input = new com.google.gerrit.extensions.api.groups.GroupInput(); input.description = groupDescription; input.visibleToAll = visibleToAll; if ((ownerGroupId)!= null) { input.ownerId =java.lang.String.valueOf(ownerGroupId.get()); } com.google.gerrit.extensions.common.GroupInfo group = createGroupFactory.create(groupName).apply(TopLevelResource.INSTANCE, input); return groups.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromUrl(group.id)); }
@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group must specify name"); } try { com.google.gerrit.server.restapi.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.fromAnnotation(impl.getClass())); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot create account " + (in.name)), e); } }
@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group must specify name"); } try { com.google.gerrit.server.restapi. group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.fromAnnotation(impl.getClass())); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot create account " + (in.name)), e); } }
@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("must specify name"); } try { com.google.gerrit.server.restapi. group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.fromAnnotation(impl.getClass())); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot create account " + (in.name)), e); } }
@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group must specify name"); } try { com.google.gerrit.server.restapi.group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.fromAnnotation(impl.getClass())); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("cannot create account " + (in.name)), e); } }
@java.lang.Override public com.google.gerrit.extensions.api.groups.GroupApi create(com.google.gerrit.extensions.api.groups.GroupInput in) throws com.google.gerrit.extensions.restapi.RestApiException { if ((checkNotNull(in, "GroupInput").name) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group must specify name"); } try { com.google.gerrit.server.restapi. group.CreateGroup impl = createGroup.create(in.name); permissionBackend.user(user).checkAny(com.google.gerrit.server.permissions.GlobalPermission.fromAnnotation(impl.getClass())); com.google.gerrit.extensions.common.GroupInfo info = impl.apply(TopLevelResource.INSTANCE, in); return id(info.id); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("cannot create account " + (in.name)), e); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit);java.util.Set<com.google.gerrit.common.data.GroupReference> groupReferences = newjava.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("UUID of account %s (%s) is duplicate in account name notes", groupReference.getName(), groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit);java.util.Set<com.google.gerrit.common.data.GroupReference> groupReferences = newjava.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("Group UUID of account %s (%s) is duplicate in account name notes", groupReference.getName(), groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit);java.util.Set<com.google.gerrit.common.data.GroupReference> groupReferences = newjava.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning("group UUID of account %s (%s) is duplicate in account name notes", groupReference.getName(), groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit);java.util.Set<com.google.gerrit.common.data.GroupReference> groupReferences = newjava.util.LinkedHashSet<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getGroupReference(reader, note.getData()); boolean result = groupReferences.add(groupReference); if (!result) { com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.logConsistencyProblemAsWarning(("UUID of account %s (%s) is duplicate in account name notes", groupReference.getName(), groupReference.getUUID()); } } return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }
public static com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference> loadAllGroupReferences(org.eclipse.jgit.lib.Repository repository) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = repository.exactRef(RefNames.REFS_GROUPNAMES); if (ref == null) { return com.google.common.collect.ImmutableSet.of(); } try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository);org.eclipse.jgit.lib.ObjectReader reader = revWalk.getObjectReader()) { org.eclipse.jgit.revwalk.RevCommit notesCommit = revWalk.parseCommit(ref.getObjectId()); org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(reader, notesCommit); return com.google.common.collect.ImmutableSet.copyOf(groupReferences); } }
java privatejava.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { returnjava.lang.String.format("Change from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } if (newGroupName.isPresent()) { returnjava.lang.String.format("Change from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } if (oldGroupName.isPresent()) { returnjava.lang.String.format("Change from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } return "No-op"; }
privatejava.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { returnjava.lang.String.format("Change from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } if (newGroupName.isPresent()) { returnjava.lang.String.format("Change from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } if (oldGroupName.isPresent()) { returnjava.lang.String.format("Change from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } return "No-op"; }
java privatejava.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { returnjava.lang.String.format("Change account from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } if (newGroupName.isPresent()) { returnjava.lang.String.format("Change account '%s'", newGroupName.get()); } if (oldGroupName.isPresent()) { returnjava.lang.String.format("Change account '%s'", oldGroupName.get()); } return "No-op"; }
java privatejava.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { returnjava.lang.String.format("Change from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } if (newGroupName.isPresent()) { returnjava.lang.String.format("Change to '%s'", newGroupName.get()); } if (oldGroupName.isPresent()) { returnjava.lang.String.format("Change to '%s'", oldGroupName.get()); } return "No-op"; }
privatejava.lang.String getCommitMessage() { if ((oldGroupName.isPresent()) && (newGroupName.isPresent())) { returnjava.lang.String.format("Change from '%s' to '%s'", oldGroupName.get(), newGroupName.get()); } if (newGroupName.isPresent()) { returnjava.lang.String.format("Change to '%s'", newGroupName.get()); } if (oldGroupName.isPresent()) { returnjava.lang.String.format("Change to '%s'", oldGroupName.get()); } return "No-op"; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); }java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreement ca = projectCache.getAllProjects().getConfig().getContributorAgreement(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid agreement not found"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("cannot enter a non-autoVerify agreement"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.getAutoVerify().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("invalid account uuid not found"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers.addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("invalid account uuid not found"); } agreementSignup.fire(account, agreementName); return com.google.gerrit.extensions.restapi.Response.ok(agreementName); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); }java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreement ca = projectCache.getAllProjects().getConfig().getContributorAgreement(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid agreement not found"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("cannot enter a non-autoVerify agreement"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.getAutoVerify().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("invalid account uuid"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers.addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("invalid account uuid"); } agreementSignup.fire(account, agreementName); return com.google.gerrit.extensions.restapi.Response.ok(agreementName); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); }java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreement ca = projectCache.getAllProjects().getConfig().getContributorAgreement(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("required agreement not found"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("cannot enter a non-autoVerify agreement"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.getAutoVerify().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("account uuid not found"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers.addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("group account not found"); } agreementSignup.fire(account, agreementName); return com.google.gerrit.extensions.restapi.Response.ok(agreementName); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); }java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreement ca = projectCache.getAllProjects().getConfig().getContributorAgreement(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid agreement not found"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("cannot enter a non-autoVerify agreement"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.getAutoVerify().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("invalid account uuid not found"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers.addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("invalid account not found"); } agreementSignup.fire(account, agreementName); return com.google.gerrit.extensions.restapi.Response.ok(agreementName); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource resource, com.google.gerrit.extensions.common.AgreementInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(agreementsEnabled)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("agreements disabled"); } if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to enter contributor agreement"); }java.lang.String agreementName = com.google.common.base.Strings.nullToEmpty(input.name); com.google.gerrit.common.data.ContributorAgreement ca = projectCache.getAllProjects().getConfig().getContributorAgreement(agreementName); if (ca == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid agreement not found"); } if ((ca.getAutoVerify()) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("cannot enter a non-autoVerify agreement"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = ca.getAutoVerify().getUUID(); if (uuid == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("invalid account uuid not found"); } com.google.gerrit.reviewdb.client.Account account = self.get().getAccount(); try { addMembers.addMembers(uuid, com.google.common.collect.ImmutableSet.of(account.getId())); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("invalid account uuid not found"); } agreementSignup.fire(account, agreementName); return com.google.gerrit.extensions.restapi.Response.ok(agreementName); }
@org.junit.Test public void sharedGroupID() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g2.groupId); cfg.setString("group", null, "ownerGroupUuid", gAdmin.id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); }
@org.junit.Test public void sharedGroupID() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g2.groupId); cfg.setString("group", null, "ownerGroupUuid", gAdmin.id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError("Cannot create account id"); }
@org.junit.Test public void sharedGroupID() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g2.groupId); cfg.setString("group", null, "ownerGroupUuid", gAdmin.id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError("Cannot change group id"); }
@org.junit.Test public void sharedGroupID() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g2.groupId); cfg.setString("group", null, "ownerGroupUuid", gAdmin.id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(("Cannot change group for account id: " + g1.id)); }
@org.junit.Test public void sharedGroupID() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g2.groupId); cfg.setString("group", null, "ownerGroupUuid", gAdmin.id); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(("Cannot change group for account id: " + gAdmin.id)); }
@org.junit.Test public void missingGroupNameRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPNAMES); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("GroupName does not exist"); }
@org.junit.Test public void missingGroupNameRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPNAMES); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("Group does not exist"); }
@org.junit.Test public void missingGroupNameRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPNAMES); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("group does not exist"); }
@org.junit.Test public void missingGroupNameRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPNAMES); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("GroupName ref does not exist"); }
@org.junit.Test public void missingGroupNameRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(RefNames.REFS_GROUPNAMES); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("Group name does not exist"); }
@org.junit.Test public void nameWithoutGroupRef() throwsjava.lang.Exception {java.lang.String bogusName = "bad name"; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); config.setString("group", null, "name", bogusName); updateGroupFile(RefNames.REFS_GROUPNAMES, com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(bogusName)).getName(), config.toText()); assertError("group missing as account ref"); }
@org.junit.Test public void nameWithoutGroupRef() throwsjava.lang.Exception {java.lang.String bogusName = "bad name"; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); config.setString("group", null, "name", bogusName); updateGroupFile(RefNames.REFS_GROUPNAMES, com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(bogusName)).getName(), config.toText()); assertError("group name missing as account ref"); }
@org.junit.Test public void nameWithoutGroupRef() throwsjava.lang.Exception {java.lang.String bogusName = "bogus name"; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); config.setString("group", null, "name", bogusName); updateGroupFile(RefNames.REFS_GROUPNAMES, com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(bogusName)).getName(), config.toText()); assertError("group missing as account ref"); }
@org.junit.Test public void nameWithoutGroupRef() throwsjava.lang.Exception {java.lang.String bogusName = "bogus name"; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); config.setString("group", null, "name", bogusName); updateGroupFile(RefNames.REFS_GROUPNAMES, com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(bogusName)).getName(), config.toText()); assertError("group is missing as account ref"); }
@org.junit.Test public void nameWithoutGroupRef() throwsjava.lang.Exception {java.lang.String bogusName = "bogus name"; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("group", null, "uuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); config.setString("group", null, "name", bogusName); updateGroupFile(RefNames.REFS_GROUPNAMES, com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(bogusName)).getName(), config.toText()); assertError("group name missing as account ref"); }
@org.junit.Test public void missingNameEntry() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError((("Group \"" + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "\" has no entry in name map")); }
@org.junit.Test public void missingNameEntry() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError((("Group " + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + " has no entry in name map")); }
@org.junit.Test public void missingNameEntry() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError((("Ref \"" + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "\" has no entry in name map")); }
@org.junit.Test public void missingNameEntry() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError((("Ref " + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + " has no entry in name map")); }
@org.junit.Test public void missingNameEntry() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError((("Group \" " + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + "\" has no entry in name map")); }
@org.junit.Test public void unknownOwnerGroup() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); }
@org.junit.Test public void unknownOwnerGroup() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); }
@org.junit.Test public void unknownOwnerGroup() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID, "cannot find owner group"); }
@org.junit.Test public void unknownOwnerGroup() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID, "unsupported owner group"); }
@org.junit.Test public void unknownOwnerGroup() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("group", null, "name", g1.name); cfg.setInt("group", null, "id", g1.groupId); cfg.setString("group", null, "ownerGroupUuid", com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID); updateGroupFile(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), GroupConfig.GROUP_CONFIG_FILE, cfg.toText()); assertError(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID, "unsupported owner group UUID"); }
@org.junit.Test public void missingGroupRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("cannot delete account ref"); }
@org.junit.Test public void missingGroupRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("cannot delete group as account ref"); }
@org.junit.Test public void missingGroupRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("Cannot delete group as account ref"); }
@org.junit.Test public void missingGroupRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("Cannot delete account ref"); }
@org.junit.Test public void missingGroupRef() throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id))); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result result = ru.delete(); assertThat(result).isEqualTo(Result.FORCED); } assertError("missing group ref as account ref"); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve group", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve group account", e); } }
@java.lang.Override public GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve account", e); } }
@java.lang.Override public GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve group", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.api.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return defaultSetter.get().apply(resource, input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.DashboardResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (resource.isProjectDefault()) { return defaultSetter.get().apply(resource, input); } throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); };
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { returnjava.util.Optional.empty(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot look up account %s by name", name.get()), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { returnjava.util.Optional.empty(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot look up group %s by name", name.get()), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { returnjava.util.Optional.empty(); } try { return byName.get(name.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot look up account %s", name.get()), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { if (name == null) { returnjava.util.Optional.empty(); } return byName.get(name.get()); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { return byName.get(name.get()); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(("Cannot load account group " + groupId), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(("Cannot load account " + groupId), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(("Cannot load group " + groupId), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn((("Cannot load account " + groupId), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { try { return byId.get(groupId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn((("Cannot load account group " + groupId), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { if (groupUuid == null) { returnjava.util.Optional.empty(); } try { return byUUID.get(groupUuid.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot look up account %s by uuid", groupUuid.get()), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { if (groupUuid == null) { returnjava.util.Optional.empty(); } try { return byUUID.get(groupUuid.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("Cannot look up group %s by uuid", groupUuid.get()), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { if (groupUuid == null) { returnjava.util.Optional.empty(); } try { return byUUID.get(groupUuid.get()); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.GroupCacheImpl.log.warn(java.lang.String.format("cannot look up account %s by uuid", groupUuid.get()), e); returnjava.util.Optional.empty(); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { return byUUID.get(groupUuid.get()); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> get(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { if (groupUuid == null) { returnjava.util.Optional.empty(); } return byUUID.get(groupUuid.get()); }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("error",java.lang.String.format("Failed to index %s: %s", projectState.getName(), e.getMessage())); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.restapi.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("error",java.lang.String.format("failed to index %s: %s", projectState.getName(), e.getMessage())); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.api.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("error",java.lang.String.format("Failed to index %s: %s", projectState.getName(), e.getMessage())); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("error",java.lang.String.format("Failed to index %s: %s", projectState.getName(), e.getMessage())); } }
private void index(com.google.gerrit.server.project.ProjectState projectState) { try { index.apply(new com.google.gerrit.server.api.project.ProjectResource(projectState, user), null); } catch (java.lang.Exception e) { writeError("error",java.lang.String.format("failed to index %s: %s", projectState.getName(), e.getMessage())); } }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.restapi.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getName()), ref, rw, resource.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.restapi. project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.restapi.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getName()), ref, rw, resource.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server. restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.restapi.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getName()), ref, rw, resource.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server. restapi. project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.restapi.project.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getName()), ref, rw, resource.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public com.google.gerrit.extensions.api.projects.TagInfo get(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.lang.String tagName = id.get(); if (!(tagName.startsWith(Constants.R_TAGS))) { tagName = (org.eclipse.jgit.lib.Constants.R_TAGS) + tagName; } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(tagName); if ((ref!= null) && (!(visibleTags(resource.getProjectState(), repo, com.google.common.collect.ImmutableMap.of(ref.getName(), ref)).isEmpty()))) { return com.google.gerrit.server.restapi.projects.ListTags.createTagInfo(permissionBackend.user(resource.getUser()).project(resource.getNameKey()).ref(ref.getName()), ref, rw, resource.getNameKey(), links); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException {java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = newjava.util.ArrayList<>(); com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.restapi.project.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } }java.util.Collections.sort(tags, newjava.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(regex).match(tags); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException {java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = newjava.util.ArrayList<>(); com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.restapi.project.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } }java.util.Collections.sort(tags, newjava.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(regex).match(tags).filter(filterRegex); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException {java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = newjava.util.ArrayList<>(); com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.restapi.project.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } }java.util.Collections.sort(tags, newjava.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(regex).match(tags).filter(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException {java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = newjava.util.ArrayList<>(); com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.restapi.project.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } }java.util.Collections.sort(tags, newjava.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(regex).match(tags).filter(regex); }
java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.TagInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException {java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> tags = newjava.util.ArrayList<>(); com.google.gerrit.server.permissions.PermissionBackend.ForProject perm = permissionBackend.user(user).project(resource.getNameKey()); try (org.eclipse.jgit.lib.Repository repo = getRepository(resource.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = visibleTags(resource.getProjectState(), repo, repo.getRefDatabase().getRefs(Constants.R_TAGS)); for (org.eclipse.jgit.lib.Ref ref : all.values()) { tags.add(com.google.gerrit.server.restapi.project.ListTags.createTagInfo(perm.ref(ref.getName()), ref, rw, resource.getNameKey(), links)); } }java.util.Collections.sort(tags, newjava.util.Comparator<com.google.gerrit.extensions.api.projects.TagInfo>() { @java.lang.Override public int compare(com.google.gerrit.extensions.api.projects.TagInfo a, com.google.gerrit.extensions.api.projects.TagInfo b) { return a.ref.compareTo(b.ref); } }); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.TagInfo>(org.eclipse.jgit.lib.Constants.R_TAGS).start(start).limit(limit).subString(regex).match(tags).filter(filterRegex); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.restapi.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load();java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags =java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.restapi.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load();java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags =java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.restapi.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load();java.util.Set<java.lang.String> hashtags = notes.hashtags(); if (hashtags == null) { hashtags =java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.restapi.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load();java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags =java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.restapi.change.ChangeResource req) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.notedb.ChangeNotes notes = req.getNotes().load();java.util.Set<java.lang.String> hashtags = notes.getHashtags(); if (hashtags == null) { hashtags =java.util.Collections.emptySet(); } return com.google.gerrit.extensions.restapi.Response.ok(htags); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("foo"))), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), com.google.gerrit.extensions.restapi.ResourceConflictException.class, "not allowed to create account branch."); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("foo"))), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), com.google.gerrit.extensions.restapi.ResourceConflictException.class, "not allowed to create account branch.")); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("foo"))), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), com.google.gerrit.extensions.restapi.ResourceConflictException.class, "not allowed to create account branch"); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("foo"))), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), com.google.gerrit.extensions.restapi.ResourceConflictException.class, "not allowed to create group branch."); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "noteDb.groups.write", value = "true") public void createGroupBranch_Conflict() throwsjava.lang.Exception { allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); allow(allUsers, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, com.google.gerrit.acceptance.rest.project.REGISTERED_USERS); assertCreateFails(new com.google.gerrit.reviewdb.client.Branch.NameKey(allUsers, com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("foo"))), com.google.gerrit.reviewdb.client.RefNames.refsGroups(adminGroupUuid()), com.google.gerrit.extensions.restapi.ResourceConflictException.class, "not allowed to create account branch."); }
java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.restapi.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.restapi.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("error looking up project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { list.setOwnedBy(req.getOwnedBy()); } if ((req.getUser())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("error looking up user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setLimit(req.getLimit()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatchRegex(req.getRegex()); list.setSuggest(req.getSuggest()); try { return list.apply(tlr); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("error looking up groups " +
java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.restapi.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.restapi.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Error looking up project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { list.setOwnedBy(req.getOwnedBy()); } if ((req.getUser())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Error looking up user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setLimit(req.getLimit()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatchRegex(req.getRegex()); list.setSuggest(req.getSuggest()); try { return list.apply(tlr); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Error looking up groups " +
java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.restapi.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.restapi.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Error looking up project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { list.setOwnedBy(req.getOwnedBy()); } if ((req.getUser())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Error looking up user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setLimit(req.getLimit()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatchRegex(req.getRegex()); list.setSuggest(req.getSuggest()); try { return list.apply(tlr); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Error applying groups " + (
java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.restapi.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.restapi.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot looking up project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { list.setOwnedBy(req.getOwnedBy()); } if ((req.getUser())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot looking up user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setLimit(req.getLimit()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatchRegex(req.getRegex()); list.setSuggest(req.getSuggest()); try { return list.apply(tlr); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot list groups " + (
java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> list(com.google.gerrit.server.api.groups.ListRequest req) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.restapi.TopLevelResource tlr = com.google.gerrit.extensions.restapi.TopLevelResource.INSTANCE; com.google.gerrit.server.restapi.group.ListGroups list = listGroups.get(); list.setOptions(req.getOptions()); for (java.lang.String project : req.getProjects()) { try { com.google.gerrit.server.restapi.project.ProjectResource rsrc = projects.parse(tlr, com.google.gerrit.extensions.restapi.IdString.fromDecoded(project)); list.addProject(rsrc.getProjectState()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("error looking up project " + project), e); } } for (java.lang.String group : req.getGroups()) { list.addGroup(groups.parse(group).getGroupUUID()); } list.setVisibleToAll(req.getVisibleToAll()); if ((req.getOwnedBy())!= null) { list.setOwnedBy(req.getOwnedBy()); } if ((req.getUser())!= null) { try { list.setUser(accounts.parse(req.getUser()).getAccountId()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("error looking up user " + (req.getUser())), e); } } list.setOwned(req.getOwned()); list.setLimit(req.getLimit()); list.setStart(req.getStart()); list.setMatchSubstring(req.getSubstring()); list.setMatchRegex(req.getRegex()); list.setSuggest(req.getSuggest()); try { return list.apply(tlr); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("error applying groups " + (
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true);java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true);java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
@com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true);java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true);java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true);java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true);java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); com.google.gerrit.extensions.restapi.Response.ok(infos); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) {java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); }java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) {java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = newjava.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error((("No user or account matches " + who) + "\".")); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) {java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); }java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) {java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = newjava.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error(("No user or account matches " + who)); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) {java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { p.add(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); }java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) {java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = newjava.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error((("No user or account matches " + who) + "\".")); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) {java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); }java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) {java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = newjava.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error((("no user or account matches " + who) + "\".")); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) {java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); }java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) {java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = newjava.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error((("No user or account matches " + who) + '\".")); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi. group.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.api.group.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.GroupResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource>> views() { return views(); }
@java.lang.Override public com.google.gerrit.server.restapi.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.restapi.group.GroupResource(ctl); }
@java.lang.Override public com.google.gerrit.server.restapi. group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.restapi.group.GroupResource(ctl); }
@java.lang.Override public com.google.gerrit.server.restapi.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.restapi.group.GroupResource(ctl); }
@java.lang.Override public com.google.gerrit.server.restapi.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("anonymous user required"); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parseId(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.restapi.group.GroupResource(ctl); }
@java.lang.Override public com.google.gerrit.server.restapi.group.GroupResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.common.data.GroupDescription.Basic group = parse(id.get()); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id.get()); } com.google.gerrit.server.account.GroupControl ctl = groupControlFactory.controlFor(group); if (!(ctl.isVisible())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.restapi.group.GroupResource(ctl); }
public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "visit called after getGroups()");java.util.Set<org.eclipse.jgit.revwalk.RevCommit> interestingParents = getInterestingParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups.putAll(c, groups.get(interestingParents.iterator().next())); return; }java.util.Set<java.lang.String> thisCommitGroups = newjava.util.TreeSet<>();java.util.Set<java.lang.String> parentGroupsNewInThisPush = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : interestingParents) {java.util.Collection<java.lang.String> parentGroups = groups.get(p); if (parentGroups.isEmpty()) { throw newjava.lang.IllegalStateException(java.lang.String.format("No account assigned to parent %s of commit %s", p.name(), c.name())); } for (java.lang.String parentGroup : parentGroups) { if (isGroupFromExistingPatchSet(p, parentGroup)) { thisCommitGroups.add(parentGroup); } else { parentGroupsNewInThisPush.add(parentGroup); } } }java.lang.Iterable<java.lang.String> toAlias; if (thisCommitGroups.isEmpty()) {java.lang.String firstParentGroup = parentGroupsNewInThisPush.iterator().next(); thisCommitGroups = com.google.common.collect.ImmutableSet.of(firstParentGroup); toAlias = com.google.common.collect.Iterables.skip(parentGroupsNewInThisPush, 1); } else { toAlias = parentGroupsNewInThisPush; } groups.putAll(c, thisCommitGroups); for (java.lang.String pg : toAlias) { groupAliases.putAll(pg, thisCommitGroups); } }
void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "visit called after getGroups()");java.util.Set<org.eclipse.jgit.revwalk.RevCommit> interestingParents = getInterestingParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups.putAll(c, groups.get(interestingParents.iterator().next())); return; }java.util.Set<java.lang.String> thisCommitGroups = newjava.util.TreeSet<>();java.util.Set<java.lang.String> parentGroupsNewInThisPush = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : interestingParents) {java.util.Collection<java.lang.String> parentGroups = groups.get(p); if (parentGroups.isEmpty()) { throw newjava.lang.IllegalStateException(java.lang.String.format("No account assigned to parent %s of commit %s", p.name(), c.name())); } for (java.lang.String parentGroup : parentGroups) { if (isGroupFromExistingPatchSet(p, parentGroup)) { thisCommitGroups.add(parentGroup); } else { parentGroupsNewInThisPush.add(parentGroup); } } }java.lang.Iterable<java.lang.String> toAlias; if (thisCommitGroups.isEmpty()) {java.lang.String firstParentGroup = parentGroupsNewInThisPush.iterator().next(); thisCommitGroups = com.google.common.collect.ImmutableSet.of(firstParentGroup); toAlias = com.google.common.collect.Iterables.skip(parentGroupsNewInThisPush, 1); } else { toAlias = parentGroupsNewInThisPush; } groups.putAll(c, thisCommitGroups); for (java.lang.String pg : toAlias) { groupAliases.putAll(pg, thisCommitGroups); } }
public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "visit called after getGroups()");java.util.Set<org.eclipse.jgit.revwalk.RevCommit> interestingParents = getInterestingParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups.putAll(c, groups.get(interestingParents.iterator().next())); return; }java.util.Set<java.lang.String> thisCommitGroups = newjava.util.TreeSet<>();java.util.Set<java.lang.String> parentGroupsNewInThisPush = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : interestingParents) {java.util.Collection<java.lang.String> parentGroups = groups.get(p); if (parentGroups.isEmpty()) { throw newjava.lang.IllegalStateException(java.lang.String.format("no account assigned to parent %s of commit %s", p.name(), c.name())); } for (java.lang.String parentGroup : parentGroups) { if (isGroupFromExistingPatchSet(p, parentGroup)) { thisCommitGroups.add(parentGroup); } else { parentGroupsNewInThisPush.add(parentGroup); } } }java.lang.Iterable<java.lang.String> toAlias; if (thisCommitGroups.isEmpty()) {java.lang.String firstParentGroup = parentGroupsNewInThisPush.iterator().next(); thisCommitGroups = com.google.common.collect.ImmutableSet.of(firstParentGroup); toAlias = com.google.common.collect.Iterables.skip(parentGroupsNewInThisPush, 1); } else { toAlias = parentGroupsNewInThisPush; } groups.putAll(c, thisCommitGroups); for (java.lang.String pg : toAlias) { groupAliases.putAll(pg, thisCommitGroups); } }
void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "visit called after getGroups()");java.util.Set<org.eclipse.jgit.revwalk.RevCommit> interestingParents = getInterestingParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups.putAll(c, groups.get(interestingParents.iterator().next())); return; }java.util.Set<java.lang.String> thisCommitGroups = newjava.util.TreeSet<>();java.util.Set<java.lang.String> parentGroupsNewInThisPush = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : interestingParents) {java.util.Collection<java.lang.String> parentGroups = groups.get(p); if (parentGroups.isEmpty()) { throw newjava.lang.IllegalStateException(java.lang.String.format("no account assigned to parent %s of commit %s", p.name(), c.name())); } for (java.lang.String parentGroup : parentGroups) { if (isGroupFromExistingPatchSet(p, parentGroup)) { thisCommitGroups.add(parentGroup); } else { parentGroupsNewInThisPush.add(parentGroup); } } }java.lang.Iterable<java.lang.String> toAlias; if (thisCommitGroups.isEmpty()) {java.lang.String firstParentGroup = parentGroupsNewInThisPush.iterator().next(); thisCommitGroups = com.google.common.collect.ImmutableSet.of(firstParentGroup); toAlias = com.google.common.collect.Iterables.skip(parentGroupsNewInThisPush, 1); } else { toAlias = parentGroupsNewInThisPush; } groups.putAll(c, thisCommitGroups); for (java.lang.String pg : toAlias) { groupAliases.putAll(pg, thisCommitGroups); } }
public void visit(org.eclipse.jgit.revwalk.RevCommit c) { checkState((!(done)), "visit called after getGroups()");java.util.Set<org.eclipse.jgit.revwalk.RevCommit> interestingParents = getInterestingParents(c); if ((interestingParents.size()) == 0) { groups.put(c, c.name()); return; } else if ((interestingParents.size()) == 1) { groups.putAll(c, groups.get(interestingParents.iterator().next())); return; }java.util.Set<java.lang.String> thisCommitGroups = newjava.util.TreeSet<>();java.util.Set<java.lang.String> parentGroupsNewInThisPush = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(interestingParents.size()); for (org.eclipse.jgit.revwalk.RevCommit p : interestingParents) {java.util.Collection<java.lang.String> parentGroups = groups.get(p); if (parentGroups.isEmpty()) { throw newjava.lang.IllegalStateException(java.lang.String.format("No account assigned to parent %s of commit %s", p.name(), c.name())); } for (java.lang.String parentGroup : parentGroups) { if (isGroupFromExistingPatchSet(p, parentGroup)) { thisCommitGroups.add(parentGroup); } else { parentGroupsNewInThisPush.add(parentGroup); } } }java.lang.Iterable<java.lang.String> toAlias; if (thisCommitGroups.isEmpty()) {java.lang.String firstParentGroup = parentGroupsNewInThisPush.iterator().next(); thisCommitGroups = com.google.common.collect.ImmutableSet.of(firstParentGroup); toAlias = com.google.common.collect.Iterables.skip(parentGroupsNewInThisPush, 1); } else { toAlias = parentGroupsNewInThisPush; } groups.putAll(c, thisCommitGroups); for (java.lang.String pg : toAlias) { groupAliases.putAll(pg, thisCommitGroups); } } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit,java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn("Group for commit {} is not a SHA-1: {}", forCommit.name(), group); return null; } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit,java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn("group for commit {} is not a SHA-1: {}", forCommit.name(), group); return null; } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit,java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn("Group {} for commit {} is not a SHA-1: {}", forCommit.name(), group); return null; } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit,java.lang.String group) { try { return org.eclipse.jgit.lib.ObjectId.fromString(group); } catch (java.lang.IllegalArgumentException e) { com.google.gerrit.server.git.GroupCollector.log.warn("group {} for commit {} is not a SHA-1: {}", group); return null; } }
private org.eclipse.jgit.lib.ObjectId parseGroup(org.eclipse.jgit.lib.ObjectId forCommit,java.lang.String group) { return org.eclipse.jgit.lib.ObjectId.fromString(group); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.api.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc); }
@java @java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc); }
@java.lang.Override public GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return json.format(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource rsrc) { return json.format(rsrc); }
@org.junit.Test public void createGroupAsUserIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit); }
@org.junit.Test public void createGroupAsUserIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpMemberAudit(uuid, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit); }
@org.junit.Test public void createGroupAsUserIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpMemberAudit(group.getId(), userId, userId,java.lang.System.currentTimeMillis()); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit); }
@org.junit.Test public void createGroupAsUserIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid).containsExactly(expAudit)); }
@org.junit.Test public void createGroupAsUserIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid))containsExactly(expAudit); }
private com.google.gerrit.server.group.InternalGroup updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throwsjava.lang.Exception { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, uuid); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Update account failed")); }
private com.google.gerrit.server.group.InternalGroup updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throwsjava.lang.Exception { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, uuid); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Group account failed")); }
private com.google.gerrit.server.group.InternalGroup updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throwsjava.lang.Exception { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, uuid); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("group account failed")); }
private com.google.gerrit.server.group.InternalGroup updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throwsjava.lang.Exception { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, uuid); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("group update failed")); }
private com.google.gerrit.server.group.InternalGroup updateGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throwsjava.lang.Exception { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(allUsersRepo, uuid); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); groupConfig.commit(createMetaDataUpdate(userIdent)); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("update account failed")); }
@org.junit.Test public void addMultiSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.server.group.InternalGroup subgroup2 = createGroupAsUser(3, "test-account-3"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid1 = subgroup1.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid2 = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid1, subgroupUuid2)); assertTipCommit(uuid, (((("test-account\n") + "\n") + (java.lang.String.format("Group <%s> subgroupUuid1))) + "\n") + (java.lang.String.format("Group <%s> subgroupUuid2)))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit1 = createExpGroupAudit(group.getId(), subgroupUuid1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit2 = createExpGroupAudit(group.getId(), subgroupUuid2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }
@org.junit.Test public void addMultiSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.server.group.InternalGroup subgroup2 = createGroupAsUser(3, "test-account-3"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid1 = subgroup1.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid2 = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid1, subgroupUuid2)); assertTipCommit(uuid, (((("test-account\n") + "\n") + (java.lang.String.format("Group <%s> subgroup1))) + "\n") + (java.lang.String.format("Group <%s> subgroup2))))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit1 = createExpGroupAudit(group.getId(), subgroupUuid1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit2 = createExpGroupAudit(group.getId(), subgroupUuid2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }
@org.junit.Test public void addMultiSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.server.group.InternalGroup subgroup2 = createGroupAsUser(3, "test-account-3"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid1 = subgroup1.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid2 = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid1, subgroupUuid2)); assertTipCommit(uuid, (((("test-account-3" + "\n") + (java.lang.String.format("Group <%s> subgroupUuid1))) + "\n") + (java.lang.String.format("Group <%s> subgroupUuid2))))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit1 = createExpGroupAudit(group.getId(), subgroupUuid1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit2 = createExpGroupAudit(group.getId(), subgroupUuid2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }
@org.junit.Test public void addMultiSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.server.group.InternalGroup subgroup2 = createGroupAsUser(3, "test-account-3"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid1 = subgroup1.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid2 = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid1, subgroupUuid2)); assertTipCommit(uuid, (((("test-account-3" + "\n") + (java.lang.String.format("Group <%s> subgroupUuid1))) + (java.lang.String.format("Group <%s> subgroupUuid2"))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit1 = createExpGroupAudit(group.getId(), subgroupUuid1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit2 = createExpGroupAudit(group.getId(), subgroupUuid2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }
@org.junit.Test public void addMultiSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup1 = createGroupAsUser(2, "test-account-2"); com.google.gerrit.server.group.InternalGroup subgroup2 = createGroupAsUser(3, "test-account-3"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid1 = subgroup1.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid2 = subgroup2.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid1, subgroupUuid2)); assertTipCommit(uuid, (((("test-account\n") + "\n") + (java.lang.String.format("Group <%s> subgroupUuid1))) + "\n") + (java.lang.String.format("Group <%s> subgroupUuid2)))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit1 = createExpGroupAudit(group.getId(), subgroupUuid1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit2 = createExpGroupAudit(group.getId(), subgroupUuid2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2); }
@org.junit.Test public void createGroupAsServerIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, "test-account", null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }
@org.junit.Test public void createGroupAsServerIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, "test-account", null, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }
@org.junit.Test public void createGroupAsServerIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, "test-account"); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }
@org.junit.Test public void createGroupAsServerIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, "test-account", null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID()).hasSize(0); }
@org.junit.Test public void createGroupAsServerIdent() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, "test-account", null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(1); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next,java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = com.google.gerrit.server.group.db.InternalGroupCreation.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.make(groupName, serverIdent)).setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = (authorIdent.equals(serverIdent))? com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").build() : com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").setMemberModification(( members) -> com.google.common.collect.ImmutableSet.of(authorId)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(createMetaDataUpdate(authorIdent)); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Create account failed")); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next,java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = com.google.gerrit.server.group.db.InternalGroupCreation.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.make(groupName, serverIdent)).setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = (authorIdent.equals(serverIdent))? com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").build() : com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").setMemberModification(( members) -> com.google.common.collect.ImmutableSet.of(authorId)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(createMetaDataUpdate(authorIdent)); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Create group account failed")); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next,java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = com.google.gerrit.server.group.db.InternalGroupCreation.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.make(groupName, serverIdent)).setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = (authorIdent.equals(serverIdent))? com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").build() : com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").setMemberModification(( members) -> com.google.common.collect.ImmutableSet.of(authorId)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(createMetaDataUpdate(authorIdent)); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("New group account failed")); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next,java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = com.google.gerrit.server.group.db.InternalGroupCreation.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.make(groupName, serverIdent)).setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = (authorIdent.equals(serverIdent))? com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").build() : com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").setMemberModification(( members) -> com.google.common.collect.ImmutableSet.of(authorId)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(createMetaDataUpdate(authorIdent)); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Group account failed")); }
private com.google.gerrit.server.group.InternalGroup createGroup(int next,java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent authorIdent, com.google.gerrit.reviewdb.client.Account.Id authorId) throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = com.google.gerrit.server.group.db.InternalGroupCreation.builder().setGroupUUID(com.google.gerrit.server.account.GroupUUID.make(groupName, serverIdent)).setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupName)).setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id(next)).build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = (authorIdent.equals(serverIdent))? com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").build() : com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setDescription("Groups").setMemberModification(( members) -> com.google.common.collect.ImmutableSet.of(authorId)).build(); groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, AbstractGroupTest::getAccountNameEmail, AbstractGroupTest::getGroupName); org.eclipse.jgit.revwalk.RevCommit commit = groupConfig.commit(createMetaDataUpdate(authorIdent)); assertCreateGroup(authorIdent, commit); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Create group for account failed")); }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throwsjava.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "Create account"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit),java.lang.String.format("Create account Account %s <%s@%s>", userId, userId, com.google.gerrit.server.group.db.SERVER_ID), getAccountName(userId), getAccountEmail(userId)); } }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throwsjava.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "Create account"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit),java.lang.String.format("Create account %s <%s@%s>", userId, userId, com.google.gerrit.server.group.db.SERVER_ID), getAccountName(userId), getAccountEmail(userId)); } }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throwsjava.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "New account"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit),java.lang.String.format("New account Account %s <%s@%s>", userId, userId, com.google.gerrit.server.group.db.SERVER_ID), getAccountName(userId), getAccountEmail(userId)); } }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throwsjava.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "new account"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit),java.lang.String.format("new account Account %s <%s@%s>", userId, userId, com.google.gerrit.server.group.db.SERVER_ID), getAccountName(userId), getAccountEmail(userId)); } }
private void assertCreateGroup(org.eclipse.jgit.lib.PersonIdent authorIdent, org.eclipse.jgit.revwalk.RevCommit commit) throwsjava.lang.Exception { if (authorIdent.equals(serverIdent)) { assertServerCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit), "Create account"); } else { assertCommit(com.google.gerrit.server.git.CommitUtil.toCommitInfo(commit),java.lang.String.format("Create account for %s <%s@%s>", userId, userId, com.google.gerrit.server.group.db.SERVER_ID), getAccountName(userId), getAccountEmail(userId)); } }
void validateNewProject(com.google.gerrit.server.api.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;
void validateNewProject(com.google.gerrit.server.restapi.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;
void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;
void validateNewProject(com.google.gerrit.server.api.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException; }
void validateNewProject(com.google.gerrit.server.restapi.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException; }
@org.junit.Test public void addAndRemoveSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("account Group <%s>", subgroupUuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit = createExpGroupAudit(group.getId(), subgroupUuid, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("account Group <%s>", subgroupUuid)); expAudit.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); }
@org.junit.Test public void addAndRemoveSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("Added account Group <%s>", subgroupUuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit = createExpGroupAudit(group.getId(), subgroupUuid, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("Removed account Group <%s>", subgroupUuid)); expAudit.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); }
@org.junit.Test public void addAndRemoveSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("Add account Group <%s>", subgroupUuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit = createExpGroupAudit(group.getId(), subgroupUuid, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("Remove account Group <%s>", subgroupUuid)); expAudit.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); }
@org.junit.Test public void addAndRemoveSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("Adding account Group <%s>", subgroupUuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit = createExpGroupAudit(group.getId(), subgroupUuid, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("Removing account Group <%s>", subgroupUuid)); expAudit.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); }
@org.junit.Test public void addAndRemoveSubgroups() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.server.group.InternalGroup subgroup = createGroupAsUser(2, "test-account-2"); com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid = subgroup.getGroupUUID(); addSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("Uploaded account Group <%s>", subgroupUuid)); com.google.gerrit.reviewdb.client.AccountGroupByIdAud expAudit = createExpGroupAudit(group.getId(), subgroupUuid, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); removeSubgroups(uuid, com.google.common.collect.ImmutableSet.of(subgroupUuid)); assertTipCommit(uuid,java.lang.String.format("Removing account Group <%s>", subgroupUuid)); expAudit.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getSubgroupsAudit(allUsersRepo, uuid)).containsExactly(expAudit); }
@org.junit.Test public void addMultiMembers() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(groupId, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(100002); com.google.gerrit.reviewdb.client.Account.Id id2 = new com.google.gerrit.reviewdb.client.Account.Id(100003); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1, id2)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(groupId, id1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit3 = createExpMemberAudit(groupId, id2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2, expAudit3).inOrder(); }
@org.junit.Test public void addMultiMembers() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(groupId, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(100002); com.google.gerrit.reviewdb.client.Account.Id id2 = new com.google.gerrit.reviewdb.client.Account.Id(100003); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1, id2)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(groupId, id1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit3 = createExpMemberAudit(groupId, id2, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2, expAudit3); }
@org.junit.Test public void addMultiMembers() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(groupId, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(100002); com.google.gerrit.reviewdb.client.Account.Id id2 = new com.google.gerrit.reviewdb.client.Account.Id(100003); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1, id2)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(groupId, id1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit3 = createExpMemberAudit(groupId, id2, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, (("\n" + " Account 100001 <100001@server-id> ") + " Account 100002 <100002@server-id> ") + " Account 100003 <100003@server-id>")); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2, expAudit3).inOrder(); }
@org.junit.Test public void addMultiMembers() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(groupId, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(100002); com.google.gerrit.reviewdb.client.Account.Id id2 = new com.google.gerrit.reviewdb.client.Account.Id(100003); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1, id2)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(groupId, id1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit3 = createExpMemberAudit(groupId, id2, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, (("Created account " + (("\n" + " Account 100001 <100001@server-id> ") + " Account 100002 <100002@server-id> ") + " Account 100003 <100003@server-id> ") + "")); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2, expAudit3).inOrder(); }
@org.junit.Test public void addMultiMembers() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(groupId, userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id1 = new com.google.gerrit.reviewdb.client.Account.Id(100002); com.google.gerrit.reviewdb.client.Account.Id id2 = new com.google.gerrit.reviewdb.client.Account.Id(100003); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id1, id2)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(groupId, id1, userId, getTipTimestamp(uuid)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit3 = createExpMemberAudit(groupId, id2, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, (("Account 100001 <100001@server-id>\n" + "Account 100002 <100002@server-id>\n" + "Account 100003 <100003@server-id>\n" + "Account 100004 <100004@server-id>\n") + "Account 100005 <100005@server-id>\n")), expAudit1, expAudit2, expAudit3).inOrder(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource> list() { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource>> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException;
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list(); }
@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.restapi.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.restapi.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return new com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.api.project.FileResource parse(com.google.gerrit.server.restapi.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.restapi.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.restapi.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id); }
@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { return new com.google.gerrit.server.restapi.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = id; try {java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw newjava.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi. group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = id; try {java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw newjava.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = id; try {java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw newjava.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = id; try {java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi. group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = id; try {java.util.List<com.google.gerrit.extensions.common.AccountInfo> list = put.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi. group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource, input); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server. restapi. group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.server.restapi. group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gwtorm.server.OrmException { return get.apply(resource, input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return list.get().toBranchInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.api.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return list.get().toBranchInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchesInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return list.get().toBranchInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return list.get().toBranchInfo(rsrc); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchInfo apply(com.google.gerrit.server.restapi.project.BranchResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return list.get().get().toBranchInfo(rsrc); }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("The account wasn't automatically loaded")); }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Group account wasn't automatically loaded")); }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("group wasn't automatically loaded")); }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("group account wasn't automatically loaded")); }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Group wasn't automatically loaded")); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) {java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Updating tag cache on fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug("evicting project in cache"); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot evict from project cache, name key: " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug("updating project description"); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error("Cannot sync create account permissions", e); } } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) {java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("updating tag cache on fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug("evicting project in cache"); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot evict from project cache, name key: " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug("updating project description"); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error("Cannot sync create account permissions", e); } } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) {java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Updating tag cache on fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug("evicting project in cache"); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot evict from project cache, name key: " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug("Setting project description"); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error("Cannot sync create account permissions", e); } } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) {java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Updating tag cache on fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug("Evicting project in cache"); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot evict from project cache, name key: " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug("Setting project description"); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error("Cannot sync create account permissions", e); } } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) {java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Updating tag cache on fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug("evicting project in cache"); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot evict from project cache, name key: " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug("setting project description"); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error("Cannot sync create account permissions", e); } } } }
@java.lang.Override public com.google.gerrit.server.restapi.project.RepositoryStatistics apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.restapi.project.RepositoryStatistics(gc.getStatistics()); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitInternalException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getName()); } }
@java.lang.Override public com.google.gerrit.server.api.project.RepositoryStatistics apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.api.project.RepositoryStatistics(gc.getStatistics()); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitInternalException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getName()); } }
@java.lang.Override public com.google.gerrit.server.restapi.project.RepositoryStatistics apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.restapi.project.RepositoryStatistics(gc.getStatistics()); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitInternalException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.server.restapi.project.RepositoryStatistics apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.restapi.project.RepositoryStatistics(gc.getStatistics()); } }
@java.lang.Override public com.google.gerrit.server.restapi.project.RepositoryStatistics apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); return new com.google.gerrit.server.restapi.project.RepositoryStatistics(gc.getStatistics()); } catch (org.eclipse.jgit.api.errors.GitAPIException | org.eclipse.jgit.api.errors.JGitInternalException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.name()); } }
@org.junit.Test public void addAndRemoveMember() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(100002); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(group.getId(), id, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2); removeMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2); }
@org.junit.Test public void addAndRemoveMember() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(100002); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(group.getId(), id, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2); }
@org.junit.Test public void addAndRemoveMember() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(100002); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(group.getId(), id, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, "Account 100002 <100002@server-id>", expAudit1, expAudit2); removeMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); assertTipCommit(uuid, "Account 100002 <100002@server-id>", expAudit2, expAudit1); expAudit2.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }
@org.junit.Test public void addAndRemoveMember() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(100002); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(group.getId(), id, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, "Add account 100002 <100002@server-id>", expAudit1, expAudit2); removeMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); assertTipCommit(uuid, "Remove account 100002 <100002@server-id>", expAudit2, expAudit1); expAudit2.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }
@org.junit.Test public void addAndRemoveMember() throwsjava.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroupAsUser(1, "test-account"); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = group.getGroupUUID(); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit1 = createExpMemberAudit(group.getId(), userId, userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(100002); addMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit expAudit2 = createExpMemberAudit(group.getId(), id, userId, getTipTimestamp(uuid)); assertTipCommit(uuid, "Account 100002 <100002@server-id>", expAudit1, expAudit2); removeMembers(uuid, com.google.common.collect.ImmutableSet.of(id)); assertTipCommit(uuid, "Account 100002 <100002@server-id>", expAudit2, expAudit1); expAudit1.removed(userId, getTipTimestamp(uuid)); assertThat(auditLogReader.getMembersAudit(allUsersRepo, uuid)).containsExactly(expAudit1, expAudit2).inOrder(); }
static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("UUID for account '%s' must be defined", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("GroupName for account '%s' must be defined", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("uuid for account '%s' must be defined", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
public static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("UUID for account '%s' must be defined", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
private static com.google.gerrit.common.data.GroupReference getFromNoteData(byte[] noteData) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.fromText(newjava.lang.String(noteData,java.nio.charset.StandardCharsets.UTF_8));java.lang.String uuid = config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.UUID_PARAM);java.lang.String name = com.google.common.base.Strings.nullToEmpty(config.getString(com.google.gerrit.server.group.db.GroupNameNotes.SECTION_NAME, null, com.google.gerrit.server.group.db.GroupNameNotes.NAME_PARAM)); if (uuid == null) { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("UUID for account '%s' must be defined", name)); } return new com.google.gerrit.common.data.GroupReference(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(uuid), name); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.restapi.change.FixResource fixResource,java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) {java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModifications = fixReplacementInterpreter.toTreeModifications(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getNotes(), patchSet, treeModifications); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.restapi.change.FixResource fixResource,java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) {java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModifications = fixReplacementInterpreter.toTreeModifications(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getNotes(), patchSet, treeModifications); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.restapi.change.FixResource fixResource,java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) {java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModifications = fixReplacementInterpreter.toTreeModifications(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getNotes(), patchSet, treeModifications); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server. restapi.change.FixResource fixResource,java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) {java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModifications = fixReplacementInterpreter.toTreeModifications(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getNotes(), patchSet, treeModifications); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.restapi.change.FixResource fixResource,java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(project); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) {java.util.List<com.google.gerrit.server.edit.tree.TreeModification> treeModifications = fixReplacementInterpreter.toTreeModifications(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getNotes(), patchSet, treeModifications); return com.google.gerrit.extensions.restapi.Response.ok(changeEditJson.toEditInfo(changeEdit, false)); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project,java.lang.String id);
.com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project,java.lang.String id);
com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.api.projects.ProjectResource project,java.lang.String id);
com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.api.project.ProjectResource project,java.lang.String id);
.com.google.gerrit.server.api.projects.DashboardApiImpl create(com.google.gerrit.server.api.projects.ProjectResource project,java.lang.String id);
public com.google.gerrit.server.restapi.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String reviewer = input.reviewer; com.google.gerrit.extensions.client.ReviewerState state = input.state(); com.google.gerrit.extensions.api.changes.NotifyHandling notify = input.notify; com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = null; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return fail(reviewer, e.getMessage()); } boolean confirmed = input.confirmed(); boolean allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.restapi.change.PostReviewers.Addition byAccountId = addByAccountId(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (byAccountId!= null) { return byAccountId; } com.google.gerrit.server.restapi.change.PostReviewers.Addition wholeGroup = addWholeGroup(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (wholeGroup!= null) { return wholeGroup; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }
public com.google.gerrit.server.restapi.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String reviewer = input.reviewer; com.google.gerrit.extensions.client.ReviewerState state = input.state(); com.google.gerrit.extensions.api.changes.NotifyHandling notify = input.notify; com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = null; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return fail(reviewer, e.getMessage()); } boolean confirmed = input.confirmed(); boolean allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.restapi.change.PostReviewers.Addition byAccountId = addByAccountId(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup); if (byAccountId!= null) { return byAccountId; } com.google.gerrit.server.restapi.change.PostReviewers.Addition wholeGroup = addWholeGroup(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (wholeGroup!= null) { return wholeGroup; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }
public com.google.gerrit.server.restapi.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String reviewer = input.reviewer; com.google.gerrit.extensions.client.ReviewerState state = input.state(); com.google.gerrit.extensions.api.changes.NotifyHandling notify = input.notify; com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = null; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return fail(reviewer, e.getMessage()); } boolean confirmed = input.confirmed(); boolean allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.restapi.change.PostReviewers.Addition byAccountId = addByAccountId(reviewer, rsrc, state, notify, accountsToNotify, allowGroup, allowByEmail); if (byAccountId!= null) { return byAccountId; } com.google.gerrit.server.restapi.change.PostReviewers.Addition wholeGroup = addWholeGroup(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (wholeGroup!= null) { return wholeGroup; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }
public com.google.gerrit.server.restapi.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String reviewer = input.reviewer; com.google.gerrit.extensions.client.ReviewerState state = input.state(); com.google.gerrit.extensions.api.changes.NotifyHandling notify = input.notifyHandling; com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = null; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return fail(reviewer, e.getMessage()); } boolean confirmed = input.confirmed(); boolean allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.restapi.change.PostReviewers.Addition byAccountId = addByAccountId(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (byAccountId!= null) { return byAccountId; } com.google.gerrit.server.restapi.change.PostReviewers.Addition wholeGroup = addWholeGroup(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (wholeGroup!= null) { return wholeGroup; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify); }
public com.google.gerrit.server.restapi.change.PostReviewers.Addition prepareApplication(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input, boolean allowGroup) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String reviewer = input.reviewer; com.google.gerrit.extensions.client.ReviewerState state = input.state(); com.google.gerrit.extensions.api.changes.NotifyHandling notify = input.notify; com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify = null; try { accountsToNotify = notifyUtil.resolveAccounts(input.notifyDetails); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { return fail(reviewer, e.getMessage()); } boolean confirmed = input.confirmed(); boolean allowByEmail = projectCache.checkedGet(rsrc.getProject()).isEnableReviewerByEmail(); com.google.gerrit.server.restapi.change.PostReviewers.Addition byAccountId = addByAccountId(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (byAccountId!= null) { return byAccountId; } com.google.gerrit.server.restapi.change.PostReviewers.Addition wholeGroup = addWholeGroup(reviewer, rsrc, state, notify, accountsToNotify, confirmed, allowGroup, allowByEmail); if (wholeGroup!= null) { return wholeGroup; } return addByEmail(reviewer, rsrc, state, notify, accountsToNotify, confirmed); }
java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) {java.lang.String summaryLine = (groupCreation.isPresent())? "Create account" : "Create group";java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add));java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
javajava.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) {java.lang.String summaryLine = (groupCreation.isPresent())? "Create account" : "Create group";java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add));java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
javajava.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) {java.lang.String summaryLine = (groupCreation.isPresent())? "Create group " : "Create account";java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add));java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) {java.lang.String summaryLine = (groupCreation.isPresent())? "Create account " : "Create group ";java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add));java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
javajava.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups,java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) {java.lang.String summaryLine = (groupCreation.isPresent())? "Create account " : "Create group ";java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add));java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
java @java.lang.Override protected void run() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(new com.google.gerrit.server.restapi.project.ProjectResource(project, user), input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }
@java.lang.Override protected void run() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(new com.google.gerrit.server.restapi.project.ProjectResource(project, user), input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }
java.lang.Override protected void run() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(new com.google.gerrit.server.restapi.project.ProjectResource(project, user), input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }
java @java.lang.Override protected void run() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(new com.google.gerrit.server.api.project.ProjectResource(project, user), input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }
java @java.lang.Override protected void run() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.HeadInput input = new com.google.gerrit.extensions.api.projects.HeadInput(); input.ref = newHead; try { setHead.apply(new com.google.gerrit.server.project.ProjectResource(project, user), input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw die(e); } }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java @java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.api.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().parse(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.DraftCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment().get()); }
java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForReparenting(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = newjava.util.ArrayList<>(); finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> excluded = newjava.util.ArrayList(excludedChildren.size()); for (com.google.gerrit.server.project.ProjectState excludedChild : excludedChildren) { excluded.add(excludedChild.getProject().getNameKey()); } finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExcluded = newjava.util.ArrayList(excludedChildren.size()); if ((newParentKey)!= null) { automaticallyExcluded.addAll(getAllParents(newParentKey)); } for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.server.restapi.project.ProjectResource(parent, user))) { final com.google.gerrit.reviewdb.client.Project.NameKey childName = new com.google.gerrit.reviewdb.client.Project.NameKey(child.name); if (!(excluded.contains(childName))) { if (!(automaticallyExcluded.contains(childName))) { childProjects.add(childName); } else { stdout.println((((((("excluded " + childName) + " reparenting because it is in the parent ") + " of the new parent ") + (newParentKey)) + "'.")); } } } return childProjects; }
java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForReparenting(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = newjava.util.ArrayList<>(); finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> excluded = newjava.util.ArrayList(excludedChildren.size()); for (com.google.gerrit.server.project.ProjectState excludedChild : excludedChildren) { excluded.add(excludedChild.getProject().getNameKey()); } finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExcluded = newjava.util.ArrayList(excludedChildren.size()); if ((newParentKey)!= null) { automaticallyExcluded.addAll(getAllParents(newParentKey)); } for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.server.restapi.project.ProjectResource(parent, user))) { final com.google.gerrit.reviewdb.client.Project.NameKey childName = new com.google.gerrit.reviewdb.client.Project.NameKey(child.name); if (!(excluded.contains(childName))) { if (!(automaticallyExcluded.contains(childName))) { childProjects.add(childName); } else { stdout.println((((((("I excluded " + childName) + " reparenting because it is in the parent ") + " of the new parent ") + (newParentKey)) + "'.")); } } } return childProjects; }
java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForReparenting(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = newjava.util.ArrayList<>(); finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> excluded = newjava.util.ArrayList(excludedChildren.size()); for (com.google.gerrit.server.project.ProjectState excludedChild : excludedChildren) { excluded.add(excludedChild.getProject().getNameKey()); } finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExcluded = newjava.util.ArrayList(excludedChildren.size()); if ((newParentKey)!= null) { automaticallyExcluded.addAll(getAllParents(newParentKey)); } for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.server.restapi.project.ProjectResource(parent, user))) { final com.google.gerrit.reviewdb.client.Project.NameKey childName = new com.google.gerrit.reviewdb.client.Project.NameKey(child.name); if (!(excluded.contains(childName))) { if (!(automaticallyExcluded.contains(childName))) { childProjects.add(childName); } else { stdout.println(((((("excluded " + childName) + " reparenting because it is in the parent ") + " of the new parent ") + (newParentKey)) + "'.")); } } } return childProjects; }
java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForReparenting(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = newjava.util.ArrayList<>(); finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> excluded = newjava.util.ArrayList(excludedChildren.size()); for (com.google.gerrit.server.project.ProjectState excludedChild : excludedChildren) { excluded.add(excludedChild.getProject().getNameKey()); } finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExcluded = newjava.util.ArrayList(excludedChildren.size()); if ((newParentKey)!= null) { automaticallyExcluded.addAll(getAllParents(newParentKey)); } for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.server.restapi.project.ProjectResource(parent, user))) { final com.google.gerrit.reviewdb.client.Project.NameKey childName = new com.google.gerrit.reviewdb.client.Project.NameKey(child.name); if (!(excluded.contains(childName))) { if (!(automaticallyExcluded.contains(childName))) { childProjects.add(childName); } else { stdout.println((((((("excluded " + childName) + " ") + " reparenting because it is in the parent ") + " of the new parent ") + (newParentKey)) + "'.")); } } } return childProjects; }
java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> getChildrenForReparenting(com.google.gerrit.server.project.ProjectState parent) throws com.google.gerrit.server.permissions.PermissionBackendException { finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> childProjects = newjava.util.ArrayList<>(); finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> excluded = newjava.util.ArrayList(excludedChildren.size()); for (com.google.gerrit.server.project.ProjectState excludedChild : excludedChildren) { excluded.add(excludedChild.getProject().getNameKey()); } finaljava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> automaticallyExcluded = newjava.util.ArrayList(excludedChildren.size()); if ((newParentKey)!= null) { automaticallyExcluded.addAll(getAllParents(newParentKey)); } for (com.google.gerrit.extensions.common.ProjectInfo child : listChildProjects.apply(new com.google.gerrit.server.restapi.project.ProjectResource(parent, user))) { final com.google.gerrit.reviewdb.client.Project.NameKey childName = new com.google.gerrit.reviewdb.client.Project.NameKey(child.name); if (!(excluded.contains(childName))) { if (!(automaticallyExcluded.contains(childName))) { childProjects.add(childName); } else { stdout.println((((((("excluded " + childName) + " reparenting because it is in the parent " + " of the new parent ") + (newParentKey)) + "'.")); } } } return childProjects; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getAgreementUrl(); com.google.gerrit.common.data.GroupReference autoVerifyGroup = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = genericGroupControlFactory.controlFor(user, autoVerifyGroup.getUUID()); com.google.gerrit.server.api.group.GroupResource group = new com.google.gerrit.server.api.group.GroupResource(gc); info.autoVerifyGroup = groupJson.format(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.config.AgreementJson.log.warn((("Agreement account \"" + (autoVerifyGroup.getName())) + "\" does not exist, referenced in CLA \"" + (ca.getName())) + "\"")); } } return info; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getAgreementUrl(); com.google.gerrit.common.data.GroupReference autoVerifyGroup = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = genericGroupControlFactory.controlFor(user, autoVerifyGroup.getUUID()); com.google.gerrit.server.api.group.GroupResource group = new com.google.gerrit.server.api.group.GroupResource(gc); info.autoVerifyGroup = groupJson.format(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.config.AgreementJson.log.warn((("Agreement account " + (autoVerifyGroup.getName())) + "\" does not exist, referenced in CLA \"" + (ca.getName())) + "\"")); } } return info; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getAgreementUrl(); com.google.gerrit.common.data.GroupReference autoVerifyGroup = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = genericGroupControlFactory.controlFor(user, autoVerifyGroup.getUUID()); com.google.gerrit.server.restapi.group.GroupResource group = new com.google.gerrit.server.restapi.group.GroupResource(gc); info.autoVerifyGroup = groupJson.format(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.config.AgreementJson.log.warn((("Agreement account \"" + (autoVerifyGroup.getName())) + "\" does not exist, referenced in CLA \"" + (ca.getName())) + "\"")); } } return info; }
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getAgreementUrl(); com.google.gerrit.common.data.GroupReference autoVerifyGroup = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = genericGroupControlFactory.controlFor(user, autoVerifyGroup.getUUID()); com.google.gerrit.server.api.group.GroupResource group = new com.google.gerrit.server.api.group.GroupResource(gc); info.autoVerifyGroup = groupJson.format(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.config.AgreementJson.log.warn((("auto verify group
public com.google.gerrit.extensions.common.AgreementInfo format(com.google.gerrit.common.data.ContributorAgreement ca) { com.google.gerrit.extensions.common.AgreementInfo info = new com.google.gerrit.extensions.common.AgreementInfo(); info.name = ca.getName(); info.description = ca.getDescription(); info.url = ca.getAgreementUrl(); com.google.gerrit.common.data.GroupReference autoVerifyGroup = ca.getAutoVerify(); if ((autoVerifyGroup!= null) && (self.get().isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create(self.get().getAccountId()); try { com.google.gerrit.server.account.GroupControl gc = genericGroupControlFactory.controlFor(user, autoVerifyGroup.getUUID()); com.google.gerrit.server.restapi.group.GroupResource group = new com.google.gerrit.server.restapi.group.GroupResource(gc); info.autoVerifyGroup = groupJson.format(group); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.config.AgreementJson.log.warn((("auto verify group
public static com.google.gerrit.server.restapi.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) { return new com.google.gerrit.server.restapi.project.DashboardResource(projectState, user, null, null, null, true); }
public static com.google.gerrit.server.api.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) { return new com.google.gerrit.server.api.project.DashboardResource(projectState, user, null, null, null, true); }
public static com.google.gerrit.server.restapi.project.DashboardResource default(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) { return new com.google.gerrit.server.restapi.project.DashboardResource(projectState, user, null, null, null, true); }
public static com.google.gerrit.server.restapi.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) { return new com.google.gerrit.server.restapi.project.DashboardResource(projectState, user, null, null, null, null); }
public static com.google.gerrit.server.restapi.project.DashboardResource projectDefault(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) { return new com.google.gerrit.server.restapi.project.DashboardResource(projectState, user, null, null, null); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.restapi.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); }
@java @java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.restapi.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.api.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.restapi.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().formatter(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.api.group.GroupResource resource) throws com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gwtorm.server.OrmException { return json.format(resource.group()); }
@java.lang.Override public GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gwtorm.server.OrmException { return json.format(resource.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) { return json.format(resource.getGroup()); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("newProjectName"); in.owners =java.util.Collections.singletonList("non-existing-account"); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("newProjectName"); in.owners =java.util.Collections.singletonList( "non-existing-account"); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("newProjectName"); in.owners =java.util.Collections.singletonList(account); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throwsjava.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.name = name("newProjectName"); in.owners =java.util.Collections.singletonList("non-existing-account"); assertCreateFails(in, com.google.gerrit.extensions.restapi.UnprocessableEntity.class); }
@org.junit.Test public void createProjectWithNonExistingOwner_UnprocessableEntity() throwsjava.lang.Exception { createProjectWithNonExistingOwner(); }
@org.kohsuke.args4j.Option(name = "--has-acl-for", metaVar = "GROUP", usage = "only projects on which access rights for this account are directly assigned") public void setGroupUuid(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { this.groupUuid = groupUuid; }
@org.kohsuke.args4j.Option(name = "--has-acl-for", metaVar = "GROUP", usage = "restrict only projects on which access rights for this account are directly assigned") public void setGroupUuid(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { this.groupUuid = groupUuid; }
@org.kohsuke.args4j.Option(name = "--has-acl-for", metaVar = "GROUP", usage = "allow only projects on which access rights for this account are directly assigned") public void setGroupUuid(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { this.groupUuid = groupUuid; }
@org.kohsuke.args4j.Option(name = "--has-acl-for", metaVar = "GROUP", usage = "only projects on which access rights for this account are directly assigned"); public void setGroupUuid(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { this.groupUuid = groupUuid; }
@org.kohsuke.args4j.Option(name = "--has-acl-for", metaVar = "GROUP", usage = "restrict only projects on which access rights for this account are directly assigned"); public void setGroupUuid(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) { this.groupUuid = groupUuid; }
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.api.projects.ProjectResource project,java.lang.String ref);
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project,java.lang.String ref);
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.api.project.ProjectResource project,java.lang.String ref);
com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project,java.lang.String ref);
.com.google.gerrit.server.api.projects.TagApiImpl create(com.google.gerrit.server.restapi.project.ProjectResource project,java.lang.String ref);
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi. group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try {java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw newjava.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi. group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try {java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw newjava.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try {java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw newjava.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try {java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw newjava.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi. group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(id); try {java.util.List<com.google.gerrit.extensions.common.GroupInfo> list = addSubgroups.apply(resource, in); if ((list.size()) == 1) { return list.get(0); } throw newjava.lang.IllegalStateException(); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gwtorm.server.OrmException { return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi. group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gwtorm.server.OrmException { return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gwtorm.server.OrmException { return get.get().apply(resource, input); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.SubgroupResource resource, com.google.gerrit.server.api.group.AddSubgroups.Input input) throws com.google.gwtorm.server.OrmException { return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.api.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gwtorm.server.OrmException { return get.get().apply(resource); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.CommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.CommentResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.CommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.changes.CommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Change.CommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.restapi.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.CommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.publishedByPatchSet(dbProvider.get(), notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return c; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.CommentResource(rev, c); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.restapi.change.CommentResource(rev, id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.CommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException {java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); return new com.google.gerrit.server.restapi.change.CommentResource(rev, c); }
public static com.google.gerrit.server.restapi.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev,java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.restapi.project.FileResource(projectState, rev, path); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); }
public static com.google.gerrit.server.api.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev,java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.api.project.FileResource(projectState, rev, path); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); }
public static com.google.gerrit.server.restapi.Project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev,java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.restapi.Project.FileResource(projectState, rev, path); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); }
public static com.google.gerrit.server.restapi.project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev,java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if (tree!= null) { return new com.google.gerrit.server.restapi.project.FileResource(projectState, rev, path); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); }
public static com.google.gerrit.server.restapi.Project.FileResource create(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.lib.ObjectId rev,java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectState.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(rev); if ((org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, path, tree))!= null) { return new com.google.gerrit.server.restapi.project.FileResource(projectState, rev, path); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException,java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Failed to grant read permissions on account branches", e); } }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException,java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Unable to grant read permissions on account branches", e); } }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException,java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("failed to grant read permissions on account branches", e); } }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException,java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Failed to grant read permissions on account branches", e); } }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException,java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } }
private com.google.gerrit.server.restapi.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.api.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.extensions.restapi.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.restapi.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id).get()); }
private com.google.gerrit.server.restapi.project.DashboardResource resource() { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInput(); input.id = id; set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(project.getProjectState(), project.getUser()), input); }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInput(); input.id = id; try { set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot set %s", id), e); } }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInput(); input.id = id; try { set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot default dashboard", ((id)!= null? "set" : "remove")); } }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInput(); input.id = id; try { set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot default dashboard", ((id)!= null? "set" : "remove")), e); } }
@java.lang.Override public void setDefault() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.SetDashboardInput input = new com.google.gerrit.extensions.common.SetDashboardInput(); input.id = id; try { set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(project.getProjectState(), project.getUser()), input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(("Cannot change default dashboard", ((id)!= null? "set" : "remove")), e); } }
private com.google.gerrit.server.restapi.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.api.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.restapi.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.restapi.project.TagResource resource() { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref)); }
private com.google.gerrit.server.restapi.project.TagResource resource() throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException { return tags.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(ref); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("cannot delete members from account " + (internalGroup.getName()))); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = newjava.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUuid, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("cannot delete members from group " + (internalGroup.getName()))); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = newjava.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUuid, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("Cannot delete members from account " + (internalGroup.getName()))); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = newjava.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUuid, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("cannot delete members from account " + (internalGroup.getName()))); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = newjava.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUuid, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddMembers.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveMember())) { throw new com.google.gerrit.extensions.restapi.AuthException(("cannot delete members from account " + (internalGroup.getName()))); }java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> membersToRemove = newjava.util.HashSet<>(); for (java.lang.String nameOrEmail : input.members) { com.google.gerrit.reviewdb.client.Account a = accounts.parse(nameOrEmail).getAccount(); membersToRemove.add(a.getId()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeGroupMembers(groupUuid, membersToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.groups.OwnerInput in = new com.google.gerrit.extensions.api.groups.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account owner", e); } }
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.groups.OwnerInput in = new com.google.gerrit.extensions.api.groups.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot put account owner", e); } }
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.groups.OwnerInput in = new com.google.gerrit.extensions.api.groups.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account", e); } }
public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.groups.OwnerInput in = new com.google.gerrit.extensions.api.groups.OwnerInput(); in.owner = owner; try { putOwner.apply(rsrc, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot put account owner", e); } }
@java.lang.Override public void owner(java.lang.String owner) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.groups.OwnerInput in = new com.google.gerrit.extensions.api.groups.OwnerInput(); in.owner = owner; putOwner.apply(rsrc, in); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput conf = new com.google.gerrit.extensions.api.projects.ConfigInput(); conf.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("Foo Bar"); assertThat(result.error).isEqualTo("Foo Bar <foo.bar@gerritcodereview.com> does not identify a registered user or account"); assertThat(result.reviewers).isNull(); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput conf = new com.google.gerrit.extensions.api.projects.ConfigInput(); conf.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("Foo Bar <foo.bar@gerritcodereview.com>"); assertThat(result.error).isEqualTo("Foo Bar <foo.bar@gerritcodereview.com> does not identify a registered user or account"); assertThat(result.reviewers).isNull(); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput conf = new com.google.gerrit.extensions.api.projects.ConfigInput(); conf.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("Bar <foo.bar@gerritcodereview.com>"); assertThat(result.error).isEqualTo("Bar <foo.bar@gerritcodereview.com> does not identify a registered user or account"); assertThat(result.reviewers).isNull(); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput conf = new com.google.gerrit.extensions.api.projects.ConfigInput(); conf.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("Foo Bar"); assertThat(result.error).isEqualTo("Uploaded Bar <foo.bar@gerritcodereview.com> does not identify a registered user or account"); assertThat(result.reviewers).isNull(); }
@org.junit.Test public void rejectWhenFeatureIsDisabled() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.api.projects.ConfigInput conf = new com.google.gerrit.extensions.api.projects.ConfigInput(); conf.enableReviewerByEmail = com.google.gerrit.extensions.client.InheritableBoolean.FALSE; gApi.projects().name(project.get()).config(conf); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = gApi.changes().id(r.getChangeId()).addReviewer("Foo Bar <foo.bar@gerritcodereview.com>"); assertThat(result.error).isEqualTo("Foo Bar <foo.bar@gerritcodereview.com> does not identify a registered user or account."); assertThat(result.reviewers).isNull(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.project.ProjectResource,?> create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.restapi.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.project.ProjectResource,?> create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.restapi.dashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.project.ProjectResource,?> create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { return createDefault.get(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.project.ProjectResource,?> create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { return createDefault.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.project.ProjectResource,?> create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { return createDefault.get(id).get(); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.DashboardResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Project.DashboardResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.DashboardResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.DashboardResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.ProjectDashboardResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.restapi. project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi. project.DashboardResource parse(com.google.gerrit.server.restapi. project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.restapi.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfoImpl(serverEnableSignedPush, resource.getProjectState(), resource.getUser(), config, pluginConfigEntries, cfgFactory, allProjects, uiActions, views); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.api.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfoImpl(serverEnableSignedPush, resource.getProjectState(), resource.getUser(), config, pluginConfigEntries, cfgFactory, allProjects, uiActions, views); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.restapi.project.ProjectResource resource) { return new com.google.gerrit.extensions.api.projects.ConfigInfoImpl(serverEnableSignedPush, resource.getProjectState(), resource.getUser(), config, pluginConfigEntries, cfgFactory, allProjects, uiActions, views); }
@java @java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.restapi.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfoImpl(serverEnableSignedPush, resource.getProjectState(), resource.getUser(), config, pluginConfigEntries, cfgFactory, allProjects, uiActions, views); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { return new com.google.gerrit.server.project.ConfigInfoImpl(serverEnableSignedPush, resource.getProjectState(), resource.getUser(), config, pluginConfigEntries, cfgFactory, allProjects, uiActions, views); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup(); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.api.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return json.format(c.getGroup()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.api.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java @java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().get(rsrc.getComment()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo apply(com.google.gerrit.server.restapi.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newCommentFormatter().format(rsrc.getComment().get()); }
java privatejava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.InternalGroup g,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throwsjava.io.IOException {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); problems.addAll(checkCycle(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error("group %s (%s) has nonexistent owner account group %s", g.getName(), g.getGroupUUID(), g.getOwnerGroupUUID())); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : g.getSubgroups()) { if (((byUUID.get(subUuid)) == null) && ((groupBackend.get(subUuid)) == null)) { problems.add(error("group %s (%s) has nonexistent subgroup %s", g.getName(), g.getGroupUUID(), subUuid)); } } for (com.google.gerrit.reviewdb.client.Account.Id id : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error("group %s (%s) has member %s with invalid configuration: %s", g.getName(), g.getGroupUUID(), id, e.getMessage())); continue; } if (account == null) { problems.add(error("group %s (%s) has nonexistent member %s", g.getName(), g.getGroupUUID(), id)); } } return problems; }
java privatejava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.InternalGroup g,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throwsjava.io.IOException {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); problems.addAll(checkCycle(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error("Group %s (%s) has nonexistent owner account group %s", g.getName(), g.getGroupUUID(), g.getOwnerGroupUUID())); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : g.getSubgroups()) { if (((byUUID.get(subUuid)) == null) && ((groupBackend.get(subUuid)) == null)) { problems.add(error("Group %s (%s) has nonexistent subgroup %s", g.getName(), g.getGroupUUID(), subUuid)); } } for (com.google.gerrit.reviewdb.client.Account.Id id : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error("Group %s (%s) has member %s with invalid configuration: %s", g.getName(), g.getGroupUUID(), id, e.getMessage())); continue; } if (account == null) { problems.add(error("Group %s (%s) has nonexistent member %s", g.getName(), g.getGroupUUID(), id)); } } return problems; }
java privatejava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.InternalGroup g,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throwsjava.io.IOException {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); problems.addAll(checkCycle(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error("group %s (%s) has nonexistent owner account %s", g.getName(), g.getGroupUUID(), g.getOwnerGroupUUID())); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : g.getSubgroups()) { if (((byUUID.get(subUuid)) == null) && ((groupBackend.get(subUuid)) == null)) { problems.add(error("group %s (%s) has nonexistent subgroup %s", g.getName(), g.getGroupUUID(), subUuid)); } } for (com.google.gerrit.reviewdb.client.Account.Id id : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error("group %s (%s) has member %s with invalid configuration: %s", g.getName(), g.getGroupUUID(), id, e.getMessage())); continue; } if (account == null) { problems.add(error("group %s (%s) has nonexistent member %s", g.getName(), g.getGroupUUID(), id)); } } return problems; }
java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.InternalGroup g,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throwsjava.io.IOException {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); problems.addAll(checkCycle(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error("group %s (%s) has nonexistent owner account group %s", g.getName(), g.getGroupUUID(), g.getOwnerGroupUUID())); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : g.getSubgroups()) { if (((byUUID.get(subUuid)) == null) && ((groupBackend.get(subUuid)) == null)) { problems.add(error("group %s (%s) has nonexistent subgroup %s", g.getName(), g.getGroupUUID(), subUuid)); } } for (com.google.gerrit.reviewdb.client.Account.Id id : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error("group %s (%s) has member %s with invalid configuration: %s", g.getName(), g.getGroupUUID(), id, e.getMessage())); continue; } if (account == null) { problems.add(error("group %s (%s) has nonexistent member %s", g.getName(), g.getGroupUUID(), id)); } } return problems; }
java privatejava.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkGroup(com.google.gerrit.server.group.InternalGroup g,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) throwsjava.io.IOException {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>(); problems.addAll(checkCycle(g, byUUID)); if (((byUUID.get(g.getOwnerGroupUUID())) == null) && ((groupBackend.get(g.getOwnerGroupUUID())) == null)) { problems.add(error("Group %s (%s) has nonexistent owner account %s", g.getName(), g.getGroupUUID(), g.getOwnerGroupUUID())); } for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : g.getSubgroups()) { if (((byUUID.get(subUuid)) == null) && ((groupBackend.get(subUuid)) == null)) { problems.add(error("Group %s (%s) has nonexistent subgroup %s", g.getName(), g.getGroupUUID(), subUuid)); } } for (com.google.gerrit.reviewdb.client.Account.Id id : g.getMembers().asList()) { com.google.gerrit.reviewdb.client.Account account; try { account = accounts.get(id); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { problems.add(error("Group %s (%s) has member %s with invalid configuration: %s", g.getName(), g.getGroupUUID(), id, e.getMessage())); continue; } if (account == null) { problems.add(error("Group %s (%s) has nonexistent member %s", g.getName(), g.getGroupUUID(), id)); } } return problems; }
java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycle(com.google.gerrit.server.group.InternalGroup root,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> todo = newjava.util.LinkedHashSet<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> seen = newjava.util.HashSet<>(); todo.add(root); while (!(todo.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubgroups()) { com.google.gerrit.server.group.InternalGroup g = byUUID.get(subUuid); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(warning("group %s (%s) contains a cycle: %s (%s) points to it as subgroup.", root.getName(), root.getGroupUUID(), t.getName(), t.getGroupUUID())); } todo.add(g); } } return problems; }
java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycle(com.google.gerrit.server.group.InternalGroup root,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> todo = newjava.util.LinkedHashSet<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> seen = newjava.util.HashSet<>(); todo.add(root); while (!(todo.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubgroups()) { com.google.gerrit.server.group.InternalGroup g = byUUID.get(subUuid); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(warning("group %s (%s) contains a cycle: %s (%s) points to it as subgroup.", root.getName(), root.getGroupUUID(), t.getName(), t.getGroupUUID())); } todo.add(g); } } return problems; }
java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycle(com.google.gerrit.server.group.InternalGroup root,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> todo = newjava.util.LinkedHashSet<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> seen = newjava.util.HashSet<>(); todo.add(root); while (!(todo.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubgroups()) { com.google.gerrit.server.group.InternalGroup g = byUUID.get(subUuid); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(warning("Group %s (%s) contains a cycle: %s (%s) points to it as subgroup.", root.getName(), root.getGroupUUID(), t.getName(), t.getGroupUUID())); } todo.add(g); } } return problems; }
java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycle(com.google.gerrit.server.group.InternalGroup root,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> todo = newjava.util.LinkedHashSet<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> seen = newjava.util.HashSet<>(); todo.add(root); while (!(todo.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubgroups()) { com.google.gerrit.server.group.InternalGroup g = byUUID.get(subUuid); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(warning("group \"%s\" (%s) contains a cycle: %s (%s) points to it as subgroup \"%s\"", root.getName(), root.getGroupUUID(), t.getName(), t.getGroupUUID())); } todo.add(g); } } return problems; }
java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> checkCycle(com.google.gerrit.server.group.InternalGroup root,java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.server.group.InternalGroup> byUUID) {java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = newjava.util.ArrayList<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> todo = newjava.util.LinkedHashSet<>();java.util.Set<com.google.gerrit.server.group.InternalGroup> seen = newjava.util.HashSet<>(); todo.add(root); while (!(todo.isEmpty())) { com.google.gerrit.server.group.InternalGroup t = todo.iterator().next(); todo.remove(t); if (seen.contains(t)) { continue; } seen.add(t); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subUuid : t.getSubgroups()) { com.google.gerrit.server.group.InternalGroup g = byUUID.get(subUuid); if (g == null) { continue; } if (java.util.Objects.equals(g, root)) { problems.add(warning("group %s (%s) contains a cycle: %s (%s) points to it as subgroup. %s (%s) points to it as subgroup.", root.getName(), root.getGroupUUID(), t.getName(), t.getGroupUUID())); } todo.add(g); } } return problems; }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource) { return resource.getTagInfo(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi. project.TagResource resource) { return resource.getTagInfo(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.projects.TagResource resource) { return resource.getTagInfo(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.api.project.TagResource resource) { return resource.getTagInfo(); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.TagInfo apply(com.google.gerrit.server.restapi.project.TagResource resource) { return resource.getTagInfo(); } }
com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.server.CurrentUser user, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException {java.lang.String ref = com.google.gerrit.server.restapi.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.restapi.project.DashboardResource(current, user, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }
com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.server.CurrentUser user, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException {java.lang.String ref = com.google.gerrit.server.restapi.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.project.DashboardResource(current, user, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }
com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.server.CurrentUser user, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException {java.lang.String ref = com.google.gerrit.server.restapi.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.restapi.project.DashboardResource(current, user, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFound e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }
com.google.gerrit.server.api.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.server.CurrentUser user, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException {java.lang.String ref = com.google.gerrit.server.restapi.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.restapi.project.DashboardResource(current, user, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } }
com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState parent, com.google.gerrit.server.project.ProjectState current, com.google.gerrit.server.CurrentUser user, com.google.gerrit.extensions.api.projects.DashboardInfo info) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException {java.lang.String ref = com.google.gerrit.server.restapi.project.DashboardsCollection.normalizeDashboardRef(info.ref); try { permissionBackend.user(user).project(parent.getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(parent.getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + (info.path))); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info.id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.restapi.project.DashboardResource(current, user, ref, info.path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(info); } }
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.restapi.project.CommitResource r);
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.api.project.CommitResource r);
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.api.projects.CommitResource r);
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.project.CommitResource r);
com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.restapi.project.CommitResource r);
@org.junit.Test public void idInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid username of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void idInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid owner of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void idInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid group name of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void idInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void idInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("The owner of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account-users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ group"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(("Invalid UUID of the account users-XYZ")); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("The name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeNull() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("name of the account users-XYZ groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42\nowners = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("The name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42\nowners = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(("Invalid UUID of the account users-XYZ")); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "Users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "Users 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToEmptyString() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); groupConfig.commit(createMetaDataUpdate()); }
@org.junit.Test public void idInConfigMustNotBeNegative() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = -5 = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid id of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void idInConfigMustNotBeNegative() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = -5 = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid group name of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void idInConfigMustNotBeNegative() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = -5 = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid username of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void idInConfigMustNotBeNegative() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = -5 = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid group of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void idInConfigMustNotBeNegative() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = -5 = owners"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void ownerUuidInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void ownerUuidInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, users = 42); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void ownerUuidInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "user = users = 42"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void ownerUuidInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "groups = users = 42"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void ownerUuidInConfigMustBeDefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42"); expectedException.expect(org.eclipse.jgit.errors.ConfigInvalidException.class); expectedException.expectMessage(("Invalid UUID of the account users-XYZ")); com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); }
@org.junit.Test public void nameInConfigMayBeUndefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, 42); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigMayBeUndefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "group 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigMayBeUndefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "Group 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigMayBeUndefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "42"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigMayBeUndefined() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "group_id = 42"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("The name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42\nowners = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Cannot update of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Name of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid name of the account users-"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void nameOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.commit(createMetaDataUpdate()); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.String fileContent) throwsjava.lang.Exception { testRepository.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message(("Uploaded account.config", fileContent).create(); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.String fileContent) throwsjava.lang.Exception { testRepository.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message(("Upload account.config", fileContent).create(); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.String fileContent) throwsjava.lang.Exception { testRepository.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message(com.google.gerrit.reviewdb.client.RefNames.configFile(fileContent)).create(); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.String fileContent) throwsjava.lang.Exception { testRepository.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message(com.google.gerrit.reviewdb.client.RefNames.refsConfig(fileContent)).create(); }
private void populateGroupConfig(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid,java.lang.String fileContent) throwsjava.lang.Exception { testRepository.branch(com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid)).commit().message(com.google.gerrit.reviewdb.client.RefNames.accountConfig(fileContent)).create(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Group update not allowed"); } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("group update not allowed"); } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("update not allowed"); } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Ref update not allowed"); } returnjava.util.Collections.emptyList(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { returnjava.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { returnjava.util.Collections.emptyList(); } if (com.google.gerrit.reviewdb.client.RefNames.isGroupRef(receiveEvent.command.getRefName())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("Update not allowed"); } returnjava.util.Collections.emptyList(); }
private static com.google.gerrit.server.restapi.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId,java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.common.hash.HashCode message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry(filename, patchSetId, line, side, message, range); }
private static com.google.gerrit.server.api.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId,java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.common.hash.HashCode message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry(filename, patchSetId, line, side, message, range); }
public static com.google.gerrit.server.restapi.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId,java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.common.hash.HashCode message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry(filename, patchSetId, line, side, message, range); }
private static com.google.gerrit.server.restapi.change.CommentSetEntry create(java.lang.String filename, int patchSetId,java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.common.hash.HashCode message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry(filename, patchSetId, line, side, message, range); }
private static com.google.gerrit.server.restapi.change.PostReview.CommentSetEntry create(java.lang.String filename, int patchSetId,java.lang.Integer line, com.google.gerrit.extensions.client.Side side, com.google.common.hash.HashCode message, com.google.gerrit.reviewdb.client.Comment.Range range) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry(filename, patchSetId, line, side, message, null, range); }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete accounts from account event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete accounts from group member event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete accounts from group membership event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete accounts from account", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete groups from account event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Unable to log delete groups from account event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log delete groups from account event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete groups event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add accounts to account event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add accounts to group member event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add accounts to group event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add accounts to group membership event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add accounts to account", e); } } }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getTopic()); }
@java @java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getTopic()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.api.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getTopic()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.change().getTopic()); }
@java @java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) { return com.google.common.base.Strings.nullToEmpty(rsrc.getChange().getSubject()); }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = newjava.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (ref == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (("group " + groupName) + " not in ") + (GroupList.FILE_NAME)))); } rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, value); } pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = newjava.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (ref == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (("GroupName \"" + groupName) + "\" not in ") + (GroupList.FILE_NAME)))); } rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, value); } pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = newjava.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (ref == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (("group \"" + groupName) + "\" not in ") + (GroupList.FILE_NAME)))); } rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, value); } pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = newjava.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (ref == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (("GroupName " + groupName) + " not in ") + (GroupList.FILE_NAME)))); } rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, value); } pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPluginSections(org.eclipse.jgit.lib.Config rc) { pluginConfigs = newjava.util.HashMap(); for (java.lang.String plugin : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)) { org.eclipse.jgit.lib.Config pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(plugin, pluginConfig); for (java.lang.String name : rc.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = rc.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if (ref == null) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (("Group " + groupName) + " not in ") + (GroupList.FILE_NAME)))); } rc.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, value); } pluginConfig.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String varName,java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ": ") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((("Group \"" + (ref.getName())) + "\" not in ") + (GroupList.FILE_NAME)))); } rule.setGroup(ref); perm.add(rule); } }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String varName,java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ": ") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((("Group \"" + (ref.getName())) + "\" not in ") + (GroupList.FILE_NAME)))); } rule.setGroup(ref); perm.add(rule); } }
void loadPermissionRules(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String varName,java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ": ") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((("Group \"" + (ref.getName())) + "\" not in ") + (GroupList.FILE_NAME)))); } rule.setGroup(ref); perm.add(rule); } }
void loadPermissionRules(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String varName,java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ": ") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((("Group \"" + (ref.getName())) + "\" not in ") + (GroupList.FILE_NAME)))); } rule.setGroup(ref); perm.add(rule); } }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String varName,java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection!= null? "." + subsection : "")) + ".") + varName) + ": ") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((("Group " + (ref.getName())) + " not in ") + (GroupList.FILE_NAME)))); } rule.setGroup(ref); perm.add(rule); } }
void savePluginSections(org.eclipse.jgit.lib.Config rc,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) {java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) {java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ("group \"" + (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
void savePluginSections(org.eclipse.jgit.lib.Config rc,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) {java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) {java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ("Group \"" + (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
void savePluginSections(org.eclipse.jgit.lib.Config rc,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) {java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) {java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ("group " + (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
void savePluginSections(org.eclipse.jgit.lib.Config rc,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) {java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) {java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ("GroupName: " + (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
private void savePluginSections(org.eclipse.jgit.lib.Config rc,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) {java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) {java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) {java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name);java.lang.String groupName = com.google.gerrit.common.data.GroupReference.extractGroupName(value); if (groupName!= null) { com.google.gerrit.common.data.GroupReference ref = groupsByName.get(groupName); if ((ref!= null) && ((ref.getUUID())!= null)) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ("group \"" + (ref.getName()))); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name,java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.MemberResource resource, com.google.gerrit.server.restapi. group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.MemberResource resource, com.google.gerrit.server.restapi. group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), "group %s not found", uuid.get()); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), "Group %s not found", uuid.get()); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), "uuid %s not found", uuid.get()); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return checkNotNull(uuids.get(uuid), "group %s not found", uuid); }
public com.google.gerrit.common.data.GroupReference getGroup(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws com.google.gwtorm.server.OrmException { return checkNotNull(uuids.get(uuid), "group %s not found"); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throwsjava.io.IOException {java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors);java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = newjava.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("missing field in account list for {}: {}", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left);java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throwsjava.io.IOException {java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors);java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = newjava.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("missing field in account list for {}: ", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left);java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throwsjava.io.IOException {java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors);java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = newjava.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left);java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throwsjava.io.IOException {java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors);java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = newjava.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("missing field in account list for {}", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left);java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
public static com.google.gerrit.server.git.GroupList parse(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String text, com.google.gerrit.server.git.ValidationError.Sink errors) throwsjava.io.IOException {java.util.List<com.google.gerrit.server.git.Row> rows = com.google.gerrit.server.git.GroupList.parse(text, com.google.gerrit.server.git.GroupList.FILE_NAME, com.google.gerrit.server.git.TRIM, com.google.gerrit.server.git.TRIM, errors);java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.common.data.GroupReference> groupsByUUID = newjava.util.HashMap(rows.size()); for (com.google.gerrit.server.git.Row row : rows) { if ((row.left) == null) { com.google.gerrit.server.git.GroupList.log.warn("missing field in account list for {}:\n{}", project, text); continue; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(row.left);java.lang.String name = row.right; com.google.gerrit.common.data.GroupReference ref = new com.google.gerrit.common.data.GroupReference(uuid, name); groupsByUUID.put(uuid, ref); } return new com.google.gerrit.server.git.GroupList(groupsByUUID); }
private staticjava.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { returnjava.lang.String.format(("The configured name '%s' for system account '%s' is ambiguous" + " with the name '%s' of existing account '%s'." + " Please remove/change the value for groups.%s.name in " + gerrit.config. groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }
private staticjava.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { returnjava.lang.String.format(("The configured name '%s' for system account '%s' is ambiguous" + " with the name '%s' of existing account '%s'. " + " Please remove/change the value for groups.%s.name in " + gerrit.config. groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }
private staticjava.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { returnjava.lang.String.format(("Group configured name '%s' for system account '%s' is ambiguous" + " with the name '%s' of existing account '%s'." + " Please remove/change the value for groups.%s.name in " + gerrit.config. groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }
private staticjava.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { returnjava.lang.String.format(("The configured name '%s' for system account '%s' is ambiguous" + "with the name '%s' of existing account '%s'." + " Please remove/change the value for groups.%s.name in " + gerrit.config. groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }
private staticjava.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { returnjava.lang.String.format(("The configured name '%s' for system account '%s' is ambiguous" + " with the name '%s' of existing account '%s'." + " Please remove/change the value for groups.%s.name in ") + gerrit.config. groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return com.google.common.base.Strings.nullToEmpty(group.getDescription()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup(); return com.google.common.base.Strings.nullToEmpty(group.getDescription()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.api.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return com.google.common.base.Strings.nullToEmpty(group.getDescription()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); return com.google.common.base.Strings.nullToEmpty(group.getName()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { return resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.restapi.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { if (accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName())) { return com.google.gerrit.extensions.restapi.Response.created(""); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.api.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { if (accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName())) { return com.google.gerrit.extensions.restapi.Response.created(""); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { if (accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName())) { return com.google.gerrit.extensions.restapi.Response.created(""); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.restapi.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.ok(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.restapi.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { if (accountPatchReviewStore.get().markReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName())) { return com.google.gerrit.extensions.restapi.Response.created(""); } return com.google.gerrit.extensions.restapi.Response.error(""); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.api.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { accountReviewStore.get().clearReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.change.FileResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gwtorm.server.OrmException { accountPatchReviewStore.get().clearReviewed(resource.getPatchKey().getParentKey(), resource.getAccountId(), resource.getPatchKey().getFileName()); return com.google.gerrit.extensions.restapi.Response.empty(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException,java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Group Not Allowed: %s", groupUuid.get())); }java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUuid); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getId(), group.get().getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException,java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Internal Group Not Allowed: %s", groupUuid.get())); }java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUuid); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getId(), group.get().getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server. restapi. group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException,java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Group Not Allowed: %s", groupUuid.get())); }java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUuid); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getId(), group.get().getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server. restapi. group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException,java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Internal Group Not Allowed: %s", groupUuid.get())); }java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUuid); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getId(), group.get().getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException,java.io.IOException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to index account"); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = rsrc.getGroup().getGroupUUID(); if (!(rsrc.isInternalGroup())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format(("Group Not Allowed: %s", groupUuid.get())); }java.util.Optional<com.google.gerrit.server.group.InternalGroup> group = groupCache.get(groupUuid); if (group.isPresent()) { groupCache.evict(group.get().getGroupUUID(), group.get().getId(), group.get().getNameKey()); } return com.google.gerrit.extensions.restapi.Response.none(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected,java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage(("Invalid groups: " + g)).that(actual.remove(g)).isTrue(); } assertWithMessage(("Invalid groups: " + actual)).that(actual).isEmpty(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected,java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage(("Invalid groups: " + g)).that(actual.remove(g)).isTrue(); } assertWithMessage(("Empty groups: " + actual)).that(actual).isEmpty(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected,java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((("Invalid groups: " + g)).that(actual.remove(g)).isTrue()); } assertWithMessage((("Invalid groups: " + actual)).that(actual).isEmpty(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected,java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((("Invalid groups: " + g)).that(actual.remove(g)).isTrue()); } assertWithMessage(("Invalid groups: " + actual)).that(actual).isEmpty(); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected,java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertWithMessage((("Account \"" + g)).that(actual.remove(g)).isTrue()); } assertWithMessage(("No groups: " + actual)).that(actual).isEmpty(); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.project.ProjectResource(state, user.get())); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get())); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); return apply(new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get())); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(nameKey.get()); } return apply(state, user.get()); }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { return apply(new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get())); }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = groupJson.format(control.getGroup()); group.id = null; } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.GetAccess.LOG.warn(("Error ignoring account " + id), e); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = groupJson.format(control.getGroup()); group.id = null; } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.GetAccess.LOG.warn(("Ignoring ignoring account " + id), e); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.restapi.project.GetAccess.LOG.warn(("Error ignoring account " + id), e); group = null; } visibleGroups.put(id, group); } return group; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { group = groupJson.format(control.getGroup()); group.id = null; } return group; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.restapi.project.GetAccess.LOG.warn(("Error reading group " + id), e); group = null; } visibleGroups.put(id, group); } return group; }
privatejava.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }
publicjava.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }
privatejava.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = newjava.util.HashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }
privatejava.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } return tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); }
privatejava.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException {java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree; }
@java.lang.Override publicjava.util.List<?> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); }java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = newjava.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) {java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override publicjava.util.List<?> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); }java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = newjava.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) {java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override publicjava.util.List<?> apply(com.google.gerrit.server.api.projects.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); }java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = newjava.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) {java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override publicjava.util.List<?> apply(com.google.gerrit.server.restapi.projects.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); }java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = newjava.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) {java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override publicjava.util.List<?> apply(com.google.gerrit.server.restapi.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException {java.lang.String project = rsrc.getName(); if (!(inherited)) { return scan(rsrc.getProjectState(), project, true); }java.util.List<java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo>> all = newjava.util.ArrayList<>(); boolean setDefault = true; for (com.google.gerrit.server.project.ProjectState ps : tree(rsrc)) {java.util.List<com.google.gerrit.extensions.api.projects.DashboardInfo> list = scan(ps, project, setDefault); for (com.google.gerrit.extensions.api.projects.DashboardInfo d : list) { if (((d.isDefault)!= null) && (java.lang.Boolean.TRUE.equals(d.isDefault))) { setDefault = false; } } if (!(list.isEmpty())) { all.add(list); } } return all; }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("no account owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(owner.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } return json.format(owner); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not account owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(owner.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } return json.format(owner); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("no account owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(owner.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } return json.format(owner); }
java @java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not account owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(owner.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } } return json.format(owner); }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo apply(com.google.gerrit.server.restapi.group.GroupResource resource, com.google.gerrit.extensions.api.groups.OwnerInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("no account owner"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.owner))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group is required"); } com.google.gerrit.common.data.GroupDescription.Basic owner = groupsCollection.parse(input.owner); if (!(internalGroup.getOwnerGroupUUID().equals(owner.getGroupUUID()))) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(owner.getGroupUUID()).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account-users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(("Invalid UUID of the account users-XYZ")); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeEmpty() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID("")).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ group"); groupConfig.commit(metaDataUpdate); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error("Cannot sync create account permissions", e); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error("Cannot sync create account", e); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error("cannot sync create account permissions", e); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if (!(allProjects.get().equals(event.getChange().project))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error("Cannot sync create account permissions", e); } }
@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.lang.Exception e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error("Cannot sync create account permissions", e); } }
@org.junit.Test public void nameInConfigMayBeEmpty() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "group 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigMayBeEmpty() throwsjava.lang.Exception { populateGroupConfig(groupUuid, 42); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigMayBeEmpty() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "Group 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigMayBeEmpty() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "group_id = 42"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
@org.junit.Test public void nameInConfigMayBeEmpty() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "42"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); assertThat(groupConfig.getLoadedGroup().get().getName()).isEmpty(); }
public staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.restapi. project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.restapi.project.ProjectResource proj = new com.google.gerrit.server.restapi.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.restapi.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
private staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.restapi. project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.restapi.project.ProjectResource proj = new com.google.gerrit.server.restapi.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.restapi.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.restapi. project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.restapi.project.ProjectResource proj = new com.google.gerrit.server.restapi.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.restapi.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
public staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.restapi.project.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.restapi.project.ProjectResource proj = new com.google.gerrit.server.restapi.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.restapi.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
public staticjava.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates(com.google.gerrit.server.project.ProjectCache projectCache, com.google.inject.Provider<com.google.gerrit.server.query.change.ListChildProjects> listChildProjects, com.google.inject.Provider<com.google.gerrit.server.CurrentUser> self,java.lang.String value) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(value)); if (projectState == null) { returnjava.util.Collections.emptyList(); }java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> r = newjava.util.ArrayList<>(); r.add(new com.google.gerrit.server.query.change.ProjectPredicate(projectState.getName())); try { com.google.gerrit.server.restapi.project.ProjectResource proj = new com.google.gerrit.server.restapi.project.ProjectResource(projectState, self.get()); com.google.gerrit.server.restapi.project.ListChildProjects children = listChildProjects.get(); children.setRecursive(true); for (com.google.gerrit.extensions.common.ProjectInfo p : children.apply(proj)) { r.add(new com.google.gerrit.server.query.change.ProjectPredicate(p.name)); } } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.query.change.ParentProjectPredicate.log.warn("Cannot check permissions to expand child projects", e); } return r; }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.api.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc.getControl); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl, rsrc); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.restapi.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.extensions.common.GroupInfo(rsrc.getGroup()); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "group and groupControl do not match"); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "groupControl and groupControl do not match"); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "group of account and groupControl do not match"); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "groups of account and groupControl do not match"); }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "groupControl do not match"); }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.change.FileResource, com.google.gerrit.extensions.common.Input> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed flag", e); } }
@java @java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.change.FileResource, com.google.gerrit.extensions.common.Input> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed flag", e); } }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.change.FileResource, com.google.gerrit.extensions.common.Input> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed flag", e); } }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.change.FileResource, com.google.gerrit.extensions.common.Input> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("cannot update reviewed flag", e); } }
@java.lang.Override public void setReviewed(java.lang.String path, boolean reviewed) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.restapi.FileResource, com.google.gerrit.extensions.common.Input> view; if (reviewed) { view = putReviewed; } else { view = deleteReviewed; } view.apply(files.parse(revision, com.google.gerrit.extensions.restapi.IdString.fromDecoded(path)), new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot update reviewed flag", e); } }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Project.CommitResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.CommitResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.CommitResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Project.NameKey, com.google.gerrit.server.project.CommitResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.restapi.project.CommitResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.restapi.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@com.google.gerrit.server.restapi.project.CommitResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.restapi.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.restapi.project.CommitResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.restapi.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.restapi.project.CommitResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.restapi.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.server.restapi.project.CommitResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.restapi.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e); } }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try {java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.project.CommitsCollection.log.error(((("Cannot look up change for commit " + (commit.name())) + " in ") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try {java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.project.CommitsCollection.log.error(((("Cannot look up change for commit " + (commit.name())) + " in " + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try {java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.Project.CommitsCollection.log.error(((("Cannot look up change for commit " + (commit.name())) + " in ") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try {java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.project.CommitsCollection.log.error((((("Cannot look up change for commit " + (commit.name())) + " in ") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }
public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { return isReachableFrom(state, repo, commit, repo.getAllRefs()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource> list() { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource>> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException;
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list(); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Project.BranchResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.BranchResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.BranchResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Project.NameKey>> views() { return views; }
@java.lang.Override public com.google.gerrit.server.restapi.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser();java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getAccountId(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.DraftCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.changes.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser();java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getAccountId(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.changes.DraftCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser();java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getAccountId(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return c; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser(); com.google.gerrit.reviewdb.client.Comment c = commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getAccountId(), rev.getNotes()); if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.DraftCommentResource(rev, c); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.restapi.change.DraftCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { checkIdentifiedUser();java.lang.String uuid = id.get(); for (com.google.gerrit.reviewdb.client.Comment c : commentsUtil.draftByPatchSetAuthor(dbProvider.get(), rev.getPatchSet().getId(), rev.getAccountId(), rev.getNotes())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.restapi.change.DraftCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(uuid); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource> list() { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.ProjectResource> list() { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() { return list.get(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.projects.ProjectResource> list() { return list.get(); }
@java.lang.Override public project.ProjectResource list() { return list.get(); }
@java.lang.Override public com.google.gerrit.server.restapi.project.CreateBranch create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) { return createBranchFactory.create(name.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.CreateBranch create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) { return createBranchFactory.create(name); }
@java.lang.Override public com.google.gerrit.server.api.project.CreateBranch create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) { return createBranchFactory.create(name.get()); }
@java.lang.Override public com.google.gerrit.server.restapi.project.CreateBranch create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) { return createBranchFactory.create(name.get()).get(); }
@java.lang.Override public com.google.gerrit.server.restapi.project.CreateBranch create(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString name) throws com.google.gwtorm.server.OrmException { return createBranchFactory.create(name); }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.ProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.api.project.ProjectResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource>> views() { return views(); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.restapi.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.api.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.api.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.api.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { try { permissionBackend.user(user).project(nameKey).check(ProjectPermission.ACCESS); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.restapi.project.ProjectResource(state, user.get()); }
public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Resource Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Project Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Resource Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("project Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id, checkAccess); return rsrc; }
public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.api.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, false); }
public com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, true); }
private com.google.gerrit.server.restapi.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, true); }
@java.lang.Override public com.google.gerrit.server.restapi.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.api.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.restapi.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.restapi.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id.get(), true); return rsrc; }
@java.lang.Override public com.google.gerrit.server.restapi.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.DeleteDraftComment.Op op = new com.google.gerrit.server.restapi.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.changes.DraftCommentResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.DeleteDraftComment.Op op = new com.google.gerrit.server.restapi.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server. restapi.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.DeleteDraftComment.Op op = new com.google.gerrit.server.restapi.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.change.DeleteDraftComment.Op op = new com.google.gerrit.server.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommentInfo> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.DraftCommentResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getChange().getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.server.restapi.change.DeleteDraftComment.Op op = new com.google.gerrit.server.restapi.change.DeleteDraftComment.Op(rsrc.getComment().key); bu.addOp(rsrc.getChange().getId(), op); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.empty(); }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return com.google.common.collect.Iterables.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((("Invalid account UUID " + groupUuid)); } }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return com.google.common.collect.Iterables.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Invalid account UUID " + groupUuid)); } }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return com.google.common.collect.Iterables.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((("Invalid account UUID: " + groupUuid)); } }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return com.google.common.collect.Iterables.getOnlyElement(accountGroups); } else if (accountGroups.isEmpty()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException(("Invalid account UUID: " + groupUuid)); } }
private static com.google.gerrit.reviewdb.client.AccountGroup getExistingGroup(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return accountGroups; } else if (accountGroups.isEmpty()) { throw new com.google.gerrit.common.errors.NoSuchGroupException(groupUuid); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((("Invalid account UUID " + groupUuid)); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(("Invalid UUID of the account users-XYZ")); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "Users = 42 = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "users = 42\nowners = owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void ownerUuidCannotBeUpdatedToNull() throwsjava.lang.Exception { populateGroupConfig(groupUuid, "42 users = 42 owners"); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, groupUuid); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid UUID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@java.lang.Override public com.google.gerrit.server.api.project.BranchResource parse(com.google.gerrit.server.api.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.api.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.restapi.project.BranchResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.restapi.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.api.project.BranchResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.api.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.api.project.BranchResource parse(com.google.gerrit.server.api.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.restapi.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.api.project.BranchResource parse(com.google.gerrit.server.api.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.api.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.DraftCommentResource>> views() { return views; }
@java @java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.DraftCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.Change.DraftCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.DraftCommentResource>> views() { return views; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi. change.DraftCommentResource>> views() { return views; }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.api.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup(); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.restapi.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); };
public com.google.gerrit.server.restapi.project.ProjectResource getParent() { return parent; }
public com.google.gerrit.server.api.project.ProjectResource getParent() { return parent; }
public com.google.gerrit.server.project.ProjectResource getParent() { return parent; }
public com.google.gerrit.server.restapi.projects.ProjectResource getParent() { return parent; }
public com.google.gerrit.server.restapi.project.ProjectResource getParent();
@org.junit.Test public void idOfNewGroupMustNotBeNegative() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid id of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void idOfNewGroupMustNotBeNegative() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid ID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void idOfNewGroupMustNotBeNegative() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid group id of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void idOfNewGroupMustNotBeNegative() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid group ID of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@org.junit.Test public void idOfNewGroupMustNotBeNegative() throwsjava.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setId(new com.google.gerrit.reviewdb.client.AccountGroup.Id((-2))).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Invalid group of the account users-XYZ"); groupConfig.commit(metaDataUpdate); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("group wasn't automatically loaded")); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Group wasn't automatically loaded")); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("The account wasn't automatically loaded")); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Account wasn't automatically loaded")); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("group wasn\'t automatically loaded")); } }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddSubgroups.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("cannot delete groups from account %s", internalGroup.getName())); }java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupsToRemove = newjava.util.HashSet<>(); for (java.lang.String subgroupIdentifier : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic subgroup = groupsCollection.parse(subgroupIdentifier); subgroupsToRemove.add(subgroup.getGroupUUID()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeSubgroups(groupUuid, subgroupsToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddSubgroups.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("Cannot delete groups from account %s", internalGroup.getName())); }java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupsToRemove = newjava.util.HashSet<>(); for (java.lang.String subgroupIdentifier : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic subgroup = groupsCollection.parse(subgroupIdentifier); subgroupsToRemove.add(subgroup.getGroupUUID()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeSubgroups(groupUuid, subgroupsToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddSubgroups.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("can't delete groups from account %s", internalGroup.getName())); }java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupsToRemove = newjava.util.HashSet<>(); for (java.lang.String subgroupIdentifier : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic subgroup = groupsCollection.parse(subgroupIdentifier); subgroupsToRemove.add(subgroup.getGroupUUID()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeSubgroups(groupUuid, subgroupsToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddSubgroups.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("cannot delete groups from account %s", internalGroup.getName())); }java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupsToRemove = newjava.util.HashSet<>(); for (java.lang.String subgroupIdentifier : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic subgroup = groupsCollection.parse(subgroupIdentifier); subgroupsToRemove.add(subgroup.getGroupUUID()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeSubgroups(groupUuid, subgroupsToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.Response.none(); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.GroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = resource.asInternalGroup().orElseThrow(MethodNotAllowedException::new); input = com.google.gerrit.server.restapi.group.AddSubgroups.Input.init(input); final com.google.gerrit.server.account.GroupControl control = resource.getControl(); if (!(control.canRemoveGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("cannot delete groups from account %s", internalGroup.getName())); }java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupsToRemove = newjava.util.HashSet<>(); for (java.lang.String subgroupIdentifier : input.groups) { com.google.gerrit.common.data.GroupDescription.Basic subgroup = groupsCollection.parse(subgroupIdentifier); subgroupsToRemove.add(subgroup.getGroupUUID()); } com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = internalGroup.getGroupUUID(); try { removeSubgroups(groupUuid, subgroupsToRemove); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } return com.google.gerrit.extensions.restapi.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.SubgroupResource resource, com.google.gerrit.server.restapi. group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.SubgroupResource resource, com.google.gerrit.server.restapi. group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.SubgroupResource resource, com.google.gerrit.server.restapi.group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi. group.SubgroupResource resource, com.google.gerrit.server. restapi. group.AddSubgroups.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddSubgroups.Input in = new com.google.gerrit.server.restapi.group.AddSubgroups.Input(); in.groups = com.google.common.collect.ImmutableList.of(resource.getMember().get()); return delete.get().apply(resource, in); }
com.google.gerrit.server.restapi.project.DeleteRef create(com.google.gerrit.server.restapi.project.ProjectResource r);
com.google.gerrit.server.restapi.project.DeleteRef create(com.google.gerrit.server.restapi.project.ProjectResource r);
com.gerrit.server.restapi.project.DeleteRef create(com.google.gerrit.server.restapi.project.ProjectResource r);
com.google.gerrit.server.api.project.DeleteRef create(com.google.gerrit.server.restapi.project.ProjectResource r);

private void postDeletion(com.google.gerrit.server.restapi.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
private void postDeletion(com.google.gerrit.server.restapi.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { projectUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
private void postDeletion(com.google.gerrit.server.api.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
private void postDeletion(com.google.gerrit.server.restapi.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gwtorm.server.OrmException { referenceUpdated.fire(project.getNameKey(), cmd); }
private void postDeletion(com.google.gerrit.server.restapi.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gwtorm.server.OrmException,java.io.IOException { referenceUpdated.fire(project.getNameKey(), cmd); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.api.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.READ_CONFIG); return apply(rsrc.getProjectState(), input); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.projects.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException,java.io.IOException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChangeResource().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.restapi.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), r.getReviewerUser().getAccount(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException,java.io.IOException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("can't delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChangeResource().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.restapi.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), r.getReviewerUser().getAccount(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException,java.io.IOException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((rsrc.getLabel())!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChangeResource().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.restapi.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), r.getReviewerUser().getAccount(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException,java.io.IOException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("can delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChangeResource().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.restapi.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), r.getReviewerUser().getAccount(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.restapi.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException,java.io.IOException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label)!= null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource())!= null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), change.getProject(), r.getChangeResource().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.restapi.change.DeleteVote.Op(projectCache.checkedGet(r.getChange().getProject()), r.getReviewerUser().getAccount(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.api.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java @java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { return recursiveChildProjects(rsrc.getNameKey()); }
java.lang.Override public void run() {java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException |java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((("Cannot rename account " + (oldName)) + " in ") + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = start(5,java.util.concurrent.TimeUnit.MINUTES); } }
java @java.lang.Override public void run() {java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException |java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((("Cannot rename account " + (oldName)) + " in ") + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = start(5,java.util.concurrent.TimeUnit.MINUTES); } }
java @java.lang.Override public void run() {java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException |java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename account " + (oldName)) + " in ") + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = start(5,java.util.concurrent.TimeUnit.MINUTES); } }
java.lang.Override public void run() {java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException |java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error(((("Cannot rename account " + (oldName)) + " in ") + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = start(5,java.util.concurrent.TimeUnit.MINUTES); } }
java @java.lang.Override public void run() {java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> names = (tryingAgain)? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { rename(md); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException |java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((("Cannot rename account " + (oldName)) + " in " + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = start(5,java.util.concurrent.TimeUnit.MINUTES); } }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Change account \"" + (oldName)) + "\" to \"" + (newName)) + "\"\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((("Could not commit rename of account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get())), e); try {java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((("Could not rename account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
void rename(com.google.gerrit.server.git.MetaDataUpdate md) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Rename account \"" + (oldName)) + "\" to \"" + (newName)) + "\"\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((("Could not commit rename of account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get())), e); try {java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((("Could not rename account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Rename account \"" + (oldName)) + "\" to \"" + (newName)) + "\"\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((("Could not commit rename of account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get())), e); try {java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((("Could not rename account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Change account \"" + (oldName)) + "\" to \"" + (newName)) + "\"\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((("Could not commit rename of account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get())), e); try {java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((("Could not rename account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
void rename(com.google.gerrit.server.git.MetaDataUpdate md) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage((((("Rename account \"" + (oldName)) + "\" to \"" + (newName)) + "\"\n")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((("Could not commit rename of account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get())), e); try {java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn(((((("Could not rename account \"" + (oldName)) + "\" to \"" + (newName)) + "\" in ") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.restapi. project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.Project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.restapi.project.SetDefaultDashboard set = setDefault.get(); set.inherited = inherited; return set.apply(com.google.gerrit.server. restapi.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.api.projects.DashboardInfo> apply(com.google.gerrit.server.restapi.project.ProjectResource resource, com.google.gerrit.extensions.common.SetDashboardInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return set.apply(com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(resource.getProjectState(), resource.getUser()), input); }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group,java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("group with name " + newName) + " already exists")); } }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group,java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Group %s not found", groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("Group with name " + newName) + " already exists")); } }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group,java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("group with name " + newName) + " already exists")); } }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group,java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); try { groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("group %s not found", groupUuid)); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("group with name " + newName) + " already exists"); } }
private void renameGroup(com.google.gerrit.common.data.GroupDescription.Internal group,java.lang.String newName) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = group.getGroupUUID(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setName(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(newName)).build(); groupsUpdateProvider.get().updateGroup(db.get(), groupUuid, groupUpdate); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includes.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludeInInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includeIn.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.restapi.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not account owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); }java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } if (internalGroup.getName().equals(newName)) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("invalid account owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); }java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } if (internalGroup.getName().equals(newName)) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not account owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); }java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } if (internalGroup.getName().equals(newName)) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("no account owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); }java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } if (internalGroup.getName().equals(newName)) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource rsrc, NameInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.GroupDescription.Internal internalGroup = rsrc.asInternalGroup().orElseThrow(MethodNotAllowedException::new); if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("non-admin account is required"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); }java.lang.String newName = input.name.trim(); if (newName.isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } if (internalGroup.getName().equals(newName)) { return newName; } renameGroup(internalGroup, newName); return newName; }
@java.lang.Overridejava.lang.String groupPattern() { return "(&(objectClass=account)(cn=${groupname}))" ; }
@java.lang.Overridejava.lang.String groupPattern() { return "(&(objectClass=account)(cn=${groupname}))"; }
@java.lang.Overridejava.lang.String groupPattern() { return "(&(objectClass=account)(cn=${groupname}))"; }
@java.lang.Overridejava.lang.String groupPattern() { return "(&(objectClass=account)(cn=${groupname}))" + "(&(cn=${groupname}))"; }
@java.lang.Overridejava.lang.String groupPattern() { return "cn=${groupname}"; }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi. change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, parent, false); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.restapi.change.FileResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String path = rsrc.getPatchKey().get(); com.google.gerrit.server.change.RevisionResource rev = rsrc.getRevision(); org.eclipse.jgit.lib.ObjectId revstr = org.eclipse.jgit.lib.ObjectId.fromString(rev.getPatchSet().getRevision().get()); return fileContentUtil.downloadContent(projectCache.checkedGet(rev.getProject()), revstr, path, rev.getParent()); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.name(groupName.get()), (( "group name '" + groupName) + "'")); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.name(groupName.get()), ((("Group name '" + groupName) + "'")); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.name(groupName.get()), ((("group name '" + groupName) + "'")); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.name(groupName.get()), ((("group name " + groupName) + "'")); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byName(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.name(groupName.get()), ((("GroupName \"" + groupName) + "'")); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) { return resource.getName(); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.api.group.GroupResource resource) { return resource.getName(); }
@java @java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) { return resource.getName(); }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi. group.GroupResource resource) { return resource.getName(); }
@java @java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.restapi.group.GroupResource resource) { return resource.getGroupName(); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), (( "group id '" + groupId) + "'")); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ((("group id '" + groupId) + "'")); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ("group id '" + groupId) + "'")); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), ((("group id " + groupId) + "'")); }
publicjava.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), com.google.gerrit.server.query.group.GroupPredicates.quote(("id '" + groupId) + "'")); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throwsjava.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange("Change 1", "a.txt", "content"); submit(change.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); approve(revert1.id()); revert1.current().submit(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert2.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (revert2.get()._number)) + ": Change could not be merged because the commit is empty. ") + "Project policy requires all commits to contain modifications to at least one file.")); revert2.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throwsjava.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange("Change 1", "a.txt", "content"); submit(change.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); approve(revert1.id()); revert1.current().submit(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert2.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (revert2.get()._number)) + ": Change could not be merged because the commit is empty. ") + "Project policy requires all commits to contain modifications to at least one file.")); revert2.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throwsjava.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange("Change 1", "a.txt", "content"); submit(change.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); approve(revert1.id()); revert1.current().submit(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert2.id()); revert2.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throwsjava.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange("Change 1", "a.txt", "content"); submit(change.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); approve(revert1.id()); revert1.current().submit(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert2.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (revert2.get()._number)) + ": Change could not be merged because the commit is empty." + "Project policy requires all commits to contain modifications to at least one file.")); revert2.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_NoFastForward() throwsjava.lang.Exception { assume().that(getSubmitType()).isNotEqualTo(SubmitType.FAST_FORWARD_ONLY); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange("Change 1", "a.txt", "content"); submit(change.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi revert1 = gApi.changes().id(change.getChangeId()).revert(); approve(revert1.id()); revert1.current().submit(); com.google.gerrit.extensions.api.changes.ChangeApi revert2 = gApi.changes().id(change.getChangeId()).revert(); approve(revert2.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (revert2.get()._number)) + ": Change could not be merged because the commit is empty. ") + "Project policy requires all commits to contain modifications to at least one file."); revert2.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (change.get()._number)) + ": Change could not be merged because the commit is empty. ") + "Project policy requires all commits to contain modifications to at least one file.")); change.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (change.get()._number)) + ": Change could not be merged because the commit is empty. ") + "Project policy requires all commits to contain modifications to at least one file."); change.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (change.get()._number)) + ": Change could not be merged because the commit is empty." + "Project policy requires all commits to contain modifications to at least one file.")); change.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; com.google.gerrit.extensions.api.changes.ChangeApi change = gApi.changes().create(ci); approve(change.id()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((("Change " + (change.get()._number)) + ": Change could not be merged because the commit is empty. ") + ("Project policy requires all commits to contain modifications to at least one file.")); change.current().submit(); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(rejectEmptyCommit = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitEmptyCommit_FastForward() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = new com.google.gerrit.extensions.common.ChangeInput(); ci.subject = "Empty change"; ci.project = project.get(); ci.branch = "master"; change.current().submit(); }
public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() {java.lang.String raw = configuredSubmitTypeRaw(); return raw!= null? com.google.gerrit.extensions.client.SubmitType.valueOf(raw) : null; }
private final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() {java.lang.String raw = configuredSubmitTypeRaw(); return raw!= null? com.google.gerrit.extensions.client.SubmitType.valueOf(raw) : null; }
public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() {java.lang.String raw = configuredSubmitTypeRaw(); return raw!= null? com.google.gerrit.extensions.client.SubmitType.valueOf(raw): null; }
public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() { return com.google.gerrit.extensions.client.SubmitType.valueOf(configuredSubmitTypeRaw()); }
public final com.google.gerrit.extensions.client.SubmitType configuredSubmitType() { return configuredSubmitTypeRaw(); }
private nativejava.lang.String configuredSubmitTypeRaw();
private nativejava.lang.String configuredSubmitType();
privatejava.lang.String configuredSubmitTypeRaw();
private staticjava.lang.String configuredSubmitTypeRaw();
private nativejava.lang.String configuredSubmitType(java.lang.String type);
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = -1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; break; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = -1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newSubmitType.name().equals(submitType.getValue(i))) { index = i; break; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = -1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = -1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newConfiguredSubmitType.name().equals(submitType.getValue(i))) { index = i; if (newConfiguredSubmitType == (com.google.gerrit.extensions.client.SubmitType.INHERIT)) { } } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
private void setSubmitType(com.google.gerrit.extensions.client.SubmitType newSubmitType, com.google.gerrit.extensions.client.SubmitType newConfiguredSubmitType) { int index = -1; if ((submitType)!= null) { for (int i = 0; i < (submitType.getItemCount()); i++) { if (newSubmitType.name().equals(submitType.getValue(i))) { index = i; if (newConfiguredSubmitType == (com.google.gerrit.extensions.client.SubmitType.INHERIT)) { } } } submitType.setSelectedIndex(index); setEnabledForUseContentMerge(); } }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(signedOffBy, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(requireSignedPush, result.requireSignedPush()); } setBool(rejectImplicitMerges, result.rejectImplicitMerges()); setBool(privateByDefault, result.privateByDefault()); setBool(enableReviewerByEmail, result.enableReviewerByEmail()); setBool(matchAuthorToCommitterDate, result.matchAuthorToCommitterDate()); setSubmitType(result.submitType()); setState(result.state()); maxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(AdminMessages.I.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().value())); effectiveMaxObjectSizeLimit.setTitle(AdminMessages.I.globalMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }
display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(signedOffBy, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(requireSignedPush, result.requireSignedPush()); } setBool(rejectImplicitMerges, result.rejectImplicitMerges()); setBool(privateByDefault, result.privateByDefault()); setBool(enableReviewerByEmail, result.enableReviewerByEmail()); setBool(matchAuthorToCommitterDate, result.matchAuthorToCommitterDate()); setSubmitType(result.submitType()); setState(result.state()); maxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(AdminMessages.I.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().value())); effectiveMaxObjectSizeLimit.setTitle(AdminMessages.I.globalMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(signedOffBy, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(requireSignedPush, result.requireSignedPush()); } setBool(rejectImplicitMerges, result.rejectImplicitMerges()); setBool(privateByDefault, result.privateByDefault()); setBool(enableReviewerByEmail, result.enableReviewerByEmail()); setBool(matchAuthorToCommitterDate, result.matchAuthorToCommitterDate()); setSubmitType(result.submitType()); setState(result.state()); maxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if (result.maxObjectSizeLimit().inheritedValue()) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(AdminMessages.I.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().value())); effectiveMaxObjectSizeLimit.setTitle(AdminMessages.I.globalMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }
void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(signedOffBy, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(requireSignedPush, result.requireSignedPush()); } setBool(rejectImplicitMerges, result.rejectImplicitMerges()); setBool(privateByDefault, result.privateByDefault()); setBool(enableReviewerByEmail, result.enableReviewerByEmail()); setBool(matchAuthorToCommitterDate, result.matchAuthorToCommitterDate()); setSubmitType(result.submitType()); setState(result.state()); setMaxSizeLimit(result.maxSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(AdminMessages.I.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().value())); effectiveMaxObjectSizeLimit.setTitle(AdminMessages.I.globalMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }
display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.useContributorAgreements()); setBool(signedOffBy, result.useSignedOffBy()); setBool(contentMerge, result.useContentMerge()); setBool(newChangeForAllNotInTarget, result.createNewChangeForAllNotInTarget()); setBool(requireChangeID, result.requireChangeId()); if (com.google.gerrit.client.Gerrit.info().receive().enableSignedPush()) { setBool(enableSignedPush, result.enableSignedPush()); setBool(requireSignedPush, result.requireSignedPush()); } setBool(rejectImplicitMerges, result.rejectImplicitMerges()); setBool(privateByDefault, result.privateByDefault()); setBool(enableReviewerByEmail, result.enableReviewerByEmail()); setBool(matchAuthorToCommitterDate, result.matchAuthorToCommitterDate()); setSubmitType(result.submitType()); setState(result.state()); maxObjectSizeLimit.setText(result.maxObjectSizeLimit().configuredValue()); if ((result.maxObjectSizeLimit().inheritedValue())!= null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(AdminMessages.I.effectiveMaxObjectSizeLimit(result.maxObjectSizeLimit().value())); effectiveMaxObjectSizeLimit.setTitle(AdminMessages.I.globalMaxObjectSizeLimit(result.maxObjectSizeLimit().inheritedValue())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); } }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user name to account %s; name does not conform."), username, accountId)); } return com.google.gerrit.server.account.externalids.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user name to account %s; name does not conform.", username, accountId)); } return com.google.gerrit.server.account.externalids.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("cannot assign user name to account %s; name does not conform."), username, accountId)); } return com.google.gerrit.server.account.externalids.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user name to account %s; name does not conform.", username, accountId)); } return com.google.gerrit.server.account.externalids.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
private com.google.gerrit.server.account.externalids.ExternalId createUsername(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String username) throws com.google.gerrit.server.account.AccountUserNameException { if (com.google.common.base.Strings.isNullOrEmpty(username)) { return null; } if (!(com.google.gerrit.server.account.PutUsername.isValidUsername(username))) { throw new com.google.gerrit.server.account.AccountUserNameException(java.lang.String.format("Cannot assign user name to account %s; name does not conform.\n", username, accountId)); } return com.google.gerrit.server.account.externalids.ExternalId.create(com.google.gerrit.server.account.SCHEME_USERNAME, username, accountId); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivateChanges", value = "true") public void createChangeWithDisablePrivateChangesTrue() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.enablePrivateChanges", value = "true") public void createChangeWithDisablePrivateChangesTrue() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivateChanges", value = "true") public void createChangeWithDisablePrivateChangesTrue() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.disablePrivateChanges = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Ignore @org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivateChanges", value = "true") public void createChangeWithDisablePrivateChangesTrue() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivateChanges", value = "true") public void createChangeWithDisablePrivateChangesTrue() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = false; exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test public void createChangeWithDisablePrivateChangesFalse() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }
@org.junit.Test public void createChangeWithDisablePrivateChangesFalse() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = false; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); }
@org.junit.Test public void createChangeWithDisablePrivateChangesFalse() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(false); }
@org.junit.Test public void createChangeWithDisablePrivateChangesFalse() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input)).get().isPrivate).isEqualTo(true); }
@org.junit.Test public void createChangeWithDisablePrivateChangesFalse() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change"); input.isPrivate = true; assertThat(gApi.changes().create(input).get().isPrivate).isEqualTo(true); assertThat(gApi.changes().create(input).get()).isPrivate(); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivateChanges", value = "true") public void createChangeWithPrivateByDefaultAndDisablePrivateChangesTrue() throwsjava.lang.Exception { setPrivateByDefault(project2, InheritableBoolean.TRUE); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.enablePrivateChanges", value = "true") public void createChangeWithPrivateByDefaultAndDisablePrivateChangesTrue() throwsjava.lang.Exception { setPrivateByDefault(project2, InheritableBoolean.TRUE); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivateChanges", value = "true") public void createChangeWithPrivateByDefaultAndDisablePrivateChangesTrue() throwsjava.lang.Exception { setPrivateByDefault(project2, true); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivateChanges", value = "true") public void createChangeWithPrivateByDefaultAndDisablePrivateChangesTrue() throwsjava.lang.Exception { setPrivateByDefault(project2, InheritableBoolean.TRUE); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); gApi.changes().create(null); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.disablePrivateChanges", value = "true") public void createChangeWithPrivateByDefaultAndDisablePrivateChangesTrue() throwsjava.lang.Exception { setPrivateByDefault(project2, InheritableBoolean.TRUE); com.google.gerrit.extensions.common.ChangeInput input = new com.google.gerrit.extensions.common.ChangeInput(project2.get(), "master", "empty change"); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("private changes are not supported"); gApi.changes().create(input); gApi.changes().create(input); }
@java.lang.Override publicjava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String pfx) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey((pfx + (java.lang.Character.MAX_VALUE))); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot look up projects for prefix " + pfx), e); returnjava.util.Collections.emptySortedSet(); } }
@java.lang.Override publicjava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String pfx) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey((pfx + (java.lang.Character.MAX_VALUE))); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn((("Cannot look up projects for prefix " + pfx), e); returnjava.util.Collections.emptySortedSet(); } }
@java.lang.Override publicjava.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String pfx) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey((pfx + (java.lang.Character.MAX_VALUE))); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot look up projects for prefix " + pfx), e); returnjava.util.Collections.emptySortedSet(); } }
publicjava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String pfx) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey((pfx + (java.lang.Character.MAX_VALUE))); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot look up projects for prefix " + pfx), e); returnjava.util.Collections.emptySortedSet(); } }
@java.lang.Override publicjava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String pfx) { com.google.gerrit.reviewdb.client.Project.NameKey start = new com.google.gerrit.reviewdb.client.Project.NameKey(pfx); com.google.gerrit.reviewdb.client.Project.NameKey end = new com.google.gerrit.reviewdb.client.Project.NameKey((pfx + (java.lang.Character.MAX_VALUE))); try { return list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).subSet(start, end); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(("Cannot look up projects for prefix " + pfx), e); returnjava.util.Collections.emptySortedSet (); } }
@java.lang.Override publicjava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { returnjava.util.Collections.emptySortedSet(); }
@java.lang.Override publicjava.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { returnjava.util.Collections.emptySortedSet(); }
@java.lang.Override publicjava.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { returnjava.util.Collections.emptySortedSet(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { returnjava.util.Collections.emptySortedSet(); }
@java.lang.Override publicjava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix) { return com.google.common.collect.ImmutableSortedSet.of(); }
javajava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all();
javajava.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> all();
javajavajava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all();
javajava.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> all();

@java.lang.Override publicjava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all() { returnjava.util.Collections.emptySortedSet(); }
@java.lang.Override publicjava.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> all() { returnjava.util.Collections.emptySortedSet(); }
@java.lang.Override publicjava.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> all() { returnjava.util.Collections.emptySortedSet(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> all() { returnjava.util.Collections.emptySortedSet(); }
@java.lang.Override publicjava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> all() { return com.google.common.collect.ImmutableSortedSet.of(); }
javajava.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix);
javajava.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix);
javajava.util.Collection<com.google.gerrit.reviewdb.client.Project.NameKey> byName(java.lang.String prefix);
javajava.lang.String byName(java.lang.String prefix);

publicjava.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.RegexListSearcher.checkNotNull(list); int begin; int end; if (prefixLen) { begin = find(list, prefixBegin); end = find(list, prefixEnd); } else { begin = 0; end = list.size(); } if (prefixOnly) { return (begin < end? list.subList(begin, end) : com.google.common.collect.ImmutableList.<T>of()).stream(); } return list.subList(begin, end).stream().filter(( x) -> pattern.run(toStringFunc.apply(x))); }
publicjava.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.RegexListSearcher.checkNotNull(list); int begin; int end; if ( < (prefixLen)) { begin = find(list, prefixBegin); end = find(list, prefixEnd); } else { begin = 0; end = list.size(); } if (prefixOnly) { return (begin < end? list.subList(begin, end) : com.google.common.collect.ImmutableList.<T>of()).stream(); } return list.subList(begin, end).stream().filter(( x) -> pattern.run(toStringFunc.apply(x))); }
publicjava.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.RegexListSearcher.checkNotNull(list); int begin; int end; if (prefixLen) { begin = find(list, prefixBegin); end = find(list, prefixEnd); } else { begin = 0; end = list.size(); } if (prefixOnly) { return (begin < end? list.subList(begin, end) : com.google.common.collect.ImmutableList.<T>of()).stream(); } return list.subList(begin, end).stream().filter(( x) -> pattern.run(toStringFunc.apply(x))); }
publicjava.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.RegexListSearcher.checkNotNull(list); int begin; int end; if ( < (prefixLen)) { begin = find(list, prefixBegin); end = find(list, prefixEnd); } else { begin = 0; end = list.size(); } if (prefixOnly) { return list.subList(begin, end).stream(); } return list.subList(begin, end).stream().filter(( x) -> pattern.run(toStringFunc.apply(x))); }
publicjava.util.stream.Stream<T> search(java.util.List<T> list) { com.google.gerrit.server.util.RegexListSearcher.checkNotNull(list); int begin; int end; if (prefixLen) { begin = find(list, prefixBegin); end = find(list, prefixEnd); } else { begin = 0; end = list.size(); } if (prefixOnly) { return list.subList(begin, end).stream(); } return list.subList(begin, end).stream().filter(( x) -> pattern.run(toStringFunc.apply(x))); }
public static com.google.gerrit.server.util.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.RegexListSearcher(re, ( in) -> in); }
public static com.google.gerrit.server.util.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.RegexListSearcher(re, ( in) -> in)); }
public static com.google.gerrit.server.util.RegexListSearcher<java.lang.String>> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.RegexListSearcher(re, ( in) -> in); }
public static com.google.gerrit.server.util.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.RegexListSearcher(re, (( in) -> in)); }
public static com.google.gerrit.server.util.RegexListSearcher<java.lang.String> ofStrings(java.lang.String re) { return new com.google.gerrit.server.util.RegexListSearcher(re, ( in) -> in.toLowerCase()); }
private int find(java.util.List<T> list,java.lang.String p) { int r =java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, toStringFunc()), p); return r < 0? -(r + 1) : r; }
private int find(java.util.List<T> list,java.lang.String p) { int r =java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, toStringFunc), p); return r < 0? -(r + 1) : r; }
int find(java.util.List<T> list,java.lang.String p) { int r =java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, toStringFunc()), p); return r < 0? -(r + 1) : r; }
int find(java.util.List<T> list,java.lang.String p) { int r =java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, toStringFunc), p); return r < 0? -(r + 1) : r; }
private int find(java.util.List<T> list,java.lang.String p) { int r =java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, toStringFunction()), p); return r < 0? -(r + 1) : r; }
org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null;java.util.List<com.google.gerrit.extensions.api.projects.CommentLinkInfo> commentLinks = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw newjava.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, allUsersName, null, envFactory, repoManager, rulesCache, commentLinks, capabilityCollectionFactory, pc)); return repo; }
private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null;java.util.List<com.google.gerrit.extensions.api.projects.CommentLinkInfo> commentLinks = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw newjava.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, allUsersName, null, envFactory, repoManager, rulesCache, commentLinks, capabilityCollectionFactory, pc)); return repo; }
org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null;java.util.List<com.google.gerrit.extensions.api.projects.CommentLinkInfo> commentLinks = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw newjava.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, allUsersName, envFactory, repoManager, rulesCache, commentLinks, capabilityCollectionFactory, pc)); return repo; }
private org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null;java.util.List<com.google.gerrit.extensions.api.projects.CommentLinkInfo> commentLinks = null; org.eclipse.jgit.internal.storage.dfs.InMemoryRepository repo; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw newjava.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, allUsersName, envFactory, repoManager, rulesCache, commentLinks, capabilityCollectionFactory, pc)); return repo; }
org.eclipse.jgit.internal.storage.dfs.InMemoryRepository add(com.google.gerrit.server.git.ProjectConfig pc) { com.google.gerrit.server.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null;java.util.List<com.google.gerrit.extensions.api.projects.CommentLinkInfo> commentLinks = null; try { repo = repoManager.createRepository(pc.getName()); if ((pc.getProject()) == null) { pc.load(repo); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw newjava.lang.RuntimeException(e); } all.put(pc.getName(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, allUsersName, null, envFactory, repoManager, rulesCache, commentLinks, capabilityCollectionFactory, pc)); return repo; }
public com.google.gerrit.server.account.AccountConfig setEagerLoading(boolean eagerLoading) { checkState(((loadedAccount) == null), "Account %s already loaded", accountId.get()); this.eagerLoading = eagerLoading; return this; }
public com.google.gerrit.server.account.AccountConfig setEagerLoading(boolean eagerLoading) { checkArgument(((loadedAccount) == null), "Account %s already loaded", accountId.get()); this.eagerLoading = eagerLoading; return this; }
public com.google.gerrit.server.account.AccountConfig setLazyLoading(boolean lazyLoading) { this.lazyLoading = lazyLoading; return this; }
public com.google.gerrit.server.account.AccountConfig setEagerLoading(boolean eagerLoading) { this.eagerLoading = eagerLoading; return this; }
public com.google.gerrit.server.account.AccountConfig setEagerLoading(boolean eagerLoading) { checkState(((loadedAccount) == null), "Account %s already loaded", accountId.get()); this.lazyLoading = eagerLoading; return this; }
privatejava.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullablejava.util.List<java.lang.String> messages) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.load(rw, commit); if (messages!= null) { messages.addAll(accountConfig.getValidationErrors().stream().map(ValidationError::getMessage).collect(java.util.stream.Collectors.toSet())); } return accountConfig.getLoadedAccount(); }
privatejava.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullablejava.util.List<java.lang.String> messages) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEagerLoading(true).load(rw, commit); if (messages!= null) { messages.addAll(accountConfig.getValidationErrors().stream().map(ValidationError::getMessage).collect(java.util.stream.Collectors.toSet())); } return accountConfig.getLoadedAccount(); }
privatejava.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullablejava.util.List<java.lang.String> messages) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEagerLoading(true). load(rw, commit); if (messages!= null) { messages.addAll(accountConfig.getValidationErrors().stream().map(ValidationError::getMessage).collect(java.util.stream.Collectors.toSet())); } return accountConfig.getLoadedAccount(); }
privatejava.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullablejava.util.List<java.lang.String> messages) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEagerLoading(true).load(rw, commit); if (messages!= null) { messages.addAll(accountConfig.getValidationErrors().stream().map(ValidationError::getMessage).collect(java.util.stream.Collectors.toSet())); } return accountConfig; }
privatejava.util.Optional<com.google.gerrit.reviewdb.client.Account> loadAccount(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId commit, @com.google.gerrit.common.Nullablejava.util.List<java.lang.String> messages) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.reset(); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId); accountConfig.setEagerLoading(true); accountConfig.load(rw, commit); if (messages!= null) { messages.addAll(accountConfig.getValidationErrors().stream().map(ValidationError::getMessage).collect(java.util.stream.Collectors.toSet())); } return accountConfig; }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(accountConfig, revision.name())); watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); if (eagerLoading) { watchConfig.parse(); } } else { loadedAccount =java.util.Optional.empty(); } }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(accountConfig, revision.name())); watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); watchConfig.parse(); } else { loadedAccount =java.util.Optional.empty(); } }
java @java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(accountConfig, revision.name())); watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); if (eagerLoading) { watchConfig.parse(); } } else { loadedAccount =java.util.Optional.empty(); } }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(accountConfig, revision.name())); watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); } else { loadedAccount =java.util.Optional.empty(); } }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((revision)!= null) { rw.reset(); rw.markStart(revision); rw.sort(RevSort.REVERSE); registeredOn = newjava.sql.Timestamp(((rw.next().getCommitTime()) * 1000L)); org.eclipse.jgit.lib.Config accountConfig = readConfig(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG); loadedAccount =java.util.Optional.of(parse(accountConfig, revision.name())); watchConfig = new com.google.gerrit.server.account.WatchConfig(accountId, readConfig(WatchConfig.WATCH_CONFIG), this); watchConfig.parse(); } else { loadedAccount =java.util.Optional.empty(); watchConfig = null; } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException {java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) {java.lang.String comment = soyTextTemplate(com.google.template.soy.SoyFileSet.builder(), template, properties); its.addComment(issue, comment); } else { com.googlesource.gerrit.plugins.its.base.workflow.action.AddSoyComment.log.error("No template name given in {}", actionRequest); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException {java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) {java.lang.String comment = soyTextTemplate(com.google.template.soy.SoyFileSet.builder(), template, properties); its.addComment(issue, comment); } else { com.googlesource.gerrit.plugins.its.base.workflow.action.AddSoyComment.log.error("Invalid template name given in {}", actionRequest); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException {java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) {java.lang.String comment = soyTextTemplate(com.google.template.soy.SoyFileSet.builder(template), template, properties); its.addComment(issue, comment); } else { com.googlesource.gerrit.plugins.its.base.workflow.action.AddSoyComment.log.error("No template name given in {}", actionRequest); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException {java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) {java.lang.String comment = soyTextTemplate(com.google.template.soy.SoyFileSet.builder(), template, properties); its.addComment(issue, comment); } else { com.googlesource.gerrit.plugins.its.base.workflow.action.AddSoyComment.log.error("missing template name given in {}", actionRequest); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException {java.lang.String template = actionRequest.getParameter(1); if (!(template.isEmpty())) {java.lang.String comment = soyTextTemplate(com.google.template.soy.SoyFileSet.builder(), template, properties); its.addComment(issue, comment); } else { com.googlesource.gerrit.plugins.its.base.workflow.action.AddSoyComment.log.error("No template name given in {}", actionRequest); } }
@java.lang.Override void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.debug(property.toString()); }
@java.lang.Override public void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.debug(property.toString()); }
@java.lang.Override void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.debug("Property " + property.toString()); }
@java.lang.Override void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.debug("Property " + property.getName()); }
@java.lang.Override void logProperty(com.googlesource.gerrit.plugins.its.base.workflow.Property property) { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.log.debug("Property " + property.get()); }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.parse(actionRequest.getParameter("level")); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { level.logProperty(property); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.parse(actionRequest.getParameter( 1)); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { level.logProperty(property); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.parse(actionRequest.getParameter("level")); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { level. logProperty(property); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.valueOf(actionRequest.getParameter("level")); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { level.logProperty(property); } }
@java.lang.Override public void execute(java.lang.String issue, com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest,java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level level = com.googlesource.gerrit.plugins.its.base.workflow.action.LogEvent.Level.parse(actionRequest.getParameter( 1)); for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { level. logProperty(property); } }
public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains("event not recognised and ignored"); }
public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains("Event not recognised and ignored"); }
public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains("event was not recognised and ignored"); }
public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains("event is not recognised and ignored"); }
public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains("Unknown event detected and ignored"); }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.google.gerrit.server.events.RefEvent) (event)); if (!(isEnabled(refEvent))) { return; }java.util.Set<java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property>> propertiesCollections = propertyExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : propertiesCollections) {java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest> actions = ruleBase.actionRequestsFor(properties); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if ("issue".equals(property.getKey())) {java.lang.String issue = property.getValue(); actionExecutor.execute(issue, actions, properties); } } } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.google.gerrit.server.events.RefEvent) (event)); if (!(config.isEnabled(refEvent))) { return; }java.util.Set<java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property>> propertiesCollections = propertyExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : propertiesCollections) {java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest> actions = ruleBase.actionRequestsFor(properties); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if ("issue".equals(property.getKey())) {java.lang.String issue = property.getValue(); actionExecutor.execute(issue, actions, properties); } } } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.google.gerrit.server.events.RefEvent) (event)); if (!(sConfig.isEnabled(refEvent))) { return; }java.util.Set<java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property>> propertiesCollections = propertyExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : propertiesCollections) {java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest> actions = ruleBase.actionRequestsFor(properties); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if ("issue".equals(property.getKey())) {java.lang.String issue = property.getValue(); actionExecutor.execute(issue, actions, properties); } } } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.google.gerrit.server.events.RefEvent) (event)); if (!(com.google.common.base.Function.isEnabled(refEvent))) { return; }java.util.Set<java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property>> propertiesCollections = propertyExtractor.extractFrom(refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : propertiesCollections) {java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest> actions = ruleBase.actionRequestsFor(properties); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if ("issue".equals(property.getKey())) {java.lang.String issue = property.getValue(); actionExecutor.execute(issue, actions, properties); } } } } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.RefEvent)) { return; } com.google.gerrit.server.events.RefEvent refEvent = ((com.google.gerrit.server.events.RefEvent) (event)); if (!(isEnabled(refEvent))) { return; }java.util.Set<java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property>> propertiesCollections = propertyExtractor.extractFrom( refEvent); for (java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties : propertiesCollections) {java.util.Collection<com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest> actions = ruleBase.actionRequestsFor(properties); if (!(actions.isEmpty())) { for (com.googlesource.gerrit.plugins.its.base.workflow.Property property : properties) { if ("issue".equals(property.getKey())) {java.lang.String issue = property.getValue(); actionExecutor.execute(issue, actions, properties); } } } } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Operation not permitted", denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication not permitted", denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Update not permitted", denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Project not permitted", denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication not permitted", denied); } }
boolean canAddPatchSet() { return projectControl.controlForRef(("refs/for/" + (refName))).canPerform(Permission.ADD_PATCH_SET); }
private boolean canAddPatchSet() { return projectControl.controlForRef(("refs/for/" + (refName))).canPerform(Permission.ADD_PATCH_SET); }
public boolean canAddPatchSet() { return projectControl.controlForRef(("refs/for/" + (refName))).canPerform(Permission.ADD_PATCH_SET); }
boolean canAddPatchSet() { return projectControl.controlForRef("refs/for/" + (refName))).canPerform(Permission.ADD_PATCH_SET); }
boolean canCreatePatchSet() { return projectControl.controlForRef(("refs/for/" + (refName))).canPerform(Permission.CREATE_PATCH_SET); }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Edit commit message not permitted", denied); } }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("edit commit message not permitted", denied); } }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("commit message not permitted", denied); } }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUserProvider.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Change commit message not permitted", denied); } }
private void ensureCanEditCommitMessage(com.google.gerrit.server.notedb.ChangeNotes changeNotes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try { permissionBackend.user(currentUserProvider.get()).database(db.get()).change(changeNotes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(changeNotes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("commit message not permitted", denied); } }
public void checkStatePermitsWrite() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permitsWrite())) { throw new com.google.gerrit.extensions.restapi.AuthException("project state does not permit write"); } }
public void checkStatePermitsWrite() throws com.google.gerrit.extensions.restapi.AuthException { if (getProject().getState().permitsWrite()) { throw new com.google.gerrit.extensions.restapi.AuthException("project state does not permit write"); } }
private void checkStatePermitsWrite() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permitsWrite())) { throw new com.google.gerrit.extensions.restapi.AuthException("project state does not permit write"); } }
public void checkStatePermitsWrite() throws com.google.gerrit.extensions.restapi.AuthException { if (!(getProject().getState().permitsWrite())) { throw new com.google.gerrit.extensions.restapi.AuthException("project state does not permits write"); } }
public void checkStatePermitsWrite() throws com.google.gerrit.extensions.restapi.AuthException { checkStatePermitsWrite(); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { input.onBehalfOf = com.google.common.base.Strings.emptyToNull(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); } projectCache.checkedGet(rsrc.getProject()).statePermitsWrite(); return new com.google.gerrit.server.restapi.change.Submit.Output(mergeChange(rsrc, submitter, input)); }
java @java.lang.Override public com.google.gerrit.server.restapi.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { input.onBehalfOf = com.google.common.base.Strings.emptyToNull(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); } projectCache.checkedGet(rsrc.getProject()).statePermitsWrite(); return new com.google.gerrit.server.restapi.change.Submit.Output(mergeChange(rsrc, submitter, input)); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { input.onBehalfOf = com.google.common.base.Strings.emptyToNull(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); } return new com.google.gerrit.server.restapi.change.Submit.Output(mergeChange(rsrc, submitter, input)); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { input.onBehalfOf = com.google.common.base.Strings.emptyToNull(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); } projectCache.checkedGet(rsrc.getProject()).statePermitsWrite(); return new com.google.gerrit.server.restapi.change.Submit.Output(mergeChange(rsrc, submitter, input)); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Submit.Output apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { input.onBehalfOf = com.google.common.base.Strings.emptyToNull(input.onBehalfOf); com.google.gerrit.server.IdentifiedUser submitter; if ((input.onBehalfOf)!= null) { submitter = onBehalfOf(rsrc, input); } else { rsrc.permissions().check(ChangePermission.SUBMIT); submitter = rsrc.getUser().asIdentifiedUser(); } projectCache.checkedGet(rsrc.getProject()).statePermitsWrite(); return new com.google.gerrit.server.restapi.change.Submit.Output(mergeChange(rsrc, submitter, input))); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME)); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME)).named("u can edit topic name"); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME)).named("can edit topic name"); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME)).named("A can edit topic name"); }
@org.junit.Test public void unblockForceEditTopicName() { block(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.DEVS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME))).named("can edit topic name"); }
@org.junit.Test public void unblockInLocalForceEditTopicName_Fails() { block(parent, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME)).named("u can edit topic name"); }
@org.junit.Test public void unblockInLocalForceEditTopicName_Fails() { block(parent, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME)); }
@org.junit.Test public void unblockInLocalForceEditTopicName_Fails() { block(parent, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME)).named("can edit topic name"); }
@org.junit.Test public void unblockInLocalForceEditTopicName_Fails() { block(parent, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME))); }
@org.junit.Test public void unblockInLocalForceEditTopicName_Fails() { block(parent, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/heads/*"); allow(local, com.google.gerrit.server.project.EDIT_TOPIC_NAME, com.google.gerrit.server.project.DEVS, "refs/heads/*").setForce(true); com.google.gerrit.server.project.ProjectControl u = user(local, com.google.gerrit.server.project.REGISTERED_USERS); assertThat(u.controlForRef("refs/heads/master").canPerform(Permission.EDIT_TOPIC_NAME)).named("A can edit topic name"); }
private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME))); } return refControl.canPerform(Permission.EDIT_TOPIC_NAME); }
private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME)); } return refControl.canPerform(Permission.EDIT_TOPIC_NAME); }
private boolean canEditTopicName() { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME)) || (getProjectControl().isAdmin()); }
private boolean canEditTopicName() { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME))); }
private boolean canEditTopicName() { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME)); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_PRIVATE_CHANGES : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_PRIVATE_CHANGES : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_PRIVATE_CHANGES : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported"); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_PRIVATE_CHANGES).canPerform(RefPermission.READ.name()); case WRITE_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.WRITE.name()); case READ_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : return canPerform(Permission.CREATE_TAG); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_PRIVATE_CHANGES).canPerform(RefPermission.READ.name()); case WRITE_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } }
private void loadExtensionPanelSections(org.eclipse.jgit.lib.Config rc) {java.util.Map<java.lang.String,java.lang.String> lowerNames = newjava.util.HashMap<>(2); extensionPanelSections = newjava.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS)) {java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG,java.lang.String.format("Extension Panels conflicts with name %s", lowerNames.get(lower)))); } lowerNames.put(lower, name); extensionPanelSections.put(name, newjava.util.ArrayList(java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS, name, com.google.gerrit.server.git.ProjectConfig.KEY_PANEL)))); } }
private void loadExtensionPanelSections(org.eclipse.jgit.lib.Config rc) {java.util.Map<java.lang.String,java.lang.String> lowerNames = newjava.util.HashMap<>(); extensionPanelSections = newjava.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS)) {java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG,java.lang.String.format("Extension Panels conflicts with name %s", lowerNames.get(lower)))); } lowerNames.put(lower, name); extensionPanelSections.put(name, newjava.util.ArrayList(java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS, name, com.google.gerrit.server.git.ProjectConfig.KEY_PANEL)))); } }
private void loadExtensionPanelSections(org.eclipse.jgit.lib.Config rc) {java.util.Map<java.lang.String,java.lang.String> lowerNames = newjava.util.HashMap<>(1); extensionPanelSections = newjava.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS)) {java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG,java.lang.String.format("Extension Panels conflicts with name %s", lowerNames.get(lower)))); } lowerNames.put(lower, name); extensionPanelSections.put(name, newjava.util.ArrayList(java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS, name, com.google.gerrit.server.git.ProjectConfig.KEY_PANEL)))); } }
private void loadExtensionPanelSections(org.eclipse.jgit.lib.Config rc) {java.util.Map<java.lang.String,java.lang.String> lowerNames = newjava.util.HashMap<>(2); extensionPanelSections = newjava.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS)) {java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG,java.lang.String.format("Extension Panels conflicts with %s", lowerNames.get(lower)))); } lowerNames.put(lower, name); extensionPanelSections.put(name, newjava.util.ArrayList(java.util.Arrays.asList(rc.getStringList(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS, name, com.google.gerrit.server.git.ProjectConfig.KEY_PANEL)))); } }
private void loadExtensionPanelSections(org.eclipse.jgit.lib.Config rc) {java.util.Map<java.lang.String,java.lang.String> lowerNames = newjava.util.HashMap<>(2); extensionPanelSections = newjava.util.LinkedHashMap<>(); for (java.lang.String name : rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS)) {java.lang.String lower = name.toLowerCase(); if (lowerNames.containsKey(lower)) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG,java.lang.String.format("Extension Panels conflicts with name %s", lowerNames.get(lower)))); } lowerNames.put(lower, name); extensionPanelSections.put(name, com.google.common.collect.ImmutableList.of(com.google.gerrit.server.git.ProjectConfig.EXTENSION_PANELS, com.google.gerrit.server.git.ProjectConfig.KEY_PANEL)); } }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); if (cfg!= null) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if (cfg!= null) { return cfg; } } try { org.eclipse.jgit.lib.Config cfg = getGlobalConfig(); return cfg; } catch (java.lang.Exception e) { } return new org.eclipse.jgit.lib.Config(); }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if (cfg!= null) { return cfg; } } try { org.eclipse.jgit.lib.Config cfg = getGlobalConfig(); return cfg; } catch (java.lang.Exception e) { } return new org.eclipse.jgit.lib.Config(); }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); return cfg; } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); return cfg; } }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").getWithInheritance(); if (cfg!= null) { return cfg; } } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if ((cfg!= null) && ((cfg.getSections().size()) > 0)) { return cfg; } } try { org.eclipse.jgit.lib.Config cfg = getGlobalConfig(); return cfg; } catch (java.lang.Exception e) { } return new org.eclipse.jgit.lib.Config(); }
@java.lang.Override public org.eclipse.jgit.lib.Config getConfig() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = com.googlesource.gerrit.plugins.gitiles.Resolver.getNameKey(req); com.google.gerrit.server.project.ProjectState state = projectCache.get(nameKey); if (state!= null) { return state.getConfig("gitiles.config").get(); } else { state = projectCache.getAllProjects(); org.eclipse.jgit.lib.Config cfg = state.getConfig("gitiles.config").get(); if (cfg!= null) { return cfg; } } try { org.eclipse.jgit.lib.Config cfg = getGlobalConfig(); return cfg; } catch (java.lang.Exception e) { } return new org.eclipse.jgit.lib.Config(); }
private org.eclipse.jgit.lib.Config getGlobalConfig() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.io.File sitePath = newjava.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(sitePath, org.eclipse.jgit.util.FS.DETECTED); if (cfg.getFile().exists()) { cfg.load(); } return cfg; }
private org.eclipse.jgit.lib.Config getGlobalConfig() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.io.File sitePath = newjava.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); }java.io.File cfgFile = newjava.io.File(sitePath, "etc/gitiles.config"); org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(cfgFile, org.eclipse.jgit.util.FS.DETECTED); return cfg; }
private org.eclipse.jgit.lib.Config getGlobalConfig() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.io.File sitePath = newjava.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(cfgFile, org.eclipse.jgit.util.FS.DETECTED); if (cfg.getFile().exists()) { cfg.load(); } return cfg; }
private org.eclipse.jgit.lib.Config getGlobalConfig() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.io.File sitePath = newjava.io.File(".").getAbsoluteFile(); if (".".equals(sitePath.getName())) { sitePath = sitePath.getParentFile(); } org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(sitePath, org.eclipse.jgit.util.FS.DETECTED); return cfg; }
private org.eclipse.jgit.lib.Config getGlobalConfig() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.load(); return cfg; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo that = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return ((this.match) == null? (that.match) == null : this.match.equals(that.match)) && ((this.link) == null? (that.link) == null : this.link.equals(that.link))) && ((this.html) == null? (that.html) == null : this.html.equals(that.html))) && ((this.enabled) == null? (that.enabled) == null : this.enabled.equals(that.enabled)); } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { com.google.gerrit.extensions.api.projects.CommentLinkInfo that = ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); return ((((match) == null? (that.match) == null : this.match.equals(that.match)) && ((this.link) == null? (that.link) == null : this.link.equals(that.link))) && ((this.html) == null? (that.html) == null : this.html.equals(that.html))) && ((this.enabled) == null? (that.enabled) == null : this.enabled.equals(that.enabled)); } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo) { return ((com.google.gerrit.extensions.api.projects.CommentLinkInfo) (o)); } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { return (o == (this)) || (o instanceof com.google.gerrit.extensions.api.projects.CommentLinkInfo); }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } return false; }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { if (!(projectState.getProject().getState().permitsRead())) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); if (!(projectState.getProject().getState().permitsRead())) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { if (!(projectState.getProject().getState().permitsRead())) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFactory, permissionBackend); }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); try { return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend); } catch (java.lang.Exception e) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.checkedGet(name); if (!(projectState.getProject().getState().permitsRead())) { throw new com.google.gerrit.server.project.NoSuchProjectException(name); } return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository(projectState, userProvider.get(), repoManager.openRepository(name), visibleRefFilterFactory, permissionBackend, repoManager); }
@java.lang.Override public int hashCode() { int h = 1; h *= 1000003; h ^= ((this.message) == null)? 0 : this.message.hashCode(); return h; }
@java.lang.Override public int hashCode() { int h = 1; h *= 1000003; h ^= (this.message) == null? 0 : this.message.hashCode(); return h; }
@java.lang.Override public int hashCode() { int h = 1; h *= 1000003; h ^= (this.message == null)? 0 : this.message.hashCode(); return h; }
@java.lang.Override public int hashCode() { int h = 1; h *= 1000003; h ^= ((this.message)!= null)? 0 : this.message.hashCode(); return h; }
@java.lang.Override public int hashCode() { int h = 1; h *= 1000003; return h; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError that = ((com.google.gerrit.server.git.ValidationError) (o)); return (this.message) == null? (that.message) == null : this.message.equals(that.message); } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError that = ((com.google.gerrit.server.git.ValidationError) (o)); return this.message.equals(that.message); } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError that = (com.google.gerrit.server.git.ValidationError) (o); return (this.message) == null? (that.message) == null : this.message.equals(that.message); } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.google.gerrit.server.git.ValidationError) { com.google.gerrit.server.git.ValidationError that = ((com.google.gerrit.server.git.ValidationError) (o)); return (this.message) == null? that.message == null : this.message.equals(that.message); } return false; }
@java.lang.Override public boolean equals(java.lang.Object o) { return (o == (this)) || (o instanceof com.google.gerrit.server.git.ValidationError); }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); return rsrc; }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, false); }
private com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return parse(id, true); }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Resource Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Resource Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Project Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("Resource Not Found: %s", id)); } return rsrc; }
public com.google.gerrit.server.project.ProjectResource parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id, checkAccess); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Resource Not Found: %s", id)); } return rsrc; }
public void checkStatePermitsRead() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermitsWrite())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project state " + (getProject().getState().name())) + " does not permit read")); } }
public void checkStatePermitsRead() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermitsWrite())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project state " + (getProject().getState().name())) + " does not permit write")); } }
private void checkStatePermitsRead() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermitsWrite())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project state " + (getProject().getState().name())) + " does not permit read")); } }
public void checkStatePermitsRead() throws com.google.gerrit.extensions.restapi.ResourceConflictException { if (!(statePermitsRead())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("project state " + (getProject().getState().name())) + " does not permit read")); } }
public void checkStatePermitsRead() throws com.google.gerrit.extensions.restapi.ResourceConflictException { checkStatePermitsWrite(); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi. ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : case CREATE_SIGNED_TAG : return canPerform(perm.name()); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canPerform(Permission.VIEW_PRIVATE_CHANGES); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : case CREATE_SIGNED_TAG : return canPerform(perm.name()); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canPerform(Permission.READ_PRIVATE_CHANGES); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : case CREATE_SIGNED_TAG : return canPerform(perm.name()); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_PRIVATE_CHANGES : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : case CREATE_SIGNED_TAG : return canPerform(perm.name()); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return (isVisible()) && (getProjectControl().getProjectState().statePermitsRead()); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case SET_HEAD : return projectControl.isOwner(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case CREATE_TAG : case CREATE_SIGNED_TAG : return canPerform(perm.name()); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + (refName))).canSubmit(true); case READ_PRIVATE_CHANGES : return canPerform(Permission.VIEW_PRIVATE_CHANGES); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (!(projectControl.getProjectState().is(BooleanProjectConfig.USE_SIGNED_OFF_BY))); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported"); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches())), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()) )); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()) )); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()) )); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId())))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()).and(); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()).and(); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(accountConfig.getGeneralPreferences()))); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(accountConfig.getGeneralPreferences())); }
public static com.google.gerrit.server.account.AccountState fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()))); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()))); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of(), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()))))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId); assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId); assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences()); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()); }
public com.google.gerrit.server.account.AccountState getAccount() throwsjava.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision())!= null? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences()) )); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }
public staticjava.util.Optional<com.google.gerrit.server.account.AccountState> fromAccountConfig(com.google.gerrit.server.config.AllUsersName allUsersName, com.google.gerrit.server.account.externalids.ExternalIds externalIds, com.google.gerrit.server.account.AccountConfig accountConfig) throwsjava.io.IOException { if (!(accountConfig.getLoadedAccount().isPresent())) { returnjava.util.Optional.empty(); } com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(allUsersName, account, (accountConfig.getExternalIdsRev().isPresent()? externalIds.byAccount(account.getId(), accountConfig.getExternalIdsRev().get()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())), com.google.common.base.Suppliers.memoize(() -> accountConfig.getEditPreferences()) )); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); assertThat(values).hasSize(1);java.lang.String expectedValue = (((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()))); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@org.junit.Test public void refStateFieldValues() throwsjava.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs());java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId);java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); assertThat(values).hasSize(1);java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId())))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }).get(); }
com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }
com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }
com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }
com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }).getAccountUpdate(); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of(), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }
private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name,java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())); }
private void saveProjectWatches() throwsjava.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty())))) {java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = newjava.util.HashMap<>(); accountUpdate.get().getDeletedProjectWatches().forEach(( pw) -> projectWatches.remove(pw)); accountUpdate.get().getUpdatedProjectWatches().forEach(( pw, nt) -> projectWatches.put(pw, nt)); saveConfig(WatchConfig.WATCH_CONFIG, watchConfig.save(projectWatches)); } }
private void saveProjectWatches() throwsjava.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty())))) {java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = newjava.util.HashMap<>(); projectWatches.put(WatchConfig.WATCH_CONFIG, watchConfig.save(com.google.common.collect.ImmutableMap.copyOf(projectWatches))); } }
private void saveProjectWatches() throwsjava.io.IOException { if ((accountUpdate.isPresent()) && ((!(accountUpdate.get().getDeletedProjectWatches().isEmpty())) || (!(accountUpdate.get().getUpdatedProjectWatches().isEmpty())))) { saveConfig(WatchConfig.WATCH_CONFIG, watchConfig.save(com.google.common.collect.ImmutableMap.copyOf(projectWatches)); } }
private void saveProjectWatches() throwsjava.io.IOException { saveConfig(WatchConfig.WATCH_CONFIG, watchConfig.save(com.google.common.collect.ImmutableMap.copyOf(projectWatches)); }
private void saveProjectWatches() throwsjava.io.IOException { saveConfig(WatchConfig.WATCH_CONFIG, watchConfig.save()); }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
public com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
public com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
publicjava.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
public com.google.common.collect.ImmutableMap <com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return watchConfig.getProjectWatches(); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError.Sink validationErrorSink) {java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = newjava.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) {java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName, com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationErrorSink); if (notifyValue == null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.create(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key,java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } projectWatches.get(key).addAll(notifyValue.filter()); } } return com.google.common.collect.ImmutableMap.copyOf(projectWatches); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError.Sink validationErrorSink) {java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = newjava.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) {java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName, com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationErrorSink); if (notifyValue == null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.create(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key,java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } projectWatches.get(key).addAll(notifyValues); } } return com.google.common.collect.ImmutableMap.copyOf(projectWatches); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError.Sink validationErrorSink) {java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = newjava.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) {java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName, com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationErrorSink); if (notifyValue == null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.create(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key,java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } projectWatches.get(key).addAll(notifyValue.filter()); } } return com.google.common.collect.ImmutableSet.copyOf(projectWatches); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError.Sink validationErrorSink) {java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = newjava.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) {java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName, com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationErrorSink); if (notifyValue == null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.create(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key,java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } } } projectWatches.get(key).addAll(notifyTypes); return com.google.common.collect.ImmutableMap.copyOf(projectWatches); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId, org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.git.ValidationError.Sink validationErrorSink) {java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = newjava.util.HashMap<>(); for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) {java.lang.String[] notifyValues = cfg.getStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName, com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY); for (java.lang.String nv : notifyValues) { if (com.google.common.base.Strings.isNullOrEmpty(nv)) { continue; } com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.parse(accountId, projectName, nv, validationErrorSink); if (notifyValue == null) { continue; } com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key = com.google.gerrit.server.account.WatchConfig.ProjectWatchKey.create(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName), notifyValue.filter()); if (!(projectWatches.containsKey(key))) { projectWatches.put(key,java.util.EnumSet.noneOf(com.google.gerrit.server.account.WatchConfig.NotifyType.class)); } } } projectWatches.get().addAll(notifyTypes.values()); return com.google.common.collect.ImmutableMap.copyOf(projectWatches); }
org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatches.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), notifyValue.toString()); } for (java.util.Map.Entry<java.lang.String,java.util.Collection<java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getKey(), com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY, newjava.util.ArrayList(e.getValue())); } return cfg; }
org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatches.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), notifyValue.toString()); } for (java.util.Map.Entry<java.lang.String,java.util.Collection<java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList (com.google.gerrit.server.account.WatchConfig.PROJECT, e.getKey(), com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY, newjava.util.ArrayList(e.getValue())); } return cfg; }
org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatches.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), notifyValue.toString()); } for (java.util.Map.Entry<java.lang.String,java.util.Set<java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getKey(), com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY, newjava.util.ArrayList(e.getValue())); } return cfg; }
public org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatches.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), notifyValue.toString()); } for (java.util.Map.Entry<java.lang.String,java.util.Collection<java.lang.String>> e : notifyValuesByProject.asMap().entrySet()) { cfg.setStringList(com.google.gerrit.server.account.WatchConfig.PROJECT, e.getKey(), com.google.gerrit.server.account.WatchConfig.KEY_NOTIFY, newjava.util.ArrayList(e.getValue())); } return cfg; }
org.eclipse.jgit.lib.Config save(com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches) { this.projectWatches = projectWatches; for (java.lang.String projectName : cfg.getSubsections(com.google.gerrit.server.account.WatchConfig.PROJECT)) { cfg.unsetSection(com.google.gerrit.server.account.WatchConfig.PROJECT, projectName); } com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> notifyValuesByProject = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (java.util.Map.Entry<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> e : projectWatches.entrySet()) { com.google.gerrit.server.account.WatchConfig.NotifyValue notifyValue = com.google.gerrit.server.account.WatchConfig.NotifyValue.create(e.getKey().filter(), e.getValue()); notifyValuesByProject.put(e.getKey().project().get(), notifyValue.toString()); } return cfg; }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public com.google.common.collect.ImmutableMap <com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
publicjava <com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { if ((projectWatches) == null) { parse(); } return projectWatches; }
public com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }
public com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }
com.google.common.collect.ImmutableMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }
public com.google.common.collect.ImmutableSet<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { return projectWatches; }
public com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, com.google.gerrit.server.account.WatchConfig.NotifyType> getProjectWatches() { return projectWatches; }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of())); com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount updatedAccounts = new com.google.gerrit.server.account.AccountsUpdate.UpdatedAccount(allUsersName, externalIds, message, accountConfig, extIdNotes); updatedAccounts.setCreated(true); return updatedAccounts; }); }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(( r) -> { com.google.gerrit.server.account.AccountConfig accountConfig = read(r, accountId); com.google.gerrit.reviewdb.client.Account account = accountConfig.getNewAccount(newjava.sql.Timestamp(committerIdent.getWhen().getTime())); com.google.gerrit.server.account.AccountState accountState = new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); com.google.gerrit.server.account.InternalAccountUpdate.Builder updateBuilder = com.google.gerrit.server.account.InternalAccountUpdate.builder(); updater.update(accountState, updateBuilder); com.google.gerrit.server.account.InternalAccountUpdate update = updateBuilder.build(); accountConfig.setAccountUpdate(update); com.google.gerrit.server.account.externalids.ExternalIdNotes extIdNotes = createExternalIdNotes(r, accountConfig.getExternalIdsRev(), accountId, update); updatedAccounts.setCreated(true); return updatedAccounts; }); }
public com.google.gerrit.server.account.AccountState insert(java.lang.String message, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.AccountsUpdate.AccountUpdater updater) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return updateAccount(com.google.common.collect.ImmutableSet.of(), updater); }
publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who!= null) { returnjava.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(nameOrEmail); }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who!= null) { returnjava.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(nameOrEmail); }
javajava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile(nameOrEmail); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who!= null) { returnjava.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(nameOrEmail); }
publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile("^[1-9][0-9]*$"); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who!= null) { returnjava.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(nameOrEmail); }
javajava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile("^[1-9][0-9]*$"); if (m.matches()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(m.group(1)); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches("^[1-9][0-9]*$")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(nameOrEmail); if (accounts.get(id).isPresent()) { returnjava.util.Collections.singleton(id); } returnjava.util.Collections.emptySet(); } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) { com.google.gerrit.server.account.AccountState who = byId.getByUsername(nameOrEmail); if (who!= null) { returnjava.util.Collections.singleton(who.getAccount().getId()); } } return findAllByNameOrEmail(nameOrEmail); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of())); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionBackend, notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl. canRemoveReviewerWithoutPermissionCheck(permissionBackend, notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionsBackend, notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(dbProvider, notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private void checkRemoveReviewer(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int val) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(accountBackend, notes.getChange(), currentUser, reviewer, val)) { return; } permissionBackend.user(currentUser).change(notes).database(dbProvider).check(ChangePermission.REMOVE_REVIEWER); }
private static boolean canRemoveReviewerWithoutPermissionCheck(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && ( <= value)) { return true; } } com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject forProject = withUser.project(change.getProject()); if (com.google.gerrit.server.project.RemoveReviewerControl.check(forProject.ref(change.getDest().get()), RefPermission.WRITE_CONFIG)) { return true; } return false; }
private static boolean canRemoveReviewerWithoutPermissionCheck(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && ( <= value)) { return true; } } com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject forProject = withUser.project(change.getProject()); if (com.google.gerrit.server.project.RemoveReviewerControl.check(forProject.ref(change.getDest().get()), RefPermission.WRITE_CONFIG)) || (com.google.gerrit.server.project.RemoveReviewerControl.check(withUser, GlobalPermission.ADMINISTRATE_SERVER)) { return true; } return false; }
private static boolean canRemoveReviewerWithoutPermissionCheck(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && (value <= 0)) { return true; } } com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject forProject = withUser.project(change.getProject()); if (com.google.gerrit.server.project.RemoveReviewerControl.check(forProject.ref(change.getDest().get()), RefPermission.WRITE_CONFIG)) { return true; } return false; }
private static boolean canRemoveReviewerWithoutPermissionCheck(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && ( <= value)) { return true; } } com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject forProject = withUser.project(change.getProject()); if ((com.google.gerrit.server.project.RemoveReviewerControl.check(forProject.ref(change.getDest().get()), RefPermission.WRITE_CONFIG)) || (com.google.gerrit.server.project.RemoveReviewerControl.check(withUser, GlobalPermission.ADMINISTRATE_SERVER))); { return true; } return false; }
private static boolean canRemoveReviewerWithoutPermissionCheck(com.google.gerrit.server.permissions.PermissionBackend permissionBackend, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { if (!(change.getStatus().isOpen())) { return false; } if (currentUser.isIdentifiedUser()) { com.google.gerrit.reviewdb.client.Account.Id aId = currentUser.getAccountId(); if (aId.equals(reviewer)) { return true; } else if ((aId.equals(change.getOwner())) && ( <= value)) { return true; } } com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUser); com.google.gerrit.server.permissions.PermissionBackend.ForProject forProject = withUser.project(change.getProject()); if ((com.google.gerrit.server.project.RemoveReviewerControl.check(forProject.ref(change.getDest().get()), RefPermission.WRITE_CONFIG)) || (com.google.gerrit.server.project.RemoveReviewerControl.check(withUser, GlobalPermission.ADMINISTRATE_SERVER)) { return true; } return false; }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionBackend, cd.change(), currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).change(cd).database(dbProvider).test(ChangePermission.REMOVE_REVIEWER); }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl. canRemoveReviewerWithoutPermissionCheck(permissionBackend, cd.change(), currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).change(cd).database(dbProvider).test(ChangePermission.REMOVE_REVIEWER); }
public boolean removeReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionBackend, cd.change(), currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).change(cd).database(dbProvider).test(ChangePermission.REMOVE_REVIEWER); }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewer(permissionBackend, cd.change(), currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).change(cd).database(dbProvider).test(ChangePermission.REMOVE_REVIEWER); }
public boolean testRemoveReviewer(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.CurrentUser currentUser, com.google.gerrit.reviewdb.client.Account.Id reviewer, int value) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.server.project.RemoveReviewerControl.canRemoveReviewerWithoutPermissionCheck(permissionBackend, cd.change(), currentUser, reviewer, value)) { return true; } return permissionBackend.user(currentUser).change(cd).database(dbProvider).test(ChangePermission.REMOVE_REVIEWER).canRemoveReviewer(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource,?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProjectState().checkStatePermitsRead(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource,?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource,?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProjectState().checkStatePermitsRead(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource,?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProjectState().checkStatePermitsRead(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource,?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProjectState().checkStatePermitsRead(); return createDefault.get(id); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.SUGGESTED).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEquals("number of returned CommitValidationMessages does not match", 1, ret.size()); assertTrue(("number of returned CommitValidationMessages does not contain " + "issue'"), ret.get(0).getMessage().contains("issue")); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.SUGGESTED).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEquals("Number of returned CommitValidationMessages does not match", 1, ret.size()); assertTrue((("CommitValidationMessages does not contain " + "issue'"), ret.get(0).getMessage().contains("issue")); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.SUGGESTED).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEquals("Number of returned CommitValidationMessages does not match", 1, ret.size()); assertTrue(("Number of returned CommitValidationMessages does not contain " + "issue'"), ret.get(0).getMessage().contains("issue")); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.SUGGESTED).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEquals("number of returned CommitValidationMessages does not match", 1, ret.size()); assertTrue(("number of returned CommitValidationMessages does not contain " + "issue'"), ret.get(0).getMessage().contains("Issue issue")); }
public void testSuggestedNonMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.SUGGESTED).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEquals("number of returned CommitValidationMessages does not match", 1, ret.size()); assertTrue(("number of returned CommitValidationMessages does not contain " + "issue'"), ret.get(0).getMessage().contains("test issue")); }
publicjava.lang.String getCommentLinkName() {java.lang.String ret; ret = getPluginConfigString("commentlink", null); if (ret == null) { ret = pluginName; } return ret; }
publicjava.lang.String getCommentLinkName() {java.lang.String ret = getPluginConfigString("commentlink", null); if (ret == null) { ret = pluginName; } return ret; }
java publicjava.lang.String getCommentLinkName() {java.lang.String ret; ret = getPluginConfigString("commentlink", null); if (ret == null) { ret = pluginName; } return ret; }
publicjava.lang.String getCommentLinkName() {java.lang.String ret; ret = getPluginConfigString("commentlink"); if (ret == null) { ret = pluginName; } return ret; }
publicjava.lang.String getCommentLinkName() { return getPluginConfigString("commentlink", null); }
publicjava.util.regex.Pattern getDummyIssuePattern() { returnjava.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "x^")); }
privatejava.util.regex.Pattern getDummyIssuePattern() { returnjava.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "x^")); }
publicjava.util.regex.Pattern getDummyIssuePattern() { returnjava.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "x")); }
publicjava.util.regex.Pattern getDummyIssuePattern() { returnjava.util.regex.Pattern.compile(getPluginConfigString("dummyIssuePattern", "^")); }
publicjava.util.regex.Pattern getDummyIssuePattern() { returnjava x^; }
public void testMandatoryNonMatching() { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); try { ivc.onCommitReceived(event); fail("did not throw any exception"); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { assertTrue(("message of thrown CommitValidationException does not " + " contain issue ") + e.getMessage().contains("issue")); } }
public void testMandatoryNonMatching() { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); try { ivc.onCommitReceived(event); fail("it did not throw any exception"); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { assertTrue(("message of thrown CommitValidationException does not " + " contain issue ") + e.getMessage().contains("issue")); } }
public void testMandatoryNonMatching() { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); try { ivc.onCommitReceived(event); fail("onCommitReceived did not throw any exception"); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { assertTrue(("message of thrown CommitValidationException does not " + " contain issue ") + e.getMessage().contains("issue")); } }
public void testMandatoryNonMatching() { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); try { ivc.onCommitReceived(event); fail("onCommitReceived did not throw any exception"); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { assertTrue(("message of thrown CommitValidationException does not " + " contain issue ") + e.getMessage().contains("issue issue")); } }
public void testMandatoryNonMatching() { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("x^")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); try { ivc.onCommitReceived(event); fail("did not throw any exception"); } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { assertTrue(("message of thrown CommitValidationException does not " + " contain issue ") + e.getMessage().contains("issue")); } }
privatejava.lang.String getPluginConfigString(java.lang.String key,java.lang.String defaultValue) {java.lang.String val = getCurrentPluginConfig().getString(key, gerritConfig.getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key)); return val == null? defaultValue : val; }
privatejava.lang.String getPluginConfigString(java.lang.String key,java.lang.String defaultValue) { return getCurrentPluginConfig().getString(key, gerritConfig.getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key)); }
java privatejava.lang.String getPluginConfigString(java.lang.String key,java.lang.String defaultValue) {java.lang.String val = getCurrentPluginConfig().getString(key, gerritConfig.getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key)); return val == null? defaultValue : val; }
privatejava.lang.String getPluginConfigString(java.lang.String key) {java.lang.String val = getCurrentPluginConfig().getString(key, gerritConfig.getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key)); return val == null? defaultValue : val; }
privatejava.lang.String getPluginConfigString(java.lang.String key,java.lang.String defaultValue) {java.lang.String val = getCurrentPluginConfig().getString(key, gerritConfig.getString(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key)); return val!= null? val : defaultValue; }
public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("SKIP")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage SKIP").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage SKIP")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }
public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("SKIP")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage SKIP").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds()).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }
public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("SKIP")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage SKIP").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage SKIP")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }
public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("SKIP")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage SKIP").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds().filter()).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }
public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException {java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile("SKIP")).atLeastOnce(); expect(commit.getFullMessage()).andReturn("TestMessage SKIP").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn("TestCommit").anyTimes(); expect(issueExtractor.getIssueIds("TestMessage SKIP")).andReturn(newjava.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertThat(ret).isEmpty(); }
@java.lang.Override @com.google.gerrit.common.Nullable public synchronizedjava.util.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return byUsername.get(username); }
@java @java.lang.Override @com.google.gerrit.common.Nullable public synchronizedjava.util.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return byUsername.get(username); }
@com.google.gerrit.common.Nullable public synchronizedjava.util.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return byUsername.get(username); }
@java.lang.Override public synchronizedjava.util.Optional<com.google.gerrit.server.account.AccountState> getByUsername(java.lang.String username) { return byUsername.get(username); }
@java.lang.Override @com.google.gerrit.common.Nullable public synchronized com.google.gerrit.server.account.AccountState getByUsername(java.lang.String username) { return byUsername.get(username); }
privatejava.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { returnjava.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); returnjava.util.Optional.of(newjava.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE),java.nio.charset.StandardCharsets.UTF_8)); } }
privatejava.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { try (org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { returnjava.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); returnjava.util.Optional.of(newjava.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE),java.nio.charset.StandardCharsets.UTF_8)); } }
privatejava.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throwsjava.lang.Exception { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { returnjava.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); returnjava.util.Optional.of(newjava.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE),java.nio.charset.StandardCharsets.UTF_8)); } }
privatejava.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { returnjava.util.Optional.empty(); } try (org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); returnjava.util.Optional.of(newjava.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE),java.nio.charset.StandardCharsets.UTF_8)); } }
privatejava.util.Optional<java.lang.String> readProjectConfig(finaljava.lang.String projectName) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { returnjava.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); returnjava.util.Optional.of(newjava.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE),java.nio.charset.StandardCharsets.UTF_8)); } }
public <T> T executeIndexQuery(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY, action, null); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }
public <T> T executeIndexQuery(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY, action, ( t) -> t instanceof com.google.gwtorm.server.OrmException); } catch (java.lang.Throwable t) { throw new com.google.gwtorm.server.OrmException(t); } }
public <T> T executeIndexQuery(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY, action, ( t) -> t instanceof com.google.gwtorm.server.OrmException); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); throw new com.google.gwtorm.server.OrmException(t); } }
public <T> T executeIndexQuery(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException { return retryHelper.execute(ActionType.INDEX_QUERY, action, ( t) -> t instanceof com.google.gwtorm.server.OrmException); }
public <T> T executeIndexQuery(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException { try { return retryHelper.execute(ActionType.INDEX_QUERY, action, ( t) -> t instanceof com.google.gwtorm.server.OrmException); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); throw com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); } }
private <T> T executeWithAttempCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
private <T> T executeWithAttempCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.io.IOException { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
private <T> T executeWithAttempCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Exception { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
private <T> T executeWithAttempCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutExceptionCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
private <T> T executeWithAttempCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return retryerBuilder.build(); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Exception { try { return executeWithAttempCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t,java.lang.Exception.class); throw newjava.lang.IllegalStateException(t); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang. Exception { try { return executeWithAttempCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t,java.lang.Exception.class); throw newjava.lang.IllegalStateException(t); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Exception { try { return executeWithAttempCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t,java.lang.Exception.class); throw new com.google.inject.ProvisionException(t); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Exception { try { return executeWithAttempCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.Throwable t) { throw newjava.lang.IllegalStateException(t); } }
public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Exception { return executeWithAttempCount(actionType, action, opts, exceptionPredicate); }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e,java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); throw newjava.io.IOException(e); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { throw com.google.common.base.Throwables.throwIfInstanceOf(e,java.io.IOException.class); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { throw new com.google.gwtorm.server.OrmException(e); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e,java.io.IOException.class); throw new com.google.gwtorm.server.OrmDuplicateKeyException(e); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); }
private <T> T executeAccountUpdate(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(ActionType.ACCOUNT_UPDATE, action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); } catch (java.lang.Exception t) { com.google.common.base.Throwables.throwIfInstanceOf(t,java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); throw new com.google.gwtorm.server.OrmException(t); } }
private <T> T executeAccountUpdate(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(ActionType.ACCOUNT_UPDATE, action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); } catch (java.lang.Exception t) { throw new com.google.gwtorm.server.OrmException(t); } }
private <T> T executeAccountUpdate(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(ActionType.ACCOUNT_UPDATE, action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); } catch (java.lang.Exception t) { throw com.google.common.base.Throwables.throwIfInstanceOf(t,java.io.IOException.class); } }
private <T> T executeAccountUpdate(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return retryHelper.execute(ActionType.ACCOUNT_UPDATE, action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); }
private <T> T executeAccountUpdate(com.google.gerrit.server.update.RetryHelper.Action<T> action) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(ActionType.ACCOUNT_UPDATE, action, ( t) -> t instanceof com.google.gerrit.server.git.LockFailureException); } catch (java.lang.Exception t) { throw com.google.gwtorm.server.OrmException.asInstanceOf(t,java.io.IOException.class); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("The group wasn't automatically loaded")); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("group wasn't automatically loaded")); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("Group wasn't automatically loaded")); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("This group wasn't automatically loaded")); } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, this::getAccountNameEmail, this::getGroupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> newjava.lang.IllegalStateException("A group wasn't automatically loaded")); } }
privatejava.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e,java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw newjava.io.IOException(e); } }
privatejava.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { throw com.google.common.base.Throwables.throwIfInstanceOf(e,java.io.IOException.class); } }
privatejava.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e,java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw newjava.io.IOException(e); } }
privatejava.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e,java.io.IOException.class); throw new com.google.gerrit.common.errors.NoSuchGroupException(e); } }
privatejava.util.Optional<com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult> updateGroupInNoteDbWithRetry(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmDuplicateKeyException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> updateGroupInNoteDb(groupUuid, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { throw new com.google.gerrit.common.errors.NoSuchGroupException(e); } }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate.AccountUpdate accountUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return executeAccountUpdate(() -> { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.Account updatedAccount = accountUpdate.update(allUsersRepo); if (updatedAccount == null) { return null; } commit(allUsersRepo, updatedAccount); return updatedAccount.getAccount(); } }); }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate.AccountUpdate accountUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return executeAccountUpdate(() -> { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.UpdatedAccount updatedAccount = accountUpdate.update(allUsersRepo); commit(allUsersRepo, updatedAccount); return updatedAccount.getAccount(); } }); }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate.AccountUpdate accountUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return executeAccountUpdate(() -> { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName)) { com.google.gerrit.server.account.UpdatedAccount updatedAccount = accountUpdate.update(allUsersRepo); return updatedAccount.getAccount(); } }); }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate.AccountUpdate accountUpdate) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return executeAccountUpdate(accountUpdate); }
private com.google.gerrit.reviewdb.client.Account updateAccount(com.google.gerrit.server.account.AccountsUpdate.AccountUpdate accountUpdate) { return executeAccountUpdate(accountUpdate); }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkStatePermitsRead(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi. ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); parent.getProjectState().checkStatePermitsRead(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi. ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic()? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { rsrc.getProjectState().checkStatePermitsRead(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi. ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { rsrc.getProjectState().checkStatePermitsRead(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { rsrc.getProjectState().checkStatePermitsRead(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).regex(matchSubstring).start(start).limit(limit).filter(allBranches(rsrc)); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { rsrc.getProjectState().checkStatePermitsRead(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allRefs(rsrc)); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl((((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id));java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0));java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource() throwsjava.lang.Exception { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
private com.google.gerrit.server.project.DashboardResource resource();
com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi. ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi. ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
public com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi. ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); };
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple notes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }
public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeNotesFactory.find(id); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.restapi.change.ChangesCollection.toIdString(id)); } return changeResourceFactory.create(change, user.get()); }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = " to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw newjava.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.server.OrmException e) { throw newjava.lang.IllegalArgumentException("database is down", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.lang.IllegalArgumentException("cannot check permissions", e); } }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = " to modify void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw newjava.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.server.OrmException e) { throw newjava.lang.IllegalArgumentException("database is down", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.lang.IllegalArgumentException("cannot check permissions", e); } }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = "Change to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw newjava.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.server.OrmException e) { throw newjava.lang.IllegalArgumentException("database is down", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.lang.IllegalArgumentException("cannot check permissions", e); } }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = " to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw newjava.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.server.OrmException e) { throw newjava.lang.IllegalArgumentException("database is down", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.lang.IllegalArgumentException("Cannot check permissions", e); } }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "CHANGE", usage = " to modify") void addChange(java.lang.String token) { try { changeArgumentParser.addChange(token, changes, projectState); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw newjava.lang.IllegalArgumentException(e.getMessage(), e); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw newjava.lang.IllegalArgumentException("database is down", e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.lang.IllegalArgumentException("cannot check permissions"); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.restapi.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.restapi.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Internal server error"); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.restapi.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.restapi.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("internal server error"); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.restapi.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.restapi.account.StarredChanges.log.error("Cannot resolve change", e); throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("rest server error"); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.restapi.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.account.AccountResource, com.google.gerrit.server.restapi.account.StarredChanges.EmptyInput> create(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return createProvider.get().setChange(changes.parse(TopLevelResource.INSTANCE, id)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("change %s not found", id.get())); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Cannot resolve change", e); } }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple changes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(id.encoded(), true); if (notes.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((notes.size())!= 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple notes found for " + id)); } com.google.gerrit.server.notedb.ChangeNotes change = notes.get(0); if (!(canRead(change))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(change, user.get()); }
private boolean isVisible(com.google.gerrit.server.restapi.change.RelatedChangesSorter.PatchSetData psd) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).statePermitsRead(); }
private boolean isVisible(com.google.gerrit.server.restapi.change.RelatedChangesSorter.PatchSetData psd) throws com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).statePermitsRead(); }
private boolean isVisible(com.google.gerrit.server.restapi.change.RelatedChangesSorter.PatchSetData psd) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider).database(dbProvider); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).statePermitsRead(); }
private boolean isVisible(com.google.gerrit.server.restapi.change.RelatedChangesSorter.PatchSetData psd) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm; try { perm = permissionBackend.user(currentUserProvider).database(dbProvider); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).statePermitsRead(); }
private boolean isVisible(com.google.gerrit.server.restapi.change.RelatedChangesSorter.PatchSetData psd) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.user(currentUserProvider); try { perm.change(psd.data()).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } return projectCache.checkedGet(psd.data().project()).statePermitsRead(); }
public void sort(java.lang.String ref,java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionSortCache.EntryKey key = com.google.gerrit.server.project.SectionSortCache.EntryKey.create(ref, sections); com.google.gerrit.server.project.SectionSortCache.EntryVal val = cache.getIfPresent(key); if (val!= null) { int[] srcIdx = val.order; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.SectionSortCache.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i, srcList[srcIdx[i]]); } } else { } } else { boolean poison = false;java.util.IdentityHashMap<com.google.gerrit.common.data.AccessSection,java.lang.Integer> srcMap = newjava.util.IdentityHashMap<>(); for (int i = 0; i < cnt; i++) { poison |= (srcMap.put(sections.get(i), i))!= null; }java.util.Collections.sort(sections, new com.google.gerrit.server.util.MostSpecificComparator(ref)); int[] srcIdx; if (com.google.gerrit.server.project.SectionSortCache.isIdentityTransform(sections, srcMap)) { srcIdx = null; } else { srcIdx = new int[cnt]; for (int i = 0; i < cnt; i++) { srcIdx[i] = srcMap.get(sections.get(i)); } } if (poison) { com.google.gerrit.server.project.SectionSortCache.log.error("Found duplicate AccessSection instances, not caching sort"); } else { cache.put(key, new com.google.gerrit.server.project.SectionSortCache.EntryVal(srcIdx)); } } }
public void sort(java.lang.String ref,java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionSortCache.EntryKey key = com.google.gerrit.server.project.SectionSortCache.EntryKey.create(ref, sections); com.google.gerrit.server.project.SectionSortCache.EntryVal val = cache.getIfPresent(key); if (val!= null) { int[] srcIdx = val.order; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.SectionSortCache.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i, srcList[srcIdx[i]]); } } else { } } else { boolean poison = false;java.util.IdentityHashMap<com.google.gerrit.common.data.AccessSection,java.lang.Integer> srcMap = newjava.util.IdentityHashMap<>(); for (int i = 0; i < cnt; i++) { poison |= (srcMap.put(sections.get(i), i))!= null; }java.util.Collections.sort(sections, new com.google.gerrit.server.util.MostSpecificComparator(ref)); int[] srcIdx; if (com.google.gerrit.server.project.SectionSortCache.isIdentityTransform(sections, srcMap)) { srcIdx = null; } else { srcIdx = new int[cnt]; for (int i = 0; i < cnt; i++) { srcIdx[i] = srcMap.get(sections.get(i)); } } if (poison) { com.google.gerrit.server.project.SectionSortCache.log.error("Cannot duplicate AccessSection instances, not caching sort"); } else { cache.put(key, new com.google.gerrit.server.project.SectionSortCache.EntryVal(srcIdx)); } } }
public void sort(java.lang.String ref,java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionSortCache.EntryKey key = com.google.gerrit.server.project.SectionSortCache.EntryKey.create(ref, sections); com.google.gerrit.server.project.SectionSortCache.EntryVal val = cache.getIfPresent(key); if (val!= null) { int[] srcIdx = val.order; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.SectionSortCache.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i, srcList[srcIdx[i]]); } } else { } } else { boolean poison = false;java.util.IdentityHashMap<com.google.gerrit.common.data.AccessSection,java.lang.Integer> srcMap = newjava.util.IdentityHashMap<>(); for (int i = 0; i < cnt; i++) { poison |= (srcMap.put(sections.get(i), i))!= null; }java.util.Collections.sort(sections, new com.google.gerrit.server.util.MostSpecificComparator(ref)); int[] srcIdx; if (com.google.gerrit.server.project.SectionSortCache.isIdentityTransform(sections, srcMap)) { srcIdx = null; } else { srcIdx = new int[cnt]; for (int i = 0; i < cnt; i++) { srcIdx[i] = srcMap.get(sections.get(i)); } } if (poison) { com.google.gerrit.server.project.SectionSortCache.log.error("We found duplicate AccessSection instances, not caching sort"); } else { cache.put(key, new com.google.gerrit.server.project.SectionSortCache.EntryVal(srcIdx)); } } }
public void sort(java.lang.String ref,java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionSortCache.EntryKey key = com.google.gerrit.server.project.SectionSortCache.EntryKey.create(ref, sections); com.google.gerrit.server.project.SectionSortCache.EntryVal val = cache.getIfPresent(key); if (val!= null) { int[] srcIdx = val.order; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.SectionSortCache.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i, srcList[srcIdx[i]]); } } else { } } else { boolean poison = false;java.util.IdentityHashMap<com.google.gerrit.common.data.AccessSection,java.lang.Integer> srcMap = newjava.util.IdentityHashMap<>(); for (int i = 0; i < cnt; i++) { poison |= (srcMap.put(sections.get(i), i))!= null; }java.util.Collections.sort(sections, new com.google.gerrit.server.util.MostSpecificComparator(ref)); int[] srcIdx; if (com.google.gerrit.server.project.SectionSortCache.isIdentityTransform(sections, srcMap)) { srcIdx = null; } else { srcIdx = new int[cnt]; for (int i = 0; i < cnt; i++) { srcIdx[i] = srcMap.get(sections.get(i)); } } if (poison) { com.google.gerrit.server.project.SectionSortCache.log.error("fatal: duplicate AccessSection instances, not caching sort"); } else { cache.put(key, new com.google.gerrit.server.project.SectionSortCache.EntryVal(srcIdx)); } } }
public void sort(java.lang.String ref,java.util.List<com.google.gerrit.common.data.AccessSection> sections) { final int cnt = sections.size(); if (cnt <= 1) { return; } com.google.gerrit.server.project.SectionSortCache.EntryKey key = com.google.gerrit.server.project.SectionSortCache.EntryKey.create(ref, sections); com.google.gerrit.server.project.SectionSortCache.EntryVal val = cache.getIfPresent(key); if (val!= null) { int[] srcIdx = val.order; if (srcIdx!= null) { com.google.gerrit.common.data.AccessSection[] srcList = com.google.gerrit.server.project.SectionSortCache.copy(sections); for (int i = 0; i < cnt; i++) { sections.set(i, srcList[srcIdx[i]]); } } else { } } else { boolean poison = false;java.util.IdentityHashMap<com.google.gerrit.common.data.AccessSection,java.lang.Integer> srcMap = newjava.util.IdentityHashMap<>(); for (int i = 0; i < cnt; i++) { poison |= (srcMap.put(sections.get(i), i))!= null; }java.util.Collections.sort(sections, new com.google.gerrit.server.util.MostSpecificComparator(ref)); int[] srcIdx; if (com.google.gerrit.server.project.SectionSortCache.isIdentityTransform(sections, srcMap)) { srcIdx = null; } else { srcIdx = new int[cnt]; for (int i = 0; i < cnt; i++) { srcIdx[i] = srcMap.get(sections.get(i)); } } if (poison) { com.google.gerrit.server.project.SectionSortCache.log.error(("Cannot duplicate AccessSection instances, not caching sort")); } else { cache.put(key, new com.google.gerrit.server.project.SectionSortCache.EntryVal(srcIdx)); } } }
@org.junit.Test public void noteDbCommit() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = assertCreateSucceeds(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo("New change"); org.eclipse.jgit.lib.PersonIdent expectedAuthor = changeNoteUtil.newIdent(accountCache.get(admin.id).getAccount(), c.created, serverIdent.get()); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.created)); assertThat(commit.getParentCount()).isEqualTo(0); } }
@org.junit.Test public void noteDbCommit() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = assertCreateSucceeds(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo("Created change"); org.eclipse.jgit.lib.PersonIdent expectedAuthor = changeNoteUtil.newIdent(accountCache.get(admin.id).getAccount(), c.created, serverIdent.get()); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.created)); assertThat(commit.getParentCount()).isEqualTo(0); } }
@org.junit.Test public void noteDbCommit() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = assertCreateSucceeds(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo("Uploaded change"); org.eclipse.jgit.lib.PersonIdent expectedAuthor = changeNoteUtil.newIdent(accountCache.get(admin.id).getAccount(), c.created, serverIdent.get()); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.created)); assertThat(commit.getParentCount()).isEqualTo(0); } }
@org.junit.Test public void noteDbCommit() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = assertCreateSucceeds(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo("New change"); org.eclipse.jgit.lib.PersonIdent expectedAuthor = changeNoteUtil.newIdent(accountCache.get(admin.id).get(), c.created, serverIdent.get()); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.created)); assertThat(commit.getParentCount()).isEqualTo(0); } }
@org.junit.Test public void noteDbCommit() throwsjava.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.ChangeInfo c = assertCreateSucceeds(newChangeInput(ChangeStatus.NEW)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.exactRef(changeMetaRef(new com.google.gerrit.reviewdb.client.Change.Id(c._number))).getObjectId()); assertThat(commit.getShortMessage()).isEqualTo("New change"); org.eclipse.jgit.lib.PersonIdent expectedAuthor = changeNoteUtil.newIdent(accountCache.maybeGet(admin.id).getAccount(), c.created, serverIdent.get()); assertThat(commit.getAuthorIdent()).isEqualTo(expectedAuthor); assertThat(commit.getCommitterIdent()).isEqualTo(new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), c.created)); assertThat(commit.getParentCount()).isEqualTo(0); } }
@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throwsjava.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE);java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()).get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throwsjava.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE);java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.maybeGet(admin.getId()).get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throwsjava.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE);java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()). get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throwsjava.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE);java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()).get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get((("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIdsOfOtherUserWithAccessDatabase() throwsjava.lang.Exception { allowGlobalCapabilities(com.google.gerrit.acceptance.rest.account.REGISTERED_USERS, GlobalCapability.ACCESS_DATABASE);java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(admin.getId()).get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(("/accounts/" + (admin.id)) + "/external.ids")); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIds() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIds() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.maybeGet(user.getId()).get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternal() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIds() throws throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).get().getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIds() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).get().externalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullablejava.lang.String name, @com.google.gerrit.common.Nullablejava.lang.String status) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs =java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.maybeGet(accountId).get().getAccount().getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, AccountProperties.ACCOUNT_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(newjava.lang.String(or.open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(),java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_FULL_NAME)).isEqualTo(name); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_STATUS)).isEqualTo(status); } else { assertThat(tw).isNull(); } } } }
void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullablejava.lang.String name, @com.google.gerrit.common.Nullablejava.lang.String status) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs =java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.maybeGet(accountId).get().getAccount().getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, AccountProperties.ACCOUNT_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(newjava.lang.String(or.open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(),java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_FULL_NAME)).isEqualTo(name); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_STATUS)).isEqualTo(status); } else { assertThat(tw).isNull(); } } } }
public void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullablejava.lang.String name, @com.google.gerrit.common.Nullablejava.lang.String status) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs =java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.maybeGet(accountId).get().getAccount().getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, AccountProperties.ACCOUNT_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(newjava.lang.String(or.open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(),java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_FULL_NAME)).isEqualTo(name); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_STATUS)).isEqualTo(status); } else { assertThat(tw).isNull(); } } } }
private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullablejava.lang.String name, @com.google.gerrit.common.Nullablejava.lang.String status) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs =java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.maybeGet(accountId).getAccount().getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, AccountProperties.ACCOUNT_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(newjava.lang.String(or.open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(),java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_FULL_NAME)).isEqualTo(name); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_STATUS)).isEqualTo(status); } else { assertThat(tw).isNull(); } } } }
private void assertUserBranch(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullablejava.lang.String name, @com.google.gerrit.common.Nullablejava.lang.String status) throwsjava.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs =java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.get(accountId).get().getAccount().getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or, AccountProperties.ACCOUNT_CONFIG, c.getTree())) { if ((name!= null) || (status!= null)) { assertThat(tw).isNotNull(); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(newjava.lang.String(or.open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(),java.nio.charset.StandardCharsets.UTF_8)); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_FULL_NAME)).isEqualTo(name); assertThat(cfg.getString(AccountProperties.ACCOUNT, null, AccountProperties.KEY_STATUS)).isEqualTo(status); } else { assertThat(tw).isNull(); } } } }
@org.junit.Test public void getDetail() throwsjava.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()).getAccount(); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }
@org.junit.Test public void getDetail() throwsjava.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.maybeGet(admin.getId()).getAccount(); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }
@org.junit.Test public void getDetail() throwsjava.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.orGet(admin.getId()).getAccount(); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }
@org.junit.Test public void getDetail() throwsjava.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()).getAccount(); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); }
@org.junit.Test public void getDetail() throwsjava.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/accounts/" + (admin.username)) + "/detail/")); com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.restapi.account.GetDetail.AccountDetailInfo.class); com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo(admin, info); com.google.gerrit.reviewdb.client.Account account = accountCache.get(admin.getId()).getAccount(); assertThat(info.registeredOn).isEqualTo(account.getRegisteredOn()); accountCache.delete(admin.getId()).getAccount(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id,java.lang.String commitMessage) throwsjava.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).getAccount(), committer.getWhen(), committer); serverSideTestRepo.branch(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(committer).message(commitMessage).create(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id,java.lang.String commitMessage) throwsjava.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).get(), committer.getWhen(), committer); serverSideTestRepo.branch(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(committer).message(commitMessage).create(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id,java.lang.String commitMessage) throwsjava.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.maybeGet(admin.getId()).get(), committer.getWhen(), committer); serverSideTestRepo.branch(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(committer).message(commitMessage).create(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id,java.lang.String commitMessage) throwsjava.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.maybeGet(admin.getId()).get().getAccount(), committer.getWhen(), committer); serverSideTestRepo.branch(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(committer).message(commitMessage).create(); }
private void addNoteDbCommit(com.google.gerrit.reviewdb.client.Change.Id id,java.lang.String commitMessage) throwsjava.lang.Exception { if (!(notesMigration.commitChangeWrites())) { return; } org.eclipse.jgit.lib.PersonIdent committer = serverIdent.get(); org.eclipse.jgit.lib.PersonIdent author = noteUtil.newIdent(accountCache.get(admin.getId()).get().getAccount(), committer.getWhen(), committer); serverSideTestRepo.branch(com.google.gerrit.reviewdb.client.RefNames.changeMetaRef(id)).commit().author(author).committer(committer).message(commitMessage).create(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState:: getEditPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState:: getEditPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState:: getEditPreferences).orElseThrow(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState:: getEditPreferences).orElseThrow(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::getEditPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState:: getDiffPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState:: getDiffPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::getDiffPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getDiffPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState:: getDiffPreferences).orElseThrow(com.google.gerrit.server.ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getGeneralPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::getGeneralPreferences).orElseThrow(ResourceNotFoundException::new); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).map(AccountState::getGeneralPreferences).orElseThrow(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getGeneralPreferences).orElseThrow(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.orGet(id).map(AccountState::getGeneralPreferences).orElseThrow(ResourceNotFoundException::new); }
publicjava.time.Duration getDefaultTimeout(com.google.gerrit.server.update.RetryHelper.ActionType actionType) { switch (actionType) { case ACCOUNT_UPDATE : case CHANGE_UPDATE : return noteDbDefaultTimeout; case INDEX_QUERY : default : return defaultTimeout; } }
privatejava.time.Duration getDefaultTimeout(com.google.gerrit.server.update.RetryHelper.ActionType actionType) { switch (actionType) { case ACCOUNT_UPDATE : case CHANGE_UPDATE : return noteDbDefaultTimeout; case INDEX_QUERY : default : return defaultTimeout; } }
publicjava.time.Duration getDefaultTimeout(com.google.gerrit.server.update.RetryHelper.ActionType actionType) { return noteDbDefaultTimeout; }
publicjava.time.Duration getDefaultTimeout(com.google.gerrit.server.update.RetryHelper.ActionType actionType) { return defaultTimeout; }
publicjava.time.Duration getDefaultTimeout(com.google.gerrit.server.update.RetryHelper.ActionType actionType) { switch (actionType) { case ACCOUNT_UPDATE : case CHANGE_UPDATE : default : return noteDbDefaultTimeout; } }
private <T> T executeWithAttemptCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(actionType, opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
private <T> T executeWithAttemptCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(actionType, action, opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
private <T> T executeWithRetryCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(actionType, opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
<T> T executeWithAttemptCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(actionType, opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
< T> T executeWithAttemptCount(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throwsjava.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(actionType, opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return executeWithTimeoutCount(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); returnjava.util.Optional.ofNullable(accountState).map(AccountState::getAccount); }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.getOrNull(accountId); }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(accountId); returnjava.util.Optional.ofNullable(accountState).map(AccountState::getAccount); }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); return com.google.common.collect.ImmutableSet.of(accountState.getAccount()); }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account> getAccount(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState accountState = accountCache.getOrNull(accountId); returnjava.util.Optional.ofNullable(accountState.getAccount()); }
@org.junit.Test public void createdOnOfNewGroupMatchesCreatedOnOfReloadedGroup() throwsjava.lang.Exception {java.sql.Timestamp createdOn =java.sql.Timestamp.from(java.time.LocalDateTime.of(2017,java.time.Month.DECEMBER, 1, 17, 49, 13, 123).atOffset(java.time.ZoneOffset.UTC).toInstant()); com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setUpdatedOn(createdOn).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { groupConfig.commit(metaDataUpdate); } com.google.gerrit.server.group.InternalGroup createdGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.InternalGroup loadedGroup = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, createdGroup.getGroupUUID()).getLoadedGroup().get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); }
@org.junit.Test public void createdOnOfNewGroupMatchesCreatedOnOfReloadedGroup() throwsjava.lang.Exception {java.sql.Timestamp createdOn =java.sql.Timestamp.from(java.time.LocalDateTime.of(2017,java.time.Month.DECEMBER, 1, 17, 49, 13, 123).atOffset(java.time.ZoneOffset.UTC).toInstant()); com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setCreatedOn(createdOn).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { groupConfig.commit(metaDataUpdate); } com.google.gerrit.server.group.InternalGroup createdGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.InternalGroup loadedGroup = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, createdGroup.getGroupUUID()).getLoadedGroup().get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); }
@org.junit.Test public void createdOnOfNewGroupMatchesCreatedOnOfReloadedGroup() throwsjava.lang.Exception {java.sql.Timestamp createdOn =java.sql.Timestamp.from(java.time.LocalDateTime.of(2017,java.time.Month.DECEMBER, 1, 17, 49, 13, 123).atOffset(java.time.ZoneOffset.UTC).toInstant()); com.google.gerrit.server.group.db.GroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setUpdatedOn(createdOn).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { groupConfig.commit(metaDataUpdate); } com.google.gerrit.server.group.InternalGroup createdGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.InternalGroup loadedGroup = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, createdGroup.getGroupUUID()).getLoadedGroup().get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); }
@org.junit.Test public void createdOnOfNewGroupMatchesCreatedOnOfReloadedGroup() throwsjava.lang.Exception {java.sql.Timestamp createdOn =java.sql.Timestamp.from(java.time.LocalDateTime.of(2017,java.time.Month.DECEMBER, 1, 17, 49, 13, 123).atOffset(java.time.ZoneOffset.UTC).toInstant()); com.google.gerrit.server.group.db.GroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.GroupUpdate groupUpdate = com.google.gerrit.server.group.db.GroupUpdate.builder().setUpdatedOn(createdOn).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { groupConfig.commit(metaDataUpdate); } com.google.gerrit.server.group.InternalGroup createdGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.InternalGroup loadedGroup = com.google.gerrit.server.group.db.GroupConfig.loadForGroup(repository, createdGroup.getGroupUUID()).getLoadedGroup().get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); }
@org.junit.Test public void createdOnOfNewGroupMatchesCreatedOnOfReloadedGroup() throwsjava.lang.Exception {java.sql.Timestamp createdOn =java.sql.Timestamp.from(java.time.LocalDateTime.of(2017,java.time.Month.DECEMBER, 1, 17, 49, 13, 123).atOffset(java.time.ZoneOffset.UTC).toInstant()); com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setUpdatedOn(createdOn).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { groupConfig.commit(metaDataUpdate); } com.google.gerrit.server.group.InternalGroup createdGroup = groupConfig.getLoadedGroup().get(); com.google.gerrit.server.group.InternalGroup loadedGroup = groupConfig.loadForGroup(repository, createdGroup.getGroupUUID()).getLoadedGroup().get(); assertThat(createdGroup.getCreatedOn()).isEqualTo(loadedGroup.getCreatedOn()); }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller,java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdOnBehalfOf(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount())))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("id doesn't represent an account or is ambiguous", id)); } return user; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller,java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdOnBehalfOf(caller, id); if ((user == null) || (!(accountControlFactory.get().canSee(user.getAccount())))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("%s doesn't represent an account or is ambiguous", id)); } return user; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller,java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdOnBehalfOf(caller, id); if (!(accountControlFactory.get().canSee(user.getAccount())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("id doesn't represent an account or is ambiguous", id)); } return user; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller,java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdOnBehalfOf(caller, id); if (user == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("id doesn't represent an account or is ambiguous")); } return user; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf(@com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller,java.lang.String id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return parseIdOnBehalfOf(caller, id); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if (!(accountControlFactory.get().canSee(user.getAccount())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("id doesn't represent an account or is ambiguous", id)); } return new com.google.gerrit.server.account.AccountResource(user); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if (user == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("id doesn't represent an account or is ambiguous", id)); } return new com.google.gerrit.server.account.AccountResource(user); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if (user == null || (!(accountControlFactory.get().canSee(user.getAccount())))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("id doesn't represent an account or is ambiguous", id)); } return new com.google.gerrit.server.account.AccountResource(user); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if (!(accountControlFactory.get().canSee(user.getAccount())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("id doesn't represent an account or is ambiguous", id)); } return new com.google.gerrit.server.account.AccountResource(user.getAccount()); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseId(id.get()); if (!(accountControlFactory.get().canSee(user.getAccount())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(java.lang.String.format("id doesn't represent an account or is ambiguous", id)); } return new com.google.gerrit.server.account.AccountResource(user.get()); }
@org.junit.Test public void reduceComplexTreeToSingleValue() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceComplexTreeToSingleValue() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.no_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceComplexTreeToSingleValue() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NOT_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceComplexTreeToSingleValue() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceComplexTreeToSingleValue() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))).reduce()).isEqualTo(true); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceOr() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceOr() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceOr() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceOr() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); }
@org.junit.Test public void reduceOr() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); }
@org.junit.Test public void reduceNot() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)); }
@org.junit.Test public void reduceNot() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)); }
@org.junit.Test public void reduceNot() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.NOT(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)); }
@org.junit.Test public void reduceNot() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceNot() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); }
@org.junit.Test public void reduceAnd() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); }
@org.junit.Test public void reduceAnd() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); }
@org.junit.Test public void reduceAnd() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceAnd() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }
@org.junit.Test public void reduceAnd() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(false, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(true, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); } }
@org.junit.Test public void reduceComplexTreeToSmallerTree() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); }
@org.junit.Test public void reduceComplexTreeToSmallerTree() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.AND(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); }
@org.junit.Test public void reduceComplexTreeToSmallerTree() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.no_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.no_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); }
@org.junit.Test public void reduceComplexTreeToSmallerTree() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); }
@org.junit.Test public void reduceComplexTreeToSmallerTree() throwsjava.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.no_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); }
private static boolean evaluatesTriviallyToExpectedValue(com.google.gerrit.extensions.conditions.BooleanCondition cond, boolean expectedValue) { if (!(cond.evaluatesTrivially())) { return false; } return (cond.value()) == expectedValue; }
private static boolean evaluatesTriviallyToExpectedValue(com.google.gerrit.extensions.conditions.BooleanCondition cond, boolean expectedValue) { if (!(cond.evaluatesTrivially())) { return false; } return (condition.value()) == expectedValue; }
private static boolean evaluatesTriviallyToExpectedValue(com.google.gerrit.extensions.conditions.BooleanCondition cond, boolean expectedValue) { if (!(cond.evaluatesTrivially())) { return false; } return ((cond.value()) == expectedValue); }
private static boolean evaluatesTriviallyToExpectedValue(com.google.gerrit.extensions.conditions.BooleanCondition cond, boolean expectedValue) { if (!(cond.evaluatesTrivially())) { return false; } return (cond.value()) == (expectedValue? expectedValue : false); }
private static boolean evaluatesTriviallyToExpectedValue(com.google.gerrit.extensions.conditions.BooleanCondition cond, boolean expectedValue) { if (!(cond.evaluatesTrivially())) { return false; } return (cond.value()) == (expectedValue? true : false); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }
java @java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); return cache.get(id).getGeneralPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("editPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("editPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update( "Edit Diff Preferences via API", id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("editPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(("Edit Diff Preferences via API", id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("edit-preferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("editPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(EditPreferences.class, id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("diffPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(id, ( u) -> u.setDiffPreferences(input)); return accountCache.get(id).getDiffPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("DiffPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(id, ( u) -> u.setDiffPreferences(input)); return accountCache.get(id).getDiffPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("diffPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update( "Set Diff Preferences via API", id, ( u) -> u.setDiffPreferences(input)); return accountCache.get(id).getDiffPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("diffPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(("Set Diff Preferences via API", id, ( u) -> u.setDiffPreferences(input)); return accountCache.get(id).getDiffPreferences(); }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("DiffPreferences must be provided"); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update( "Set Diff Preferences via API", id, ( u) -> u.setDiffPreferences(input)); return accountCache.get(id).getDiffPreferences(); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::maybeGet).filter(java.util.Optional::isPresent).map(java.util.Optional:: get).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::maybeGet).filter(java.util.Optional::isPresent).map(java.util.Optional::get).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::get).filter(java.util.Optional::isPresent).map(java.util.Optional::get).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).filter(accountCache::maybeGet).filter(java.util.Optional::isPresent).map(java.util.Optional:: get).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::maybeGet).filter(java.util.Optional::isPresent).map(java.util.Optional:: get).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); };
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse resp,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getUserName().or(("a/" + (who.getAccountId()))))); } chain.doFilter(req, resp); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse resp,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getUserName()); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.ACCOUNT_ID_ATTR_KEY, who.getAccountId()); } chain.doFilter(req, resp); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse resp,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getUserName().get()); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.ACCOUNT_ID_ATTR_KEY, who.getAccountId()); } chain.doFilter(req, resp); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse resp,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getUserName().get()); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.ACCOUNT_ID_ATTR_KEY, who.getAccountId().get()); } chain.doFilter(req, resp); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest req,java x.servlet.ServletResponse resp,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((user!= null) && (user.isIdentifiedUser())) { com.google.gerrit.server.IdentifiedUser who = user.asIdentifiedUser(); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.REQ_ATTR_KEY, who.getUserName().get()); req.setAttribute(com.google.gerrit.httpd.GetUserFilter.ACCOUNT_ID_ATTR_KEY, who.getAccountId()); } chain.doFilter(req, resp, chain); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when,java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount();java.lang.String name = ua.getFullName();java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) {java.lang.String user = getUserName().orElse(( "account-" + (ua.getId().toString()) ));java.lang.String host; if ((canonicalUrl.get())!= null) { try { host = newjava.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = anonymousCowardName; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when,java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount();java.lang.String name = ua.getFullName();java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) {java.lang.String user = getUserName().orElse((("account-" + (ua.getId().toString()))));java.lang.String host; if ((canonicalUrl.get())!= null) { try { host = newjava.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = anonymousCowardName; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when,java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount();java.lang.String name = ua.getFullName();java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) {java.lang.String user = getUserName().orElse(( "account-" + (ua.getId().toString()) ));java.lang.String host; if ((canonicalUrl.get())!= null) { try { host = newjava.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = anonymousCowardName; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when,java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount();java.lang.String name = ua.getFullName();java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) {java.lang.String user = getUserName().orElse(( "account-" + (ua.getId().toString()))));java.lang.String host; if ((canonicalUrl.get())!= null) { try { host = newjava.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = anonymousCowardName; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(java.util.Date when,java.util.TimeZone tz) { final com.google.gerrit.reviewdb.client.Account ua = getAccount();java.lang.String name = ua.getFullName();java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) {java.lang.String user = getUserName().orElse(( "account-" + (ua.getId().toString()) ));java.lang.String host; if ((canonicalUrl.get())!= null) { try { host = newjava.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + "@") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (at < at) { name = email.substring(0, at); } else { name = anonymousCowardName; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }
java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) {java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent()) ) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails.stream(), com.google.common.collect.Streams.stream(user.getUserName())).collect(toImmutableSet()); } return com.google.common.collect.Streams.stream(user.getUserName()).collect(toImmutableSet()); }
java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) {java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent()) ) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails.stream(), com.google.common.collect.Streams.stream(user.getUserName())).collect(toImmutableSet()); } return com.google.common.collect.Streams.stream(user.getUserName()).collect(toImmutableSet()); } }
java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) {java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent()) ) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails, com.google.common.collect.Streams.stream(user.getUserName())).collect(toImmutableSet()); } return com.google.common.collect.Streams.stream(user.getUserName()).collect(toImmutableSet()); }
java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) {java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent()) || (emails.isEmpty())) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails.stream(), com.google.common.collect.Streams.stream(user.getUserName())).collect(toImmutableSet()); } return com.google.common.collect.Streams.stream(user.getUserName()).collect(toImmutableSet()); }
java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) {java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if (!(user.getUserName().isPresent()) || (emails.isEmpty())) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.Streams.concat(emails.stream(), com.google.common.collect.Streams.stream(user.getUserName())).collect(toImmutableSet()); } return com.google.common.collect.Streams.stream(user.getUserName()).collect(toImmutableSet()); } }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dcmd == null) { return "Command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] args = dcmd.getArguments(); commandName.append(".").append(args[ 0]); for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (key.toString().startsWith("$")) { commandName.append(".").append(value); } } } for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (!(key.toString().startsWith("$"))) { commandName.append(".").append(key).append(".").append(value); } } } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dcmd == null) { return "Command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] args = dcmd.getArguments(); commandName.append(".").append(args[ 1]); for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (key.toString().startsWith("$")) { commandName.append(".").append(value); } } } for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (!(key.toString().startsWith("$"))) { commandName.append(".").append(key).append(".").append(value); } } } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dcmd == null) { return "command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] args = dcmd.getArguments(); commandName.append(".").append(args[ 0]); for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (key.toString().startsWith("$")) { commandName.append(".").append(value); } } } for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (!(key.toString().startsWith("$"))) { commandName.append(".").append(key).append(".").append(value); } } } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dcmd == null) { return "dcmd was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] args = dcmd.getArguments(); commandName.append(".").append(args[ 0]); for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (key.toString().startsWith("$")) { commandName.append(".").append(value); } } } for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (!(key.toString().startsWith("$"))) { commandName.append(".").append(key).append(".").append(value); } } } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, com.google.common.collect.ListMultimap<java.lang.String,?> parameters) { if (dcmd == null) { return "dcmd was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] args = dcmd.getArguments(); commandName.append(".").append(args[ 1]); for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (key.toString().startsWith("$")) { commandName.append(".").append(value); } } } for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (!(key.toString().startsWith("$"))) { commandName.append(".").append(key).append(".").append(value); } } } return commandName.toString(); }
public boolean isSensitiveParameters(java.lang.String params) { return (this.sensitiveParameters) == null? false : sensitiveParameters.contains(params); }
public boolean isSensitiveParameters(java.lang.String params) { return (this.sensitiveParameters) == null? false : this.sensitiveParameters.contains(params); }
public boolean isSensitiveParameters(java.lang.String params) { return (this.insensitiveParameters) == null? false : sensitiveParameters.contains(params); }
public boolean isSensitiveParameters(java.lang.String params) { return (this.sensitiveParameters) == null? false : sensitiveParameters.contains(params); }
public boolean isSensitiveParameters(java.lang.String params) { return (this.sensitiveParameters) == null? false : this.sensitiveParameters.contains(params); };
public void addSensitiveParameters(java.lang.String sensitiveParameters) { if ((this.sensitiveParameters) == null) { this.sensitiveParameters = newjava.util.HashSet<>(); } this.sensitiveParameters.add(sensitiveParameters); }
private void addSensitiveParameters(java.lang.String sensitiveParameters) { if ((this.sensitiveParameters) == null) { this.sensitiveParameters = newjava.util.HashSet<>(); } this.sensitiveParameters.add(sensitiveParameters); }
public void addSensitiveParameters(java.lang.String sensitiveParameters) { if ((this.insensitiveParameters) == null) { this.insensitiveParameters = newjava.util.HashSet<>(); } this.insensitiveParameters.add(sensitiveParameters); }
public void addSensitiveParameters(java.lang.String sensitiveParameters) { if (this.sensitiveParameters == null) { this.sensitiveParameters = newjava.util.HashSet<>(); } this.sensitiveParameters.add(sensitiveParameters); }
public void addSensitiveParameters(java.lang.String sensitiveParameters) { if ((this.sensitiveParameters) == null) { this.sensitiveParameters = newjava.util.HashSet<>(); } this.sensitiveParameters.add(insensitiveParameters); }
publicjava.util.Set<java.lang.String> getSensitiveParamters() { return this.sensitiveParameters; }
publicjava.util.Set<java.lang.String> getSensitiveParameters() { return this.sensitiveParameters; }
publicjava.util.Set<java.lang.String> getSensitiveParams() { return this.sensitiveParameters; }
publicjava.util.List<java.lang.String> getSensitiveParamters() { return this.sensitiveParameters; }
publicjava.util.Set<java.lang.String> getSensitiveParamters() { return this.sensitiveParameters; }
public void setSensitiveParamaters(java.util.Set<java.lang.String> set) { this.sensitiveParameters = set; }
public void setSensitiveParameters(java.util.Set<java.lang.String> set) { this.sensitiveParameters = set; }
public void setSensitiveParams(java.util.Set<java.lang.String> set) { this.sensitiveParameters = set; }
private void setSensitiveParamaters(java.util.Set<java.lang.String> set) { this.sensitiveParameters = set; }
public void setSensitiveParamaters(javajava.util.Set<java.lang.String> set) { this.sensitiveParameters = set; }
com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); }java.lang.String[] cmdArgs = dcmd.getArguments();java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) {java.lang.String arg = cmdArgs[i]; if (arg.equals("--")) { for (i++; i < (cmdArgs.length); i++) { parms.put(("$" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith("--")) && (eqPos > 0)) {java.lang.String parm = arg.substring(0, eqPos); parms.put(parm, (dcmd.isSensitiveParameters(parm)? com.google.gerrit.sshd.SshLog.MASK : arg.substring(eqPos + 1))); continue; } if (arg.startsWith("-")) { if (paramName!= null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put(("$" + (argPos++)), arg); } else { parms.put(paramName, (dcmd.isSensitiveParameters(paramName)? com.google.gerrit.sshd.SshLog.MASK : arg) ); paramName = null; } } if (paramName!= null) { parms.put(paramName, null); } return parms; }
com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); }java.lang.String[] cmdArgs = dcmd.getArguments();java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) {java.lang.String arg = cmdArgs[i]; if (arg.equals("--")) { for (i++; i < (cmdArgs.length); i++) { parms.put(("$" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith("--")) && (eqPos > 0)) {java.lang.String parm = arg.substring(0, eqPos); parms.put(parm, (dcmd.isSensitiveParameters(parm)? com.google.gerrit.sshd.SshLog.MASK : arg.substring(eqPos + 1))); continue; } if (arg.startsWith("-")) { if (paramName!= null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put(("$" + (argPos++)), arg); } else { parms.put(paramName, (dcmd.isSensitiveParameters(paramName)? com.google.gerrit.sshd.SshLog.MASK : arg)); paramName = null; } } if (paramName!= null) { parms.put(paramName, null); } return parms; }
com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); }java.lang.String[] cmdArgs = dcmd.getArguments();java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) {java.lang.String arg = cmdArgs[i]; if (arg.equals("--")) { for (i++; i < (cmdArgs.length); i++) { parms.put(("$" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith("--")) && (eqPos > 0)) {java.lang.String parm = arg.substring(0, eqPos); parms.put(parm, (dcmd.isSensitiveParameters(parm)? com.google.gerrit.sshd.SshLog.MASK : arg.substring(eqPos + 1)); continue; } if (arg.startsWith("-")) { if (paramName!= null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put(("$" + (argPos++)), arg); } else { parms.put(paramName, (dcmd.isSensitiveParameters(paramName)? com.google.gerrit.sshd.SshLog.MASK : arg) ); paramName = null; } } if (paramName!= null) { parms.put(paramName, null); } return parms; }
com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); }java.lang.String[] cmdArgs = dcmd.getArguments();java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) {java.lang.String arg = cmdArgs[i]; if (arg.equals("--")) { for (i++; i < (cmdArgs.length); i++) { parms.put(("$" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith("--")) && (eqPos > 0)) {java.lang.String parm = arg.substring(0, eqPos); parms.put(parm, (dcmd.isSensitiveParameters(parm)? com.google.gerrit.sshd.SshLog.MASK : arg.substring(eqPos + 1)); continue; } if (arg.startsWith("-")) { if (paramName!= null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put(("$" + (argPos++)), arg); } else { parms.put(paramName, (dcmd.isSensitiveParameters(paramName)? com.google.gerrit.sshd.SshLog.MASK : arg)); paramName = null; } } if (paramName!= null) { parms.put(paramName, null); } return parms; }
private com.google.common.collect.ListMultimap<java.lang.String,?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); }java.lang.String[] cmdArgs = dcmd.getArguments();java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) {java.lang.String arg = cmdArgs[i]; if (arg.equals("--")) { for (i++; i < (cmdArgs.length); i++) { parms.put(("$" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith("--")) && (eqPos > 0)) {java.lang.String parm = arg.substring(0, eqPos); parms.put(parm, (dcmd.isSensitiveParameters(parm)? com.google.gerrit.sshd.SshLog.MASK : arg.substring(eqPos + 1))); continue; } if (arg.startsWith("-")) { if (paramName!= null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put(("$" + (argPos++)), arg); } else { parms.put(paramName, (dcmd.isSensitiveParameters(paramName)? com.google.gerrit.sshd.SshLog.MASK : arg) ); paramName = null; } } if (paramName!= null) { parms.put(paramName, null); } return parms; }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throwsjava.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) {java.io.StringWriter msg = newjava.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) {java.lang.String msg = (((getName().isEmpty()? "Code Review" : getName()) + " ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else { bc.setName((((getName()) + " ") + (commandName))); } checkSensitiveData(bc); bc.setArguments(args.toArray(newjava.lang.String[args.size()])); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) {java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); } }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throwsjava.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) {java.io.StringWriter msg = newjava.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) {java.lang.String msg = (((getName().isEmpty()? Code Review : getName()) + " ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else { bc.setName((((getName()) + " ") + (commandName))); } checkSensitiveData(bc); bc.setArguments(args.toArray(newjava.lang.String[args.size()])); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) {java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); } }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throwsjava.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) {java.io.StringWriter msg = newjava.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) {java.lang.String msg = (((getName().isEmpty()? "Code Review" : getName()) + " ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else { bc.setName((((getName()) + " ") + (commandName))); } checkSensitiveData(bc); bc.setArguments(args.toArray(newjava.lang.String[args.size()])); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) {java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); throw die(msg); } }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throwsjava.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) {java.io.StringWriter msg = newjava.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) {java.lang.String msg = (((getName().isEmpty()? Code Review : getName()) + " ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else { bc.setName((((getName()) + " ") + (commandName))); } checkSensitiveData(bc); bc.setArguments(args.toArray(newjava.lang.String[args.size()])); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); this.setSensitiveParamaters(((com.google.gerrit.sshd.BaseCommand) (cmd)).getSensitiveParamters()); } catch (com.google.gerrit.sshd.UnloggedFailure e) {java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); } }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) throwsjava.io.IOException { try { parseCommandLine(); if (com.google.common.base.Strings.isNullOrEmpty(commandName)) {java.io.StringWriter msg = newjava.io.StringWriter(); msg.write(usage()); throw die(msg.toString()); } final com.google.gerrit.sshd.CommandProvider p = commands.get(commandName); if (p == null) {java.lang.String msg = (((getName().isEmpty()? "Code Review" : getName()) + " ") + (commandName)) + " not found"; throw die(msg); } final org.apache.sshd.server.Command cmd = p.getProvider().get(); checkRequiresCapability(cmd); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { final com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); if (getName().isEmpty()) { bc.setName(commandName); } else { bc.setName((((getName()) + " ") + (commandName))); } checkSensitiveData(bc); bc.setArguments(args.toArray(newjava.lang.String[args.size()])); } else if (!(args.isEmpty())) { throw die(((commandName) + " does not take arguments")); } provideStateTo(cmd); atomicCmd.set(cmd); cmd.start(env); } catch (com.google.gerrit.sshd.UnloggedFailure e) {java.lang.String msg = e.getMessage(); if (!(msg.endsWith("\n"))) { msg += "\n"; } err.write(msg.getBytes(com.google.gerrit.sshd.ENC)); err.flush(); onExit(e.exitCode); throw die(e.getMessage()); } }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.common.collect.ListMultimap<java.lang.String,?> parameters = extractParameters(dcmd);java.lang.String cmd = extractWhat(dcmd, parameters); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + "ms")); finaljava.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_NOT_FOUND : status = "not-found"; break; case BaseCommand.STATUS_NOT_ADMIN : status = "not-admin"; break; default : status =java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status);java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async)!= null) { async.append(event); } audit(ctx, status, extractWhat(dcmd, parameters), parameters); }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.common.collect.ListMultimap<java.lang.String,?> parameters = extractParameters(dcmd); finaljava.lang.String cmd = extractWhat(dcmd, parameters); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + "ms")); finaljava.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_NOT_FOUND : status = "not-found"; break; case BaseCommand.STATUS_NOT_ADMIN : status = "not-admin"; break; default : status =java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status);java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async)!= null) { async.append(event); } audit(ctx, status, extractWhat(dcmd, parameters), parameters); }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.common.collect.ListMultimap<java.lang.String,?> parameters = extractParameters(dcmd);java.lang.String cmd = extractWhat(dcmd, parameters); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + "ms")); finaljava.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_NOT_FOUND : status = "not-found"; break; case BaseCommand.STATUS_NOT_ADMIN : status = "not-admin"; break; default : status =java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status);java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async)!= null) { async.append(event); } audit(ctx, status, extractWhat(dcmd, parameters), parameters); }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.common.collect.ListMultimap<java.lang.String,?> parameters = extractParameters(dcmd);java.lang.String cmd = extractWhat(dcmd, parameters); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + "ms")); finaljava.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_NOT_FOUND : status = "not-found"; break; case BaseCommand.STATUS_NOT_ADMIN : status = "not-admin"; break; default : status =java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status);java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async)!= null) { async.append(event); } audit(ctx, status, extractWhat(dcmd, parameters), parameters ); }
void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.common.collect.ListMultimap<java.lang.String,?> parameters = extractParameters(dcmd);java.lang.String cmd = extractWhat(dcmd, parameters); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + "ms")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + "ms")); finaljava.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = "killed"; break; case BaseCommand.STATUS_NOT_FOUND : status = "not-found"; break; case BaseCommand.STATUS_NOT_ADMIN : status = "not-admin"; break; default : status =java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); finaljava.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent!= null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async)!= null) { async.append(event); } audit(ctx, status, extractWhat(dcmd, parameters), parameters); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); return actionRuleError("Error evaluating project action rules, check server log"); }
private void logActionRuleError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); return actionRuleError(err); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err) { return actionRuleError("Error evaluating project action rules, check server log"); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err) { return actionRuleError("Error evaluating project action rules, check server log", err); }
private com.google.gerrit.common.data.SubmitTypeRecord logInvalidAction(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term record) { return logActionRuleError(((((((("Submit action rule " + rule) + " for change ") + (change.getId())) + " of ") + (getProject().getName())) + " output invalid result: ") + record)); }
private com.google.gerrit.common.data.SubmitTypeRecord logErrorInvalidAction(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term record) { return logActionRuleError(((((((("Submit action rule " + rule) + " for change ") + (change.getId())) + " of ") + (getProject().getName())) + " output invalid result: ") + record)); }
private com.google.gerrit.common.data.SubmitTypeRecord logInvalidAction(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term record) { return logActionRuleError((((((("Submit action rule " + rule) + " for change ") + (change.getId())) + " of ") + (getProject().getName())) + " output invalid result: ") + record)); }
private com.google.gerrit.common.data.SubmitTypeRecord logInvalidAction(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term record) { return logActionRuleError(((((("Submit action rule " + rule) + " for change ") + (change.getId())) + " of ") + (getProject().getName())) + " output invalid result: ") + record)); }
private com.google.gerrit.common.data.SubmitTypeRecord logInvalidAction(com.googlecode.prolog_cafe.lang.Term rule, com.googlecode.prolog_cafe.lang.Term record) { return logActionRuleError(((((((("Submit action rule " + rule) + " for change ") + (change.getId())) + " of ") + (getProject().getName())) + " output invalid result:\n ") + record)); }
private void logActionRuleError(java.lang.String err,java.lang.Exception e) { com.google.gerrit.server.project.ChangeControl.log.error(err, e); }
private com.google.gerrit.common.data.SubmitTypeRecord logError(java.lang.String err,java.lang.Exception e) { com.google.gerrit.server.project.ChangeControl.log.error(err, e); return actionRuleError("Error evaluating project action rules, check server log"); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err,java.lang.Exception e) { return actionRuleError("Error evaluating project action rules, check server log"); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err,java.lang.Exception e) { com.google.gerrit.server.project.ChangeControl.log.error(err, e); return actionRuleError(err, e); }
private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err,java.lang.Exception e) { return actionRuleError("Error evaluating project action rules, check server log", e); }
private com.google.gerrit.common.data.SubmitTypeRecord actionRuleError(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.status = SubmitTypeRecord.Status.RULE_ERROR; rec.errorMessage = err; return rec; }
public com.google.gerrit.common.data.SubmitTypeRecord actionRuleError(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.status = SubmitTypeRecord.Status.RULE_ERROR; rec.errorMessage = err; return rec; }
private com.google.gerrit.common.data.SubmitTypeRecord actionRuleError() { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.status = SubmitTypeRecord.Status.RULE_ERROR; rec.errorMessage = err; return rec; }
private void actionRuleError(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.status = SubmitTypeRecord.Status.RULE_ERROR; rec.errorMessage = err; }
private com.google.gerrit.common.data.SubmitTypeRecord actionRuleError(java.lang.String err) { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.common.data.SubmitTypeRecord(); rec.status = SubmitTypeRecord.Status.RULE_ERROR; rec.message = err; return rec; }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Jira is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsFacade.class).to(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class).asEagerSingleton(); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Plugin is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsFacade.class).to(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class).asEagerSingleton(); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("JIRA is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsFacade.class).to(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class).asEagerSingleton(); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Its is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsFacade.class).to(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class).asEagerSingleton(); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }
@java.lang.Override protected void configure() { if ((gerritConfig.getString(pluginName, null, "url"))!= null) { com.googlesource.gerrit.plugins.its.jira.JiraModule.LOG.info("Jira plugin is configured as ITS"); bind(com.googlesource.gerrit.plugins.its.jira.JiraConfig.class); bind(com.googlesource.gerrit.plugins.its.base.its.ItsFacade.class).to(com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.class).asEagerSingleton(); install(new com.googlesource.gerrit.plugins.its.base.ItsHookModule(pluginName, pluginCfgFactory)); } }
@org.junit.Test public void gerritConfigContainsSaneValues() throwsjava.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "url")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); jiraConfig = new com.googlesource.gerrit.plugins.its.jira.JiraConfig(cfg, com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getUsername()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); assertThat(jiraConfig.getUrl()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); }
@org.junit.Test public void gerritConfigContainsSaneValues() throwsjava.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "url")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); jiraConfig = new com.googlesource.gerrit.plugins.its.jira.JiraConfig(cfg, com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getUsername()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); assertThat(jiraConfig.getUrl()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); }
@org.junit.Test public void gerritConfigContainsSaneValues() throwsjava.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "url")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); jiraConfig = new com.googlesource.gerrit.plugins.its.jira.JiraConfig(cfg); assertThat(jiraConfig.getUsername()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); assertThat(jiraConfig.getUrl()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); }
@org.junit.Test public void gerritConfigContainsSaneValues() throwsjava.lang.Exception { assertThat(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); assertThat(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); assertThat(cfg.getString(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME, null, "url")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); jiraConfig = new com.googlesource.gerrit.plugins.its.jira.JiraConfig(cfg, com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getUsername()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); assertThat(jiraConfig.getUrl()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); }
@org.junit.Test public void gerritConfigContainsSaneValues() throwsjava.lang.Exception { when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.jira.JiraConfigTest.PLUGIN_NAME, null, "username")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.jira.JiraConfigTest.PLUGIN_NAME, null, "password")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); when(cfg.getString(com.googlesource.gerrit.plugins.its.jira.jira.JiraConfigTest.PLUGIN_NAME, null, "url")).thenReturn(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); jiraConfig = new com.googlesource.gerrit.plugins.its.jira.JiraConfig(cfg, com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PLUGIN_NAME); assertThat(jiraConfig.getUsername()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.USER); assertThat(jiraConfig.getPassword()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.PASS); assertThat(jiraConfig.getUrl()).isEqualTo(com.googlesource.gerrit.plugins.its.jira.JiraConfigTest.URL); }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throwsjava.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername(), jiraConfig.getPassword()); log.debug("Logged as User {}", jiraConfig.getUsername()); } return client; }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throwsjava.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername(), jiraConfig.getPassword()); log.debug("Connected as User {}", jiraConfig.getUsername()); } return client; }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throwsjava.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername(), jiraConfig.getPassword()); log.debug("Calculated as User {}", jiraConfig.getUsername()); } return client; }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throwsjava.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername(), jiraConfig.getPassword()); log.debug("Set as User {}", jiraConfig.getUsername()); } return client; }
private com.googlesource.gerrit.plugins.its.jira.JiraClient client() throwsjava.net.MalformedURLException { if ((client) == null) { log.debug("Connecting to jira at {}", jiraConfig.getUrl()); client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraConfig.getUrl(), jiraConfig.getUsername(), jiraConfig.getPassword()); log.debug("Created as User {}", jiraConfig.getUsername()); } return client; }
publicjava.lang.String getUrl() { return jiraUrl; }
publicjava.lang.String getUrl() { return url; }
privatejava.lang.String getUrl() { return jiraUrl; }
publicjava.lang.String getUrl();
@com.google.gerrit.common.Nullablejava.lang.String getUrl();
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state,java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.READ)))) || ((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.PUSH_AT_LEAST_ONE_REF))))) {java.lang.String op = operation.toLowerCase();java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent())? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("operation %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state,java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.READ)))) || ((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.PUSH_AT_LEAST_ONE_REF)))) {java.lang.String op = operation.toLowerCase();java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent())? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("operation %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state,java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.READ)))) || ((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.PUSH_AT_LEAST_ONE_REF))))) {java.lang.String op = operation.toLowerCase();java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent())? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("%s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state,java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.READ)))) || ((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.PUSH_AT_LEAST_ONE_REF))))) {java.lang.String op = operation.toLowerCase();java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent())? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("user %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
private void authorizeUser(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.project.ProjectState state,java.lang.String operation) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { com.google.gerrit.reviewdb.client.Project.NameKey projectName = state.getNameKey(); if (((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.DOWNLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.READ)))) || ((operation.equals(com.googlesource.gerrit.plugins.lfs.LfsApiServlet.UPLOAD)) && (!(permissionBackend.user(user).project(projectName).testOrFalse(com.googlesource.gerrit.plugins.lfs.PUSH_AT_LEAST_ONE_REF))))) {java.lang.String op = operation.toLowerCase();java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent())? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.LfsApiServlet.log.debug(java.lang.String.format("%s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); } }
@org.junit.Test public void testVerifyDecodeAgainstEncodedInput() throwsjava.lang.Exception {java.lang.String plain = "some text";java.lang.String encrypted = cipher.encrypt(plain);java.util.Optional<java.lang.String> decrypted = cipher.decrypt(encrypted); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isEqualTo(plain); }
@org.junit.Test public void testVerifyDecodeAgainstEncodedInput() throwsjava.lang.Exception {java.lang.String plain = "text";java.lang.String encrypted = cipher.encrypt(plain);java.util.Optional<java.lang.String> decrypted = cipher.decrypt(encrypted); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isEqualTo(plain); }
@org.junit.Test public void testVerifyDecodeAgainstEncodedInput() throwsjava.lang.Exception {java.lang.String plain = "test";java.lang.String encrypted = cipher.encrypt(plain);java.util.Optional<java.lang.String> decrypted = cipher.decrypt(encrypted); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isEqualTo(plain); }
@org.junit.Test public void testVerifyDecodeAgainstEncodedInput() throwsjava.lang.Exception {java.lang.String plain = "plain text";java.lang.String encrypted = cipher.encrypt(plain);java.util.Optional<java.lang.String> decrypted = cipher.decrypt(encrypted); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isEqualTo(plain); }
@org.junit.Test public void testVerifyDecodeAgainstEncodedInput() throwsjava.lang.Exception {java.lang.String plain = "Hello World";java.lang.String encrypted = cipher.encrypt(plain);java.util.Optional<java.lang.String> decrypted = cipher.decrypt(encrypted); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isEqualTo(plain); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized {java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent())? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Op %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized {java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent())? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("operation %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized {java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent()))? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Op %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized {java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName()!= null)? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Op %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized {java.lang.String project = state.getProject().getName();java.lang.String userName = (user.getUserName().isPresent())? user.getUserName().get() : "anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("Op %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty();java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isEmpty();java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty(); com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty();java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt); }
publicjava.util.Optional<T> deserialize(java.lang.String input) {java.util.Optional<java.lang.String> decrypted = cipher.decrypt(input); if (!(decrypted.isPresent())) { returnjava.util.Optional.empty(); } return createToken(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Processor.DELIMETER).splitToList(decrypted.get())); }
publicjava.util.Optional<T> deserialize(java.lang.String input) {java.util.Optional<java.lang.String> decrypted = cipher.decrypt(input); if (!(decrypted.isPresent())) { returnjava.util.Optional.empty(); } return createToken(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Processor.DELIMETER).splitToList(decrypted.get()); }
publicjava.util.Optional<T> deserialize(java.lang.String input) {java.util.Optional<T> decrypted = cipher.decrypt(input); if (!(decrypted.isPresent())) { returnjava.util.Optional.empty(); } return createToken(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Processor.DELIMETER).splitToList(decrypted.get())); }
publicjava.util.Optional<T> deserialize(java.lang.String input) {java.util.Optional<T> decrypted = cipher.decrypt(input); if (!(decrypted.isPresent())) { returnjava.util.Optional.empty(); } return createToken(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Processor.DELIMETER).splitToList(decrypted.get()); }
publicjava.util.Optional<T> deserialize(java.lang.String input) { if (!(input.isEmpty())) { returnjava.util.Optional.empty(); } return createToken(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Processor.DELIMETER).splitToList(input); }
protectedjava.util.Optional<T> createToken(java.util.List<java.lang.String> values);
protectedjava.util.Optional<T> createToken(java.util.Collection<java.lang.String> values);
protectedjava.util.Optional<T> createToken(java.util.List<java.lang.String> values);java.util.Optional<T> token;
protectedjava.util.Optional<T> createToken(java.util.List<java.lang.String> values) { return createToken(values, null); }
protectedjava.util.Optional<T> createToken(java.util.List<java.lang.String> values);java.util.Optional<T> token = null;
public boolean verifyAuthInfo(java.lang.String authToken,java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }
public boolean verifyAuthInfo(java.lang.String authToken,java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) {java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }
public boolean verifyAuthInfo(java.lang.String authToken,java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsAuthToken token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(); }
public boolean verifyAuthInfo(java.lang.String authToken,java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken authToken = processor.deserialize(authToken); if (!(authToken.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(authToken.get(), operation, id).verify(); }
public boolean verifyAuthInfo(java.lang.String authToken,java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = processor.deserialize(authToken); if (!(token.isPresent())) { return false; } return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.Verifier(token.get(), operation, id).verify(authToken); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }
@java.lang.Override protected com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { return com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken.empty(); } return com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken.createToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { returnjava.util.Optional.empty(); } return com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken.create(org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(0), values.get(1)), values.get(2))); }
@java.lang.Override protected com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { return com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken.empty(); } return com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken.create(org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(0), values.get(1)), values.get(2))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 3) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2)))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } return com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken.create(values.get(0), values.get(1), values.get(2), values.get(3))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3)))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2)), values.get(3))); }
javajava.util.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken,java.lang.String project,java.lang.String operation) {java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { returnjava.util.Optional.empty(); } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Authentication data was provided with auth token {}.", authToken); returnjava.util.Optional.empty(); } returnjava.util.Optional.of(token.get().user); }
javajava.util.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken,java.lang.String project,java.lang.String operation) {java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { returnjava.util.Optional.empty(); } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Authentication data was provided with auth token {}.", authToken); returnjava.util.Optional.empty(); } returnjava.util.Optional.of(token.get().user); }
java.util.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken,java.lang.String project,java.lang.String operation) {java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { returnjava.util.Optional.empty(); } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Authentication data was provided with auth token {}.", authToken); returnjava.util.Optional.empty(); } returnjava.util.Optional.of(token.get().user); }
javajava.util.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken,java.lang.String project,java.lang.String operation) {java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { returnjava.util.Optional.empty(); } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Invalid data was provided with auth token {}.", authToken); returnjava.util.Optional.empty(); } returnjava.util.Optional.of(token.get().user); }
javajava.util.Optional<java.lang.String> getUserFromValidToken(java.lang.String authToken,java.lang.String project,java.lang.String operation) {java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> token = processor.deserialize(authToken); if (!(token.isPresent())) { returnjava.util.Optional.empty(); } com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.Verifier(token.get(), project, operation); if (!(verifier.verify())) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.log.error("Invalid data was provided with auth token {}.", authToken); returnjava.util.Optional.empty(); } returnjava.util.Optional.of(token.get().user); }
@java.lang.Override protected com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken createToken(java.util.List<java.lang.String> values) { return new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0)); }
@java.lang.Override protected com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken createToken(java.util.List<java.lang.String> values) { return com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken.create(values.get(0)); }
@java.lang.Override protected com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken createToken(java.util.List<java.lang.String> values) { return new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); }
@java.lang.Override protected com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken createToken(java.util.List<java.lang.String> values) { return com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken.createToken(values.get(0)); }
@java.lang.Override protected com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken createToken(java.util.List<java.lang.String> values) { return com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken.createToken(values.get(0))); }
javajava.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { returnjava.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector =java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH); try {java.crypto.Cipher cipher = cipher(initVector,java.crypto.Cipher.DECRYPT_MODE); returnjava.util.Optional.of(newjava.lang.String(cipher.doFinal(java.util.Arrays.copyOfRange(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)),java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error("An exception was thrown during token verification", e); } returnjava.util.Optional.empty(); }
publicjava.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { returnjava.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector =java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH); try {java.crypto.Cipher cipher = cipher(initVector,java.crypto.Cipher.DECRYPT_MODE); returnjava.util.Optional.of(newjava.lang.String(cipher.doFinal(java.util.Arrays.copyOfRange(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)),java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error("An exception was thrown during token verification", e); } returnjava.util.Optional.empty(); }
publicjava.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { returnjava.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector =java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH); try {java x.crypto.Cipher cipher = cipher(initVector,java.crypto.Cipher.DECRYPT_MODE); returnjava.util.Optional.of(newjava.lang.String(cipher.doFinal(java.util.Arrays.copyOfRange(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)),java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error("An exception was thrown during token verification", e); } returnjava.util.Optional.empty(); }
javajavajava.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { returnjava.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector =java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH); try {java.crypto.Cipher cipher = cipher(initVector,java.crypto.Cipher.DECRYPT_MODE); returnjava.util.Optional.of(newjava.lang.String(cipher.doFinal(java.util.Arrays.copyOfRange(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)),java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error("An exception was thrown during token verification", e); } returnjava.util.Optional.empty(); }
privatejava.util.Optional<java.lang.String> decrypt(java.lang.String input) { if (com.google.common.base.Strings.isNullOrEmpty(input)) { returnjava.util.Optional.empty(); } byte[] bytes = org.eclipse.jgit.util.Base64.decode(input); byte[] initVector =java.util.Arrays.copyOf(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH); try {java.crypto.Cipher cipher = cipher(initVector,java.crypto.Cipher.DECRYPT_MODE); returnjava.util.Optional.of(newjava.lang.String(cipher.doFinal(java.util.Arrays.copyOfRange(bytes, com.googlesource.gerrit.plugins.lfs.LfsCipher.IV_LENGTH, bytes.length)),java.nio.charset.StandardCharsets.UTF_8)); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.LfsCipher.log.error("An exception was thrown during token verification", e); } returnjava.util.Optional.empty(); }
@org.junit.Test public void testVerifyDecodeAgainstInvalidInput() throwsjava.lang.Exception {java.lang.String plain = "some text";java.lang.String encrypted = cipher.encrypt(plain); while ((encrypted.charAt(0)) == (encrypted.charAt(1))) { encrypted = cipher.encrypt(plain); }java.util.Optional<java.lang.String> decrypted = cipher.decrypt((((encrypted.substring(1, 2)) + (encrypted.substring(0, 1))) + (encrypted.substring(2)))); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isNotEqualTo(plain); }
@org.junit.Test public void testVerifyDecodeAgainstInvalidInput() throwsjava.lang.Exception {java.lang.String plain = "text";java.lang.String encrypted = cipher.encrypt(plain); while ((encrypted.charAt(0)) == (encrypted.charAt(1))) { encrypted = cipher.encrypt(plain); }java.util.Optional<java.lang.String> decrypted = cipher.decrypt((((encrypted.substring(1, 2)) + (encrypted.substring(0, 1))) + (encrypted.substring(2)))); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isNotEqualTo(plain); }
@org.junit.Test public void testVerifyDecodeAgainstInvalidInput() throwsjava.lang.Exception {java.lang.String plain = "test";java.lang.String encrypted = cipher.encrypt(plain); while ((encrypted.charAt(0)) == (encrypted.charAt(1))) { encrypted = cipher.encrypt(plain); }java.util.Optional<java.lang.String> decrypted = cipher.decrypt((((encrypted.substring(1, 2)) + (encrypted.substring(0, 1))) + (encrypted.substring(2)))); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isNotEqualTo(plain); }
@org.junit.Test public void testVerifyDecodeAgainstInvalidInput() throwsjava.lang.Exception {java.lang.String plain = "Hello World";java.lang.String encrypted = cipher.encrypt(plain); while ((encrypted.charAt(0)) == (encrypted.charAt(1))) { encrypted = cipher.encrypt(plain); }java.util.Optional<java.lang.String> decrypted = cipher.decrypt((((encrypted.substring(1, 2)) + (encrypted.substring(0, 1))) + (encrypted.substring(2)))); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isNotEqualTo(plain); }
@org.junit.Test public void testVerifyDecodeAgainstInvalidInput() throwsjava.lang.Exception {java.lang.String plain = "This is a plain text";java.lang.String encrypted = cipher.encrypt(plain); while ((encrypted.charAt(0)) == (encrypted.charAt(1))) { encrypted = cipher.encrypt(plain); }java.util.Optional<java.lang.String> decrypted = cipher.decrypt((((encrypted.substring(1, 2)) + (encrypted.substring(0, 1))) + (encrypted.substring(2)))); assertThat(decrypted.isPresent()).isTrue(); assertThat(decrypted.get()).isNotEqualTo(plain); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { return userFactory.create(user.get()); } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { return userFactory.create(acc.get()); } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) {java.util.Optional<com.google.gerrit.server.account.AccountState> acc = accounts.getByUsername(user.get()); return userFactory.create(acc.get()); } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { return userFactory.create(user.get()); } return anonymous.get(); } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { return sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); } } return anonymous.get(); }
com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc!= null) { return userFactory.create(acc); } } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { return userFactory.create(user); } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); return userFactory.create(acc); } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accountCache.get(user.get()); if (acc!= null) { return userFactory.create(acc); } } } } return anonymous.get(); }
public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth,java.lang.String project,java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) {java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc!= null) { return userFactory.create(acc); } } } } return null; }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now().plusMillis(1)))).isTrue(); }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now()))).isTrue(); }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now()).plusMillis(1)))).isTrue(); }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now())); }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now().plusMillis(1)));).isTrue(); }
@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now().minusMillis(1)))).isFalse(); }
@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now()))).isFalse(); }
@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now().plusMillis(1)))).isFalse(); }
@org.junit.Test public void expiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(now().minusMillis(1)))).isFalse(); }
@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(LfsAuthToken.ISO.format(now()))).isFalse(); }
boolean onTime(java.lang.String dateTime) {java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; }
static boolean onTime(java.lang.String dateTime) {java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; }
booleanTime(java.lang.String dateTime) {java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; }
boolean onTime(java.lang.String dateTime) {java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return now.compareTo(dateTime); }
static boolean onTime(java.lang.String dateTime) {java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime))) <= 0; }
java staticjava.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now().plusSeconds(expirationSeconds)); }
javajava.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now().plusSeconds(expirationSeconds)); }
java.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now().plusSeconds(expirationSeconds)); }
java staticjava.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.format(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now().plusSeconds(expirationSeconds))); }

void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(appendUserData(account, accountId)); sb.append("\n"); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(appendUserData(account.getId(), account)); sb.append("\n"); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account);
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(appendSubmittedBy(account.getAccountId(), accountId, account)); }
void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId) { sb.append(appendUserData(accountId)); sb.append("\n"); }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "missing account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (!(com.google.common.base.Strings.isNullOrEmpty(account.getFullName()))) { needSpace = true; wroteData = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { if ( needSpace) { sb.append(" "); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "Invalid account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (!(com.google.common.base.Strings.isNullOrEmpty(account.getFullName()))) { needSpace = true; wroteData = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { if ( needSpace) { sb.append(" "); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "missing account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (!(com.google.common.base.Strings.isNullOrEmpty(account.getFullName()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { if ( needSpace) { sb.append(" "); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "Invalid account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (!(com.google.common.base.Strings.isNullOrEmpty(account.getFullName())))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { if ( needSpace) { sb.append(">"); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "Invalid account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (!(com.google.common.base.Strings.isNullOrEmpty(account.getFullName())))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (!(com.google.common.base.Strings.isNullOrEmpty(account.getPreferredEmail()))) { if ( needSpace) { sb.append(" "); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.maybeGet(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.maybeGet(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.maybeGet(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.maybeGet(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project); fmt.appendBranch(change.getDest().get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.maybeGet(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.maybeGet(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.maybeGet(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.maybeGet(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project); fmt.appendBranch(change.getDest()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.maybeGet(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.maybeGet(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "Invalid account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (((account.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" "); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "missing account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (((account.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" "); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "Invalid account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (((account.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" "); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(">"); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "Invalid account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (((account.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(">"); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(" "); } }
private void appendUserData(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { checkState(((account == null) || (accountId.equals(account.getId()))), "missing account IDs"); boolean needSpace = false; boolean wroteData = false; if (account!= null) { if (((account.getFullName())!= null) && (!(account.getFullName().isEmpty()))) { sb.append(account.getFullName()); needSpace = true; wroteData = true; } if (((account.getPreferredEmail())!= null) && (!(account.getPreferredEmail().isEmpty()))) { if (needSpace) { sb.append(" "); } sb.append("<").append(account.getPreferredEmail()).append(">"); wroteData = true; } } if (!wroteData) { sb.append(anonymousCowardName).append(">"); } }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append(appendUserData(account)); sb.append("\n"); }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("\n"); }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("\n"); appendUserData(account); sb.append("\n"); }
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account);
void appendApproval(com.google.gerrit.common.data.LabelType label, short value, com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(label.getName()); sb.append(com.google.gerrit.common.data.LabelValue.formatValue(value)); sb.append("\n"); appendUserData(account.getAccountId(), account); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId,java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.maybeGet(authorId).map(AccountState:: getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.map(Account::getName).orElse(("Account " + authorId)), (((authorId.get()) + "@") + (serverId)), when, serverIdent.getTimeZone()); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId,java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.maybeGet(authorId).map(AccountState:: getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.map(Account::getName).orElse(("Account " + authorId), (((authorId.get()) + "@") + (serverId)), when, serverIdent.getTimeZone()); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId,java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.maybeGet(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.map(Account::getName).orElse(("Account " + authorId)), (((authorId.get()) + "@") + (serverId)), when, serverIdent.getTimeZone()); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId,java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.maybeGet(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.map(Account::getName).orElse(("Account " + authorId), (((authorId.get()) + "@") + (serverId)), when, serverIdent.getTimeZone()); }
public org.eclipse.jgit.lib.PersonIdent newIdent(com.google.gerrit.reviewdb.client.Account.Id authorId,java.util.Date when, org.eclipse.jgit.lib.PersonIdent serverIdent) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> author = accountCache.maybeGet(authorId).map(AccountState::getAccount); return new org.eclipse.jgit.lib.PersonIdent(author.map(Account::getName).orElse(("Unknown " + authorId)), (((authorId.get()) + "@") + (serverId)), when, serverIdent.getTimeZone()); }
javajava.lang.String getBaseUrl() { return baseUrl; }
javajava. lang.String getBaseUrl() { return baseUrl; }
javajava.java.lang.String getBaseUrl() { return baseUrl; }
javajava.lang.String getBaseUrl();

javajava.net.HttpURLConnection prepHttpConnection(java.lang.String spec, boolean isPostRequest) throwsjava.io.IOException {java.net.URL urlWithSpec = (baseUrl) + spec;java.net.URL url = newjava.net.URL(urlWithSpec);java.net.ProxySelector proxySelector =java.net.ProxySelector.getDefault();java.net.Proxy proxy = org.eclipse.jgit.util.HttpSupport.proxyFor(proxySelector, url);java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection(proxy))); conn.setRequestProperty("Authorization", ("Basic " + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setRequestMethod("POST"); conn.setDoOutput(true); } else { conn.setRequestMethod("GET"); } return conn; }
javajava.net.HttpURLConnection prepHttpConnection(java.lang.String spec, boolean isPostRequest) throwsjava.io.IOException {java.net.URL urlWithSpec = (baseUrl) + spec;java.net.URL url = newjava.net.URL(urlWithSpec);java.net.ProxySelector proxySelector =java.net.ProxySelector.getDefault();java.net.Proxy proxy = org.eclipse.jgit.util.HttpSupport.proxyFor(proxySelector, url);java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection(proxy))); conn.setRequestProperty("Authorization", (("Basic " + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setRequestMethod("POST"); conn.setDoOutput(true); } else { conn.setRequestMethod("GET"); } return conn; }
javajava.net.HttpURLConnection prepHttpConnection(java.lang.String spec, boolean isPostRequest) throwsjava.io.IOException {java.net.URL urlWithSpec = (baseUrl) + spec;java.net.URL url = newjava.net.URL(urlWithSpec);java.net.ProxySelector proxySelector =java.net.ProxySelector.getDefault();java.net.Proxy proxy = org.eclipse.jgit.util.HttpSupport.proxyFor(proxySelector, url);java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection(proxy))); conn.setRequestProperty("Authorization", "Basic " + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setRequestMethod("POST"); conn.setDoOutput(true); } else { conn.setRequestMethod("GET"); } return conn; }
javajavajava.net.HttpURLConnection prepHttpConnection(java.lang.String spec, boolean isPostRequest) throwsjava.io.IOException {java.net.URL urlWithSpec = (baseUrl) + spec;java.net.URL url = newjava.net.URL(urlWithSpec);java.net.ProxySelector proxySelector =java.net.ProxySelector.getDefault();java.net.Proxy proxy = org.eclipse.jgit.util.HttpSupport.proxyFor(proxySelector, url);java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection(proxy))); conn.setRequestProperty("Authorization", ("Basic " + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setRequestMethod("POST"); conn.setDoOutput(true); } else { conn.setRequestMethod("GET"); } return conn; }
javajavajava.net.HttpURLConnection prepHttpConnection(java.lang.String spec, boolean isPostRequest) throwsjava.io.IOException {java.net.URL urlWithSpec = (baseUrl) + spec;java.net.URL url = newjava.net.URL(urlWithSpec);java.net.ProxySelector proxySelector =java.net.ProxySelector.getDefault();java.net.Proxy proxy = org.eclipse.jgit.util.HttpSupport.proxyFor(proxySelector, url);java.net.HttpURLConnection conn = ((java.net.HttpURLConnection) (url.openConnection(proxy))); conn.setRequestProperty("Authorization", (("Basic " + (auth))); conn.setRequestProperty("Content-Type", "application/json"); if (isPostRequest) { conn.setRequestMethod("POST"); conn.setDoOutput(true); } else { conn.setRequestMethod("GET"); } return conn; }
java @java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Validating project creation of {}", name); if (name.contains("")) { throw new com.google.gerrit.server.validators.ValidationException(java.lang.String.format(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.PROJECT_CANNOT_CONTAINS_SPACES_MSG, documentationUrl)); } com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Failed to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwners)))) { args.ownerIds.add(name); } }
java @java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Validating project creation of {}", name); if (name.contains("SPACES")) { throw new com.google.gerrit.server.validators.ValidationException(java.lang.String.format(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.PROJECT_CANNOT_CONTAINS_SPACES_MSG, documentationUrl)); } com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Failed to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwners)))) { args.ownerIds.add(name); } }
java @java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Validating project creation of {}", name); if (name.contains("")) { throw new com.google.gerrit.server.validators.ValidationException(java.lang.String.format(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.PROJECT_CANNOT_CONTAINS_SPACES_MSG, documentationUrl)); } com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Failed to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwners)))) { args.ownerIds.add(parentCtrl.getProject().getNameKey()); } }
java @java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Validating project creation of {}", name); if (name.contains("")) { throw new com.google.gerrit.server.validators.ValidationException(java.lang.String.format(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.PROJECT_CANNOT_CONTAINS_SPACES_MSG, documentationUrl)); } com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Failed to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwners)))) { args.ownerIds.add(parentCtrl.getProject().getNameKey(), "-createGroup", name); }
java @java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Validating project creation of {}", name); if (name.contains("SPACES")) { throw new com.google.gerrit.server.validators.ValidationException(java.lang.String.format(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.PROJECT_CANNOT_CONTAINS_SPACES_MSG, documentationUrl)); } com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Failed to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwners)))) { args.ownerIds.add(parentCtrl.getProject().getNameKey()); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project creation of {}", name); com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Unable to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + "-admins"))); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project creation of {}", name); com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Failed to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + "-admins"))); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Validating project creation of {}", name); com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Failed to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + "-admins"))); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Validating project creation of {}", name); com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Unable to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Project is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + "-admins"))); } }
@java.lang.Override public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException {java.lang.String name = args.getProjectName(); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Validating project creation of {}", name); com.google.gerrit.server.project.ProjectControl parentCtrl; try { parentCtrl = projectControlFactory.controlFor(args.newParent, self.get()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.error(((((("Unable to create project " + name) + " Cannot retrieve info about parent project ") + (args.newParent.get())) + ": ") + (e.getMessage())), e); throw new com.google.gerrit.server.validators.ValidationException(com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.AN_ERROR_OCCURRED_MSG); } try { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); com.ericsson.gerrit.plugins.projectgroupstructure.ProjectCreationValidator.log.debug("Admin is creating project, bypassing all rules"); return; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e) { } if (allProjectsName.get().equals(parentCtrl.getProject().getNameKey())) { validateRootProject(name, args.permissionsOnly); } else { validateProject(name, parentCtrl); } if ((!(parentCtrl.isOwner())) && (!(configDisableGrantingOwnership(parentCtrl)))) { args.ownerIds.add(createGroup((name + "-admins"))); } }
public boolean issueExists(java.lang.String issueKey) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey,java.net.HttpURLConnection.HTTP_OK, null);java.lang.Integer code = api.getResponseCode(); switch (code) { casejava.net.HttpURLConnection.HTTP_OK : return true; casejava.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("Issue {} not found", issueKey); return false; casejava.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", issueKey); return false; default : throw newjava.io.IOException(("Invalid HTTP code received: " + (code.toString()))); } }
public boolean issueExists(java.lang.String issueKey) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey,java.net.HttpURLConnection.HTTP_OK, null);java.lang.Integer code = api.getResponseCode(); switch (code) { casejava.net.HttpURLConnection.HTTP_OK : return true; casejava.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("Issue {} not found", issueKey); return false; casejava.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("No permission to read Issue {}", issueKey); return false; default : throw newjava.io.IOException(("Unexpected HTTP code received: " + (code.toString()))); } }
public boolean issueExists(java.lang.String issueKey) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey,java.net.HttpURLConnection.HTTP_OK, null);java.lang.Integer code = api.getResponseCode(); switch (code) { casejava.net.HttpURLConnection.HTTP_OK : return true; casejava.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("Issue {} not found", issueKey); return false; casejava.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("Not permission to read Issue {}", issueKey); return false; default : throw newjava.io.IOException(("Invalid HTTP code received: " + (code.toString()))); } }
public boolean issueExists(java.lang.String issueKey) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey,java.net.HttpURLConnection.HTTP_OK, null);java.lang.Integer code = api.getResponseCode(); switch (code) { casejava.net.HttpURLConnection.HTTP_OK : return true; casejava.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("Issue {} not found", issueKey); return false; casejava.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("Invalid permission to read Issue {}", issueKey); return false; default : throw newjava.io.IOException(("Unexpected HTTP code received: " + (code.toString()))); } }
public boolean issueExists(java.lang.String issueKey) throwsjava.io.IOException { com.googlesource.gerrit.plugins.its.jira.restapi.JiraRestApi<com.googlesource.gerrit.plugins.its.jira.restapi.JiraIssue> api = apiBuilder.getIssue(); api.doGet(issueKey,java.net.HttpURLConnection.HTTP_OK, null);java.lang.Integer code = api.getResponseCode(); switch (code) { casejava.net.HttpURLConnection.HTTP_OK : return true; casejava.net.HttpURLConnection.HTTP_NOT_FOUND : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("Issue {} not found", issueKey); return false; casejava.net.HttpURLConnection.HTTP_FORBIDDEN : com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error("Not permission to read Issue {}", issueKey); return false; default : throw newjava.io.IOException(("Unexpected HTTP code received: " + (code.toString()))); } }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return null; } match = account.get(); } return match; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return null; } match = account.get(); } return match; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return null; } match = account.get(); } return match; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return null; } match = account.get(); } return match; }
com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return null; } match = account.get(); } return match; }
java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.getIfMissing(fromId).getAccount(); finaljava.lang.String name = account.getFullName(); finaljava.lang.String email = account.getPreferredEmail();java.lang.StringBuilder f = newjava.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty())))) { f.append("From"); if ((name!= null) && (!(name.isEmpty()))) { f.append(" "); } if ((email!= null) && (!(email.isEmpty()))) { f.append(" <").append(email).append("> "); } f.append(":\n\n"); } return f.toString(); }
java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.get(fromId).getAccount(); finaljava.lang.String name = account.getFullName(); finaljava.lang.String email = account.getPreferredEmail();java.lang.StringBuilder f = newjava.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty())))) { f.append("From"); if ((name!= null) && (!(name.isEmpty()))) { f.append(" "); } if ((email!= null) && (!(email.isEmpty()))) { f.append(" <").append(email).append("> "); } f.append(":\n\n"); } return f.toString(); }
privatejava.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.getIfMissing(fromId).getAccount(); finaljava.lang.String name = account.getFullName(); finaljava.lang.String email = account.getPreferredEmail();java.lang.StringBuilder f = newjava.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty())))) { f.append("From"); if ((name!= null) && (!(name.isEmpty()))) { f.append(" "); } if ((email!= null) && (!(email.isEmpty()))) { f.append(" <").append(email).append("> "); } f.append(":\n\n"); } return f.toString(); }
javajava.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.getIfMissing(fromId).getAccount(); finaljava.lang.String name = account.getFullName(); finaljava.lang.String email = account.getPreferredEmail();java.lang.StringBuilder f = newjava.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty())))) { f.append("From"); if ((name!= null) && (!(name.isEmpty()))) { f.append(" "); } if ((email!= null) && (!(email.isEmpty()))) { f.append(" <").append(email).append("> "); } f.append(":\n\n"); } return f.toString(); }
java.lang.String getFromLine() { final com.google.gerrit.reviewdb.client.Account account = args.accountCache.getIfMissing(fromId).getAccount(); finaljava.lang.String name = account.getFullName(); finaljava.lang.String email = account.getPreferredEmail();java.lang.StringBuilder f = newjava.lang.StringBuilder(); if (((name!= null) && (!(name.isEmpty()))) || ((email!= null) && (!(email.isEmpty())))) { f.append("From"); if ((name!= null) && (!(name.isEmpty()))) { f.append(" <").append(name).append("> "); } if ((email!= null) && (!(email.isEmpty()))) { f.append(" <").append(email).append("> "); } f.append(":\n"); } return f.toString(); }
private void appendIdent(java.io.PrintWriter writer,java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id,java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(accountCache.get(id).getAccount(), ts, serverIdent);java.lang.StringBuilder name = newjava.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getName()); name.append(' <'); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getEmailAddress()); name.append('>'); appendHeaderField(writer, header, name.toString()); }
private void appendIdent(java.io.PrintWriter writer,java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id,java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(accountCache.getIfMissing(id).getAccount(), ts, serverIdent);java.lang.StringBuilder name = newjava.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getName()); name.append(' <'); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getEmailAddress()); name.append('>'); appendHeaderField(writer, header, name.toString()); }
private void appendIdent(java.io.PrintWriter writer,java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id,java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(accountCache.get(id).getAccount(), ts, serverIdent);java.lang.StringBuilder name = newjava.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getName()); name.append(" < "); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getEmailAddress()); name.append('>'); appendHeaderField(writer, header, name.toString()); }
private void appendIdent(java.io.PrintWriter writer,java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id,java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(accountCache.getIfMissing(id).getAccount(), ts, serverIdent);java.lang.StringBuilder name = newjava.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getName()); name.append(" < "); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getEmailAddress()); name.append('>'); appendHeaderField(writer, header, name.toString()); }
private void appendIdent(java.io.PrintWriter writer,java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id id,java.sql.Timestamp ts) { org.eclipse.jgit.lib.PersonIdent ident = newIdent(accountCache.getEvidence(id).getAccount(), ts, serverIdent);java.lang.StringBuilder name = newjava.lang.StringBuilder(); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getName()); name.append(' <'); org.eclipse.jgit.lib.PersonIdent.appendSanitized(name, ident.getEmailAddress()); name.append('>'); appendHeaderField(writer, header, name.toString()); }
public com.google.gerrit.reviewdb.client.Account findByNameOrEmail(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByNameOrEmail(nameOrEmail); return (r.size()) == 1? byId.getAccount() : null; }
public com.google.gerrit.reviewdb.client.Account findByNameOrEmail(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAllByNameOrEmail(nameOrEmail); return (r.size()) == 1? byId.getAccount(); }
public com.google.gerrit.reviewdb.client.Account findByNameOrEmail(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException { return findAllByNameOrEmail(nameOrEmail); }
public com.google.gerrit.reviewdb.client.Account findByNameOrEmail(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException { return findByNameOrEmail(nameOrEmail); }
public com.google.gerrit.reviewdb.client.Account findByNameOrEmail(java.lang.String nameOrEmail) { return findAllByNameOrEmail(nameOrEmail); }
private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = newjava.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.getIfMissing(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }
private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = newjava.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }
private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = newjava.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.getIfPresent(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }
private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if ((submitRecord.labels)!= null) { sa.labels = newjava.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.getIfMissing(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }
private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels)!= null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = newjava.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy)!= null) { com.google.gerrit.server.account.AccountState accountState = accountCache.getIfMissing(lbl.appliedBy); la.by = asAccountAttribute(accountState); } if ((lbl.status)!= null) { la.status = lbl.status.name(); } sa.labels.add(la); } } }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.get(id)); }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.getIfMissing(id)); }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { if (id == null) { return null; } return asAccountAttribute(accountCache.getIfPresent(id)); }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { return asAccountAttribute(accountCache.get(id)); }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute(com.google.gerrit.reviewdb.client.Account.Id id) { return asAccountAttribute(accountCache.getIfPresent(id)); }
protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).get(); }
private com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).get(); }
protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId); }
protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId) { return accountCache.get(accountId).getState(); }
protected com.google.gerrit.server.account.AccountState getAccountState(com.google.gerrit.reviewdb.client.Account.Id accountId);
protected void removeUsersThatIgnoredTheChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id,java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()).map(AccountState::getAccount).ifPresent(( a) -> removeUser(a)); } } }
protected void removeUsersThatIgnoredTheChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id,java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()).map(AccountState::getAccount).ifPresent(a -> removeUser(a)); } } }
private void removeUsersThatIgnoredTheChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id,java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()).map(AccountState::getAccount).ifPresent(( a) -> removeUser(a)); } } }
protected void removeUsersThatIgnoredTheChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id,java.util.Set<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()).map(AccountState::getAccount).ifPresent(( a) -> removeUser(a)); } } }
protected void removeUsersThatIgnoreTheChange() { for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id,java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { args.accountCache.get(e.getKey()).map(AccountState::getAccount).ifPresent(( a) -> removeUser(a)); } } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) {java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.getIfMissing(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) {java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.getEvvenIfMissing(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) {java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.getEvenIfMissing(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) {java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
@java @java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) {java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.getIfMissing(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) {java.lang.StringBuilder message = newjava.lang.StringBuilder(header); message.append("/"); message.append(me); message.append("/"); message.append(accountCache.getIfMissing(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(", ").join(values)); com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message.toString(), e); }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) {java.lang.StringBuilder message = newjava.lang.StringBuilder(header); message.append(me); message.append("/"); message.append(accountCache.getIfMissing(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(", ").join(values)); com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message.toString(), e); }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) {java.lang.StringBuilder message = newjava.lang.StringBuilder(header); message.append("/"); message.append(me); message.append("/"); message.append(accountCache.getIfMissing(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message.toString(), e))); }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) {java.lang.StringBuilder message = newjava.lang.StringBuilder(header); message.append(me); message.append("/"); message.append(accountCache.getIfMissing(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message.toString(), e))); }
private void logOrmException(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.lang.Iterable<?> values, com.google.gwtorm.server.OrmException e) {java.lang.StringBuilder message = newjava.lang.StringBuilder(header); message.append("/"); message.append(me); message.append("/"); message.append(accountCache.getIfMissing(me).getUserName().orElse(null)); message.append(" "); message.append(com.google.common.base.Joiner.on(com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message.toString(), e)); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.getIfMissing(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {1}/{2}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.getIfMissing(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {1}/{3}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.getIfMissing(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {1}/{2}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.getIfMissing(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {1}/{2}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> values, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : values) { com.google.gerrit.reviewdb.client.Account.Id accountId = m.getAccountId();java.lang.String userName = accountCache.getIfMissing(accountId).getUserName().orElse(null); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = m.getAccountGroupId();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {1}/{2}/{3}", accountId, userName, groupId, groupName)); } logOrmException(header, me, descriptions); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) {java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.getIfMissing(fromId).getAccount();java.lang.String fullName = a.getFullName();java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) {java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getAccount();java.lang.String fullName = a.getFullName();java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
java @java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) {java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.getIfMissing(fromId).getAccount();java.lang.String fullName = a.getFullName();java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
java @java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) {java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getAccount();java.lang.String fullName = a.getFullName();java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) {java.lang.String senderName; if (fromId!= null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getAccount();java.lang.String fullName = a.getFullName();java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
java @java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { finaljava.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.getIfMissing(fromId).getAccount();java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { finaljava.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.getIfMissing(fromId).getAccount();java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
java @java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { finaljava.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount();java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { finaljava.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount();java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { finaljava.lang.String senderName; if (fromId!= null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.getIfMissing(fromId).getAccount();java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); }java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.getIfMissing(id).getAccount(), events.getWhen(), serverIdent); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.get(id).getAccount(), events.getWhen(), serverIdent); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.getEvenIfMissing(id).getAccount(), events.getWhen(), serverIdent); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.getEvfIfMissing(id).getAccount(), events.getWhen(), serverIdent); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.getEvvenIfMissing(id).getAccount(), events.getWhen(), serverIdent); }
publicjava.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getIfMissing(accountId);java.lang.String name = who.getAccount().getFullName();java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + " < ") + email) + ">"; } else if (email!= null) { return email; } else if (name!= null) { return name; } return who.getUserName().orElse(null); }
publicjava.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId);java.lang.String name = who.getAccount().getFullName();java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + " < ") + email) + ">"; } else if (email!= null) { return email; } else if (name!= null) { return name; } return who.getUserName().orElse(null); }
privatejava.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getIfMissing(accountId);java.lang.String name = who.getAccount().getFullName();java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + " < ") + email) + ">"; } else if (email!= null) { return email; } else if (name!= null) { return name; } return who.getUserName().orElse(null); }
publicjava.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getIfMissing(accountId);java.lang.String name = who.getAccount().getFullName();java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + ": ") + email) + ">"; } else if (email!= null) { return email; } else if (name!= null) { return name; } return who.getUserName().orElse(null); }
publicjava.lang.String getUserNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getIfMissing(accountId); return who.getUserName().orElse(null); }
privatejava.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.getIfMissing(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = newIdent(account, when); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getName()); sb.append(' <'); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getEmailAddress()); sb.append('>'); return sb; }
privatejava.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = newIdent(account, when); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getName()); sb.append(' <'); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getEmailAddress()); sb.append('>'); return sb; }
java privatejava.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = newIdent(account, when); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getName()); sb.append(' <'); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getEmailAddress()); sb.append('>'); return sb; }
java privatejava.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.getIfMissing(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = newIdent(account, when); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getName()); sb.append(' <'); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getEmailAddress()); sb.append('>'); return sb; }
java privatejava.lang.StringBuilder addIdent(java.lang.StringBuilder sb, com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = accountCache.getIfPresent(accountId).getAccount(); org.eclipse.jgit.lib.PersonIdent ident = newIdent(account, when); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getName()); sb.append(' <'); org.eclipse.jgit.lib.PersonIdent.appendSanitized(sb, ident.getEmailAddress()); sb.append('>'); return sb; }
publicjava.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getIfMissing(accountId);java.lang.String name = who.getAccount().getFullName();java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + " < ") + email) + ">"; } else if (name!= null) { return name; } else if (email!= null) { return email; } else { return ((args.anonymousCowardName) + " ") + accountId; } }
publicjava.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getIfMissing(accountId);java.lang.String name = who.getAccount().getFullName();java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + " < ") + email) + ">"; } else if (name!= null) { return name; } else if (email!= null) { return email; } else { return ((args.anonymousCowardName) + " " + accountId); } }
publicjava.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getIfMissing(accountId);java.lang.String name = who.getAccount().getFullName();java.lang.String email = who.getAccount().getPreferredEmail(); if ((name!= null) && (email!= null)) { return ((name + " < ") + email) + ">"; } else if (name!= null) { return name; } else if (email!= null) { return email; } else { return ((args.anonymousCowardName) + " accountId"); } }
publicjava.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getIfMissing(accountId); return who.getAccount().getFullName().email(); }
publicjava.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { return args.accountCache.getIfMissing(accountId); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); finaljava.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.getIfMissing(id).getAccount(); finaljava.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); finaljava.lang.String e = a.getPreferredEmail(); if (!(a.isActive())) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { final com.google.gerrit.reviewdb.client.Account a = args.accountCache.get(id).getAccount(); finaljava.lang.String e = a.getPreferredEmail(); if ((!(a.isActive())) || (e == null)) { return null; } return new com.google.gerrit.server.mail.Address(a.getFullName(), e).toAddress(); }
private com.google.gerrit.server.mail.Address toAddress(com.google.gerrit.reviewdb.client.Account.Id id) { return args.accountCache.getIfMissing(id).getAccount(); }
protectedjava.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account userAccount = args.accountCache.get(accountId).getAccount();java.lang.String name = userAccount.getFullName(); if (name == null) { name = userAccount.getPreferredEmail(); } if (name == null) { name = ((args.anonymousCowardName) + accountId); } return name; }
protectedjava.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account userAccount = args.accountCache.get(accountId).getAccount();java.lang.String name = userAccount.getFullName(); if (name == null) { name = userAccount.getPreferredEmail(); } if (name == null) { name = ((args.anonymousCowardName) + " accountId"); } return name; }
privatejava.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account userAccount = args.accountCache.get(accountId).getAccount();java.lang.String name = userAccount.getFullName(); if (name == null) { name = userAccount.getPreferredEmail(); } if (name == null) { name = ((args.anonymousCowardName) + " accountId"); } return name; }
protectedjava.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account userAccount = args.accountCache.getIfMissing(accountId).getAccount();java.lang.String name = userAccount.getFullName(); if (name == null) { name = userAccount.getPreferredEmail(); } if (name == null) { name = ((args.anonymousCowardName) + accountId); } return name; }
protectedjava.lang.String getNameFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { if (accountId == null) { return args.gerritPersonIdent.getName(); } final com.google.gerrit.reviewdb.client.Account userAccount = args.accountCache.getIfMissing(accountId).getAccount();java.lang.String name = userAccount.getFullName(); if (name == null) { name = userAccount.getPreferredEmail(); } if (name == null) { name = ((args.anonymousCowardName) + " accountId"); } return name; }
private Account.Id user(java.lang.String name,java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); expect(accountCache.getIfMissing(eq(s.getAccount().getId()))).andReturn(s); return s.getAccount().getId(); }
private Account.Id user(java.lang.String name,java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); expect(accountCache.getEvictIfMissing(eq(s.getAccount().getId()))).andReturn(s); return s.getAccount().getId(); }
private Account.Id user(java.lang.String name,java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); expect(accountCache.evictIfMissing(eq(s.getAccount().getId()))).andReturn(s); return s.getAccount().getId(); }
private Account.Id user(java.lang.String name,java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); expect(accountCache.getEvvenIfMissing(eq(s.getAccount().getId()))).andReturn(s); return s.getAccount().getId(); }
private Account.Id user(java.lang.String name,java.lang.String email) { final com.google.gerrit.server.account.AccountState s = makeUser(name, email); expect(accountCache.getIfPresent(eq(s.getAccount().getId()))).andReturn(s); return s.getAccount().getId(); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::get).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::getIfMissing).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::getEvenIfMissing).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::get()).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
java.util.Set<com.google.gerrit.reviewdb.client.Account> getGroupMembers(com.google.gerrit.server.group.InternalGroup group, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen) throws com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { seen.add(group.getGroupUUID()); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group));java.util.Set<com.google.gerrit.reviewdb.client.Account> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).map(accountCache::getEvenIfMissing).map(AccountState::getAccount).collect(toImmutableSet());java.util.Set<com.google.gerrit.reviewdb.client.Account> indirectMembers = newjava.util.HashSet<>(); if (groupControl.canSeeGroup()) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seen.contains(subgroupUuid))) { indirectMembers.addAll(listAccounts(subgroupUuid, project, seen)); } } } return com.google.common.collect.Sets.union(directMembers, directMembers); }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.get(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return null; } match = account.get(); } return match; }
com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.get(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return null; } match = account.get(); } return match; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.get(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return match; } match = account.get(); } return match; }
com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) {java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.get(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match!= null) { return match; } match = account.get(); } return match; }
public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } return null; }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { if (changeAlreadyMerged) { logDebug("Cannot post-update steps for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getOldId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.submitInput.notify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.getIfMissing(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { if (changeAlreadyMerged) { logDebug("doing post-update steps for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getOldId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.submitInput.notify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.getIfMissing(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { if (changeAlreadyMerged) { logDebug("Cannot post-update steps for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getOldId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.submitInput.notify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.getEvvenIfMissing(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { if (changeAlreadyMerged) { logDebug("doing post-update steps for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getOldId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.submitInput.notify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.getEvvenIfMissing(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }
@java.lang.Override public final void postUpdate(com.google.gerrit.server.update.Context ctx) throwsjava.lang.Exception { if (changeAlreadyMerged) { logDebug("doing post-update steps for change {}", getId()); return; } postUpdateImpl(ctx); if ((command)!= null) { args.tagCache.updateFastForward(getProject(), command.getRefName(), command.getOldId(), command.getNewId()); if (RefNames.REFS_CONFIG.equals(getDest().get())) { args.projectCache.evict(getProject()); com.google.gerrit.server.project.ProjectState p = args.projectCache.get(getProject()); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(getProject())) { git.setGitwebDescription(p.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot update description of " + (p.getName())), e); } } } try { args.mergedSenderFactory.create(ctx.getProject(), getId(), submitter.getAccountId(), args.submitInput.notify, args.accountsToNotify).sendAsync(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.error(("Cannot email merged notification for " + (getId())), e); } if (((mergeResultRev)!= null) && (!(args.dryrun))) { args.changeMerged.fire(updatedChange, mergedPatchSet, args.accountCache.evict(submitter.getAccountId()), args.mergeTip.getCurrentTip().name(), ctx.getWhen()); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in,java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalAccountDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.get(id); fill(info, state, state.getExternalIds(), options); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<com.google.gerrit.extensions.common.AccountInfo> in,java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalAccountDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.get(id); fill(info, state, state.getExternalIds(), options); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<com.google.gerrit.extensions.common.AccountInfo> in,java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalAccountDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); com.google.gerrit.server.account.AccountState state = accountCache.getIfMissing(id); fill(info, state, state.getExternalIds(), options); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in,java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalAccountDirectory.ID_ONLY)) { return; } for (com.google.gerrit.extensions.common.AccountInfo info : in) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id(info._accountId); fill(info, state, state.getExternalIds(), options); } }
@java.lang.Override public void fillAccountInfo(java.lang.Iterable<? extends com.google.gerrit.extensions.common.AccountInfo> in,java.util.Set<com.google.gerrit.server.account.FillOptions> options) throws com.google.gerrit.server.account.DirectoryException { if (options.equals(com.google.gerrit.server.account.InternalAccountDirectory.ID_ONLY)) { return; } fill(in, options); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.get(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.get(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.get(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.get(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.get(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.get(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest().get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.get(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.get(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project); fmt.appendBranch(change.getDest().get()); }
private void createCodeReviewNote(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet ps, com.googlesource.gerrit.plugins.reviewnotes.HeaderFormatter fmt) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes.getChange(); com.google.gerrit.reviewdb.client.PatchSetApproval submit = null; for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvalsUtil.byPatchSet(reviewDb, notes, userFactory.create(change.getOwner()), ps.getId(), null, null)) { if ((a.getValue()) == 0) { } else if (a.isLegacySubmit()) { submit = a; } else { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(a.getLabelId()); if (type!= null) { fmt.appendApproval(type, a.getValue(), a.getAccountId(), accountCache.get(a.getAccountId()).map(AccountState::getAccount).orElse(null)); } } } if (submit!= null) { fmt.appendSubmittedBy(submit.getAccountId(), accountCache.get(submit.getAccountId()).map(AccountState::getAccount).orElse(null)); fmt.appendSubmittedAt(submit.getGranted()); } if ((canonicalWebUrl)!= null) { fmt.appendReviewedOn(canonicalWebUrl, ps.getId().getParentKey()); } fmt.appendProject(project.get()); fmt.appendBranch(change.getDest()); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.getIfMissing(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ")); out.write(java.lang.String.format("Group %s group %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.getIfMissing(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ")); out.write(java.lang.String.format("%s group %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.getIfMissing(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining( out.write(java.lang.String.format("Group %s group %s: %s", action, group.getName(), names).getBytes(com.google.gerrit.sshd.commands.ENC)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.getIfMissing(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ").getBytes(com.google.gerrit.sshd.commands.ENC)); out.write(java.lang.String.format("Group %s group %s: %s", action, group.getName(), names)); }
private void reportMembersAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group,java.util.List<com.google.gerrit.reviewdb.client.Account.Id> accountIdList) throwsjava.io.IOException,java.io.UnsupportedEncodingException {java.lang.String names = accountIdList.stream().map(( accountId) -> com.google.common.base.MoreObjects.firstNonNull(accountCache.getIfMissing(accountId).getAccount().getPreferredEmail(), "n/a")).collect(java.util.stream.Collectors.joining(", ").getBytes(com.google.gerrit.sshd.commands.ENC)); out.write(java.lang.String.format("Group %s group %s: %s\n", action, group.getName(), names)); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/drafst/master").canPerform(com.google.gerrit.server.permissions.PUSH).isFalse(); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/drafst/master").canPerform(com.google.gerrit.server.permissions.PUSH)); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/drafst/master").canPerform()).isFalse(); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); block(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/drafst/master").canPerform(com.google.gerrit.server.permissions.PUSH)).isFalse(); }
@org.junit.Test public void blockPushDrafts() { allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/for/refs/*"); allow(parent, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.ANONYMOUS_USERS, "refs/drafts/*"); allow(local, com.google.gerrit.server.permissions.PUSH, com.google.gerrit.server.permissions.REGISTERED_USERS, "refs/drafts/*"); com.google.gerrit.server.permissions.ProjectControl u = user(local); assertCreateChange("refs/heads/master", u); assertThat(u.controlForRef("refs/drafst/master").canPerform(com.google.gerrit.server.permissions.PUSH).isFalse(); }
private staticjava.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "empty state string for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0));java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) {java.lang.String p = parts.get(i);java.util.List<java.lang.String> draftParts = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "invalid draft state part for change %s: %s", changeId, p);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(draftParts.get(0)); checkArgument(accountId.isPresent(), "invalid account ID in draft state part for change %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } returnjava.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
private staticjava.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "empty state string for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0));java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) {java.lang.String p = parts.get(i);java.util.List<java.lang.String> draftParts = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "invalid draft state part for change %s: %s", changeId, p);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(draftParts.get(0)); checkArgument(accountId.isPresent(), "missing account ID in draft state part for change %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } returnjava.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
public staticjava.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "empty state string for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0));java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) {java.lang.String p = parts.get(i);java.util.List<java.lang.String> draftParts = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "invalid draft state part for change %s: %s", changeId, p);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(draftParts.get(0)); checkArgument(accountId.isPresent(), "invalid account ID in draft state part for change %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } returnjava.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
private staticjava.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "empty state string for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0));java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) {java.lang.String p = parts.get(i);java.util.List<java.lang.String> draftParts = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "empty draft state part for change %s: %s", changeId, p);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(draftParts.get(0)); checkArgument(accountId.isPresent(), "invalid account ID in draft state part for change %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } returnjava.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
private staticjava.util.Optional<com.google.gerrit.server.notedb.NoteDbChangeState.RefState> parse(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> parts) { checkArgument((!(parts.isEmpty())), "empty state string for change %s", changeId); org.eclipse.jgit.lib.ObjectId changeMetaId = org.eclipse.jgit.lib.ObjectId.fromString(parts.get(0));java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.Maps.newHashMapWithExpectedSize(((parts.size()) - 1)); com.google.common.base.Splitter s = com.google.common.base.Splitter.on('='); for (int i = 1; i < (parts.size()); i++) {java.lang.String p = parts.get(i);java.util.List<java.lang.String> draftParts = s.splitToList(p); checkArgument(((draftParts.size()) == 2), "missing draft state part for change %s: %s", changeId, p);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(draftParts.get(0)); checkArgument(accountId.isPresent(), "missing account ID in draft state part for change %s: %s", changeId, p); draftIds.put(accountId.get(), org.eclipse.jgit.lib.ObjectId.fromString(draftParts.get(1))); } returnjava.util.Optional.of(com.google.gerrit.server.notedb.NoteDbChangeState.RefState.create(changeMetaId, draftIds)); }
privatejava.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(idStr); if (!(id.isPresent())) { returnjava.util.Optional.empty(); } try { return auth(accounts.get(id.get())); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log("Cannot query database", e); returnjava.util.Optional.empty(); } }
privatejava.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(idStr); if (!(id.isPresent())) { returnjava.util.Optional.empty(); } try { return auth(accounts.get(id)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log("Cannot query database", e); returnjava.util.Optional.empty(); } }
privatejava.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(idStr); if (id.isPresent()) { returnjava.util.Optional.empty(); } try { return auth(accounts.get(id.get())); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log("Cannot query database", e); returnjava.util.Optional.empty(); } }
privatejava.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(idStr); if (id.isEmpty()) { returnjava.util.Optional.empty(); } try { return auth(accounts.get(id.get())); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { getServletContext().log("Cannot query database", e); returnjava.util.Optional.empty(); } }
privatejava.util.Optional<com.google.gerrit.server.account.AuthResult> byAccountId(java.lang.String idStr) { return byAccountId(idStr); }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile(nameOrEmail); if (m.matches()) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(1)); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches("^[1-9][0-9]*$")) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(nameOrEmail); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) {java.util.Optional<com.google.gerrit.server.account.AccountState> who = byId.getByUsername(nameOrEmail); if (who.isPresent()) { return com.google.common.collect.ImmutableSet.of(who.map(( a) -> a.getAccount().getId()).get()); } } return findAllByNameOrEmail(nameOrEmail); }
publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile(nameOrEmail); if (m.matches()) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(1)); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches("^[1-9][0-9]*$")) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(nameOrEmail); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) {java.util.Optional<com.google.gerrit.server.account.AccountState> who = byId.getByUsername(nameOrEmail); if (who.isPresent()) { return com.google.common.collect.ImmutableSet.of(who.map(( a) -> a.getAccount().getId()).get()); } } return findAllByNameOrEmail(nameOrEmail); }
javajava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile(nameOrEmail); if (m.matches()) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(1)); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches("^[1-9][0-9]*$")) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(nameOrEmail); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) {java.util.Optional<com.google.gerrit.server.account.AccountState> who = byId.getByUsername(nameOrEmail); if (who.isPresent()) { return com.google.common.collect.ImmutableSet.of(who.map(( a) -> a.getAccount().getId()).get()); } } return findAllByNameOrEmail(nameOrEmail); }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile("^[1-9][0-9]*$"); if (m.matches()) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(1)); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches("^[1-9][0-9]*$")) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(nameOrEmail); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) {java.util.Optional<com.google.gerrit.server.account.AccountState> who = byId.getByUsername(nameOrEmail); if (who.isPresent()) { return com.google.common.collect.ImmutableSet.of(who.map(( a) -> a.getAccount().getId()).get()); } } return findAllByNameOrEmail(nameOrEmail); }
publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAll(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.regex.Matcher m =java.util.regex.Pattern.compile("^[1-9][0-9]*$"); if (m.matches()) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(m.group(1)); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches("^[1-9][0-9]*$")) {java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> id = Account.Id.parse(nameOrEmail); if (id.isPresent()) { return com.google.common.collect.Streams.stream(accounts.get(id.get())).map(( a) -> id.get()).collect(toImmutableSet()); } } if (nameOrEmail.matches(Account.USER_NAME_PATTERN)) {java.util.Optional<com.google.gerrit.server.account.AccountState> who = byId.getByUsername(nameOrEmail); if (who.isPresent()) { return com.google.common.collect.ImmutableSet.of(who.map(( a) -> a.getAccount().getId()).get()); } } return findAllByNameOrEmail(nameOrEmail); }
@java.lang.Override public com.google.gerrit.server.mail.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailRegistrationToken(); com.google.gwtjsonrpc.server.ValidToken token; try { token = emailRegistrationToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); }java.lang.String payload = newjava.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()),java.nio.charset.StandardCharsets.UTF_8);java.util.regex.Matcher matcher =java.util.regex.Pattern.compile("^([0-9]+):(.+@.+)$").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1)).orElseThrow(InvalidTokenException::new);java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
java @java.lang.Override public com.google.gerrit.server.mail.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailRegistrationToken(); com.google.gwtjsonrpc.server.ValidToken token; try { token = emailRegistrationToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); }java.lang.String payload = newjava.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()),java.nio.charset.StandardCharsets.UTF_8);java.util.regex.Matcher matcher =java.util.regex.Pattern.compile("^([0-9]+):(.+@.+)$").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1)).orElseThrow(InvalidTokenException::new);java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
@java.lang.Override public com.google.gerrit.server.mail.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailRegistrationToken(); com.google.gwtjsonrpc.server.ValidToken token; try { token = emailRegistrationToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); }java.lang.String payload = newjava.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()),java.nio.charset.StandardCharsets.UTF_8);java.util.regex.Matcher matcher =java.util.regex.Pattern.compile("^([0-9]+):(.+@.+)$").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1));java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
@com.google.gerrit.server.mail.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailRegistrationToken(); com.google.gwtjsonrpc.server.ValidToken token; try { token = emailRegistrationToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); }java.lang.String payload = newjava.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()),java.nio.charset.StandardCharsets.UTF_8);java.util.regex.Matcher matcher =java.util.regex.Pattern.compile("^([0-9]+):(.+@.+)$").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1)).orElseThrow(InvalidTokenException::new);java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
java @java.lang.Override public com.google.gerrit.server.mail.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.server.mail.InvalidTokenException { checkEmailRegistrationToken(); com.google.gwtjsonrpc.server.ValidToken token; try { token = emailRegistrationToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.server.mail.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); }java.lang.String payload = newjava.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()),java.nio.charset.StandardCharsets.UTF_8);java.util.regex.Matcher matcher =java.util.regex.Pattern.compile("^([0-9]+):(.+@.+)$").matcher(payload); if (!(matcher.matches())) { throw new com.google.gerrit.server.mail.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(matcher.group(1));java.lang.String newEmail = matcher.group(2); return new com.google.gerrit.server.mail.ParsedToken(id, newEmail); }
public staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { returnjava.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str))); } catch (java.lang.NumberFormatException e) { returnjava.util.Optional.empty(); } }
private staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { returnjava.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str))); } catch (java.lang.NumberFormatException e) { returnjava.util.Optional.empty(); } }
public staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { returnjava.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str))); } catch (java.lang.NumberFormatException e) { returnjava.util.Optional.empty(); } }
public static com.google.gerrit.reviewdb.client.Account.Id parse(java.lang.String str) { try { return new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str)); } catch (java.lang.NumberFormatException e) { return com.google.gerrit.reviewdb.client.Account.Id.empty(); } }
public staticjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> parse(java.lang.String str) { try { returnjava.util.Optional.of(new com.google.gerrit.reviewdb.client.Account.Id(java.lang.Integer.parseInt(str))); } catch (java.lang.NumberFormatException e) { returnjava.util.Optional.of(); } }
private static void dashboard(java.lang.String token) {java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(rest); if (accountId.isPresent()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get())); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }
private static void dashboard(java.lang.String token) {java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(rest); if (accountId.isPresent()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get())); return; } if (rest.startsWith("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }
static void dashboard(java.lang.String token) {java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(rest); if (accountId.isPresent()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get())); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }
public static void dashboard(java.lang.String token) {java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(rest); if (accountId.isPresent()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get())); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(null); s.setRequiresSignIn(true); com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }
private static void dashboard(java.lang.String token) {java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token);java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> accountId = Account.Id.parse(rest); if (accountId.isPresent()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(accountId.get())); return; } if (rest.equals("self")) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId())); } else { com.google.gerrit.client.ui.Screen s = new com.google.gerrit.client.changes.AccountDashboardScreen(); s.setRequiresSignIn(true); com.google.gerrit.client.Gerrit.display(token, s); } return; } if (rest.startsWith("?")) { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.changes.CustomDashboardScreen(rest.substring(1))); return; } com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); }
javajava.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERGE_FIRST_PARENT_UPDATE : return ("New merge patch set was added with a new first parent relative to " + (priorPatchSetId.get())) + "."; case TRIVIAL_REBASE : return ("Patch Set " + (priorPatchSetId.get())) + " was rebased."; case NO_CHANGE : return ("New patch set was added with same tree, parent " + ((commit.getParentCount())!= 1? "s" : "")) + " and commit message as Patch Set " + (priorPatchSetId.get())) + "."; case NO_CODE_CHANGE : return "Commit message was updated."; case REWORK : default : return null; } }
javajava.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERGE_FIRST_PARENT_UPDATE : return ("New merge patch set was added with a new first parent relative to " + (priorPatchSetId.get())) + "."; case TRIVIAL_REBASE : return ("Patch Set " + (priorPatchSetId.get())) + " was rebased."; case NO_CHANGE : return (("New patch set was added with same tree, parent " + ((commit.getParentCount())!= 1? "s" : "")) + " and commit message as Patch Set " + (priorPatchSetId.get())) + "."; case NO_CODE_CHANGE : return "Commit message was updated."; case REWORK : default : return null; } }
javajava.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERGE_FIRST_PARENT_UPDATE : return ("New merge patch set was added with a new first parent relative to " + (priorPatchSetId.get())) + "."; case TRIVIAL_REBASE : return ("Patch Set " + (priorPatchSetId.get())) + " was rebased."; case NO_CHANGE : return ("New patch set was added with same tree, parent " + ((commit.getParentCount())!= 1? "s" : "")) + " and commit message as Patch Set " + (priorPatchSetId.get())) + "."; case NO_CODE_CHANGE : return "Commit message was updated."; default : return null; } }
javajava.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERGE_FIRST_PARENT_UPDATE : return ("New merge patch set was added with a new first parent relative to " + (priorPatchSetId.get())) + "."; case TRIVIAL_REBASE : return ("Patch Set " + (priorPatchSetId.get())) + " was rebased."; case NO_CHANGE : return (("New patch set was added with same tree, parent " + ((commit.getParentCount())!= 1? "s" : "")) + " and commit message as Patch Set " + (priorPatchSetId.get())) + "."; case NO_CODE_CHANGE : return "Commit message was updated."; default : return null; } }
javajava.lang.String changeKindMessage(com.google.gerrit.extensions.client.ChangeKind changeKind) { switch (changeKind) { case MERGE_FIRST_PARENT_UPDATE : return ("New merge patch set was added with a new first parent relative to " + (priorPatchSetId.get())) + "."; case TRIVIAL_REBASE : return ("Patch Set " + (priorPatchSetId.get())) + " was rebased."; case NO_CHANGE : return ("New patch set was added with same tree, parent " + ((commit.getParentCount())!= 1? "s" : "")) + " and commit message as Patch Set " + (priorPatchSetId.get())) + "."; case NO_CODE_CHANGE : return ("Commit message was updated."); case REWORK : default : return null; } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedSubgroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) ) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, addedSubgroups, parentGroupId, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedSubgroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) ) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(("Cannot log add groups to group event performed by user", me, addedSubgroups, parentGroupId, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedSubgroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, addedSubgroups, parentGroupId, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedSubgroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) ) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(("Cannot log add groups to group event performed by user " + me, addedSubgroups, parentGroupId, e); } }
@java.lang.Override public void onAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> includesAudit = addedSubgroups.stream().map(( t) -> toAccountGroupByIdAud(t, parentGroupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) ) { db.accountGroupByIdAud().insert(includesAudit); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log add groups to group event performed by user", me, addedSubgroups, parentGroupId, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parentGroupId, uuid)) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, removed, parentGroupId, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parentGroupId, uuid)). { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, removed, parentGroupId, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(uuid)) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, removed, parentGroupId, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parentGroupId, uuid )) { if (a.isActive()) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups("Cannot log delete groups from group event performed by user", me, removed, parentGroupId, e); } }
@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removed, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.sql.Timestamp removedOn) { finaljava.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = newjava.util.ArrayList<>(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(parentGroupId, uuid)) { audit = a; break; } } if (audit!= null) { audit.removed(me, removedOn); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) {java.lang.String userName = accountCache.get(id).getUserName();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {1}/{3}", id, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) {java.lang.String userName = accountCache.get(id).getUserName();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("account {0}/{1}, group {1}/{3}", id, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) {java.lang.String userName = accountCache.get(id).getUserName();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {1}/{2}", id, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) {java.lang.String userName = accountCache.get(id).getUserName();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("account {0}/{1}, group {2}/{3}", id, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForAccounts(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> accounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Account.Id id : accounts) {java.lang.String userName = accountCache.get(id).getUserName();java.lang.String groupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {2}/{3}", id, userName, groupId, groupName)); } logOrmException(header, me, descriptions, e); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me); return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts), me); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts), me); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId), me); }
private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me);
private static AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts), me); }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removedAccounts, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removedAccounts, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Unable to log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removedAccounts, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id > removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteAccountsFromGroup(actor, removedAccounts, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete accounts from group event", e); } } }
public void dispatchDeleteAccountsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> removedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { auditListener.onDeleteAccountsFromGroup(actor, removedAccounts, groupId, removedOn); } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroupsEvent("Cannot log add groups to group event performed by user", e); } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroupsEvent(("Cannot log add groups to group event performed by user", event, e); } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroupsEvent("Cannot log add groups to group event performed by user", event, e); } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroupsEvent("Cannot log add groups to group event performed by user event", e); } }
@java.lang.Override public void onAddSubgroups(com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupByIdAud().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupByIdAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForSubgroupsEvent(("Cannot log add groups to group event performed by user", e); } }
private void removeSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupUuids, parentGroupId, removedOn); } db.accountGroupById().delete(subgroupsToRemove); }
private void removeSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupUuids, parentGroupId, removedOn); } db.accountGroupById().delete( subgroupsToRemove); }
private void removeSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException { if ((currentUser)!= null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupUuids, parentGroupId, removedOn); } db.accountGroupById().delete(subgroupUuids); }
private void removeSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupUuids, parentGroupId, removedOn); } db.accountGroupById().delete(subgroupsToRemove); }
private void removeSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> subgroupsToRemove = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteGroupsFromGroup(currentUser.getAccountId(), subgroupUuids, parentGroupId, removedOn); } db.accountGroupById().delete(); }
private static com.google.gerrit.reviewdb.client.AccountGroupByIdAud toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key(uuid, ts), me); }
private static AccountGroupByIdAud toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key(groupId, uuid, ts), me); }
private static com.google.gerrit.reviewdb.client.AccountGroupByIdAud toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(uuid, ts, me); }
private static com.google.gerrit.reviewdb.client.AccountGroupByIdAud toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me);
private static AccountGroupByIdAud toAccountGroupByIdAud(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(new com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key(uuid, ts), me); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newSubgroups, parentGroupId, addedOn); } db.accountGroupById().insert(newSubgroups); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { if ((currentUser)!= null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), subgroupUuids, parentGroupId, addedOn); } db.accountGroupById().insert(newSubgroups); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = subgroupUuids.stream().map(( subgroupUuid) -> new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, subgroupUuid)).map(AccountGroupById::new).collect(toImmutableSet()); db.accountGroupById().insert(newSubgroups); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { db.accountGroupById().insert(newSubgroups); }
private void addSubgroupsInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId,java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { db.accountGroupById().insert(subgroupUuids); }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent("Cannot log add accounts to group event performed by user", event, e); } }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupMembersAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent("Cannot log add accounts to group event performed by user", e); } }
@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent(("Cannot log add accounts to group event performed by user", event, e); } }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), accountIds, groupId, removedOn); } db.accountGroupMembers().delete(membersToRemove); }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().filter(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), accountIds, groupId, removedOn); } db.accountGroupMembers().delete(membersToRemove); }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(accountId -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), accountIds, groupId, removedOn); } db.accountGroupMembers().delete(membersToRemove); }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), accountIds, groupId, removedOn); } db.accountGroupMembers().delete(membersToRemove); }
private void removeGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds,java.sql.Timestamp removedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); if ((currentUser)!= null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), accountIds, groupId, removedOn); } db.accountGroupMembers().delete( membersToRemove); }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) ) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, addedAccounts, groupId, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, addedAccounts, groupId, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id>> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) ) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, addedAccounts, groupId, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) ) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, addedAccounts, groupId, e); } }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = addedAccounts.stream().map(( t) -> toAccountGroupMemberAudit(t, groupId, addedOn, me)).collect(java.util.stream.Collectors.toList()); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open()) ) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, addedAccounts, groupId, e ); } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, addedAccounts, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add accounts to group event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, addedAccounts, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Unable to log add accounts to group event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, addedAccounts, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log add accounts to group event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, addedAccounts, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(("Failed to log add accounts to group event", e); } } }
public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, addedAccounts, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Error to log add accounts to group event", e); } } }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException {java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> newMembers = newMemberIds.stream().map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableSet()); auditService.dispatchAddAccountsToGroup(currentUser.getAccountId(), newMembers, groupId, addedOn); }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { if ((currentUser)!= null) { auditService.dispatchAddAccountsToGroup(currentUser.getAccountId(), newMemberIds, groupId, addedOn); } db.accountGroupMembers().insert(newMembers); }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { if ((currentUser)!= null) { auditService.dispatchAddAccountsToGroup(currentUser.getAccountId(), newMemberIds, groupId, addedOn); } db.accountGroupMembers().insert(newMemberIds); }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { db.accountGroupMembers().insert(newMemberIds); }
private void addGroupMembersInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> newMemberIds,java.sql.Timestamp addedOn) throws com.google.gwtorm.server.OrmException { db.accountGroupMembers().insert(newMembers); }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removedSubgroups, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log delete groups from group event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removedSubgroups, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Unable to log delete groups from group event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removedSubgroups, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log delete groups from group event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removedSubgroups, groupId, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Error to log delete groups from group event", e); } } }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { auditListener.onDeleteGroupsFromGroup(actor, removedSubgroups, groupId, removedOn); } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, addedSubgroups, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Failed to log add groups to group event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, addedSubgroups, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Unable to log add groups to group event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, addedSubgroups, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log add groups to group event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, addedSubgroups, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(("Failed to log add groups to group event", e); } } }
public void dispatchAddGroupsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> addedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId,java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddGroupsToGroup(actor, addedSubgroups, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("Error to log add groups to group event", e); } } }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuids) {java.lang.String groupName = groupBackend.get(uuid).getName();java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("group {0}/{1}, group {2}/{3}", uuid, groupName, groupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuids) {java.lang.String groupName = groupBackend.get(uuid).getName();java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Group {0}/{1}, group {1}/{3}", uuid, groupName, groupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuids) {java.lang.String groupName = groupBackend.get(uuid).getName();java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Group {0}/{1}, group {2}/{3}", uuid, groupName, groupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuids) {java.lang.String groupName = groupBackend.get(uuid).getName();java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("group {0}/{1}, group {1}/{3}", uuid, groupName, groupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me,java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) {java.util.List<java.lang.String> descriptions = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuids) {java.lang.String groupName = groupBackend.get(uuid).getName();java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format("Account {0}/{1}, group {1}/{3}", uuid, groupName, groupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change was deleted, aborting reindexing the change"); } return false; }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change was deleted, aborting reindexing the change"); return false; } }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("change was deleted, aborting reindexing the change"); } return false; }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { index(newChangeData(db.get(), project, id)); return true; }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } return false; }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException nsce) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change {} was deleted, aborting reindexing the change.", id.get()); } catch (java.lang.Exception e) { if (!(isCausedByRepositoryNotFoundException(e))) { throw e; } com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change {} belong to a deleted project, aborting reindexing the change.", id.get()); } return false; }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException nsce) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("change {} was deleted, aborting reindexing the change.", id.get()); } catch (java.lang.Exception e) { if (!(isCausedByRepositoryNotFoundException(e))) { throw e; } com.google.gerrit.server.index.change.ChangeIndexer.log.debug("change {} belong to a deleted project, aborting reindexing the change.", id.get()); } return false; }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException nsce) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change {} was deleted, aborting reindexing the change."); id.get(); } catch (java.lang.Exception e) { if (!(isCausedByRepositoryNotFoundException(e))) { throw e; } com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change {} belong to a deleted project, aborting reindexing the change."); id.get(); } return false; }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException nsce) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change {} was deleted, aborting reindexing the change.", id.get()); } catch (java.lang.Exception e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change {} belong to a deleted project, aborting reindexing the change.", id.get()); } return false; }
@java.lang.Override publicjava.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throwsjava.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException nsce) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change {} was deleted, aborting reindexing the change."); id.get(); } catch (java.lang.Exception e) { if (!(isCausedByRepositoryNotFoundException(e))) { throw e; } com.google.gerrit.server.index.change.ChangeIndexer.log.debug("Change {} belong to a deleted project, aborting reindexing the change."); id.get()); } return false; }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlive())) { publisherThread.start(); } if (!(queue.offer(event))) { if (!(fullQueue)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.error("Cannot receive events, Queue is full."); fullQueue = true; } } else if (fullQueue) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is processable again"); fullQueue = false; } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlive())) { publisherThread.start(); } if (!(queue.contains(event))) { if (!(fullQueue)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.error("Cannot receive events, Queue is full."); fullQueue = true; } } else if (fullQueue) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is processable again"); fullQueue = false; } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlive())) { publisherThread.start(); } if (!(queue.offer(event)))) { if (!(fullQueue)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.error("Cannot receive events, Queue is full."); fullQueue = true; } } else if (fullQueue) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is processable again"); fullQueue = false; } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlive())) { publisherThread.start(); } if (!(queue.offer(event))) { if (!(fullQueue)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.error("Cannot receive events, Queue is full."); fullQueue = true; } } else if (fullQueue) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is processable again."); fullQueue = false; } }
@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(publisherThread.isAlive())) { publisherThread.start(); } if (!(queue.offer(event))) { if (!(fullQueue)) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.error("Cannot receive events, Queue is full."); fullQueue = true; } } else if (fullQueue) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.warn("Queue is processable again", fullQueue); fullQueue = false; } }
@java.lang.Override publicjava.util.Set<com.google.gerrit.server.change.SuggestedReviewer> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullablejava.lang.String query,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> candidates) {java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId);java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, projectName, null).stream().map(( a) -> suggestedReviewer(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } } return newjava.util.HashSet<>(); }
@java.lang.Override publicjava.util.Set<com.google.gerrit.server.change.SuggestedReviewer> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullablejava.lang.String query,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> candidates) {java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId);java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, projectName, null).stream().map(( a) -> suggestedReviewer(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } } return newjava.util.HashSet<>(); }
@java.lang.Override publicjava.util.Set<com.google.gerrit.server.change.SuggestedReviewer> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullablejava.lang.String query,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> candidates) {java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId);java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, projectName, null).stream().map(( a) -> suggestedReviewer(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(),java.lang.Exception.class, x); } } return newjava.util.HashSet<>(); }
@java.lang.Override publicjava.util.Set<com.google.gerrit.server.change.SuggestedReviewer> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullablejava.lang.String query,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> candidates) {java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> sections = getSections(projectName); if (!(sections.isEmpty())) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId);java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); return toAccounts(reviewDb, reviewers, projectName, null).stream().map(( a) -> suggestedReviewer(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } }
@java.lang.Override publicjava.util.Set<com.google.gerrit.server.change.SuggestedReviewer> suggestReviewers(com.google.gerrit.reviewdb.client.Project.NameKey projectName, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change.Id changeId, @com.google.gerrit.common.Nullablejava.lang.String query,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> candidates) { try (com.google.gerrit.reviewdb.server.ReviewDb reviewDb = schemaFactory.open()) { com.google.gerrit.server.query.change.ChangeData changeData = changeDataFactory.create(reviewDb, projectName, changeId);java.util.Set<java.lang.String> reviewers = findReviewers(sections, changeData); if (!(reviewers.isEmpty())) { return toAccounts(reviewDb, reviewers, projectName, null).stream().map(( a) -> suggestedReviewer(a)).collect(java.util.stream.Collectors.toSet()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException x) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error(x.getMessage(), x); } return newjava.util.HashSet<>(); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup(); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Not a Gerrit internal group")); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(new com.google.gerrit.extensions.restapi.MethodNotAllowedException("not a Gerrit internal group")); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Cannot get a Gerrit internal group")); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountInfo> apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup().orElseThrow(new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Cannot access a Gerrit internal group")); if (recursive) { return getTransitiveMembers(group, resource.getControl()); } return getDirectMembers(group, resource.getControl()); }
@java.lang.Override @com.google.gerrit.common.Nullable public synchronized <T>java.util.Optional<T> get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties)!= null) { @java.lang.SuppressWarnings("unchecked") T value = ((T) (properties.get(key))); returnjava.util.Optional.ofNullable(value); } returnjava.util.Optional.empty(); }
@com.google.gerrit.common.Nullable public synchronized <T>java.util.Optional<T> get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties)!= null) { @java.lang.SuppressWarnings("unchecked") T value = ((T) (properties.get(key))); returnjava.util.Optional.ofNullable(value); } returnjava.util.Optional.empty(); }
@java.lang.Override public synchronized <T>java.util.Optional<T> get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties)!= null) { @java.lang.SuppressWarnings("unchecked") T value = ((T) (properties.get(key))); returnjava.util.Optional.ofNullable(value); } returnjava.util.Optional.empty(); }
@java.lang.Override @com.google.gerrit.common.Nullable public synchronized <T>java.util.Optional<T> get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties)!= null) { @java.lang.SuppressWarnings("unchecked") T value = ((T) (properties.get(key))); returnjava.util.Optional.ofNullable(value); } returnjava.util.Optional.empty() ; }
@java.lang.Override @com.google.gerrit.common.Nullable public synchronized <T>java.util.Optional<T> get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties)!= null) { return ((T) (properties.get(key))); } returnjava.util.Optional.empty(); }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("Group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Unable to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
javajava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.openAs(adminUser.getAccountId())) { return groupMembers.create(adminUser).listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gerrit.server.project.NoSuchProjectException | com.google.gwtorm.server.OrmException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Update trigger for %s:%s by %d. Config: %s", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Updating trigger for %s:%s by %d. Config: %s", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Updated trigger for %s:%s by %d. Config: %s", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Update trigger for %s:%s by %d. Config: %s", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString(), resource.getProjectState().getProject().getName(), resource.getRef()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info("Update trigger for %s:%s by %d. Config: %s", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString(), resource.getProjectState().getProject().getName(), resource.getRef()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.empty(); }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try { return groupMembers.listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
java privatejava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try { return groupMembers.listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))) ; if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try { return groupMembers.listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
privatejava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))); if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try { return groupMembers.listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
java privatejava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findAccountsInGroup(java.lang.String groupNameOrUUID) {java.util.Optional<com.google.gerrit.server.group.InternalGroup> group =java.util.Optional.ofNullable(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(groupNameOrUUID))).orElse(groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupNameOrUUID))) ; if (!(group.isPresent())) { com.vmware.gerrit.owners.common.AccountsImpl.log.warn("group {} was not found", groupNameOrUUID); returnjava.util.Collections.emptySet(); } try { return groupMembers.listAccounts(group.get().getGroupUUID(), null).stream().map(Account::getId).collect(java.util.stream.Collectors.toSet()); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException e) { com.vmware.gerrit.owners.common.AccountsImpl.log.error(("Failed to list accounts in group " + group), e); returnjava.util.Collections.emptySet(); } }
java.util.Map<java.lang.String,java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @java x.annotation.Nullablejava x.lang.String revision, com.google.gitiles.LogSoyData.FooterBehavior behavior) { switch (behavior) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", copyAndCanonicalizeView(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG_HEAD : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "nextText", "Log"); default : throw newjava.lang.IllegalStateException(("unsupported footer behavior: " + behavior) ); } }
javajava privatejava.util.Map<java.lang.String,java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @java x.annotation.Nullablejava x.annotation.Nullablejava.lang.String revision, com.google.gitiles.LogSoyData.FooterBehavior behavior) { switch (behavior) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", copyAndCanonicalizeView(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG_HEAD : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "nextText", "Log"); default : throw newjava.lang.IllegalStateException(("unsupported footer behavior: " + behavior) ); } }
javajava privatejava.util.Map<java.lang.String,java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @java x.annotation.Nullablejava x.annotation.Nullablejava.lang.String revision, com.google.gitiles.LogSoyData.FooterBehavior behavior) { switch (behavior) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", copyAndCanonicalizeView(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG_HEAD : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "nextText", "Log"); default : throw newjava.lang.IllegalStateException(("Invalid footer behavior: " + behavior) ); } }
javajava privatejava.util.Map<java.lang.String,java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @java x.annotation.Nullablejava.lang.String revision, com.google.gitiles.LogSoyData.FooterBehavior behavior) { switch (behavior) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", copyAndCanonicalizeView(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG_HEAD : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "nextText", "Log"); default : throw newjava.lang.IllegalStateException(("Invalid footer behavior: " + behavior) ); } }
javajava privatejava.util.Map<java.lang.String,java.lang.Object> toFooterSoyData(com.google.gitiles.Paginator paginator, @java x.annotation.Nullablejava x.annotation.Nullablejava.lang.String revision, com.google.gitiles.LogSoyData.FooterBehavior behavior) { switch (behavior) { case NEXT : org.eclipse.jgit.lib.ObjectId next = paginator.getNextStart(); if (next == null) { return com.google.common.collect.ImmutableMap.of(); } return com.google.common.collect.ImmutableMap.of("nextUrl", copyAndCanonicalizeView(revision).replaceParam(LogServlet.START_PARAM, next.name()).toUrl(), "nextText", "Next"); case LOG_HEAD : return com.google.common.collect.ImmutableMap.of("nextUrl", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl(), "nextText", "Log"); default : throw newjava.lang.IllegalStateException(("Invalid footer behavior: " + behavior)); } }
@java.lang.Override publicjava.lang.String authenticate(com.google.gerrit.server.CurrentUser user,java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { if ((args.size())!= 2) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, "wrong number of arguments"); } try {java.net.URL url = newjava.net.URL(canonicalWebUrl);java.lang.String path = url.getPath();java.lang.String project = args.get(0);java.lang.String operation = args.get(1);java.lang.StringBuilder href = newjava.lang.StringBuilder(url.getProtocol()).append("://").append(url.getAuthority()).append(path).append((path.endsWith("/")? "" : "/")).append(project).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, (("Authentication configuration error: " + "Git LFS endpoint URL from canonicalWebUrl [ " + (canonicalWebUrl)) + "] failed.")); } }
@java.lang.Override publicjava.lang.String authenticate(com.google.gerrit.server.CurrentUser user,java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { if ((args.size())!= 2) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, "wrong number of arguments"); } try {java.net.URL url = newjava.net.URL(canonicalWebUrl);java.lang.String path = url.getPath();java.lang.String project = args.get(0);java.lang.String operation = args.get(1);java.lang.StringBuilder href = newjava.lang.StringBuilder(url.getProtocol()).append("://").append(url.getAuthority()).append(path).append((path.endsWith("/")? "" : "/")).append(project).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, (("Authentication configuration error: " + "Git LFS endpoint URL from canonicalWebUrl [" + (canonicalWebUrl)) + "] failed.")); } }
@java.lang.Override publicjava.lang.String authenticate(com.google.gerrit.server.CurrentUser user,java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure {java.lang.StringBuilder href = newjava.lang.StringBuilder(url.getProtocol()).append("://").append(url.getAuthority()).append(path).append((path.endsWith("/")? "" : "/")).append(project).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); }
@java.lang.Override publicjava.lang.String authenticate(com.google.gerrit.server.CurrentUser user,java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure {java.lang.StringBuilder href = newjava.lang.StringBuilder(url.getProtocol()).append("://").append(url.getAuthority()).append(path).append((path.endsWith("/")? "" : "/")).append(project).append("/info/lfs"); com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); return gson.toJson(action); }
@java.lang.Override publicjava.lang.String authenticate(com.google.gerrit.server.CurrentUser user,java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); return gson.toJson(action); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { final org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7);java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = newjava.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, messages, ("too many subject > " + (this.maxSubjectLength)) + " characters; use shorter first paragraph")); } int longLineCnt = 0; int nonEmptyCnt = 0; for (java.lang.String line : com.google.gwt.thirdparty.guava.common.base.Splitter.on('\n').split(commit.getFullMessage())) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineCnt > (((longLinesThreshold) * nonEmptyCnt) / 100)) { onLineTooLong(id, messages, ("too many commit message lines longer than " + (this.maxLineLength)) + " characters; manually wrap lines")); } return messages; }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { final org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7);java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = newjava.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, messages, ("too many subject > " + (this.maxSubjectLength)) + " characters; use shorter first paragraph"); } int longLineCnt = 0; int nonEmptyCnt = 0; for (java.lang.String line : com.google.gwt.thirdparty.guava.common.base.Splitter.on('\n').split(commit.getFullMessage())) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineCnt > (((longLinesThreshold) * nonEmptyCnt) / 100)) { onLineTooLong(id, messages, ("too many commit message lines longer than " + (this.maxLineLength)) + " characters; manually wrap lines")); } return messages; }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { final org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7);java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = newjava.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, messages, ("too many subject > " + (this.maxSubjectLength)) + " characters; use shorter first paragraph"); } int longLineCnt = 0; int nonEmptyCnt = 0; for (java.lang.String line : com.google.gwt.thirdparty.guava.common.base.Splitter.on('\n').split(commit.getFullMessage())) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineCnt > (((longLinesThreshold) * nonEmptyCnt) / 100)) { onLineTooLong(id, messages, ("too many commit message lines longer than " + (this.maxLineLength)) + " characters; manually wrap lines"); } return messages; }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { final org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7);java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = newjava.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, messages, ("too many subject > " + (this.maxSubjectLength)) + " characters; use shorter first paragraph")); } int longLineCnt = 0; int nonEmptyCnt = 0; for (java.lang.String line : com.google.gwt.thirdparty.guava.common.base.Splitter.on('\n').split(commit.getFullMessage())) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineCnt > (((longLinesThreshold) * nonEmptyCnt) / 100)) { onLineTooLong(id, messages, ("too many commit message lines longer than " + (this.maxLineLength)) + " characters; manually wrap lines"); } return messages; }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { final org.eclipse.jgit.revwalk.RevCommit commit = receiveEvent.commit; final org.eclipse.jgit.lib.AbbreviatedObjectId id = commit.abbreviate(7);java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = newjava.util.ArrayList<>(); if ((this.maxSubjectLength) < (commit.getShortMessage().length())) { onLineTooLong(id, messages, ("too many commit message subject > " + (this.maxSubjectLength)) + " characters; use shorter first paragraph")); } int longLineCnt = 0; int nonEmptyCnt = 0; for (java.lang.String line : com.google.gwt.thirdparty.guava.common.base.Splitter.on('\n').split(commit.getFullMessage())) { if (!(line.trim().isEmpty())) { nonEmptyCnt++; } if ((this.maxLineLength) < (line.length())) { longLineCnt++; } } if (longLineCnt > (((longLinesThreshold) * nonEmptyCnt) / 100)) { onLineTooLong(id, messages, ("too many commit message lines longer than " + (this.maxLineLength)) + " characters; manually wrap lines")); } return messages; }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { finaljava.lang.String token = params.getParameter(0); finaljava.util.List<java.lang.String> tokens = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').split(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException("change-id should be specified as <project>,<branch>,<change-id>"); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens.get( 2)); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get( 0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get( 1)); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, "change-id is not valid"); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ("Internal error: " + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, (("\"" + token) + "\" change not found")); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { finaljava.lang.String token = params.getParameter(0); finaljava.util.List<java.lang.String> tokens = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').split(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException("change-id should be specified as <project>,<branch>,<change-id>"); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens.get( 2)); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get( 0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get( 1)); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, "change is not valid"); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ("Internal error: " + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, (("\"" + token) + "\" change not found")); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { finaljava.lang.String token = params.getParameter(0); finaljava.util.List<java.lang.String> tokens = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').split(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException("change-id should be specified as <project>,<branch>,<change-id>"); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens.get( 2)); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get(0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get( 1)); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, "change-id is not valid"); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ("Internal error: " + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, (("\"" + token) + "\" change not found")); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { finaljava.lang.String token = params.getParameter(0); finaljava.util.List<java.lang.String> tokens = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').split(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException("change-id should be specified as <project>,<branch>,<change-id>"); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens.get( 2)); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get( 0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get( 1)); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, "change-id is not valid"); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ("fatal error: " + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, (("\"" + token) + "\" change not found")); }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { finaljava.lang.String token = params.getParameter(0); finaljava.util.List<java.lang.String> tokens = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').split(token)); if ((tokens.size())!= 3) { throw new org.kohsuke.args4j.CmdLineException("change-id should be specified as <project>,<branch>,<change-id>"); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens.get( 2)); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens.get( 0)); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens.get( 1)); for (com.google.gerrit.server.query.change.ChangeData cd : queryProvider.get().byBranchKey(branch, key)) { setter.addValue(cd.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, "change-id is not valid"); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ("Internal error: " + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, (("\"" + token) + "\" change not found"); }
private staticjava.util.Map<java.lang.String,java.lang.String> getParameters(java x.servlet.http.HttpServletRequest req) { finaljava.util.Map<java.lang.String,java.lang.String> params = newjava.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_SPLIT_PATTERN).split(req.getQueryString())) { final int eq = pair.indexOf('='); if (0 < eq) {java.lang.String name = pair.substring(0, eq);java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private staticjava.util.Map<java.lang.String,java.lang.String> getParameters(java x.servlet.http.HttpServletRequest req) { finaljava.util.Map<java.lang.String,java.lang.String> params = newjava.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_SPLIT_PATTERN).split(req.getQueryString())) { final int eq = pair.indexOf('='); if (eq < 0) {java.lang.String name = pair.substring(0, eq);java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private staticjava.util.Map<java.lang.String,java.lang.String> getParameters(java x.servlet.http.HttpServletRequest req) { finaljava.util.Map<java.lang.String,java.lang.String> params = newjava.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_SPLIT_PATTERN).split(req.getQueryString())) { final int eq = pair.indexOf('='); if ( < eq) {java.lang.String name = pair.substring(0, eq);java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
staticjava.util.Map<java.lang.String,java.lang.String> getParameters(java x.servlet.http.HttpServletRequest req) { finaljava.util.Map<java.lang.String,java.lang.String> params = newjava.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_SPLIT_PATTERN).split(req.getQueryString())) { final int eq = pair.indexOf('='); if (0 < eq) {java.lang.String name = pair.substring(0, eq);java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private staticjava.util.Map<java.lang.String,java.lang.String> getParameters(java x.servlet.http.HttpServletRequest req) { finaljava.util.Map<java.lang.String,java.lang.String> params = newjava.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_SPLIT_PATTERN).split(req.getQueryString())) { final int eq = pair.indexOf('='); if (eq >= 0) {java.lang.String name = pair.substring(0, eq);java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }
private void init() {java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey)); if ((varParts.size())!= 2) { throw newjava.lang.IllegalArgumentException((("section name " + (sectionAndKey)) + " expected section.key format")); } section = varParts.get(0); key = varParts.get(1); }
private void init() {java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey)); if ((varParts.size())!= 2) { throw newjava.lang.IllegalArgumentException((("section name '" + (sectionAndKey)) + "' expected section.key format")); } section = varParts.get(0); key = varParts.get(1); }
private void init() {java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey)); if ((varParts.size())!= 2) { throw newjava.lang.IllegalArgumentException((("Invalid name " + (sectionAndKey)) + " expected section.key format")); } section = varParts.get(0); key = varParts.get(1); }
private void init() {java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey)); if ((varParts.size())!= 2) { throw newjava.lang.IllegalArgumentException((("section name " + (sectionAndKey)) + " expected section.key format")); } section = varParts.get(0); key = varParts.get(1); }
private void init() {java.util.List<java.lang.String> varParts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('.').split(sectionAndKey)); if ((varParts.size())!= 2) { throw newjava.lang.IllegalArgumentException((("section name " + (sectionAndKey)) + " expected section.key format")); } section = varParts.get(0).trim(); key = varParts.get(1); }
privatejava.lang.String getPublicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) {java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(s)); if ((parts.size()) > index) { return parts.get(index); } } return defaultValue; }
privatejava.lang.String getPublicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) {java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(s)).toList(); if ((parts.size()) > index) { return parts.get(index); } } return defaultValue; }
privatejava.lang.String getPublicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) {java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(s)); if ((parts.size()) > index) { return parts.get(index).trim(); } } return defaultValue; }
privatejava.lang.String getPublicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) {java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(s)); if ((parts.size()) > index) { return parts.get(index) ; } } return defaultValue; }
privatejava.lang.String getPublicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = getSshPublicKey(); if ((s!= null) && ((s.length()) > 0)) {java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(s)); if ((parts.size()) > index) { return parts.get(index).trim(); } } return defaultValue.trim(); }
public staticjava.lang.String trimQuotation(java.lang.String comment) {java.util.StringJoiner j = newjava.util.StringJoiner("\n");java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); }java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLine)) { if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } return j.toString().trim(); } if ((lines.size()) > 1) {java.lang.String lastLines = (lines.get(((lines.size()) - 2))) + lastLine; if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLines)) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } j.add(lines.get(((lines.size()) - 1))); return j.toString().trim(); }
private staticjava.lang.String trimQuotation(java.lang.String comment) {java.util.StringJoiner j = newjava.util.StringJoiner("\n");java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); }java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLine)) { if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } return j.toString().trim(); } if ((lines.size()) > 1) {java.lang.String lastLines = (lines.get(((lines.size()) - 2))) + lastLine; if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLines)) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } j.add(lines.get(((lines.size()) - 1))); return j.toString().trim(); }
public staticjava.lang.String trimQuotation(java.lang.String comment) {java.util.StringJoiner j = newjava.util.StringJoiner("\n");java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); }java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLine)) { if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } return j.toString().trim(); } if ((lines.size()) > 1) {java.lang.String lastLines = (lines.get(((lines.size()) - 2) ) + lastLine); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLines)) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } j.add(lines.get(((lines.size()) - 1))); return j.toString().trim(); }
public staticjava.lang.String trimQuotation(java.lang.String comment) {java.util.StringJoiner j = newjava.util.StringJoiner("\n");java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); }java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLine)) { if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } return j.toString().trim(); } if ((lines.size()) > 1) {java.lang.String lastLines = (lines.get(((lines.size()) - 2)) + lastLine); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLines)) { return j.toString().trim(); } } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } j.add(lines.get(((lines.size()) - 1))); return j.toString().trim(); }
public staticjava.lang.String trimQuotation(java.lang.String comment) {java.util.StringJoiner j = newjava.util.StringJoiner("\n");java.util.List<java.lang.String> lines = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on('\n').split(comment)); for (int i = 0; i < ((lines.size()) - 2); i++) { j.add(lines.get(i)); }java.lang.String lastLine = lines.get(((lines.size()) - 1)); if (com.google.gerrit.server.mail.receive.ParserUtil.containsQuotationPattern(lastLine)) { return j.toString().trim(); } if ((lines.size()) > 1) { j.add(lines.get(((lines.size()) - 2))); } return j.toString().trim(); }
private void readCgiHeaders(java x.servlet.http.HttpServletResponse res,java.io.InputStream in) throwsjava.io.IOException {java.lang.String line; while (!((line = readLine(in)).isEmpty())) { if (line.startsWith("HTTP")) { throw newjava.io.IOException(("HTTP CGI not supported: " + line)); } final int sep = line.indexOf(':'); if (sep < 0) { throw newjava.io.IOException(("HTTP returned invalid header: " + line)); } finaljava.lang.String key = line.substring(0, sep).trim(); finaljava.lang.String value = line.substring((sep + 1)).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { finaljava.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(", ")); final int status =java.lang.Integer.parseInt(token.get(0)); res.setStatus(status); } else { res.addHeader(key, value); } } }
private void readCgiHeaders(java x.servlet.http.HttpServletResponse res,java.io.InputStream in) throwsjava.io.IOException {java.lang.String line; while (!((line = readLine(in)).isEmpty())) { if (line.startsWith("HTTP")) { throw newjava.io.IOException(("HTTP CGI not supported: " + line)); } final int sep = line.indexOf(':'); if (sep < 0) { throw newjava.io.IOException(("HTTP returned invalid header: " + line)); } finaljava.lang.String key = line.substring(0, sep).trim(); finaljava.lang.String value = line.substring((sep + 1)).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { finaljava.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(java.lang.Integer.parseInt(token.get(0))); res.setStatus(status); } else { res.addHeader(key, value); } } }
private void readCgiHeaders(java x.servlet.http.HttpServletResponse res,java.io.InputStream in) throwsjava.io.IOException {java.lang.String line; while (!((line = readLine(in)).isEmpty())) { if (line.startsWith("HTTP")) { throw newjava.io.IOException(("HTTP CGI not supported: " + line)); } final int sep = line.indexOf(':'); if (sep < 0) { throw newjava.io.IOException(("HTTP returned invalid header: " + line)); } finaljava.lang.String key = line.substring(0, sep).trim(); finaljava.lang.String value = line.substring((sep + 1)).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { finaljava.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(java.lang.Integer.parseInt(token.get(0))); res.setStatus(token.get(0).trim()); } else { res.addHeader(key, value); } } }
private void readCgiHeaders(java x.servlet.http.HttpServletResponse res,java.io.InputStream in) throwsjava.io.IOException {java.lang.String line; while (!((line = readLine(in)).isEmpty())) { if (line.startsWith("HTTP")) { throw newjava.io.IOException(("CGI CGI not supported: " + line)); } final int sep = line.indexOf(':'); if (sep < 0) { throw newjava.io.IOException(("CGI returned invalid header: " + line)); } finaljava.lang.String key = line.substring(0, sep).trim(); finaljava.lang.String value = line.substring((sep + 1)).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { finaljava.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(java.lang.Integer.parseInt(token.get(0))); res.setStatus(status); } else { res.addHeader(key, value); } } }
private void readCgiHeaders(java x.servlet.http.HttpServletResponse res,java.io.InputStream in) throwsjava.io.IOException {java.lang.String line; while (!((line = readLine(in)).isEmpty())) { if (line.startsWith("HTTP")) { throw newjava.io.IOException(("HTTP CGI not supported: " + line)); } final int sep = line.indexOf(':'); if (sep < 0) { throw newjava.io.IOException(("HTTP returned invalid header: " + line)); } finaljava.lang.String key = line.substring(0, sep).trim(); finaljava.lang.String value = line.substring((sep + 1)).trim(); if ("Location".equalsIgnoreCase(key)) { res.sendRedirect(value); } else if ("Status".equalsIgnoreCase(key)) { finaljava.util.List<java.lang.String> token = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(", ")); final int status =java.lang.Integer.parseInt(token.get(0)); res.setStatus(status); } else { res.addHeader(key, value); } } } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String,java.lang.String> e : aliases.entrySet()) {java.lang.String name = e.getKey();java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_SPLIT_PATTEN).split(e.getValue())); com.google.gerrit.sshd.CommandName cmd = com.google.gerrit.sshd.Commands.named(dest.get(0)); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(cmd, dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.AliasCommandProvider(cmd)); } }
void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String,java.lang.String> e : aliases.entrySet()) {java.lang.String name = e.getKey();java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_SPLIT_PATTEN).split(e.getValue())); com.google.gerrit.sshd.CommandName cmd = com.google.gerrit.sshd.Commands.named(dest.get(0)); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(cmd, dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.AliasCommandProvider(cmd)); } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String,java.lang.String> e : aliases.entrySet()) {java.lang.String name = e.getKey();java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_SPLIT_PATTEN).split(e.getValue())); com.google.gerrit.sshd.CommandName cmd = com.google.gerrit.sshd.Commands.named(dest); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(cmd, dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.AliasCommandProvider(cmd)); } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String,java.lang.String> e : aliases.entrySet()) {java.lang.String name = e.getKey();java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_SPLIT_PATTEN).split(e.getValue())); com.google.gerrit.sshd.CommandName cmd = com.google.gerrit.sshd.Commands.named(dest.get(0, 0)); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(cmd, dest.get(i)); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.AliasCommandProvider(cmd)); } }
private void configureAliases() { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named("gerrit"); for (java.util.Map.Entry<java.lang.String,java.lang.String> e : aliases.entrySet()) {java.lang.String name = e.getKey();java.util.List<java.lang.String> dest = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.gerrit.sshd.SshModule.ALIAS_SPLIT_PATTEN).split(e.getValue())); com.google.gerrit.sshd.CommandName cmd = com.google.gerrit.sshd.Commands.named(dest.get(0)); for (int i = 1; i < (dest.size()); i++) { cmd = com.google.gerrit.sshd.Commands.named(cmd, dest.get(i); } bind(com.google.gerrit.sshd.Commands.key(gerrit, name)).toProvider(new com.google.gerrit.sshd.AliasCommandProvider(cmd)); } }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HashedPassword.ALGORITHM_PREFIX))) { throw new org.apache.commons.codec.DecoderException("unsupported algorithm"); }java.util.List<java.lang.String> fields = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((fields.size())!= 4) { throw new org.apache.commons.codec.DecoderException("expected 4 fields"); }java.lang.Integer cost = com.google.common.primitives.Ints.tryParse(fields.get( 1)); if (cost == null) { throw new org.apache.commons.codec.DecoderException("hashed password parse failed"); } if (!((cost >= 4) && (cost < 32))) { throw new org.apache.commons.codec.DecoderException(("hashed password should be 4..31 inclusive, got " + cost)); } byte[] salt = com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 2)); if ((salt.length)!= 16) { throw new org.apache.commons.codec.DecoderException(("salt should be 16 bytes, got " + (salt.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 3))); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HashedPassword.ALGORITHM_PREFIX))) { throw new org.apache.commons.codec.DecoderException("invalid algorithm"); }java.util.List<java.lang.String> fields = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((fields.size())!= 4) { throw new org.apache.commons.codec.DecoderException("expected 4 fields"); }java.lang.Integer cost = com.google.common.primitives.Ints.tryParse(fields.get( 1)); if (cost == null) { throw new org.apache.commons.codec.DecoderException("hashed password parse failed"); } if (!((cost >= 4) && (cost < 32))) { throw new org.apache.commons.codec.DecoderException(("hashed password should be 4..31 inclusive, got " + cost)); } byte[] salt = com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 2)); if ((salt.length)!= 16) { throw new org.apache.commons.codec.DecoderException(("salt should be 16 bytes, got " + (salt.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 3))); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HashedPassword.ALGORITHM_PREFIX))) { throw new org.apache.commons.codec.DecoderException("unsupported algorithm"); }java.util.List<java.lang.String> fields = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((fields.size())!= 4) { throw new org.apache.commons.codec.DecoderException("expected 4 fields"); }java.lang.Integer cost = com.google.common.primitives.Ints.tryParse(fields.get( 1)); if (cost == null) { throw new org.apache.commons.codec.DecoderException("hashed password parse failed"); } if (!((cost >= 4) && (cost < 32))) { throw new org.apache.commons.codec.DecoderException(("cost should be 4..31 inclusive, got " + cost)); } byte[] salt = com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 2)); if ((salt.length)!= 16) { throw new org.apache.commons.codec.DecoderException(("salt should be 16 bytes, got " + (salt.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 3))); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HashedPassword.ALGORITHM_PREFIX))) { throw new org.apache.commons.codec.DecoderException("invalid algorithm"); }java.util.List<java.lang.String> fields = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((fields.size())!= 4) { throw new org.apache.commons.codec.DecoderException("expected 4 fields"); }java.lang.Integer cost = com.google.common.primitives.Ints.tryParse(fields.get( 1)); if (cost == null) { throw new org.apache.commons.codec.DecoderException("hashed password parse failed"); } if (!((cost >= 4) && (cost < 32))) { throw new org.apache.commons.codec.DecoderException(("cost should be 4..31 inclusive, got " + cost)); } byte[] salt = com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 2)); if ((salt.length)!= 16) { throw new org.apache.commons.codec.DecoderException(("salt should be 16 bytes, got " + (salt.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 3))); }
public static com.google.gerrit.server.account.HashedPassword decode(java.lang.String encoded) throws org.apache.commons.codec.DecoderException { if (!(encoded.startsWith(com.google.gerrit.server.account.HashedPassword.ALGORITHM_PREFIX))) { throw new org.apache.commons.codec.DecoderException("Invalid algorithm"); }java.util.List<java.lang.String> fields = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').split(encoded)); if ((fields.size())!= 4) { throw new org.apache.commons.codec.DecoderException("Expected 4 fields"); }java.lang.Integer cost = com.google.common.primitives.Ints.tryParse(fields.get( 1)); if (cost == null) { throw new org.apache.commons.codec.DecoderException("hashed password parse failed"); } if (!((cost >= 4) && (cost < 32))) { throw new org.apache.commons.codec.DecoderException(("hashed password should be 4..31 inclusive, got " + cost)); } byte[] salt = com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 2)); if ((salt.length)!= 16) { throw new org.apache.commons.codec.DecoderException(("salt should be 16 bytes, got " + (salt.length))); } return new com.google.gerrit.server.account.HashedPassword(com.google.gerrit.server.account.HashedPassword.codec.decode(fields.get( 3))); }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throwsjava.io.IOException { try { return reindexIfStaleAsync(id).get(); } catch (java.util.concurrent.ExecutionException |java.lang.InterruptedException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn("Indexing possibly stale account {} failed", id.get()); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(),java.io.IOException.class); throw newjava.io.IOException(e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throwsjava.io.IOException { try { return reindexIfStaleAsync(id).get(); } catch (java.util.concurrent.ExecutionException |java.lang.InterruptedException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn("Index of possibly stale account {} failed", id.get()); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(),java.io.IOException.class); throw newjava.io.IOException(e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throwsjava.io.IOException { try { return reindexIfStaleAsync(id).get(); } catch (java.util.concurrent.ExecutionException |java.lang.InterruptedException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn("Indexing possibly stale account {}", id.get()); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(),java.io.IOException.class); throw newjava.io.IOException(e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throwsjava.io.IOException { try { return reindexIfStaleAsync(id).get(); } catch (java.util.concurrent.ExecutionException |java.lang.InterruptedException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throwsjava.io.IOException { return reindexIfStaleAsync(id).get(); }
private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) {java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(uuid)) { index(uuid); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }
@java.lang.SuppressWarnings("deprecation") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) {java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(uuid)) { index(uuid); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task))); }
@java.lang.SuppressWarnings("deprecation") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }
@java.lang.SuppressWarnings("deprecation") private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) {java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(uuid)) { index(uuid); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(indexExecutor.submit(task)), IndexUtils.MAPPER); }
private com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) {java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(uuid)) { index(uuid); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task))); }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throwsjava.io.IOException { try { return reindexIfStaleAsync(uuid).get(); } catch (java.util.concurrent.ExecutionException |java.lang.InterruptedException e) { com.google.gerrit.server.index.group.GroupIndexerImpl.log.warn("Indexing possibly stale group {} failed", uuid.get()); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(),java.io.IOException.class); throw newjava.io.IOException(e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throwsjava.io.IOException { try { return reindexIfStaleAsync(uuid).get(); } catch (java.util.concurrent.ExecutionException |java.lang.InterruptedException e) { com.google.gerrit.server.index.group.GroupIndexerImpl.log.warn("Index of possibly stale group {} failed", uuid.get()); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(),java.io.IOException.class); throw newjava.io.IOException(e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throwsjava.io.IOException { try { return reindexIfStaleAsync(uuid).get(); } catch (java.util.concurrent.ExecutionException |java.lang.InterruptedException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throwsjava.io.IOException { return reindexIfStaleAsync(uuid).get(); }
@com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid;
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) {java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) {java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task))); }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) {java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.CheckedFutures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) { return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }
@java.lang.SuppressWarnings("deprecation") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean,java.io.IOException> reindexIfStaleAsync(com.google.gerrit.reviewdb.client.Account.Id id) {java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(indexExecutor.submit(task)), IndexUtils.MAPPER); }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(actualThreads)); factory(ChangeResource.Factory.class); } }); }
private com.google.inject.Injector createSysInjector( int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(actualThreads)); factory(ChangeResource.Factory.class); } }); }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(actualThreads))); factory(ChangeResource.Factory.class); } }); }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(actualThreads)); } }); }
private com.google.inject.Injector createSysInjector(int actualThreads) { return dbInjector.createChildInjector(new com.google.gerrit.extensions.config.FactoryModule() { @java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); install(getIndexModule(actualThreads)); factory(ChangeResource.Factory.class); } }); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(actualThreads)); factory(ChangeResource.Factory.class); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule()); factory(ChangeResource.Factory.class); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(actualThreads))); factory(ChangeResource.Factory.class); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); bind(com.google.gerrit.server.extensions.events.GitReferenceUpdated.class).toInstance(GitReferenceUpdated.DISABLED); install(getIndexModule(expectedThreads)); factory(ChangeResource.Factory.class); }
@java.lang.Override public void configure() { install(dbInjector.getInstance(com.google.gerrit.pgm.util.BatchProgramModule.class)); install(getIndexModule(actualThreads)); factory(ChangeResource.Factory.class); }
privatejava.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw newjava.lang.IllegalStateException("unsupported index.type"); } }
privatejava.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw newjava.lang.IllegalStateException(("unsupported index.type")); } }
privatejava.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw newjava.lang.IllegalStateException(("unsupported index.type"); } }
private com.google.gerrit.server.index.IndexModule getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw newjava.lang.IllegalStateException("unsupported index.type"); } }
privatejava.lang.Module getIndexModule(int actualThreads) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), actualThreads); default : throw newjava.lang.IllegalStateException("invalid index.type"); } }
privatejava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p) { return toAccounts(reviewDb, in, p, null); }
privatejava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p) throws com.google.gwtorm.server.OrmException { return toAccounts(reviewDb, in, p, null); }
publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p) { return toAccounts(reviewDb, in, p, null); }
privatejava.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p) { return toAccounts(reviewDb, in, p, null); }
privatejava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> toAccounts(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p) { return toAccounts(reviewDb, in, null, p); }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new org.eclipse.jgit.transport.ServiceMayNotContinueException(); } }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new org.eclipse.jgit.transport.ServiceMayNotContinueException(e); } }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getAdvertisedRefs(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk revWalk) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { try { return perm.filter(repo.getRefDatabase().getRefs(RefDatabase.ALL), repo, opts); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } }
public static com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions defaults() { return com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().setFilterMeta(false).setFilterTagsSeparately(false).build(); }
private static com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions defaults() { return com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().setFilterMeta(false).setFilterTagsSeparately(false).build(); }
public static com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions defaults() { return com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().filterMeta(false).filterTagsSeparately(false).build(); }
public static com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions defaults() { return new com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.Builder().setFilterMeta(false).setFilterTagsSeparately(false).build(); }
public static com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions defaults() { return com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().setFilterMeta(false).setFilterTagsSeparately(false).setFilterTags(); }
@org.junit.Test public void testEmailVaildListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isTrue(); }
@org.junit.Test public void testEmailVaildListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValid, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isTrue(); }
@org.junit.Test public void emailVaildListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isTrue(); }
@org.junit.Test public void testEmailVaildListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainsWhitelist)).isTrue(); }
@org.junit.Test public void testEmailVaildListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.isValid(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isTrue(); }
@org.junit.Test public void testEmailInvaildNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailInvalidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@org.junit.Test public void testEmailInvalidNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailInvalidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@org.junit.Test public void emailInvalidNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailInvalidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@org.junit.Test public void testInvalidEmailNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailInvalidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@org.junit.Test public void testEmailInvaildNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailInvalidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainsWhitelist)).isFalse(); }
@org.junit.Test public void testEmailVaildNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@org.junit.Test public void emailVaildNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@org.junit.Test public void testEmailVaildNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailInvalidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@org.junit.Test public void testInvalidEmailVaildNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@org.junit.Test public void testEmailVaildNotListed() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailValidNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainsWhitelist)).isFalse(); }
@org.junit.Test public void testGetEmailWhitelist() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setEmailWhitelist(com.googlesource.gerrit.plugins.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit
@org.junit.Test public void testGetEmailWhitelist() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setEmailWhitelist(com.googlesource.gerrit.plugins.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.extensions.gerrit
@org.junit.Test public void testGetEmailWhitelist() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setEmailWhitelist(com.googlesource.gerrit.plugins.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.extensions.gerrit.plugins.gerrit.gerrit
@org.junit.Test public void testGetEmailWhitelist() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setEmailWhitelist(com.googlesource.gerrit.plugins.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.extensions.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit
@org.junit.Test public void testGetEmailWhitelist() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setEmailWhitelist(com.googlesource.gerrit.plugins.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.extensions.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit.plugins.gerrit.gerrit
@com.google.common.annotations.VisibleForTesting private staticjava.util.List<java.lang.String> getEmailDomainWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { returnjava.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST)); }
private staticjava.util.List<java.lang.String> getEmailDomainWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { returnjava.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST)); }
@com.google.common.annotations.VisibleForTesting private staticjava.util.List<java.lang.String> getEmailDomainWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { returnjava.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhiteitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST)); }
@com.google.common.annotations.VisibleForTesting private staticjava.util.List<java.lang.String> getEmailDomainWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return com.google.common.collect.Lists.newArrayList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST)); }
@com.google.common.annotations.VisibleForTesting private staticjava.util.List<java.lang.String> getEmailDomainWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { returnjava.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.Key_EMAIL_DOMAIN_WHITELIST)); }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST).length) > 0; }
public static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST).length) > 0; }
private static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST).length) > 0; }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST).length); }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.KEY_EMAIL_DOMAIN_WHITELIST)).length; }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email,java.util.List<java.lang.String> emailDomainWhitelist) {java.net.URI uri = null; try { uri = newjava.net.URI(email); } catch (java.net.URISyntaxException |java.lang.NullPointerException e) { return false; } return emailDomainWhitelist.contains(uri.getHost()); }
@com.google.common.annotations.VisibleForTesting static boolean isValidEmail(java.lang.String email,java.util.List<java.lang.String> emailDomainWhitelist) {java.net.URI uri = null; try { uri = newjava.net.URI(email); } catch (java.net.URISyntaxException |java.lang.NullPointerException e) { return false; } return emailDomainWhitelist.contains(uri.getHost()); }
@com.google.common.annotations.VisibleForTesting static boolean validateEmail(java.lang.String email,java.util.List<java.lang.String> emailDomainWhitelist) {java.net.URI uri = null; try { uri = newjava.net.URI(email); } catch (java.net.URISyntaxException |java.lang.NullPointerException e) { return false; } return emailDomainWhitelist.contains(uri.getHost()); }
@com.google.common.annotations.VisibleForTesting static boolean isValid(java.lang.String email,java.util.List<java.lang.String> emailDomainWhitelist) {java.net.URI uri = null; try { uri = newjava.net.URI(email); } catch (java.net.URISyntaxException |java.lang.NullPointerException e) { return false; } return emailDomainWhitelist.contains(uri.getHost()); }
@com.google.common.annotations.VisibleForTesting static boolean isEmailValid(java.lang.String email,java.util.List<java.lang.String> emailDomainWhitelist) {java.net.URI uri = null; try { uri = newjava.net.URI(email); } catch (java.net.URISyntaxException |java.lang.NullPointerException e) { return false; } return emailDomainWhitelist.contains(uri.getHost()); }
@org.junit.Test public void validatorInactiveWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@org.junit.Test public void validatorInactiveWhenConfigEmpty() throwsjava.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@org.junit.Test public void validatorInactiveWhenConfigEmpty() throwsjava.io.IOException { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@org.junit.Test public void validatorInactiveWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG))isFalse(); }
private void validatorInactiveWhenConfigEmpty() { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.isActive(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG)).isFalse(); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads = this. threads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads =java.lang.Runtime.getRuntime().availableProcessors(); } } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, "Index-Batch")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads = this. threads; if (batchThreads <= 0) batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads =java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, "Index-Batch")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads =java.lang.Runtime.getRuntime().availableProcessors(); } } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, "Index-Batch")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads = threads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads =java.lang.Runtime.getRuntime().availableProcessors(); } } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, "Index-Batch")); }
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor)!= null) { return batchExecutor; } int batchThreads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); if (batchThreads <= 0) { batchThreads =java.lang.Runtime.getRuntime().availableProcessors(); } } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, "Index-Batch")); }
@org.junit.Test public void indexStalenessIsNotDerivedFromCacheStaleness() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = createGroup("verifiers"); groupIndexer.index(groupUuid); updateGroupWithoutCacheOrIndex(groupUuid, com.google.gerrit.acceptance.api.group.GroupIndexerIT.newGroupUpdate().setDescription("Modified").build()); reloadGroupToCache(groupUuid); boolean reindexed = groupIndexer.reindexIfStale(groupUuid); assertWithMessage("Group should have been reindexed").that(reindexed).isTrue(); }
@org.junit.Test public void indexStalenessIsNotDerivedFromCacheStaleness() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = createGroup("verifiers"); groupIndexer.index(groupUuid); updateGroupWithoutCacheOrIndex(groupUuid, com.google.gerrit.acceptance.api.group.GroupIndexerIT.newGroupUpdate().setDescription("Modified").build()); reloadGroupToCache(groupUuid); boolean reindexed = groupIndexer.reindexIfStale(groupUuid); assertThat(reindexed).isTrue(); }
@org.junit.Test public void indexStalenessIsNotDerivedFromCacheStaleness() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = createGroup("verifiers"); groupIndexer.index(groupUuid); updateGroupWithoutCacheOrIndex(groupUuid, com.google.gerrit.acceptance.api.group.GroupIndexerIT.newGroupUpdate().setDescription("Modified").build()); boolean reindexed = groupIndexer.reindexIfStale(groupUuid); assertWithMessage("Group should have been reindexed").that(reindexed).isTrue(); }
@org.junit.Test public void indexStalenessIsNotDerivedFromCacheStaleness() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = createGroup("verifiers"); groupIndexer.index(groupUuid); updateGroupWithoutCacheOrIndex(groupUuid, com.google.gerrit.acceptance.api.group.GroupIndexerIT.newGroupUpdate().setDescription("Modified").build()); reloadGroupToCache(groupUuid); groupIndexer.reindexIfStale(groupUuid); assertWithMessage("Group should have been reindexed").that(reindexed).isTrue(); }
@org.junit.Test public void indexStalenessIsNotDerivedFromCacheStaleness() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = createGroup("verifiers"); groupIndexer.index(groupUuid); updateGroupWithoutCacheOrIndex(groupUuid, com.google.gerrit.acceptance.api.group.GroupIndexerIT.newGroupUpdate().setDescription("Modified").build()); reloadGroupToCache(groupUuid); boolean reindexed = groupIndexer.reindexIfStale(groupUuid); assertWithMessage("Group should have been reindexed".that(reindexed).isTrue(); }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) {java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
java @java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().schedule(runner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(runner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); if (maybeIgnoredError!= null) { throw possiblyIgnoredError; } } }
@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; }java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { if (!(supportAutomaticActivityUpdate)) { return; }java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java @java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; }java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
java @java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; }java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } com.google.gerrit.server.config.ScheduleConfig.Schedule schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
public static com.google.gerrit.server.config.ScheduleConfig create(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection) { return com.google.gerrit.server.config.ScheduleConfig.builder(config, section, subsection).build(); }
public static com.google.gerrit.server.config.Config create(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection) { return com.google.gerrit.server.config.Config.builder(config, section, subsection).build(); }
private static com.google.gerrit.server.config.ScheduleConfig create(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection) { return com.google.gerrit.server.config.ScheduleConfig.builder(config, section, subsection).build(); }
public static com.google.gerrit.server.config.ScheduleConfig create(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection) { return new com.google.gerrit.server.config.ScheduleConfig.Builder(config, section, subsection).build(); }
public static com.google.gerrit.server.config.ScheduleConfig create(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection) { return com.google.gerrit.server.config.ScheduleConfig.builder(config).section(section).subsection(section); }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return com.google.gerrit.server.config.ScheduleConfig.builder(config, section, null); }
private static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return com.google.gerrit.server.config.ScheduleConfig.builder(config, section, null); }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return builder(config, section, null); }
public static com.google.gerrit.server.config.ConfigBuilder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return com.google.gerrit.server.config.ConfigBuilder.builder(config, section, null); }
public static com.google.gerrit.server.config.ConfigBuilder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return com.google.gerrit.server.config.Config.builder(config, section, null); }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) {java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
java @java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); if (maybeIgnoredError!= null) { throw possiblyIgnoredError; } } }
@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig();java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings("unused")java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().schedule(gcRunner, schedule.get().initialDelay(), schedule.get().interval(),java.util.concurrent.TimeUnit.MILLISECONDS); } }
public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule () { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { if (schedule == null) { schedule = loadSchedule(); } return schedule; }
public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { if ((schedule) == null) { schedule = loadSchedule (); } return schedule; }
public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { return schedule; }
private static long interval(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyInterval) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, keyInterval, com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG,java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }
public static long interval(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyInterval) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, keyInterval, com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG,java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }
static long interval(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyInterval) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, keyInterval, com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG,java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }
private static long interval(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyInterval) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, keyInterval, com.google.gerrit.server.config.ConfigUtil.MISSING_CONFIG,java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ConfigUtil.INVALID_CONFIG; } }
private static long interval(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyInterval) { try { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit(rc, section, subsection, keyInterval,java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.IllegalArgumentException e) { return com.google.gerrit.server.config.ConfigUtil.INVALID_CONFIG; } }
public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
public com.google.gerrit.server.config.ScheduleConfig schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
com.google.gerrit.server.config.Schedule schedule() { if ((schedule) == null) { schedule = loadSchedule(); } return schedule; }
publicjava.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule() { return schedule; }
public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { return schedule; }
private boolean isInvalidOrMissing(long interval, long initialDelay) {java.lang.String key = (section()) + ((subsection())!= null? "." + (subsection()) : ""); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info("No schedule configuration for \"{}\".", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyStartTime()))); return true; } if ((interval <= 0) && (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}\" is ingnored."); return true; } return false; }
private boolean isInvalidOrMissing(long interval, long initialDelay) {java.lang.String key = (section()) + ((subsection())!= null? "." + (subsection()) : ""); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info("No schedule configuration for \"{}\".", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyStartTime()))); return true; } if ((interval <= 0) && (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}\" is ingnored."; return true; } return false; }
private boolean isInvalidOrMissing(long interval, long initialDelay) {java.lang.String key = (section()) + ((subsection())!= null? "." + (subsection()) : ""); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info("No schedule configuration for \"{}\".", key); return true; } if ((interval <= 0) && (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}\" is ingnored. ", key); return true; } return false; }
private boolean isInvalidOrMissing(long interval, long initialDelay) {java.lang.String key = (section()) + ((subsection())!= null? "." + (subsection()) : ""); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info("No schedule configuration for \"{}\".", key); return true; } if ((interval <= 0) && (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}\" is ingnored."); return true; } return false; }
private boolean isInvalidOrMissing(long interval, long initialDelay) {java.lang.String key = (section()) + ((subsection())!= null? "." + (subsection()) : ""); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info("No schedule configuration for \"{}\".", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyStartTime()))); return true; } return false; }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isPresent(); assertThat(s.schedule().get()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isTrue(); assertThat(s.schedule().get()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).istrue(); assertThat(s.schedule().get()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isEmpty(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.schedule()).isTrue(); assertThat(s.schedule().get()).isEqualTo(com.google.gerrit.server.config.ScheduleConfig.Schedule.create(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS))); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.getInterval()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS)); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.getInterval()).isEqualTo(ScheduleConfig.MISSING_CONFIG); assertThat(s.getInitialDelay()).isEqualTo(ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").build(); assertThat(s.getInterval()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS)); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.getInterval()).isEqualTo(ScheduleConfig.MISSING_CONFIG); assertThat(s.getInitialDelay()).isEqualTo(ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.getInterval()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.MS(1,java.util.concurrent.TimeUnit.HOURS)); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.getInterval()).isEqualTo(ScheduleConfig.MISSING_CONFIG); assertThat(s.getInitialDelay()).isEqualTo(ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").build(); assertThat(s.getInterval()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS))); assertThat(s.getInitialDelay()).isEqualTo(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS)); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertThat(s.getInterval()).isEqualTo(ScheduleConfig.MISSING_CONFIG); assertThat(s.getInitialDelay()).isEqualTo(ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").build(); assertThat(s.getInterval()).isEqualTo(ScheduleConfig.MISSING_CONFIG); assertThat(s.getInitialDelay()).isEqualTo(ScheduleConfig.MISSING_CONFIG); }
private static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule().initialDelay(); }
public static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule().initialDelay(); }
static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule().initialDelay(); }
private static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule().initialDelay (); }
private static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule(); }
private static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(com.google.gerrit.server.config.ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build().getInitialDelay(); }
public static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(com.google.gerrit.server.config.ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build().getInitialDelay(); }
static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(com.google.gerrit.server.config.ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build().getInitialDelay(); }
private static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(com.google.gerrit.server.config.ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build().initialDelay(); }
private static long initialDelay(java.lang.String startTime,java.lang.String interval) { return com.google.gerrit.server.config.ScheduleConfig.builder(com.google.gerrit.server.config.ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow().build().getInitialDelay(); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.schedule().interval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.schedule().initialDelay(), ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.schedule().interval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.schedule().initialDelay(), ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.schedule().interval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.schedule().initialDelay(), ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().initialDelay()); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.schedule().initialDelay()); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval( "i").setKeyStartTime( "s").build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval( "myInterval").setKeyStartTime( "myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval( "i" ).setKeyStartTime( "s" ).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval( "myInterval").setKeyStartTime( "myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval( "i" ).setKeyStartTime( "s" ).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval( "myInterval" ).setKeyStartTime( "myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("i").setKeyStartTime("s").build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1,java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a", "b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); } }
private static long initialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
static long initialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
public static long initialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
static long delay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
private static long initialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
public long getInitialDelay() { if ((initialDelay) == null) { load(); } return initialDelay; }
public long initialDelay() { if ((initialDelay) == null) { load(); } return initialDelay; }
public long getInitialDelay() { if (initialDelay == null) { load(); } return initialDelay; }
public long getInitialDelay() { return initialDelay; }
public long initialDelay();
private static long initialDelay(java.lang.String startTime,java.lang.String interval) {java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule(); assertThat(schedule).isPresent(); return schedule.get().initialDelay(); }
private static long initialDelay(java.lang.String startTime,java.lang.String interval) {java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule(); assertThat(schedule).isPresent(); return schedule.get().initialDelay(); }
public static long initialDelay(java.lang.String startTime,java.lang.String interval) {java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule(); assertThat(schedule).isPresent(); return schedule.get().initialDelay(); }
private static long initialDelay(java.lang.String startTime,java.lang.String interval) {java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build(); assertThat(schedule).isPresent(); return schedule.get().initialDelay(); }
static long initialDelay(java.lang.String startTime,java.lang.String interval) {java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = com.google.gerrit.server.config.ScheduleConfig.builder(ScheduleConfigTest.config(startTime, interval), "section", "subsection").setNow(ScheduleConfigTest.NOW).build().schedule(); assertThat(schedule).isPresent(); return schedule.get().initialDelay(); }
private static void doCreateTable(java.sql.Statement stmt) throwsjava.sql.SQLException { stmt.executeUpdate((("CREATE TABLE IF NOT EXISTS account_patch_reviews ( " + ((((((((com.google.gerrit.reviewdb.AccountPatchReviews.id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + ")"))); }
private static void doCreateTable(java.sql.Statement stmt) throwsjava.sql.SQLException { stmt.executeUpdate((("CREATE TABLE IF NOT EXISTS account_patch_reviews ( " + ((((((((com.google.gerrit.reviewdb.AccountPatchReviews.id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " VARCHAR(255) DEFAULT '' NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + ")"))); }
private static void doCreateTable(java.sql.Statement stmt) throwsjava.sql.SQLException { stmt.executeUpdate((("CREATE TABLE IF NOT EXISTS account_patch_reviews ( " + ((((((((com.google.gerrit.reviewdb.AccountPatchReviews.id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " VARCHAR(255) DEFAULT '' NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " VARCHAR(255) DEFAULT '' NOT NULL, ") + " PRIMARY KEY (change_id, patch_set_id, account_id, file_name) ")))); }
private static void doCreateTable(java.sql.Statement stmt) throwsjava.sql.SQLException { stmt.executeUpdate((("CREATE TABLE IF NOT EXISTS account_patch_reviews ( " + ((((((((com.google.gerrit.reviewdb.AccountPatchReviews.id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " VARCHAR(255) DEFAULT '' NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " VARCHAR(255) DEFAULT '' NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id))); }
private static void doCreateTable(java.sql.Statement stmt) throwsjava.sql.SQLException { stmt.executeUpdate((("CREATE TABLE IF NOT EXISTS account_patch_reviews ( " + ((((((((com.google.gerrit.reviewdb.AccountPatchReviews.id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " INTEGER DEFAULT NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + " VARCHAR(256) DEFAULT '' NOT NULL, ") + (com.google.gerrit.reviewdb.AccountPatchReviews.patch_set_id) + "))) + "")); }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { try { return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get()) + " not found"))); } }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { try { return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get()) + " not found")); } }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { try { return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get()) + ") not found")); } }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { try { return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project" + (projectName.get()) + " not found"))); } }
public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { try { return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((("Project " + (projectName.get())) + " not found")); } }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Invalid reviewers configuration"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject.FILENAME, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Invalid reviewers configuration"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FOR_PROJECT.FILENAME, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Invalid reviewers configuration"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FOR_PROJECT, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("Invalid reviewers configuration"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILENAME, cfg); return true; }
@java.lang.Override protected boolean onSave(org.eclipse.jgit.lib.CommitBuilder commit) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.common.base.Strings.isNullOrEmpty(commit.getMessage())) { commit.setMessage("No reviewers configuration"); } saveConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FOR_PROJECT, cfg); return true; }
java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections();
javajava.lang.String filter;
javajava.lang.String projectName;
javajava.lang.String[] filterSections();

void removeReviewer(java.lang.String filter,java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) {java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter); } else { cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } } }
voidRemoveReviewer(java.lang.String filter,java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) {java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter); } else { cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } } }
java void removeReviewer(java.lang.String filter,java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) {java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter); } else { cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } } }
public void removeReviewer(java.lang.String filter,java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) {java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter); } else { cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } } }
void removeReviewer(java.lang.String filter,java.lang.String reviewer) { if (newReviewerFilterSection(filter).getReviewers().contains(reviewer)) {java.util.List<java.lang.String> values = com.google.common.collect.Lists.newArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.remove(reviewer); if (values.isEmpty()) { cfg.unsetSection(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter); } else { cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } } }
private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }
private static com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }
private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }
private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER)); }
private static com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); };
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILENAME); }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.forProject.FILENAME); }
@java.lang.Override protected void onLoad() throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FOR_PROJECT); }
@java.lang.Override protected void onLoad() throwsjava.io.IOException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILENAME); }
@java.lang.Override protected void onLoad() throwsjava.io.IOException { cfg = readConfig(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FOR_PROJECT.FILENAME); }
privatejava.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { try { return config.forProject(projectName).getReviewerFilterSections(); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error("Failed to get config for project {}", projectName.get()); return com.google.common.collect.ImmutableList.of(); } }
privatejava.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { try { return config.forProject(projectName).getReviewerFilterSections(); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error("Unable to get config for project {}", projectName.get()); return com.google.common.collect.ImmutableList.of(); } }
privatejava.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { try { return config.forProject(projectName).getReviewerFilterSections(); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error("failed to get config for project {}", projectName.get()); return com.google.common.collect.ImmutableList.of(); } }
privatejava.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { return config.forProject(projectName).getReviewerFilterSections(); }
privatejava.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getSections(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { try { return config.forProject(projectName).getReviewerFilterSections(); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { com.googlesource.gerrit.plugins.reviewers.Reviewers.log.error("Failed to get config for project {}", projectName.get()); returnjava.util.Collections.emptyList(); } }
void addReviewer(java.lang.String filter,java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) {java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } }
java void addReviewer(java.lang.String filter,java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) {java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } }
void addReviewer(java.lang.String filter,java.lang.String reviewer) { if (!(newReviewerFilterSection(filter).getReviewers().contains(reviewer))) { return; }java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); }
void addReviewer(java.lang.String filter,java.lang.String reviewer) {java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); }
void addReviewer(java.lang.String filter,java.lang.String reviewer) {java.util.List<java.lang.String> values = newjava.util.ArrayList(java.util.Arrays.asList(cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER))); values.add(reviewer); cfg.setStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER, values); } }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((o.major) == null)) { return -1; } if (major.equals(o.major)) { if (minor.equals(o.minor)) { if (patch.equals(o.patch)) { return 0; } if ((o.patch) == null) { return 1; } if ((patch) == null) { return -1; } return (patch) - (o.patch); } if ((o.minor) == null) { return 1; } if ((minor) == null) { return -1; } return (minor) - (o.minor); } return (major) - (o.major); }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((o.major) == null)) { return -1; } if (major.equals(o.major)) { if (minor.equals(o.minor)) { if (patch.equals( o.patch)) { return 0; } if ((o.patch) == null) { return 1; } if ((patch) == null) { return -1; } return (patch) - (o.patch); } if ((o.minor) == null) { return 1; } if ((minor) == null) { return -1; } return (minor) - (o.minor); } return (major) - (o.major); }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((o.major) == null)) { return -1; } if (major.equals(o.major)) { if (minor.equals(o.minor)) { return 0; } if ((patch) == null) { return 1; } if ((patch) == null) { return -1; } return (patch) - (o.patch); } if ((o.minor) == null) { return 1; } if ((o.minor) == null) { return -1; } return (minor) - (o.minor); }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((o.major) == null)) { return -1; } if (major.equals(o.major)) { if (minor.equals(o.minor)) { if (patch.equals(o.patch)) { return 0; } if ((o.patch) == null) { return 1; } if ((patch) == null) { return -1; } return (patch) - (o.patch); } if ((o.minor) == null) { return 1; } if ((minor) == null) { return -1; } return (minor) - (o.minor); } return (major) - (o.major); } }
@java.lang.Override public int compareTo(com.googlesource.gerrit.plugins.importer.GerritApi.Version o) { if (((major) == null) || ((o.major) == null)) { return -1; } if (major.equals(o.major)) { if (minor.equals(o.minor)) { if (patch.equals( o.patch)) { return 0; } if ((o.patch) == null) { return 1; } if ((patch) == null) { return -1; } return (patch) - (o.patch); } if ((o.minor) == null) { return 1; } if ((minor) == null) { return -1; } return (minor) - (o.minor); } return (major) - (o.major); } }
@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isTrue(); } }
@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isTrue(); } }
@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isTrue(); } }
@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isTrue(); } }
@org.junit.Test public void validPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertThat (com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isTrue(); } }
@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isFalse(); } }
@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c))).isFalse(); } }
@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isFalse(); } }
@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isFalse(); } }
@org.junit.Test public void inalidPathSeparator() { com.google.gerrit.server.config.GitwebConfigTest.inalidPathSeparator(); }
@java.lang.Override publicjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throwsjava.io.IOException {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return refs; }
@java.lang.Override publicjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throwsjava.io.IOException {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()); return com.google.common.collect.Maps.newHashMapWithExpectedSize(refs.size()); }
@java.lang.Override publicjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throwsjava.io.IOException { try { return perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override publicjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throwsjava.io.IOException {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs; try { refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } return refs; }
@java.lang.Override publicjava.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getRefs(java.lang.String prefix) throwsjava.io.IOException {java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = perm.filter(delegate.getRefs(prefix), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { result.put(ref.getName().substring(prefix.length()), ref); } return result; }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throwsjava.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref ref(java.lang.String name) throwsjava.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throwsjava.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throwsjava.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref exactRef(java.lang.String name) throwsjava.io.IOException { try { org.eclipse.jgit.lib.Ref ref = delegate.exactRef(name); if (ref == null) { return null; } return perm.filter(com.google.common.collect.ImmutableMap.of(name, ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(name); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throwsjava.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throwsjava.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throwsjava.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throwsjava.io.IOException { try { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throwsjava.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw newjava.io.IOException(e); } }
public static void loadSiteLib(java.nio.file.Path libdir) { try {java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.info("Loaded site libraries: {}", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Error scanning lib directory " + libdir), e); } }
public static void loadSiteLib(java.nio.file.Path libdir) { try {java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.info("Loaded site libraries: {}", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars))); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Error scanning lib directory " + libdir), e); } }
public static void loadSiteLib(java.nio.file.Path libdir) { try {java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.info("Loading site libraries: {}", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Error scanning lib directory " + libdir), e); } }
public static void loadSiteLib(java.nio.file.Path libdir) { try {java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.info("Found site libraries: {}", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Error scanning lib directory " + libdir), e); } }
public static void loadSiteLib(java.nio.file.Path libdir) { try {java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.info("Available site libraries: {}", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Error scanning lib directory " + libdir), e); } }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid; if (s.getUserName().isPresent()) { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getUserName().get()); } else { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getAccount().getId()); } return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.nameOf(uuid, s)); }
private static com.google.gerrit.common.data.GroupReference groupToAccount(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid; if (s.getUserName().isPresent()) { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getUserName().get()); } else { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getAccount().getId()); } return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.nameOf(uuid, s)); }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid; if (s.getUserName().isPresent()) { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getUserName().get()); } else { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getAccount().getId()); } return new com.google.gerrit.common.data.GroupReference(uuid, com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.nameOf(uuid, s); }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { return new com.google.gerrit.common.data.GroupReference(com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getAccount().getId()), com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.nameOf(s)); }
private static com.google.gerrit.common.data.GroupReference accountToGroup(com.google.gerrit.server.account.AccountState s) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid; if (s.getUserName().isPresent()) { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getUserName().get()); } else { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid(s.getAccount().getId()); } return new com.google.gerrit.common.data.GroupReference(uuid, AccountGroup.nameOf(uuid, s)); }
private void warnErrorEmail(com.google.gerrit.server.mail.receive.MailMessage message,java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorEmail em = createErrorEmailFactory.create(); em.setTo(message.from()); em.setReplyTo(message.id()); em.setReason(reason); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error("Cannot send email for erroneous email", e); throw newjava.lang.Error(e); } }
private void warnErrorEmail(com.google.gerrit.server.mail.receive.MailMessage message,java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorEmail em = createErrorEmailFactory.create(); em.setFrom(message.from()); em.setReplyTo(message.id()); em.setReason(reason); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error("Cannot send email for erroneous email", e); throw newjava.lang.Error(e); } }
private void warnErrorEmail(com.google.gerrit.server.mail.receive.MailMessage message,java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorEmail em = createErrorEmailFactory.create(); em.setTo(message.from()); em.setReplyTo(message.id()); em.setReason(reason); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error(("Cannot send email for erroneous email", e); throw newjava.lang.Error(e); } }
private void warnErrorEmail(com.google.gerrit.server.mail.receive.MailMessage message,java.lang.String reason) { com.google.gerrit.server.mail.send.ErrorEmail em = createErrorEmailFactory.create(); em.setTo(message.from()); em.setReplyTo(message.id()); em.setReason(reason); em.send(); }
private static void warnErrorEmail(com.google.gerrit.server.mail.receive.MailMessage message,java.lang.String reason) { try { com.google.gerrit.server.mail.send.ErrorEmail em = createErrorEmailFactory.create(); em.setTo(message.from()); em.setReplyTo(message.id()); em.setReason(reason); em.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.mail.receive.MailProcessor.log.error("Cannot send email for erroneous email", e); throw newjava.lang.Error(e); } }
void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", newjava.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Message-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = newjava.lang.StringBuilder(); htmlBody = newjava.lang.StringBuilder(); if (((fromId)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
protected void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", newjava.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Message-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = newjava.lang.StringBuilder(); htmlBody = newjava.lang.StringBuilder(); if (((fromId)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
private void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", newjava.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Message-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = newjava.lang.StringBuilder(); htmlBody = newjava.lang.StringBuilder(); if (((fromId)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
public void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", newjava.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); setHeader("Message-ID", ""); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = newjava.lang.StringBuilder(); htmlBody = newjava.lang.StringBuilder(); if (((fromId)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
void init() throws com.google.gerrit.common.errors.EmailException { setupSoyContext(); smtpFromAddress = args.fromAddressGenerator.from(fromId); setHeader("Date", newjava.util.Date()); headers.put("From", new com.google.gerrit.server.mail.send.EmailHeader.AddressList(smtpFromAddress)); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_TO, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); headers.put(com.google.gerrit.server.mail.send.OutgoingEmail.HDR_CC, new com.google.gerrit.server.mail.send.EmailHeader.AddressList()); for (com.google.gerrit.extensions.api.changes.RecipientType recipientType : accountsToNotify.keySet()) { add(recipientType, accountsToNotify.get(recipientType)); } setHeader("X-Gerrit-MessageType", messageClass); textBody = newjava.lang.StringBuilder(); htmlBody = newjava.lang.StringBuilder(); if (((fromId)!= null) && (args.fromAddressGenerator.isGenericAddress(fromId))) { appendText(getFromLine()); } }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail();java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(sender.getMessages()).hasSize(0); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail();java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(3); assertThat(sender.getMessages()).hasSize(0); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail();java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(sender.getMessages()).hasSize(2); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail();java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(sender.getMessages()).hasSize(1); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.mode", value = "WHITELIST") @com.google.gerrit.acceptance.GerritConfig(name = "receiveemail.filter.patterns", values = { ".+@gerritcodereview\\.com", "a@b\\.com" }) public void listFilterWhitelistFiltersNotListedUser() throwsjava.lang.Exception { changeInfo = createChangeAndReplyByEmail();java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); assertThat(sender.getMessages()).hasSize(0); }
@org.junit.Test public void sendNotificationOnMissingMetadatas() throwsjava.lang.Exception {java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get();java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2);java.lang.String ts = "null";java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(user); com.google.gerrit.testing.FakeEmailSender.Message message = sender.nextMessage(); assertThat(message.body()).contains("missing required metadata"); }
@org.junit.Test public void sendNotificationOnMissingMetadata() throwsjava.lang.Exception {java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get();java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2);java.lang.String ts = "null";java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(user); com.google.gerrit.testing.FakeEmailSender.Message message = sender.nextMessage(); assertThat(message.body()).contains("missing required metadata"); }
@org.junit.Test public void sendNotificationOnMissingMetadataatas() throwsjava.lang.Exception {java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get();java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2);java.lang.String ts = "null";java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(user); com.google.gerrit.testing.FakeEmailSender.Message message = sender.nextMessage(); assertThat(message.body()).contains("missing required metadata"); }
@org.junit.Test public void sendNotificationOnMissingMetadatas() throwsjava.lang.Exception {java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get();java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2);java.lang.String ts = "";java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(user); com.google.gerrit.testing.FakeEmailSender.Message message = sender.nextMessage(); assertThat(message.body()).contains("missing required metadata"); }
@org.junit.Test public void sendNotificationOnMissingMetadatas() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get();java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2);java.lang.String ts = "null";java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (textFooterForChange(changeInfo._number, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(user); com.google.gerrit.testing.FakeEmailSender.Message message = sender.nextMessage(); assertThat(message.body()).contains("missing required metadata"); }
static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.time.format.DateTimeParseException |java.lang.IllegalArgumentException e) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.time.format.DateTimeParseException |java.lang.IllegalArgumentException e) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
public static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG;java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start!= null) {java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("HH:mm");java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
public static com.google.gerrit.server.config.ScheduleConfig.Schedule createOrFail(long interval,java.lang.String startTime) { return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, startTime).orElseThrow(java.lang.IllegalStateException::new); }
public static com.google.gerrit.server.config.ScheduleConfig.Schedule createOrFail(long interval,java.lang.String startTime) { return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, startTime).orElseThrow(java.lang.IllegalArgumentException::new); }
private static com.google.gerrit.server.config.ScheduleConfig.Schedule createOrFail(long interval,java.lang.String startTime) { return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, startTime).orElseThrow(java.lang.IllegalStateException::new); }
public static com.google.gerrit.server.config.ScheduleConfig createOrFail(long interval,java.lang.String startTime) { return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, startTime).orElseThrow(java.lang.IllegalStateException::new); }
public static com.google.gerrit.server.config.ScheduleConfig.Schedule createOrFail(long interval,java.lang.String startTime) { return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, startTime).orElseThrow(); }
private static long computeInitialDelay(long interval,java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, com.google.gerrit.server.config.ScheduleConfig.NOW); }
private static long computeInitialDelay(java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(start, com.google.gerrit.server.config.ScheduleConfig.NOW); }
private static long computeInitialDelay(long interval,java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, com.google.gerrit.server.config.ScheduleConfig.now()); }
private static long computeInitialDelay(long interval,java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, com.google.gerrit.server.config.ScheduleConfig.now); }
private static long computeInitialDelay(java.lang.String start) { return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(com.google.gerrit.server.config.ScheduleConfig.NOW, start); }
private static long computeInitialDelay(long interval,java.lang.String start,java.time.ZonedDateTime now) { checkNotNull(start);java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("[E ]HH:mm").withLocale(java.util.Locale.US);java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } return delay; }
private static long computeInitialDelay(long interval,java.lang.String start,java.time.ZonedDateTime now) { checkNotNull(start);java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("[E ]HH:mm").withLocale(java.util.Locale.US);java.time.ZonedDateTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } return delay; }
private static long computeInitialDelay(long interval,java.lang.String start,java.time.ZonedDateTime now) { checkNotNull(start);java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("[E ]HH:mm").withLocale(java.util.Locale.US);java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } return delay; }
private static long computeInitialDelay(long interval,java.lang.String start,java.time.ZonedDateTime now) { checkNotNull(start);java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("[E ]HH:mm").withLocale(java.util.Locale.US);java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (0 <= delay) { delay += interval; } return delay; }
private static long computeInitialDelay(long interval,java.lang.String start,java.time.ZonedDateTime now) { checkNotNull(start);java.time.format.DateTimeFormatter formatter =java.time.format.DateTimeFormatter.ofPattern("[E ]HH:mm").withLocale(java.util.Locale.US);java.time.LocalTime firstStartTime =java.time.LocalTime.parse(start, formatter);java.time.ZonedDateTime startTime = now.with(firstStartTime); try {java.time.DayOfWeek dayOfWeek = formatter.parse(start,java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (0 < delay) { delay += interval; } return delay; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) {java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start == null) { return com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, now); } catch (java.lang.IllegalArgumentException e2) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) {java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start == null) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, now); } catch (java.lang.IllegalArgumentException e2) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }
static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) {java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start == null) { return com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, now); } catch (java.lang.IllegalArgumentException e2) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) {java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start == null) { return com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(start, now, interval); } catch (java.lang.IllegalArgumentException e2) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }
public static long computeInitialDelay(org.eclipse.jgit.lib.Config rc,java.lang.String section,java.lang.String subsection,java.lang.String keyStartTime,java.time.ZonedDateTime now, long interval) {java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start == null) { return com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(interval, start, now); } catch (java.lang.IllegalArgumentException e2) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(com.google.gerrit.server.config.ScheduleConfig.NOW).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(com.google.gerrit.server.config.ScheduleConfig.TIMESTAMP).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(com.google.gerrit.server.config.ScheduleConfig.now()).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(com.google.gerrit.server.config.ScheduleConfig.INSTANCE).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder(org.eclipse.jgit.lib.Config config,java.lang.String section) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder().setNow(com.google.gerrit.server.config.ScheduleConfig.Now).setKeyInterval(com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL).setKeyStartTime(com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME).setConfig(config).setSection(section); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case PUSH_AT_LEAST_ONE_REF : return canPushToAtLeastOneRef(); case READ_CONFIG : return controlForRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case BAN_COMMIT : case READ_REFLOG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case PUSH_AT_LEAST_ONE_REF : return canPushToAtLeastOneRef(); case READ_CONFIG : return controlForRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case BAN_COMMIT : case READ_REFLOG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case PUSH_AT_LEAST_ONE_REF : return canPushToAtLeastOneRef(); case BAN_COMMIT : case READ_REFLOG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
public boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case PUSH_AT_LEAST_ONE_REF : return canPushToAtLeastOneRef(); case READ_CONFIG : return controlForRef(RefNames.REFS_CONFIG).canPerform(Permission.READ); case BAN_COMMIT : case READ_REFLOG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && ((user.isInternalUser()) || (canPerformOnAnyRef(Permission.READ)))) || (isOwner()); case READ : return (!(isHidden())) && (allRefsAreVisible(java.util.Collections.emptySet())); case CREATE_REF : return canAddRefs(); case CREATE_CHANGE : return canCreateChanges(); case RUN_RECEIVE_PACK : return canRunReceivePack(); case RUN_UPLOAD_PACK : return canRunUploadPack(); case PUSH_AT_LEAST_ONE_REF : return canPushToAtLeastOneRef(); case WRITE_CONFIG : return canWriteConfig(); case BAN_COMMIT : case READ_REFLOG : case WRITE_CONFIG : return isOwner(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.Iterable<com.google.gerrit.common.data.GroupReference> allGroups = groups.getAllGroupReferences(db); for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID()); } }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.Iterable<com.google.gerrit.common.data.GroupReference> allGroups = groups.getAllGroupReferences(db):iterator; for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID()); } }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.Iterable<com.google.gerrit.common.data.GroupReference> allGroups = groups.getAllGroupReferences(db)::iterator; for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID()); } }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.Iterable<com.google.gerrit.common.data.GroupReference> allGroups = groups.getAllGroupReferences(db).iterator(); for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID()); } }
private void reindexAllGroups() throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Iterator<com.google.gerrit.common.data.GroupReference> allGroups = groups.getAllGroupReferences(db); for (com.google.gerrit.common.data.GroupReference group : allGroups) { groupCache.onCreateGroup(group.getUUID()); } }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "Command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { for (int i = 1; i < (trimmedArgs.length); i++) { commandName.append(".").append(trimmedArgs[i]); } } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { for (int i = 1; i < (trimmedArgs.length); i++) { commandName.append(".").append(trimmedArgs[i]); } } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "cmd was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { for (int i = 1; i < (trimmedArgs.length); i++) { commandName.append(".").append(trimmedArgs[i]); } } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { for (int i = 1; i < (trimmedArgs.length); i++) { commandName.append(".").append(trimmedArgs[i]); } } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "Command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.trimmedArguments(); if (trimmedArgs!= null) { for (int i = 1; i < (trimmedArgs.length); i++) { commandName.append(".").append(trimmedArgs[i]); } } return commandName.toString(); }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case GIT : return false; case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((isOwner()) && (!(canPerform(Permission.PUSH, true, true))) || (projectControl.isAdmin()); } }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case GIT : return false; case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((isOwner()) && (!(canPerform(Permission.PUSH, true, true))); } }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } switch (getUser().getAccessPath()) { case GIT : return false; case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((isOwner()) && (!(canPerform(Permission.PUSH, true, true)), (projectControl.isAdmin())); } }
private boolean canForceUpdate() { if (canPushWithForce()) { return true; } return false; }
private boolean canForceUpdate() { return canPushWithForce(); }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return (((isOwner()) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : return (((isOwner()) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return true; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return (((isOwner()) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return (((isOwner()) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return (((isOwner()) && (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { for (com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.blocks) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.overrides) { if (projectControl.match(pr, isChangeOwner)) { return (pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW); } } } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getRules(permissionName)) { if (projectControl.match(pr, isChangeOwner)) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { return false; } if (withForce) { if (((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && (pr.getForce())) { return true; } } else if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) { return true; } } } } return false; }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { for (com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.blocks) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.overrides) { if (projectControl.match(pr, isChangeOwner)) { return (pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW); } } } } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getRules(permissionName)) { if (projectControl.match(pr, isChangeOwner)) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { return false; } if (withForce) { if (((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && (pr.getForce())) { return true; } } else if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) { return true; } } } return false; }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { for (com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.rules) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.overrides) { if (projectControl.match(pr, isChangeOwner)) { return (pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW); } } } } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getRules(permissionName)) { if (projectControl.match(pr, isChangeOwner)) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { return false; } if (withForce) { if (((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && (pr.getForce())) { return true; } } else if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) { return true; } } } return false; }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { for (com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.blocks) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.overrides) { if (projectControl.match(pr, isChangeOwner)) { return (pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW); } } } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getRules(permissionName)) { if (projectControl.match(pr, isChangeOwner)) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { return false; } if (withForce) { if (((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && (pr.getForce())) { return true; } } else if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) { return true; } } } return false; }
private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { for (com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.rules) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.overrides) { if (projectControl.match(pr, isChangeOwner)) { return (pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW); } } } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getRules(permissionName)) { if (projectControl.match(pr, isChangeOwner)) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { return false; } if (withForce) { if (((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && (pr.getForce())) { return true; } } else if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) { return true; } } } } return false; }
boolean canForceEditTopicName() { return canPerform(Permission.EDIT_TOPIC_NAME); }
boolean canForceEditTopicName() { return canPerform (Permission.EDIT_TOPIC_NAME); }
private boolean canForceEditTopicName() { return canPerform(Permission.EDIT_TOPIC_NAME); }
public boolean canForceEditTopicName() { return canPerform(Permission.EDIT_TOPIC_NAME); }
boolean canForceEditTopicName() { return canPerform(Permission.FORCE_EDIT_TOPIC_NAME); }
publicjava.util.List<com.google.gerrit.common.data.PermissionRule> getRules(java.lang.String perm) { return rulesByPermission.get(perm); }
publicjava.util.Collection<com.google.gerrit.common.data.PermissionRule> getRules(java.lang.String perm) { return rulesByPermission.get(perm); }
privatejava.util.List<com.google.gerrit.common.data.PermissionRule> getRules(java.lang.String perm) { return rulesByPermission.get(perm); }
public com.google.gerrit.common.data.PermissionRule getRules(java.lang.String perm) { return rulesByPermission.get(perm); }
publicjava.util.List<com.google.gerrit.common.data.PermissionRule> getRules(java.lang.String perm);
publicjava.util.List<com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection> getBlocks(java.lang.String perm) { return blockByPermission.get(perm); }
publicjava.util.List<com.google.gerrit.server.permissions.PermissionBlockAccessSection> getBlocks(java.lang.String perm) { return blockByPermission.get(perm); }
publicjava.util.List<com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection> getBlocksByPermission(java.lang.String perm) { return blockByPermission.get(perm); }
publicjava.util.List<com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection> getBlocks(java.lang.String perm);
publicjava.util.List<com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection> getBlocks(com.google.gerrit.reviewdb.client.Project.NameKey project) { return blockByProject.get(project); }
publicjava.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) {java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByPermission.get(permissionName); return r!= null? r :java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList(); }
publicjava.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { return rulesByPermission.get(permissionName); }
publicjava.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) {java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByPermission.get(permissionName); return r!= null? r :java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList(); }
publicjava.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) {java.util.List<com.google.gerrit.common.data.PermissionRule> r = rulesByName.get(permissionName); return r!= null? r :java.util.Collections.<com.google.gerrit.common.data.PermissionRule>emptyList(); }
java publicjava.util.List<com.google.gerrit.common.data.PermissionRule> getPermission(java.lang.String permissionName) { return rulesByPermission.get(permissionName); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName,java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, (-1)); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName,java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, (-1) + 1); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName,java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, (-1), ruleList); }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName,java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, (-1)), ruleList; }
private com.google.gerrit.common.data.PermissionRange toRange(java.lang.String permissionName,java.util.List<com.google.gerrit.common.data.PermissionRule> ruleList) { return new com.google.gerrit.common.data.PermissionRange(permissionName, ((-1) + 1)); }
staticjava.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.AccessSection> sections,java.lang.String permName) {java.util.List<com.google.gerrit.common.data.PermissionRule> r = newjava.util.ArrayList<>(); for (com.google.gerrit.common.data.AccessSection s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(permName); if (p == null) { continue; } for (com.google.gerrit.common.data.PermissionRule pr : p.getRules()) { r.add(pr); } if (p.getExclusiveGroup()) { break; } } return r; }
staticjava.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.AccessSection> sections,java.lang.String permName) {java.util.List<com.google.gerrit.common.data.PermissionRule> r = newjava.util.ArrayList<>(); for (com.google.gerrit.common.data.AccessSection s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(permName); if (p == null) { continue; } for (com.google.gerrit.common.data.PermissionRule pr : p.getRules()) { r.add(pr); } } return r; }
private staticjava.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.AccessSection> sections,java.lang.String permName) {java.util.List<com.google.gerrit.common.data.PermissionRule> r = newjava.util.ArrayList<>(); for (com.google.gerrit.common.data.AccessSection s : sections) { com.google.gerrit.common.data.Permission p = s.getPermission(permName); if (p == null) { continue; } for (com.google.gerrit.common.data.PermissionRule pr : p.getRules()) { r.add(pr); } } return r; }
public staticjava.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.AccessSection> sections,java.lang.String permName) { return findRules(sections, permName, null); }
public staticjava.util.List<com.google.gerrit.common.data.PermissionRule> findRules(java.util.List<com.google.gerrit.common.data.AccessSection> sections,java.lang.String permName) { return findRules(sections, permName, false); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "allow draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Uploading draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR " + ( (SELECT * FROM patch_sets WHERE + = changes.change_id AND patch_sets.draft = 'Y') column))))); e.execute("UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "allow draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Uploading draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR " + ( (SELECT * FROM patch_sets WHERE + = changes.change_id AND patch_sets.draft = 'Y') column))); e.execute("UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'")); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "only draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Draft draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR " + ( (SELECT * FROM patch_sets WHERE + = changes.change_id AND patch_sets.draft = 'Y') column))))); e.execute("UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'"); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "only draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Draft draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR " + ( (SELECT * FROM patch_sets WHERE + = changes.change_id AND patch_sets.draft = 'Y') column))); e.execute("UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'")); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "allow draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Uploading draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR " + ( (SELECT * FROM patch_sets WHERE + = changes.change_id AND patch_sets.draft = 'Y') column)); e.execute("UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'")); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "only draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Only draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("INSERT INTO changes " + (((((((((("change %s = 'Y', created_on = created_on + ", status = 'd' + OR (status = 'n' + " AND EXISTS" + (SELECT * + FROM patch_sets" WHERE patch_sets.change_id = changes.change_id + ") AND patch_sets.draft = 'Y')))) + ")))), column)); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "only draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Only draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("INSERT INTO changes " + (((((((((("change %s = 'Y', created_on = created_on + ", status = 'd' + OR (status = 'n' + " AND EXISTS" + (SELECT * + FROM patch_sets" WHERE patch_sets.change_id = changes.change_id + ") AND patch_sets.draft = 'Y')))) + column)))), column)); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "only draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Only draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("INSERT INTO changes " + (((((((((("change %s = 'Y', created_on = created_on + ", status = 'd' + OR (status = 'n' + " AND EXISTS" + (SELECT * + FROM patch_sets" WHERE patch_sets.change_id = changes.change_id + ") AND patch_sets.draft = 'Y')))) + "))) + column)); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "only draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Only draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("INSERT INTO changes " + ((((((((((("change %s = 'Y', created_on = created_on + ", status = 'd' + OR (status = 'n' + " AND EXISTS" + (SELECT * + FROM patch_sets" WHERE patch_sets.change_id = changes.change_id + ") AND patch_sets.draft = 'Y')))) + "))) + "WHERE patch_sets.draft = 'Y')))); } ui.message("done"); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, "only draft changes to private changes (default is work-in-progress)?")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format("Only draft changes with %s changes...", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) {java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE))? "is_private" : "work_in_progress"; e.execute(java.lang.String.format(("INSERT INTO changes " + ((((((((((("change %s = 'Y', created_on = created_on + ", status = 'd' + OR (status = 'n' + " AND EXISTS" + (SELECT * + FROM patch_sets" WHERE patch_sets.change_id = changes.change_id + ") AND patch_sets.draft = 'Y')))) + "))) + "WHERE patch_sets.draft = 'Y')")); } ui.message("done"); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "Command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { commandName.append(com.google.gerrit.sshd.Joiner.on(", ".).join(trimmedArgs)); } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "Command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { commandName.append(com.google.gerrit.sshd.Joiner.on(",").join(trimmedArgs)); } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { commandName.append(com.google.gerrit.sshd.Joiner.on(", ".).join(trimmedArgs)); } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "Command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { commandName.append(com.google.gerrit.sshd.Joiner.on(", ").join(trimmedArgs)); } return commandName.toString(); }
privatejava.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "Command was already destroyed"; }java.lang.StringBuilder commandName = newjava.lang.StringBuilder(dcmd.getCommandName());java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs!= null) { commandName.append(com.google.gerrit.sshd.Joiner.on(", ".join(trimmedArgs))); } return commandName.toString(); }
publicjava.lang.String myUrl() { throw newjava.lang.UnsupportedOperationException("peerInfo.jgroups.myUrl not supported"); }
publicjava.lang.String url() { throw newjava.lang.UnsupportedOperationException("peerInfo.jgroups.url not supported"); }
privatejava.lang.String myUrl() { throw newjava.lang.UnsupportedOperationException("peerInfo.jgroups.myUrl not supported"); }
publicjava.lang.String myUrl() { return peerInfo.jgroups.myUrl(); }
publicjava.lang.String url() { throw newjava.lang.UnsupportedOperationException("peerInfo.jgroups.myUrl not supported"); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { assertThat(getConfiguration().healthCheck().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, false); assertThat(getConfiguration().healthCheck().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, true); assertThat(getConfiguration().healthCheck().enabled()).isTrue(); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { assertThat(getConfiguration().healthCheck().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, false); assertThat(getConfiguration().healthCheck().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, true); assertThat(getConfiguration().healthCheck().enabled()).isTrue(); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { assertThat(getConfiguration().healthCheck().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null); assertThat(getConfiguration().healthCheck().enabled()).isFalse(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, true); assertThat(getConfiguration().healthCheck().enabled()).isTrue(); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { assertThat(getConfiguration().healthCheck().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, false); assertThat(getConfiguration().healthCheck().enabled()).isFalse(); }
@org.junit.Test public void testHealthCheckEnabled() throwsjava.lang.Exception { assertThat(getConfiguration().healthCheck().enabled()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.HEALTH_CHECK_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.ENABLE_KEY, false); assertThat(getConfiguration().healthCheck().enabled()).isFalse(); }
@org.junit.Test public void testGetJGroupsSkipInterface() throwsjava.lang.Exception { assertThat(getConfiguration().jgroups().skipInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_INTERFACE_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_INTERFACE_KEY, wiremock.com.google.common.collect.Lists.newArrayList("lo*", "eth0")); assertThat(getConfiguration().jgroups().skipInterface()).containsAllOf("lo*", "eth0").inOrder(); }
@org.junit.Test public void testGetJGroupsSkipInterface() throwsjava.lang.Exception { assertThat(getConfiguration().jgroups().skipInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_INTERFACE_LIST); globalPluginConfig. setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_INTERFACE_KEY, wiremock.com.google.common.collect.Lists.newArrayList("lo*", "eth0")); assertThat(getConfiguration().jgroups().skipInterface()).containsAllOf("lo*", "eth0").inOrder(); }
@org.junit.Test public void testGetJGroupsSkipInterface() throwsjava.lang.Exception { assertThat(getConfiguration().jgroups().skipInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_INTERFACE_LIST); globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_INTERFACE_KEY, com.google.common.collect.Lists.newArrayList("lo*", "eth0")); assertThat(getConfiguration().jgroups().skipInterface()).containsAllOf("lo*", "eth0").inOrder(); }
@org.junit.Test public void testGetJGroupsSkipInterface() throwsjava.lang.Exception { assertThat(getConfiguration().jgroups().skipInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_INTERFACE_LIST); globalPluginConfig. setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_INTERFACE_KEY, com.google.common.collect.Lists.newArrayList("lo*", "eth0")); assertThat(getConfiguration().jgroups().skipInterface()).containsAllOf("lo*", "eth0").inOrder(); }
@org.junit.Test public void testGetJGroupsSkipInterface() throwsjava.lang.Exception { assertThat(getConfiguration().jgroups().skipInterface()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SKIP_INTERFACE_LIST); globalPluginConfig. setStringList (com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SKIP_INTERFACE_KEY, wiremock.com.google.common.collect.Lists.newArrayList("lo*", "eth0")); assertThat(getConfiguration().jgroups().skipInterface()).containsAllOf("lo*", "eth0").inOrder(); }
@org.junit.Test public void testGetJGroupsCluster() throwsjava.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, "foo"); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo("foo"); }
@org.junit.Test public void testGetJGroupsCluster() throwsjava.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo("foo"); }
@org.junit.Test public void testGetJGroupsCluster() throwsjava.lang.Exception { globalPluginConfig. setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, "foo"); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo("foo"); }
@org.junit.Test public void testGetJGroupsCluster() throwsjava.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, "foo"); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo("foo"); }
@org.junit.Test public void testGetJGroupsCluster() throwsjava.lang.Exception { globalPluginConfig.setString (com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, "foo"); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo("foo"); }
@org.junit.Test public void testGetWebsessionSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().websession().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().websession().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().websession().synchronize()).isTrue(); }
@org.junit.Test public void testGetWebsessionSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().websession().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().websession().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().websession().synchronize()).isTrue(); }
@org.junit.Test public void testGetWebsessionSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().websession().synchronize()).isTrue(); globalPluginConfig.setBoolean (com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().websession().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().websession().synchronize()).isTrue(); }
@org.junit.Test public void testGetWebsessionSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().websession().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().websession().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration()).websession().synchronize()).isTrue(); }
@org.junit.Test public void testGetWebsessionSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().websession().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().websession().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration()).websession().synchronize()).isTrue(); }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wiremock.com.google.common.collect.Lists.newArrayList("^my_cache.*", "other") ); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wiremock.com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wiremock.com.google.common.collect.Lists.newArrayList("my_cache.*", "other") ); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wiremock.com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, wiremock.com.google.common.collect.Lists.newArrayList("my_cache.*", "other")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(getConfiguration()); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testGetEventSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().event().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().event().synchronize()).isTrue(); }
@org.junit.Test public void testGetEventSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().event().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().event().synchronize()).isTrue(); }
@org.junit.Test public void testEventSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().event().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().event().synchronize()).isTrue(); }
@org.junit.Test public void testGetEventSynchronize() throwsjava.lang.Exception { assertThat(event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(event().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(event().synchronize()).isTrue(); }
@org.junit.Test public void testGetEventSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().event().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().event().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.EVENT_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().event().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().index().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().index().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().index().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().index().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().index().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().index().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throwsjava.lang.Exception { assertThat(index().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(index().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(index().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().index().synchronize()).isTrue(); globalPluginConfig.setBoolean (com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().index().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().index().synchronize()).isTrue(); }
@org.junit.Test public void testGetIndexSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().index().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().index().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.INDEX_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().index().synchronize()).isTrue(); }
@org.junit.Test public void testCachePatternMatcher() throwsjava.lang.Exception { when(configurationMock.cache().patterns()).thenReturn(wiremock.com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(configurationMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void cachePatternMatcher() throwsjava.lang.Exception { when(configurationMock.cache().patterns()).thenReturn(wiremock.com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(configurationMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testCachePatternMatcher() throwsjava.lang.Exception { when(configurationMock.cache().patterns()).thenReturn(wiremock.com.google.common.collect.Lists.newArrayList("my_cache.*", "other")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(configurationMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testCachePatternMatcher() throwsjava.lang.Exception { when(configurationMock.cache().patterns()).thenReturn(wiremock.com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(configurationMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts_byemail", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")). { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testCachePatternMatcher() throwsjava.lang.Exception { when(configurationMock.cache().patterns()).thenReturn(wiremock.com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher matcher = new com.ericsson.gerrit.plugins.highavailability.cache.CachePatternMatcher(configurationMock); for (java.lang.String cache : com.google.common.collect.ImmutableList.of("accounts", "ldap_groups", "project_list", "my_cache_a", "my_cache_b", "other")) { assertThat(matcher.matches(cache)).isTrue(); } for (java.lang.String cache : com.google.common.collect.ImmutableList.of("ldap_groups_by_include", "foo")) { assertThat(matcher.matches(cache)).isFalse(); } }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); assertThat(getConfiguration().cache().patterns()).isEmpty(); }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); assertThat(getConfiguration().cache().patterns()).containsExactly("^my_cache.*", "other"); }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); assertThat(getConfiguration().cache().patterns()).hasSize(1); }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); assertThat(getConfiguration().cache().patterns()).containsExactly(com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, "other"); }
@org.junit.Test public void testGetCachePatterns() throwsjava.lang.Exception { globalPluginConfig.setStringList(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY, com.google.common.collect.Lists.newArrayList("^my_cache.*", "other")); assertThat(getConfiguration().cache(com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY)).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY); }
@org.junit.Test public void testGetCacheSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().cache().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().cache().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
@org.junit.Test public void testGetCacheSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().cache().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().cache().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
@org.junit.Test public void testGetCacheSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().cache().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().cache().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration()).cache().synchronize()).isTrue(); }
@org.junit.Test public void testGetCacheSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().cache().synchronize()).isTrue(); globalPluginConfig.setBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().cache().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
@org.junit.Test public void testGetCacheSynchronize() throwsjava.lang.Exception { assertThat(getConfiguration().cache().synchronize()).isTrue(); globalPluginConfig.setBoolean (com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, false); assertThat(getConfiguration().cache().synchronize()).isFalse(); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, "invalidBoolean"); assertThat(getConfiguration().cache().synchronize()).isTrue(); }
static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; }
public static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; }
boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; }
private static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; }
public boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(formatter.format(now().plusMillis(1)))).isTrue(); }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(now().plusMillis(1)))).isTrue(); }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(formatter.format(now()))).isTrue(); }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(now()).isTrue(); }
@org.junit.Test public void testOnTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(formatter.format(now()).plusMillis(1)))).isTrue(); }
publicjava.lang.String format(java.time.Instant instant) { return format.format(instant); }
publicjavajava.lang.String format(java.time.Instant instant) { return format.format(instant); }
publicjava publicjava.lang.String format(java.time.Instant instant) { return format.format(instant); }
public staticjava.lang.String format(java.time.Instant instant) { return format.format(instant); }
publicjava.lang.String format(java.time.Instant instant) { return format.format(Instant); }
publicjava.lang.String now(int secondsToAdd) { return format.format(java.time.Instant.now().plusSeconds(secondsToAdd)); }
publicjava.lang.String now() { return format.format(java.time.Instant.now().plusSeconds(secondsToAdd)); }
public staticjava.lang.String now(int secondsToAdd) { return format.format(java.time.Instant.now().plusSeconds(secondsToAdd)); }
privatejava.lang.String now(int secondsToAdd) { return format.format(java.time.Instant.now().plusSeconds(secondsToAdd)); }
publicjavajava.lang.String now(int secondsToAdd) { return format.format(java.time.Instant.now().plusSeconds(secondsToAdd)); }
publicjava.lang.String now() { return format.format(java.time.Instant.now()); }
privatejava.lang.String now() { return format.format(java.time.Instant.now()); }
public staticjava.lang.String now() { return format.format(java.time.Instant.now()); }
publicjavajava.lang.String now() { return format.format(java.time.Instant.now()); }
publicjava.lang.String now() { return format.format(newjava.time.Instant.now()); }
@org.junit.Test public void formatWithDefaultTimezone() throwsjava.lang.Exception { org.joda.time.DateTime now = org.joda.time.DateTime.now();java.lang.String jodaFormat = org.joda.time.format.ISODateTimeFormat.dateTime().print(now); com.googlesource.gerrit.plugins.lfs.LfsDateTime formatter = com.googlesource.gerrit.plugins.lfs.LfsDateTime.instance();java.lang.String Format = formatter.format(java.time.Instant.ofEpochMilli(now.getMillis())); assertThat( Format).isEqualTo(jodaFormat); }
@org.junit.Test public void formatWithDefaultTimezone() throwsjava.lang.Exception { org.joda.time.DateTime now = org.joda.time.DateTime.now();java.lang.String jodaFormat = org.joda.time.format.ISODateTimeFormat.dateTime().print(now); com.googlesource.gerrit.plugins.lfs.LfsDateTime formatter = com.googlesource.gerrit.plugins.lfs.LfsDateTime.instance();java.lang.String Format = formatter.format(java.time.Instant.ofEpochMilli(now.getMillis())); assertThat(Format).isEqualTo(jodaFormat); }
@org.junit.Test public void formatWithDefaultTimezone() throwsjava.lang.Exception { org.joda.time.DateTime now = org.joda.time.DateTime.now();java.lang.String jodaFormat = org.joda.time.format.ISODateTimeFormat.dateTime().print(now); com.googlesource.gerrit.plugins.lfs.LfsDateTimeFormatter formatter = com.googlesource.gerrit.plugins.lfs.LfsDateTimeFormatter.instance();java.lang.String Format = formatter.format(java.time.Instant.ofEpochMilli(now.getMillis())); assertThat( Format).isEqualTo(jodaFormat); }
@org.junit.Test public void formatWithDefaultTimezone() throwsjava.lang.Exception { org.joda.time.DateTime now = org.joda.time.DateTime.now();java.lang.String jodaFormat = org.joda.time.format.ISODateTimeFormat.dateTime().print(now); com.googlesource.gerrit.plugins.lfs.LfsDateTime formatter = com.googlesource.gerrit.plugins.lfs.LfsDateTime.instance();java.lang.String fmt = formatter.format(java.time.Instant.ofEpochMilli(now.getMillis())); assertThat(fmt).isEqualTo(jodaFormat); }
@org.junit.Test public void formatWithDefaultTimezone() throwsjava.lang.Exception { org.joda.time.DateTime now = org.joda.time.DateTime.now();java.lang.String jodaFormat = org.joda.time.format.ISODateTimeFormat.dateTime().print(now); com.googlesource.gerrit.plugins.lfs.LfsDateTime formatter = com.googlesource.gerrit.plugins.lfs.LfsDateTime.instance();java.lang.String Format = formatter.format(java.time.Instant.ofEpochMilli(now.getMillis())); assertThat(java.lang.String.format(java.time.Instant.ofEpochMilli(now.getMillis()), jodaFormat)); }
javajava staticjava.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now(expirationSeconds); }
javajavajava staticjava.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now(expirationSeconds); }
javajava.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now(expirationSeconds); }
java staticjava.lang.String timeout(int expirationSeconds) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now(expirationSeconds); }

@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(formatter.format(now().minusMillis(1)))).isFalse(); }
@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(now().minusMillis(1)))).isFalse(); }
@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(now()).isFalse(); }
@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(formatter.format(now().plusMillis(1)))).isFalse(); }
@org.junit.Test public void testExpiredTime() throwsjava.lang.Exception { assertThat(Verifier.onTime(formatter.format(now()))).isFalse(); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest request,java x.servlet.ServletResponse response,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { if ((request instanceofjava x.servlet.http.HttpServletRequest) && (response instanceofjava x.servlet.http.HttpServletResponse)) {java.lang.String method = ((java x.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == "POST") || (method == "PUT")) || (method == "DELETE")) { ((java x.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, this.message); return; } } chain.doFilter(request, response); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest request,java x.servlet.ServletResponse response,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { if ((request instanceofjava x.servlet.http.HttpServletRequest) && (response instanceofjava x.servlet.http.HttpServletResponse)) {java.lang.String method = ((java x.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == "POST") || (method == "PUT")) || (method == "DELETE")) { ((java.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, this.message); return; } } chain.doFilter(request, response); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest request,java x.servlet.ServletResponse response,java x.servlet.FilterChain chain) throwsjava.io.IOException,java x.servlet.ServletException { if ((request instanceofjava x.servlet.http.HttpServletRequest) && (response instanceofjava x.servlet.http.HttpServletResponse)) {java.lang.String method = ((java x.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == "POST") || (method == "PUT")) || (method == "DELETE")) { ((java.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, this.message); return; } } chain.doFilter(request, response); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest request,java x.servlet.ServletResponse response,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { if ((request instanceofjava x.servlet.http.HttpServletRequest) && (response instanceofjava x.servlet.http.HttpServletResponse)) {java.lang.String method = ((java x.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == "POST") || (method == "PUT")) || (method == "DELETE")) { chain.doFilter(request, response); return; } } chain.doFilter(request, response); }
@java.lang.Override public void doFilter(java x.servlet.ServletRequest request,java x.servlet.ServletResponse response,java x.servlet.FilterChain chain) throwsjava.io.IOException,java x.servlet.ServletException { if ((request instanceofjava x.servlet.http.HttpServletRequest) && (response instanceofjava x.servlet.http.HttpServletResponse)) {java.lang.String method = ((java x.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == "POST") || (method == "PUT")) || (method == "DELETE")) { ((java x.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, this.message); } } chain.doFilter(request, response); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException(this.message); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException(receiveEvent.getMessage()); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException(receiveEvent.message); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException(com.google.gerrit.server.git.validators.CommitValidationException.EMPTY_MESSAGE); }
@java.lang.Override publicjava.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) { throw new com.google.gerrit.server.git.validators.CommitValidationException(receiveEvent.getMessage()); }
@java.lang.Override publicjava.lang.String toString() { return name().toLowerCase(java.util.Locale.US); }
@java.lang.Override publicjava.lang.String toString() { return name().toLowerCase(); }
public @java.lang.Override publicjava.lang.String toString() { return name().toLowerCase(java.util.Locale.US); }
@java.lang.Override publicjava.lang.String toString() { return name().toLowerCase(java.lang.Locale.US); }
publicjava.lang.String toString() { return name().toLowerCase(java.util.Locale.US); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { stat.execute((("DROP TABLE " + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { stat.execute(("DROP TABLE " + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }
@org.junit.Before public void tearDown() throwsjava.lang.Exception { stat.execute((("DROP TABLE " + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }
@org.junit.Before public void tearDown() throwsjava.lang.Exception { stat.execute(("DROP TABLE " + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }
@org.junit.After public void tearDown() throwsjava.lang.Exception { stat.execute("DROP TABLE " + (com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME))); store.stop(); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet ); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throwsjava.lang.Exception { return getConfig("^WIP.*", false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet);
@org.junit.Test public void doesNotPublishWhenTrivialRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenTrivialRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isFalse(); }
@org.junit.Test public void doesNotPublishWhenTrivialRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdateFails() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.changeKind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenMergeUpdate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isFalse(); }
@org.junit.Test public void doesPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.changeKind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isEqualTo(true); }
@org.junit.Test public void doesPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdateFails() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.changeKind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenMergeUpdate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isEqualTo(true); }
@org.junit.Test public void doesPublishWhenNoCodeChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoCodeChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoCodeChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.changeKind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenNoCodeChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.changeKind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void shouldPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isFalse(); }
public boolean isIgnoreRebaseEmptyPatchSet() { return ignoreRebaseEmptyPatchSet; }
public boolean getIgnoreRebaseEmptyPatchSet() { return ignoreRebaseEmptyPatchSet; }
public void setIgnoreRebaseEmptyPatchSet(boolean value) { ignoreRebaseEmptyPatchSet = value; }
public void setIgnoreRebaseEmptyPatchSet(boolean value) { this.ignoreRebaseEmptyPatchSet = value; }
public void setIgnoreRebaseEmptyPatchSet(boolean value) { ignoreRebaseEmptyPatchSet = value; notifyAll(); }
@org.junit.Test public void doesPublishWhenTrivialRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenTrivialRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenTrivialRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isEqualTo(true); }
@org.junit.Test public void doesPublishWhenTrivialRebase() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; assertThat(messageGenerator.shouldPublish(), is(true)); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME, false); }
@org.junit.Test public void doesNotPublishWhenNoCodeChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoCodeChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoCodeChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.changeKind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
@org.junit.Test public void doesNotPublishWhenNoCodeChange() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isFalse(); }
@org.junit.Test public void doesPublishWhenRework() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenRework() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenRebork() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenRework() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isEqualTo(true); }
@org.junit.Test public void doesPublishWhenRework() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.changeKind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } boolean result; result = true; try {java.util.regex.Pattern pattern; pattern =java.util.regex.Pattern.compile(config.getIgnore(),java.util.regex.Pattern.DOTALL);java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("The specified ignore pattern was invalid", e); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } boolean result; result = true; try {java.util.regex.Pattern pattern; pattern =java.util.regex.Pattern.compile(config.getIgnore(),java.util.regex.Pattern.DOTALL);java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("The specified ignore pattern was invalid", e); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } boolean result; result = true; try {java.util.regex.Pattern pattern; pattern =java.util.regex.Pattern.compile(config.getIgnore(),java.util.regex.Pattern.DOTALL);java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result = (!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("The specified ignore pattern was invalid", e); } return result; }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Index {} {}", operation.name().toLowerCase(java.util.Locale.US), type, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.atomic.AtomicInteger idLock = getAndIncrementIdLock(id); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error("Failed to update {} index", type, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Error trying to find %s", type); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Index {} {}", operation.name().toLowerCase(java.util.Locale.US), type, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.atomic.AtomicInteger idLock = getAndIncrementIdLock(id); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error("Failed to update {} index", type, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Error trying to find %s", type); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Failed to update {} index", type, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Operation {} {}", operation.name().toLowerCase(java.util.Locale.US), type, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.atomic.AtomicInteger idLock = getAndIncrementIdLock(id); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error("Failed to update {} index", type, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Error trying to find %s", type); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Failed to update {} index", type, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Index {} {}", operation.name().toLowerCase(java.util.Locale.US), type, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.atomic.AtomicInteger idLock = getAndIncrementIdLock(id); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error("Failed to update {} index", type, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Error trying to find %s", type); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Failed to update {} index", type, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Index {} {} {}", operation.name().toLowerCase(java.util.Locale.US), type, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.atomic.AtomicInteger idLock = getAndIncrementIdLock(id); synchronized(this) { index(id, operation); } if ((idLock.decrementAndGet()) == 0) { removeIdLock(id); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.error("Failed to update {} index", type, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Error trying to find %s", type); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.logger.debug("Failed to update {} index", type, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Author Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of author email addresses that will be permitted."); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Committter Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of committer email addresses that will be permitted."); } }; }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Author Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of author email addresses that will be permitted.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Committter Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of committer email addresses that will be permitted."); } }; }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Author Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of author email addresses that will be permitted.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Committter Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of committer email addresses that will be permitted.")); } }; }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Author Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of author email addresses that will be permitted.")); } }; }
public static com.google.inject.AbstractModule module() { return new com.google.inject.AbstractModule() { @java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); } }; }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.module()); bind(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(com.googlesource.gerrit.plugins.uploadvalidator.PluginConfigWithInheritanceFactory.class).in(Scopes.SINGLETON); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.module()); bind(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(com.googlesource.gerrit.plugins.uploadvalidator.PluginConfigWithInheritanceFactory.class).in(Scopes.SINGLETON); }
java @java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.module()); bind(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(com.googlesource.gerrit.plugins.uploadvalidator.PluginConfigWithInheritanceFactory.class).in(Scopes.SINGLETON); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.module()); bind(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(com.googlesource.gerrit.plugins.uploadvalidator.PluginConfigWithInheritanceFactory.class).in(Scopes.SINGLETON); }
@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.uploadvalidator.PatternCacheModule()); install(new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FooterValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.module()); install(com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.module()); bind(com.googlesource.gerrit.plugins.uploadvalidator.ConfigFactory.class).to(com.googlesource.gerrit.plugins.uploadvalidator.PluginConfigWithInheritanceFactory.class).in(Scopes.SINGLETON); }
@com.google.common.annotations.VisibleForTesting static boolean isCommitterActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST).length) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isCommitterActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST).length); }
@com.google.common.annotations.VisibleForTesting static boolean isCommitterActive(com.google.gerrit.server.config.PluginConfig cfg) { return ((cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST).length) > 0); }
@com.google.common.annotations.VisibleForTesting static boolean isCommitterActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).length > 0; }
private static boolean isCommitterActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST).length) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email,java.lang.String[] emailWhitelist) { returnjava.util.Arrays.stream(emailWhitelist).anyMatch(( s) ->java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting static boolean isValidEmail(java.lang.String email,java.lang.String[] emailWhitelist) { returnjava.util.Arrays.stream(emailWhitelist).anyMatch(( s) ->java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting static boolean validateEmail(java.lang.String email,java.lang.String[] emailWhitelist) { returnjava.util.Arrays.stream(emailWhitelist).anyMatch(( s) ->java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email,java.lang.String[] emailWhitelist) { returnjava.util.Arrays.stream(emailWhitelist).anyMatch(s ->java.util.regex.Pattern.matches(s, com.google.common.base.Strings.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting static boolean performValidation(java.lang.String email,java.lang.String[] emailWhitelist) { returnjava.util.Arrays.stream(emailWhitelist).anyMatch(( s) -> com.google.common.base.Strings.nullToEmpty(email))); }
@com.google.common.annotations.VisibleForTesting staticjava.lang.String[] getAuthorEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST); }
private staticjava.lang.String[] getAuthorEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST); }
@com.google.common.annotations.VisibleForTesting staticjava.lang.String[] getAuthorEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST; }
@com.google.common.annotations.VisibleForTesting staticjava.lang.String[] getAuthorEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.Key_AUTHOR_EMAIL_WHITELIST); }
@com.google.common.annotations.VisibleForTesting staticjava.lang.String[] getAuthorEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_EMAIL_WHITELIST); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Author Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of author email addresses that will be permitted."); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Committter Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of committer email addresses that will be permitted."); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Author Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of author email addresses that will be permitted.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Committer Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of committer email addresses that will be permitted.")); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Author Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of author email addresses that will be permitted.")); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Committter Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of committer email addresses that will be permitted."); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Author Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of author email addresses that will be permitted."); bind(com.google.gerrit.server.config.ProjectConfigEntry.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST)).toInstance(new com.google.gerrit.server.config.ProjectConfigEntry("Committter Email Whitelist", null, com.google.gerrit.extensions.api.projects.ProjectConfigEntryType.ARRAY, null, false, "Whitelist of committer email addresses that will be permitted.")); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.validators.CommitValidationListener.class).to(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.class); }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST).length) > 0; }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST).length); }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorActive(com.google.gerrit.server.config.PluginConfig cfg) { return ((cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST).length) > 0); }
@com.google.common.annotations.VisibleForTesting static boolean isAuthorActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST)).length > 0; }
private static boolean isAuthorActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_AUTHOR_EMAIL_WHITELIST).length) > 0; }
@com.google.common.annotations.VisibleForTesting staticjava.lang.String[] getCommitterEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST); }
@com.google.common.annotations.VisibleForTesting public staticjava.lang.String[] getCommitterEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST); }
private staticjava.lang.String[] getCommitterEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST); }
@com.google.common.annotations.VisibleForTesting staticjava.lang.String[] committerEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.KEY_COMMITTER_EMAIL_WHITELIST); }
@com.google.common.annotations.VisibleForTesting staticjava.lang.String[] getCommitterEmailWhiteList(com.google.gerrit.server.config.PluginConfig cfg) { return cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.EmailWhitelistValidator.Key_COMMITTER_EMAIL_WHITELIST); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("ItsTestName"); itsPath = randomTargetPath().resolve("etc").resolve("its"); assertFalse((("Its " + (itsPath)) + " already exists")); cleanupSitePath = true; rulesConfigReader = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfigReader); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class).toInstance(rulesProjectCache); bind(java.nio.file.Path.class).annotatedWith(com. googlesource.gerrit.plugins.its.base.ItsPath.class).toInstance(itsPath); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.GlobalRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.GLOBAL.fileName); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.ITS.fileName); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("ItsTestName"); itsPath = randomTargetPath().resolve("etc").resolve("its"); assertFalse((("Its " + (itsPath)) + " already exists")); cleanupSitePath = true; rulesConfigReader = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfigReader); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class).toInstance(rulesProjectCache); bind(java.nio.file.Path.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.ItsPath.class).toInstance(itsPath); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.GlobalRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.GLOBAL.fileName); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.ITS.fileName); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("ItsTestName"); itsPath = randomTargetPath().resolve("etc").resolve("its"); assertFalse((("Its ( " + (itsPath)) + " already exists")); cleanupSitePath = true; rulesConfigReader = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfigReader); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class).toInstance(rulesProjectCache); bind(java.nio.file.Path.class).annotatedWith(com. googlesource.gerrit.plugins.its.base.ItsPath.class).toInstance(itsPath); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.GlobalRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.GLOBAL.fileName); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.ITS.fileName); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("ItsTestName"); itsPath = randomTargetPath().resolve("etc").resolve("its"); assertFalse((("The file " + (itsPath)) + " already exists")); cleanupSitePath = true; rulesConfigReader = createMock(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.RulesConfigReader.class).toInstance(rulesConfigReader); rulesProjectCache = createMock(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class); bind(com.googlesource.gerrit.plugins.its.base.workflow.ItsRulesProjectCache.class).toInstance(rulesProjectCache); bind(java.nio.file.Path.class).annotatedWith(com. googlesource.gerrit.plugins.its.base.ItsPath.class).toInstance(itsPath); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.GlobalRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.GLOBAL.fileName); bind(java.lang.String.class).annotatedWith(com.googlesource.gerrit.plugins.its.base.PluginRulesFileName.class).toInstance(com.googlesource.gerrit.plugins.its.base.workflow.RuleBaseTest.RuleBaseKind.ITS.fileName); }
@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance("ItsTestName"); }
@com.google.inject.Provides @com.googlesource.gerrit.plugins.its.base.ItsPath @com.google.inject.Injectjava.nio.file.Path itsPath(@com.google.gerrit.server.config.SitePathjava.nio.file.Path sitePath) { return sitePath.normalize().resolve("etc").resolve("its"); }
@com.google.inject.Provides @com.googlesource.gerrit.plugins.its.base.ItsPath @com.google.inject.Injectjava.nio.file.Path itPath(@com.google.gerrit.server.config.SitePathjava.nio.file.Path sitePath) { return sitePath.normalize().resolve("etc").resolve("its"); }
@com.google.inject.Provides @com.googlesource.gerrit.plugins.its.base.ItsPath @com.google.inject.Injectjava.nio.file.Path itsPath(@com.google.gerrit.server.config.SitePath.nio.file.Path sitePath) { return sitePath.normalize().resolve("etc").resolve("its"); }
@com.googlesource.gerrit.plugins.its.base.ItsPath @com.google.inject.Injectjava.nio.file.Path itsPath(@com.google.gerrit.server.config.SitePathjava.nio.file.Path sitePath) { return sitePath.normalize().resolve("etc").resolve("its"); }
@com.google.inject.Provides @com.googlesource.gerrit.plugins.its.base.ItsPath @com.google.inject.Injectjava.nio.file.Path itsPath(@com.google.gerrit.server.config.SitePathjava.nio.file.Path sitePath) { return sitePath.normalize().resolve("/etc").resolve("its"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed", id); break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully deleted from index", id); break; } indexTs.update("change"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("change {} successfully indexed", id); break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("change {} successfully deleted from index", id); break; } indexTs.update("change"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed"); break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully deleted from index"); break; } indexTs.update("change"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed"); break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully deleted from index", id); break; } indexTs.update("change"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed", id); break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully deleted from index", id); break; } indexTs.update(id); }
@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.AccountIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); }
java @java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.AccountIndexedListener.class).to(com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.class); }
@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.ChangeIndexedListener.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.AccountIndexedListener.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.events.LifecycleListener.class); }
@java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); }
java @java.lang.Override protected void configure() { bind(java.util.concurrent.Executor.class).annotatedWith(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutor.class).toProvider(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.index.IndexExecutorProvider.class); }
public boolean autoReindexAtStart() { return autoReindexAtStart; }
private boolean autoReindexAtStart() { return autoReindexAtStart; }
public boolean autoReindexAtStart() { return autoReindexAtStart(); }
public com.google.gerrit.reviewdb.client.Project.NameKey projectName;
public com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey;
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throwsjava.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("Account {} successfully indexed"); indexTs.update("account"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throwsjava.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("account {} successfully indexed"); indexTs.update("account"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throwsjava.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("Account {} successfully indexed", id); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throwsjava.io.IOException { indexer.index(id); indexTs.update("account"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throwsjava.io.IOException { indexer.index(id); indexTs.update(("account"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throwsjava.io.IOException { indexer.index(uuid); indexTs.update("group"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throwsjava.io.IOException { indexTs.update("group"); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throwsjava.io.IOException { indexer.index(uuid); indexTs.update(("group"); }
com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid;
public com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid;
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change!= null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed"); } } catch (java.lang.Exception e) { if (!(isCausedByNoSuchChangeException(e))) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted, aborting indexing the change.", id.get()); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} not found, deleted from index"); } break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully deleted from index", id); break; } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change!= null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed", id); } } catch (java.lang.Exception e) { if (!(isCausedByNoSuchChangeException(e))) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted, aborting indexing the change.", id.get()); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} not found, deleted from index"); } break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully deleted from index", id); break; } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null; switch (operation) { case INDEX : try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { change = db.changes().get(id); if (change!= null) { indexer.index(db, change); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully indexed"); } } catch (java.lang.Exception e) { if (!(isCausedByNoSuchChangeException(e))) { throw e; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} was deleted, aborting indexing the change.", id.get()); } if (change == null) { indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} not found, deleted from index", id); } break; case DELETE : indexer.delete(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug("Change {} successfully deleted from index", id); break; } }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { index(id, operation); }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Change.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws com.google.gwtorm.server.OrmException,java.io.IOException { indexer.index(db, id); }
public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }
public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.account.ExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }
public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) throws com.google.gwtorm.server.OrmException { put(lastLoginExternalIdPropertyKey, externalIdKey); }
private void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }
public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { finaljava.lang.String localUser = extId.getSchemeRest(); finaljava.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.US); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId(extId.getAccountId(), extIdKeyLowerCase); try { db.accountExternalIds().insert(java.util.Collections.singleton(extIdLowerCase)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException error) {java.lang.System.err.println(("Error: " + (error.getMessage()))); } } } }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { finaljava.lang.String localUser = extId.getSchemeRest(); finaljava.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.US); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId(extId.getAccountId(), extIdKeyLowerCase); try { db.accountExternalIds().insert(java.util.Collections.singleton(extIdLowerCase)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException error) {java.lang.System.err.println(("error: " + (error.getMessage()))); } } } }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { finaljava.lang.String localUser = extId.getSchemeRest(); finaljava.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.US); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId(extId.getAccountId(), extIdKeyLowerCase); try { db.accountExternalIds().insert(java.util.Collections.singleton(extIdLowerCase)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException error) {java.lang.System.err.println(("ERROR: " + (error.getMessage()))); } } } }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { finaljava.lang.String localUser = extId.getSchemeRest(); finaljava.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.US); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId(extId.getAccountId(), extIdKeyLowerCase); try { db.accountExternalIds().insert(java.util.Collections.singleton(extIdLowerCase)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException error) {java.lang.System.err.println(("Error: " + (error.getMessage()))); } } } }
private void convertLocalUserToLowerCase(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.AccountExternalId extId) { if (extId.isScheme(AccountExternalId.SCHEME_GERRIT)) { finaljava.lang.String localUser = extId.getSchemeRest(); finaljava.lang.String localUserLowerCase = localUser.toLowerCase(java.util.Locale.US); if (!(localUser.equals(localUserLowerCase))) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key extIdKeyLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT, localUserLowerCase); final com.google.gerrit.reviewdb.client.AccountExternalId extIdLowerCase = new com.google.gerrit.reviewdb.client.AccountExternalId(extId.getAccountId(), extIdKeyLowerCase); try { db.accountExternalIds().insert(java.util.Collections.singleton(extIdLowerCase)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); } catch (com.google.gwtorm.server.OrmException error) {java.lang.System.err.println(("Error: " + (error.getMessage()))); } } } } }
java @java.lang.Override public int run() throwsjava.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { todo = db.accountExternalIds().all().toList(); synchronized(monitor) { monitor.beginTask("Uploading local usernames", todo.size()); } finaljava.util.List<com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker> workers = newjava.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t = new com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker(); t.start(); workers.add(t); } for (com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t : workers) { t.join(); } synchronized(monitor) { monitor.endTask(); } manager.stop(); return 0; }
java @java.lang.Override public int run() throwsjava.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) {java.util.List<com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker> workers = newjava.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t = new com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker(); t.start(); workers.add(t); } for (com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t : workers) { t.join(); } synchronized(monitor) { monitor.endTask(); } manager.stop(); return 0; } }
java @java.lang.Override public int run() throwsjava.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { todo = db.accountExternalIds().all().toList(); synchronized(monitor) { monitor.beginTask("Uploading local usernames", todo.size()); } finaljava.util.List<com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker>> workers = newjava.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t = new com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker(); t.start(); workers.add(t); } for (com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t : workers) { t.join(); } synchronized(monitor) { monitor.endTask(); } manager.stop(); return 0; }
java @java.lang.Override public int run() throwsjava.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) {java.util.List<com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker> workers = newjava.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t = new com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker(); t.start(); workers.add(t); } for (com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t : workers) { t.join(); } } synchronized(monitor) { monitor.endTask(); } manager.stop(); return 0; }
java @java.lang.Override public int run() throwsjava.lang.Exception { if ((threads) <= 0) { threads = 1; } dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); manager.add(dbInjector, dbInjector.createChildInjector(com.google.gerrit.server.schema.SchemaVersionCheck.module())); manager.start(); dbInjector.injectMembers(this); try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) {java.util.List<com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker> workers = newjava.util.ArrayList<>(threads); for (int tid = 0; tid < (threads); tid++) { com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t = new com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker(); t.start(); workers.add(t); } for (com.google.gerrit.pgm.LocalUsernamesToLowerCase.Worker t : workers) { t.join(); } synchronized(monitor) { monitor.endTask(); } manager.stop(); return 0; }
private com.google.gerrit.reviewdb.client.AccountExternalId next() { synchronized(todo) { if (todo.isEmpty()) { return null; } return todo.remove(((todo.size()) - 1)); } }
private com.google.gerrit.reviewdb.client.AccountExternalId next() { synchronized (todo) { if (todo.isEmpty()) { return null; } return todo.remove(((todo.size()) - 1)); } }
private com.google.gerrit.reviewdb.client.AccountExternalId next() { synchronized(todo) { return todo.remove(((todo.size()) - 1)); } }
private com.google.gerrit.reviewdb.client.AccountExternalId next() { synchronized(todo) { if (todo.isEmpty()) { return null; } return todo.get(((todo.size()) - 1)); } }
private com.google.gerrit.reviewdb.client.AccountExternalId next() { return todo.remove(((todo.size()) - 1)); }
private static boolean correctUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, user))); }
private static boolean correctUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, user))); }
private static boolean correctUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(Constants.SCHEME_GERRIT, user))); }
private static boolean correctUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.server.account.Schemes.GERRIT, user))); }
private static boolean correctUser(java.lang.String user, com.google.gerrit.httpd.WebSession session) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId(); return (id!= null) && (id.equals(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.account.Schemes.GERRIT, user))); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Invalid token"); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Invalid token"); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Invalid token"); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("missing token"); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid token"); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid token"); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("missing token"); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("missing token"); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("missing token"); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid token"); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid token"); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid token"); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.ConfirmEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.server.CurrentUser user = self.get(); if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } if (input == null) { input = new com.google.gerrit.server.config.ConfirmEmail.Input(); } if ((input.token) == null) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Invalid token"); } try { com.google.gerrit.server.mail.EmailTokenVerifier.ParsedToken token = emailTokenVerifier.decode(input.token); com.google.gerrit.reviewdb.client.Account.Id accId = user.getAccountId(); if (accId.equals(token.getAccountId())) { accountManager.link(accId, token.toAuthRequest()); return com.google.gerrit.extensions.restapi.Response.none(); } throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Invalid token"); } catch (com.google.gerrit.server.mail.EmailTokenVerifier e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Invalid token"); } catch (com.google.gerrit.server.account.AccountException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(e.getMessage()); } }
private com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }
com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }
private com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }
private com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }
private com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitsValidator(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); }
private com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitsValidator(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); } }
private com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitsValidator(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); } }
private com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitsValidator(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); } }
private com.google.gerrit.server.git.validators.CommitValidators forReceiveCommits(com.google.gerrit.server.project.RefControl refControl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.lib.Repository repo) throwsjava.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.notes.NoteMap rejectCommits = com.google.gerrit.server.git.BanCommit.loadRejectCommitsMap(repo, rw); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergePermissionValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator(refControl, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.BannedCommitsValidator(rejectCommits), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators))); } }
private void writeObject(finaljava.io.ObjectOutputStream out) throwsjava.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeFixInt64(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, (persistentCookie? 1 : 0)); if ((externalId)!= null) { writeVarInt32(out, 4); writeString(out, externalId.get()); } if ((sessionId)!= null) { writeVarInt32(out, 5); writeString(out, sessionId); } writeVarInt32(out, 6); writeFixInt64(out, expiresAt); if ((auth)!= null) { writeVarInt32(out, 7); writeString(out, auth); } writeVarInt32(out, 0); }
private void writeObject(finaljava.io.ObjectOutputStream out) throwsjava.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeFixInt64(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, (persistentCookie? 1 : 0)); if ((externalId)!= null) { writeVarInt32(out, 4); writeString(out, externalId.get()); } if ((sessionId)!= null) { writeVarInt32(out, 5); writeString(out, sessionId.get()); } writeVarInt32(out, 6); writeFixInt64(out, expiresAt); if ((auth)!= null) { writeVarInt32(out, 7); writeString(out, auth); } writeVarInt32(out, 0); }
private void writeObject(finaljava.io.ObjectOutputStream out) throwsjava.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeFixInt64(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, (persistentCookie? 1 : 0)); if ((externalId)!= null) { writeVarInt32(out, 4); writeString(out, externalId.get())); } if ((sessionId)!= null) { writeVarInt32(out, 5); writeString(out, sessionId); } writeVarInt32(out, 6); writeFixInt64(out, expiresAt); if ((auth)!= null) { writeVarInt32(out, 7); writeString(out, auth); } writeVarInt32(out, 0); }
private void writeObject(finaljava.io.ObjectOutputStream out) throwsjava.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeFixInt64(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, (persistentCookie? 1 : 0)); if ((externalId)!= null) { writeVarInt32(out, 4); writeString(out, externalId.get()); } if ((sessionId)!= null) { writeVarInt32(out, 5); writeString(out, sessionId); } writeVarInt32(out, 6); writeFixInt64(out, expiresAt); if ((auth)!= null) { writeVarInt32(out, 7); writeString(out, auth.get()); } writeVarInt32(out, 0); }
private void writeObject(finaljava.io.ObjectOutputStream out) throwsjava.io.IOException { writeVarInt32(out, 1); writeVarInt32(out, accountId.get()); writeVarInt32(out, 2); writeFixInt64(out, refreshCookieAt); writeVarInt32(out, 3); writeVarInt32(out, (persistentCookie? 1 : 0)); if ((externalId)!= null) { writeVarInt32(out, 4); writeString(out, externalId.get()); } writeVarInt32(out, 5); writeString(out, sessionId); writeVarInt32(out, 6); writeFixInt64(out, expiresAt); if ((auth)!= null) { writeVarInt32(out, 7); writeString(out, auth); } writeVarInt32(out, 0); }
public com.google.gerrit.server.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.
public com.google.gerrit.client.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.
public com.google.gerrit.server.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account..account.account
public com.google.gerrit.server.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account..account.account.account.account
public com.google.gerrit.server.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account..account.account.account
private AccountExternalId.Key toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }
private com.google.gerrit.reviewdb.client.AccountExternalId.Key toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }
private AccountExternalId toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }
private AccountExternalId.Key toExternalIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }
private AccountExternalId.Key toExtIdKey(byte[] fp) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY, com.google.common.io.BaseEncoding.base16().encode(fp)); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin,java.lang.String sid,java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh =java.util.concurrent.TimeUnit.MILLISECONDS.convert(1,java.util.concurrent.TimeUnit.HOURS); final long refresh =java.lang.Math.min(halfAgeRefresh, minRefresh); final long now = nowMs(); final long refreshCookieAt = now + refresh; final long expiresAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } if (auth == null) { auth = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, expiresAt, sid, auth); self.put(key.token, val); return val; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin,java.lang.String sid,java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh =java.util.concurrent.TimeUnit.MILLISECONDS.convert(1,java.util.concurrent.TimeUnit.HOURS); final long refresh =java.lang.Math.min(halfAgeRefresh, minRefresh); final long now = nowMs(); final long refreshCookieAt = now + refresh; final long expiresAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } if (auth == null) { auth = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, expiresAt, sid, auth); self.put(key.token, val); return val; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin,java.lang.String sid,java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh =java.util.concurrent.TimeUnit.MILLISECONDS.convert(1,java.util.concurrent.TimeUnit.HOURS); final long refresh =java.lang.Math.min(halfAgeRefresh, minRefresh); final long now = nowMs(); final long refreshCookieAt = now + refresh; final long expiresAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } if (auth == null) { auth = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, expiresAt, sid, auth); self.put(key.token, val); return val; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin,java.lang.String sid,java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh =java.util.concurrent.TimeUnit.MILLISECONDS.convert(1,java.util.concurrent.TimeUnit.HOURS); final long refresh =java.lang.Math.min(halfAgeRefresh, minRefresh); final long nowMs = nowMs(); final long refreshCookieAt = now + refresh; final long expiresAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } if (auth == null) { auth = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, expiresAt, sid, auth); self.put(key.token, val); return val; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.reviewdb.client.Account.Id who, final boolean remember, final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin,java.lang.String sid,java.lang.String auth) { final long halfAgeRefresh = (sessionMaxAgeMillis) >>> 1; final long minRefresh =java.util.concurrent.TimeUnit.MILLISECONDS.convert(1,java.util.concurrent.TimeUnit.HOURS); final long refresh =java.lang.Math.min(halfAgeRefresh, minRefresh); final long now = nowMs(); final long refreshCookieAt = now + refresh; final long expiresAt = now + (sessionMaxAgeMillis); if (sid == null) { sid = newUniqueToken(who); } if (auth == null) { auth = newUniqueToken(who); } com.google.gerrit.httpd.WebSessionManager.Val val = new com.google.gerrit.httpd.WebSessionManager.Val(who, refreshCookieAt, remember, lastLogin, expiresAt, sid, auth); self.put(key.token, val); return val.token; }
publicjava.util.List<java.lang.String> getSecondaryEmails(com.google.gerrit.reviewdb.client.Account account,java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) {java.util.List<java.lang.String> emails = newjava.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); }java.util.Collections.sort(emails); return emails; }
java publicjava.util.List<java.lang.String> getSecondaryEmails(com.google.gerrit.reviewdb.client.Account account,java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) {java.util.List<java.lang.String> emails = newjava.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); }java.util.Collections.sort(emails); return emails; }
privatejava.util.List<java.lang.String> getSecondaryEmails(com.google.gerrit.reviewdb.client.Account account,java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) {java.util.List<java.lang.String> emails = newjava.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); }java.util.Collections.sort(emails); return emails; }
publicjava.util.List<java.lang.String> getEmails(com.google.gerrit.reviewdb.client.Account account,java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) {java.util.List<java.lang.String> emails = newjava.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); }java.util.Collections.sort(emails); return emails; }
publicjava.util.List<java.lang.String> getSecondaryEmails(com.google.gerrit.reviewdb.client.Account account,java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds) {java.util.List<java.lang.String> emails = newjava.util.ArrayList(com.google.gerrit.server.account.AccountState.getEmails(externalIds)); if ((account.getPreferredEmail())!= null) { emails.remove(account.getPreferredEmail()); } return emails; }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { returnjava.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId :: getAccountId); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { returnjava.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId :: getAccountId); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { returnjava.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId::getAccountId); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { returnjava.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_GERRIT, username))).map(AccountExternalId::getAccountId); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { return load(username, null); }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("account in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("account already in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("already in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("different account in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException("account in use by another account"); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } } if ((who.getEmailAddress())!= null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey();java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to, who); } }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey();java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to, who); } }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey();java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to, who); } }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey();java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key)))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to, who); } }
public com.google.gerrit.server.account.AuthResult updateLink(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = who.getExternalIdKey().asAccountExternalIdKey();java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId.Key> filteredKeysByScheme = filterKeysByScheme(key.getScheme(), db.accountExternalIds().byAccount(to)); if ((!(filteredKeysByScheme.isEmpty())) && (((filteredKeysByScheme.size()) > 1) || (!(filteredKeysByScheme.contains(key)))))) { db.accountExternalIds().deleteKeys(filteredKeysByScheme); } byIdCache.evict(to); return link(to, who); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("account \"" + (who.getExternalIdKey().get())) + "\" in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if ((a.getPreferredEmail())!= null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("account \"" + (who.getExternalIdKey().get())) + "\" not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("account \"" + (who.getExternalIdKey().get())) + "\" in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if ((a.getPreferredEmail())!= null) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("account \"" + (who.getExternalIdKey().get())) + "\" not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("account '" + (who.getExternalIdKey().get())) + "' in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if ((a.getPreferredEmail())!= null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("account '" + (who.getExternalIdKey().get())) + "' not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("account '" + (who.getExternalIdKey().get())) + "' in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if ((a.getPreferredEmail())!= null) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("account '" + (who.getExternalIdKey().get())) + "' not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), false); } }
public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException,java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId!= null) { if (!(extId.accountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException((("account \"" + (who.getExternalIdKey().get())) + "\" in use by another account")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress())!= null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if ((a.getPreferredEmail())!= null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException((("account \"" + (who.getExternalIdKey().get())) + "\" not found")); } return new com.google.gerrit.server.account.AuthResult(from, who.getExternalIdKey(), true); } }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId,java.lang.String errorMessage,java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId,java.lang.String errorMessage,java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId()); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId,java.lang.String errorMessage,java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); db.accountExternalIds().delete(java.util.Collections.singleton(extId)); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); } }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId,java.lang.String errorMessage,java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); } db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage, e); }
private void handleSettingUserNameFailure(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.ExternalId extId,java.lang.String errorMessage,java.lang.Exception e, boolean logException) throws com.google.gerrit.server.account.AccountUserNameException, com.google.gwtorm.server.OrmException { if (logException) { com.google.gerrit.server.account.AccountManager.log.error(errorMessage, e); } else { com.google.gerrit.server.account.AccountManager.log.error(errorMessage); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { db.accounts().delete(java.util.Collections.singleton(account)); db.accountExternalIds().delete(java.util.Collections.singleton(extId.asAccountExternalId())); throw new com.google.gerrit.server.account.AccountUserNameException(errorMessage); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException,java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("auth error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("auth error", e); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException,java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Authentication error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException,java.io.IOException { who = realm.authenticate(who); try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("auth error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("auth error", e); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException,java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("authentication error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("authentication error", e); } }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException,java.io.IOException { who = realm.authenticate(who); try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId id = findExternalId(db, who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Authentication error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account,java.util.List<java.lang.String> add,java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.server.GpgException(e); } }
publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account,java.util.List<java.lang.String> add,java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.server.GpgException(e); } }
@java.lang.Override public com.google.gerrit.extensions.common.GpgKeyInfo putGpgKeys(com.google.gerrit.server.account.AccountResource account,java.util.List<java.lang.String> add,java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.server.GpgException(e); } }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account,java.util.List<java.lang.String> add,java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input(); in.add = add; in.delete = delete; return postGpgKeys.apply(account, in); }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> putGpgKeys(com.google.gerrit.server.account.AccountResource account,java.util.List<java.lang.String> add,java.util.List<java.lang.String> delete) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.GpgException { com.google.gerrit.gpg.server.PostGpgKeys.Input in = new com.google.gerrit.gpg.server.PostGpgKeys.Input(); in.add = add; in.delete = delete; try { return postGpgKeys.apply(account, in); } catch (org.bouncycastle.openpgp.PGPException e) { throw new com.google.gerrit.server.GpgException(e); } }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in.isScheme(com.google.gerrit.gpg.server.SCHEME_GPGKEY)); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter( in) -> in.isScheme(com.google.gerrit.gpg.server.SCHEME_GPGKEY); }
public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in.isScheme(com.google.gerrit.gpg.server.SCHEME_GPGKEY)); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter( in) -> in.isScheme(com.google.gerrit.gpg.server.SCHEME_GPGKEY)); }
@com.google.common.annotations.VisibleForTesting public static com.google.common.collect.FluentIterable<com.google.gerrit.reviewdb.client.AccountExternalId> getGpgExtIds(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().byAccount(accountId)).filter(( in) -> in.isScheme(com.google.gerrit.gpg.server.SCHEME_GPGKEY)); }
java byte[] parseFingerprint(java.lang.String str,java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 8) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) {java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } else if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple keys found for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }
java byte[] parseFingerprint(java.lang.String str,java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 8) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) {java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } else if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("multiple keys found for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }
static byte parseF(java.lang.String str,java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 8) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) {java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } else if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple keys found for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }
java byte[] parseFingerprint(java.lang.String str,java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 8) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) {java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } else if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("no keys found for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }
java byte[] parseFingerprint(java.lang.String str,java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { str = com.google.common.base.CharMatcher.whitespace().removeFrom(str).toUpperCase(); if ((((str.length())!= 8) && ((str.length())!= 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : existingExtIds) {java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } else if (fp!= null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Duplicate keys found for " + str)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); if ((str.length()) == 40) { break; } } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(str); } return fp; }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = newjava.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) {java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint.toString(fp)); } } } return keys; }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = newjava.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) {java.lang.String fpStr = extId. getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint.toString(fp)); } } } return keys; }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = newjava.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) {java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn(("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint.toString(fp)); } } } return keys; }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = newjava.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) {java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint.toString(fp)); } } return keys; } }
java @java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.gpg.server.GpgKeys.checkVisible(self, rsrc);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keys = newjava.util.HashMap<>(); try (com.google.gerrit.gpg.PublicKeyStore store = storeProvider.get()) { for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(rsrc)) {java.lang.String fpStr = extId.getSchemeRest(); byte[] fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); boolean found = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(com.google.gerrit.gpg.server.GpgKeys.keyId(fp))) { if (java.util.Arrays.equals(keyRing.getPublicKey().getFingerprint(), fp)) { found = true; com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing.getPublicKey(), checkerFactory.create(rsrc.getUser(), store), store); keys.put(info.id, info); info.id = null; break; } } if (!found) { com.google.gerrit.gpg.server.GpgKeys.log.warn("No public key stored for fingerprint {}", com.google.gerrit.gpg.Fingerprint.toString(fp)); } } } return keys; }
com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final boolean remember = val.isPersistentCookie(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, lastLogin, val.sessionId, val.auth); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final boolean remember = val.isPersistentCookie(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, lastLogin, val.sessionId, val.auth); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final boolean remember = val.isPersistentCookie(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, lastLogin, val.sessionId, val.auth); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(com.google.gerrit.httpd.WebSessionManager.Key key, com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, lastLogin, val.sessionId, val.auth); }
com.google.gerrit.httpd.WebSessionManager.Val createVal(final com.google.gerrit.httpd.WebSessionManager.Key key, final com.google.gerrit.httpd.WebSessionManager.Val val) { final com.google.gerrit.reviewdb.client.Account.Id who = val.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key lastLogin = val.getExternalId(); return createVal(key, who, remember, lastLogin, val.sessionId, val.auth); }
private com.google.gerrit.gpg.CheckResult checkIdsForArbitraryUser(org.bouncycastle.openpgp.PGPPublicKey key) throws com.google.gwtorm.server.OrmException, org.bouncycastle.openpgp.PGPException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get()); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("key is associated with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0));java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("no identities found for user"); } if (hasAllowedUserId(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.trusted(); } return com.google.gerrit.gpg.CheckResult.bad("key does not contain any valid certifications for user identities"); }
private com.google.gerrit.gpg.CheckResult checkIdsForArbitraryUser(org.bouncycastle.openpgp.PGPPublicKey key) throws com.google.gwtorm.server.OrmException, org.bouncycastle.openpgp.PGPException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key)).get(); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("key is associated with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0));java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("no identities found for user"); } if (hasAllowedUserId(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.trusted(); } return com.google.gerrit.gpg.CheckResult.bad("key does not contain any valid certifications for user identities"); }
private com.google.gerrit.gpg.CheckResult checkIdsForArbitraryUser(org.bouncycastle.openpgp.PGPPublicKey key) throws com.google.gwtorm.server.OrmException, org.bouncycastle.openpgp.PGPException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get()); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("key is associated with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0));java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("no valid identities found for user"); } if (hasAllowedUserId(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.trusted(); } return com.google.gerrit.gpg.CheckResult.bad("key does not contain any valid certifications for user identities"); }
private com.google.gerrit.gpg.CheckResult checkIdsForArbitraryUser(org.bouncycastle.openpgp.PGPPublicKey key) throws com.google.gwtorm.server.OrmException, org.bouncycastle.openpgp.PGPException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key).get()); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("account is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("account is associated with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0));java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("no identities found for user"); } if (hasAllowedUserId(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.trusted(); } return com.google.gerrit.gpg.CheckResult.bad("account does not contain any valid certifications for user identities"); }
private com.google.gerrit.gpg.CheckResult checkIdsForArbitraryUser(org.bouncycastle.openpgp.PGPPublicKey key) throws com.google.gwtorm.server.OrmException, org.bouncycastle.openpgp.PGPException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key)).get(); if (accountStates.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("key is not associated with any users"); } if ((accountStates.size()) > 1) { return com.google.gerrit.gpg.CheckResult.bad("key is associated with multiple users"); } com.google.gerrit.server.IdentifiedUser user = userFactory.create(accountStates.get(0));java.util.Set<java.lang.String> allowedUserIds = getAllowedUserIds(user); if (allowedUserIds.isEmpty()) { return com.google.gerrit.gpg.CheckResult.bad("no valid identities found for user"); } if (hasAllowedUserId(key, allowedUserIds)) { return com.google.gerrit.gpg.CheckResult.trusted(); } return com.google.gerrit.gpg.CheckResult.bad("key does not contain any valid certifications for user identities"); }
private void readObject(finaljava.io.ObjectInputStream in) throwsjava.io.IOException { PARSE : for (; ;) { final int tag = readVarInt32(in); switch (tag) { case 0 : break PARSE; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAt = readFixInt64(in); continue; case 3 : persistentCookie = (readVarInt32(in))!= 0; continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case 5 : sessionId = readString(in); continue; case 6 : expiresAt = readFixInt64(in); continue; case 7 : auth = readString(in); continue; default : throw newjava.io.IOException(("Invalid tag found in object: " + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt) + (java.util.concurrent.TimeUnit.HOURS.toMillis(2)); } }
private void readObject(finaljava.io.ObjectInputStream in) throwsjava.io.IOException { PARSE : for (; ;) { final int tag = readVarInt32(in); switch (tag) { case 0 : break PARSE; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAt = readFixInt64(in); continue; case 3 : persistentCookie = (readVarInt32(in))!= 0; continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case 5 : sessionId = readString(in); continue; case 6 : expiresAt = readFixInt64(in); continue; case 7 : auth = readString(in); continue; default : throw newjava.io.IOException(("No tag found in object: " + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt) + (java.util.concurrent.TimeUnit.HOURS.toMillis(2)); } }
private void readObject(finaljava.io.ObjectInputStream in) throwsjava.io.IOException { PARSE : for (; ;) { final int tag = readVarInt32(in); switch (tag) { case 0 : break PARSE; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAt = readFixInt64(in); continue; case 3 : persistentCookie = (readVarInt32(in))!= 0; continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case 5 : sessionId = readString(in); continue; case 6 : expiresAt = readFixInt64(in); continue; case 7 : auth = readString(in); continue; default : throw newjava.io.IOException(("Unknown tag found in object: " + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt) + (java.util.concurrent.TimeUnit.HOURS.toMillis(2)); } }
private void readObject(finaljava.io.ObjectInputStream in) throwsjava.io.IOException { PARSE : for (; ;) { final int tag = readVarInt32(in); switch (tag) { case : break PARSE; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAt = readFixInt64(in); continue; case 3 : persistentCookie = (readVarInt32(in))!= 0; continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case 5 : sessionId = readString(in); continue; case 6 : expiresAt = readFixInt64(in); continue; case 7 : auth = readString(in); continue; default : throw newjava.io.IOException(("Invalid tag found in object: " + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt) + (java.util.concurrent.TimeUnit.HOURS.toMillis(2)); } }
private void readObject(finaljava.io.ObjectInputStream in) throwsjava.io.IOException { PARSE : for (; ;) { final int tag = readVarInt32(in); switch (tag) { case 0 : break PARSE; case 1 : accountId = new com.google.gerrit.reviewdb.client.Account.Id(readVarInt32(in)); continue; case 2 : refreshCookieAt = readFixInt64(in); continue; case 3 : persistentCookie = (readVarInt32(in))!= 0; continue; case 4 : externalId = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(readString(in)); continue; case 5 : sessionId = readString(in); continue; case 6 : expiresAt = readFixInt64(in); continue; case 7 : auth = readString(in); continue; default : throw newjava.io.IOException(("no tag found in object: " + tag)); } } if ((expiresAt) == 0) { expiresAt = (refreshCookieAt) + (java.util.concurrent.TimeUnit.HOURS.toMillis(2)); } }
private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_UUID)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } for (final com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; }
private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_UUID)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } for (com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; }
private boolean isTrusted(com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_UUID)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } for (com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; }
private boolean isTrusted(com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_UUID)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } for (final com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; }
private boolean isTrusted(final com.google.gerrit.reviewdb.client.AccountExternalId id) { if (id.isScheme(AccountExternalId.SCHEME_MAILTO)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_UUID)) { return true; } if (id.isScheme(AccountExternalId.SCHEME_USERNAME)) { return true; } for (final com.google.gerrit.server.auth.openid.OpenIdProviderPattern p : trustedOpenIDs) { if (p.matches(id)) { return true; } } return false; };
privatejava.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input,java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); }java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }
privatejava.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input,java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); }java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }
java privatejava.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input,java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); }java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }
privatejava.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input,java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); }java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }
java privatejava.util.Set<com.google.gerrit.gpg.Fingerprint> readKeysToRemove(com.google.gerrit.gpg.server.PostGpgKeys.Input input,java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> existingExtIds) { if (((input.delete) == null) || (input.delete.isEmpty())) { return com.google.common.collect.ImmutableSet.of(); }java.util.Set<com.google.gerrit.gpg.Fingerprint> fingerprints = com.google.common.collect.Sets.newHashSetWithExpectedSize(input.delete.size()); for (java.lang.String id : input.delete) { try { fingerprints.add(new com.google.gerrit.gpg.Fingerprint(com.google.gerrit.gpg.server.GpgKeys.parseFingerprint(id, existingExtIds))); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { } } return fingerprints; }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of(), com.google.common.collect.ImmutableSet.of()); }
private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.of(com.google.gerrit.reviewdb.client.AccountGroup.UUID.of()), com.google.common.collect.ImmutableSet.of(com.google.gerrit.reviewdb.client.AccountExternalId.of())); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id.getExternalId()); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id.externalId()); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id.getId()); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id. getExternalId()); }
public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id); }
private com.google.gerrit.server.account.AccountState makeUser(finaljava.lang.String name, finaljava.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account,java.util.Collections.emptySet(),java.util.Collections.emptySet(), newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private com.google.gerrit.server.account.AccountState makeUser(finaljava.lang.String name, finaljava.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account,java.util.Collections.emptySet(),java.util.Collections.emptySet(),java.util.Collections.emptySet(), newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private com.google.gerrit.server.account.AccountState makeUser(finaljava.lang.String name, finaljava.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account,java.util.Collections.emptySet(),java.util.Collections.emptySet(), newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private com.google.gerrit.server.account.AccountState makeUser(finaljava.lang.String name, finaljava.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account,java.util.Collections.emptySet(),java.util.Collections.emptySet(),java.util.Collections.emptySet(), newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private com.google.gerrit.server.account.AccountState makeUser(finaljava.lang.String name, finaljava.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account,java.util.Collections.emptySet(),java.util.Collections.emptySet(),java.util.Collections.emptySet(), newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> ()); }
javajava.lang.String create(com.google.gerrit.reviewdb.client.Account.Id id,java.lang.String username,java.lang.String email);
javajava.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> create(java.lang.String username,java.lang.String email);
javajava.lang.String username;
javajava.lang.String username,java.lang.String email);
javajava.lang.String username,java.lang.String email;
@java.lang.Override publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e.getEmailAddress()))).findAny().isPresent()) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } }
@java.lang.Override publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e.getEmailAddress())).findAny().isPresent()) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } }
@java.lang.Override publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e.getEmailAddress()))) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } }
@java.lang.Override publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account a : db.accounts().byPreferredEmail(email)) { r.add(a.getId()); } for (com.google.gerrit.server.account.AccountState accountState : accountQueryProvider.get().byEmailPrefix(email)) { if (accountState.getExternalIds().stream().filter(( e) -> email.equals(e. getEmailAddress()))).findAny().isPresent()) { r.add(accountState.getAccount().getId()); } } return com.google.common.collect.ImmutableSet.copyOf(r); } }
@java.lang.Override publicjava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String email) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { return com.google.common.collect.ImmutableSet.copyOf(load(email)); } }
public boolean checkPassword(java.lang.String password,java.lang.String username) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(AccountExternalId.SCHEME_USERNAME))) || (!(username.equals(id.getSchemeRest()))) { continue; }java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.logger.error(java.lang.String.format("Invalid password for user %s: %s", username, e.getMessage())); return false; } } } return false; }
public boolean checkPassword(java.lang.String password,java.lang.String username) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(AccountExternalId.SCHEME_USERNAME))) || (!(username.equals(id.getSchemeRest()))) { continue; }java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.logger.error(java.lang.String.format("Error checking password for user %s: %s", username, e.getMessage())); return false; } } } return false; }
public boolean checkPassword(java.lang.String password,java.lang.String username) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(AccountExternalId.SCHEME_USERNAME))) || (!(username.equals(id.getSchemeRest()))) { continue; }java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.logger.error(java.lang.String.format("Cannot check password for user %s: %s", username, e.getMessage())); return false; } } } return false; }
public boolean checkPassword(java.lang.String password,java.lang.String username) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(AccountExternalId.SCHEME_USERNAME))) || (!(username.equals(id.getSchemeRest()))) { continue; }java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.logger.error(java.lang.String.format("Cannot check for user %s: %s", username, e.getMessage())); return false; } } } return false; }
public boolean checkPassword(java.lang.String password,java.lang.String username) { if (password == null) { return false; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : getExternalIds()) { if ((!(id.isScheme(AccountExternalId.SCHEME_USERNAME))) || (!(username.equals(id.getSchemeRest()))) { continue; }java.lang.String hashedStr = id.getPassword(); if (!(com.google.common.base.Strings.isNullOrEmpty(hashedStr))) { try { return com.google.gerrit.server.account.HashedPassword.decode(hashedStr).checkPassword(password); } catch (org.apache.commons.codec.DecoderException e) { com.google.gerrit.server.account.AccountState.logger.error(java.lang.String.format("error checking password for user %s: %s", username, e.getMessage())); return false; } } } return false; }
public staticjava.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) {java.util.Set<java.lang.String> emails = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }
public staticjava.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) {java.util.Set<java.lang.String> emails = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id. getSchemeRest()); } } return emails; }
private staticjava.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) {java.util.Set<java.lang.String> emails = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }
public staticjava.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) {java.util.Set<java.lang.String> emails = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO))) { emails.add(id.getSchemeRest()); } } return emails; }
public staticjava.util.Collection<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) {java.util.Set<java.lang.String> emails = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }
publicjava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds() { return externalIds; }
java publicjava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds() { return externalIds; }
public com.google.gerrit.reviewdb.client.AccountExternalId getExternalId() { return externalId; }
publicjava.util.Collection<com.google.gerrit.reviewdb.client.account.ExternalId> getExternalIds() { return externalIds; }
public com.google.gerrit.reviewdb.client.AccountExternalId getExternalIds() { return externalIds; }
public staticjava.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return id.getSchemeRest(); } } return null; }
public staticjava.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return id. getSchemeRest(); } } return null; }
public staticjava.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return id.getSchemeRest (); } } return null; }
public staticjava.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME))) { return id.getSchemeRest(); } } return null; }
public staticjava.lang.String getUserName(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { if (ids.isEmpty()) { return null; } for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { return id.toString(); } } return null; }
private void addExternalId(java.lang.String scheme,java.lang.String id,java.lang.String email) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email!= null) { extId.setEmailAddress(email); } db.accountExternalIds().insert(java.util.Collections.singleton(extId)); reloadUser(); }
private void addExternalId(java.lang.String scheme,java.lang.String id,java.lang.String email) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email!= null) { extId.setEmailAddress(email); } db.accountExternalIds().insert(java.util.Collections.singleton(extId )); reloadUser(); }
private void addExternalId(java.lang.String scheme,java.lang.String id,java.lang.String email) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); extId.setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); reloadUser(); }
private void addExternalId(java.lang.String scheme,java.lang.String id,java.lang.String email) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if ((email!= null) && (!(email.isEmpty()))) { extId.setEmailAddress(email); } db.accountExternalIds().insert(java.util.Collections.singleton(extId)); reloadUser(); }
private void addExternalId(java.lang.String scheme,java.lang.String id,java.lang.String email) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(scheme, id)); if (email!= null) { extId.setEmailAddress(email); } db.accountExternalIds().insert(java.util.Collections.singleton(extId)); }
publicjava.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return query(com.google.gerrit.server.query.account.AccountPredicates.externalId(externalId)); }
publicjava publicjava.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return query(com.google.gerrit.server.query.account.AccountPredicates.externalId(externalId)); }
publicjava.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return query(accountPredicates.externalId(externalId)); }
publicjava.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return query(com.google.gerrit.server.query.account.AccountPredicates.externalId(externalId))); }
publicjava publicjava.util.List<com.google.gerrit.server.account.AccountState> byExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return query(com.google.gerrit.server.query.account.AccountPredicates.externalId(externalId))); }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return accountStates.get(0); } else if ((accountStates.size()) > 0) {java.lang.StringBuilder msg = newjava.lang.StringBuilder(); msg.append("for external ID ").append(externalId).append("for accounts:"); com.google.common.base.Joiner.on(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); com.google.gerrit.server.query.account.InternalAccountQuery.log.warn(msg.toString()); } return null; }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return accountStates.get(0); } else if ((accountStates.size()) > 0) {java.lang.StringBuilder msg = newjava.lang.StringBuilder(); msg.append("for external ID ").append(externalId).append("for accounts"); com.google.common.base.Joiner.on(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); com.google.gerrit.server.query.account.InternalAccountQuery.log.warn(msg.toString()); } return null; }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return accountStates.get(0); } else if ((accountStates.size()) > 0) {java.lang.StringBuilder msg = newjava.lang.StringBuilder(); msg.append("for external ID ").append(externalId).append("for accounts: "); com.google.common.base.Joiner.on(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); com.google.gerrit.server.query.account.InternalAccountQuery.log.warn(msg.toString()); } return null; }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = byExternalId(externalId); if ((accountStates.size()) == 1) { return accountStates.get(0); } else if ((accountStates.size()) > 0) {java.lang.StringBuilder msg = newjava.lang.StringBuilder(); msg.append("for external ID ").append(externalId).append("for accounts:"); com.google.common.base.Joiner.on(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); com.google.gerrit.server.query.account.InternalAccountQuery.log.warn(msg.toString()); } return null; }
public com.google.gerrit.server.account.AccountState oneByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return byExternalId(externalId); }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("cannot add email", e); } }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); createEmailFactory.create(input.email).apply(rsrc, input); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account,java.lang.String email) throwsjava.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email)); extId.setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(account.getId()); setApiUser(account); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account,java.lang.String email) throwsjava.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email)); extId. setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(account.getId()); setApiUser(account); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account,java.lang.String email) throwsjava.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email))); extId.setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(account.getId()); setApiUser(account); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account,java.lang.String email) throwsjava.lang.Exception { checkNotNull(email); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(account.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(name("test"), email )); extId.setEmailAddress(email); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(account.getId()); setApiUser(account); }
private void addExternalIdEmail(com.google.gerrit.acceptance.TestAccount account,java.lang.String email) throwsjava.lang.Exception { checkNotNull(email); accountCache.evict(account.getId()); setApiUser(account); }
@org.junit.Before public void saveExternalIds() throwsjava.lang.Exception { savedExternalIds = newjava.util.ArrayList(); savedExternalIds.addAll(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); }
@org.junit.Before public void saveExternalIds() { savedExternalIds = newjava.util.ArrayList(); savedExternalIds.addAll(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); }
@org.junit.Before public void saveExternalIds() { savedExternalIds = newjava.util.ArrayList(); savedExternalIds.addAll(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); saveExternalIds(); }
@org.junit.Before public void saveExternalIds() throwsjava.lang.Exception { savedExternalIds = newjava.util.ArrayList(getExternalIds(admin)); savedExternalIds.addAll(getExternalIds(user)); }
@org.junit.Before public void saveExternalIds() throwsjava.lang.Exception { savedExternalIds = newjava.util.ArrayList(); savedExternalIds.addAll(getExternalIds(user)); }
@org.junit.Test public void deleteEmailFromCustomExternalIdSchemes() throwsjava.lang.Exception {java.lang.String email = "foo.bar@example.com";java.lang.String extId1 = "foo:bar";java.lang.String extId2 = "foo:baz"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsAllOf(extId1, extId2); resetCurrentApiUser(); assertThat(getEmails()).contains(email); gApi.accounts().self().deleteEmail(email); resetCurrentApiUser(); assertThat(getEmails()).doesNotContain(email); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsNoneOf(extId1, extId2); }
@org.junit.Test public void deleteEmailFromCustomExternalIdSchemes() throwsjava.lang.Exception {java.lang.String email = "foo.bar@example.com";java.lang.String extId1 = "foo:bar";java.lang.String extId2 = "foo:baz"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsAllOf(extId1, extId2); resetCurrentApiUser(); assertThat(getEmails()).contains(email); gApi.accounts().self().deleteEmail(email); resetCurrentApiUser(); assertThat(getEmails()).doesNotContain(email); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsNoneOf(extId1, extId2); }
@org.junit.Test public void deleteEmailFromCustomExternalIdSchemes() throwsjava.lang.Exception {java.lang.String email = "foo.bar@example.com";java.lang.String extId1 = "foo:bar";java.lang.String extId2 = "foo:baz"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail(extId1, email), createExternalIdWithEmail(extId2, email))); accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsAllOf(extId1, extId2); resetCurrentApiUser(); assertThat(getEmails()).contains(email); gApi.accounts().self().deleteEmail(email); resetCurrentApiUser(); assertThat(getEmails()).doesNotContain(email); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity)).collect(java.util.stream.Collectors.toSet())).containsNoneOf(extId1, extId2); }
@org.junit.Test public void deleteEmailFromCustomExternalIdSchemes() throwsjava.lang.Exception {java.lang.String email = "foo.bar@example.com";java.lang.String extId1 = "foo:bar";java.lang.String extId2 = "foo:baz"; accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsAllOf(extId1, extId2); resetCurrentApiUser(); assertThat(getEmails()).contains(email); gApi.accounts().self().deleteEmail(email); resetCurrentApiUser(); assertThat(getEmails()).doesNotContain(email); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsNoneOf(extId1, extId2); }
@org.junit.Test public void deleteEmailFromCustomExternalIdSchemes() throwsjava.lang.Exception {java.lang.String email = "foo.bar@example.com";java.lang.String extId1 = "foo:bar";java.lang.String extId2 = "foo:baz"; accountCache.evict(admin.id); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsAllOf(extId1, extId2); resetCurrentApiUser(); assertThat(getEmails()).contains(email); gApi.accounts().self().deleteEmail(email); resetCurrentApiUser(); assertThat(getEmails()).doesNotContain(email); assertThat(gApi.accounts().self().getExternalIds().stream().map(( e) -> e.identity).collect(java.util.stream.Collectors.toSet())).containsNoneOf(extId1, extId2); }
privatejava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throwsjava.lang.Exception { return accountCache.get(account.getId()).getExternalIds(); }
publicjava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throwsjava.lang.Exception { return accountCache.get(account.getId()).getExternalIds(); }
privatejava.util.Collection<com.google.gerrit.acceptance.TestAccount.ExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throwsjava.lang.Exception { return accountCache.get(account.getId()).getExternalIds(); }
privatejava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) { return accountCache.get(account.getId()).getExternalIds(); }
privatejava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> getExternalIds(com.google.gerrit.acceptance.TestAccount account) throwsjava.lang.Exception { return accountCache.get(account.getId()).externalIds(); }
@org.junit.Test public void noExternalIds() throwsjava.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "no identities found for user; check http://localhost:80/"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "no identities found for user; check http://localhost:80/"); }
@org.junit.Test public void noExternalIds() throwsjava.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "no identities found for user; check http://localhost:80/"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "no identities found for user; check http://localhost:80/"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "key is not associated with any users"); }
@org.junit.Test public void noExternalIds() throwsjava.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "no identities found for user; check http://example.com/"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "no identities found for user; check http://example.com/"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "key is not associated with any users"); }
@org.junit.Test public void noExternalIds() throwsjava.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user; check http://localhost:80/"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "ExternalId is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user; check http://localhost:80/"); }
@org.junit.Test public void noExternalIds() throwsjava.lang.Exception { db.accountExternalIds().delete(db.accountExternalIds().byAccount(user.getAccountId())); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "no identities found for user; check http://example.com/"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "key is not associated with any users"); db.accountExternalIds().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "no identities found for user; check http://example.com/"); }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) ) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getLastLoginExternalIdKey(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(info.identity))))); } result.add(info); } return result; }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) ) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getLastLoginExternalIdKey(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(info.identity)))))); } result.add(info); } return result; }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) ) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getLastLoginExternalIdKey(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(info.identity))))))); } result.add(info); } return result; }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getLastLoginExternalIdKey(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(info.identity))))); } result.add(info); } return result; }
@java.lang.Override publicjava.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if ((self.get())!= (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to get external IDs"); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(resource.getUser().getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = com.google.gerrit.server.account.GetExternalIds.toBoolean(authConfig.isIdentityTrustable(java.util.Collections.singleton(id))); if (!(id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().getLastLoginExternalIdKey(); info.canDelete = com.google.gerrit.server.account.GetExternalIds.toBoolean(((last == null) || (!(last.get().equals(info.identity))))))); } result.add(info); } return result; }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throwsjava.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throwsjava.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("Key key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throwsjava.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throwsjava.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("GPG key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); }
@org.junit.Test public void addOtherUsersGpgKey_Conflict() throwsjava.lang.Exception { addExternalIdEmail(admin, "test5@example.com"); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key("foo:myId")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("key already associated with another account"); addGpgKey(key.getPublicKeyArmored()); setApiUser(null); }
@org.junit.After public void restoreExternalIds() throwsjava.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(user)); } accountCache.evict(admin.getId()); accountCache.evict(user.getId()); }
@org.junit.After public void restoreExternalIds() throwsjava.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIds); } }
@org.junit.After public void restoreExternalIds() throwsjava.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIds); } }
@org.junit.After public void restoreExternalIds() throwsjava.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIds); } accountCache.evict(user.getId()); }
@org.junit.After public void restoreExternalIds() throwsjava.lang.Exception { if ((savedExternalIds)!= null) { db.accountExternalIds().delete(getExternalIds(admin)); db.accountExternalIds().delete(getExternalIds(user)); db.accountExternalIds().insert(savedExternalIds); } }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid username"); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("name already used"); } return input.username; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid username"); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username already used"); } return input.username; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("invalid username"); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("user already used"); } return input.username; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Invalid username"); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("name already used"); } return input.username; }
@java.lang.Override publicjava.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set username"); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing username"); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException("Invalid username"); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username already used"); } return input.username; }
private com.google.gerrit.server.account.AuthResult auth(com.google.gerrit.reviewdb.client.AccountExternalId account) { if (account!= null) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null, false); } return null; }
private com.google.gerrit.server.account.AuthResult auth(final com.google.gerrit.reviewdb.client.AccountExternalId account) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null, false); }
private com.google.gerrit.server.account.AuthResult auth(com.google.gerrit.reviewdb.client.AccountExternalId account) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null, false); }
private com.google.gerrit.server.account.AuthResult auth(com.google.gerrit.reviewdb.client.AccountExternalId account) { if (account!= null) { return new com.google.gerrit.server.account.AuthResult(account.getExternalId(), null, false); } return null; }
private com.google.gerrit.server.account.AuthResult auth(final com.google.gerrit.reviewdb.client.AccountExternalId account) { if (account!= null) { return new com.google.gerrit.server.account.AuthResult(account.getAccountId(), null); } return null; }
private com.google.gerrit.server.account.AuthResult byUserName(finaljava.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName);java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQuery.byExternalId(extKey.get()); if (accountStates.isEmpty()) { getServletContext().log((("No accounts with username " + userName) + " found")); return null; } if ((accountStates.size()) > 1) { getServletContext().log((("Multiple accounts with username " + userName) + " found")); return null; } return auth(new com.google.gerrit.reviewdb.client.AccountExternalId(accountStates.get(0).getAccount().getId(), extKey)); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log("Cannot query account index", e); return null; } }
private com.google.gerrit.server.account.AuthResult byUserName(finaljava.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName);java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQuery.byExternalId(extKey.get()); if (accountStates.isEmpty()) { getServletContext().log(("No accounts with username " + userName) + " found"); return null; } if ((accountStates.size()) > 1) { getServletContext().log(("Multiple accounts with username " + userName) + " found"); return null; } return auth(new com.google.gerrit.reviewdb.client.AccountExternalId(accountStates.get(0).getAccount().getId(), extKey)); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(("Cannot query account index", e); return null; } }
private com.google.gerrit.server.account.AuthResult byUserName(finaljava.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName);java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQuery.byExternalId(extKey.get()); if (accountStates.isEmpty()) { getServletContext().log((("No accounts with username " + userName) + " found")); return null; } if ((accountStates.size()) > 1) { getServletContext().log((("Multiple accounts with username " + userName) + " found")); return null; } return auth(new com.google.gerrit.reviewdb.client.AccountExternalId(accountStates.get(0).getAccount().getId(), extKey)); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(("Cannot query account index", e); return null; } }
private com.google.gerrit.server.account.AuthResult byUserName(finaljava.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName);java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQuery.byExternalId(extKey.get()); if (accountStates.isEmpty()) { getServletContext().log(("No accounts with username " + userName) + " found"); return null; } if ((accountStates.size()) > 1) { getServletContext().log(("Multiple accounts with username " + userName) + " found"); return null; } return auth(new com.google.gerrit.reviewdb.client.AccountExternalId(accountStates.get(0).getAccount().getId(), extKey)); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log("Cannot query account index", e); return null; } }
private com.google.gerrit.server.account.AuthResult byUserName(finaljava.lang.String userName) { try { com.google.gerrit.reviewdb.client.AccountExternalId.Key extKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName);java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQuery.byExternalId(extKey.get()); if (accountStates.isEmpty()) { getServletContext().log(("No accounts with username " + userName) + " found"); return null; } if ((accountStates.size()) > 1) { getServletContext().log(("More accounts with username " + userName) + " found"); return null; } return auth(new com.google.gerrit.reviewdb.client.AccountExternalId(accountStates.get(0).getAccount().getId(), extKey)); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log(("Cannot query account index", e); return null; } }
@org.junit.Test public void lookUpFromCacheByEmail() throwsjava.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin);java.lang.String email = "foo.bar@example.com"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail("foo:bar", email))); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")).isEmpty(); }
@org.junit.Test public void lookUpFromCacheByEmail() throwsjava.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin);java.lang.String email = "foo.bar@example.com"; accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")).isEmpty(); }
@org.junit.Test public void lookUpFromCacheByEmail() throwsjava.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin);java.lang.String email = "foo.bar@example.com"; accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(admin.email)).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")).isEmpty(); }
@org.junit.Test public void lookUpFromCacheByEmail() throwsjava.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin);java.lang.String email = "foo.bar@example.com"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail("foo:bar", email))); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(admin.email)); }
@org.junit.Test public void lookUpFromCacheByEmail() throwsjava.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin);java.lang.String email = "foo.bar@example.com"; db.accountExternalIds().insert(com.google.common.collect.ImmutableList.of(createExternalIdWithEmail("foo:bar", email))); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getEmail()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getEmail()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getEmail()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to delete email address"); } return apply(rsrc.getUser(), rsrc.getEmail()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.Email rsrc, com.google.gerrit.server.account.DeleteEmail.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to delete email address"); } return super.apply(rsrc, rsrc, input); }
com.google.gerrit.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account
com.google.gerrit.client.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account
com.google.ger.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.
com.google.gerrit.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account..account.account.account.account.account.
com.google.gerrit.client.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account.account..account.account.account.account.account.
void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throwsjava.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keyMap.keySet()).named("Keys returned by listGpgKeys()"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey().getFingerprint())).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyMapContains(key, keyMap); } com.google.gerrit.reviewdb.client.Account.Id currAccountId = atrScope.get().getUser().getAccountId();java.lang.Iterable<java.lang.String> expectedFps = expected.transform(( k) -> com.google.common.io.BaseEncoding.base16().encode(k.getPublicKey().getFingerprint()));java.lang.Iterable<java.lang.String> actualFps = com.google.gerrit.gpg.server.GpgKeys.getGpgExtIds(db, currAccountId).transform( AccountExternalId::getSchemeRest()); assertThat(actualFps).named("Expected IDs in database"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { getOnlyKeyFromStore(key); } }
void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throwsjava.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keyMap.keySet()).named("Keys returned by listGpgKeys()"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey().getFingerprint())).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyMapContains(key, keyMap); } com.google.gerrit.reviewdb.client.Account.Id currAccountId = atrScope.get().getUser().getAccountId();java.lang.Iterable<java.lang.String> expectedFps = expected.transform(( k) -> com.google.common.io.BaseEncoding.base16().encode(k.getPublicKey().getFingerprint()));java.lang.Iterable<java.lang.String> actualFps = com.google.gerrit.gpg.server.GpgKeys.getGpgExtIds(db, currAccountId).transform(AccountExternalId::getSchemeRest()); assertThat(actualFps).named("Expected IDs in database"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { getOnlyKeyFromStore(key); } }
private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throwsjava.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keyMap.keySet()).named("Keys returned by listGpgKeys()"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey().getFingerprint())).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyMapContains(key, keyMap); } com.google.gerrit.reviewdb.client.Account.Id currAccountId = atrScope.get().getUser().getAccountId();java.lang.Iterable<java.lang.String> expectedFps = expected.transform(( k) -> com.google.common.io.BaseEncoding.base16().encode(k.getPublicKey().getFingerprint()));java.lang.Iterable<java.lang.String> actualFps = com.google.gerrit.gpg.server.GpgKeys.getGpgExtIds(db, currAccountId).transform( AccountExternalId::getSchemeRest()); assertThat(actualFps).named("Expected IDs in database"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { getOnlyKeyFromStore(key); } }
private void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throwsjava.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keyMap.keySet()).named("Keys returned by listGpgKeys()"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey().getFingerprint())).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyMapContains(key, keyMap); } com.google.gerrit.reviewdb.client.Account.Id currAccountId = atrScope.get().getUser().getAccountId();java.lang.Iterable<java.lang.String> expectedFps = expected.transform(( k) -> com.google.common.io.BaseEncoding.base16().encode(k.getPublicKey().getFingerprint()));java.lang.Iterable<java.lang.String> actualFps = com.google.gerrit.gpg.server.GpgKeys.getGpgExtIds(db, currAccountId).transform(AccountExternalId::getSchemeRest()); assertThat(actualFps).named("Expected IDs in database"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { getOnlyKeyFromStore(key); } }
void assertKeys(java.lang.Iterable<com.google.gerrit.gpg.testutil.TestKey> expectedKeys) throwsjava.lang.Exception { com.google.common.collect.FluentIterable<com.google.gerrit.gpg.testutil.TestKey> expected = com.google.common.collect.FluentIterable.from(expectedKeys);java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> keyMap = gApi.accounts().self().listGpgKeys(); assertThat(keyMap.keySet()).named("Keys returned by listGpgKeys()"); for (com.google.gerrit.gpg.testutil.TestKey key : expected) { com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(key.getKeyIdString()).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals(key, gApi.accounts().self().gpgKey(com.google.gerrit.gpg.Fingerprint.toString(key.getPublicKey().getFingerprint())).get()); com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyMapContains(key, keyMap); } com.google.gerrit.reviewdb.client.Account.Id currAccountId = atrScope.get().getUser().getAccountId();java.lang.Iterable<java.lang.String> expectedFps = expected.transform(( k) -> com.google.common.io.BaseEncoding.base16().encode(k.getPublicKey().getFingerprint()));java.lang.Iterable<java.lang.String> actualFps = com.google.gerrit.gpg.server.GpgKeys.getGpgExtIds(db, currAccountId).transform( AccountExternalId::getSchemeRest()); assertThat(actualFps).named("Expected IDs in database for (com.google.gerrit.gpg.testutil.TestKey key : expected) { getOnlyKeyFromStore(key); } }
public boolean isIdentityTrustable(finaljava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (final com.google.gerrit.reviewdb.client.AccountExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } }
public boolean isIdentityTrustable(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (final com.google.gerrit.reviewdb.client.AccountExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } }
public boolean isIdentityTrustable(finaljava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (com.google.gerrit.reviewdb.client.AccountExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } }
public boolean isIdentityTrustable(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (com.google.gerrit.reviewdb.client.AccountExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } }
private boolean isIdentityTrustable(finaljava.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (final com.google.gerrit.reviewdb.client.AccountExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) {java.lang.StringBuilder msg = newjava.lang.StringBuilder(); msg.append("External key ").append(externalId).append(" associated with multiple accounts: "); com.google.common.base.Joiner.on(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw newjava.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) {java.lang.StringBuilder msg = newjava.lang.StringBuilder(); msg.append("External key ").append(externalId).append(" associated with multiple accounts:\n"); com.google.common.base.Joiner.on(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw newjava.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) {java.lang.StringBuilder msg = newjava.lang.StringBuilder(); msg.append("External key ").append(externalId).append(" associated with multiple accounts:"); com.google.common.base.Joiner.on(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw newjava.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount(); }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException {java.util.List<com.google.gerrit.server.account.AccountState> accountStates = accountQueryProvider.get().byExternalId(externalId); if (accountStates.isEmpty()) { return null; } if ((accountStates.size()) > 1) {java.lang.StringBuilder msg = newjava.lang.StringBuilder(); msg.append("External key ").append(externalId).append(" associated with multiple accounts:\n"); com.google.common.base.Joiner.on(com.google.common.collect.Lists.transform(accountStates, AccountState.ACCOUNT_ID_FUNCTION)); log.error(msg.toString()); throw newjava.lang.IllegalStateException(msg.toString()); } return accountStates.get(0).getAccount; }
private com.google.gerrit.reviewdb.client.Account getAccountByExternalId(java.lang.String externalId) throws com.google.gwtorm.server.OrmException { return accountQueryProvider.get().byExternalId(externalId); }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email", e); } }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("cannot delete email", e); } }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc); } catch (com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email", e); } }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email", e); } }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); deleteEmail.apply(rsrc, null); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(key); returnjava.util.Optional.ofNullable(accountState).map(( s) -> s.getAccount().getId()); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(key.get()); returnjava.util.Optional.ofNullable(accountState).map( s -> s.getAccount().getId()); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByExternalId(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); returnjava.util.Optional.ofNullable(accountState).map(( s) -> s.getAccount().getId()); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, username); return accountQueryProvider.get().oneByExternalId(key.get()); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.server.account.AccountState accountState = accountQueryProvider.get().oneByUsername(username); returnjava.util.Optional.ofNullable(accountState).map(( s) -> s.getAccount().getId()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false);java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids =java.util.Collections.emptySet();java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, ids, newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false);java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> ids =java.util.Collections.emptySet();java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, ids, newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
public static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false);java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids =java.util.Collections.emptySet();java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, ids, newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false);java.util.Set<com.google.gerrit.reviewdb.client.AccountExternalId> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
private static com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false);java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> anon = com.google.common.collect.ImmutableSet.of(); return new com.google.gerrit.server.account.AccountState(account, anon, newjava.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }
java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { returnjava.util.Optional.empty(); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds =java.util.Collections.unmodifiableCollection(db.accountExternalIds().byAccount(who).toList());java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountGroupMembers().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups =java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn((("Cannot load GeneralPreferences for " + who) + " (using default)"), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); } returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(account, internalGroups, externalIds, watchConfig.getWatches(who))); }
javajava.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { returnjava.util.Optional.empty(); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds =java.util.Collections.unmodifiableCollection(db.accountExternalIds().byAccount(who).toList());java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountGroupMembers().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups =java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn((("Cannot load GeneralPreferences for " + who) + " (using default)"), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); } returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(account, internalGroups, externalIds, watchConfig.getWatches(who))); }
java.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { returnjava.util.Optional.empty(); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds =java.util.Collections.unmodifiableCollection(db.accountExternalIds().byAccount(who).toList());java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountGroupMembers().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups =java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn((("Cannot load GeneralPreferences for " + who) + " (using default)"), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); } returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(account, internalGroups, externalIds, watchConfig.getWatches().getProject())); }
javajava.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { returnjava.util.Optional.empty(); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds =java.util.Collections.unmodifiableCollection(db.accountExternalIds().byAccount(who).toList());java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountGroupMembers().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups =java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn((("Cannot load GeneralPreferences for " + who) + " (using default)"), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); } returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(account, internalGroups, externalIds, watchConfig.getWatchesProject(who))); }
javajava.util.Optional<com.google.gerrit.server.account.AccountState> load(final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who) throws com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Account account = db.accounts().get(who); if (account == null) { returnjava.util.Optional.empty(); }java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> externalIds =java.util.Collections.unmodifiableCollection(db.accountExternalIds().byAccount(who).toList());java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> internalGroups = newjava.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember g : db.accountGroupMembers().byAccount(who)) { final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = g.getAccountGroupId(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); if ((group!= null) && ((group.getGroupUUID())!= null)) { internalGroups.add(group.getGroupUUID()); } } internalGroups =java.util.Collections.unmodifiableSet(internalGroups); try { account.setGeneralPreferences(loader.load(who)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.AccountCacheImpl.log.warn((("Cannot load GeneralPreferences for " + who) + " (using default)"), e); account.setGeneralPreferences(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()); } returnjava.util.Optional.of(new com.google.gerrit.server.account.AccountState(account, internalGroups, externalIds, watchConfig.getWatches().getProject())); }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { returnjava.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { returnjava.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); } }
@java @java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { returnjava.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId); } }
@java.lang.Override publicjava.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.open()) { return com.google.common.collect.FluentIterable.from(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((ExternalId.SCHEME_USERNAME) + ":") + username)))).map(AccountExternalId::getAccountId)); } }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(ext.getEmailAddress())) { return true; } } return false; }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(ext.getEmailAddress()))) { return true; } } return false; }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(ext. getEmailAddress())) { return true; } } return false; }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(ext.emailAddress())) { return true; } } return false; }
@java.lang.Override public boolean hasEmailAddress(com.google.gerrit.server.IdentifiedUser user,java.lang.String email) { for (com.google.gerrit.reviewdb.client.AccountExternalId ext : user.state().getExternalIds()) { if ((email!= null) && (email.equalsIgnoreCase(ext.getEmailAddress())) { return true; } } return false; };
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("cannot delete GPG key", e); } }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (com.google.gwtorm.server.OrmException |java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { if (email.equals("ALL")) {java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private void deleteEmail(java.lang.String email) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (email.equals("ALL")) {java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { if (email.equals("ALL")) {java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), com.google.gerrit.server.account.DeleteEmail.Input()); } }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException {java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException,java.io.IOException { if (email.equals("ALL")) {java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.emailConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage()); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException e) { throw die(e.getMessage(), e); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.extensions.api.accounts.EmailInput in = new com.google.gerrit.extensions.api.accounts.EmailInput(); in.email = email; in.noConfirmation = true; try { createEmailFactory.create(email).apply(rsrc, in); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException e) { throw die(e.getMessage()); } }
private void addEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException,java.io.IOException { com.google.gerrit.extensions.api.accounts.EmailInput in = createEmailFactory.create(email).apply(rsrc, in); }
@java.lang.Override publicjava.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds();java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId ext : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(ext.getEmailAddress())) { emails.add(ext.getEmailAddress()); } } return emails; }
@java.lang.Override publicjava.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds();java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId ext : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(ext.getEmailAddress())))) { emails.add(ext.getEmailAddress()); } } return emails; }
@java.lang.Override publicjava.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds();java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId ext : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(ext.emailAddress())) { emails.add(ext.emailAddress()); } } return emails; }
@java.lang.Override publicjava.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds();java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId ext : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(ext.getEmailAddress()))) { emails.add(ext.getEmailAddress()); } } return emails; }
@java.lang.Override publicjava.util.Set<java.lang.String> getEmailAddresses(com.google.gerrit.server.IdentifiedUser user) {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = user.state().getExternalIds();java.util.Set<java.lang.String> emails = com.google.common.collect.Sets.newHashSetWithExpectedSize(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId ext : ids) { if (!(com.google.common.base.Strings.isNullOrEmpty(ext. getEmailAddress())) { emails.add(ext. getEmailAddress()); } } return emails; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("user does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Invalid email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("unsupported email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("missing email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException,java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword);java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to clear HTTP password"); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set HTTP password directly, " + "restricted by the Administrate Server permission"); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException,java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword);java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to clear HTTP password"); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set HTTP password directly, " + "restricted by the Administrate Server permission"); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword);java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to clear HTTP password"); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set HTTP password directly, " + "restricted by the Administrate Server permission"); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword);java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to clear HTTP password"); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set HTTP password directly, " + "requires the Administrate Server permission"); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword);java.lang.String newPassword; if (input.generate) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to generate HTTP password"); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get())!= (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to clear HTTP password"); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to set HTTP password directly, " + "restricted by the Administrate Server permission")); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("UserName must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("user must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Username must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException { if ((user.getUserName()) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"); } com.google.gerrit.reviewdb.client.AccountExternalId id = dbProvider.get().accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, user.getUserName())); if (id == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } id.setPassword(com.google.gerrit.server.account.HashedPassword.fromPassword(newPassword)).encode()); dbProvider.get().accountExternalIds().update(java.util.Collections.singleton(id)); accountCache.evict(user.getAccountId()); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); } }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); } }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key( SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); } }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getExternalId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); } }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user. getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); } }
@org.junit.Test public void getExternalIDs() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIDs() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/externalIds"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIDs() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIDs() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/externalids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@org.junit.Test public void getExternalIDs() throwsjava.lang.Exception {java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = newjava.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest.account.ExternalIdIT.toInfo(id)); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK();java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType());java.util.Collections.sort(expectedIdInfos);java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete external IDs", e); } }
@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("cannot delete external IDs", e); } }
@java.lang.Override public void deleteExternalIds(java.util.Collection<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete external IDs", e); } }
@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.lang.Exception e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete external IDs", e); } }
@java.lang.Override public void deleteExternalIds(java.util.List<java.lang.String> externalIds) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply(account, externalIds); } catch (java.lang.Exception e) { throw com.google.gerrit.extensions.restapi.RestApiException.asRestApiException("Cannot delete external IDs", e); } }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final boolean rememberMe) { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key identity = res.getExternalId().asAccountExternalIdKey(); if ((val)!= null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
@java.lang.Override public void login(com.google.gerrit.server.account.AuthResult res, boolean rememberMe) { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key identity = res.getExternalId().asAccountExternalIdKey(); if ((val)!= null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final boolean rememberMe) { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key identity = res.getExternalId(); if ((val)!= null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, final boolean rememberMe) { com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key identity = res.getExternalId().asAccountExternalIdKey(); if ((val)!= null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
@java.lang.Override public void login(final com.google.gerrit.server.account.AuthResult res, boolean rememberMe) { final com.google.gerrit.reviewdb.client.Account.Id id = res.getAccountId(); final com.google.gerrit.reviewdb.client.AccountExternalId.Key identity = res.getExternalId().asAccountExternalIdKey(); if ((val)!= null) { manager.destroy(key); } key = manager.createKey(id); val = manager.createVal(key, id, rememberMe, identity, null, null); saveCookie(); user = identified.create(val.getAccountId()); }
privatejava.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Scanner scanner = newjava.util.Scanner(responseStream, "UTF-8").useDelimiter("\\A") ) { return scanner.next(); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(("Error reading response: [ " + (e.getMessage())) + "]."), e); } }
privatejava.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Scanner scanner = newjava.util.Scanner(responseStream, "UTF-8").useDelimiter("\\A") ) { return scanner.next(); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException((("Error reading response: [ " + (e.getMessage())) + "]."), e); } }
privatejava.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Scanner scanner = newjava.util.Scanner(responseStream, "UTF-8").useDelimiter("\\A")) { return scanner.next(); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(("Error reading response: [ " + (e.getMessage())) + "]."), e); } }
privatejava.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Scanner scanner = newjava.util.Scanner(responseStream, "UTF-8").useDelimiter("\\A") ) { return scanner.next(); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException(("Error reading response: " + (e.getMessage())) + "]."), e); } }
privatejava.lang.String readResponse(java.io.InputStream responseStream) { try (java.util.Scanner scanner = newjava.util.Scanner(responseStream, "UTF-8").useDelimiter("\\A")) { return scanner.next(); } catch (java.lang.Exception e) { throw newjava.lang.RuntimeException((("Error reading response: [ " + (e.getMessage())) + "]."), e); } }
private void addSubmitRecordRequirements(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.requirements)!= null) && (!(submitRecord.requirements.isEmpty()))) { sa.requirements = newjava.util.ArrayList(); for (com.google.gerrit.common.data.SubmitRequirement req : submitRecord.requirements) { com.google.gerrit.server.data.SubmitRequirementAttribute re = new com.google.gerrit.server.data.SubmitRequirementAttribute(); re.shortReason = req.shortReason(); re.fullReason = req.fullReason(); re.label = req.label(); sa.requirements.add(re); } } }
private void addSubmitRecordRequirements(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if ((submitRecord.requirements)!= null) { sa.requirements = newjava.util.ArrayList(); for (com.google.gerrit.common.data.SubmitRequirement req : submitRecord.requirements) { com.google.gerrit.server.data.SubmitRequirementAttribute re = new com.google.gerrit.server.data.SubmitRequirementAttribute(); re.shortReason = req.shortReason(); re.fullReason = req.fullReason(); re.label = req.label(); sa.requirements.add(re); } } }
private void addSubmitRecordRequirements(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.requires)!= null) && (!(submitRecord.requires.isEmpty()))) { sa.requirements = newjava.util.ArrayList(); for (com.google.gerrit.common.data.SubmitRequirement req : submitRecord.requirements) { com.google.gerrit.server.data.SubmitRequirementAttribute re = new com.google.gerrit.server.data.SubmitRequirementAttribute(); re.shortReason = req.shortReason(); re.fullReason = req.fullReason(); re.label = req.label(); sa.requirements.add(re); } } }
private void addSubmitRecordRequirements(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.requirements)!= null) && (!(submitRecord.requirements.isEmpty()))) { sa.requires = newjava.util.ArrayList(); for (com.google.gerrit.common.data.SubmitRequirement req : submitRecord.requirements) { com.google.gerrit.server.data.SubmitRequirementAttribute re = new com.google.gerrit.server.data.SubmitRequirementAttribute(); re.shortReason = req.shortReason(); re.fullReason = req.fullReason(); re.label = req.label(); sa.requires.add(re); } } }
private void addSubmitRecordRequirements(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.requires)!= null) && (!(submitRecord.requires.isEmpty()))) { sa.requires = newjava.util.ArrayList(); for (com.google.gerrit.common.data.SubmitRequirement req : submitRecord.requirements) { com.google.gerrit.server.data.SubmitRequirementAttribute re = new com.google.gerrit.server.data.SubmitRequirementAttribute(); re.shortReason = req.shortReason(); re.fullReason = req.fullReason(); re.label = req.label(); sa.requirements.add(re); } } }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitTypeRecord) == null) { submitTypeRecord = submitRuleEvaluatorFactory.create(com.google.gerrit.server.query.change.DEFAULT_OPTIONS).getSubmitType(); } return submitTypeRecord; }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitTypeRecord) == null) { submitTypeRecord = submitRuleEvaluatorFactory.create(); } return submitTypeRecord; }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { if ((submitTypeRecord) == null) { submitTypeRecord = submitRuleEvaluatorFactory.create().getSubmitType(this); } return submitTypeRecord; }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord() { return submitTypeRecord; }
public com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord();
private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, com.google.gerrit.server.project.SubmitRulesEvaluatorTest.ADMIN_USER)); return evaluatorFactory.create(cd); }
private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.server.project.SubmitRulesEvaluatorTest.ADMIN_USER); return evaluatorFactory.create(cd); }
private static com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, com.google.gerrit.server.project.SubmitRulesEvaluatorTest.ADMIN_USER)); return evaluatorFactory.create(cd); }
private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, com.google.gerrit.server.project.SubmitRulesEvaluatorTest.ADMIN_USER)); return evaluatorFactory.create(cd); }
private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, com.google.gerrit.server.project.SubmitRulesEvaluator.ADMIN_USER)); return evaluatorFactory.create(cd); }
@org.junit.Test public void convertsPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = makeEvaluator();java.util.List<com.googlecode.prolog_cafe.lang.Term> terms = newjava.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); terms.add(makeTerm("ok", labels));java.util.Collection<com.google.gerrit.common.data.SubmitRecord> records = evaluator.resultsToSubmitRecord(null, terms); assertThat(records).hasSize(1); }
@org.junit.Test public void convertsPrologToSubmitRecord() throwsjava.lang.Exception { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = makeEvaluator();java.util.List<com.googlecode.prolog_cafe.lang.Term> terms = newjava.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); terms.add(makeTerm("ok", labels));java.util.Collection<com.google.gerrit.common.data.SubmitRecord> records = evaluator.resultsToSubmitRecord(null, terms); assertThat(records).hasSize(1); }
@org.junit.Test public void convertsPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = makeEvaluator();java.util.List<com.googlecode.prolog_cafe.lang.Term> terms = newjava.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = new com.googlecode.prolog_cafe.lang.StructureTerm("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); terms.add(makeTerm("ok", labels));java.util.Collection<com.google.gerrit.common.data.SubmitRecord> records = evaluator.resultsToSubmitRecord(null, terms); assertThat(records).hasSize(1); }
@org.junit.Test public void convertsPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = makeEvaluator();java.util.List<com.googlecode.prolog_cafe.lang.Term> terms = newjava.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); terms.add(new com.googlecode.prolog_cafe.lang.StructureTerm("ok", labels));java.util.Collection<com.google.gerrit.common.data.SubmitRecord> records = evaluator.resultsToSubmitRecord(null, terms); assertThat(records).hasSize(1); }
@org.junit.Test public void convertsPrologToSubmitRecord() { com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = makeEvaluator();java.util.List<com.googlecode.prolog_cafe.lang.Term> terms = newjava.util.ArrayList<>(); com.googlecode.prolog_cafe.lang.StructureTerm verifiedLabel = makeLabel("Verified", "may"); com.googlecode.prolog_cafe.lang.StructureTerm labels = new com.googlecode.prolog_cafe.lang.StructureTerm("label", verifiedLabel); terms.add(makeTerm("ok", labels));java.util.Collection<com.google.gerrit.common.data.SubmitRecord> records = evaluator.resultsToSubmitRecord(null, terms); assertThat(records).hasSize(2); }
private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }
private static com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }
private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.Term(status, labels); }
private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { com.googlecode.prolog_cafe.lang.Term term = new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); return term; }
private static com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels, null); }
public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = newjava.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) {java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type!= null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }
ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = newjava.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) {java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type!= null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }
private ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = newjava.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) {java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type!= null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }
public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = newjava.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) { com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(label.label); if (((!(out.approvals.containsKey(name))) && (type!= null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue(((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }
public ReviewerInfo format(ReviewerInfo out, com.google.gerrit.server.permissions.PermissionBackend.ForChange perm, com.google.gerrit.server.query.change.ChangeData cd,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = cd.getLabelTypes(); out.approvals = newjava.util.TreeMap(labelTypes.nameComparator()); for (com.google.gerrit.reviewdb.client.PatchSetApproval ca : approvals) { com.google.gerrit.common.data.LabelType at = labelTypes.byLabel(ca.getLabelId()); if (at!= null) { out.approvals.put(at.getName(), formatValue(ca.getValue())); } } com.google.gerrit.reviewdb.client.PatchSet ps = cd.currentPatchSet(); if (ps!= null) { for (com.google.gerrit.common.data.SubmitRecord rec : submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).evaluate(cd)) { if ((rec.labels) == null) { continue; } for (com.google.gerrit.common.data.SubmitRecord.Label label : rec.labels) {java.lang.String name = label.label; com.google.gerrit.common.data.LabelType type = labelTypes.byLabel(name); if (((!(out.approvals.containsKey(name))) && (type!= null)) && (perm.test(new com.google.gerrit.server.permissions.LabelPermission(type)))) { out.approvals.put(name, formatValue((((short) (0)))); } } } } if (out.approvals.isEmpty()) { out.approvals = null; } return out; }
java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("Error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); }java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format("Submit rule '%s' for change %s of %s has no solution.", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }
java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("Error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); }java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format("Submit rule '%s' for change %s of %s has no solution.", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }
java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("No change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("Error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); }java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format("Submit rule '%s' for change %s of %s has no solution.", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }
java publicjava.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("Error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); }java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format("Submit rule '%s' for change %s of %s has no solution.", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }
java publicjava.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("Error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); }java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format("Submit rule '%s' for change %s of %s has no solution.", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }
public abstractjava.lang.String fullReason();
public abstractjava.lang.String reason();
publicjava.lang.String fullReason();
public com.google.gerrit.client.rpc.NativeString fullReason();
public abstract com.google.gerrit.client.account.AccountInfo accountInfo();
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name,java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
private static com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name,java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String label,java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(label), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name,java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name,java.lang.String status) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status)); }
public abstractjava.lang.String shortReason();
public abstractjava.lang.String reason();
publicjava.lang.String shortReason();
public abstract com.google.gerrit.client.Account.Name accountName();
public abstract com.google.gerrit.client.Account.Name accountName;
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS.builder(); }
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS; }
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return DEFAULT_OPTIONS.toBuilder(); }
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS.build(); }
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return new com.google.gerrit.server.project.SubmitRuleOptions.Builder(); }
public abstract com.google.gerrit.common.data.SubmitRequirement build();
public abstract com.google.gerrit.common.data.SubmitRequirement.Builder build();
private abstract com.google.gerrit.common.data.SubmitRequirement build();
public com.google.gerrit.common.data.SubmitRequirement build();
public abstract com.google.gerrit.common.data.SubmitRequirement.Builder builder();
@com.google.common.Nullable public abstractjava.lang.String label();
@com.google.gerrit.common.Nullable publicjava.lang.String label();
public abstractjava.lang.String label();
private abstractjava.lang.String label();
private staticjava.lang.String label();
public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setLabel(@com.google.gerrit.common.Nullablejava.lang.String label);
private abstract com.google.gerrit.common.data.SubmitRequirement.Builder setLabel(@com.google.gerrit.common.Nullablejava.lang.String label);
public abstract com.google.gerrit.common.data.SubmitRequirement.Builder getLabel(@com.google.gerrit.common.Nullablejava.lang.String label);
public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setLabel(java.lang.String label);
public abstract void setLabel(@com.google.gerrit.common.Nullablejava.lang.String label);
public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setFullReason(java.lang.String fullReason);
private abstract com.google.gerrit.common.data.SubmitRequirement.Builder setFullReason(java.lang.String fullReason);
public com.google.gerrit.common.data.SubmitRequirement.Builder setFullReason(java.lang.String fullReason);
public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setFullReason(java.lang.String reason);
public abstract void setFullReason(java.lang.String fullReason);
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).getSubmitType(cd); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).getSubmitType(cd); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS ).getSubmitType(cd); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.change.DEFAULT_OPTIONS).getSubmitType(cd); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(com.google.gerrit.server.restapi.change.DEFAULT_OPTIONS).getSubmitType(cd); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((("Submit type rule failed: " + rec)); } return rec.type; }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", labels); }
private static com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", labels); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", labels); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("labels", labels); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabels(com.googlecode.prolog_cafe.lang.StructureTerm... labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", com.googlecode.common.collect.ImmutableList.of(labels)); }
java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); } return prologRule.evaluate(cd, opts); }
java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); } return prologRule.evaluate(cd, opts); }
java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("Error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); } return prologRule.evaluate(cd, opts); }
publicjava.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("Error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); } return prologRule.evaluate(cd, opts); }
publicjava.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException("no change found"); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gwtorm.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError(("error looking up change " + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; returnjava.util.Collections.singletonList(rec); } return prologRule.evaluate(cd, opts); }
@java.lang.Override publicjava.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) { return getEvaluator(cd, opts).evaluate(); }
@java.lang.Override publicjava.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { return getEvaluator(cd, opts).evaluate(); }
@java.lang.Override publicjava.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gerrit.server.project.SubmitRuleException { return getEvaluator(cd, opts).evaluate(); }
@java.lang.Override publicjava.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gerrit.extensions.restapi.RestApiException { return getEvaluator(cd, opts).evaluate(); }
@java.lang.Override publicjava.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { return getEvaluator(cd, opts).evaluate(); }
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("no current patch set for change " + (cd.getId()))); }java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(results)) { return; } else if (results.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("SubmitRecords for change %s returned empty list for %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is closed"); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Submit rule error: " + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Invalid SubmitRecord status %s for %s in %s", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw newjava.lang.IllegalStateException(); }
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("no current patch set for change " + (cd.getId()))); }java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(results)) { return; } else if (results.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("SubmitRecords for change %s returned empty list for %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is closed"); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Submit rule error: " + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Unknown SubmitRecord status %s for %s in %s", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw newjava.lang.IllegalStateException(); }
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("no current patch set for change " + (cd.getId()))); }java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(results)) { return; } else if (results.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("SubmitRecords for change %s returned empty list for %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is closed"); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Submit rule error: " + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Invalid SubmitRecord status %s for %s in %s", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new com.google.gerrit.extensions.restapi.ResourceConflictException(); }
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("no current patch set for change " + (cd.getId()))); }java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(results)) { return; } else if (results.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("SubmitRecords for change %s returned empty list for %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is closed"); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Submit rule error: " + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Unexpected SubmitRecord status %s for %s in %s", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new com.google.gerrit.extensions.restapi.ResourceConflictException(); }
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("no current patch set for change " + (cd.getId()))); }java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(results)) { return; } else if (results.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("SubmitRecords for change %s returned empty list for %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is closed"); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Submit rule error: " + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Unknown SubmitRecord status %s for %s in %s", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new com.google.gerrit.extensions.restapi.ResourceConflictException(); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canBeSubmitted(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.isSubmitted(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.canBeSubmitted((cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return (cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if ((in == null) || (in.isEmpty())) { return true; } if ((in.stream().filter(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.OK))).isEmpty()) { return false; } return in.stream().filter(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.NOT_READY))); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if ((in == null) || (in.isEmpty())) { return true; } if ((in.stream().filter(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.OK))).isEmpty()) { return false; } return in.stream().filter(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.NOT_READY) ); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if (((in == null) || (in.isEmpty())) || (in.stream().isEmpty())) { return false; } return in.stream().filter(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.OK)) || (in.stream().filter(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.NOT_READY))); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { if (((in == null) || (in.isEmpty())) || (in.stream().isEmpty())) { return false; } return in.stream().filter(( r) -> (r.status) == (com.google.gerrit.common.data.SubmitRecord.Status.OK))); }
public static boolean canBeSubmitted(java.util.List<com.google.gerrit.common.data.SubmitRecord> in) { return (in == null) || (in.isEmpty()); }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((("Submit type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); if ((rec.status)!= (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("submission type rule failed: " + rec)); } return rec.type; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = submitRuleEvaluatorFactory.create(cd).getSubmitType(); return rec.type; }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name,java.lang.String status, com.google.gerrit.reviewdb.client.Account.Id account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String label,java.lang.String status, com.google.gerrit.reviewdb.client.Account.Id account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(label), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name,java.lang.String status, com.google.gerrit.reviewdb.client.Account.Id account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user))); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name,java.lang.String status, com.google.gerrit.reviewdb.client.Account.Id account) { return new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.get())); }
private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name,java.lang.String status, com.google.gerrit.reviewdb.client.Account.Id account) { return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, account)); }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.labels = newjava.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } return rec; }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.labels = newjava.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label.Builder srb = com.google.gerrit.common.data.SubmitRecord.Label.builder(); srb.label = label.label; srb.status = label.status; if ((label.appliedBy)!= null) { srb.appliedBy = new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy); } rec.labels.add(srb.build()); } } return rec; }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.labels = newjava.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label.Builder srb = com.google.gerrit.common.data.SubmitRecord.Label.builder(); srb.setFullReason(label.fullReason); srb.setShortReason(label.shortReason); if ((label.appliedBy)!= null) { srb.setLabel(label.appliedBy); } rec.labels.add(srb.build()); } } return rec; }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { return new com.google.gerrit.common.data.SubmitRecord(); }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { return new com.google.gerrit.common.data.SubmitRecord(); } }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); factory(PrologRuleEvaluator.Factory.class); }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); bind(PrologRuleEvaluator.Factory.class); }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(com.google.gerrit.server.rules.PrologRuleEvaluator.Factory.class); }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); bind(com.google.gerrit.server.rules.RuleEvaluator.Factory.class); }
public boolean isIgnorePrivate() { return ignorePrivate; }
public boolean getIgnoreWipPrivate() { return ignoreWipPrivate; }
public boolean getIgnorePrivate() { return ignorePrivate; }
public boolean isIgnoreWorkInProgress() { return ignoreWorkInProgress; }
public com.google.gerrit.client.git.ProjectConfig getProjectConfig();
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throwsjava.lang.Exception { return getConfig(publishOnReviewerAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throwsjava.lang.Exception { return getConfig(publishOnReviewerAdded, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throwsjava.lang.Exception { return getConfig(PublishOnReviewerAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) throwsjava.lang.Exception { return getConfig("publishOnReviewerAdded", true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnReviewerAdded) { return getConfig(publishOnReviewerAdded, true); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
public com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn(ignore); when(mockPluginConfig.getBoolean("publish-on-patch-set-created", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean("ignore-rebase-empty-patch-set", true)).thenReturn(ignoreRebaseEmptyPatchSet); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); } }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-reviewer-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-reviewer-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(booleanpublishOnReviewerAdded, boolean ignoreWipPrivate) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-reviewer-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-reviewer-added", true)).thenReturn(publishOnReviewerAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGeneratorTest.PROJECT_NAME); } }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig();
@org.junit.Test public void publishesWhenPrivate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isTrue(); }
@org.junit.Test public void publishesWhenPrivate() throwsjava.lang.Exception { mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenPrivate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.wip = false; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenPrivate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenPrivate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; mockChange.wip = false; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isTrue(); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throwsjava.lang.Exception { return getConfig(ignore, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throwsjava.lang.Exception { return getConfig(ignore, true, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throwsjava.lang.Exception { return getConfig(ignore, true, true, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throwsjava.lang.Exception { return getConfig(ignore, true, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore) throwsjava.lang.Exception { return getConfig(ignore, false, true); }
@org.junit.Test public void publishesWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; mockChange.isWorkInProgress = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getProjectConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishFailsWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(true, false, false); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isEqualTo(true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throwsjava.lang.Exception { return getConfig("^WIP.*", true, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throwsjava.lang.Exception { return getConfig("^WIP.*", true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() { return getConfig("^WIP.*", true, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throwsjava.lang.Exception { return getConfig("^WIP.*", true, true, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throwsjava.lang.Exception { return getConfig("^WIP.*", false, true, true); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isTrue(); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; assertThat(messageGenerator.shouldPublish(), is(true)); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled()) || (!(config.shouldPublishOnReviewerAdded())))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled()) || (!(config.shouldPublishOnReviewerAdded()))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled()) || (!(config.shouldPublishOnReviewerAdded())))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled()) || (! (config.shouldPublishOnReviewerAdded())))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if (!(config.isEnabled())) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.ReviewerAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@org.junit.Test public void doesPublishWhenPrivate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void shouldPublishWhenPrivate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenPrivate() throwsjava.lang.Exception { mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenPrivate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenPrivate() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } boolean result; result = true; try {java.util.regex.Pattern pattern; pattern =java.util.regex.Pattern.compile(config.getIgnore(),java.util.regex.Pattern.DOTALL);java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return result; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } return true; }
java @java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPatchSetCreated()))) { return false; } try { com.google.gerrit.server.data.PatchSetAttribute patchSet; patchSet = event.patchSet.get(); if ((config.getIgnoreRebaseEmptyPatchSet()) && (((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE)) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE))) || ((patchSet.kind) == (com.google.gerrit.extensions.client.ChangeKind.NO_CHANGE)))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking patch set kind", e); } boolean result; result = false; try {java.util.regex.Pattern pattern; pattern =java.util.regex.Pattern.compile(config.getIgnore(),java.util.regex.Pattern.DOTALL);java.util.regex.Matcher matcher; matcher = pattern.matcher(event.change.get().commitMessage); result =!(matcher.matches()); } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return result; }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish()).isTrue(); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = false; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void publishesWhenExpected() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; assertThat(messageGenerator.shouldPublish(), is(true)); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled()) || (!(config.shouldPublishOnCommentAdded())))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled()) || (! (config.shouldPublishOnCommentAdded())))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled()) || (!(config.shouldPublishOnCommentAdded()))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled()) || (!(config.shouldPublishOnCommentAdded())))) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
@java.lang.Override public boolean shouldPublish() { if (!(config.isEnabled())) { return false; } try { if ((config.getIgnoreWipPrivate()) && ((event.change.get().isPrivate) || (event.change.get().wip))) { return false; } } catch (java.lang.Exception e) { com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGenerator.LOGGER.warn("Error checking private and work-in-progress status", e); } return true; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throwsjava.lang.Exception { return getConfig(publishOnCommentAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throwsjava.lang.Exception { return getConfig(publishOnCommentAdded, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throwsjava.lang.Exception { return getConfig(PublishOnCommentAdded, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throwsjava.lang.Exception { return getConfig("publishOnCommentAdded", true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) { return getConfig(publishOnCommentAdded, true); }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnWipReady()))) { return false; } if (event.change.get().wip) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnWipReady()))) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnWipReady()))) { return false; } if (event.change.get().wip) { return true; } return false; }
@java.lang.Override public boolean shouldPublish() { if (!(config.isEnabled())) { return false; } if (event.change.get().wip) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if (event.change.get().wip) { return false; } return true; }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(booleanpublishOnCommentAdded, boolean ignoreWipPrivate) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-comment-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-comment-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(booleanpublishOnCommentAdded, boolean ignoreWipPrivate) throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-comment-added", true)).thenReturn(publishPublishOnCommentAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-comment-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); } }
com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig();
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivateToPublic()))) { return false; } if (event.change.get().isPrivate) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivateToPublic()))) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if (!(config.isEnabled())) { return false; } if (event.change.get().isPrivate) { return false; } return true; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivateToPublic()))) { return false; } if (event.change.get().isPrivate) { return true; } return false; }
@java.lang.Override public boolean shouldPublish() { if ((!(config.isEnabled())) || (!(config.shouldPublishOnPrivateToPublic()))) { return false; } if (event.change.get().isPrivate()) { return false; } return true; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, ignoreWipPrivate); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, ignoreWipPrivate); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, ignoreWipPrivate ); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet, boolean ignoreWipPrivate) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, true, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, true, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getProjectConfig(boolean publishOnPatchSetCreated) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, true); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.workInProgress = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throwsjava.lang.Exception { mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
@org.junit.Test public void doesPublishWhenWorkInProgress() throwsjava.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockChange.wip = true; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, true); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, false); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, null); }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throwsjava.lang.Exception { return getConfig("^WIP.*", publishOnPatchSetCreated, ignoreRebaseEmptyPatchSet, true ); }
public static void useFixedClockAt(java.time.Instant instant) { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.fixed(instant,java.time.ZoneId.systemDefault()); }
public static void useFixedClockAt(java.time.Instant instant) { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.fixed(Instant,java.time.ZoneId.systemDefault()); }
private static void useFixedClockAt(java.time.Instant instant) { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.fixed(instant,java.time.ZoneId.systemDefault()); }
public static void setUseFixedClockAt(java.time.Instant instant) { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.fixed(instant,java.time.ZoneId.systemDefault()); }
public static void useFixedClockAt(java.time.Instant instant) { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.fixed(instant,java.time.ZoneId.systemDefault()); com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.timeZone =java.time.ZoneId.systemDefault(); }
public static void useSystemDefaultZoneClock() { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.systemDefaultZone(); }
private static void useSystemDefaultZoneClock() { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.systemDefaultZone(); }
public static void setUseSystemDefaultZoneClock() { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.systemDefaultZone(); }
public void useSystemDefaultZoneClock() { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock =java.time.Clock.systemDefaultZone(); }
public static void useSystemDefaultZoneClock() { com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock = com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.clock(); }
public staticjava.time.Instant now() { returnjava.time.Instant.now(com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.getClock()); }
public staticjava.time.Instant now() { return com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.getClock(); }
public staticjava.time.Instant now() { return newjava.time.Instant(com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.getClock()); }
private staticjava.time.Instant now() { returnjava.time.Instant.now(com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.getClock()); }
public staticjava.time.Instant now() { return com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionCache.TimeMachine.getClock().now(); }
java @java.lang.Override public void run() throwsjava.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) {java.lang.String name = index.string("Name", "name", "gerrit"); com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get("elasticsearch", name); elasticsearch.select("protocol", "protocol", "http", com.google.common.collect.Sets.newHashSet("http", "https")); elasticsearch.string("Hostname", "hostname", "localhost"); elasticsearch.string("Port", "port", "9200"); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); }java.lang.String message =java.lang.String.format(("The index must be %sbuilt before starting Gerrit:\n" + " -jar gerrit.war reindex -d site_path (site.isNew? "" : "re")); ui.message(message); initFlags.autoStart = false; } }
java @java.lang.Override public void run() throwsjava.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) {java.lang.String name = index.string("Name", "name", "gerrit"); com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get("elasticsearch", name); elasticsearch.select("protocol", "protocol", "http", com.google.common.collect.Sets.newHashSet("http", "https")); elasticsearch.string("Hostname", "hostname", "localhost"); elasticsearch.string("Port", "port", "9200"); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); }java.lang.String message =java.lang.String.format(("The index must be %sbuilt before starting Gerrit: " + "gerrit.war reindex -d site_path (site.isNew? "" : "re")); ui.message(message); initFlags.autoStart = false; } }
java @java.lang.Override public void run() throwsjava.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) {java.lang.String name = index.string("Name", "name", "gerrit"); com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get("elasticsearch", name); elasticsearch.select("protocol", "protocol", "http", com.google.common.collect.Sets.newHashSet("http", "https")); elasticsearch.string("Hostname", "hostname", "localhost"); elasticsearch.string("Port", "port", "9200"); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); }java.lang.String message =java.lang.String.format(("The index must be %sbuilt before starting Gerrit:\n" + "gerrit.war reindex -d site_path (site.isNew? "" : "re")); ui.message(message); initFlags.autoStart = false; } }
java @java.lang.Override public void run() throwsjava.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) {java.lang.String name = index.string("Name", "name", "gerrit"); com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get("elasticsearch", name); elasticsearch.select("protocol", "protocol", "http", com.google.common.collect.Sets.newHashSet("http", "https")); elasticsearch.string("Hostname", "hostname", "localhost"); elasticsearch.string("Port", "port", "9200"); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); }java.lang.String message =java.lang.String.format(("The index must be %sbuilt before starting Gerrit: %s\n" + " -jar gerrit.war reindex -d site_path (site.isNew? "" : "re")); ui.message(message); initFlags.autoStart = false; } }
java @java.lang.Override public void run() throwsjava.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header("Index"); type = index.select("Type", "type", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) {java.lang.String name = index.string("Name", "name", "gerrit"); com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get("elasticsearch", name); elasticsearch.select("protocol", "protocol", "http", com.google.common.collect.Sets.newHashSet("http", "https")); elasticsearch.string("Hostname", "hostname", "localhost"); elasticsearch.string("Port", "port", "9200"); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header("Index"); }java.lang.String message =java.lang.String.format(("The index must be %sbuilt before starting Gerrit:\n" + " -jar gerrit.war reindex -d site_path \"%s\"", (site.isNew? "" : "re")); ui.message(message); initFlags.autoStart = false; } }
protected static void setContentAndEncoding(java x.servlet.http.HttpServletResponse rsp) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
protected static void setContentAndEncoding(java x.servlet.http.HttpServletResponse rsp) throwsjava.io.IOException { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
protected void setContentAndEncoding(java x.servlet.http.HttpServletResponse rsp) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
private static void setContentAndEncoding(java x.servlet.http.HttpServletResponse rsp) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); }
protected static void setContentAndEncoding(java x.servlet.http.HttpServletResponse rsp) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8); }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logger.debug("Index {} {}", operation, indexName, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); logger.error("Failed to update {} index", indexName, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Error trying to find %s", indexName); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logger.debug("Index {} {}", operation, indexName, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); logger.error("Unable to update {} index", indexName, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Error trying to find %s", indexName); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logger.debug("index {} {}", operation, indexName, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); logger.error("failed to update {} index", indexName, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("error trying to find %s", indexName); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logger.debug("Index {} {}", operation, indexName, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); logger.error("Failed to update {} index", indexName, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Failed trying to find %s", indexName); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
void process(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name());java.lang.String path = req.getPathInfo(); T id = parse(path.substring(((path.lastIndexOf('/')) + 1))); logger.debug("Index {} {}", operation, indexName, id); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true);java.util.concurrent.locks.Lock idLock = idLocks.get(id); idLock.lock(); try { index(id, operation); } finally { idLock.unlock(); } rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); logger.error("Failed to update {} index", indexName, e); } catch (com.google.gwtorm.server.OrmException e) {java.lang.String msg =java.lang.String.format("Error trying to find %s", indexName); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try {java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo());java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX);java.lang.String json = req.getReader().readLine(); forwardedCacheEvictionHandler.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.CacheEntry.from(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e) { logger.error("Failed to process eviction request: {}", e.getMessage()); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { logger.error("Failed to process eviction request: {}", e.getMessage(), e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try {java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo());java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX);java.lang.String json = req.getReader().readLine(); forwardedCacheEvictionHandler.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.CacheEntry.from(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e) { logger.error("Failed to process eviction request: {}", e.getMessage()); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { logger.error("Failed to process eviction request: {}", e.getMessage(), e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try {java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo());java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX);java.lang.String json = req.getReader().readLine(); forwardedCacheEvictionHandler.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.CacheEntry.from(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e) { logger.error(("Failed to process eviction request: {}", e.getMessage()); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { logger.error(("Failed to process eviction request: {}", e.getMessage(), e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try {java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo());java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX);java.lang.String json = req.getReader().readLine(); forwardedCacheEvictionHandler.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.CacheEntry.from(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e) { logger.error(("Failed to process eviction request: {}", e.getMessage()); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { logger.error(("Failed to process eviction request: {}", e.getMessage(), e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try {java.util.List<java.lang.String> params = com.google.common.base.Splitter.on('/').splitToList(req.getPathInfo());java.lang.String cacheName = params.get(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.CACHENAME_INDEX);java.lang.String json = req.getReader().readLine(); forwardedCacheEvictionHandler.evict(com.ericsson.gerrit.plugins.highavailability.forwarder.CacheEntry.from(cacheName, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.GsonParser.fromJson(cacheName, json))); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e) { logger.error("Failed to process eviction request: {}", e.getMessage(), e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } catch (java.io.IOException e) { logger.error("Failed to process eviction request: {}", e.getMessage(), e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { try { if (!(com.google.common.net.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UNSUPPORTED_MEDIA_TYPE, (( + (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8.toString())) + " content type")); return; } forwardedEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { logger.debug("Error trying to find a change", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, "change not found"); } catch (java.io.IOException e) { logger.error("Error trying to re-trigger event", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.google.common.net.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UNSUPPORTED_MEDIA_TYPE, (("Unsupported " + (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8.toString())) + " content type")); return; } forwardedEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { logger.debug("Error trying to find a change", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, "change not found"); } catch (java.io.IOException e) { logger.error("Error trying to re-trigger event", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.google.common.net.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UNSUPPORTED_MEDIA_TYPE, (( + (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8.toString())) + " content type")); return; } forwardedEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { logger.debug("Error trying to find a change", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, "change not found"); } catch (java.io.IOException e) { logger.error("Error trying to re-trigger event", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.google.common.net.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UNSUPPORTED_MEDIA_TYPE, ((("Unsupported " + (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8.toString())) + " content type")); return; } forwardedEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { logger.debug("Error trying to find a change", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, "change not found"); } catch (java.io.IOException e) { logger.error("Error trying to re-trigger event", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@java.lang.Override protected void doPost(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse rsp) { setContentAndEncoding(rsp); try { if (!(com.google.common.net.MediaType.parse(req.getContentType()).is(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8))) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_UNSUPPORTED_MEDIA_TYPE, (("Unsupported " + (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.JSON_UTF_8.toString())) + " content type")); return; } forwardedEventHandler.dispatch(getEventFromRequest(req)); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (com.google.gwtorm.server.OrmException e) { logger.debug("Error trying to find a change", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, "change not found"); } catch (java.io.IOException e) { logger.error("Failed to re-trigger event", e); sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_BAD_REQUEST, e.getMessage()); } }
@org.junit.Test public void indexingUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexingUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail)).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexingUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).hasSize(1); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexingUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).hasSize(1); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail).getAccount().getId()).isEqualTo(accountId); }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.InternalAccountUpdate acountUpdate) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo).load(); accountConfig.setAccountUpdate(acountUpdate); accountConfig.commit(md); } }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.InternalAccountUpdate acountUpdate) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo); accountConfig.setAccountUpdate(acountUpdate); accountConfig.commit(md); } }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.InternalAccountUpdate acountUpdate) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitRefUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo).load(); accountConfig.setAccountUpdate(acountUpdate); accountConfig.commit(md); } }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.InternalAccountUpdate acountUpdate) throwsjava.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo).load(); accountConfig.setAccountUpdate(acountUpdate); accountConfig.commit(); } }
private void updateAccountWithoutCacheOrIndex(com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.InternalAccountUpdate acountUpdate) { try (org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, allUsersRepo)) { org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get(); md.getCommitBuilder().setAuthor(ident); md.getCommitBuilder().setCommitter(ident); com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig(accountId, allUsersRepo).load(); accountConfig.setAccountUpdate(acountUpdate); accountConfig.commit(md); } }
@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }
@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }
@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null)).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }
@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null, null)).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }
@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null, null ).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }
@org.junit.Test public void accountEvictionIfUserBranchIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); org.eclipse.jgit.lib.Ref userBranch = createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); org.eclipse.jgit.lib.Ref nonUserBranch = createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { updateRef(nonUserBranch); updateRef(allUsersRepo, userBranch); } org.easymock.EasyMock.verify(); }
@org.junit.Test public void accountEvictionIfUserBranchIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); org.eclipse.jgit.lib.Ref userBranch = createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); org.eclipse.jgit.lib.Ref nonUserBranch = createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { updateRef(nonUserBranch); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); org.eclipse.jgit.lib.Ref userBranch = createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); org.eclipse.jgit.lib.Ref nonUserBranch = createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { updateRef(nonUserBranch, userBranch); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); org.eclipse.jgit.lib.Ref userBranch = createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); org.eclipse.jgit.lib.Ref nonUserBranch = createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { updateRef(nonUserBranch); updateRef(allUsersRepo, userBranch); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); org.eclipse.jgit.lib.Ref userBranch = createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { updateRef(nonUserBranch); updateRef(allUsersRepo, userBranch); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { createRef("refs/heads/master"); createRef(repo2, RefNames.REFS_CONFIG); } org.easymock.EasyMock.verify(projectCache); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, null, projectCache).reset(project).reset(project2).build()) { createRef("refs/heads/master"); createRef(repo2, RefNames.REFS_CONFIG); } org.easymock.EasyMock.verify(projectCache); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { createRef("refs/heads/master"); } org.easymock.EasyMock.verify(projectCache); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(project2); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { createRef("refs/heads/master"); createRef(repo2, RefNames.REFS_CONFIG); } org.easymock.EasyMock.verify(projectCache); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { createRef("refs/heads/master"); createRef(repo2, RefNames.REFS_CONFIG); } org.easymock.EasyMock.verify(projectCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }
@org.junit.Test public void reindexingStaleAccountUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindexIfStale(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void reindexingStaleAccountUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail)).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindexIfStale(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void reindexingStaleAccountsUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindexIfStale(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void reindexingStaleAccountUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindexIfStale(accountId); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).hasSize(1); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void reindexingStaleAccountUpdatesTheIndex() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo");java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.reindexIfStale(accountId); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).hasSize(1); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail).getAccount().getId()).isEqualTo(accountId); }
public com.google.gerrit.acceptance.ProjectResetter build() { return new com.google.gerrit.acceptance.ProjectResetter(repoManager, allUsersName, accountCreator, accountCache, accountIndexer, projectCache, refsByProject); }
public com.google.gerrit.acceptance.ProjectResetter build() throwsjava.io.IOException { return new com.google.gerrit.acceptance.ProjectResetter(repoManager, allUsersName, accountCreator, accountCache, accountIndexer, projectCache); }
public com.google.gerrit.acceptance.ProjectResetter build() throwsjava.io.IOException { return new com.google.gerrit.acceptance.ProjectResetter(repoManager, accountCreator, accountCache, accountIndexer, projectCache, refsByProject); }
public com.google.gerrit.acceptance.ProjectResetter build() throwsjava.io.IOException { return new com.google.gerrit.acceptance.ProjectResetter(repoManager, allUsersName, accountCreator, accountCache, projectCache, refsByProject); }
public com.google.gerrit.acceptance.ProjectResetter build();
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); org.eclipse.jgit.lib.Ref nonMetaConfig = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { updateRef(nonMetaConfig); updateRef(repo2, metaConfig); } org.easymock.EasyMock.verify(projectCache); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); org.eclipse.jgit.lib.Ref nonMetaConfig = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { updateRef(nonMetaConfig); } org.easymock.EasyMock.verify(projectCache); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsNotReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); org.eclipse.jgit.lib.Ref nonMetaConfig = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { updateRef(nonMetaConfig); updateRef(repo2, metaConfig); } org.easymock.EasyMock.verify(projectCache); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); org.eclipse.jgit.lib.Ref nonMetaConfig = createRef("refs/heads/master"); com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build(); updateRef(nonMetaConfig); updateRef(repo2, metaConfig); }
@org.junit.Test public void projectEvictionIfRefsMetaConfigIsReset() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project2 = new com.google.gerrit.reviewdb.client.Project.NameKey("bar"); org.eclipse.jgit.lib.Repository repo2 = repoManager.createRepository(project2); org.eclipse.jgit.lib.Ref metaConfig = createRef(repo2, RefNames.REFS_CONFIG); com.google.gerrit.server.project.ProjectCache projectCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.project.ProjectCache.class); projectCache.evict(project2); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(projectCache); org.eclipse.jgit.lib.Ref nonMetaConfig = createRef("refs/heads/master"); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, null, projectCache).reset(project).reset(project2).build()) { updateRef(nonMetaConfig); updateRef(repo2, metaConfig); org.easymock.EasyMock.verify(projectCache); } }
@org.junit.Test public void indexCannotBeCorruptedByStaleCache() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId);java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexCannotBeCorruptedByStaleCache() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId);java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail)).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Ignore @org.junit.Test public void indexCannotBeCorruptedByStaleCache() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId);java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId);java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexCannotBeCorruptedByStaleCache() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId);java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).hasSize(1); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).get(0).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void indexCannotBeCorruptedByStaleCache() throwsjava.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount("foo"); loadAccountToCache(accountId);java.lang.String preferredEmail = "foo@example.com"; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).hasSize(1); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail).getAccount().getId()).isEqualTo(accountId); }
@org.junit.Test public void missingPatchSetCommitOmitsCommentsOnParentSide() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, 1, "published comment", null, Side.PARENT); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id.get()).comments().values().stream().flatMap(java.util.List::stream).findFirst().get(); com.google.gerrit.reviewdb.server.ReviewDb db = getUnwrappedDb(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeef")); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); assert_().fail("Expected PatchListNotAvailableException"); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndCheckChange(id, com.google.common.collect.ImmutableList.of((((((((((((("PatchLineComment.Key sets differ: [" + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (draftInfo.id)) + ", ") + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (commentInfo.id)) + "] only in A; [] only in B"))); }
@org.junit.Test public void missingPatchSetCommitOmitsCommentsOnParentSide() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, 1, "published comment", null, Side.PARENT); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id.get()).comments().values().stream().flatMap(java.util.List::stream).findFirst().get(); com.google.gerrit.reviewdb.server.ReviewDb db = getUnwrappedDb(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeef")); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); assert_().fail("Expected PatchListNotAvailableException"); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndCheckChange(id, com.google.common.collect.ImmutableList.of((((((((((("PatchLineComment.Key sets differ: [" + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (draftInfo.id)) + ", ") + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (commentInfo.id)) + "] only in A; [] only in B"))); }
@org.junit.Test public void missingPatchSetCommitOmitsCommentsOnParentSide() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, 1, "published comment", null, Side.PARENT); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id.get()).comments().values().stream().flatMap(java.util.List::stream).findFirst().get(); com.google.gerrit.reviewdb.server.ReviewDb db = getUnwrappedDb(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeef")); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); assert_().fail("Expected PatchListNotAvailableException"); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndCheckChange(id, com.google.common.collect.ImmutableList.of((((((((((((("PatchLineComment.Key sets differ: ["" + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (draftInfo.id)) + ", ") + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (commentInfo.id)) + "] only in A; [] only in B"))); }
@org.junit.Test public void missingPatchSetCommitOmitsCommentsOnParentSide() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, 1, "published comment", null, Side.PARENT); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id.get()).comments().values().stream().flatMap(java.util.List::stream).findFirst().get(); com.google.gerrit.reviewdb.server.ReviewDb db = getUnwrappedDb(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeef")); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); assert_().fail("Expected PatchListNotAvailableException"); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndCheckChange(id, com.google.common.collect.ImmutableList.of((((((((((((("PatchLineComment.Key sets differ: [" + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (draftInfo.id)) + ", ") + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (commentInfo.id)) + ",] only in A; [] only in B"))); }
@org.junit.Test public void missingPatchSetCommitOmitsCommentsOnParentSide() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); com.google.gerrit.extensions.common.CommentInfo draftInfo = putDraft(user, id, 1, "draft comment", null, Side.PARENT); putComment(user, id, 1, "published comment", null, Side.PARENT); com.google.gerrit.extensions.common.CommentInfo commentInfo = gApi.changes().id(id.get()).comments().values().stream().flatMap(java.util.List::stream).findFirst().get(); com.google.gerrit.reviewdb.server.ReviewDb db = getUnwrappedDb(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, 1)); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeef")); db.patchSets().update(java.util.Collections.singleton(ps)); try { patchListCache.getOldId(db.changes().get(id), ps, null); assert_().fail("Expected PatchListNotAvailableException"); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { } checker.rebuildAndCheckChange(id, com.google.common.collect.ImmutableList.of((((((((((((("PatchLineComment.Key sets differ: ["" + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (draftInfo.id)) + ", ") + id) + ",1,") + (com.google.gerrit.acceptance.PushOneCommit.FILE_NAME)) + ",") + (commentInfo.id)) + "] only in A; [] only in B))); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> expectedDiff) throwsjava.lang.Exception { ImmutableListMultimap.Builder<com.google.gerrit.reviewdb.client.Change.Id,java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(java.util.stream.Stream.of(changeId), b.build()); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> expectedDiff) throwsjava.lang.Exception {java.util.ListMultimap.Builder<com.google.gerrit.reviewdb.client.Change.Id,java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(java.util.stream.Stream.of(changeId), b.build()); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> expectedDiff) throwsjava.lang.Exception { ImmutableListMultimap.Builder<com.google.gerrit.reviewdb.client.Change.Id,java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(b.build()); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> expectedDiff) throwsjava.lang.Exception { com.google.common.collect.ImmutableListMultimap.Builder<com.google.gerrit.reviewdb.client.Change.Id,java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(b.build()); }
public void rebuildAndCheckChange(com.google.gerrit.reviewdb.client.Change.Id changeId,java.util.List<java.lang.String> expectedDiff) throwsjava.lang.Exception { ImmutableListMultimap.Builder<com.google.gerrit.reviewdb.client.Change.Id,java.lang.String> b = com.google.common.collect.ImmutableListMultimap.builder(); b.putAll(changeId, expectedDiff); rebuildAndCheckChanges(com.google.common.collect.ImmutableListMultimap.of(changeId), b.build()); }
@org.junit.Test public void deleteItems() throwsjava.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(0, new com.google.gerrit.extensions.client.MenuItem("Draft else", ((com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(0)))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.size()); i++) { prefs.my.add(new com.google.gerrit.extensions.client.MenuItem("Draft entry " + i), com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(i))); } gApi.accounts().id(accountId.get()).setPreferences(prefs);java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft else").addAll(defaultNames).add("Draft entry 0 ").add("Draft entry 1").add("Draft entry 2").add("Draft entry 3").asList(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(oldNames).inOrder(); schema160.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); accountCache.evict(accountId); testEnv.setApiUser(accountId); assertThat(metaRef(accountId)).isNotEqualTo(oldMetaId);java.util.List<java.lang.String> newNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft entry 0"); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(newNames).inOrder(); }
@org.junit.Test public void deleteItems() throwsjava.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(0, new com.google.gerrit.extensions.client.MenuItem("Draft else", ((com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(0)))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.size()); i++) { prefs.my.add(new com.google.gerrit.extensions.client.MenuItem("Draft entry " + i), com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(i))); } gApi.accounts().id(accountId.get()).setPreferences(prefs);java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft else").addAll(defaultNames).add("Draft entry 0 ").add("Draft entry 1").add("Draft entry 2").add("Draft entry 3").asList(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(oldNames).inOrder(); schema160.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); accountCache.evict(accountId); testEnv.setApiUser(accountId); assertThat(metaRef(accountId)).isNotEqualTo(oldMetaId);java.util.List<java.lang.String> newNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft entry 0"); assertThat(myMenusFromNoteDb(accountId)).containsExactlyElementsIn(newNames).inOrder(); }
@org.junit.Test public void deleteItems() throwsjava.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(0, new com.google.gerrit.extensions.client.MenuItem("Change else", ((com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(0)))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.size()); i++) { prefs.my.add(new com.google.gerrit.extensions.client.MenuItem("Change entry " + i), com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(i))); } gApi.accounts().id(accountId.get()).setPreferences(prefs);java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Change else").addAll(defaultNames).add("Draft entry 0 ").add("Draft entry 1").add("Draft entry 2").add("Draft entry 3").asList(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(oldNames).inOrder(); schema160.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); accountCache.evict(accountId); testEnv.setApiUser(accountId); assertThat(metaRef(accountId)).isNotEqualTo(oldMetaId);java.util.List<java.lang.String> newNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Change else").addAll(defaultNames).asList("Draft entry 0"); assertThat(myMenusFromNoteDb(accountId)).containsExactlyElementsIn(newNames).inOrder(); }
@org.junit.Test public void deleteItems() throwsjava.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(0, new com.google.gerrit.extensions.client.MenuItem("Change else", ((com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(0)))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.size()); i++) { prefs.my.add(new com.google.gerrit.extensions.client.MenuItem("Change entry " + i), com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(i))); } gApi.accounts().id(accountId.get()).setPreferences(prefs);java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Change else").addAll(defaultNames).add("Draft entry 0 ").add("Draft entry 1").add("Draft entry 2").add("Draft entry 3").asList(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(oldNames).inOrder(); schema160.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); accountCache.evict(accountId); testEnv.setApiUser(accountId); assertThat(metaRef(accountId)).isNotEqualTo(oldMetaId);java.util.List<java.lang.String> newNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Change else").addAll(defaultNames).asList("Draft entry 0 ").asList("Draft entry 1"); assertThat(myMenusFromNoteDb(accountId)).containsExactlyElementsIn(newNames).inOrder(); }
@org.junit.Test public void deleteItems() throwsjava.lang.Exception { org.eclipse.jgit.lib.ObjectId oldMetaId = metaRef(accountId); com.google.common.collect.ImmutableSet<java.lang.String> defaultNames = myMenusFromApi(accountId); GeneralPreferencesInfo prefs = gApi.accounts().id(accountId.get()).getPreferences(); prefs.my.add(0, new com.google.gerrit.extensions.client.MenuItem("Draft else", ((com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(0)))); for (int i = 0; i < (com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.size()); i++) { prefs.my.add(new com.google.gerrit.extensions.client.MenuItem("Draft entry " + i), com.google.gerrit.server.schema.Schema_160.DEFAULT_DRAFT_ITEMS.get(i))); } gApi.accounts().id(accountId.get()).setPreferences(prefs);java.util.List<java.lang.String> oldNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft else").addAll(defaultNames).add("Draft entry 0 ").add("Draft entry 1").add("Draft entry 2").add("Draft entry 3").asList(); assertThat(myMenusFromApi(accountId)).containsExactlyElementsIn(oldNames).inOrder(); schema160.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); accountCache.evict(accountId); testEnv.setApiUser(accountId); assertThat(metaRef(accountId)).isNotEqualTo(oldMetaId);java.util.List<java.lang.String> newNames = com.google.common.collect.ImmutableList.<java.lang.String>builder().add("Draft entry 0 ").add("Draft entry 1").add("Draft entry 2").add("Draft entry 3").asList(); }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r, e); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}", changeNumber, p, r, e); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}", changeNumber, p, r); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}", changeNumber, p, r, e); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}", changeNumber, p, r); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r, e); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r, e); } }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers,java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account!= null) && (account.isActive())) { if ((uploader == null) || ((uploader._accountId)!= (account.getId().get()))) { reviewers.add(account.getId()); } return true; } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error("For the change {} of project {}: failed to resolve account {}.", changeNumber, p, r, e); return true; } return false; }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers,java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account!= null) && (account.isActive())) { if ((uploader == null) || ((uploader._accountId)!= (account.getId().get()))) { reviewers.add(account.getId()); } return true; } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error("For the change {} of project {}: failed to resolve account {}", changeNumber, p, r, e); return true; } return false; }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> reviewers,java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account!= null) && (account.isActive())) { if ((uploader == null) || ((uploader._accountId)!= (account.getId().get()))) { reviewers.add(account.getId()); } return true; } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error("For the change {} of project {}: failed to resolve account {}.", changeNumber, p, r, e); return true; } return false; }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers,java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account!= null) && (account.isActive())) { if ((uploader == null) || ((uploader._accountId)!= (account.getId().get()))) { reviewers.add(account.getId()); } return true; } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error(("For the change {} of project {}: failed to resolve account {}.", changeNumber, p, r, e); return true; } return false; }
private boolean resolveAccount(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers,java.lang.String r) { try { com.google.gerrit.reviewdb.client.Account account = accountResolver.find(reviewDb, r); if ((account!= null) && (account.isActive())) { if ((uploader == null) || ((uploader._accountId)!= (account.getId().get()))) { reviewers.add(account.getId()); } return true; } return false; } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.error("For the change {} of project {}: failed to resolve account {}.", changeNumber, p, r, e); return true; } }
javajava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, changeNumber, uploader, reviewers, r)) { continue; } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (groupMembers!= null) { resolveGroup(p, changeNumber, reviewers, groupMembers, r); } else { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("The change {} of project {}: failed to list accounts for group {}; cannot retrieve uploader account for {}.", changeNumber, p, r, uploader.email); } } return reviewers; }
javajava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, changeNumber, uploader, reviewers, r)) { continue; } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (groupMembers!= null) { resolveGroup(p, changeNumber, reviewers, groupMembers, r); } else { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("The change {} of project {}: failed to list accounts for group {}; cannot retrieve uploader account for {}.", changeNumber, p, r, uploader.email); } } return reviewers; }
java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, changeNumber, uploader, reviewers, r)) { continue; } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (groupMembers!= null) { resolveGroup(p, changeNumber, reviewers, groupMembers, r); } else { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("Error resolving the change {} of project {}: failed to list accounts for group {}; cannot retrieve uploader account for {}.", changeNumber, p, r, uploader.email); } } return reviewers; }
javajava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, changeNumber, uploader, reviewers, r)) { continue; } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (groupMembers!= null) { resolveGroup(p, changeNumber, reviewers, groupMembers, r); } else { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("Error resolving the change {} of project {}: failed to list accounts for group {}; cannot retrieve uploader account for {}.", changeNumber, p, r, uploader.email); } } return reviewers; }
javajava.util.Set<com.google.gerrit.reviewdb.client.Account.Id> resolve(com.google.gerrit.reviewdb.server.ReviewDb reviewDb,java.util.Set<java.lang.String> in, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo uploader) {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.Sets.newHashSetWithExpectedSize(in.size()); com.google.gerrit.server.account.GroupMembers groupMembers = null; for (java.lang.String r : in) { if (resolveAccount(reviewDb, p, changeNumber, uploader, reviewers, r)) { continue; } if ((groupMembers == null) && (uploader!= null)) { groupMembers = createGroupMembers(reviewDb, p, changeNumber, uploader, r); } if (groupMembers!= null) { resolveGroup(p, changeNumber, reviewers, groupMembers, r); } else { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("Error resolving the change {} of project {}: failed to list accounts for group {}; cannot retrieve uploader account for {}.", changeNumber, p, r, uploader.email); } } return reviewers; }
private com.google.gerrit.server.account.GroupMembers createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.lang.String r) {java.lang.String uploaderNameEmail =java.lang.String.format("%s <%s>", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(reviewDb, uploaderNameEmail); if (uploaderAccount!= null) { return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}, cannot retrieve uploader account {}.", changeNumber, p, r, uploaderNameEmail, e); } return null; }
private com.google.gerrit.server.account.GroupMembers createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.lang.String r) {java.lang.String uploaderNameEmail =java.lang.String.format("%s <%s>", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(reviewDb, uploaderNameEmail); if (uploaderAccount!= null) { return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}, cannot retrieve uploader account {}", changeNumber, p, r, uploaderNameEmail, e); } return null; }
private com.google.gerrit.server.account.GroupMembers createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.lang.String r) {java.lang.String uploaderNameEmail =java.lang.String.format("%s <%s>", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(reviewDb, uploaderNameEmail); return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}, cannot retrieve uploader account {}.", changeNumber, p, r, uploaderNameEmail, e); } return null; }
private static com.google.gerrit.server.account.GroupMembers createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.lang.String r) {java.lang.String uploaderNameEmail =java.lang.String.format("%s <%s>", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(reviewDb, uploaderNameEmail); if (uploaderAccount!= null) { return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("For the change {} of project {}: failed to list accounts for group {}, cannot retrieve uploader account {}.", changeNumber, p, r, uploaderNameEmail, e); } return null; }
private com.google.gerrit.server.account.GroupMembers createGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb reviewDb, com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber, com.google.gerrit.extensions.common.AccountInfo uploader,java.lang.String r) {java.lang.String uploaderNameEmail =java.lang.String.format("%s <%s>", uploader.name, uploader.email); try { com.google.gerrit.reviewdb.client.Account uploaderAccount = accountResolver.findByNameOrEmail(reviewDb, uploaderNameEmail); if (uploaderAccount!= null) { return groupMembersFactory.create(identifiedUserFactory.create(uploaderAccount.getId())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(("For the change {} of project {}: failed to list accounts for group {}, cannot retrieve uploader account {}.", changeNumber, p, r, uploaderNameEmail, e); } return null; }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("The change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("The change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r, e); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("The change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("The change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(("The change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(("The change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r, e); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("ERROR: the change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn("ERROR: the change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r); } }
private void resolveGroup(com.google.gerrit.reviewdb.client.Project.NameKey p, int changeNumber,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.server.account.GroupMembers groupMembers,java.lang.String r) { try {java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts = groupMembers.listAccounts(groupsCollection.get().parse(r).getGroupUUID(), p).stream().filter(Account::isActive).map(Account::getId).collect(java.util.stream.Collectors.toSet()); reviewers.addAll(accounts); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.common.errors.NoSuchGroupException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(("The change {} of project {}: reviewer {} is neither an account nor a group.", changeNumber, p, r); } catch (com.google.gerrit.server.project.NoSuchProjectException |java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersResolver.log.warn(("The change {} of project {}: failed to list accounts for group {}.", changeNumber, p, r); } }
void run(java.util.function.Consumer<java.lang.String> logOneLine, @com.google.gerrit.common.Nullablejava.io.PrintWriter progressWriter) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.accept((("Invalid GC of " + (allUsers)) + "\":\n")); return; } if (!(enableAutoGc(logOneLine))) { logOneLine.accept(java.lang.String.format(((((("Invalid GC of " + (allUsers)) + " due to disabling " + (CONFIG_GC_SECTION)) + ".") + (CONFIG_KEY_AUTO)))); logOneLine.accept((("NoteDb loading accounts is slow after the NoteDb migration, run gc on " + (allUsers)) + "\":\n")); return; } if (progressWriter == null) { logOneLine.accept((("Invalid garbage for " + (allUsers)) + "\":\n")); } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHEDULED : logOneLine.accept(("GC already scheduled for " + (e.getProjectName()))); break; case GC_FAILED : logOneLine.accept(("GC failed for " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : logOneLine.accept(((e.getProjectName()) + " repo not found")); break; default : logOneLine.accept((("GC failed for " + (e.getProjectName())) + " " + (e.getType()))); break; } } }
void run(java.util.function.Consumer<java.lang.String> logOneLine, @com.google.gerrit.common.Nullablejava.io.PrintWriter progressWriter) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.accept((("Invalid GC of " + (allUsers)) + "\":\n")); return; } if (!(enableAutoGc(logOneLine))) { logOneLine.accept(java.lang.String.format(((((("Invalid GC of " + (allUsers)) + " due to disabling " + (CONFIG_GC_SECTION)) + ".") + (CONFIG_KEY_AUTO)))); logOneLine.accept((("NoteDb loading accounts is slow after the NoteDb migration, run gc on ") + (allUsers)) + "\":\n")); return; } if (progressWriter == null) { logOneLine.accept((("Invalid garbage for " + (allUsers)) + "\":\n")); } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHEDULED : logOneLine.accept(("GC already scheduled for " + (e.getProjectName()))); break; case GC_FAILED : logOneLine.accept(("GC failed for " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : logOneLine.accept(((e.getProjectName()) + " repo not found")); break; default : logOneLine.accept((("GC failed for " + (e.getProjectName())) + " " + (e.getType()))); break; } } }
void run(java.util.function.Consumer<java.lang.String> logOneLine, @com.google.gerrit.common.Nullablejava.io.PrintWriter progressWriter) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.accept((("Invalid GC of " + (allUsers)) + "\":\n")); return; } if (!(enableAutoGc(logOneLine))) { logOneLine.accept(java.lang.String.format(((((("Invalid GC of " + (allUsers)) + " due to disabling " + (CONFIG_GC_SECTION)) + ".") + (CONFIG_KEY_AUTO)))); logOneLine.accept((("NoteDb loading accounts is slow after the NoteDb migration, run gc on " + (allUsers)) + "\":\n")); return; } if (progressWriter == null) { logOneLine.accept(("Invalid garbage for " + (allUsers)) + "\":\n")); } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHEDULED : logOneLine.accept(("GC already scheduled for " + (e.getProjectName()))); break; case GC_FAILED : logOneLine.accept(("GC failed for " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : logOneLine.accept(((e.getProjectName()) + " repo not found")); break; default : logOneLine.accept((("GC failed for " + (e.getProjectName())) + " " + (e.getType()))); break; } } }
void run(java.util.function.Consumer<java.lang.String> logOneLine, @com.google.gerrit.common.Nullablejava.io.PrintWriter progressWriter) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.accept((("Invalid GC of " + (allUsers)) + "\":\n")); return; } if (!(enableAutoGc(logOneLine))) { logOneLine.accept(java.lang.String.format(((((("Invalid GC of " + (allUsers)) + " due to disabling " + (CONFIG_GC_SECTION)) + ".") + (CONFIG_KEY_AUTO)))); logOneLine.accept((("NoteDb loading accounts is slow after the NoteDb migration, run gc on " + (allUsers)) + "\":\n")); return; } if (progressWriter == null) { logOneLine.accept((("Invalid garbage for " + (allUsers)) + "\":\n")); } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHEDULED : logOneLine.accept(("GC already scheduled for " + (e.getProjectName()))); break; case GC_FAILED : logOneLine.accept(("GC failed for " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : logOneLine.accept(((e.getProjectName()) + " repo not found")); break; default : logOneLine.accept((("GC failed for " + (e.getProjectName())) + " of " + (e.getType()))); break; } } }
private void run(java.util.function.Consumer<java.lang.String> logOneLine, @com.google.gerrit.common.Nullablejava.io.PrintWriter progressWriter) { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { logOneLine.accept((("Invalid GC of " + (allUsers)) + "\":\n")); return; } if (!(enableAutoGc(logOneLine))) { logOneLine.accept(java.lang.String.format(((((("Invalid GC of " + (allUsers)) + " due to disabling " + (CONFIG_GC_SECTION)) + ".") + (CONFIG_KEY_AUTO)))); logOneLine.accept((("NoteDb loading accounts is slow after the NoteDb migration, run gc on ") + (allUsers)) + "\":\n")); return; } if (progressWriter == null) { logOneLine.accept((("Invalid garbage for " + (allUsers)) + "\":\n")); } com.google.gerrit.common.data.GarbageCollectionResult result = gcFactory.create().run(com.google.common.collect.ImmutableList.of(allUsers), progressWriter); if (!(result.hasErrors())) { return; } for (com.google.gerrit.common.data.GarbageCollectionResult.Error e : result.getErrors()) { switch (e.getType()) { case GC_ALREADY_SCHEDULED : logOneLine.accept(("GC already scheduled for " + (e.getProjectName()))); break; case GC_FAILED : logOneLine.accept(("GC failed for " + (e.getProjectName()))); break; case REPOSITORY_NOT_FOUND : logOneLine.accept(((e.getProjectName()) + " repo not found")); break; default : logOneLine.accept((("GC failed for " + (e.getProjectName())) + " " + (e.getType()))); break; } } }
publicjava.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch,java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<java.lang.String> upstreamBranches = newjava.util.HashSet<java.lang.String>();java.util.Set<java.lang.String> subsections = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsections) {java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.BRANCH_DELIMITER).trimResults().omitEmptyStrings().splitToList(subsection); if ((branchPair.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("Invalid config branch pair malformed: " + subsection)); } if (toBranch.equals(branchPair.get( 1)) && (project.equals(project))) {java.util.Set<java.lang.String> projectsInScope = getProjectsInScope(branchPair.get( 0), branchPair.get( 1)); if (projectsInScope.contains(project)) { upstreamBranches.add(branchPair.get( 0)); } } } return upstreamBranches; }
publicjava.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch,java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<java.lang.String> upstreamBranches = newjava.util.HashSet<java.lang.String>();java.util.Set<java.lang.String> subsections = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsections) {java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.BRANCH_DELIMITER).trimResults().omitEmptyStrings().splitToList(subsection); if ((branchPair.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("Invalid config branch pair malformed: " + subsection)); } if (toBranch.equals(branchPair.get( 1)) || (project.equals(project))) {java.util.Set<java.lang.String> projectsInScope = getProjectsInScope(branchPair.get( 0), branchPair.get( 1)); if (projectsInScope.contains(project)) { upstreamBranches.add(branchPair.get( 0)); } } } return upstreamBranches; }
publicjava.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch,java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<java.lang.String> upstreamBranches = newjava.util.HashSet<java.lang.String>();java.util.Set<java.lang.String> subsections = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsections) {java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.BRANCH_DELIMITER).trimResults().omitEmptyStrings().splitToList(subsection); if ((branchPair.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("missing config branch pair malformed: " + subsection)); } if (toBranch.equals(branchPair.get( 1)) && (project.equals(project))) {java.util.Set<java.lang.String> projectsInScope = getProjectsInScope(branchPair.get( 0), branchPair.get( 1)); if (projectsInScope.contains(project)) { upstreamBranches.add(branchPair.get( 0)); } } } return upstreamBranches; }
publicjava.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch,java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<java.lang.String> upstreamBranches = newjava.util.HashSet<java.lang.String>();java.util.Set<java.lang.String> subsections = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsections) {java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.BRANCH_DELIMITER).trimResults().omitEmptyStrings().splitToList(subsection); if ((branchPair.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("Subsections config branch pair malformed: " + subsection)); } if (toBranch.equals(branchPair.get( 1)) && (project.equals(project))) {java.util.Set<java.lang.String> projectsInScope = getProjectsInScope(branchPair.get( 0), branchPair.get( 1)); if (projectsInScope.contains(project)) { upstreamBranches.add(branchPair.get( 0)); } } } return upstreamBranches; }
publicjava.util.Set<java.lang.String> getUpstreamBranches(java.lang.String toBranch,java.lang.String project) throws com.google.gerrit.extensions.restapi.RestApiException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.util.Set<java.lang.String> upstreamBranches = newjava.util.HashSet<java.lang.String>();java.util.Set<java.lang.String> subsections = getConfig().getSubsections(pluginName); for (java.lang.String subsection : subsections) {java.util.List<java.lang.String> branchPair = com.google.common.base.Splitter.on(com.googlesource.gerrit.plugins.automerger.ConfigLoader.BRANCH_DELIMITER).trimResults().omitEmptyStrings().splitToList(subsection); if ((branchPair.size())!= 2) { throw new org.eclipse.jgit.errors.ConfigInvalidException(("Subsections config branch pair malformed: " + subsection)); } if (toBranch.equals(branchPair.get( 1)) || (project.equals(project))) {java.util.Set<java.lang.String> projectsInScope = getProjectsInScope(branchPair.get( 0), branchPair.get( 1)); if (projectsInScope.contains(project)) { upstreamBranches.add(branchPair.get( 0)); } } } return upstreamBranches; }
@org.junit.Test public void basicGroupProperties() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))).isEqualTo(roundToSecond(reviewDbGroup)); }
@org.junit.Test public void basicGroupProperties() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup)))).isEqualTo(roundToSecond(reviewDbGroup)); }
@org.junit.Test public void basicGroupProperties() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))))).isEqualTo(roundToSecond(reviewDbGroup)); }
@org.junit.Test public void basicGroupProperties() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup)), isEqualTo(roundToSecond(reviewDbGroup)); }
@org.junit.Test public void basicGroupProperties() throwsjava.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))).isEqualTo(roundToSecond(reviewDbGroup)); }
private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getModifiedMembers(), updateResult.getModifiedSubgroups(), updateResult.getRefState()); }
private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { return createGroupInReviewDb(db, groupCreation, groupUpdate); }
private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.group.InternalGroup.create(groupCreation, groupUpdate); }
private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.group.InternalGroup.create(groupCreation.getNameKey(), groupCreation.getId()); }
private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.group.InternalGroup.create(groupCreation, updateGroupInReviewDb(db, groupCreation, groupUpdate)); }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(3); values.add(token.operation); values.add(token.id.getName()); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(); values.add(token.operation); values.add(token.id.getName()); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(3); values.add(token.operation); values.add(token.id.getName()); values.add(token.expiresAt()); values.add(token.expiresIn); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(3); values.add(token.operation); values.add(token.id.getName()); values.add(token.expiresAt); values.add(java.lang.String.valueOf(token.expiresIn)); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(3); values.add(token.operation); values.add(token.id.getName()); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn))); return values; }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(java.time.Instant.now(), 0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty();java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt()).isEqualTo(deserialized.get().expiresAt()); }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(java.time.Instant.now(), 0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty();java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized).isTrue(); assertThat(token.expiresAt()).isEqualTo(deserialized.get().expiresAt()); }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(java.time.Instant.now(), 0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty();java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt).isEqualTo(deserialized.get().expiresAt()); }
@org.junit.Test public void testTokenDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(java.time.Instant.now(), 0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty();java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized.isPresent()).isTrue(); assertThat(token.expiresAt()).isEqualTo(deserialized.get().expiresAt()); }
@org.junit.Test public void testTokenSerializationDeserialization() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor(cipher); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(java.time.Instant.now(), 0);java.lang.String serialized = processor.serialize(token); assertThat(serialized).isNotEmpty();java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> deserialized = processor.deserialize(serialized); assertThat(deserialized).isFalse(); assertThat(token.expiresAt()).isEqualTo(deserialized.get().expiresAt()); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4)) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2)),java.lang.Integer.valueOf(values.get(3))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2)),java.lang.Integer.valueOf(values.get(3))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2)),java.lang.Integer.valueOf(values.get(3)) )); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2)),java.lang.Integer.valueOf(values.get(3)) )); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2)),java.lang.Integer.valueOf(values.get(3))); }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(4); values.add(token.user); values.add(token.project); values.add(token.operation); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(); values.add(token.user); values.add(token.project); values.add(token.operation); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(4); values.add(token.user); values.add(token.project); values.add(token.operation); values.add(token.expiresAt); values.add(java.lang.String.valueOf(token.expiresIn)); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(4); values.add(token.user); values.add(token.project); values.add(token.operation); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn))); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token) { return newjava.util.ArrayList<>(4); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3)); }
@java.lang.Override protected com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size())!= 4) { returnjava.util.Optional.empty(); } returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(values.get(0), values.get(1), values.get(2), values.get(3))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken> createToken(java.util.List<java.lang.String> values) { returnjava.util.Optional.empty(); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user,java.lang.String project,java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation,java.time.Instant.now(), expiresIn); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt(), token.expiresIn); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo(com.google.ger.server.CurrentUser user,java.lang.String project,java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation,java.time.Instant.now(), expiresIn); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt(), token.expiresIn); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user,java.lang.String project,java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation,java.time.Instant.now(), expiresIn); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt()); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user,java.lang.String project,java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation,java.time.Instant.now(), expiresIn); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt().getTime()); }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo(com.google.gerrit.server.CurrentUser user,java.lang.String project,java.lang.String operation) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken(user.getUserName(), project, operation,java.time.Instant.now(), expiresIn); return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo(processor.serialize(token), token.expiresAt(), token.expiresIn()); }
public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id,java.time.Instant now, int expiresIn) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, now, expiresIn); return new com.googlesource.gerrit.plugins.lfs.AuthInfo(processor.serialize(token), token.expiresAt()); }
public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, int expiresIn) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, expiresIn); return new com.googlesource.gerrit.plugins.lfs.AuthInfo(processor.serialize(token), token.expiresAt(), token.expiresIn); }
public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, int expiresIn) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, now, expiresIn); return new com.googlesource.gerrit.plugins.lfs.AuthInfo(processor.serialize(token), token.expiresAt(), token.expiresIn); }
public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id,java.time.Instant now, int expiresIn) { return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, now, expiresIn); }
public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id, int expiresIn) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(operation, id, expiresIn); return new com.googlesource.gerrit.plugins.lfs.AuthInfo(processor.serialize(token), token.expiresAt(), token.expiresIn()); }
public boolean onTime(java.time.Instant when) { return when.isBefore(token.expiresIn); }
public boolean onTime(java.time.Instant when) { return when.isBefore(token.getExpiresIn()); }
public boolean onTime(java.time. Instant when) { return when.isBefore(token.expiresIn); }
public boolean onTime(java.util.concurrent.TimeUnit when) { return when.isBefore(token.expiresIn); }
public boolean onTime(java.time.Instant when) { return when.isBefore(token.expiresIn.plusMillis()); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0),java.lang.Integer.valueOf(values.get(1))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0), values.get(1))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { returnjava.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0), values.get(1))); }
@java.lang.Override protectedjava.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken.createToken(values.get(0)); }
@org.junit.Test public void testTokenOnTime() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }
@org.junit.Test public void testTokenOnTime() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when)).isTrue(); }
@org.junit.Test public void testTokenOnTime() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime()).isTrue(); }
@org.junit.Test public void testTokenOnTime() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999)))).isTrue(); }
@org.junit.Test public void testTokenOnTime() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))); }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(token.expiresIn); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn)); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(token.expiresIn()); return values; }
@java.lang.Override protectedjava.util.List<java.lang.String> getValues(com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token) {java.util.List<java.lang.String> values = newjava.util.ArrayList<>(2); values.add(token.expiresAt()); values.add(java.lang.String.valueOf(token.expiresIn))); return values; }
@org.junit.Test public void testTokenExpired() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when)).isFalse(); }
@org.junit.Test public void testTokenExpired() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(1001))).isFalse(); }
@org.junit.Test public void testTokenExpired() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(1001)).isFalse()); }
@org.junit.Test public void testTokenExpired() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime()).isFalse(); }
@org.junit.Test public void testTokenExpired() throwsjava.lang.Exception {java.time.Instant when =java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1000); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(When.plusMillis(1001)).isFalse()); }
@org.junit.Test public void testVerifyAuthInfo() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId())).isTrue(); }
@org.junit.Test public void testVerifyAuthInfo() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId()).isTrue(); }
@org.junit.Test public void testVerifyAuthInfo() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now()); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId())).isTrue(); }
@org.junit.Test public void testVerifyAuthInfo() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId()))).isTrue(); }
@org.junit.Test public void testVerifyAuthInfo() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId()); assertThat(auth.verifyAuthInfo(info.authToken, "o", zeroId())).isTrue(); }
@org.junit.Test public void testVerifyAgainstDifferentOperation() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId()).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentOperation() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now()); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId())).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentOperation() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId())).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentOperation() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId()); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId())).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentOperation() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId()); assertThat(auth.verifyAuthInfo(info.authToken, "p", zeroId()).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentObjectId() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, "o", org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("123456789012345678901234567890" + ("123456789012345678901234567890" + "1234"))))).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentObjectId() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId()); assertThat(auth.verifyAuthInfo(info.authToken, "o", org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("123456789012345678901234567890" + ("123456789012345678901234567890" + "1234"))))).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentObjectId() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now()); assertThat(auth.verifyAuthInfo(info.authToken, "o", org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("123456789012345678901234567890" + ("123456789012345678901234567890" + "1234"))))).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentObjectId() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now()), 1); assertThat(auth.verifyAuthInfo(info.authToken, "o", org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("123456789012345678901234567890" + ("123456789012345678901234567890" + "1234"))))).isFalse(); }
@org.junit.Test public void testVerifyAgainstDifferentObjectId() throwsjava.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo("o", zeroId(),java.time.Instant.now())); assertThat(auth.verifyAuthInfo(info.authToken, "o", org.eclipse.jgit.lfs.lib.LongObjectId.fromString(("123456789012345678901234567890" + ("123456789012345678901234567890" + "1234"))))).isFalse(); }
private boolean isRecoverable(java.lang.Exception e) { return (e instanceofjava x.net.ssl.SSLException) && (e instanceofjava.io.IOException); }
private boolean isRecoverable(java.lang.Exception e) { return (e instanceofjava.net.ssl.SSLException) && (e instanceofjava.io.IOException); }
private boolean isRecoverable(java.lang.Exception e) { return (!(e instanceofjava x.net.ssl.SSLException)) && (e instanceofjava.io.IOException); }
private boolean isRecoverable(java.lang.Exception e) { return!(e instanceofjava x.net.ssl.SSLException) && (e instanceofjava.io.IOException); }
private boolean isRecoverable(java.lang.Exception e) { return!(e instanceofjava x.net.ssl.SSLException) && (e instanceofjava.io.IOException) ; }
java @java.lang.Override public void run() { try {java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("No content. Webhook [{}] skipped."); remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException |java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); } } }
java @java.lang.Override public void run() { try {java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("No content. Webhook [{}] skipped.", remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException |java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); } } }
java.lang.Override public void run() { try {java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("No content. Webhook [{}] skipped."); remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException |java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); } } }
java @java.lang.Override public void run() { try {java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("Invalid content. Webhook [{}] skipped."); remote.getUrl()); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException |java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); } } }
java @java.lang.Override public void run() { try {java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("No content. Webhook [{}] skipped."); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.get().post(remote, content.get()); if ((!(result.successful)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.lang.RuntimeException |java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (remote.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); } } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null))) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate {}. " + " can only create missing repositories locally, over SSH or when ") + adminUrl); } } catch (java.io.IOException ioe) { stateLog.error(("Cannot replicate to " + (uri)) + " failed to create missing repository", ioe, getStatesAsArray()); } } else { stateLog.error(("Cannot replicate to " + (uri)) + " repository not found", getStatesAsArray()); } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null))) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate {}. " + " can only create missing repositories locally, over SSH or when ") + adminUrl); } } catch (java.io.IOException ioe) { stateLog.error((("Cannot replicate to " + (uri)) + " failed to create missing repository", ioe, getStatesAsArray()); } } else { stateLog.error((("Cannot replicate to " + (uri)) + " repository not found", getStatesAsArray()); } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null))) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate {}. " + " can only create missing repositories locally, over SSH or when ") + adminUrl); } } catch (java.io.IOException ioe) { stateLog.error((("Cannot replicate to " + (uri)) + " failed to create missing repository", ioe, getStatesAsArray()); } } else { stateLog.error((("Cannot replicate to " + (uri)) + " repository not found", getStatesAsArray())); } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null))) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate {}. " + " can only create missing repositories locally, over SSH or when ") + adminUrl); } } catch (java.io.IOException ioe) { stateLog.error(("Cannot replicate to " + (uri)) + " failed to create missing repository", ioe, getStatesAsArray()); } } else { stateLog.error((("Cannot replicate to " + (uri)) + " repository not found", getStatesAsArray()); } }
private void createRepository() { if (pool.isCreateMissingRepos()) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (replicationQueue.createProject(projectName, (head!= null? head.getName() : null))) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(("Cannot replicate {}. " + " can only create missing repositories locally, over SSH or when ") + adminUrl); } } catch (java.io.IOException ioe) { stateLog.error(("Cannot replicate to " + (uri)) + " failed to create missing repository", ioe, getStatesAsArray()); } } else { stateLog.error(("Cannot replicate to " + (uri)) + " repository not found")); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupSubgroupsFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT include_uuid" + (" FROM account_group_by_id" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> subgroups = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, includedGroupUuid))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupSubgroupsFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT include_uuid" + " FROM account_group_by_id" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> subgroups = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, includedGroupUuid))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupSubgroupsFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT include_uuid" + (" FROM account_group_by_id" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> subgroups = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includeGroupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, includeGroupUuid))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupSubgroupsFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((("SELECT include_uuid" + (" FROM account_group_by_id" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> subgroups = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, includedGroupUuid))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> readAccountGroupSubgroupsFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(("SELECT include_uuid" + (" FROM account_group_by_id" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupById> subgroups = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(rs.getString(1)); subgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(groupId, includedGroupUuid))); } return subgroups; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read subgroups of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupMembersFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_id" + (" FROM account_group_members" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read members of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupMembersFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_id" + " FROM account_group_members" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read members of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupMembersFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(("SELECT account_id" + (" FROM account_group_members" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read members of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupMembersFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((("SELECT account_id" + (" FROM account_group_members" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read members of account group %s from ReviewDb", groupId.get()), e); } }
private staticjava.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> readAccountGroupMembersFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery(((("SELECT account_id" + (" FROM account_group_members" + " WHERE group_id = '")) + (groupId.get())) + "'"))) {java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMember> members = newjava.util.ArrayList<>(); while (rs.next()) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(rs.getInt(1)); members.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId))); } return members; } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Failed to read members of group %s from ReviewDb", groupId.get()), e); } }
public static com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
public static com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupUuid); com.google.gerrit.reviewdb.client.AccountGroup. Id groupId = group.getId(); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
public static com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
public static com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
public static com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupUuid); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
public com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupId); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
public com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupId); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
private com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupId); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
public com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupId); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersAuditsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupsFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupSubgroupAuditsFromReviewDb(db, groupId)); }
public com.google.gerrit.server.group.db.GroupBundle fromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupFromReviewDb(db, groupId); return com.google.gerrit.server.group.db.GroupBundle.create(com.google.gerrit.server.group.db.GroupBundle.Source.REVIEW_DB, group, com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMembersFromReviewDb(db, groupId), com.google.gerrit.server.group.db.GroupBundle.Factory.readAccountGroupMemberAuditsFromReviewDb(db, groupId)); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }))).when(indexerMock).index(id); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(id); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); });).when(indexerMock).index(id); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(id); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }));).when(indexerMock).index(id); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(id); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }))); when(indexerMock).index(id); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(id); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }))).when(indexerMock).index(id); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(id); }
@org.junit.Test public void deleteIsNotSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(Account.Id.parse("34"), Operation.DELETE); }
@org.junit.Test public void deleteIsNotSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.delete(Account.Id.parse("34"), Operation.DELETE); }
@org.junit.Test public void deleteIsSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(Account.Id.parse("34"), Operation.DELETE); }
@org.junit.Test public void deleteNotSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(Account.Id.parse("34"), Operation.DELETE); }
@org.junit.Test public void deleteIsNotSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(accountId.parse("34"), Operation.DELETE); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexAccountHandler(indexerMock); id = Account.Id.parse("123"); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexAccountHandler(indexerMock); id = Account.Id.parse("1234"); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexAccountHandler(indexerMock); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexIndexAccountHandler(indexerMock); id = Account.Id.parse("123"); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { id = Account.Id.parse("123"); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }))).when(indexerMock).index(uuid); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(uuid, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(uuid); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); });).when(indexerMock).index(uuid); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(uuid, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(uuid); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }));).when(indexerMock).index(uuid); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(uuid, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(uuid); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }))); when(indexerMock).index(uuid); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(uuid, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(uuid); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) ( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }))).when(indexerMock).index(uuid); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(uuid, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock).index(uuid); }
@org.junit.Test public void deleteIsNotSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(AccountGroup.UUID.parse("34"), Operation.DELETE); }
@org.junit.Test public void deleteIsNotSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.delete(AccountGroup.UUID.parse("34"), Operation.DELETE); }
@org.junit.Test public void deleteIsSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(AccountGroup.UUID.parse("34"), Operation.DELETE); }
@org.junit.Test public void deleteNotSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(AccountGroup.UUID.parse("34"), Operation.DELETE); }
@org.junit.Test public void deleteIsNotSupported() throwsjava.lang.Exception { exception.expect(java.lang.UnsupportedOperationException.class); exception.expectMessage("Delete from index not supported"); handler.index(AccountGroup.UUID.parse("34,"), Operation.DELETE); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexGroupHandler(indexerMock); uuid = AccountGroup.UUID.parse("123"); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexGroupHandler(indexerMock); uuid = AccountGroup.UUID.parse("1234"); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexGroupHandler(indexerMock); uuid = AccountGroup.UUID.parse(("123"); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexGroupHandler(indexerMock); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexGroupHandler(indexerMock); uuid = AccountGroup.UUID.parse("123"); uuid = AccountGroup.UUID.parse("5678"); }
@org.junit.Test public void changeToIndexDoNotExist() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_DOES_NOT_EXIST); handler.index(id, Operation.INDEX); verify(indexerMock, times(1)).delete(id); }
@org.junit.Test public void changeToIndexDoNotExist() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_DOES_NOT_EXIST); handler.index(id, Operation.INDEX); verify(indexerMock).delete(id); }
@org.junit.Test public void indexDoNotExist() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_DOES_NOT_EXIST); handler.index(id, Operation.INDEX); verify(indexerMock, times(1)).delete(id); }
@org.junit.Test public void changeToIndexDoNotExist() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_DOES_NOT_EXIST); handler.index(id, operation.INDEX); verify(indexerMock, times(1)).delete(id); }
@org.junit.Test public void indexToIndexDoNotExist() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_DOES_NOT_EXIST); handler.index(id, Operation.INDEX); verify(indexerMock, times(1)).delete(id); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_EXISTS); doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }))).when(indexerMock).index(dbMock, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(dbMock, change); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_EXISTS); doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }));).when(indexerMock).index(dbMock, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(dbMock, change); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_EXISTS); doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); });).when(indexerMock).index(dbMock, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(dbMock, change); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_EXISTS); doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) ( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.io.IOException("someMessage"); }))).when(indexerMock).index(dbMock, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(dbMock, change); }
@org.junit.Test public void shouldSetAndUnsetForwardedContextEvenIfExceptionIsThrown() throwsjava.lang.Exception { setupChangeAccessRelatedMocks(com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandlerTest.CHANGE_EXISTS); doAnswer(((org.mockito.stubbing.Answer<java.lang.Void>) (( invocation) -> { assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isTrue(); throw newjava.lang.IOException("someMessage"); }))).when(indexerMock).index(dbMock, change); assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); try { handler.index(id, Operation.INDEX); fail("should have throw an IOException"); } catch (java.io.IOException e) { assertThat(e.getMessage()).isEqualTo("someMessage"); } assertThat(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent()).isFalse(); verify(indexerMock, times(1)).index(dbMock, change); }
private void setupChangeAccessRelatedMocks(boolean changeExist, boolean ormException, boolean ioException) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).open(); } else { when(schemaFactoryMock.open()).thenReturn(dbMock); com.google.gerrit.reviewdb.server.ChangeAccess ca = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExist) { when(ca.get(id)).thenReturn(change); if (ioException) { doThrow(newjava.io.IOException("io-error")).when(indexerMock).index(dbMock, change); } } else { when(ca.get(id)).thenReturn(null); } } }
private void setupChangeAccessRelatedMocks() throws com.google.gwtorm.server.OrmException,java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).open(); } else { when(schemaFactoryMock.open()).thenReturn(dbMock); com.google.gerrit.reviewdb.server.ChangeAccess ca = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExist) { when(ca.get(id)).thenReturn(change); if (ioException) { doThrow(newjava.io.IOException("io-error")).when(indexerMock).index(dbMock, change); } } else { when(ca.get(id)).thenReturn(null); } } }
private void setupChangeAccessRelatedMocks(boolean changeExist, boolean ormException, boolean ioException) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).open(); } else { when(schemaFactoryMock.open()).thenReturn(dbMock); com.google.gerrit.reviewdb.server.ChangeAccess ca = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExist) { when(ca.get(id)).thenReturn(change); } else { when(ca.get(id)).thenReturn(null); } } }
private void setUpChangeAccessRelatedMocks(boolean changeExist, boolean ormException, boolean ioException) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).open(); } else { when(schemaFactoryMock.open()).thenReturn(dbMock); com.google.gerrit.reviewdb.server.ChangeAccess ca = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExist) { when(ca.get(id)).thenReturn(change); if (ioException) { doThrow(newjava.io.IOException("io-error")).when(indexerMock).index(dbMock, change); } } else { when(ca.get(id)).thenReturn(null); } } }
private void setupChangeAccessRelatedMocks(boolean changeExist, boolean ormException, boolean ioException) throws com.google.gwtorm.server.OrmException,java.io.IOException { if (ormException) { doThrow(new com.google.gwtorm.server.OrmException("")).when(schemaFactoryMock).open(); } else { when(schemaFactoryMock.open()).thenReturn(dbMock); } com.google.gerrit.reviewdb.server.ChangeAccess ca = mock(com.google.gerrit.reviewdb.server.ChangeAccess.class); when(dbMock.changes()).thenReturn(ca); if (changeExist) { when(ca.get(id)).thenReturn(change); if (ioException) { doThrow(newjava.io.IOException("io-error")).when(indexerMock).index(dbMock, change); } } else { when(ca.get(id)).thenReturn(null); } }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); id = Change.Id.parse("123"); change = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); id = ChangeId.parse("123"); change = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); id = Change.Id.parse("123"); change = new com.google.gerrit.reviewdb.client.Change(null, id, null, null); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); id = Change.Id.parse("123"); change = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, com.google.gerrit.common.TimeUtil.nowTs()); indexer = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandler(indexerMock, schemaFactoryMock); }
@org.junit.Before public void setUp() throwsjava.lang.Exception { when(schemaFactoryMock.open()).thenReturn(dbMock); when(dbMock.changes()).thenReturn(changeAccessMock); id = Change.Id.parse("123"); change = new com.google.gerrit.reviewdb.client.Change(null, id, null, null, com.google.gerrit.common.TimeUtil.nowTs()); handler = new com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexChangeHandler(indexerMock); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext();java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortProjectName", projectName.replaceAll("/.*/", "..." ));java.lang.String prefix = ""; if ((args.addInstanceNameInSubject) && ((args.instanceNameProvider)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContext.put("instanceAndProjectName", (prefix + (soyContext.get("shortProjectName")) )); soyContextEmailData.put("sshHost", getSshHost());java.util.Map<java.lang.String,java.lang.String> branchData = newjava.util.HashMap<>(); branchData.put("shortName", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT.withDelimiter()) + (branch.getParentKey().get()))); footers.add(((MailHeader.SHORTNAME.withDelimiter()) + (branch.getShortName()))); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext();java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortProjectName", projectName.replaceAll("/.*/", "..." ));java.lang.String prefix = ""; if ((args.addInstanceNameInSubject) && ((args.instanceNameProvider)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContext.put("instanceAndProjectName", (prefix + (soyContext.get("shortProjectName")) )); soyContextEmailData.put("sshHost", getSshHost());java.util.Map<java.lang.String,java.lang.String> branchData = newjava.util.HashMap<>(); branchData.put("shortName", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT.withDelimiter()) + (branch.getParentKey().get()))); footers.add(((MailHeader.SHORT.withDelimiter()) + (branch.getShortName()))); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext();java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortProjectName", projectName.replaceAll("/.*/", "..." ));java.lang.String prefix = ""; if ((args.addInstanceNameInSubject) && ((args.instanceNameProvider)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContext.put("instanceAndProjectName", (prefix + (soyContext.get("shortProjectName")) )); soyContextEmailData.put("sshHost", getSshHost());java.util.Map<java.lang.String,java.lang.String> branchData = newjava.util.HashMap<>(); branchData.put("shortName", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT.withDelimiter()) + (branch.getParentKey().get()))); footers.add((("short " + (branch.getShortName()))); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext();java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortProjectName", projectName.replaceAll("/.*/", "..." ));java.lang.String prefix = ""; if ((args.addInstanceNameInSubject) && ((args.instanceNameProvider)!= null)) { prefix = (com.google.common.base.Strings.nullToEmpty(args.instanceNameProvider.get())) + "/"; } soyContext.put("instanceAndProjectName", (prefix + (soyContext.get("shortProjectName")))); soyContextEmailData.put("sshHost", getSshHost());java.util.Map<java.lang.String,java.lang.String> branchData = newjava.util.HashMap<>(); branchData.put("shortName", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT.withDelimiter()) + (branch.getParentKey().get()))); footers.add((("short " + (branch.getShortName()))); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext();java.lang.String projectName = branch.getParentKey().get(); soyContext.put("projectName", projectName); soyContext.put("shortProjectName", projectName.replaceAll("/.*/", "..." )); soyContextEmailData.put("sshHost", getSshHost());java.util.Map<java.lang.String,java.lang.String> branchData = newjava.util.HashMap<>(); branchData.put("shortName", branch.getShortName()); soyContext.put("branch", branchData); footers.add(((MailHeader.PROJECT.withDelimiter()) + (branch.getParentKey().get()))); footers.add((("shortName: ") + (branch.getShortName()))); }
privatejava.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrlProvider) {java.lang.String instanceName = config.getString("gerrit", null, "shortName"); if ((instanceName!= null) || (canonicalUrlProvider == null)) { return instanceName; } return canonicalUrlProvider.get(); }
private staticjava.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrlProvider) {java.lang.String instanceName = config.getString("gerrit", null, "shortName"); if ((instanceName!= null) || (canonicalUrlProvider == null)) { return instanceName; } return canonicalUrlProvider.get(); }
privatejava.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrlProvider) { return config.getString("gerrit", null, "shortName"); }
privatejava.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrlProvider) {java.lang.String instanceName = config.getString("gerrit", null, "shortName"); if ((instanceName!= null) || (canonicalUrlProvider == null)) { return instanceName; } return canonicalUrlProvider.get().get(); }
privatejava.lang.String getInstanceName(org.eclipse.jgit.lib.Config config, @com.google.gerrit.common.Nullable com.google.inject.Provider<java.lang.String> canonicalUrlProvider) {java.lang.String instanceName = config.getString("gerrit", null, "shortName"); if ((instanceName!= null) || (canonicalUrlProvider == null)) { return instanceName; } else if ((canonicalUrlProvider!= null) && (canonicalUrlProvider.get().isPresent())) { return canonicalUrlProvider.get().get(); } else if ((canonicalUrlProvider!= null) && (canonicalUrlProvider.get().isPresent())) { return canonicalUrlProvider.get().get(); } else { return null; } }
privatejava.lang.String getInstanceName() {java.lang.System.out.println(args.instanceNameProvider); return args.instanceNameProvider.get(); }
privatejava.lang.String getInstanceName() { return args.instanceNameProvider.get(); }
private staticjava.lang.String getInstanceName() {java.lang.System.out.println(args.instanceNameProvider); return args.instanceNameProvider.get(); }
publicjava.lang.String getInstanceName() {java.lang.System.out.println(args.instanceNameProvider); return args.instanceNameProvider.get(); }
privatejava.lang.String getInstanceName() {java.lang.System.out.println(args.instanceNameProvider); return args.instanceNameProvider.get().get(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { if (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set ready for review"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (!(change.isWorkInProgress())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not work in progress")); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(false, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
<T> org.elasticsearch.index.query.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<T> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return org.elasticsearch.index.query.QueryBuilders.matchAllQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("unsupported predicate to create query for index: " + p)); } }
<T> org.elasticsearch.index.query.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<T> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return org.elasticsearch.index.query.QueryBuilders.matchAllQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("Cannot create query for index: " + p)); } }
protected <T> org.elasticsearch.index.query.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<T> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return org.elasticsearch.index.query.QueryBuilders.matchAllQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("unsupported predicate to create query for index: " + p)); } }
<T> org.elasticsearch.index.query.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<T> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return org.elasticsearch.index.query.QueryBuilders.matchAll(); } else { throw new com.google.gerrit.server.query.QueryParseException(("unsupported predicate to create query for index: " + p)); } }
private <T> org.elasticsearch.index.query.QueryBuilder toQueryBuilder(com.google.gerrit.server.query.Predicate<T> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<T>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return org.elasticsearch.index.query.QueryBuilders.matchAllQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("unsupported predicate to create query for index: " + p)); } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("Cannot create query for index: " + p)); } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("cannot create query for index: " + p)); } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException((("Cannot create query for index: " + p)); } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("Cannot create query for index: " + p)); } } }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("cannot create query for index: " + p)); } } }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ("match invoked, but child predicate %s " + "doesn't implement %s"), pred, com.google.gerrit.server.query.Matchable.class.getName()); return pred.asMatchable().match(accountState); }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkArgument(pred.isMatchable(), ("match invoked, but child predicate %s " + "doesn't implement %s"), pred, com.google.gerrit.server.query.Matchable.class.getName()); return pred.asMatchable().match(accountState); }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ("match invoked, but child predicate %s " + ("doesn't implement %s"), pred, com.google.gerrit.server.query.Matchable.class.getName()); return pred.asMatchable().match(accountState); }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> pred = getChild(0); checkState(pred.isMatchable(), ("match invoked, but child predicate %s " + "doesn't implement %s"), pred); return pred.asMatchable().match(accountState); }
@java.lang.Override public boolean match(com.google.gerrit.server.account.AccountState accountState) throws com.google.gwtorm.server.OrmException { return getChild(0); }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, "failed to load project %s", projectName); projectState.checkStatePermitsRead(); permissionBackend.user(user).project(projectName).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(e); } }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, "Failed to load project %s", projectName); projectState.checkStatePermitsRead(); permissionBackend.user(user).project(projectName).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(e); } }
public boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); checkNotNull(projectState, "failed to load project %s", projectName); projectState.checkStatePermitsRead(); permissionBackend.user(user).project(projectName).check(ProjectPermission.READ); return true; } catch (com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(e); } }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } }
private boolean canRead(org.eclipse.jgit.lib.ObjectId revId) throws com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(revId); return commits.canRead(projectState, repo, commit); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(e); } }
@org.junit.Test public void checkMaxWorks() { com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_WITH_BLOCK); checkMaxValidatesTheLabel(LabelFunction.MAX_NO_BLOCK); checkMaxValidatesTheLabel(LabelFunction.MAX_WITH_BLOCK); }
@org.junit.Test public void checkMaxWorks() { com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxValidatesTheLabel(LabelFunction.MAX_NO_BLOCK); checkMaxValidatesTheLabel(LabelFunction.MAX_WITH_BLOCK); }
@org.junit.Test public void checkMaxWorks() throwsjava.lang.Exception { com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_WITH_BLOCK); checkMaxValidatesTheLabel(LabelFunction.MAX_NO_BLOCK); checkMaxValidatesTheLabel(LabelFunction.MAX_WITH_BLOCK); }
@org.junit.Test public void checkMaxWorks() { com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_WITH_BLOCK); }
@org.junit.Test public void checkMaxWorks() throwsjava.lang.Exception { com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxIsEnforced(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkMaxValidatesTheLabel(LabelFunction.MAX_NO_BLOCK); checkMaxValidatesTheLabel(LabelFunction.MAX_WITH_BLOCK); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }
private void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); assertThat(myLabel.appliedBy).isNull(); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); assertThat(myLabel.appliedBy).isNotNull(); }
private static void checkLabelIsRequired(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); assertThat(myLabel.appliedBy).isNull(); assertThat(myLabel.reviewedBy).isNull(); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_0); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); }
private void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_0); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_0); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel).isEqualTo(SubmitRecord.Label.Status.NEED); }
private static void checkMaxIsEnforced(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.NEED); }
@org.junit.Test public void checkMaxNoBlockIgnoresMin() {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }
@org.junit.Test public void checkMaxNoBlockIgnoresMin() {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }
@org.junit.Test public void checkMaxNoBlockIgnoresMin() {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); }
@org.junit.Test public void checkMaxNoBlockIgnoresMin() {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.LABEL_M2, com.google.gerrit.common.data.LabelFunctionTest.LABEL_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.LABEL_M2); }
@org.junit.Test public void checkMaxNoBlockIgnoresMin() {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = LabelFunction.MAX_NO_BLOCK.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isNull(); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelFunctionTest.makeKey(com.google.gerrit.common.data.LabelFunctionTest.PS_ID, accountId, com.google.gerrit.common.data.LabelFunctionTest.LABEL_ID); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value,java.sql.Date.from(java.time.Instant.now())); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelFunctionTest.key(com.google.gerrit.common.data.LabelFunctionTest.PS_ID, accountId, com.google.gerrit.common.data.LabelFunctionTest.LABEL_ID); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value,java.sql.Date.from(java.time.Instant.now())); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval createApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelFunctionTest.makeKey(com.google.gerrit.common.data.LabelFunctionTest.PS_ID, accountId, com.google.gerrit.common.data.LabelFunctionTest.LABEL_ID); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value,java.sql.Date.from(java.time.Instant.now())); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelFunctionTest.makeKey(com.google.gerrit.common.data.LabelFunctionTest.PS_ID, accountId, com.google.gerrit.common.data.LabelFunctionTest.LABEL_ID); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value,java.sql.Date.from(java.util.concurrent.TimeUnit.MILLISECONDS)); }
private static com.google.gerrit.reviewdb.client.PatchSetApproval makeApproval(short value) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id((10000 + value)); com.google.gerrit.reviewdb.client.PatchSetApproval.Key key = com.google.gerrit.common.data.LabelFunctionTest.makeKey(com.google.gerrit.common.data.LabelFunctionTest.PS_ID, accountId, com.google.gerrit.common.data.LabelFunctionTest.LABEL_ID); return new com.google.gerrit.reviewdb.client.PatchSetApproval(key, value,java.sql.Date.from(java.util.concurrent.TimeUnit.SECONDS)); }
@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction function : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.label).isEqualTo("Verified"); } }
@org.junit.Test public void checkLabelNameIsCorrect() throwsjava.lang.Exception { for (com.google.gerrit.common.data.LabelFunction function : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.label).isEqualTo("Verified"); } }
@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction function : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.label).isEqualTo("Verified"); } }
@org.junit.Test public void checkLabelNameIsCorrect() { for (com.google.gerrit.common.data.LabelFunction function : com.google.gerrit.common.data.LabelFunction.values()) { com.google.gerrit.common.data.SubmitRecord.Label label = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(label.label).isEqualTo("Verified"); } }
@org.junit.Test public void checkLabelNameIsCorrect() { com.google.gerrit.common.data.LabelFunction.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); }
@org.junit.Test public void checkFunctionDoesNothing() { com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_OP); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.ANY_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_NO_BLOCK); }
@org.junit.Test public void checkFunctionDoesNothing() { com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_OP); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.ANY_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_WITH_BLOCK); }
@org.junit.Test public void checkFunctionDoesNothing() { com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_OP); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.ANY); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_NO_BLOCK); }
private void checkFunctionDoesNothing() { com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_OP); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.ANY_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_NO_BLOCK); }
@org.junit.Test public void checkFunctionDoesNothing() { com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.NO_OP); com.google.gerrit.common.data.LabelFunctionTest.checkNothingHappens(LabelFunction.PATCH_SET_LOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.ANY_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MAX_WITH_BLOCK); com.google.gerrit.common.data.LabelFunctionTest.checkLabelIsRequired(LabelFunction.MIN_NO_BLOCK); }
private static void checkBlockWorks(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.REJECT); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2.getAccountId()); }
private static void checkBlockWorks(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.REJECT); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1.getAccountId()); }
private static void checkBlockWorks(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.REJECT); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2.getAccountId()); }
private static void checkBlockWorks(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.REJECT); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2); }
private static void checkBlockWorks(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.REJECT); assertThat(myLabel.appliedBy).isNull(); }
public boolean isMaxValueMandatory() { return requiresMaxValue; }
public boolean isMaxValueMandatory() { return maxValueMandatory; }
public boolean isMinValueMandatory() { return minValueMandatory; }
public boolean isMinValueMandatory() { return minValue; }
public boolean isMaxValueMandatory() { return (maxValueMandatory); }
public SubmitRecord.Label check(com.google.gerrit.common.data.LabelType t,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord.Label(); l.label = t.getName(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.NEED; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.isMaxNegative(a))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.REJECT; return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.OK; } } } return l; }
public SubmitRecord.Label check(com.google.gerrit.common.data.LabelType t,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord.Label(); l.label = t.getName(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.NEED; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((t.isMaxNegative(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.REJECT; return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.OK; } } } return l; }
public SubmitRecord.Label check(com.google.gerrit.common.data.LabelType t,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord.Label(); l.label = t.getName(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.NEED; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.isMaxNegative(a))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.REJECT; return l; } if ((isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.OK; } } } return l; }
public SubmitRecord.Label check(com.google.gerrit.common.data.LabelType t,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord.Label(); l.label = t.getName(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.NEED; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.isMaxNegative(a))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.REJECT; return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.OK; } return l; } } return null; }
public SubmitRecord.Label check(com.google.gerrit.common.data.LabelType t,java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals) { com.google.gerrit.common.data.SubmitRecord.Label l = new com.google.gerrit.common.data.SubmitRecord.Label(); l.label = t.getName(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.NEED; } for (com.google.gerrit.reviewdb.client.PatchSetApproval a : approvals) { if ((a.getValue()) == 0) { continue; } if ((isBlock) && (t.isMaxNegative(a))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.REJECT; return l; } if ((t.isMaxPositive(a)) || (!(requiresMaxValue))) { l.appliedBy = a.getAccountId(); l.status = SubmitRecord.Label.Status.MAY; if (isMandatory) { l.status = SubmitRecord.Label.Status.OK; } return l; } } return l; }
public boolean isMandatory() { return isMandatory; }
public boolean isMandatory() { return isMandatory; }
public boolean isMandatory() { return isMandatory; }
public boolean isMandatory() { return isMandatory; }
public com.google.gerrit.client.account.AccountId getAccountId() { return accountId; }
private void checkMaxValidatesTheLabel(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M1); }
private void checkMaxValidatesTheLabel(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.LABEL_1, com.google.gerrit.common.data.LabelFunctionTest.LABEL_2, com.google.gerrit.common.data.LabelFunctionTest.LABEL_M1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }
private void checkMaxValidatesTheLabel(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2, com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_M1); com.google.gerrit.common.data.SubmitRecord.Label label = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(label.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(label.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }
private void checkMaxValidatesTheLabel(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.LABEL_1, com.google.gerrit.common.data.LabelFunctionTest.LABEL_2, com.google.gerrit.common.data.LabelFunctionTest.LABEL_M1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.LABEL_2.getAccountId()); }
private void checkMaxValidatesTheLabel(com.google.gerrit.common.data.LabelFunction function) {java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_1); com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, approvals); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.OK); assertThat(myLabel.appliedBy).isEqualTo(com.google.gerrit.common.data.LabelFunctionTest.APPROVAL_2.getAccountId()); }
private staticjava.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect(java.util.stream.Collectors.toList()); }
private staticjava.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect((java.util.stream.Collectors.toList()); }
private staticjava.util.List<com.google.gerrit.reviewdb.client.Approval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect(java.util.stream.Collectors.toList()); }
private staticjava.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(input -> input.getLabel().equals(t.getLabelId().get())).collect(java.util.stream.Collectors.toList()); }
private staticjava.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect((java.util.stream.Collectors.toList())); }
private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }
private void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }
private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunction.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }
private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNotNull(); }
private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL,java.util.Collections.emptyList()); assertThat(myLabel.status).isNull(); assertThat(myLabel.appliedBy).isNull(); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("Set Ready For Review").setTitle("Set Ready For Review"); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("Change Review").setTitle("Set Ready For Review"); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("Change Review").setTitle("Set Ready For Review == (com.google.gerrit.reviewdb.client.Change.Status.NEW)) && (rsrc.getChange().isWorkInProgress())) || (rsrc.isUserOwner(), permissionBackend.user(self).testCond(GlobalPermission.ADMINISTRATE_SERVER)); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("Change Review").setTitle("Set Ready For Review == (com.google.gerrit.reviewdb.client.Change.Status.NEW)) && (rsrc.getChange().isWorkInProgress())), or(rsrc.isUserOwner(), permissionBackend.user(self).testCond(GlobalPermission.ADMINISTRATE_SERVER))) ; }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("Ready For Review").setTitle("Set Ready For Review"); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("WIP").setTitle("Work In Progress"); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("WIP").setTitle("WIP Work In Progress"); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("WIP").setTitle("Change Work In Progress"); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("WIP").setTitle("WIP Work In Progress").setStatus(com.google.gerrit.reviewdb.client.Change.Status.NEW); }
@java.lang.Override public com.google.gerrit.server.restapi.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.server.restapi.change.Description().setLabel("WIP").setTitle("WIP Work In Progress").setStatus(com.google.gerrit.server.change.Status.NEW); }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(newjava.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("Replication project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } return false; }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(newjava.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } return false; }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(newjava.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("Project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } return false; }
private boolean shouldReplicate(com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(newjava.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("Replication project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } return false; }
private boolean shouldReplicate(final com.google.gerrit.reviewdb.client.Project.NameKey project,java.lang.String ref, com.googlesource.gerrit.plugins.replication.ReplicationState... states) { try { return threadScoper.scope(newjava.util.concurrent.Callable<java.lang.Boolean>() { @java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; } }).call(); } catch (com.google.gerrit.server.project.NoSuchProjectException err) { stateLog.error(java.lang.String.format("project %s not available", project), err, states); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); throw newjava.lang.RuntimeException(e); } return false; } }
@java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
@java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.current().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
@java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.getCurrentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
@java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).ref(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
@java.lang.Override publicjava.lang.Boolean call() throws com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState; try { projectState = projectCache.checkedGet(project); } catch (IOException e) { return false; } if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(project); } if (!(projectState.statePermitsRead())) { return false; } if (!(shouldReplicate(projectState, userProvider.get()))) { return false; } if (PushOne.ALL_REFS.equals(ref)) { return true; } try { permissionBackend.currentUser().project(project).refs(ref).check(RefPermission.READ); } catch (AuthException e) { return false; } return true; }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, currentUser.get().state()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { projectUpdated.fire(project.getNameKey(), cmd, currentUser.get().state()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, currentUser.get()); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd); }
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gwtorm.server.OrmException { referenceUpdated.fire(project.getNameKey(), cmd); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("Change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to set work in progress"); } if ((change.getStatus())!= (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("change is " + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is already work in progress"); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.ok(""); }
java.lang.String create() {java.lang.String summaryLine = (originalGroup.isPresent())? group : group;java.util.List<java.lang.String> footers = newjava.util.ArrayList<>(); getFooterForRename().ifPresent(footers::add); getFootersForMemberModifications().forEach(footers::add); getFootersForSubgroupModifications().forEach(footers::add);java.util.Collections.sort(footers);java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); footers.forEach(footerJoiner::add);java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
javajava.lang.String create() {java.lang.String summaryLine = (originalGroup.isPresent())? group : group;java.util.List<java.lang.String> footers = newjava.util.ArrayList<>(); getFooterForRename().ifPresent(footers::add); getFootersForMemberModifications().forEach(footers::add); getFootersForSubgroupModifications().forEach(footers::add);java.util.Collections.sort(footers);java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); footers.forEach(footerJoiner::add);java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
java.lang.String create() {java.lang.String summaryLine = (originalGroup.isPresent())? group : groupjava.util.List<java.lang.String> footers = newjava.util.ArrayList<>(); getFooterForRename().ifPresent(footers::add); getFootersForMemberModifications().forEach(footers::add); getFootersForSubgroupModifications().forEach(footers::add);java.util.Collections.sort(footers);java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); footers.forEach(footerJoiner::add);java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
java.lang.String create() {java.lang.String summaryLine = (originalGroup.isPresent())? group : group; List<java.lang.String> footers = newjava.util.ArrayList<>(); getFooterForRename().ifPresent(footers::add); getFootersForMemberModifications().forEach(footers::add); getFootersForSubgroupModifications().forEach(footers::add);java.util.Collections.sort(footers);java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); footers.forEach(footerJoiner::add);java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
java.lang.String create() {java.lang.String summaryLine = (originalGroup.isPresent())? group : group;java.util.List<java.lang.String> footers = newjava.util.ArrayList<>(); getFooterForRename().ifPresent(footers::add); getFootersForMemberModification().forEach(footers::add); getFootersForSubgroupModification().forEach(footers::add);java.util.Collections.sort(footers);java.util.StringJoiner footerJoiner = newjava.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); footers.forEach(footerJoiner::add);java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case ABANDONED : return true; case MERGED : return false; } return false; }
private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case ABANDONED : return true; case MERGED : return false; default : return false; } }
private boolean isChangeDeletable (com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case ABANDONED : return true; case MERGED : return false; } return false; }
private boolean isChangeDeleted(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : case ABANDONED : return true; case MERGED : return false; } return false; }
private boolean isChangeDeletable(com.google.gerrit.reviewdb.client.Change.Status status) { switch (status) { case NEW : return true; case MERGED : return false; } return false; }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle(("Delete change " + (rsrc.getId()))).setVisible(and(isChangeDeletable(status), perm.testCond(ChangePermission.DELETE))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle(("Delete change " + (rsrc.getId()))).setVisible(and(perm.testCond(ChangePermission.DELETE))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle((("Delete change " + (rsrc.getId()))).setVisible(and(isChangeDeletable(status), perm.testCond(ChangePermission.DELETE))); }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle(("Delete change " + (rsrc.getId()))).setVisible(and(perm.isChangeDeletable(status), perm.testCond(ChangePermission.DELETE))); }
@java @java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel("Delete").setTitle(("Delete change " + (rsrc.getId()))).setVisible(and(isChangeDeletable(status), perm.testCond(ChangePermission.DELETE))); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(isChangeDeletable(rsrc.getChange().getStatus())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("delete not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(isChangeDeletable(rsrc.getChange().getStatus())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(isChangeDeletable(rsrc.getChange().getStatus())))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(isChangeDeletable(rsrc.getChange().getStatus())))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("delete not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (isChangeDeletable(rsrc.getChange().getStatus())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("not permitted"); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkStatePermitsRead(); } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return null; } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(nameKey).check( permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkStatePermitsRead(); } } return new com.google.gerrit.server.project.ProjectResource(state, user.get()); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkStatePermitsRead(); } } return new com.google.gerrit.server.project.ProjectResource(state, user); }
@com.google.gerrit.common.Nullable private com.google.gerrit.server.project.ProjectResource _parse(java.lang.String id, boolean checkAccess) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (id.endsWith(Constants.DOT_GIT_EXT)) { id = id.substring(0, ((id.length()) - (Constants.DOT_GIT_EXT.length()))); } com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(id); com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(nameKey); if (state == null) { return null; } if (checkAccess) { com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { state.checkStatePermitsRead(); } } return new com.google.gerrit.server.project.ProjectResource(state, user.get(), user.get()); }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(projectName).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkStatePermitsRead(); return state; }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(projectName).check( permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkStatePermitsRead(); return state; }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(projectName).check(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkStatePermitsRead(); return state; }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(projectName).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } return state; }
private com.google.gerrit.server.project.ProjectState checkProjectState() throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.project.NoSuchProjectException,java.io.IOException { com.google.gerrit.server.project.ProjectState state = projectCache.checkedGet(projectName); com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; try { permissionBackend.user(user).project(projectName).check(state); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } state.checkStatePermitsRead(); return state; }
java @java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0, ((projectName.length()) - 1)); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); }java.lang.String nameWithoutSuffix = com.google.gerrit.common.ProjectUtil.stripGitSuffix(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner,java.lang.String.format("project %s not found", nameWithoutSuffix)); } com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.permissions.PermissionBackendException |java.io.IOException e) { com.google.gerrit.server.args4j.ProjectHandler.log.warn(("Cannot load project " + nameWithoutSuffix), e); throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } setter.addValue(state); return 1; }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0, ((projectName.length()) - 1)); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); }java.lang.String nameWithoutSuffix = com.google.gerrit.common.ProjectUtil.stripGitSuffix(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner,java.lang.String.format("project %s not found", nameWithoutSuffix)); } com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.permissions.PermissionBackendException |java.io.IOException e) { com.google.gerrit.server.args4j.ProjectHandler.log.warn(("Cannot load project " + nameWithoutSuffix), e); throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } setter.addValue(state); return 1; }
java @java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0, ((projectName.length()) - 1)); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); }java.lang.String nameWithoutSuffix = com.google.gerrit.common.ProjectUtil.stripGitSuffix(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner,java.lang.String.format("project %s not found", nameWithoutSuffix)); } com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; permissionBackend.user(user).project(nameKey).check( permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.permissions.PermissionBackendException |java.io.IOException e) { com.google.gerrit.server.args4j.ProjectHandler.log.warn(("Cannot load project " + nameWithoutSuffix), e); throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } setter.addValue(state); return 1; }
java @java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0, ((projectName.length()) - 1)); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); }java.lang.String nameWithoutSuffix = com.google.gerrit.common.ProjectUtil.stripGitSuffix(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner,java.lang.String.format("Project %s not found", nameWithoutSuffix)); } com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; permissionBackend.user(user).project(nameKey).check(permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.permissions.PermissionBackendException |java.io.IOException e) { com.google.gerrit.server.args4j.ProjectHandler.log.warn(("Cannot load project " + nameWithoutSuffix), e); throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } setter.addValue(state); return 1; }
@java.lang.Override public final int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {java.lang.String projectName = params.getParameter(0); while (projectName.endsWith("/")) { projectName = projectName.substring(0, ((projectName.length()) - 1)); } while (projectName.startsWith("/")) { projectName = projectName.substring(1); }java.lang.String nameWithoutSuffix = com.google.gerrit.common.ProjectUtil.stripGitSuffix(projectName); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(nameWithoutSuffix); com.google.gerrit.server.project.ProjectState state; try { state = projectCache.checkedGet(nameKey); if (state == null) { throw new org.kohsuke.args4j.CmdLineException(owner,java.lang.String.format("project %s not found", nameWithoutSuffix)); } com.google.gerrit.server.permissions.ProjectPermission permissionToCheck = (state.statePermitsRead())? com.google.gerrit.server.permissions.ProjectPermission.ACCESS : com.google.gerrit.server.permissions.ProjectPermission.READ_CONFIG; permissionBackend.user(user).project(nameKey).check( permissionToCheck); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } catch (com.google.gerrit.server.permissions.PermissionBackendException |java.io.IOException e) { com.google.gerrit.server.args4j.ProjectHandler.log.warn(("Cannot load project " + nameWithoutSuffix), e); throw new org.kohsuke.args4j.CmdLineException(owner, new com.google.gerrit.server.project.NoSuchProjectException(nameKey).getMessage()); } setter.addValue(state); return 1; }
public static com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config,java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20 << 20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16384)); }java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite,java.util.concurrent.TimeUnit.MILLISECONDS); }java.lang.Long expireAfterAccess = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterAccess", null); if (expireAfterAccess!= null) { b.expireAfterAccess(expireAfterAccess,java.util.concurrent.TimeUnit.MILLISECONDS); } } catch (java.lang.IllegalArgumentException e) { throw newjava.lang.IllegalArgumentException(("Error getting CacheBuilder for " + name), e); } catch (java.lang.IllegalStateException e) { throw newjava.lang.IllegalStateException(("Error getting CacheBuilder for " + name), e); } return b; }
public static com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config,java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20 << 20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16384)); }java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite,java.util.concurrent.TimeUnit.MILLISECONDS); }java.lang.Long expireAfterAccess = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterAccess", null); if (expireAfterAccess!= null) { b.expireAfterAccess(expireAfterAccess,java.util.concurrent.TimeUnit.MILLISECONDS); } } catch (java.lang.IllegalArgumentException e) { throw newjava.lang.IllegalArgumentException(("error getting CacheBuilder for " + name), e); } catch (java.lang.IllegalStateException e) { throw newjava.lang.IllegalStateException(("error getting CacheBuilder for " + name), e); } return b; }
static com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config,java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20 << 20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16384)); }java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite,java.util.concurrent.TimeUnit.MILLISECONDS); }java.lang.Long expireAfterAccess = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterAccess", null); if (expireAfterAccess!= null) { b.expireAfterAccess(expireAfterAccess,java.util.concurrent.TimeUnit.MILLISECONDS); } } catch (java.lang.IllegalArgumentException e) { throw newjava.lang.IllegalArgumentException(("Error getting CacheBuilder for " + name), e); } catch (java.lang.IllegalStateException e) { throw newjava.lang.IllegalStateException(("Error getting CacheBuilder for " + name), e); } return b; }
private static com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config,java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20 << 20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16384)); }java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite,java.util.concurrent.TimeUnit.MILLISECONDS); }java.lang.Long expireAfterAccess = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterAccess", null); if (expireAfterAccess!= null) { b.expireAfterAccess(expireAfterAccess,java.util.concurrent.TimeUnit.MILLISECONDS); } } catch (java.lang.IllegalArgumentException e) { throw newjava.lang.IllegalArgumentException(("Error getting CacheBuilder for " + name), e); } catch (java.lang.IllegalStateException e) { throw newjava.lang.IllegalStateException(("Error getting CacheBuilder for " + name), e); } return b; }
public static com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> getCacheBuilder(org.eclipse.jgit.lib.Config config,java.lang.String name) { com.google.common.cache.CacheBuilder<java.lang.Object,java.lang.Object> b = com.google.common.cache.CacheBuilder.newBuilder(); try { if ((config.getString("cache", name, "maximumWeight"))!= null) { b.maximumWeight(config.getLong("cache", name, "maximumWeight", (20 << 20))); } if ((config.getString("cache", name, "maximumSize"))!= null) { b.maximumSize(config.getLong("cache", name, "maximumSize", 16384)); }java.lang.Long expireAfterWrite = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterWrite", null); if (expireAfterWrite!= null) { b.expireAfterWrite(expireAfterWrite,java.util.concurrent.TimeUnit.MILLISECONDS); }java.lang.Long expireAfterAccess = com.google.gitiles.ConfigUtil.getDuration(config, "cache", name, "expireAfterAccess", null); if (expireAfterAccess!= null) { b.expireAfterAccess(expireAfterAccess,java.util.concurrent.TimeUnit.MILLISECONDS); } } catch (java.lang.IllegalArgumentException e) { throw newjava.lang.IllegalArgumentException(("Problem getting CacheBuilder for " + name), e); } catch (java.lang.IllegalStateException e) { throw newjava.lang.IllegalStateException(("Error getting CacheBuilder for " + name), e); } return b; }
@java x.annotation.Nullable public staticjava.lang.Long getDuration(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection,java.lang.String name, @java.lang.Nullablejava.lang.Long defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1),java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1)) { return m; } return defaultValue; }
@java x.annotation.Nullable public staticjava.util.concurrent.TimeUnit getDuration(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection,java.lang.String name, @java.lang.Nullablejava.util.concurrent.TimeUnit defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1),java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1)) { return m; } return defaultValue; }
@java x.annotation.Nullable public staticjava.util.concurrent.TimeUnit getDuration(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection,java.lang.String name, @java.lang.Nullablejava.util.concurrent.TimeUnit defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1),java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1) { return m; } return defaultValue; }
@java x.annotation.Nullable public staticjava.util.concurrent.TimeUnit getDuration(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection,java.lang.String name, @java.lang.Nullablejava.util.concurrent.TimeUnit defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1),java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1) && (m < (-1)) { return defaultValue; } return defaultValue; }
@java x.annotation.Nullable public staticjava.util.concurrent.TimeUnit getDuration(org.eclipse.jgit.lib.Config config,java.lang.String section,java.lang.String subsection,java.lang.String name, @java.lang.Nullablejava.util.concurrent.TimeUnit defaultValue) { long m = config.getTimeUnit(section, subsection, name, (-1),java.util.concurrent.TimeUnit.MILLISECONDS); if (m!= (-1) && (m < (-1)) { return m; } return defaultValue; }
@org.junit.Test public void nullAsDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void nullAsDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void nullAsDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("core", null, "blank", ""); long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void nullAsDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("core", null, "blank"); long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void nullAsDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); config.setString("core", null, "blank"); long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isNull(); }
@org.junit.Test public void getDurationCanReturnDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); }
@org.junit.Test public void getDurationCanReturnDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isEqualTo(1000); }
@org.junit.Test public void getDurationCanReturnDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); }
@org.junit.Test public void getDurationCanReturnDefault() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", null); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", null); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); }
@org.junit.Test public void getDurationCanReturnDefault() throwsjava.lang.Exception {java.lang.Long def = 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); assertThat(t).isEqualTo(1000); config.setString("core", null, "blank", ""); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", null, "blank", def); }
@org.junit.Test public void getDurationReturnsDuration() throwsjava.lang.Exception {java.lang.Long def = 2 * 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; config.setString("core", "dht", "timeout", "500 ms"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "5.2 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); fail("IllegalArgumentException"); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo("Invalid time unit value: core.dht.timeout=5.2 sec"); } config.setString("core", "dht", "timeout", "min"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(60000); }
@org.junit.Test public void getDurationReturnsDuration() throwsjava.lang.Exception {java.lang.Long def = 2 * 1000L; org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; config.setString("core", "dht", "timeout", "500 ms"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "5.2 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); fail("IllegalArgumentException"); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo("unsupported time unit value: core.dht.timeout=5.2 sec"); } config.setString("core", "dht", "timeout", "min"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(60000); }
@org.junit.Test public void getDurationReturnsDuration() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; config.setString("core", "dht", "timeout", "1 ms"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "5 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); fail("IllegalArgumentException"); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo("unsupported time unit value: core.dht.timeout=5.2 sec"); } config.setString("core", "dht", "timeout", "60000 min"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(60000); }
@org.junit.Test public void getDurationReturnsDuration() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; config.setString("core", "dht", "timeout", "500 ms"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "5.2 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); fail("IllegalArgumentException"); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo("unsupported time unit value: core.dht.timeout=5.2 sec"); } config.setString("core", "dht", "timeout", "min"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(60000); }
@org.junit.Test public void getDurationReturnsDuration() throwsjava.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config();java.lang.Long t; config.setString("core", "dht", "timeout", "500 ms"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout", "5.2 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); fail("IllegalArgumentException"); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo("Invalid time unit value: core.dht.timeout=5.2 sec"); } config.setString("core", "dht", "timeout", "min"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(60000); }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config,java.util.List<com.google.gerrit.common.data.AccessSection> removals,java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for projects other than " + (allProjects.get()))); } } for (com.google.gerrit.common.data.AccessSection section : additions) {java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid section name"); } com.google.gerrit.server.project.RefPattern.validate(name); } else {java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.collectPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName())) || (pluginCapabilities.contains(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((("Cannot add non-global capability " + (p.getName())) + " to global capabilities")); } } } } } }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config,java.util.List<com.google.gerrit.common.data.AccessSection> removals,java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("cannot edit global capabilities for projects other than " + (allProjects.get()))); } } for (com.google.gerrit.common.data.AccessSection section : additions) {java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid section name"); } com.google.gerrit.server.project.RefPattern.validate(name); } else {java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.collectPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName())) || (pluginCapabilities.contains(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((("cannot add non-global capability " + (p.getName())) + " to global capabilities")); } } } } } }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config,java.util.List<com.google.gerrit.common.data.AccessSection> removals,java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for projects other than " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) {java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid section name"); } com.google.gerrit.server.project.RefPattern.validate(name); } else {java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.collectPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName())) || (pluginCapabilities.contains(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((("Cannot add non-global capability " + (p.getName())) + " to global capabilities")); } } } } }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config,java.util.List<com.google.gerrit.common.data.AccessSection> removals,java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("cannot edit global capabilities for projects other than " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) {java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid section name"); } com.google.gerrit.server.project.RefPattern.validate(name); } else {java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.collectPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName())) || (pluginCapabilities.contains(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((("cannot add non-global capability " + (p.getName())) + " to global capabilities")); } } } } }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config,java.util.List<com.google.gerrit.common.data.AccessSection> removals,java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for projects other than " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) {java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Invalid section name"); } com.google.gerrit.server.project.RefPattern.validate(name); } else {java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.collectPluginCapabilities().keySet(); for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isGlobalCapability(p.getName())) || (pluginCapabilities.contains(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((("Cannot add non-global capability " + (p.getName())) + " to global capabilities")); } } } } }
staticjava.lang.String getShortProjectName(java.lang.String projectName) { int lastIndexSlash = projectName.lastIndexOf("/"); if (lastIndexSlash == 0) { return projectName.substring(1); } return "..." + (projectName.substring((lastIndexSlash + 1))); }
staticjava.lang.String getShortProjectName(java.lang.String projectName) { int lastIndexSlash = projectName.lastIndexOf("/"); if (lastIndexSlash == 0) { return projectName; } return "..." + (projectName.substring((lastIndexSlash + 1))); }
public staticjava.lang.String getShortProjectName(java.lang.String projectName) { int lastIndexSlash = projectName.lastIndexOf("/"); if (lastIndexSlash == 0) { return projectName; } return "..." + (projectName.substring((lastIndexSlash + 1))); }
private staticjava.lang.String getShortProjectName(java.lang.String projectName) { return projectName.substring((projectName.lastIndexOf("/") + 1)); }
staticjava.lang.String getShortProjectName(java.lang.String projectName) { return projectName.substring((projectName.lastIndexOf("/") + 1)); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", change._number)); createArbitraryEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("%s is ABANDONED", change._number)); createArbitraryEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throwsjava.lang.Exception { change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", change._number)); createArbitraryEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("change %s is ABANDONED", change._number)); createArbitraryEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); change.abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", change._number)); createArbitraryEditFor(changeId); }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("change %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication not permitted", denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("Change %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication not permitted", denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("%s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication not permitted", denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("change %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Operation not permitted", denied); } }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException,java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } com.google.gerrit.reviewdb.client.Change change = notes.getChange(); if (!(change.getStatus().isOpen())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format("change %s is %s", change.getChangeId(), change.getStatus())); } try { permissionBackend.currentUser().database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("Update not permitted", denied); } }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.review()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is MERGED", change._number)); createArbitraryEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throwsjava.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("%s is MERGED", change._number)); createArbitraryEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throwsjava.lang.Exception { change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is MERGED", change._number)); createArbitraryEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throwsjava.lang.Exception { gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is MERGED", change._number)); createArbitraryEditFor(changeId); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throwsjava.lang.Exception { createArbitraryEditFor(changeId); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request("delete change", changeId).execute(); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(("delete change " + (changeId))); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(("Delete change " + (changeId))); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(("delete change " + (changeId.get()))).execute(); }
@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(("delete change " + (changeId.get())), changeId).execute(); }
@org.junit.Test public void storedSubmitRecordsWithRequirements() { com.google.gerrit.common.data.SubmitRecord r = com.google.gerrit.server.index.change.ChangeFieldTest.record(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.MAY, "Label-1", null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.OK, "Label-2", 1)); com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement("text can be a long string with special symbols like < > / ; : "short_type", com.google.common.collect.ImmutableMap.of("custom_data", "value")); r.requirements =java.util.Collections.singletonList(sr); com.google.gerrit.server.index.change.ChangeFieldTest.assertStoredRecordRoundTrip(r); }
@org.junit.Test public void storedSubmitRecordsWithRequirements() { com.google.gerrit.common.data.SubmitRecord r = com.google.gerrit.server.index.change.ChangeFieldTest.record(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.MAY, "Label-1", null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.OK, "Label-2", 1)); com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement("text can be a long string with special symbols like < > / ; :", "short_type", com.google.common.collect.ImmutableMap.of("custom_data", "value")); r.requirements =java.util.Collections.singletonList(sr); com.google.gerrit.server.index.change.ChangeFieldTest.assertStoredRecordRoundTrip(r); }
@org.junit.Test public void storedSubmitRecordsWithRequirements() { com.google.gerrit.common.data.SubmitRecord r = com.google.gerrit.server.index.change.ChangeFieldTest.record(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.MAY, "Label-1", null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.OK, "Label-2", 1)); com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement("text can be a long string with special symbols like < > / ; : short_type", com.google.common.collect.ImmutableMap.of("custom_data", "value")); r.requirements =java.util.Collections.singletonList(sr); com.google.gerrit.server.index.change.ChangeFieldTest.assertStoredRecordRoundTrip(r); }
@org.junit.Test public void storedSubmitRecordsWithRequirements() { com.google.gerrit.common.data.SubmitRecord r = com.google.gerrit.server.index.change.ChangeFieldTest.record(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.MAY, "Label-1", null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.OK, "Label-2", 1)); com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement("text can be a long string with special symbols like < > / ; :short_type", com.google.common.collect.ImmutableMap.of("custom_data", "value")); r.requirements =java.util.Collections.singletonList(sr); com.google.gerrit.server.index.change.ChangeFieldTest.assertStoredRecordRoundTrip(r); }
@org.junit.Test public void storedSubmitRecordsWithRequirements() { com.google.gerrit.common.data.SubmitRecord r = com.google.gerrit.server.index.change.ChangeFieldTest.record(SubmitRecord.Status.OK, com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.MAY, "Label-1", null), com.google.gerrit.server.index.change.ChangeFieldTest.label(SubmitRecord.Label.Status.OK, "Label-2", 1)); com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement("some text can be a long string with special symbols like < > / ; : "short_type", com.google.common.collect.ImmutableMap.of("custom_data", "value")); r.requirements =java.util.Collections.singletonList(sr); com.google.gerrit.server.index.change.ChangeFieldTest.assertStoredRecordRoundTrip(r); }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.labels = newjava.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements)!= null) { rec.requirements = newjava.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement req : requirements) { com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement(req.type, req.data); rec.requirements.add(sr); } } return rec; }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels)!= null) { rec.labels = newjava.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy)!= null)? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } return rec; }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; return rec; }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { return new com.google.gerrit.common.data.SubmitRecord(); }
com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { return new com.google.gerrit.common.data.SubmitRecord(); } }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (!(o instanceof com.google.gerrit.common.data.SubmitRequirement)) { return false; } com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(fallbackText, that.fallbackText)) && (java.util.Objects.equals(type, that.type)) && (java.util.Objects.equals(data, that.data)); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (!(o instanceof com.google.gerrit.common.data.SubmitRequirement)) { return false; } com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(fallbackText, that.fallbackText)) && (java.util.Objects.equals(type, that.type)) && (java.util.Objects.equals(data, that.data))); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (!(o instanceof com.google.gerrit.common.data.SubmitRequirement)) { return false; } com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(fallbackText, that.fallbackText))) && (java.util.Objects.equals(type, that.type)) && (java.util.Objects.equals(data, that.data)); }
@java @java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (!(o instanceof com.google.gerrit.common.data.SubmitRequirement)) { return false; } com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(fallbackText, that.fallbackText)) && (java.util.Objects.equals(type, that.type)) && (java.util.Objects.equals(data, that.data)); }
@java @java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (!(o instanceof com.google.gerrit.common.data.SubmitRequirement)) { return false; } com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(fallbackText, that.fallbackText)) && (java.util.Objects.equals(type, that.type)) && (java.util.Objects.equals(data, that.data))); }
publicjava.util.Map<java.lang.String,java.lang.String> data() { return data; }
publicjava.util.Map<java.lang.String,java.lang.String> data () { return data; }
publicjava.util.Map<java.lang.String,java.lang.String> data();
publicjava.util.Map<java.lang.String,java.lang.String> data() { return data(); }
privatejava.util.Map<java.lang.String,java.lang.String> data() { return data; }
publicjava.lang.String fallbackText();
publicjava.lang.String text() { return text; }
publicjava.lang.String fallbackText());
publicjava.lang.String fallbackText(); }
java publicjava.lang.String fallbackText();
@java @java.lang.Override publicjava.lang.String toString() { return (((((((("SubmitRequirement{" + "fallbackText='") + (fallbackText)) + '\'') + "type = '" + (type)) + '\'') + "data = '" + (data)) + '}'; }
@java.lang.Override publicjava.lang.String toString() { return (((((((("SubmitRequirement{" + "fallbackText='") + (fallbackText)) + '\'') + "type = '" + (type)) + '\'') + "data = '" + (data)) + '}'; }
@java @java.lang.Override publicjava.lang.String toString() { return (((((((("SubmitRequirement{" + "fallbackText='") + (fallbackText )) + '\'') + "type = '" + (type)) + '\'') + "data = '" + (data)) + '}'; }
@java @java.lang.Override publicjava.lang.String toString() { return (((((((("SubmitRequirement{" + "fallbackText='") + (fallbackText)) + '\'') + "type=\"" + (type)) + '\'') + "data=\"" + (data)) + '\''); }
@java @java.lang.Override publicjava.lang.String toString() { return (((((((("SubmitRequirement{" + "fallbackText='") + (fallbackText)) + '\'') + "type=\"" + (type)) + '\'') + "data=\"" + (data)) + '\''; }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(fallbackText, type, data); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(type, data); }
@java @java.lang.Override public int hashCode() { returnjava.util.Objects.hash(fallbackText, type, data); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(text, type, data); }
@java @java.lang.Override public int hashCode() { returnjava.util.Objects.hash(fallbackText, type); }
publicjava.lang.String type() { return type; }
publicjava.lang.String type () { return type; }
publicjava.lang.String type();
publicjava.lang.String type() { return type(); }
publicjava.lang.String type() { return type ; }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.startReindexer(name, force)) { stdout.println("Index started"); } else { stdout.println("Failed to reindex, index is already the latest version"); } } else { stdout.println("Failed to reindex, index is unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(("Failed to start reindexer: " + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.startReindexer(name, force)) { stdout.println("Reindexer started"); } else { stdout.println("Failed to reindex, index is already the latest version"); } } else { stdout.println("Failed to reindex, index is unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(("Failed to start reindexer: " + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.startReindexer(name, force)) { stdout.println("index started"); } else { stdout.println("Failed to reindex, index is already the latest version"); } } else { stdout.println("Failed to reindex, index is unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(("Failed to start reindexer: " + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.startReindexer(name, force)) { stdout.println("index started"); } else { stdout.println("failed to reindex, index is already the latest version"); } } else { stdout.println("failed to reindex, index is unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(("failed to start reindexer: " + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.startReindexer(name, force)) { stdout.println("Index started"); } else { stdout.println("Failed to reindex, index is already the latest version"); } } else { stdout.println("Failed to reindex, index is unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die((("Failed to start reindexer: ") + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("activate latest index version"); } else { stdout.println("not activating index, already using latest version"); } } else { stdout.println("not activate index, unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(("Failed to activate latest index: " + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("active latest index version"); } else { stdout.println("not activating index, already using latest version"); } } else { stdout.println("not activate index, unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(("Failed to activate latest index: " + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("activating latest index version"); } else { stdout.println("not activating index, already using latest version"); } } else { stdout.println("not activate index, unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(("Failed to activate latest index: " + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("activate latest index version"); } else { stdout.println("not activating index, already using latest version"); } } else { stdout.println("not activate index, unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die((("Failed to activate latest index: " + (e.getMessage()))); } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if (versionManager.isKnownIndex(name)) { if (versionManager.activateLatestIndex(name)) { stdout.println("activating latest index version"); } else { stdout.println("not activating index, already using latest version"); } } else { stdout.println("not activating index, unknown based on this name"); } } catch (com.google.gerrit.server.index.ReindexerAlreadyRunningException e) { throw die(("Failed to activate latest index: " + (e.getMessage()))); } }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String userName = user.getUserName().orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"));java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get(); accountsUpdateProvider.get().update(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String userName = user.getUserName().orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"));java.util.Optional< com.google.gerrit.server.account.externalids.ExternalId> optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get(); accountsUpdateProvider.get().update(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String userName = user.getUserName().orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceConflictException("Username must be set"));java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get(); accountsUpdateProvider.get().update(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String userName = user.getUserName().orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceConflictException("Username must be set"));java.util.Optional< com.google.gerrit.server.account.externalids.ExternalId> optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get(); accountsUpdateProvider.get().update(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword))); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(newPassword); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user,java.lang.String newPassword) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException {java.lang.String userName = user.getUserName().orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceConflictException("username must be set"));java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> optionalExtId = externalIds.get(ExternalId.Key.create(com.google.gerrit.server.restapi.account.SCHEME_USERNAME, userName)); if (!(optionalExtId.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } com.google.gerrit.server.account.externalids.ExternalId extId = optionalExtId.get(); accountsUpdateProvider.get().update(com.google.gerrit.server.account.externalids.ExternalId.createWithPassword(extId.key(), extId.accountId(), extId.email(), newPassword), com.google.common.base.Strings.none()); return com.google.common.base.Strings.isNullOrEmpty(newPassword)? com.google.gerrit.extensions.restapi.Response.<java.lang.String>none() : com.google.gerrit.extensions.restapi.Response.ok(""); }
@org.junit.Test public void rawDocument() throwsjava.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get();java.util.Optional<com.google.gerrit.index.query.FieldBundle> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.index.QueryOptions.create(com.google.gerrit.index.IndexConfig.createDefault(), 0, 1, indexes.getSearchIndex().getSchema().getStoredFields().keySet())); assertThat(rawFields).isPresent(); assertThat(rawFields.get().getValue(AccountField.ID)).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIdInfos = gApi.accounts().self().getExternalIds();java.util.List<com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper> blobs = newjava.util.ArrayList<>(); for (com.google.gerrit.extensions.common.AccountExternalIdInfo info : externalIdInfos) {java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> extId = externalIds.get(ExternalId.Key.parse(info.identity)); assertThat(extId.isPresent()).isTrue(); blobs.add(new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(extId.get())); } assertThat(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).hasSize(blobs.size()); assertThat(com.google.common.collect.Streams.stream(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).map(( b) -> new com.google.gerrit.server.query.account.ByteArrayWrapper(b)).collect(java.util.Collections.toList())).containsExactlyElementsInblobsExactly(); }
@org.junit.Test public void rawDocument() throwsjava.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get();java.util.Optional<com.google.gerrit.index.query.FieldBundle> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.index.QueryOptions.create(com.google.gerrit.index.IndexConfig.createDefault(), 0, 1, indexes.getSearchIndex().getSchema().getStoredFields().keySet())); assertThat(rawFields).isPresent(); assertThat(rawFields.get().getValue(AccountField.ID)).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIdInfos = gApi.accounts().self().getExternalIds();java.util.List<com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper> blobs = newjava.util.ArrayList<>(); for (com.google.gerrit.extensions.common.AccountExternalIdInfo info : externalIdInfos) {java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> extId = externalIds.get(ExternalId.Key.parse(info.identity)); assertThat(extId.isPresent()).isTrue(); blobs.add(new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(extId.get().toByteArray())); } assertThat(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).hasSize(blobs.size()); assertThat(com.google.common.collect.Streams.stream(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).map(( b) -> new com.google.gerrit.server.query.account.ByteArrayWrapper(b)).collect(java.util.Collections.toList())).containsExactlyElementsInblobsExactly(); }
@org.junit.Test public void rawDocument() throwsjava.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get();java.util.Optional<com.google.gerrit.index.query.FieldBundle> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.index.QueryOptions.create(com.google.gerrit.index.IndexConfig.createDefault(), 0, 1, indexes.getSearchIndex().getSchema().getStoredFields().keySet())); assertThat(rawFields).isPresent(); assertThat(rawFields.get().getValue(AccountField.ID)).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIdInfos = gApi.accounts().self().getExternalIds();java.util.List<com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper> blobs = newjava.util.ArrayList<>(); for (com.google.gerrit.extensions.common.AccountExternalIdInfo info : externalIdInfos) {java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> extId = externalIds.get(ExternalId.Key.parse(info.identity)); assertThat(extId.isPresent()).isTrue(); blobs.add(new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(extId.get().toByteArray())); } assertThat(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).hasSize(blobs.size()); assertThat(com.google.common.collect.Streams.stream(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).map(( b) -> new com.google.gerrit.server.query.account.ByteArrayWrapper(b)).collect(java.util.Collections.toList())).containsExactlyElementsInBlobsExactly(); }
@org.junit.Test public void rawDocument() throwsjava.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get();java.util.Optional<com.google.gerrit.index.query.FieldBundle> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.index.QueryOptions.create(com.google.gerrit.index.IndexConfig.createDefault(), 0, 1, indexes.getSearchIndex().getSchema().getStoredFields().keySet())); assertThat(rawFields).isPresent(); assertThat(rawFields.get().getValue(AccountField.ID)).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIdInfos = gApi.accounts().self().getExternalIds();java.util.List<com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper> blobs = newjava.util.ArrayList<>(); for (com.google.gerrit.extensions.common.AccountExternalIdInfo info : externalIdInfos) {java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> extId = externalIds.get(ExternalId.Key.parse(info.identity)); assertThat(extId.isPresent()).isTrue(); blobs.add(new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(extId.get())); } assertThat(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).hasSize(blobs.size()); assertThat(com.google.common.collect.Streams.stream(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).map(( b) -> new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(b)).collect(java.util.Collections.toList())).containsExactlyElementsInblobsExactly(); }
@org.junit.Test public void rawDocument() throwsjava.lang.Exception { com.google.gerrit.extensions.common.AccountInfo userInfo = gApi.accounts().id(admin.getAccountId().get()).get();java.util.Optional<com.google.gerrit.index.query.FieldBundle> rawFields = indexes.getSearchIndex().getRaw(new com.google.gerrit.reviewdb.client.Account.Id(userInfo._accountId), com.google.gerrit.index.QueryOptions.create(com.google.gerrit.index.IndexConfig.createDefault(), 0, 1, indexes.getSearchIndex().getSchema().getStoredFields().keySet())); assertThat(rawFields).isPresent(); assertThat(rawFields.get().getValue(AccountField.ID)).isEqualTo(userInfo._accountId); if ((getSchemaVersion()) < 6) { return; }java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> externalIdInfos = gApi.accounts().self().getExternalIds();java.util.List<com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper> blobs = newjava.util.ArrayList<>(); for (com.google.gerrit.extensions.common.AccountExternalIdInfo info : externalIdInfos) {java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> extId = externalIds.get(ExternalId.Key.parse(info.identity)); assertThat(extId.isPresent()).isTrue(); blobs.add(new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(extId.get())); } assertThat(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).hasSize(blobs.size()); assertThat(com.google.common.collect.Streams.stream(rawFields.get().getValue(AccountField.EXTERNAL_ID_STATE)).map(( b) -> new com.google.gerrit.server.query.account.AbstractQueryAccountsTest.ByteArrayWrapper(b)).collect(java.util.Collections.toList())).containsExactlyElementsInBlobsExactly(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(tag)) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); resource.getProjectState().checkStatePermitsWrite(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(tag)) { throw new com.google.gerrit.extensions.restapi.AuthException((("not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); resource.getProjectState().checkStatePermitsWrite(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(tag)) { throw new com.google.gerrit.extensions.restapi.AuthException(("Not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); resource.getProjectState().checkStatePermitsWrite(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); permissionBackend.currentUser().project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); resource.getProjectState().checkStatePermitsWrite(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.TagResource resource, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException {java.lang.String tag = com.google.gerrit.server.project.RefUtil.normalizeTagRef(resource.getTagInfo().ref); if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(tag)) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to delete " + tag)); } permissionBackend.currentUser().project(resource.getNameKey()).ref(tag).check(RefPermission.DELETE); resource.getProjectState().checkStatePermitsWrite(); deleteRefFactory.create(resource).ref(tag).delete(); return com.google.gerrit.extensions.restapi.Response.empty(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkStatePermitsWrite(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException((("not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkStatePermitsWrite(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getRef()).check(RefPermission.DELETE); rsrc.getProjectState().checkStatePermitsWrite(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkStatePermitsWrite(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException { if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(rsrc.getBranchKey().get())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to delete branch " + (rsrc.getBranchKey().get()))); } permissionBackend.currentUser().ref(rsrc.getBranchKey()).check(RefPermission.DELETE); rsrc.getProjectState().checkStatePermitsWrite(); if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((("branch " + (rsrc.getBranchKey())) + " has open changes")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).prefix(com.google.gerrit.server.restapi.project.R_HEADS).delete(); return com.google.gerrit.extensions.restapi.Response.none(); };
public static boolean isMetaConfigRef(java.lang.String ref) { return com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref); }
public static boolean isConfigRef(java.lang.String ref) { return com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref); }
private static boolean isMetaConfigRef(java.lang.String ref) { return com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref); }
public static boolean isConfigRef(java.lang.String ref) { return com.google.gerrit.reviewdb.client.RefNames.CONFIG.equals(ref); }
public static boolean isMetaConfigRef(java.lang.String ref) { return (com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG.equals(ref)); }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.statePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.statePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException(e); } }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.statePermitsWrite(); }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return true; } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } }
private boolean canDelete(org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gerrit.server.permissions.PermissionBackendException { try { permissions.ref(cmd.getRefName()).check(RefPermission.DELETE); return projectState.statePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(ref.getName())) { info.canDelete = true; } else { info.canDelete = (((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite()))? true : null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(ref.getName())) { info.canDelete = false; } else { info.canDelete = (((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite()))? true : null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(ref.getName())) { info.canDelete = null; } else { info.canDelete = (((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite()))? true : null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(ref.getName())) { info.canDelete = (((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite()))? true : null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user,java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId())!= null)? ref.getObjectId().name() : null; if (com.google.gerrit.reviewdb.client.RefNames.isMetaConfigRef(ref.getName())) { info.canDelete = (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite()); } else { info.canDelete = (((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) && (projectState.statePermitsWrite()))? true : null; } com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = newjava.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); }java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(ref.getName(), ref.getName()); info.webLinks = (links.isEmpty())? null : links; return info; }
@org.junit.Test public void storeThenQueryNotVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryNotVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())))thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryNotVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryNotVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()))).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryNotVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()))).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void storeThenQueryVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doNothing().when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY);java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); }
@org.junit.Test public void storeThenQueryVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())))thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doNothing().when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY);java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); }
@org.junit.Test public void storeThenQueryVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()))).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doNothing().when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY);java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); }
@org.junit.Test public void storeThenQueryVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()))).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doNothing().when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY);java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); }
@org.junit.Test public void storeThenQueryVisible() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doNothing().when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY);java.lang.String json = new com.google.gson.Gson().toJson(mockEvent); assertThat(events).containsExactly(json); }
@java.lang.Override publicjava.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); }java.util.List<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry> entries = newjava.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String,java.util.Collection<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) {java.lang.String projectName = entry.getKey(); try { permissionBackend.user(userProvider.get()).project(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); entries.addAll(entry.getValue()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn("Cannot check project access permission", e); } } return sortedEventsFromEntries(entries); }
@java.lang.Override publicjava.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); }java.util.List<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry> entries = newjava.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String,java.util.Collection<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) {java.lang.String projectName = entry.getKey(); try { permissionBackend.user(userProvider).project(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); entries.addAll(entry.getValue()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn("Cannot check project access permission", e); } } return sortedEventsFromEntries(entries); }
@java.lang.Override publicjava.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.EventsLogException(); }java.util.List<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry> entries = newjava.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String,java.util.Collection<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) {java.lang.String projectName = entry.getKey(); try { permissionBackend.user(userProvider.get()).project(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); entries.addAll(entry.getValue()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn("Cannot check project access permission", e); } } return sortedEventsFromEntries(entries); }
@java.lang.Override publicjava.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); }java.util.List<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry> entries = newjava.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String,java.util.Collection<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) {java.lang.String projectName = entry.getKey(); try { permissionBackend.user(userProvider.get()).project(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); entries.addAll(entry.getValue()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn("cannot check project access permission", e); } } return sortedEventsFromEntries(entries); }
@java.lang.Override publicjava.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.EventsLogException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.EventsLogException(); }java.util.List<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry> entries = newjava.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String,java.util.Collection<com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) {java.lang.String projectName = entry.getKey(); try { permissionBackend.user(userProvider).project(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)).check(ProjectPermission.ACCESS); entries.addAll(entry.getValue()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn("Cannot check project access permission", e); } } return sortedEventsFromEntries(entries); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()))).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get())))thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throwsjava.lang.Exception { when(permissionBackendMock.user(userProviderMock.get()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent);java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
privatejava.lang.Object logo() { if ((logoUrl) == null) { return null; }java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } else if (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(url)) { return com.google.template.soy.shared.internal.Sanitizers.filterImageDataUri(url); } else { return SharedUtility.IMAGE_URI_INNOCUOUS_OUTPUT; } }
privatejava.lang.Object logo() { if ((logoUrl) == null) { return null; }java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } else if (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(url)) { return com.google.template.soy.shared.internal.Sanitizers.filterImageDataUri(url); } else { return com.google.template.soy.shared.internal.Sanitizers.filterImageUri(url); } }
privatejava.lang.Object logo() { if ((logoUrl) == null) { return null; }java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } else if (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(url)) { return com.google.template.soy.shared.internal.Sanitizers.filterImageDataUri(url); } else { return null; } }
privatejava.lang.Object logo() { if ((logoUrl) == null) { return null; }java.lang.String url = fmt.image(logoUrl); if (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(url)) { return url; } else if (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(url)) { return com.google.template.soy.shared.internal.Sanitizers.filterImageDataUri(url); } else { return com.google.template.soy.shared.internal.Sanitizers.filterImageURI(url); } }
privatejava.lang.Object logo() { if ((logoUrl) == null) { return null; }java.lang.String url = fmt.image(logoUrl); return url; }
javajava.lang.String inline(@java x.annotation.Nullablejava.lang.String markdownPath,java.lang.String imagePath) {java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return SharedUtility.IMAGE_URI_INNOCUOUS_OUTPUT; }
javajava.lang.String inline(@java x.annotation.Nullablejava.lang.String markdownPath,java.lang.String imagePath) {java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new
javajava.lang.String inline(@java x.annotation.Nullablejava.lang.String markdownPath,java.lang.String imagePath) {java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com
javajava.lang.String inline(@java x.annotation.Nullablejava.lang.String markdownPath,java.lang.String imagePath) {java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(com.google.common.base.Suppliers.ofInstance(new com
javajava.lang.String inline(@java x.annotation.Nullablejava.lang.String markdownPath,java.lang.String imagePath) {java.lang.String data = inlineMaybe(markdownPath, imagePath); if (data!= null) { return data; } return com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance(new com.google.common.base.Suppliers.ofInstance
@com.google.common.annotations.VisibleForTestingjava.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidMailtoUri(target))) { return target; } else if (target.startsWith("git:")) { if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } return com.google.gitiles.GitilesView.rootedDoc(); }java.lang.String anchor = ""; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); }java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((dest == null) || ((view) == null)) { return com.google.gitiles.GitilesView.rootedDoc(); } else { dest = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }
@com.google.common.annotations.VisibleForTestingjava.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidMailtoUri(target))) { return target; } else if (target.startsWith("git:")) { if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } return com.google.gitiles.GitilesView.rootedDoc(); }java.lang.String anchor = ""; int hash = target.indexOf('#'); if (hash >= 0) { anchor = target.substring(hash); target = target.substring(0, hash); }java.lang.String dest = com.google.gitiles.doc.PathResolver.resolve(filePath, target); if ((dest == null) || ((view) == null)) { return com.google.gitiles.GitilesView.rootedDoc(); } else { b = com.google.gitiles.GitilesView.path(); } dest = b.copyFrom(view).setPathPart(dest).build().toUrl(); return (com.google.gitiles.doc.PathResolver.relative(requestUri, dest)) + anchor; }
@com.google.common.annotations.VisibleForTestingjava.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidMailtoUri(target))) { return target; } else if (target.startsWith("git:")) { if (com.google.gitiles.doc.html.HtmlBuilder.isValidGitUri(target)) { return target; } return com.google.gitiles.GitilesView.rootedDoc(); } else { return com.google.gitiles.GitilesView.path(); } }
@com.google.common.annotations.VisibleForTestingjava.lang.String href(java.lang.String target) { if (((target.startsWith("#")) || (com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(target))) || (com.google.gitiles.doc.html.HtmlBuilder.isValidMailtoUri(target))) { return target; } else if (target.startsWith("git:")) { return target; } return com.google.gitiles.GitilesView.rootedDoc(); }
@com.google.common.annotations.VisibleForTestingjava.lang.String href(java.lang.String target) { return com.google.gitiles.doc.PathResolver.resolve(filePath, target); }
javajava.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return SharedUtility.IMAGE_URI_INNOCUOUS_OUTPUT; }
javajava.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest); }
javajava.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest)); }
javajava.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader)!= null) { return imageLoader.inline(filePath, dest); } return com.google.gitiles.doc.html.HtmlBuilder.isImageUri(dest); }
javajava.lang.String image(java.lang.String dest) { return dest; }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfInvalidLabel() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Not-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("This is not a configured label"); revision.review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfInvalidLabel() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Not-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("label is not a configured label"); revision.review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfInvalidLabel() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Not-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("User is not a configured label"); revision.review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfInvalidLabel() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Not-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("user is not a configured label"); revision.review(in); }
@org.junit.Test(name = "change.strictLabels", value = "true") public void voteOnBehalfOfInvalidLabel() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Not-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("This is not a configured label"); revision.review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void strictLabelVotes() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Verified", (-1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("label \"Verified\" is not a configured label"); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void strictLabelVotes() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Verified", (1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("label \"Verified\" is not a configured label"); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void strictLabelVotes() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Verified", (1, -1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("label \"Verified\" is not a configured label"); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void strictLabelVotes() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Verified", (-1)); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("label \"Verified\" is not a configured label"); gApi.changes().id(r.getChangeId()).review(in); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void strictLabelVotes() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); }
@org.junit.Test public void nonStrictLabelVotesPerDefault() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus();java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Verified", (-1)); in.label("Code-Style", 1); in.label("Library-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().keySet()).containsExactly("Code-Review"); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Code-Review", 42); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); }
@org.junit.Test public void nonStrictLabelVotesPerDefault() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus();java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.approve(); in.label("Verified", (-1)); in.label("Code-Style", 1); in.label("Library-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().keySet()).containsExactly("Code-Review"); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Code-Review", 42); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); }
@org.junit.Test public void nonStrictLabelVotesPerDefault() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus();java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Verified", (-1)); in.label("Code-Style", 1); in.label("Library-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().keySet()).containsExactly("Code-Review"); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Code-Review", 42); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); }
@org.junit.Test public void nonStrictLabelVotesPerDefault() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus();java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Verified", (-1)); in.label("Code-Style", 1); in.label("Library-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().keySet()).containsExactly("Code-Review"); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Code-Review", 42); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isFalse(); }
@org.junit.Test public void nonStrictLabelVotesPerDefault() throwsjava.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus();java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.approve(); in.label("Verified", (-1)); in.label("Code-Style", 1); in.label("Library-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().keySet()).containsExactly("Code-Review"); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Code-Review", 42); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(((short) (2))); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredWithoutStrictLabels() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Code-Review", 1); in.label("Not-A-Label", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainKey("Not-A-Label"); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredWithoutStrictLabels() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Code-Review", 1); in.label("Not-A-Label", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainKey("Code-Review"); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredWithoutStrictLabels() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Code-Review", 1); in.label("Not-A-Label", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainKey("not-A-Label"); }
@org.junit.Test public void reviewOnBehalfOfInvalidLabelIgnoredWithoutStrictLabels() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Code-Review", 1); in.label("Not-A-Label", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainKey("Not-A-Label"); }
@org.junit.Test public void voteOnBehalfOfInvalidLabelIgnoredWithoutStrictLabels() throwsjava.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Code-Review", 1); in.label("Not-A-Label", 5); revision.review(in); assertThat(gApi.changes().id(r.getChangeId()).get().labels).doesNotContainKey("Not-A-Label"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.Capability resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create("ok\n"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.Capability capability) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create("ok\n"); }
@java @java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.Capability resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create("ok\n"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.Capability resource) { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create("ok\n"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.account.AccountResource.Capability resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { permissionBackend.checkDefault(); return com.google.gerrit.extensions.restapi.BinaryResult.create(("ok\n")); }
private staticjava.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission changePermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.changePermissionName(changePermission).orElseThrow(() -> newjava.lang.IllegalStateException()); }
private staticjava.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission changePermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.changePermissionName(changePermission).orElseThrow(() -> newjava.lang.IllegalArgumentException()); }
private staticjava.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission changePermission) { return com.google.gerrit.server.permissions.DefaultPermissionMapping.changePermissionName(changePermission).orElseThrow(() -> newjava.lang.IllegalStateException()); }
private staticjava.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission changePermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.changePermissionName(changePermission); }
private staticjava.lang.String changePermissionName(com.google.gerrit.server.permissions.ChangePermission changePermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.changePermissionName(changePermission).orElseThrow(() ->java.lang.IllegalStateException()); }
private staticjava.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission refPermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.refPermissionName(refPermission); }
private staticjava.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission refPermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.refPermissionName(refPermission.name()); }
private staticjava.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission refPermission) { return refPermission.name().orElseThrow(() -> newjava.lang.IllegalStateException()); }
private staticjava.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission refPermission) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.refPermissionName(refPermission.getRef()); }
private staticjava.lang.String refPermissionName(com.google.gerrit.server.permissions.RefPermission refPermission) { return refPermission.name(); }
@java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); }java.util.Map<java.lang.String,java.lang.Object> have = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(rsrc.getUser()); addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String,java.lang.Object>>() {}.getType()); }
java @java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); }java.util.Map<java.lang.String,java.lang.Object> have = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(rsrc.getUser()); addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String,java.lang.Object>>() {}.getType()); }
@java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); }java.util.Map<java.lang.String,java.lang.Object> have = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(rsrc.getUser()); addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String,java.lang.Object>>() {}.getType()); }
java @java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); }java.util.Map<java.lang.String,java.lang.Object> have = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits; addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String,java.lang.Object>>() {}.getType()); }
java @java.lang.Override publicjava.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.WithUser perm = permissionBackend.currentUser(); if ((self.get())!= (rsrc.getUser())) { perm.check(GlobalPermission.ADMINISTRATE_SERVER); perm = permissionBackend.user(rsrc.getUser()); }java.util.Map<java.lang.String,java.lang.Object> have = newjava.util.LinkedHashMap<>(); for (com.google.gerrit.extensions.api.access.GlobalOrPluginPermission p : perm.test(permissionsToTest())) { have.put(p.permissionName(), true); } com.google.gerrit.server.account.AccountLimits limits = limitsFactory.create(rsrc.getUser()); addRanges(have, limits); addPriority(have, limits); return OutputFormat.JSON.newGson().toJsonTree(have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String,java.lang.Object>>() {}); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.IdentifiedUser target = parent.getUser(); if ((self.get())!= target) { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability(target, perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability(target, perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.IdentifiedUser target = parent.getUser(); if ((self.get())!= target) { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = parse(id); return new com.google.gerrit.server.account.AccountResource.Capability(target, perm.permissionName()); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.IdentifiedUser target = parent.getUser(); if ((self.get())!= target) { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability(target, perm.permissionName()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.Capability parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.checkDefault(); com.google.gerrit.server.IdentifiedUser target = parent.getUser(); if ((self.get())!= target) { permissionBackend.currentUser().check(GlobalPermission.ADMINISTRATE_SERVER); } com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm = parse(id); if (permissionBackend.user(target).test(perm)) { return new com.google.gerrit.server.account.AccountResource.Capability(target); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
com.google.gerrit.extensions.api.access.GlobalOrPluginPermission parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException {java.lang.String name = id.get();java.util.Optional<com.google.gerrit.server.permissions.GlobalPermission> perm = com.google.gerrit.server.permissions.DefaultPermissionMappings.globalPermission(name); if (perm.isPresent()) { return perm.get(); } int dash = name.lastIndexOf('-'); if (dash < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }java.lang.String pluginName = name.substring(0, dash);java.lang.String capability = name.substring((dash + 1)); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }
com.google.gerrit.extensions.api.access.GlobalOrPluginPermission parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException {java.lang.String name = id.get();java.util.Optional<com.google.gerrit.server.permissions.GlobalPermission> perm = com.google.gerrit.server.permissions.DefaultPermissionMappings.globalPermission(name); if (perm.isPresent()) { return perm.get(); } int dash = name.lastIndexOf('-'); if (dash < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }java.lang.String pluginName = name.substring(0, dash);java.lang.String capability = name.substring((dash + 1)); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.GlobalOrPluginPermission(pluginName, capability); }
com.google.gerrit.extensions.api.access.GlobalOrPluginPermission parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException {java.lang.String name = id.get(); com.google.gerrit.server.permissions.GlobalPermission perm = com.google.gerrit.server.permissions.DefaultPermissionMappings.globalPermission(name); if (perm.isPresent()) { return perm.get(); } int dash = name.lastIndexOf('-'); if (dash < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }java.lang.String pluginName = name.substring(0, dash);java.lang.String capability = name.substring((dash + 1)); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }
private com.google.gerrit.extensions.api.access.GlobalOrPluginPermission parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException {java.lang.String name = id.get();java.util.Optional<com.google.gerrit.server.permissions.GlobalPermission> perm = com.google.gerrit.server.permissions.DefaultPermissionMappings.globalPermission(name); if (perm.isPresent()) { return perm.get(); } int dash = name.lastIndexOf('-'); if (dash < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }java.lang.String pluginName = name.substring(0, dash);java.lang.String capability = name.substring((dash + 1)); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, capability); }
com.google.gerrit.extensions.api.access.GlobalOrPluginPermission parse(com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException {java.lang.String name = id.get(); com.google.gerrit.server.permissions.GlobalPermission perm = com.google.gerrit.server.permissions.DefaultPermissionMappings.globalPermission(name); if (perm.isPresent()) { return perm.get(); } int dash = name.lastIndexOf('-'); if (dash < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }java.lang.String pluginName = name.substring(0, dash);java.lang.String capability = name.substring((dash + 1)); if ((pluginName.isEmpty()) || (capability.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.extensions.api.access.GlobalOrPluginPermission(pluginName, capability); }
public boolean isDefault() { return false; }
public boolean isDefault() { return true; }
public boolean isDraft() { return isDraft(); }
public com.google.gerrit.reviewdb.client.Account.Id getAccountId();
public com.google.gerrit.reviewdb.client.Project.NameKey projectName;
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Gerrit permissions not used on this server"); } }
private void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Gerrit permissions not used on this server"); } }
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (isDefault()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Gerrit permissions not used on this server"); } }
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Gerrit permissions not allowed on this server"); } }
public void checkDefault() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if (!(isDefault())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("Gerrit permissions not permitted on this server"); } }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.lang.IllegalAccessException,java.lang.NoSuchFieldException { permissionBackend.checkDefault(); return com.google.common.collect.ImmutableMap.<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo>builder().putAll(collectCoreCapabilities()).putAll(collectPluginCapabilities()).build(); }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { permissionBackend.checkDefault(); return com.google.common.collect.ImmutableMap.<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo>builder().putAll(collectCoreCapabilities()).putAll(collectPluginCapabilities()).build(); }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.lang.IllegalAccessException,java.lang.NoSuchFieldException { return com.google.common.collect.ImmutableMap.<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo>builder().putAll(collectCoreCapabilities()).putAll(collectPluginCapabilities()).build(); }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.lang.IllegalAccessException,java.lang.NoSuchFieldException { permissionBackend.checkDefault(); return com.google.common.collect.ImmutableMap.builder().putAll(collectCoreCapabilities()).putAll(collectPluginCapabilities()).build(); }
@java.lang.Override publicjava.util.Map<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo> apply(com.google.gerrit.server.config.ConfigResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException,java.lang.IllegalAccessException,java.lang.NoSuchFieldException { permissionBackend.checkDefault(); return com.google.common.collect.ImmutableMap.<java.lang.String, com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo>builder().putAll(collectCoreCapabilities()).putAll(collectPluginsCapabilities()).build(); }
@java.lang.Override public boolean isDefault() { return true; }
@java.lang.Override public boolean isDefault() { return false; }
@java @java.lang.Override public boolean isDefault() { return true; }
@java @java.lang.Override public boolean isDefault() { return false; }
@java.lang.Override public boolean isDefault() { return com.google.gerrit.reviewdb.client.Account.isActive(); }
privatejava.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixInvalidSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get()));java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = newjava.util.ArrayList(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey fixedKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(),java.lang.Math.max(((o.max(keys).id().get()) + 1), 1)), minKey.sshPublicKey());java.util.Collections.replaceAll(fixedKeys, minKey, fixedKey); minKey = o.min(fixedKeys); } return fixedKeys; }
privatejava.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixInvalidSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get()));java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = newjava.util.ArrayList(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey. id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey fixedKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(),java.lang.Math.max(((o.max(keys).id().get()) + 1), 1)), minKey.sshPublicKey());java.util.Collections.replaceAll(fixedKeys, minKey, fixedKey); minKey = o.min(fixedKeys); } return fixedKeys; }
java privatejava.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixInvalidSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get()));java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = newjava.util.ArrayList(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey fixedKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(),java.lang.Math.max(((o.max(keys).id().get()) + 1), 1)), minKey.sshPublicKey());java.util.Collections.replaceAll(fixedKeys, minKey, fixedKey); minKey = o.min(fixedKeys); } return fixedKeys; }
java.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixInvalidSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get()));java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = newjava.util.ArrayList(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey.id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey fixedKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(),java.lang.Math.max(((o.max(keys).id().get()) + 1), 1)), minKey.sshPublicKey());java.util.Collections.replaceAll(fixedKeys, minKey, fixedKey); minKey = o.min(fixedKeys); } return fixedKeys; }
java privatejava.util.Collection<com.google.gerrit.server.account.AccountSshKey> fixInvalidSequenceNumbers(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> keys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get()));java.util.List<com.google.gerrit.server.account.AccountSshKey> fixedKeys = newjava.util.ArrayList(keys); com.google.gerrit.server.account.AccountSshKey minKey = o.min(keys); while ((minKey. id().get()) <= 0) { com.google.gerrit.server.account.AccountSshKey fixedKey = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(minKey.id().getParentKey(),java.lang.Math.max(((o.max(keys).id().get()) + 1), 1)), minKey.sshPublicKey());java.util.Collections.replaceAll(fixedKeys, minKey, fixedKey); minKey = o.min(fixedKeys); } return fixedKeys; }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Marking SSH key " + (k.id())) + " invalid"); authorizedKeys.markKeyInvalid(k.account(), k.id()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id())) + " invalid"), e); } }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Marking SSH key " + (k.id()) + " invalid")); authorizedKeys.markKeyInvalid(k.account(), k.id()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id()) + " invalid"), e); } }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Marking SSH key " + (k.id())) + " invalid"); authorizedKeys.markKeyInvalid(k.account(), k.id()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id())) + " invalid", e); } }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Marking SSH key " + (k.id())) + " invalid"); authorizedKeys.markKeyInvalid(k.account(), k.id()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id()) + " invalid"), e); } }
private void markInvalid(com.google.gerrit.server.account.AccountSshKey k) { try { com.google.gerrit.sshd.SshKeyCacheImpl.log.info((("Marking SSH key " + (k.id())) + " invalid")); authorizedKeys.markKeyInvalid(k.account(), k.id()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error((("Failed to mark SSH key " + (k.id())) + " invalid"), e); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(id, encoded); }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.account.AccountSshKey.create(id, encoded); }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) { return new com.google.gerrit.server.account.AccountSshKey(id, encoded); }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create (id, encoded); }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) { return com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.server.account.SshKey.encode(encoded)); }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.OutOfMemoryError e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); } }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.SshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.OutOfMemoryError e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); } }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.OutOfMemoryError e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); throw e; } }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) throws com.google.gwtorm.server.OrmException { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.OutOfMemoryError e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); } }
private void add(java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl, com.google.gerrit.server.account.AccountSshKey k) throws com.google.gwtorm.server.OrmException { try { kl.add(new com.google.gerrit.sshd.SshKeyCacheEntry(k.id(), com.google.gerrit.sshd.SshUtil.parse(k))); } catch (java.lang.OutOfMemoryError e) { throw e; } catch (java.lang.Throwable e) { markInvalid(k); throw e; } }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource.SshKey(user.asIdentifiedUser(), i.sshPublicKey), null); }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource.SshKey(user.getAccountId(), i.seq), null); }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource.SshKey(user.asIdentifiedUser(), i.sshPublicKey, null)); }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { deleteSshKey.apply(i); }
private void deleteSshKey(com.google.gerrit.extensions.common.SshKeyInfo i) { deleteSshKey.apply(new com.google.gerrit.server.account.AccountResource.SshKey(user.asIdentifiedUser(), i.sshPublicKey), null); }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { com.google.gerrit.extensions.common.SshKeyInfo info = new com.google.gerrit.extensions.common.SshKeyInfo(); info.seq = sshKey.id(); info.sshPublicKey = sshKey.sshPublicKey(); info.encodedKey = sshKey.encodedKey(); info.algorithm = sshKey.algorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.comment()); info.valid = sshKey.valid(); return info; }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { return new com.google.gerrit.extensions.common.SshKeyInfo(); }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { return new com.google.gerrit.extensions.common.SshKeyInfo(sshKey); }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { return new com.google.gerrit.extensions.common.SshKeyInfo(sshKey.id()); }
public static com.google.gerrit.extensions.common.SshKeyInfo newSshKeyInfo(com.google.gerrit.server.account.AccountSshKey sshKey) { return new com.google.gerrit.extensions.common.SshKeyInfo(sshKey.id(), sshKey.encodedKey()); }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.valid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.isValid())) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); }
@java.lang.Override publicjava.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); }
@java.lang.Override publicjava.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throwsjava.lang.Exception { com.google.gerrit.server.account.externalids.ExternalId user = externalIds.get(ExternalId.Key.create(com.google.gerrit.sshd.SCHEME_USERNAME, username)); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; }java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = newjava.util.ArrayList<>(4); for (com.google.gerrit.server.account.AccountSshKey k : authorizedKeys.getKeys(user.accountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } returnjava.util.Collections.unmodifiableList(kl); };
private boolean markKeyInvalid(int seq) { checkLoaded();java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get(seq); if ((key.isPresent()) && (key.get().valid())) { keys.add((seq - 1),java.util.Optional.of(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get())); return true; } return false; }
private boolean markKeyInvalid(int seq) { checkLoaded();java.util.Optional<com.google.gerrit.server.account.AccountSshKey > key = keys.get(seq); if ((key.isPresent()) && (key.get().valid())) { keys.add((seq - 1),java.util.Optional.of(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get())); return true; } return false; }
private boolean markKeyInvalid(int seq) { checkLoaded();java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get(seq); if ((key.isPresent()) && (key.get().valid())) { keys.add((seq - 1),java.util.Optional.of(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get()))); return true; } return false; }
private boolean markKeyInvalid(int seq) { checkLoaded();java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get(seq - 1); if ((key.isPresent()) && (key.get().valid())) { keys.add((seq - 1),java.util.Optional.of(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get())); return true; } return false; }
private boolean markKeyInvalid(int seq) { checkLoaded();java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key = keys.get(seq); if ((key.isPresent()) && (key.get().valid())) { keys.add((seq - 1),java.util.Optional.of(com.google.gerrit.server.account.AccountSshKey.createInvalid(key.get())); } return false; }
public abstract com.google.gerrit.server.account.AccountSshKey.Id id();
private abstract com.google.gerrit.server.account.AccountSshKey.Id id();
public com.google.gerrit.server.account.AccountSshKey.Id id();
public abstract com.google.gerrit.server.account.AccountSshKey.Id id ();
public abstract com.google.gerrit.server.account.AccountSshKey.Id id;
public com.google.gerrit.server.account.AccountSshKey.Builder setId(com.google.gerrit.server.account.AccountSshKey.Id id);
public abstract void setId(com.google.gerrit.server.account.AccountSshKey.Id id);
public abstract com.google.gerrit.server.account.AccountSshKey.Builder setId(java.lang.String id);
public abstract com.google.gerrit.server.account.AccountSshKey.Id id();
public abstract com.google.gerrit.server.account.AccountSshKey.Builder setId(com.google.gerrit.server.account.Id id);
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, false); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, true); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return createInvalid(id, sshPublicKey, false); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, false) ; }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); return key; } catch (java.security.NoSuchAlgorithmException |java.security.spec.InvalidKeySpecException e) { throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyCreatorImpl.log.error("Cannot parse SSH key", e); throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException |java.security.spec.InvalidKeySpecException e) { throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } }
public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException |java.security.spec.InvalidKeySpecException e) { throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { com.google.gerrit.sshd.SshKeyCreatorImpl.log.error("Cannot parse SSH key", e); throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; } catch (java.security.NoSuchAlgorithmException |java.security.spec.InvalidKeySpecException e) { throw new com.google.gerrit.common.errors.InvalidSshKeyException(); } catch (java.security.NoSuchProviderException e) { throw new com.google.gerrit.sshd.SshKeyCreatorImpl.log.error("Cannot parse SSH key", e); } }
@java.lang.Override public com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String encoded) throws com.google.gerrit.common.errors.InvalidSshKeyException { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(id, com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey(encoded)); com.google.gerrit.sshd.SshUtil.parse(key); return key; }
public staticjava.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String s) {java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = newjava.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\r?\\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX)) {java.lang.String pub = line.substring(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX.length()); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), pub); keys.add(java.util.Optional.of(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_COMMENT)) { keys.add(java.util.Optional.empty()); seq++; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), line); keys.add(java.util.Optional.of(key)); } } return keys; }
private staticjava.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String s) {java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = newjava.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\r?\\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX)) {java.lang.String pub = line.substring(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX.length()); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), pub); keys.add(java.util.Optional.of(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_COMMENT)) { keys.add(java.util.Optional.empty()); seq++; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), line); keys.add(java.util.Optional.of(key)); } } return keys; }
public staticjava.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String s) {java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = newjava.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\r?\\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX)) {java.lang.String pub = line.substring(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX.length()); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid (new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), pub); keys.add(java.util.Optional.of(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_COMMENT)) { keys.add(java.util.Optional.empty()); seq++; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), line); keys.add(java.util.Optional.of(key)); } } return keys; }
public staticjava.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String s) {java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = newjava.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\r?\\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX)) {java.lang.String pub = line.substring(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX.length()); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), pub); keys.add(java.util.Optional.of(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_COMMENT)) { keys.add(java.util.Optional.empty()); seq++; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), line); keys.add(java.util.Optional.of(key)); } } return keys; }
public staticjava.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parse(com.google.gerrit.reviewdb.client.Account.Id accountId,java.lang.String s) {java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys = newjava.util.ArrayList<>(); int seq = 1; for (java.lang.String line : s.split("\\r?\\n")) { line = line.trim(); if (line.isEmpty()) { continue; } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX)) {java.lang.String pub = line.substring(com.google.gerrit.server.account.AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX.length()); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), pub); keys.add(java.util.Optional.of(key)); } else if (line.startsWith(com.google.gerrit.server.account.AuthorizedKeys.DELETED_KEY_COMMENT)) { keys.add(java.util.Optional.empty()); seq++; } else if (line.startsWith("#")) { continue; } else { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create (new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (seq++)), line); keys.add(java.util.Optional.of(key)); } } return keys; }
@org.junit.Test public void validity() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }
@org.junit.Test public void validity() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1 ), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }
@org.junit.Test public void validity() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key).isTrue(); }
@org.junit.Test public void validity() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }
@org.junit.Test public void validity() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }
@org.junit.Test public void getters() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); }
@org.junit.Test public void getters() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(")); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); }
@org.junit.Test public void getters() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm().split()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split()); assertThat(key.encodedKey().split()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split()); assertThat(key.comment().split()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split()); }
@org.junit.Test public void getters() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.comment).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); }
@org.junit.Test public void getters() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(")); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(")); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(")); }
private static void assertParse(java.lang.StringBuilder authorizedKeys,java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1);java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parsedKeys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().account()).isEqualTo(accountId); assertThat(sshKey.get().id()).isEqualTo(seq); } seq++; } }
private static void assertParse(java.lang.StringBuilder authorizedKeys,java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1);java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parsedKeys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().account()).isEqualTo(accountId); assertThat(sshKey.get().id().get()).isEqualTo(seq); } seq++; } }
private static void assertParse(java.lang.StringBuilder authorizedKeys,java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1);java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parsedKeys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().account().get()).isEqualTo(accountId); assertThat(sshKey.get().id().get()).isEqualTo(seq); } seq++; } }
private static void assertParse(java.lang.StringBuilder authorizedKeys,java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1);java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parsedKeys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().account().getId()).isEqualTo(accountId); assertThat(sshKey.get().id().get()).isEqualTo(seq); } seq++; } }
private static void assertParse(java.lang.StringBuilder authorizedKeys,java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> expectedKeys) { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1);java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> parsedKeys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, authorizedKeys.toString()); assertThat(parsedKeys).containsExactlyElementsIn(expectedKeys); int seq = 1; for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> sshKey : parsedKeys) { if (sshKey.isPresent()) { assertThat(sshKey.get().account().get()).isEqualTo(accountId); assertThat(sshKey.get().id()).isEqualTo(seq); } seq++; } }
private staticjava.lang.String addInvalidKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(java.util.Optional.of(key)); return ((AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX) + (key.sshPublicKey())) + "\n"; }
private staticjava.lang.String addInvalidKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(java.util.Optional.of(key)); return ((AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX) + (key.sshPublicKey())); }
private staticjava.lang.String addInvalidKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(key); return ((AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX) + (key.sshPublicKey())) + "\n"; }
private staticjava.lang.String addInvalidKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(java.util.Optional.of(key)); return ((AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX) + (key.sshPublicKey()) + "\n"; }
private staticjava.lang.String addInvalidKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.createInvalid(keyId, pub); keys.add(java.util.Optional.of(key)); return ((AuthorizedKeys.INVALID_KEY_COMMENT_PREFIX) + (key.sshPublicKey()))); }
@org.junit.Test public void keyWithNewLines() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH_NEWLINES); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); }
@org.junit.Test public void keyWithNewLines() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH_NEWLINES); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(",")); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(",")); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(",")); }
@org.junit.Test public void keyWithNewLines() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH_NEWLINES); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(")); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); }
@org.junit.Test public void keyWithNewLines() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH_NEWLINES); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); assertThat(key.comment).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split("")); }
@org.junit.Test public void keyWithNewLines() throwsjava.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1_WITH_NEWLINES); assertThat(key.sshPublicKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.algorithm()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(',')); assertThat(key.encodedKey()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(',')); assertThat(key.comment()).isEqualTo(com.google.gerrit.server.account.AuthorizedKeysTest.KEY1.split(',')); }
private staticjava.lang.String addKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(java.util.Optional.of(key)); return (key.sshPublicKey()); }
private staticjava.lang.String addKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(java.util.Optional.of(key)); return (key.sshPublicKey()).toString(); }
private staticjava.lang.String addKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(java.util.Optional.of(key)); return (key.sshPublicKey())); }
private staticjava.lang.String addKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(key); return (key.sshPublicKey()) + "\n"; }
private staticjava.lang.String addKey(java.util.List<java.util.Optional<com.google.gerrit.server.account.AccountSshKey>> keys,java.lang.String pub) { com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(new com.google.gerrit.reviewdb.client.Account.Id(1), ((keys.size()) + 1)); com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(keyId, pub); keys.add(key); return (key.sshPublicKey()); }
private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().sshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(accountId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().sshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(accountId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
public com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().sshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(accountId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get(). sshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(accountId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
private com.google.gerrit.server.account.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (java.util.Optional<com.google.gerrit.server.account.AccountSshKey> key : keys) { if (key.isPresent()) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.server.account.AccountSshKey.Id keyId = new com.google.gerrit.server.account.AccountSshKey.Id(accountId, seq); com.google.gerrit.server.account.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(java.util.Optional.of(key)); return key; }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), false); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey()); }
private static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), false); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key) { return com.google.gerrit.server.account.AccountSshKey.create(key.id(), key.sshPublicKey(), true); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.server.account.AccountSshKey key);
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, true); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(id, sshPublicKey, false); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return create(id, sshPublicKey, true); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return create(id, sshPublicKey, false); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey) { return new com.google.gerrit.server.account.AccountSshKey(id, sshPublicKey, true); }
public Account.Id account() { return accountId; }
public Account.Id account() { return accountId(); }
public Account.Id account() { return account(); }
public Account.Id accountId() { return accountId(); }
public Account.Id account() { return account; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().id()); rsrc.getUser().getUserName().ifPresent(sshKeyCache::evict); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().id().get()); rsrc.getUser().getUserName().ifPresent(sshKeyCache::evict); return com.google.gerrit.extensions.restapi.Response.none(); }
java @java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().id()); rsrc.getUser().getUserName().ifPresent(sshKeyCache::evict); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().id()); rsrc.getUser().getUserName().ifPresent(sshKeyCache::evict); return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException,java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get())!= (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } authorizedKeys.deleteKey(rsrc.getUser().getAccountId(), rsrc.getSshKey().id()); rsrc.getUser().getUserName().ifPresent(sshKeyCache::evict); return com.google.gerrit.extensions.restapi.Response.empty(); }
privatejava.lang.String publicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = sshPublicKey(); if ((s!= null) && ((s.length()) > 0)) {java.lang.String[] parts = s.split(" "); if ((parts.length) > index) { return parts[index]; } } return defaultValue; }
privatejava.lang.String publicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = sshPublicKey(); if ((s!= null) && ((s.length()) > 0)) {java.lang.String[] parts = s.split("\\ "); if ((parts.length) > index) { return parts[index]; } } return defaultValue; }
privatejava.lang.String publicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = sshPublicKey(); if ((s!= null) && ((s.length()) > 0)) {java.lang.String[] parts = s.split(" "); if (parts.length) > index) { return parts[index]; } } return defaultValue; }
privatejava.lang.String publicKeyPart(int index,java.lang.String defaultValue) {java.lang.String s = sshPublicKey(); if ((s!= null) && ((s.length()) > 0)) { return s.split(" "); } return defaultValue; }
privatejava.lang.String publicKeyPart(int index,java.lang.String defaultValue) { return sshPublicKeyPart(index, defaultValue); }
private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id,java.lang.String keyFile) throwsjava.io.IOException {java.nio.file.Path p =java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw newjava.io.IOException(java.lang.String.format("Cannot add public SSH key: %s is not a file", keyFile)); }java.lang.String content = newjava.lang.String(java.nio.file.Files.readAllBytes(p),java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id,java.lang.String keyFile) throwsjava.io.IOException {java.nio.file.Path p =java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw newjava.io.IOException(java.lang.String.format("Cannot add public SSH key: %s is not a file", keyFile)); }java.lang.String content = newjava.lang.String(java.nio.file.Files.readAllBytes(p),java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
private com.ger.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id,java.lang.String keyFile) throwsjava.io.IOException {java.nio.file.Path p =java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw newjava.io.IOException(java.lang.String.format("Cannot add public SSH key: %s is not a file", keyFile)); }java.lang.String content = newjava.lang.String(java.nio.file.Files.readAllBytes(p),java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
public com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id,java.lang.String keyFile) throwsjava.io.IOException {java.nio.file.Path p =java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw newjava.io.IOException(java.lang.String.format("Cannot add public SSH key: %s is not a file", keyFile)); }java.lang.String content = newjava.lang.String(java.nio.file.Files.readAllBytes(p),java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.reviewdb.client.Account.Id id,java.lang.String keyFile) throwsjava.io.IOException {java.nio.file.Path p =java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw newjava.io.IOException(java.lang.String.format("Cannot add public SSH key: %s is not a file", keyFile)); }java.lang.String content = newjava.lang.String(java.nio.file.Files.readAllBytes(p),java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setId(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build(); }
private static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setId(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build(); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setId(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid(valid).build(); }
public static com.google.gerrit.server.account.AccountSshKey create (com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setId(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build(); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.server.account.AccountSshKey.Id id,java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setId(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid(valid); }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get())); keys = newjava.util.ArrayList(java.util.Collections.nCopies(o.max(newKeys).id().get(),java.util.Optional.empty())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id().get()) - 1),java.util.Optional.of(key)); } }
private void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get())); keys = newjava.util.ArrayList(java.util.Collections.nCopies(o.max(newKeys).id().get(),java.util.Optional.empty())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id().get()) - 1),java.util.Optional.of(key)); } }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id())); keys = newjava.util.ArrayList(java.util.Collections.nCopies(o.max(newKeys).id().get(),java.util.Optional.empty())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id().get()) - 1),java.util.Optional.of(key)); } }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get())); keys = newjava.util.ArrayList(java.util.Collections.nCopies(o.max(newKeys).id().get(),java.util.Optional.<com.google.gerrit.server.account.AccountSshKey>empty())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id().get()) - 1),java.util.Optional.of(key)); } }
public void setKeys(java.util.Collection<com.google.gerrit.server.account.AccountSshKey> newKeys) { com.google.common.collect.Ordering<com.google.gerrit.server.account.AccountSshKey> o = com.google.common.collect.Ordering.from(java.util.Comparator.comparing(( k) -> k.id().get())); keys = newjava.util.ArrayList(java.util.Collections.nCopies(o.max(newKeys).id().get(),java.util.Optional.empty())); for (com.google.gerrit.server.account.AccountSshKey key : newKeys) { keys.set(((key.id()) - 1),java.util.Optional.of(key)); } }
java @java.lang.Override public void start() { if ((executor) == null) { return; }java.lang.Thread scheduler = newjava.lang.Thread(() -> { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(() -> cache.get(name)); } executor.shutdown(); try { executor.awaitTermination(java.lang.Long.MAX_VALUE,java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Finished loading project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("Interrupted while waiting for project cache to load"); } }); scheduler.setName("ProjectCacheWarmer"); scheduler.setDaemon(true); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Started project cache"); scheduler.start(); }
@java.lang.Override public void start() { if ((executor) == null) { return; }java.lang.Thread scheduler = newjava.lang.Thread(() -> { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(() -> cache.get(name)); } executor.shutdown(); try { executor.awaitTermination(java.lang.Long.MAX_VALUE,java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Finished loading project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("Interrupted while waiting for project cache to load"); } }); scheduler.setName("ProjectCacheWarmer"); scheduler.setDaemon(true); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Started project cache"); scheduler.start(); }
java @java.lang.Override public void start() { if ((executor) == null) { return; }java.lang.Thread scheduler = newjava.lang.Thread(() -> { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(() -> cache.get(name)); } executor.shutdown(); try { executor.awaitTermination(java.lang.Long.MAX_VALUE,java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Finished loading project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("Interrupted while waiting for project cache to load"); } }); scheduler.setName("ProjectCacheWarmer"); scheduler.setDaemon(true); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Warming up project cache"); scheduler.start(); }
@java.lang.Override public void start() { if ((executor) == null) { return; }java.lang.Thread scheduler = newjava.lang.Thread(() -> { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(() -> cache.get(name))); } executor.shutdown(); try { executor.awaitTermination(java.lang.Long.MAX_VALUE,java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Finished loading project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("Interrupted while waiting for project cache to load"); } }); scheduler.setName("ProjectCacheWarmer"); scheduler.setDaemon(true); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Started project cache"); scheduler.start(); }
java @java.lang.Override public void start() { if ((executor) == null) { return; }java.lang.Thread scheduler = newjava.lang.Thread(() -> { for (com.google.gerrit.reviewdb.client.Project.NameKey name : cache.all()) { executor.execute(() -> cache.get(name)); } executor.shutdown(); try { executor.awaitTermination(java.lang.Long.MAX_VALUE,java.util.concurrent.TimeUnit.MILLISECONDS); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Finished loading project cache"); } catch (java.lang.InterruptedException e) { com.google.gerrit.server.project.ProjectCacheWarmer.log.warn("Interrupted while waiting for project cache to load"); } }); scheduler.setName("ProjectCacheWarmer"); scheduler.setDaemon(true); com.google.gerrit.server.project.ProjectCacheWarmer.log.info("Started project cache scheduler"); scheduler.start(); }
javajava.lang.String[] sshAllows() { return sshAllows; }
.java.lang.String[] sshAllows() { return sshAllows; }
javajava.lang.String[] sshAllows();
.java.lang.String[] sshAllows();
.
@org.junit.Test public void assignee() throwsjava.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("is:assigned", change1); assertQuery("-is:assigned", change2); assertQuery("is:unassigned", change2); assertQuery("-is:unassigned", change1); assertQuery("assignee:" + (user.getUserName())), change1); assertQuery("-assignee:" + (user.getUserName())), change2); }
@org.junit.Test public void assignee() throwsjava.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("is:assigned", change1); assertQuery("-is:assigned", change2); assertQuery("is:unassigned", change2); assertQuery("-is:unassigned", change1); assertQuery(("assignee:" + (user.getUserName())), change1); assertQuery(("-assignee:" + (user.getUserName())), change2); }
@org.junit.Test public void assignee() throwsjava.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("is:assigned", change1); assertQuery("-is:assigned", change2); assertQuery("is:unassigned", change2); assertQuery("-is:unassigned", change1); assertQuery("assignee:" + (user.getUserName())), change1); assertQuery(("-assignee:" + (user.getUserName())), change2); }
@org.junit.Test public void assignee() throwsjava.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("is:assigned", change1); assertQuery("-is:assigned", change2); assertQuery("is:unassigned", change2); assertQuery("-is:unassigned", change1); assertQuery(("assignee:" + (user.getUserName())), change1); assertQuery("-assignee:" + (user.getUserName())), change2); }
@org.junit.Test public void assignee() throwsjava.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); com.google.gerrit.extensions.api.changes.AssigneeInput input = new com.google.gerrit.extensions.api.changes.AssigneeInput(); input.assignee = user.getUserName().get(); gApi.changes().id(change1.getChangeId()).setAssignee(input); assertQuery("is:assigned", change1); assertQuery("-is:assigned", change2); assertQuery("is:unassigned", change2); assertQuery("-is:unassigned", change1); assertQuery("assignee:" + (user.getUserName())), change1); assertQuery("-assignee:" + (user.getUserName())), change2); assertQuery("assignee:" + (user.getUserName())), change2); }
